
lab4_LCD_Controller.elf:     file format elf32-littlenios2
lab4_LCD_Controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00003788 memsz 0x00003788 flags r-x
    LOAD off    0x000047a8 vaddr 0x101037a8 paddr 0x10104e70 align 2**12
         filesz 0x000016c8 memsz 0x000016c8 flags rw-
    LOAD off    0x00006538 vaddr 0x10106538 paddr 0x10106538 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003520  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  10103764  10103764  00004764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016c8  101037a8  10104e70  000047a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  10106538  10106538  00006538  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10106658  10106658  00005e70  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00005e70  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000678  00000000  00000000  00005e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000898a  00000000  00000000  00006510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ed8  00000000  00000000  0000ee9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000318b  00000000  00000000  00011d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d24  00000000  00000000  00014f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001dda  00000000  00000000  00015c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c3e  00000000  00000000  000179fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001863c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  000186a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001a65e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001a661  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001a66d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001a66e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001a66f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001a67a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001a685  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0001a690  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000082  00000000  00000000  0001a69a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  0001a71c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00280540  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10103764 l    d  .rodata	00000000 .rodata
101037a8 l    d  .rwdata	00000000 .rwdata
10106538 l    d  .bss	00000000 .bss
10106658 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/franc/Desktop/epfl/MA1/embeded_system/lab4/lab4_correct_template/lab_4_project_template/lab_4_project_template/sw/nios/lab4_LCD_Controller_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 LCD_control.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
10100cd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10100e70 l     F .text	00000034 alt_dev_reg
101037a8 l     O .rwdata	00001060 jtag_uart_0
10104808 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10101154 l     F .text	0000020c altera_avalon_jtag_uart_irq
10101360 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10104dfc l     O .rwdata	00000009 hcinfo.2538
10104e08 l     O .rwdata	0000000a hcinfo.2551
10104e14 l     O .rwdata	00000009 hcinfo.2560
10104e20 l     O .rwdata	0000000a hcinfo.2573
10104e2c l     O .rwdata	0000000a hcinfo.2586
10104e38 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
101020a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
101021f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10102220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10102714 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10102854 l     F .text	0000003c alt_get_errno
10102890 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
101049d8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
10106550 g     O .bss	00000004 alt_instruction_exception_handler
10100dc4 g     F .text	0000007c alt_main
10106558 g     O .bss	00000100 alt_irq
10104e70 g       *ABS*	00000000 __flash_rwdata_start
10100ad8 g     F .text	00000100 write_image_1
10101998 g     F .text	0000011c alt_hostfs_open
10102cb0 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10106554 g     O .bss	00000004 errno
1010653c g     O .bss	00000004 alt_argv
1010cdfc g       *ABS*	00000000 _gp
10100e40 g     F .text	00000030 usleep
10104858 g     O .rwdata	00000180 alt_fd_list
10101bd0 g     F .text	00000068 alt_hostfs_seek
10102cd4 g     F .text	00000090 alt_find_dev
10103104 g     F .text	00000148 memcpy
101023c0 g     F .text	00000080 alt_fs_reg
101027d8 g     F .text	0000007c alt_io_redirect
10103764 g       *ABS*	00000000 __DTOR_END__
10102fa0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10101558 g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10103674 g     F .text	00000064 .hidden __udivsi3
10102f10 g     F .text	00000090 alt_icache_flush
10101af8 g     F .text	0000006c alt_hostfs_read
10104e54 g     O .rwdata	00000004 alt_max_fd
101002e0 g     F .text	00000758 LCD_init
10104e68 g     O .rwdata	00000004 _global_impure_ptr
10106658 g       *ABS*	00000000 __bss_end
10102624 g     F .text	000000f0 alt_iic_isr_register
10102ba8 g     F .text	00000108 alt_tick
101025d8 g     F .text	0000004c alt_ic_irq_enabled
10102b0c g     F .text	0000009c alt_alarm_stop
10106544 g     O .bss	00000004 alt_irq_active
10101ab4 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10104830 g     O .rwdata	00000028 alt_dev_null
101021ac g     F .text	00000048 alt_dcache_flush_all
10104e70 g       *ABS*	00000000 __ram_rwdata_end
10104e4c g     O .rwdata	00000008 alt_dev_list
101037a8 g       *ABS*	00000000 __ram_rodata_end
10100bd8 g     F .text	00000100 write_image_2
101036d8 g     F .text	00000058 .hidden __umodsi3
10106658 g       *ABS*	00000000 end
10101094 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10103764 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
10101774 g     F .text	00000224 altera_avalon_jtag_uart_write
101033fc g     F .text	00000180 __call_exitprocs
10100244 g     F .text	0000004c _start
10106548 g     O .bss	00000004 _alt_tick_rate
1010654c g     O .bss	00000004 _alt_nticks
10100edc g     F .text	00000054 alt_sys_init
101032e4 g     F .text	00000118 __register_exitproc
10101400 g     F .text	00000068 altera_avalon_jtag_uart_close
101037a8 g       *ABS*	00000000 __ram_rwdata_start
10103764 g       *ABS*	00000000 __ram_rodata_start
10100f30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10102e6c g     F .text	000000a4 alt_get_fd
10101f48 g     F .text	00000158 alt_busy_sleep
10103088 g     F .text	0000007c memcmp
10100ff0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10106658 g       *ABS*	00000000 __alt_stack_base
10101040 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102d64 g     F .text	00000108 alt_find_file
1010225c g     F .text	000000a4 alt_dev_llist_insert
10106538 g       *ABS*	00000000 __bss_start
10100a38 g     F .text	000000a0 main
10106540 g     O .bss	00000004 alt_envp
10100f90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10104e58 g     O .rwdata	00000004 alt_errno
1010357c g     F .text	00000084 .hidden __divsi3
10100290 g     F .text	00000050 Delay_Ms
10103764 g       *ABS*	00000000 __CTOR_END__
10103764 g       *ABS*	00000000 __flash_rodata_start
10103764 g       *ABS*	00000000 __DTOR_LIST__
10100ea4 g     F .text	00000038 alt_irq_init
10102aa8 g     F .text	00000064 alt_release_fd
1010303c g     F .text	00000014 atexit
10104e6c g     O .rwdata	00000004 _impure_ptr
10106538 g     O .bss	00000004 alt_argc
10102360 g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
10104e44 g     O .rwdata	00000008 alt_fs_list
10101b64 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10102474 g     F .text	00000050 alt_ic_isr_register
10104e70 g       *ABS*	00000000 _edata
10106658 g       *ABS*	00000000 _end
10100244 g       *ABS*	00000000 __ram_exceptions_end
10101468 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1010254c g     F .text	0000008c alt_ic_irq_disable
10103050 g     F .text	00000038 exit
10103600 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10103730 g     F .text	00000034 _exit
10101e1c g     F .text	0000012c alt_alarm_start
1010324c g     F .text	00000098 strlen
10102954 g     F .text	00000154 open
10102440 g     F .text	00000034 alt_icache_flush_all
10104e5c g     O .rwdata	00000004 alt_priority_mask
101024c4 g     F .text	00000088 alt_ic_irq_enable
10104e60 g     O .rwdata	00000008 alt_alarm_list
10102300 g     F .text	00000060 _do_ctors
101020dc g     F .text	000000d0 close
10100d40 g     F .text	00000084 alt_load
10101c38 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840434 	movhi	r2,4112
10100140:	10995604 	addi	r2,r2,25944
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840434 	movhi	r2,4112
10100158:	10995604 	addi	r2,r2,25944
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a5d517 	ldw	r2,-26796(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a5d517 	ldw	r2,-26796(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
10100260:	d6b37f14 	ori	gp,gp,52732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100268:	10994e14 	ori	r2,r2,25912

    movhi r3, %hi(__bss_end)
1010026c:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
10100270:	18d99614 	ori	r3,r3,26200

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	0100d400 	call	10100d40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	0100dc40 	call	10100dc4 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <Delay_Ms>:
#define LCD_WR_DATA(value)	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, 0b0000, value)

#define CLK_frequ		50000	//50 MHz/1000

void Delay_Ms(alt_u16 count_ms)
{
10100290:	defffd04 	addi	sp,sp,-12
10100294:	dfc00215 	stw	ra,8(sp)
10100298:	df000115 	stw	fp,4(sp)
1010029c:	df000104 	addi	fp,sp,4
101002a0:	2005883a 	mov	r2,r4
101002a4:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
101002a8:	00000206 	br	101002b4 <Delay_Ms+0x24>
    {
        usleep(1000);
101002ac:	0100fa04 	movi	r4,1000
101002b0:	0100e400 	call	10100e40 <usleep>

#define CLK_frequ		50000	//50 MHz/1000

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
101002b4:	e0bfff0b 	ldhu	r2,-4(fp)
101002b8:	10ffffc4 	addi	r3,r2,-1
101002bc:	e0ffff0d 	sth	r3,-4(fp)
101002c0:	10bfffcc 	andi	r2,r2,65535
101002c4:	103ff91e 	bne	r2,zero,101002ac <__alt_data_end+0xfffe02ac>
    {
        usleep(1000);
    }
}
101002c8:	0001883a 	nop
101002cc:	e037883a 	mov	sp,fp
101002d0:	dfc00117 	ldw	ra,4(sp)
101002d4:	df000017 	ldw	fp,0(sp)
101002d8:	dec00204 	addi	sp,sp,8
101002dc:	f800283a 	ret

101002e0 <LCD_init>:
			__asm__("nop");
	}

}
*/
void LCD_init() {
101002e0:	defffe04 	addi	sp,sp,-8
101002e4:	dfc00115 	stw	ra,4(sp)
101002e8:	df000015 	stw	fp,0(sp)
101002ec:	d839883a 	mov	fp,sp

	alt_u16 data1, datat2;
	alt_u16 data3, data4;

	Set_LCD_RST;
101002f0:	00c00044 	movi	r3,1
101002f4:	00840034 	movhi	r2,4096
101002f8:	10820b04 	addi	r2,r2,2092
101002fc:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
10100300:	01000044 	movi	r4,1
10100304:	01002900 	call	10100290 <Delay_Ms>
	Clr_LCD_RST;
10100308:	0007883a 	mov	r3,zero
1010030c:	00840034 	movhi	r2,4096
10100310:	10820b04 	addi	r2,r2,2092
10100314:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);
10100318:	01000284 	movi	r4,10
1010031c:	01002900 	call	10100290 <Delay_Ms>
	Set_LCD_RST;
10100320:	00c00044 	movi	r3,1
10100324:	00840034 	movhi	r2,4096
10100328:	10820b04 	addi	r2,r2,2092
1010032c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);
10100330:	01001e04 	movi	r4,120
10100334:	01002900 	call	10100290 <Delay_Ms>

	LCD_WR_REG(0x00000011);	//Exit sleep
10100338:	00c00444 	movi	r3,17
1010033c:	00840034 	movhi	r2,4096
10100340:	10820804 	addi	r2,r2,2080
10100344:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000CF); 		//Power Control B
10100348:	00c033c4 	movi	r3,207
1010034c:	00840034 	movhi	r2,4096
10100350:	10820804 	addi	r2,r2,2080
10100354:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010000); // Always 0x00
10100358:	00c00074 	movhi	r3,1
1010035c:	00840034 	movhi	r2,4096
10100360:	10820804 	addi	r2,r2,2080
10100364:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010081); //
10100368:	00c00074 	movhi	r3,1
1010036c:	18c02044 	addi	r3,r3,129
10100370:	00840034 	movhi	r2,4096
10100374:	10820804 	addi	r2,r2,2080
10100378:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X000100c0);
1010037c:	00c00074 	movhi	r3,1
10100380:	18c03004 	addi	r3,r3,192
10100384:	00840034 	movhi	r2,4096
10100388:	10820804 	addi	r2,r2,2080
1010038c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000ED); // Power on sequence control
10100390:	00c03b44 	movi	r3,237
10100394:	00840034 	movhi	r2,4096
10100398:	10820804 	addi	r2,r2,2080
1010039c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010064); // Soft Start Keep 1 frame
101003a0:	00c00074 	movhi	r3,1
101003a4:	18c01904 	addi	r3,r3,100
101003a8:	00840034 	movhi	r2,4096
101003ac:	10820804 	addi	r2,r2,2080
101003b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010003); //
101003b4:	00c00074 	movhi	r3,1
101003b8:	18c000c4 	addi	r3,r3,3
101003bc:	00840034 	movhi	r2,4096
101003c0:	10820804 	addi	r2,r2,2080
101003c4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00010012);
101003c8:	00c00074 	movhi	r3,1
101003cc:	18c00484 	addi	r3,r3,18
101003d0:	00840034 	movhi	r2,4096
101003d4:	10820804 	addi	r2,r2,2080
101003d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00010081);
101003dc:	00c00074 	movhi	r3,1
101003e0:	18c02044 	addi	r3,r3,129
101003e4:	00840034 	movhi	r2,4096
101003e8:	10820804 	addi	r2,r2,2080
101003ec:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000E8); // Driver timing control A
101003f0:	00c03a04 	movi	r3,232
101003f4:	00840034 	movhi	r2,4096
101003f8:	10820804 	addi	r2,r2,2080
101003fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010085);
10100400:	00c00074 	movhi	r3,1
10100404:	18c02144 	addi	r3,r3,133
10100408:	00840034 	movhi	r2,4096
1010040c:	10820804 	addi	r2,r2,2080
10100410:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
10100414:	00c00074 	movhi	r3,1
10100418:	18c00044 	addi	r3,r3,1
1010041c:	00840034 	movhi	r2,4096
10100420:	10820804 	addi	r2,r2,2080
10100424:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010798);
10100428:	00c00074 	movhi	r3,1
1010042c:	18c1e604 	addi	r3,r3,1944
10100430:	00840034 	movhi	r2,4096
10100434:	10820804 	addi	r2,r2,2080
10100438:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000CB); // Power control A
1010043c:	00c032c4 	movi	r3,203
10100440:	00840034 	movhi	r2,4096
10100444:	10820804 	addi	r2,r2,2080
10100448:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010039);
1010044c:	00c00074 	movhi	r3,1
10100450:	18c00e44 	addi	r3,r3,57
10100454:	00840034 	movhi	r2,4096
10100458:	10820804 	addi	r2,r2,2080
1010045c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001002C);
10100460:	00c00074 	movhi	r3,1
10100464:	18c00b04 	addi	r3,r3,44
10100468:	00840034 	movhi	r2,4096
1010046c:	10820804 	addi	r2,r2,2080
10100470:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100474:	00c00074 	movhi	r3,1
10100478:	00840034 	movhi	r2,4096
1010047c:	10820804 	addi	r2,r2,2080
10100480:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010034);
10100484:	00c00074 	movhi	r3,1
10100488:	18c00d04 	addi	r3,r3,52
1010048c:	00840034 	movhi	r2,4096
10100490:	10820804 	addi	r2,r2,2080
10100494:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010002);
10100498:	00c00074 	movhi	r3,1
1010049c:	18c00084 	addi	r3,r3,2
101004a0:	00840034 	movhi	r2,4096
101004a4:	10820804 	addi	r2,r2,2080
101004a8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F7); // Pump ratio control
101004ac:	00c03dc4 	movi	r3,247
101004b0:	00840034 	movhi	r2,4096
101004b4:	10820804 	addi	r2,r2,2080
101004b8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010020);
101004bc:	00c00074 	movhi	r3,1
101004c0:	18c00804 	addi	r3,r3,32
101004c4:	00840034 	movhi	r2,4096
101004c8:	10820804 	addi	r2,r2,2080
101004cc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000EA); // Driver timing control B
101004d0:	00c03a84 	movi	r3,234
101004d4:	00840034 	movhi	r2,4096
101004d8:	10820804 	addi	r2,r2,2080
101004dc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101004e0:	00c00074 	movhi	r3,1
101004e4:	00840034 	movhi	r2,4096
101004e8:	10820804 	addi	r2,r2,2080
101004ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101004f0:	00c00074 	movhi	r3,1
101004f4:	00840034 	movhi	r2,4096
101004f8:	10820804 	addi	r2,r2,2080
101004fc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B1); // Frame Control (In Normal Mode)
10100500:	00c02c44 	movi	r3,177
10100504:	00840034 	movhi	r2,4096
10100508:	10820804 	addi	r2,r2,2080
1010050c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100510:	00c00074 	movhi	r3,1
10100514:	00840034 	movhi	r2,4096
10100518:	10820804 	addi	r2,r2,2080
1010051c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001001b);
10100520:	00c00074 	movhi	r3,1
10100524:	18c006c4 	addi	r3,r3,27
10100528:	00840034 	movhi	r2,4096
1010052c:	10820804 	addi	r2,r2,2080
10100530:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B6); // Display Function Control
10100534:	00c02d84 	movi	r3,182
10100538:	00840034 	movhi	r2,4096
1010053c:	10820804 	addi	r2,r2,2080
10100540:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000A);
10100544:	00c00074 	movhi	r3,1
10100548:	18c00284 	addi	r3,r3,10
1010054c:	00840034 	movhi	r2,4096
10100550:	10820804 	addi	r2,r2,2080
10100554:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100A2);
10100558:	00c00074 	movhi	r3,1
1010055c:	18c02884 	addi	r3,r3,162
10100560:	00840034 	movhi	r2,4096
10100564:	10820804 	addi	r2,r2,2080
10100568:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C0); //Power control 1
1010056c:	00c03004 	movi	r3,192
10100570:	00840034 	movhi	r2,4096
10100574:	10820804 	addi	r2,r2,2080
10100578:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010005); //VRH[5:0]
1010057c:	00c00074 	movhi	r3,1
10100580:	18c00144 	addi	r3,r3,5
10100584:	00840034 	movhi	r2,4096
10100588:	10820804 	addi	r2,r2,2080
1010058c:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x000000C1); //Power control 2
10100590:	00c03044 	movi	r3,193
10100594:	00840034 	movhi	r2,4096
10100598:	10820804 	addi	r2,r2,2080
1010059c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010011); //SAP[2:0];BT[3:0]
101005a0:	00c00074 	movhi	r3,1
101005a4:	18c00444 	addi	r3,r3,17
101005a8:	00840034 	movhi	r2,4096
101005ac:	10820804 	addi	r2,r2,2080
101005b0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C5); //VCM control 1
101005b4:	00c03144 	movi	r3,197
101005b8:	00840034 	movhi	r2,4096
101005bc:	10820804 	addi	r2,r2,2080
101005c0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010045); //3F
101005c4:	00c00074 	movhi	r3,1
101005c8:	18c01144 	addi	r3,r3,69
101005cc:	00840034 	movhi	r2,4096
101005d0:	10820804 	addi	r2,r2,2080
101005d4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010045); //3
101005d8:	00c00074 	movhi	r3,1
101005dc:	18c01144 	addi	r3,r3,69
101005e0:	00840034 	movhi	r2,4096
101005e4:	10820804 	addi	r2,r2,2080
101005e8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C7); //VCM control 2
101005ec:	00c031c4 	movi	r3,199
101005f0:	00840034 	movhi	r2,4096
101005f4:	10820804 	addi	r2,r2,2080
101005f8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100a2);
101005fc:	00c00074 	movhi	r3,1
10100600:	18c02884 	addi	r3,r3,162
10100604:	00840034 	movhi	r2,4096
10100608:	10820804 	addi	r2,r2,2080
1010060c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000036); // Memory Access Control
10100610:	00c00d84 	movi	r3,54
10100614:	00840034 	movhi	r2,4096
10100618:	10820804 	addi	r2,r2,2080
1010061c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);// BGR order
10100620:	00c00074 	movhi	r3,1
10100624:	18c00204 	addi	r3,r3,8
10100628:	00840034 	movhi	r2,4096
1010062c:	10820804 	addi	r2,r2,2080
10100630:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F2); // Enable 3G
10100634:	00c03c84 	movi	r3,242
10100638:	00840034 	movhi	r2,4096
1010063c:	10820804 	addi	r2,r2,2080
10100640:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000); // 3Gamma Function Disable
10100644:	00c00074 	movhi	r3,1
10100648:	00840034 	movhi	r2,4096
1010064c:	10820804 	addi	r2,r2,2080
10100650:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x00000026); // Gamma Set
10100654:	00c00984 	movi	r3,38
10100658:	00840034 	movhi	r2,4096
1010065c:	10820804 	addi	r2,r2,2080
10100660:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001); // Gamma curve selected
10100664:	00c00074 	movhi	r3,1
10100668:	18c00044 	addi	r3,r3,1
1010066c:	00840034 	movhi	r2,4096
10100670:	10820804 	addi	r2,r2,2080
10100674:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E0); // Positive Gamma Correction, Set Gamma
10100678:	00c03804 	movi	r3,224
1010067c:	00840034 	movhi	r2,4096
10100680:	10820804 	addi	r2,r2,2080
10100684:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000F);
10100688:	00c00074 	movhi	r3,1
1010068c:	18c003c4 	addi	r3,r3,15
10100690:	00840034 	movhi	r2,4096
10100694:	10820804 	addi	r2,r2,2080
10100698:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010026);
1010069c:	00c00074 	movhi	r3,1
101006a0:	18c00984 	addi	r3,r3,38
101006a4:	00840034 	movhi	r2,4096
101006a8:	10820804 	addi	r2,r2,2080
101006ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010024);
101006b0:	00c00074 	movhi	r3,1
101006b4:	18c00904 	addi	r3,r3,36
101006b8:	00840034 	movhi	r2,4096
101006bc:	10820804 	addi	r2,r2,2080
101006c0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000b);
101006c4:	00c00074 	movhi	r3,1
101006c8:	18c002c4 	addi	r3,r3,11
101006cc:	00840034 	movhi	r2,4096
101006d0:	10820804 	addi	r2,r2,2080
101006d4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000E);
101006d8:	00c00074 	movhi	r3,1
101006dc:	18c00384 	addi	r3,r3,14
101006e0:	00840034 	movhi	r2,4096
101006e4:	10820804 	addi	r2,r2,2080
101006e8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);
101006ec:	00c00074 	movhi	r3,1
101006f0:	18c00204 	addi	r3,r3,8
101006f4:	00840034 	movhi	r2,4096
101006f8:	10820804 	addi	r2,r2,2080
101006fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001004b);
10100700:	00c00074 	movhi	r3,1
10100704:	18c012c4 	addi	r3,r3,75
10100708:	00840034 	movhi	r2,4096
1010070c:	10820804 	addi	r2,r2,2080
10100710:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100a8);
10100714:	00c00074 	movhi	r3,1
10100718:	18c02a04 	addi	r3,r3,168
1010071c:	00840034 	movhi	r2,4096
10100720:	10820804 	addi	r2,r2,2080
10100724:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001003b);
10100728:	00c00074 	movhi	r3,1
1010072c:	18c00ec4 	addi	r3,r3,59
10100730:	00840034 	movhi	r2,4096
10100734:	10820804 	addi	r2,r2,2080
10100738:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000a);
1010073c:	00c00074 	movhi	r3,1
10100740:	18c00284 	addi	r3,r3,10
10100744:	00840034 	movhi	r2,4096
10100748:	10820804 	addi	r2,r2,2080
1010074c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010014);
10100750:	00c00074 	movhi	r3,1
10100754:	18c00504 	addi	r3,r3,20
10100758:	00840034 	movhi	r2,4096
1010075c:	10820804 	addi	r2,r2,2080
10100760:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010006);
10100764:	00c00074 	movhi	r3,1
10100768:	18c00184 	addi	r3,r3,6
1010076c:	00840034 	movhi	r2,4096
10100770:	10820804 	addi	r2,r2,2080
10100774:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010010);
10100778:	00c00074 	movhi	r3,1
1010077c:	18c00404 	addi	r3,r3,16
10100780:	00840034 	movhi	r2,4096
10100784:	10820804 	addi	r2,r2,2080
10100788:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010009);
1010078c:	00c00074 	movhi	r3,1
10100790:	18c00244 	addi	r3,r3,9
10100794:	00840034 	movhi	r2,4096
10100798:	10820804 	addi	r2,r2,2080
1010079c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101007a0:	00c00074 	movhi	r3,1
101007a4:	00840034 	movhi	r2,4096
101007a8:	10820804 	addi	r2,r2,2080
101007ac:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E1); //Negative Gamma Correction, Set Gamma
101007b0:	00c03844 	movi	r3,225
101007b4:	00840034 	movhi	r2,4096
101007b8:	10820804 	addi	r2,r2,2080
101007bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101007c0:	00c00074 	movhi	r3,1
101007c4:	00840034 	movhi	r2,4096
101007c8:	10820804 	addi	r2,r2,2080
101007cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001001c);
101007d0:	00c00074 	movhi	r3,1
101007d4:	18c00704 	addi	r3,r3,28
101007d8:	00840034 	movhi	r2,4096
101007dc:	10820804 	addi	r2,r2,2080
101007e0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010020);
101007e4:	00c00074 	movhi	r3,1
101007e8:	18c00804 	addi	r3,r3,32
101007ec:	00840034 	movhi	r2,4096
101007f0:	10820804 	addi	r2,r2,2080
101007f4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010004);
101007f8:	00c00074 	movhi	r3,1
101007fc:	18c00104 	addi	r3,r3,4
10100800:	00840034 	movhi	r2,4096
10100804:	10820804 	addi	r2,r2,2080
10100808:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010010);
1010080c:	00c00074 	movhi	r3,1
10100810:	18c00404 	addi	r3,r3,16
10100814:	00840034 	movhi	r2,4096
10100818:	10820804 	addi	r2,r2,2080
1010081c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);
10100820:	00c00074 	movhi	r3,1
10100824:	18c00204 	addi	r3,r3,8
10100828:	00840034 	movhi	r2,4096
1010082c:	10820804 	addi	r2,r2,2080
10100830:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010034);
10100834:	00c00074 	movhi	r3,1
10100838:	18c00d04 	addi	r3,r3,52
1010083c:	00840034 	movhi	r2,4096
10100840:	10820804 	addi	r2,r2,2080
10100844:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010047);
10100848:	00c00074 	movhi	r3,1
1010084c:	18c011c4 	addi	r3,r3,71
10100850:	00840034 	movhi	r2,4096
10100854:	10820804 	addi	r2,r2,2080
10100858:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010044);
1010085c:	00c00074 	movhi	r3,1
10100860:	18c01104 	addi	r3,r3,68
10100864:	00840034 	movhi	r2,4096
10100868:	10820804 	addi	r2,r2,2080
1010086c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010005);
10100870:	00c00074 	movhi	r3,1
10100874:	18c00144 	addi	r3,r3,5
10100878:	00840034 	movhi	r2,4096
1010087c:	10820804 	addi	r2,r2,2080
10100880:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000b);
10100884:	00c00074 	movhi	r3,1
10100888:	18c002c4 	addi	r3,r3,11
1010088c:	00840034 	movhi	r2,4096
10100890:	10820804 	addi	r2,r2,2080
10100894:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010009);
10100898:	00c00074 	movhi	r3,1
1010089c:	18c00244 	addi	r3,r3,9
101008a0:	00840034 	movhi	r2,4096
101008a4:	10820804 	addi	r2,r2,2080
101008a8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001002f);
101008ac:	00c00074 	movhi	r3,1
101008b0:	18c00bc4 	addi	r3,r3,47
101008b4:	00840034 	movhi	r2,4096
101008b8:	10820804 	addi	r2,r2,2080
101008bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010036);
101008c0:	00c00074 	movhi	r3,1
101008c4:	18c00d84 	addi	r3,r3,54
101008c8:	00840034 	movhi	r2,4096
101008cc:	10820804 	addi	r2,r2,2080
101008d0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000f);
101008d4:	00c00074 	movhi	r3,1
101008d8:	18c003c4 	addi	r3,r3,15
101008dc:	00840034 	movhi	r2,4096
101008e0:	10820804 	addi	r2,r2,2080
101008e4:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002A); // Column Address Set
101008e8:	00c00a84 	movi	r3,42
101008ec:	00840034 	movhi	r2,4096
101008f0:	10820804 	addi	r2,r2,2080
101008f4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101008f8:	00c00074 	movhi	r3,1
101008fc:	00840034 	movhi	r2,4096
10100900:	10820804 	addi	r2,r2,2080
10100904:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100908:	00c00074 	movhi	r3,1
1010090c:	00840034 	movhi	r2,4096
10100910:	10820804 	addi	r2,r2,2080
10100914:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100918:	00c00074 	movhi	r3,1
1010091c:	00840034 	movhi	r2,4096
10100920:	10820804 	addi	r2,r2,2080
10100924:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100ef);
10100928:	00c00074 	movhi	r3,1
1010092c:	18c03bc4 	addi	r3,r3,239
10100930:	00840034 	movhi	r2,4096
10100934:	10820804 	addi	r2,r2,2080
10100938:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002B); // Page Address Set
1010093c:	00c00ac4 	movi	r3,43
10100940:	00840034 	movhi	r2,4096
10100944:	10820804 	addi	r2,r2,2080
10100948:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
1010094c:	00c00074 	movhi	r3,1
10100950:	00840034 	movhi	r2,4096
10100954:	10820804 	addi	r2,r2,2080
10100958:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
1010095c:	00c00074 	movhi	r3,1
10100960:	00840034 	movhi	r2,4096
10100964:	10820804 	addi	r2,r2,2080
10100968:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
1010096c:	00c00074 	movhi	r3,1
10100970:	18c00044 	addi	r3,r3,1
10100974:	00840034 	movhi	r2,4096
10100978:	10820804 	addi	r2,r2,2080
1010097c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001003f);
10100980:	00c00074 	movhi	r3,1
10100984:	18c00fc4 	addi	r3,r3,63
10100988:	00840034 	movhi	r2,4096
1010098c:	10820804 	addi	r2,r2,2080
10100990:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000003A); // COLMOD: Pixel Format Set
10100994:	00c00e84 	movi	r3,58
10100998:	00840034 	movhi	r2,4096
1010099c:	10820804 	addi	r2,r2,2080
101009a0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010055);
101009a4:	00c00074 	movhi	r3,1
101009a8:	18c01544 	addi	r3,r3,85
101009ac:	00840034 	movhi	r2,4096
101009b0:	10820804 	addi	r2,r2,2080
101009b4:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000f6); // Interface Control
101009b8:	00c03d84 	movi	r3,246
101009bc:	00840034 	movhi	r2,4096
101009c0:	10820804 	addi	r2,r2,2080
101009c4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
101009c8:	00c00074 	movhi	r3,1
101009cc:	18c00044 	addi	r3,r3,1
101009d0:	00840034 	movhi	r2,4096
101009d4:	10820804 	addi	r2,r2,2080
101009d8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010030);
101009dc:	00c00074 	movhi	r3,1
101009e0:	18c00c04 	addi	r3,r3,48
101009e4:	00840034 	movhi	r2,4096
101009e8:	10820804 	addi	r2,r2,2080
101009ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101009f0:	00c00074 	movhi	r3,1
101009f4:	00840034 	movhi	r2,4096
101009f8:	10820804 	addi	r2,r2,2080
101009fc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000029); //display on
10100a00:	00c00a44 	movi	r3,41
10100a04:	00840034 	movhi	r2,4096
10100a08:	10820804 	addi	r2,r2,2080
10100a0c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x0000002c); // 0x2C
10100a10:	00c00b04 	movi	r3,44
10100a14:	00840034 	movhi	r2,4096
10100a18:	10820804 	addi	r2,r2,2080
10100a1c:	10c00035 	stwio	r3,0(r2)

}
10100a20:	0001883a 	nop
10100a24:	e037883a 	mov	sp,fp
10100a28:	dfc00117 	ldw	ra,4(sp)
10100a2c:	df000017 	ldw	fp,0(sp)
10100a30:	dec00204 	addi	sp,sp,8
10100a34:	f800283a 	ret

10100a38 <main>:

//function to load an image on the SD card
void write_image_1();
void write_image_2();
int main()
{
10100a38:	defffd04 	addi	sp,sp,-12
10100a3c:	dfc00215 	stw	ra,8(sp)
10100a40:	df000115 	stw	fp,4(sp)
10100a44:	df000104 	addi	fp,sp,4
	//write an image to memory
	write_image_1();
10100a48:	0100ad80 	call	10100ad8 <write_image_1>
	//initialize the LCD
	LCD_init();
10100a4c:	01002e00 	call	101002e0 <LCD_init>

	//tells the LCD to display the written image
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, ADDRESS_REG, HPS_0_BRIDGES_BASE);
10100a50:	0007883a 	mov	r3,zero
10100a54:	00840034 	movhi	r2,4096
10100a58:	10820904 	addi	r2,r2,2084
10100a5c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, COMMAND_REG, DISPLAY_COMMAND);
10100a60:	00c00b04 	movi	r3,44
10100a64:	00840034 	movhi	r2,4096
10100a68:	10820804 	addi	r2,r2,2080
10100a6c:	10c00035 	stwio	r3,0(r2)
	alt_u32 img_read = IORD_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG);
10100a70:	00840034 	movhi	r2,4096
10100a74:	10820a04 	addi	r2,r2,2088
10100a78:	10800037 	ldwio	r2,0(r2)
10100a7c:	e0bfff15 	stw	r2,-4(fp)

	while(img_read != 0x00000001) {
10100a80:	00000406 	br	10100a94 <main+0x5c>
		img_read = IORD_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG);
10100a84:	00840034 	movhi	r2,4096
10100a88:	10820a04 	addi	r2,r2,2088
10100a8c:	10800037 	ldwio	r2,0(r2)
10100a90:	e0bfff15 	stw	r2,-4(fp)
	//tells the LCD to display the written image
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, ADDRESS_REG, HPS_0_BRIDGES_BASE);
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, COMMAND_REG, DISPLAY_COMMAND);
	alt_u32 img_read = IORD_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG);

	while(img_read != 0x00000001) {
10100a94:	e0bfff17 	ldw	r2,-4(fp)
10100a98:	10800058 	cmpnei	r2,r2,1
10100a9c:	103ff91e 	bne	r2,zero,10100a84 <__alt_data_end+0xfffe0a84>
		img_read = IORD_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG);
	}

	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG, 0x00000000);
10100aa0:	0007883a 	mov	r3,zero
10100aa4:	00840034 	movhi	r2,4096
10100aa8:	10820a04 	addi	r2,r2,2088
10100aac:	10c00035 	stwio	r3,0(r2)
	write_image_2();
10100ab0:	0100bd80 	call	10100bd8 <write_image_2>
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, ADDRESS_REG, HPS_0_BRIDGES_BASE);
10100ab4:	0007883a 	mov	r3,zero
10100ab8:	00840034 	movhi	r2,4096
10100abc:	10820904 	addi	r2,r2,2084
10100ac0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, COMMAND_REG, DISPLAY_COMMAND);
10100ac4:	00c00b04 	movi	r3,44
10100ac8:	00840034 	movhi	r2,4096
10100acc:	10820804 	addi	r2,r2,2080
10100ad0:	10c00035 	stwio	r3,0(r2)


	while(1) {


	}
10100ad4:	003fff06 	br	10100ad4 <__alt_data_end+0xfffe0ad4>

10100ad8 <write_image_1>:
}




void write_image_1() {
10100ad8:	defffb04 	addi	sp,sp,-20
10100adc:	df000415 	stw	fp,16(sp)
10100ae0:	df000404 	addi	fp,sp,16
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
10100ae4:	e03ffc15 	stw	zero,-16(fp)
10100ae8:	00000806 	br	10100b0c <write_image_1+0x34>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
10100aec:	e0bffc17 	ldw	r2,-16(fp)
10100af0:	1085883a 	add	r2,r2,r2
10100af4:	1007883a 	mov	r3,r2
10100af8:	0081f804 	movi	r2,2016
10100afc:	1880002d 	sthio	r2,0(r3)



void write_image_1() {
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
10100b00:	e0bffc17 	ldw	r2,-16(fp)
10100b04:	10800044 	addi	r2,r2,1
10100b08:	e0bffc15 	stw	r2,-16(fp)
10100b0c:	e0bffc17 	ldw	r2,-16(fp)
10100b10:	1092c030 	cmpltui	r2,r2,19200
10100b14:	103ff51e 	bne	r2,zero,10100aec <__alt_data_end+0xfffe0aec>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
10100b18:	0092c004 	movi	r2,19200
10100b1c:	e0bffd15 	stw	r2,-12(fp)
10100b20:	00000806 	br	10100b44 <write_image_1+0x6c>
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
10100b24:	e0bffd17 	ldw	r2,-12(fp)
10100b28:	1085883a 	add	r2,r2,r2
10100b2c:	1007883a 	mov	r3,r2
10100b30:	008007c4 	movi	r2,31
10100b34:	1880002d 	sthio	r2,0(r3)
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
10100b38:	e0bffd17 	ldw	r2,-12(fp)
10100b3c:	10800044 	addi	r2,r2,1
10100b40:	e0bffd15 	stw	r2,-12(fp)
10100b44:	e0bffd17 	ldw	r2,-12(fp)
10100b48:	10a58030 	cmpltui	r2,r2,38400
10100b4c:	103ff51e 	bne	r2,zero,10100b24 <__alt_data_end+0xfffe0b24>
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
10100b50:	00a58014 	movui	r2,38400
10100b54:	e0bffe15 	stw	r2,-8(fp)
10100b58:	00000806 	br	10100b7c <write_image_1+0xa4>
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, RED);
10100b5c:	e0bffe17 	ldw	r2,-8(fp)
10100b60:	1085883a 	add	r2,r2,r2
10100b64:	1007883a 	mov	r3,r2
10100b68:	00be0004 	movi	r2,-2048
10100b6c:	1880002d 	sthio	r2,0(r3)
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
10100b70:	e0bffe17 	ldw	r2,-8(fp)
10100b74:	10800044 	addi	r2,r2,1
10100b78:	e0bffe15 	stw	r2,-8(fp)
10100b7c:	e0bffe17 	ldw	r2,-8(fp)
10100b80:	10b84030 	cmpltui	r2,r2,57600
10100b84:	103ff51e 	bne	r2,zero,10100b5c <__alt_data_end+0xfffe0b5c>
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, RED);
	}
	for (alt_u32 i = 3*NBR_PIXEL/4; i < NBR_PIXEL; ++i) {
10100b88:	00b84014 	movui	r2,57600
10100b8c:	e0bfff15 	stw	r2,-4(fp)
10100b90:	00000806 	br	10100bb4 <write_image_1+0xdc>
				IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE|GREEN);
10100b94:	e0bfff17 	ldw	r2,-4(fp)
10100b98:	1085883a 	add	r2,r2,r2
10100b9c:	1007883a 	mov	r3,r2
10100ba0:	0081ffc4 	movi	r2,2047
10100ba4:	1880002d 	sthio	r2,0(r3)
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, RED);
	}
	for (alt_u32 i = 3*NBR_PIXEL/4; i < NBR_PIXEL; ++i) {
10100ba8:	e0bfff17 	ldw	r2,-4(fp)
10100bac:	10800044 	addi	r2,r2,1
10100bb0:	e0bfff15 	stw	r2,-4(fp)
10100bb4:	e0ffff17 	ldw	r3,-4(fp)
10100bb8:	00800074 	movhi	r2,1
10100bbc:	108affc4 	addi	r2,r2,11263
10100bc0:	10fff42e 	bgeu	r2,r3,10100b94 <__alt_data_end+0xfffe0b94>
				IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE|GREEN);
	}

}
10100bc4:	0001883a 	nop
10100bc8:	e037883a 	mov	sp,fp
10100bcc:	df000017 	ldw	fp,0(sp)
10100bd0:	dec00104 	addi	sp,sp,4
10100bd4:	f800283a 	ret

10100bd8 <write_image_2>:

void write_image_2() {
10100bd8:	defffb04 	addi	sp,sp,-20
10100bdc:	df000415 	stw	fp,16(sp)
10100be0:	df000404 	addi	fp,sp,16
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
10100be4:	e03ffc15 	stw	zero,-16(fp)
10100be8:	00000806 	br	10100c0c <write_image_2+0x34>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
10100bec:	e0bffc17 	ldw	r2,-16(fp)
10100bf0:	1085883a 	add	r2,r2,r2
10100bf4:	1007883a 	mov	r3,r2
10100bf8:	0081f804 	movi	r2,2016
10100bfc:	1880002d 	sthio	r2,0(r3)

}

void write_image_2() {
	/*	generates and loads an image to the SDRAM */
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
10100c00:	e0bffc17 	ldw	r2,-16(fp)
10100c04:	10800044 	addi	r2,r2,1
10100c08:	e0bffc15 	stw	r2,-16(fp)
10100c0c:	e0bffc17 	ldw	r2,-16(fp)
10100c10:	1092c030 	cmpltui	r2,r2,19200
10100c14:	103ff51e 	bne	r2,zero,10100bec <__alt_data_end+0xfffe0bec>
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
10100c18:	0092c004 	movi	r2,19200
10100c1c:	e0bffd15 	stw	r2,-12(fp)
10100c20:	00000806 	br	10100c44 <write_image_2+0x6c>
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
10100c24:	e0bffd17 	ldw	r2,-12(fp)
10100c28:	1085883a 	add	r2,r2,r2
10100c2c:	1007883a 	mov	r3,r2
10100c30:	008007c4 	movi	r2,31
10100c34:	1880002d 	sthio	r2,0(r3)
	for (alt_u32 i = 0; i < NBR_PIXEL/4; ++i)
	{
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
10100c38:	e0bffd17 	ldw	r2,-12(fp)
10100c3c:	10800044 	addi	r2,r2,1
10100c40:	e0bffd15 	stw	r2,-12(fp)
10100c44:	e0bffd17 	ldw	r2,-12(fp)
10100c48:	10a58030 	cmpltui	r2,r2,38400
10100c4c:	103ff51e 	bne	r2,zero,10100c24 <__alt_data_end+0xfffe0c24>
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
10100c50:	00a58014 	movui	r2,38400
10100c54:	e0bffe15 	stw	r2,-8(fp)
10100c58:	00000806 	br	10100c7c <write_image_2+0xa4>
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
10100c5c:	e0bffe17 	ldw	r2,-8(fp)
10100c60:	1085883a 	add	r2,r2,r2
10100c64:	1007883a 	mov	r3,r2
10100c68:	0081f804 	movi	r2,2016
10100c6c:	1880002d 	sthio	r2,0(r3)
	}

	for (alt_u32 i = NBR_PIXEL/4; i < NBR_PIXEL/2; ++i) {
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
10100c70:	e0bffe17 	ldw	r2,-8(fp)
10100c74:	10800044 	addi	r2,r2,1
10100c78:	e0bffe15 	stw	r2,-8(fp)
10100c7c:	e0bffe17 	ldw	r2,-8(fp)
10100c80:	10b84030 	cmpltui	r2,r2,57600
10100c84:	103ff51e 	bne	r2,zero,10100c5c <__alt_data_end+0xfffe0c5c>
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}
	for (alt_u32 i = 3*NBR_PIXEL/4; i < NBR_PIXEL; ++i) {
10100c88:	00b84014 	movui	r2,57600
10100c8c:	e0bfff15 	stw	r2,-4(fp)
10100c90:	00000806 	br	10100cb4 <write_image_2+0xdc>
				IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
10100c94:	e0bfff17 	ldw	r2,-4(fp)
10100c98:	1085883a 	add	r2,r2,r2
10100c9c:	1007883a 	mov	r3,r2
10100ca0:	008007c4 	movi	r2,31
10100ca4:	1880002d 	sthio	r2,0(r3)
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}
	for (alt_u32 i = NBR_PIXEL/2; i < 3*NBR_PIXEL/4; ++i) {
			IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, GREEN);
	}
	for (alt_u32 i = 3*NBR_PIXEL/4; i < NBR_PIXEL; ++i) {
10100ca8:	e0bfff17 	ldw	r2,-4(fp)
10100cac:	10800044 	addi	r2,r2,1
10100cb0:	e0bfff15 	stw	r2,-4(fp)
10100cb4:	e0ffff17 	ldw	r3,-4(fp)
10100cb8:	00800074 	movhi	r2,1
10100cbc:	108affc4 	addi	r2,r2,11263
10100cc0:	10fff42e 	bgeu	r2,r3,10100c94 <__alt_data_end+0xfffe0c94>
				IOWR_16DIRECT(HPS_0_BRIDGES_BASE, 2*i, BLUE);
	}

}
10100cc4:	0001883a 	nop
10100cc8:	e037883a 	mov	sp,fp
10100ccc:	df000017 	ldw	fp,0(sp)
10100cd0:	dec00104 	addi	sp,sp,4
10100cd4:	f800283a 	ret

10100cd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10100cd8:	defffc04 	addi	sp,sp,-16
10100cdc:	df000315 	stw	fp,12(sp)
10100ce0:	df000304 	addi	fp,sp,12
10100ce4:	e13ffd15 	stw	r4,-12(fp)
10100ce8:	e17ffe15 	stw	r5,-8(fp)
10100cec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10100cf0:	e0fffe17 	ldw	r3,-8(fp)
10100cf4:	e0bffd17 	ldw	r2,-12(fp)
10100cf8:	18800c26 	beq	r3,r2,10100d2c <alt_load_section+0x54>
  {
    while( to != end )
10100cfc:	00000806 	br	10100d20 <alt_load_section+0x48>
    {
      *to++ = *from++;
10100d00:	e0bffe17 	ldw	r2,-8(fp)
10100d04:	10c00104 	addi	r3,r2,4
10100d08:	e0fffe15 	stw	r3,-8(fp)
10100d0c:	e0fffd17 	ldw	r3,-12(fp)
10100d10:	19000104 	addi	r4,r3,4
10100d14:	e13ffd15 	stw	r4,-12(fp)
10100d18:	18c00017 	ldw	r3,0(r3)
10100d1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10100d20:	e0fffe17 	ldw	r3,-8(fp)
10100d24:	e0bfff17 	ldw	r2,-4(fp)
10100d28:	18bff51e 	bne	r3,r2,10100d00 <__alt_data_end+0xfffe0d00>
    {
      *to++ = *from++;
    }
  }
}
10100d2c:	0001883a 	nop
10100d30:	e037883a 	mov	sp,fp
10100d34:	df000017 	ldw	fp,0(sp)
10100d38:	dec00104 	addi	sp,sp,4
10100d3c:	f800283a 	ret

10100d40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10100d40:	defffe04 	addi	sp,sp,-8
10100d44:	dfc00115 	stw	ra,4(sp)
10100d48:	df000015 	stw	fp,0(sp)
10100d4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10100d50:	01840434 	movhi	r6,4112
10100d54:	31939c04 	addi	r6,r6,20080
10100d58:	01440434 	movhi	r5,4112
10100d5c:	294dea04 	addi	r5,r5,14248
10100d60:	01040434 	movhi	r4,4112
10100d64:	21139c04 	addi	r4,r4,20080
10100d68:	0100cd80 	call	10100cd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10100d6c:	01840434 	movhi	r6,4112
10100d70:	31809104 	addi	r6,r6,580
10100d74:	01440434 	movhi	r5,4112
10100d78:	29400804 	addi	r5,r5,32
10100d7c:	01040434 	movhi	r4,4112
10100d80:	21000804 	addi	r4,r4,32
10100d84:	0100cd80 	call	10100cd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10100d88:	01840434 	movhi	r6,4112
10100d8c:	318dea04 	addi	r6,r6,14248
10100d90:	01440434 	movhi	r5,4112
10100d94:	294dd904 	addi	r5,r5,14180
10100d98:	01040434 	movhi	r4,4112
10100d9c:	210dd904 	addi	r4,r4,14180
10100da0:	0100cd80 	call	10100cd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10100da4:	01021ac0 	call	101021ac <alt_dcache_flush_all>
  alt_icache_flush_all();
10100da8:	01024400 	call	10102440 <alt_icache_flush_all>
}
10100dac:	0001883a 	nop
10100db0:	e037883a 	mov	sp,fp
10100db4:	dfc00117 	ldw	ra,4(sp)
10100db8:	df000017 	ldw	fp,0(sp)
10100dbc:	dec00204 	addi	sp,sp,8
10100dc0:	f800283a 	ret

10100dc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10100dc4:	defffd04 	addi	sp,sp,-12
10100dc8:	dfc00215 	stw	ra,8(sp)
10100dcc:	df000115 	stw	fp,4(sp)
10100dd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10100dd4:	0009883a 	mov	r4,zero
10100dd8:	0100ea40 	call	10100ea4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10100ddc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10100de0:	0100edc0 	call	10100edc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10100de4:	01840434 	movhi	r6,4112
10100de8:	318dd904 	addi	r6,r6,14180
10100dec:	01440434 	movhi	r5,4112
10100df0:	294dd904 	addi	r5,r5,14180
10100df4:	01040434 	movhi	r4,4112
10100df8:	210dd904 	addi	r4,r4,14180
10100dfc:	01027d80 	call	101027d8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10100e00:	01023000 	call	10102300 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10100e04:	01040434 	movhi	r4,4112
10100e08:	2108d804 	addi	r4,r4,9056
10100e0c:	010303c0 	call	1010303c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10100e10:	d0a5cf17 	ldw	r2,-26820(gp)
10100e14:	d0e5d017 	ldw	r3,-26816(gp)
10100e18:	d125d117 	ldw	r4,-26812(gp)
10100e1c:	200d883a 	mov	r6,r4
10100e20:	180b883a 	mov	r5,r3
10100e24:	1009883a 	mov	r4,r2
10100e28:	0100a380 	call	10100a38 <main>
10100e2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10100e30:	01000044 	movi	r4,1
10100e34:	01020dc0 	call	101020dc <close>
  exit (result);
10100e38:	e13fff17 	ldw	r4,-4(fp)
10100e3c:	01030500 	call	10103050 <exit>

10100e40 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10100e40:	defffd04 	addi	sp,sp,-12
10100e44:	dfc00215 	stw	ra,8(sp)
10100e48:	df000115 	stw	fp,4(sp)
10100e4c:	df000104 	addi	fp,sp,4
10100e50:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10100e54:	e13fff17 	ldw	r4,-4(fp)
10100e58:	0101f480 	call	10101f48 <alt_busy_sleep>
}
10100e5c:	e037883a 	mov	sp,fp
10100e60:	dfc00117 	ldw	ra,4(sp)
10100e64:	df000017 	ldw	fp,0(sp)
10100e68:	dec00204 	addi	sp,sp,8
10100e6c:	f800283a 	ret

10100e70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10100e70:	defffd04 	addi	sp,sp,-12
10100e74:	dfc00215 	stw	ra,8(sp)
10100e78:	df000115 	stw	fp,4(sp)
10100e7c:	df000104 	addi	fp,sp,4
10100e80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10100e84:	d1601404 	addi	r5,gp,-32688
10100e88:	e13fff17 	ldw	r4,-4(fp)
10100e8c:	010225c0 	call	1010225c <alt_dev_llist_insert>
}
10100e90:	e037883a 	mov	sp,fp
10100e94:	dfc00117 	ldw	ra,4(sp)
10100e98:	df000017 	ldw	fp,0(sp)
10100e9c:	dec00204 	addi	sp,sp,8
10100ea0:	f800283a 	ret

10100ea4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10100ea4:	defffd04 	addi	sp,sp,-12
10100ea8:	dfc00215 	stw	ra,8(sp)
10100eac:	df000115 	stw	fp,4(sp)
10100eb0:	df000104 	addi	fp,sp,4
10100eb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10100eb8:	0102cb00 	call	10102cb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10100ebc:	00800044 	movi	r2,1
10100ec0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10100ec4:	0001883a 	nop
10100ec8:	e037883a 	mov	sp,fp
10100ecc:	dfc00117 	ldw	ra,4(sp)
10100ed0:	df000017 	ldw	fp,0(sp)
10100ed4:	dec00204 	addi	sp,sp,8
10100ed8:	f800283a 	ret

10100edc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10100edc:	defffe04 	addi	sp,sp,-8
10100ee0:	dfc00115 	stw	ra,4(sp)
10100ee4:	df000015 	stw	fp,0(sp)
10100ee8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10100eec:	000d883a 	mov	r6,zero
10100ef0:	000b883a 	mov	r5,zero
10100ef4:	01040434 	movhi	r4,4112
10100ef8:	210df404 	addi	r4,r4,14288
10100efc:	01010940 	call	10101094 <altera_avalon_jtag_uart_init>
10100f00:	01040434 	movhi	r4,4112
10100f04:	210dea04 	addi	r4,r4,14248
10100f08:	0100e700 	call	10100e70 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10100f0c:	01040434 	movhi	r4,4112
10100f10:	21120204 	addi	r4,r4,18440
10100f14:	01023c00 	call	101023c0 <alt_fs_reg>
}
10100f18:	0001883a 	nop
10100f1c:	e037883a 	mov	sp,fp
10100f20:	dfc00117 	ldw	ra,4(sp)
10100f24:	df000017 	ldw	fp,0(sp)
10100f28:	dec00204 	addi	sp,sp,8
10100f2c:	f800283a 	ret

10100f30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10100f30:	defffa04 	addi	sp,sp,-24
10100f34:	dfc00515 	stw	ra,20(sp)
10100f38:	df000415 	stw	fp,16(sp)
10100f3c:	df000404 	addi	fp,sp,16
10100f40:	e13ffd15 	stw	r4,-12(fp)
10100f44:	e17ffe15 	stw	r5,-8(fp)
10100f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10100f4c:	e0bffd17 	ldw	r2,-12(fp)
10100f50:	10800017 	ldw	r2,0(r2)
10100f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10100f58:	e0bffc17 	ldw	r2,-16(fp)
10100f5c:	10c00a04 	addi	r3,r2,40
10100f60:	e0bffd17 	ldw	r2,-12(fp)
10100f64:	10800217 	ldw	r2,8(r2)
10100f68:	100f883a 	mov	r7,r2
10100f6c:	e1bfff17 	ldw	r6,-4(fp)
10100f70:	e17ffe17 	ldw	r5,-8(fp)
10100f74:	1809883a 	mov	r4,r3
10100f78:	01015580 	call	10101558 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10100f7c:	e037883a 	mov	sp,fp
10100f80:	dfc00117 	ldw	ra,4(sp)
10100f84:	df000017 	ldw	fp,0(sp)
10100f88:	dec00204 	addi	sp,sp,8
10100f8c:	f800283a 	ret

10100f90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10100f90:	defffa04 	addi	sp,sp,-24
10100f94:	dfc00515 	stw	ra,20(sp)
10100f98:	df000415 	stw	fp,16(sp)
10100f9c:	df000404 	addi	fp,sp,16
10100fa0:	e13ffd15 	stw	r4,-12(fp)
10100fa4:	e17ffe15 	stw	r5,-8(fp)
10100fa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10100fac:	e0bffd17 	ldw	r2,-12(fp)
10100fb0:	10800017 	ldw	r2,0(r2)
10100fb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10100fb8:	e0bffc17 	ldw	r2,-16(fp)
10100fbc:	10c00a04 	addi	r3,r2,40
10100fc0:	e0bffd17 	ldw	r2,-12(fp)
10100fc4:	10800217 	ldw	r2,8(r2)
10100fc8:	100f883a 	mov	r7,r2
10100fcc:	e1bfff17 	ldw	r6,-4(fp)
10100fd0:	e17ffe17 	ldw	r5,-8(fp)
10100fd4:	1809883a 	mov	r4,r3
10100fd8:	01017740 	call	10101774 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10100fdc:	e037883a 	mov	sp,fp
10100fe0:	dfc00117 	ldw	ra,4(sp)
10100fe4:	df000017 	ldw	fp,0(sp)
10100fe8:	dec00204 	addi	sp,sp,8
10100fec:	f800283a 	ret

10100ff0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10100ff0:	defffc04 	addi	sp,sp,-16
10100ff4:	dfc00315 	stw	ra,12(sp)
10100ff8:	df000215 	stw	fp,8(sp)
10100ffc:	df000204 	addi	fp,sp,8
10101000:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10101004:	e0bfff17 	ldw	r2,-4(fp)
10101008:	10800017 	ldw	r2,0(r2)
1010100c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10101010:	e0bffe17 	ldw	r2,-8(fp)
10101014:	10c00a04 	addi	r3,r2,40
10101018:	e0bfff17 	ldw	r2,-4(fp)
1010101c:	10800217 	ldw	r2,8(r2)
10101020:	100b883a 	mov	r5,r2
10101024:	1809883a 	mov	r4,r3
10101028:	01014000 	call	10101400 <altera_avalon_jtag_uart_close>
}
1010102c:	e037883a 	mov	sp,fp
10101030:	dfc00117 	ldw	ra,4(sp)
10101034:	df000017 	ldw	fp,0(sp)
10101038:	dec00204 	addi	sp,sp,8
1010103c:	f800283a 	ret

10101040 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10101040:	defffa04 	addi	sp,sp,-24
10101044:	dfc00515 	stw	ra,20(sp)
10101048:	df000415 	stw	fp,16(sp)
1010104c:	df000404 	addi	fp,sp,16
10101050:	e13ffd15 	stw	r4,-12(fp)
10101054:	e17ffe15 	stw	r5,-8(fp)
10101058:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010105c:	e0bffd17 	ldw	r2,-12(fp)
10101060:	10800017 	ldw	r2,0(r2)
10101064:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10101068:	e0bffc17 	ldw	r2,-16(fp)
1010106c:	10800a04 	addi	r2,r2,40
10101070:	e1bfff17 	ldw	r6,-4(fp)
10101074:	e17ffe17 	ldw	r5,-8(fp)
10101078:	1009883a 	mov	r4,r2
1010107c:	01014680 	call	10101468 <altera_avalon_jtag_uart_ioctl>
}
10101080:	e037883a 	mov	sp,fp
10101084:	dfc00117 	ldw	ra,4(sp)
10101088:	df000017 	ldw	fp,0(sp)
1010108c:	dec00204 	addi	sp,sp,8
10101090:	f800283a 	ret

10101094 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10101094:	defffa04 	addi	sp,sp,-24
10101098:	dfc00515 	stw	ra,20(sp)
1010109c:	df000415 	stw	fp,16(sp)
101010a0:	df000404 	addi	fp,sp,16
101010a4:	e13ffd15 	stw	r4,-12(fp)
101010a8:	e17ffe15 	stw	r5,-8(fp)
101010ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101010b0:	e0bffd17 	ldw	r2,-12(fp)
101010b4:	00c00044 	movi	r3,1
101010b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
101010bc:	e0bffd17 	ldw	r2,-12(fp)
101010c0:	10800017 	ldw	r2,0(r2)
101010c4:	10800104 	addi	r2,r2,4
101010c8:	1007883a 	mov	r3,r2
101010cc:	e0bffd17 	ldw	r2,-12(fp)
101010d0:	10800817 	ldw	r2,32(r2)
101010d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
101010d8:	e0bffe17 	ldw	r2,-8(fp)
101010dc:	e0ffff17 	ldw	r3,-4(fp)
101010e0:	d8000015 	stw	zero,0(sp)
101010e4:	e1fffd17 	ldw	r7,-12(fp)
101010e8:	01840434 	movhi	r6,4112
101010ec:	31845504 	addi	r6,r6,4436
101010f0:	180b883a 	mov	r5,r3
101010f4:	1009883a 	mov	r4,r2
101010f8:	01024740 	call	10102474 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
101010fc:	e0bffd17 	ldw	r2,-12(fp)
10101100:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10101104:	e0bffd17 	ldw	r2,-12(fp)
10101108:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010110c:	d0e5d317 	ldw	r3,-26804(gp)
10101110:	e1fffd17 	ldw	r7,-12(fp)
10101114:	01840434 	movhi	r6,4112
10101118:	3184d804 	addi	r6,r6,4960
1010111c:	180b883a 	mov	r5,r3
10101120:	1009883a 	mov	r4,r2
10101124:	0101e1c0 	call	10101e1c <alt_alarm_start>
10101128:	1000040e 	bge	r2,zero,1010113c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010112c:	e0fffd17 	ldw	r3,-12(fp)
10101130:	00a00034 	movhi	r2,32768
10101134:	10bfffc4 	addi	r2,r2,-1
10101138:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010113c:	0001883a 	nop
10101140:	e037883a 	mov	sp,fp
10101144:	dfc00117 	ldw	ra,4(sp)
10101148:	df000017 	ldw	fp,0(sp)
1010114c:	dec00204 	addi	sp,sp,8
10101150:	f800283a 	ret

10101154 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10101154:	defff804 	addi	sp,sp,-32
10101158:	df000715 	stw	fp,28(sp)
1010115c:	df000704 	addi	fp,sp,28
10101160:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10101164:	e0bfff17 	ldw	r2,-4(fp)
10101168:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010116c:	e0bffb17 	ldw	r2,-20(fp)
10101170:	10800017 	ldw	r2,0(r2)
10101174:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10101178:	e0bffc17 	ldw	r2,-16(fp)
1010117c:	10800104 	addi	r2,r2,4
10101180:	10800037 	ldwio	r2,0(r2)
10101184:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10101188:	e0bffd17 	ldw	r2,-12(fp)
1010118c:	1080c00c 	andi	r2,r2,768
10101190:	10006d26 	beq	r2,zero,10101348 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10101194:	e0bffd17 	ldw	r2,-12(fp)
10101198:	1080400c 	andi	r2,r2,256
1010119c:	10003526 	beq	r2,zero,10101274 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
101011a0:	00800074 	movhi	r2,1
101011a4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101011a8:	e0bffb17 	ldw	r2,-20(fp)
101011ac:	10800a17 	ldw	r2,40(r2)
101011b0:	10800044 	addi	r2,r2,1
101011b4:	1081ffcc 	andi	r2,r2,2047
101011b8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
101011bc:	e0bffb17 	ldw	r2,-20(fp)
101011c0:	10c00b17 	ldw	r3,44(r2)
101011c4:	e0bffe17 	ldw	r2,-8(fp)
101011c8:	18801526 	beq	r3,r2,10101220 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
101011cc:	e0bffc17 	ldw	r2,-16(fp)
101011d0:	10800037 	ldwio	r2,0(r2)
101011d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
101011d8:	e0bff917 	ldw	r2,-28(fp)
101011dc:	10a0000c 	andi	r2,r2,32768
101011e0:	10001126 	beq	r2,zero,10101228 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
101011e4:	e0bffb17 	ldw	r2,-20(fp)
101011e8:	10800a17 	ldw	r2,40(r2)
101011ec:	e0fff917 	ldw	r3,-28(fp)
101011f0:	1809883a 	mov	r4,r3
101011f4:	e0fffb17 	ldw	r3,-20(fp)
101011f8:	1885883a 	add	r2,r3,r2
101011fc:	10800e04 	addi	r2,r2,56
10101200:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10101204:	e0bffb17 	ldw	r2,-20(fp)
10101208:	10800a17 	ldw	r2,40(r2)
1010120c:	10800044 	addi	r2,r2,1
10101210:	10c1ffcc 	andi	r3,r2,2047
10101214:	e0bffb17 	ldw	r2,-20(fp)
10101218:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010121c:	003fe206 	br	101011a8 <__alt_data_end+0xfffe11a8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10101220:	0001883a 	nop
10101224:	00000106 	br	1010122c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10101228:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010122c:	e0bff917 	ldw	r2,-28(fp)
10101230:	10bfffec 	andhi	r2,r2,65535
10101234:	10000f26 	beq	r2,zero,10101274 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10101238:	e0bffb17 	ldw	r2,-20(fp)
1010123c:	10c00817 	ldw	r3,32(r2)
10101240:	00bfff84 	movi	r2,-2
10101244:	1886703a 	and	r3,r3,r2
10101248:	e0bffb17 	ldw	r2,-20(fp)
1010124c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10101250:	e0bffc17 	ldw	r2,-16(fp)
10101254:	10800104 	addi	r2,r2,4
10101258:	1007883a 	mov	r3,r2
1010125c:	e0bffb17 	ldw	r2,-20(fp)
10101260:	10800817 	ldw	r2,32(r2)
10101264:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10101268:	e0bffc17 	ldw	r2,-16(fp)
1010126c:	10800104 	addi	r2,r2,4
10101270:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10101274:	e0bffd17 	ldw	r2,-12(fp)
10101278:	1080800c 	andi	r2,r2,512
1010127c:	103fbe26 	beq	r2,zero,10101178 <__alt_data_end+0xfffe1178>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10101280:	e0bffd17 	ldw	r2,-12(fp)
10101284:	1004d43a 	srli	r2,r2,16
10101288:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010128c:	00001406 	br	101012e0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10101290:	e0bffc17 	ldw	r2,-16(fp)
10101294:	e0fffb17 	ldw	r3,-20(fp)
10101298:	18c00d17 	ldw	r3,52(r3)
1010129c:	e13ffb17 	ldw	r4,-20(fp)
101012a0:	20c7883a 	add	r3,r4,r3
101012a4:	18c20e04 	addi	r3,r3,2104
101012a8:	18c00003 	ldbu	r3,0(r3)
101012ac:	18c03fcc 	andi	r3,r3,255
101012b0:	18c0201c 	xori	r3,r3,128
101012b4:	18ffe004 	addi	r3,r3,-128
101012b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101012bc:	e0bffb17 	ldw	r2,-20(fp)
101012c0:	10800d17 	ldw	r2,52(r2)
101012c4:	10800044 	addi	r2,r2,1
101012c8:	10c1ffcc 	andi	r3,r2,2047
101012cc:	e0bffb17 	ldw	r2,-20(fp)
101012d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
101012d4:	e0bffa17 	ldw	r2,-24(fp)
101012d8:	10bfffc4 	addi	r2,r2,-1
101012dc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
101012e0:	e0bffa17 	ldw	r2,-24(fp)
101012e4:	10000526 	beq	r2,zero,101012fc <altera_avalon_jtag_uart_irq+0x1a8>
101012e8:	e0bffb17 	ldw	r2,-20(fp)
101012ec:	10c00d17 	ldw	r3,52(r2)
101012f0:	e0bffb17 	ldw	r2,-20(fp)
101012f4:	10800c17 	ldw	r2,48(r2)
101012f8:	18bfe51e 	bne	r3,r2,10101290 <__alt_data_end+0xfffe1290>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
101012fc:	e0bffa17 	ldw	r2,-24(fp)
10101300:	103f9d26 	beq	r2,zero,10101178 <__alt_data_end+0xfffe1178>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10101304:	e0bffb17 	ldw	r2,-20(fp)
10101308:	10c00817 	ldw	r3,32(r2)
1010130c:	00bfff44 	movi	r2,-3
10101310:	1886703a 	and	r3,r3,r2
10101314:	e0bffb17 	ldw	r2,-20(fp)
10101318:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010131c:	e0bffb17 	ldw	r2,-20(fp)
10101320:	10800017 	ldw	r2,0(r2)
10101324:	10800104 	addi	r2,r2,4
10101328:	1007883a 	mov	r3,r2
1010132c:	e0bffb17 	ldw	r2,-20(fp)
10101330:	10800817 	ldw	r2,32(r2)
10101334:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10101338:	e0bffc17 	ldw	r2,-16(fp)
1010133c:	10800104 	addi	r2,r2,4
10101340:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10101344:	003f8c06 	br	10101178 <__alt_data_end+0xfffe1178>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10101348:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010134c:	0001883a 	nop
10101350:	e037883a 	mov	sp,fp
10101354:	df000017 	ldw	fp,0(sp)
10101358:	dec00104 	addi	sp,sp,4
1010135c:	f800283a 	ret

10101360 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10101360:	defff804 	addi	sp,sp,-32
10101364:	df000715 	stw	fp,28(sp)
10101368:	df000704 	addi	fp,sp,28
1010136c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10101370:	e0bffb17 	ldw	r2,-20(fp)
10101374:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10101378:	e0bff917 	ldw	r2,-28(fp)
1010137c:	10800017 	ldw	r2,0(r2)
10101380:	10800104 	addi	r2,r2,4
10101384:	10800037 	ldwio	r2,0(r2)
10101388:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010138c:	e0bffa17 	ldw	r2,-24(fp)
10101390:	1081000c 	andi	r2,r2,1024
10101394:	10000b26 	beq	r2,zero,101013c4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10101398:	e0bff917 	ldw	r2,-28(fp)
1010139c:	10800017 	ldw	r2,0(r2)
101013a0:	10800104 	addi	r2,r2,4
101013a4:	1007883a 	mov	r3,r2
101013a8:	e0bff917 	ldw	r2,-28(fp)
101013ac:	10800817 	ldw	r2,32(r2)
101013b0:	10810014 	ori	r2,r2,1024
101013b4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
101013b8:	e0bff917 	ldw	r2,-28(fp)
101013bc:	10000915 	stw	zero,36(r2)
101013c0:	00000a06 	br	101013ec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
101013c4:	e0bff917 	ldw	r2,-28(fp)
101013c8:	10c00917 	ldw	r3,36(r2)
101013cc:	00a00034 	movhi	r2,32768
101013d0:	10bfff04 	addi	r2,r2,-4
101013d4:	10c00536 	bltu	r2,r3,101013ec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
101013d8:	e0bff917 	ldw	r2,-28(fp)
101013dc:	10800917 	ldw	r2,36(r2)
101013e0:	10c00044 	addi	r3,r2,1
101013e4:	e0bff917 	ldw	r2,-28(fp)
101013e8:	10c00915 	stw	r3,36(r2)
101013ec:	d0a5d317 	ldw	r2,-26804(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
101013f0:	e037883a 	mov	sp,fp
101013f4:	df000017 	ldw	fp,0(sp)
101013f8:	dec00104 	addi	sp,sp,4
101013fc:	f800283a 	ret

10101400 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10101400:	defffd04 	addi	sp,sp,-12
10101404:	df000215 	stw	fp,8(sp)
10101408:	df000204 	addi	fp,sp,8
1010140c:	e13ffe15 	stw	r4,-8(fp)
10101410:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10101414:	00000506 	br	1010142c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10101418:	e0bfff17 	ldw	r2,-4(fp)
1010141c:	1090000c 	andi	r2,r2,16384
10101420:	10000226 	beq	r2,zero,1010142c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10101424:	00bffd44 	movi	r2,-11
10101428:	00000b06 	br	10101458 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010142c:	e0bffe17 	ldw	r2,-8(fp)
10101430:	10c00d17 	ldw	r3,52(r2)
10101434:	e0bffe17 	ldw	r2,-8(fp)
10101438:	10800c17 	ldw	r2,48(r2)
1010143c:	18800526 	beq	r3,r2,10101454 <altera_avalon_jtag_uart_close+0x54>
10101440:	e0bffe17 	ldw	r2,-8(fp)
10101444:	10c00917 	ldw	r3,36(r2)
10101448:	e0bffe17 	ldw	r2,-8(fp)
1010144c:	10800117 	ldw	r2,4(r2)
10101450:	18bff136 	bltu	r3,r2,10101418 <__alt_data_end+0xfffe1418>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10101454:	0005883a 	mov	r2,zero
}
10101458:	e037883a 	mov	sp,fp
1010145c:	df000017 	ldw	fp,0(sp)
10101460:	dec00104 	addi	sp,sp,4
10101464:	f800283a 	ret

10101468 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10101468:	defffa04 	addi	sp,sp,-24
1010146c:	df000515 	stw	fp,20(sp)
10101470:	df000504 	addi	fp,sp,20
10101474:	e13ffd15 	stw	r4,-12(fp)
10101478:	e17ffe15 	stw	r5,-8(fp)
1010147c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10101480:	00bff9c4 	movi	r2,-25
10101484:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10101488:	e0bffe17 	ldw	r2,-8(fp)
1010148c:	10da8060 	cmpeqi	r3,r2,27137
10101490:	1800031e 	bne	r3,zero,101014a0 <altera_avalon_jtag_uart_ioctl+0x38>
10101494:	109a80a0 	cmpeqi	r2,r2,27138
10101498:	1000181e 	bne	r2,zero,101014fc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010149c:	00002906 	br	10101544 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
101014a0:	e0bffd17 	ldw	r2,-12(fp)
101014a4:	10c00117 	ldw	r3,4(r2)
101014a8:	00a00034 	movhi	r2,32768
101014ac:	10bfffc4 	addi	r2,r2,-1
101014b0:	18802126 	beq	r3,r2,10101538 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
101014b4:	e0bfff17 	ldw	r2,-4(fp)
101014b8:	10800017 	ldw	r2,0(r2)
101014bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
101014c0:	e0bffc17 	ldw	r2,-16(fp)
101014c4:	10800090 	cmplti	r2,r2,2
101014c8:	1000061e 	bne	r2,zero,101014e4 <altera_avalon_jtag_uart_ioctl+0x7c>
101014cc:	e0fffc17 	ldw	r3,-16(fp)
101014d0:	00a00034 	movhi	r2,32768
101014d4:	10bfffc4 	addi	r2,r2,-1
101014d8:	18800226 	beq	r3,r2,101014e4 <altera_avalon_jtag_uart_ioctl+0x7c>
101014dc:	e0bffc17 	ldw	r2,-16(fp)
101014e0:	00000206 	br	101014ec <altera_avalon_jtag_uart_ioctl+0x84>
101014e4:	00a00034 	movhi	r2,32768
101014e8:	10bfff84 	addi	r2,r2,-2
101014ec:	e0fffd17 	ldw	r3,-12(fp)
101014f0:	18800115 	stw	r2,4(r3)
      rc = 0;
101014f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
101014f8:	00000f06 	br	10101538 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
101014fc:	e0bffd17 	ldw	r2,-12(fp)
10101500:	10c00117 	ldw	r3,4(r2)
10101504:	00a00034 	movhi	r2,32768
10101508:	10bfffc4 	addi	r2,r2,-1
1010150c:	18800c26 	beq	r3,r2,10101540 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10101510:	e0bffd17 	ldw	r2,-12(fp)
10101514:	10c00917 	ldw	r3,36(r2)
10101518:	e0bffd17 	ldw	r2,-12(fp)
1010151c:	10800117 	ldw	r2,4(r2)
10101520:	1885803a 	cmpltu	r2,r3,r2
10101524:	10c03fcc 	andi	r3,r2,255
10101528:	e0bfff17 	ldw	r2,-4(fp)
1010152c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10101530:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10101534:	00000206 	br	10101540 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10101538:	0001883a 	nop
1010153c:	00000106 	br	10101544 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10101540:	0001883a 	nop

  default:
    break;
  }

  return rc;
10101544:	e0bffb17 	ldw	r2,-20(fp)
}
10101548:	e037883a 	mov	sp,fp
1010154c:	df000017 	ldw	fp,0(sp)
10101550:	dec00104 	addi	sp,sp,4
10101554:	f800283a 	ret

10101558 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10101558:	defff304 	addi	sp,sp,-52
1010155c:	dfc00c15 	stw	ra,48(sp)
10101560:	df000b15 	stw	fp,44(sp)
10101564:	df000b04 	addi	fp,sp,44
10101568:	e13ffc15 	stw	r4,-16(fp)
1010156c:	e17ffd15 	stw	r5,-12(fp)
10101570:	e1bffe15 	stw	r6,-8(fp)
10101574:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10101578:	e0bffd17 	ldw	r2,-12(fp)
1010157c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10101580:	00004706 	br	101016a0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10101584:	e0bffc17 	ldw	r2,-16(fp)
10101588:	10800a17 	ldw	r2,40(r2)
1010158c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10101590:	e0bffc17 	ldw	r2,-16(fp)
10101594:	10800b17 	ldw	r2,44(r2)
10101598:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010159c:	e0fff717 	ldw	r3,-36(fp)
101015a0:	e0bff817 	ldw	r2,-32(fp)
101015a4:	18800536 	bltu	r3,r2,101015bc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
101015a8:	e0fff717 	ldw	r3,-36(fp)
101015ac:	e0bff817 	ldw	r2,-32(fp)
101015b0:	1885c83a 	sub	r2,r3,r2
101015b4:	e0bff615 	stw	r2,-40(fp)
101015b8:	00000406 	br	101015cc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
101015bc:	00c20004 	movi	r3,2048
101015c0:	e0bff817 	ldw	r2,-32(fp)
101015c4:	1885c83a 	sub	r2,r3,r2
101015c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
101015cc:	e0bff617 	ldw	r2,-40(fp)
101015d0:	10001e26 	beq	r2,zero,1010164c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
101015d4:	e0fffe17 	ldw	r3,-8(fp)
101015d8:	e0bff617 	ldw	r2,-40(fp)
101015dc:	1880022e 	bgeu	r3,r2,101015e8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
101015e0:	e0bffe17 	ldw	r2,-8(fp)
101015e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
101015e8:	e0bffc17 	ldw	r2,-16(fp)
101015ec:	10c00e04 	addi	r3,r2,56
101015f0:	e0bff817 	ldw	r2,-32(fp)
101015f4:	1885883a 	add	r2,r3,r2
101015f8:	e1bff617 	ldw	r6,-40(fp)
101015fc:	100b883a 	mov	r5,r2
10101600:	e13ff517 	ldw	r4,-44(fp)
10101604:	01031040 	call	10103104 <memcpy>
      ptr   += n;
10101608:	e0fff517 	ldw	r3,-44(fp)
1010160c:	e0bff617 	ldw	r2,-40(fp)
10101610:	1885883a 	add	r2,r3,r2
10101614:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10101618:	e0fffe17 	ldw	r3,-8(fp)
1010161c:	e0bff617 	ldw	r2,-40(fp)
10101620:	1885c83a 	sub	r2,r3,r2
10101624:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10101628:	e0fff817 	ldw	r3,-32(fp)
1010162c:	e0bff617 	ldw	r2,-40(fp)
10101630:	1885883a 	add	r2,r3,r2
10101634:	10c1ffcc 	andi	r3,r2,2047
10101638:	e0bffc17 	ldw	r2,-16(fp)
1010163c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10101640:	e0bffe17 	ldw	r2,-8(fp)
10101644:	00bfcf16 	blt	zero,r2,10101584 <__alt_data_end+0xfffe1584>
10101648:	00000106 	br	10101650 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010164c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10101650:	e0fff517 	ldw	r3,-44(fp)
10101654:	e0bffd17 	ldw	r2,-12(fp)
10101658:	1880141e 	bne	r3,r2,101016ac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010165c:	e0bfff17 	ldw	r2,-4(fp)
10101660:	1090000c 	andi	r2,r2,16384
10101664:	1000131e 	bne	r2,zero,101016b4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10101668:	0001883a 	nop
1010166c:	e0bffc17 	ldw	r2,-16(fp)
10101670:	10c00a17 	ldw	r3,40(r2)
10101674:	e0bff717 	ldw	r2,-36(fp)
10101678:	1880051e 	bne	r3,r2,10101690 <altera_avalon_jtag_uart_read+0x138>
1010167c:	e0bffc17 	ldw	r2,-16(fp)
10101680:	10c00917 	ldw	r3,36(r2)
10101684:	e0bffc17 	ldw	r2,-16(fp)
10101688:	10800117 	ldw	r2,4(r2)
1010168c:	18bff736 	bltu	r3,r2,1010166c <__alt_data_end+0xfffe166c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10101690:	e0bffc17 	ldw	r2,-16(fp)
10101694:	10c00a17 	ldw	r3,40(r2)
10101698:	e0bff717 	ldw	r2,-36(fp)
1010169c:	18800726 	beq	r3,r2,101016bc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101016a0:	e0bffe17 	ldw	r2,-8(fp)
101016a4:	00bfb716 	blt	zero,r2,10101584 <__alt_data_end+0xfffe1584>
101016a8:	00000506 	br	101016c0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
101016ac:	0001883a 	nop
101016b0:	00000306 	br	101016c0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
101016b4:	0001883a 	nop
101016b8:	00000106 	br	101016c0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
101016bc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
101016c0:	e0fff517 	ldw	r3,-44(fp)
101016c4:	e0bffd17 	ldw	r2,-12(fp)
101016c8:	18801826 	beq	r3,r2,1010172c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101016cc:	0005303a 	rdctl	r2,status
101016d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101016d4:	e0fffb17 	ldw	r3,-20(fp)
101016d8:	00bfff84 	movi	r2,-2
101016dc:	1884703a 	and	r2,r3,r2
101016e0:	1001703a 	wrctl	status,r2
  
  return context;
101016e4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
101016e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101016ec:	e0bffc17 	ldw	r2,-16(fp)
101016f0:	10800817 	ldw	r2,32(r2)
101016f4:	10c00054 	ori	r3,r2,1
101016f8:	e0bffc17 	ldw	r2,-16(fp)
101016fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10101700:	e0bffc17 	ldw	r2,-16(fp)
10101704:	10800017 	ldw	r2,0(r2)
10101708:	10800104 	addi	r2,r2,4
1010170c:	1007883a 	mov	r3,r2
10101710:	e0bffc17 	ldw	r2,-16(fp)
10101714:	10800817 	ldw	r2,32(r2)
10101718:	18800035 	stwio	r2,0(r3)
1010171c:	e0bffa17 	ldw	r2,-24(fp)
10101720:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10101724:	e0bff917 	ldw	r2,-28(fp)
10101728:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010172c:	e0fff517 	ldw	r3,-44(fp)
10101730:	e0bffd17 	ldw	r2,-12(fp)
10101734:	18800426 	beq	r3,r2,10101748 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10101738:	e0fff517 	ldw	r3,-44(fp)
1010173c:	e0bffd17 	ldw	r2,-12(fp)
10101740:	1885c83a 	sub	r2,r3,r2
10101744:	00000606 	br	10101760 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10101748:	e0bfff17 	ldw	r2,-4(fp)
1010174c:	1090000c 	andi	r2,r2,16384
10101750:	10000226 	beq	r2,zero,1010175c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10101754:	00bffd44 	movi	r2,-11
10101758:	00000106 	br	10101760 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010175c:	00bffec4 	movi	r2,-5
}
10101760:	e037883a 	mov	sp,fp
10101764:	dfc00117 	ldw	ra,4(sp)
10101768:	df000017 	ldw	fp,0(sp)
1010176c:	dec00204 	addi	sp,sp,8
10101770:	f800283a 	ret

10101774 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10101774:	defff304 	addi	sp,sp,-52
10101778:	dfc00c15 	stw	ra,48(sp)
1010177c:	df000b15 	stw	fp,44(sp)
10101780:	df000b04 	addi	fp,sp,44
10101784:	e13ffc15 	stw	r4,-16(fp)
10101788:	e17ffd15 	stw	r5,-12(fp)
1010178c:	e1bffe15 	stw	r6,-8(fp)
10101790:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10101794:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10101798:	e0bffd17 	ldw	r2,-12(fp)
1010179c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
101017a0:	00003706 	br	10101880 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
101017a4:	e0bffc17 	ldw	r2,-16(fp)
101017a8:	10800c17 	ldw	r2,48(r2)
101017ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
101017b0:	e0bffc17 	ldw	r2,-16(fp)
101017b4:	10800d17 	ldw	r2,52(r2)
101017b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
101017bc:	e0fff917 	ldw	r3,-28(fp)
101017c0:	e0bff517 	ldw	r2,-44(fp)
101017c4:	1880062e 	bgeu	r3,r2,101017e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
101017c8:	e0fff517 	ldw	r3,-44(fp)
101017cc:	e0bff917 	ldw	r2,-28(fp)
101017d0:	1885c83a 	sub	r2,r3,r2
101017d4:	10bfffc4 	addi	r2,r2,-1
101017d8:	e0bff615 	stw	r2,-40(fp)
101017dc:	00000b06 	br	1010180c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
101017e0:	e0bff517 	ldw	r2,-44(fp)
101017e4:	10000526 	beq	r2,zero,101017fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
101017e8:	00c20004 	movi	r3,2048
101017ec:	e0bff917 	ldw	r2,-28(fp)
101017f0:	1885c83a 	sub	r2,r3,r2
101017f4:	e0bff615 	stw	r2,-40(fp)
101017f8:	00000406 	br	1010180c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
101017fc:	00c1ffc4 	movi	r3,2047
10101800:	e0bff917 	ldw	r2,-28(fp)
10101804:	1885c83a 	sub	r2,r3,r2
10101808:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010180c:	e0bff617 	ldw	r2,-40(fp)
10101810:	10001e26 	beq	r2,zero,1010188c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10101814:	e0fffe17 	ldw	r3,-8(fp)
10101818:	e0bff617 	ldw	r2,-40(fp)
1010181c:	1880022e 	bgeu	r3,r2,10101828 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10101820:	e0bffe17 	ldw	r2,-8(fp)
10101824:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10101828:	e0bffc17 	ldw	r2,-16(fp)
1010182c:	10c20e04 	addi	r3,r2,2104
10101830:	e0bff917 	ldw	r2,-28(fp)
10101834:	1885883a 	add	r2,r3,r2
10101838:	e1bff617 	ldw	r6,-40(fp)
1010183c:	e17ffd17 	ldw	r5,-12(fp)
10101840:	1009883a 	mov	r4,r2
10101844:	01031040 	call	10103104 <memcpy>
      ptr   += n;
10101848:	e0fffd17 	ldw	r3,-12(fp)
1010184c:	e0bff617 	ldw	r2,-40(fp)
10101850:	1885883a 	add	r2,r3,r2
10101854:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10101858:	e0fffe17 	ldw	r3,-8(fp)
1010185c:	e0bff617 	ldw	r2,-40(fp)
10101860:	1885c83a 	sub	r2,r3,r2
10101864:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10101868:	e0fff917 	ldw	r3,-28(fp)
1010186c:	e0bff617 	ldw	r2,-40(fp)
10101870:	1885883a 	add	r2,r3,r2
10101874:	10c1ffcc 	andi	r3,r2,2047
10101878:	e0bffc17 	ldw	r2,-16(fp)
1010187c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10101880:	e0bffe17 	ldw	r2,-8(fp)
10101884:	00bfc716 	blt	zero,r2,101017a4 <__alt_data_end+0xfffe17a4>
10101888:	00000106 	br	10101890 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010188c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10101890:	0005303a 	rdctl	r2,status
10101894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10101898:	e0fffb17 	ldw	r3,-20(fp)
1010189c:	00bfff84 	movi	r2,-2
101018a0:	1884703a 	and	r2,r3,r2
101018a4:	1001703a 	wrctl	status,r2
  
  return context;
101018a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
101018ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
101018b0:	e0bffc17 	ldw	r2,-16(fp)
101018b4:	10800817 	ldw	r2,32(r2)
101018b8:	10c00094 	ori	r3,r2,2
101018bc:	e0bffc17 	ldw	r2,-16(fp)
101018c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
101018c4:	e0bffc17 	ldw	r2,-16(fp)
101018c8:	10800017 	ldw	r2,0(r2)
101018cc:	10800104 	addi	r2,r2,4
101018d0:	1007883a 	mov	r3,r2
101018d4:	e0bffc17 	ldw	r2,-16(fp)
101018d8:	10800817 	ldw	r2,32(r2)
101018dc:	18800035 	stwio	r2,0(r3)
101018e0:	e0bffa17 	ldw	r2,-24(fp)
101018e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101018e8:	e0bff817 	ldw	r2,-32(fp)
101018ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
101018f0:	e0bffe17 	ldw	r2,-8(fp)
101018f4:	0080100e 	bge	zero,r2,10101938 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
101018f8:	e0bfff17 	ldw	r2,-4(fp)
101018fc:	1090000c 	andi	r2,r2,16384
10101900:	1000101e 	bne	r2,zero,10101944 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10101904:	0001883a 	nop
10101908:	e0bffc17 	ldw	r2,-16(fp)
1010190c:	10c00d17 	ldw	r3,52(r2)
10101910:	e0bff517 	ldw	r2,-44(fp)
10101914:	1880051e 	bne	r3,r2,1010192c <altera_avalon_jtag_uart_write+0x1b8>
10101918:	e0bffc17 	ldw	r2,-16(fp)
1010191c:	10c00917 	ldw	r3,36(r2)
10101920:	e0bffc17 	ldw	r2,-16(fp)
10101924:	10800117 	ldw	r2,4(r2)
10101928:	18bff736 	bltu	r3,r2,10101908 <__alt_data_end+0xfffe1908>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010192c:	e0bffc17 	ldw	r2,-16(fp)
10101930:	10800917 	ldw	r2,36(r2)
10101934:	1000051e 	bne	r2,zero,1010194c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10101938:	e0bffe17 	ldw	r2,-8(fp)
1010193c:	00bfd016 	blt	zero,r2,10101880 <__alt_data_end+0xfffe1880>
10101940:	00000306 	br	10101950 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10101944:	0001883a 	nop
10101948:	00000106 	br	10101950 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010194c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10101950:	e0fffd17 	ldw	r3,-12(fp)
10101954:	e0bff717 	ldw	r2,-36(fp)
10101958:	18800426 	beq	r3,r2,1010196c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010195c:	e0fffd17 	ldw	r3,-12(fp)
10101960:	e0bff717 	ldw	r2,-36(fp)
10101964:	1885c83a 	sub	r2,r3,r2
10101968:	00000606 	br	10101984 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010196c:	e0bfff17 	ldw	r2,-4(fp)
10101970:	1090000c 	andi	r2,r2,16384
10101974:	10000226 	beq	r2,zero,10101980 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10101978:	00bffd44 	movi	r2,-11
1010197c:	00000106 	br	10101984 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10101980:	00bffec4 	movi	r2,-5
}
10101984:	e037883a 	mov	sp,fp
10101988:	dfc00117 	ldw	ra,4(sp)
1010198c:	df000017 	ldw	fp,0(sp)
10101990:	dec00204 	addi	sp,sp,8
10101994:	f800283a 	ret

10101998 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10101998:	defff404 	addi	sp,sp,-48
1010199c:	df000b15 	stw	fp,44(sp)
101019a0:	df000b04 	addi	fp,sp,44
101019a4:	e13ffc15 	stw	r4,-16(fp)
101019a8:	e17ffd15 	stw	r5,-12(fp)
101019ac:	e1bffe15 	stw	r6,-8(fp)
101019b0:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
101019b4:	e0bffc17 	ldw	r2,-16(fp)
101019b8:	10800017 	ldw	r2,0(r2)
101019bc:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
101019c0:	e0bff517 	ldw	r2,-44(fp)
101019c4:	10800217 	ldw	r2,8(r2)
101019c8:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
101019cc:	e0bff617 	ldw	r2,-40(fp)
101019d0:	10bfffc4 	addi	r2,r2,-1
101019d4:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
101019d8:	e0bffb17 	ldw	r2,-20(fp)
101019dc:	10800044 	addi	r2,r2,1
101019e0:	e0bffb15 	stw	r2,-20(fp)
101019e4:	e0bffb17 	ldw	r2,-20(fp)
101019e8:	10800003 	ldbu	r2,0(r2)
101019ec:	10803fcc 	andi	r2,r2,255
101019f0:	1080201c 	xori	r2,r2,128
101019f4:	10bfe004 	addi	r2,r2,-128
101019f8:	103ff71e 	bne	r2,zero,101019d8 <__alt_data_end+0xfffe19d8>
    ;

  return ptr - string;
101019fc:	e0fffb17 	ldw	r3,-20(fp)
10101a00:	e0bff617 	ldw	r2,-40(fp)
10101a04:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10101a08:	10800044 	addi	r2,r2,1
10101a0c:	1007883a 	mov	r3,r2
10101a10:	e0bffd17 	ldw	r2,-12(fp)
10101a14:	10c5883a 	add	r2,r2,r3
10101a18:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10101a1c:	d0a00004 	addi	r2,gp,-32768
10101a20:	1007883a 	mov	r3,r2
  r4 = (int)name;
10101a24:	e0bffd17 	ldw	r2,-12(fp)
10101a28:	1009883a 	mov	r4,r2
  r5 = flags;
10101a2c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10101a30:	e1bfff17 	ldw	r6,-4(fp)
10101a34:	e0bffd17 	ldw	r2,-12(fp)
10101a38:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10101a3c:	e0bff917 	ldw	r2,-28(fp)
10101a40:	10bfffc4 	addi	r2,r2,-1
10101a44:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10101a48:	e0bffa17 	ldw	r2,-24(fp)
10101a4c:	10800044 	addi	r2,r2,1
10101a50:	e0bffa15 	stw	r2,-24(fp)
10101a54:	e0bffa17 	ldw	r2,-24(fp)
10101a58:	10800003 	ldbu	r2,0(r2)
10101a5c:	10803fcc 	andi	r2,r2,255
10101a60:	1080201c 	xori	r2,r2,128
10101a64:	10bfe004 	addi	r2,r2,-128
10101a68:	103ff71e 	bne	r2,zero,10101a48 <__alt_data_end+0xfffe1a48>
    ;

  return ptr - string;
10101a6c:	e1fffa17 	ldw	r7,-24(fp)
10101a70:	e0bff917 	ldw	r2,-28(fp)
10101a74:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10101a78:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10101a7c:	003da07a 	break	1

  handle = (void *)r2;
10101a80:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10101a84:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10101a88:	e0bff817 	ldw	r2,-32(fp)
10101a8c:	1000031e 	bne	r2,zero,10101a9c <alt_hostfs_open+0x104>
    fd->priv = handle;
10101a90:	e0bffc17 	ldw	r2,-16(fp)
10101a94:	e0fff717 	ldw	r3,-36(fp)
10101a98:	10c00115 	stw	r3,4(r2)

  return -error;
10101a9c:	e0bff817 	ldw	r2,-32(fp)
10101aa0:	0085c83a 	sub	r2,zero,r2
}
10101aa4:	e037883a 	mov	sp,fp
10101aa8:	df000017 	ldw	fp,0(sp)
10101aac:	dec00104 	addi	sp,sp,4
10101ab0:	f800283a 	ret

10101ab4 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10101ab4:	defffd04 	addi	sp,sp,-12
10101ab8:	df000215 	stw	fp,8(sp)
10101abc:	df000204 	addi	fp,sp,8
10101ac0:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10101ac4:	d0a00304 	addi	r2,gp,-32756
10101ac8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101acc:	e0bfff17 	ldw	r2,-4(fp)
10101ad0:	10800117 	ldw	r2,4(r2)
10101ad4:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10101ad8:	003da07a 	break	1

  error = r3;
10101adc:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10101ae0:	e0bffe17 	ldw	r2,-8(fp)
10101ae4:	0085c83a 	sub	r2,zero,r2
}
10101ae8:	e037883a 	mov	sp,fp
10101aec:	df000017 	ldw	fp,0(sp)
10101af0:	dec00104 	addi	sp,sp,4
10101af4:	f800283a 	ret

10101af8 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10101af8:	defffa04 	addi	sp,sp,-24
10101afc:	df000515 	stw	fp,20(sp)
10101b00:	df000504 	addi	fp,sp,20
10101b04:	e13ffd15 	stw	r4,-12(fp)
10101b08:	e17ffe15 	stw	r5,-8(fp)
10101b0c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10101b10:	d0a00604 	addi	r2,gp,-32744
10101b14:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101b18:	e0bffd17 	ldw	r2,-12(fp)
10101b1c:	10800117 	ldw	r2,4(r2)
10101b20:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10101b24:	e0bffe17 	ldw	r2,-8(fp)
10101b28:	100b883a 	mov	r5,r2
  r6 = len;
10101b2c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10101b30:	003da07a 	break	1

  rc = r2;
10101b34:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10101b38:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10101b3c:	e0bffc17 	ldw	r2,-16(fp)
10101b40:	10000326 	beq	r2,zero,10101b50 <alt_hostfs_read+0x58>
10101b44:	e0bffc17 	ldw	r2,-16(fp)
10101b48:	0085c83a 	sub	r2,zero,r2
10101b4c:	00000106 	br	10101b54 <alt_hostfs_read+0x5c>
10101b50:	e0bffb17 	ldw	r2,-20(fp)
}
10101b54:	e037883a 	mov	sp,fp
10101b58:	df000017 	ldw	fp,0(sp)
10101b5c:	dec00104 	addi	sp,sp,4
10101b60:	f800283a 	ret

10101b64 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10101b64:	defffa04 	addi	sp,sp,-24
10101b68:	df000515 	stw	fp,20(sp)
10101b6c:	df000504 	addi	fp,sp,20
10101b70:	e13ffd15 	stw	r4,-12(fp)
10101b74:	e17ffe15 	stw	r5,-8(fp)
10101b78:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10101b7c:	d0a00904 	addi	r2,gp,-32732
10101b80:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101b84:	e0bffd17 	ldw	r2,-12(fp)
10101b88:	10800117 	ldw	r2,4(r2)
10101b8c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10101b90:	e0bffe17 	ldw	r2,-8(fp)
10101b94:	100b883a 	mov	r5,r2
  r6 = len;
10101b98:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10101b9c:	003da07a 	break	1

  rc = r2;
10101ba0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10101ba4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10101ba8:	e0bffc17 	ldw	r2,-16(fp)
10101bac:	10000326 	beq	r2,zero,10101bbc <alt_hostfs_write+0x58>
10101bb0:	e0bffc17 	ldw	r2,-16(fp)
10101bb4:	0085c83a 	sub	r2,zero,r2
10101bb8:	00000106 	br	10101bc0 <alt_hostfs_write+0x5c>
10101bbc:	e0bffb17 	ldw	r2,-20(fp)
}
10101bc0:	e037883a 	mov	sp,fp
10101bc4:	df000017 	ldw	fp,0(sp)
10101bc8:	dec00104 	addi	sp,sp,4
10101bcc:	f800283a 	ret

10101bd0 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10101bd0:	defffa04 	addi	sp,sp,-24
10101bd4:	df000515 	stw	fp,20(sp)
10101bd8:	df000504 	addi	fp,sp,20
10101bdc:	e13ffd15 	stw	r4,-12(fp)
10101be0:	e17ffe15 	stw	r5,-8(fp)
10101be4:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10101be8:	d0a00c04 	addi	r2,gp,-32720
10101bec:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101bf0:	e0bffd17 	ldw	r2,-12(fp)
10101bf4:	10800117 	ldw	r2,4(r2)
10101bf8:	1009883a 	mov	r4,r2
  r5 = ptr;
10101bfc:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10101c00:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10101c04:	003da07a 	break	1

  rc = r2;
10101c08:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10101c0c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10101c10:	e0bffc17 	ldw	r2,-16(fp)
10101c14:	10000326 	beq	r2,zero,10101c24 <alt_hostfs_seek+0x54>
10101c18:	e0bffc17 	ldw	r2,-16(fp)
10101c1c:	0085c83a 	sub	r2,zero,r2
10101c20:	00000106 	br	10101c28 <alt_hostfs_seek+0x58>
10101c24:	e0bffb17 	ldw	r2,-20(fp)
}
10101c28:	e037883a 	mov	sp,fp
10101c2c:	df000017 	ldw	fp,0(sp)
10101c30:	dec00104 	addi	sp,sp,4
10101c34:	f800283a 	ret

10101c38 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10101c38:	deffe904 	addi	sp,sp,-92
10101c3c:	df001615 	stw	fp,88(sp)
10101c40:	df001604 	addi	fp,sp,88
10101c44:	e13ffe15 	stw	r4,-8(fp)
10101c48:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10101c4c:	d0a00f04 	addi	r2,gp,-32708
10101c50:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10101c54:	e0bffe17 	ldw	r2,-8(fp)
10101c58:	10800117 	ldw	r2,4(r2)
10101c5c:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10101c60:	e0bfee04 	addi	r2,fp,-72
10101c64:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10101c68:	003da07a 	break	1

  rc = r2;
10101c6c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10101c70:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10101c74:	e0bfec17 	ldw	r2,-80(fp)
10101c78:	1000621e 	bne	r2,zero,10101e04 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10101c7c:	e0bfee04 	addi	r2,fp,-72
10101c80:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10101c84:	e0bfea17 	ldw	r2,-88(fp)
10101c88:	10801004 	addi	r2,r2,64
10101c8c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10101c90:	00001606 	br	10101cec <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10101c94:	e0bfea17 	ldw	r2,-88(fp)
10101c98:	10800017 	ldw	r2,0(r2)
10101c9c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10101ca0:	e0bfea17 	ldw	r2,-88(fp)
10101ca4:	10800017 	ldw	r2,0(r2)
10101ca8:	10803fec 	andhi	r2,r2,255
10101cac:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10101cb0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10101cb4:	e0bfea17 	ldw	r2,-88(fp)
10101cb8:	10800017 	ldw	r2,0(r2)
10101cbc:	10bfc00c 	andi	r2,r2,65280
10101cc0:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10101cc4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10101cc8:	e0bfea17 	ldw	r2,-88(fp)
10101ccc:	10800017 	ldw	r2,0(r2)
10101cd0:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10101cd4:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10101cd8:	e0bfea17 	ldw	r2,-88(fp)
10101cdc:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10101ce0:	e0bfea17 	ldw	r2,-88(fp)
10101ce4:	10800104 	addi	r2,r2,4
10101ce8:	e0bfea15 	stw	r2,-88(fp)
10101cec:	e0ffea17 	ldw	r3,-88(fp)
10101cf0:	e0bfed17 	ldw	r2,-76(fp)
10101cf4:	18bfe736 	bltu	r3,r2,10101c94 <__alt_data_end+0xfffe1c94>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10101cf8:	e0bfff17 	ldw	r2,-4(fp)
10101cfc:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10101d00:	e0bfea17 	ldw	r2,-88(fp)
10101d04:	10800f04 	addi	r2,r2,60
10101d08:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10101d0c:	00000506 	br	10101d24 <alt_hostfs_fstat+0xec>
      *ptr = 0;
10101d10:	e0bfea17 	ldw	r2,-88(fp)
10101d14:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
10101d18:	e0bfea17 	ldw	r2,-88(fp)
10101d1c:	10800104 	addi	r2,r2,4
10101d20:	e0bfea15 	stw	r2,-88(fp)
10101d24:	e0ffea17 	ldw	r3,-88(fp)
10101d28:	e0bfed17 	ldw	r2,-76(fp)
10101d2c:	18bff836 	bltu	r3,r2,10101d10 <__alt_data_end+0xfffe1d10>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10101d30:	e0bfee17 	ldw	r2,-72(fp)
10101d34:	1007883a 	mov	r3,r2
10101d38:	e0bfff17 	ldw	r2,-4(fp)
10101d3c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
10101d40:	e0bfef17 	ldw	r2,-68(fp)
10101d44:	1007883a 	mov	r3,r2
10101d48:	e0bfff17 	ldw	r2,-4(fp)
10101d4c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
10101d50:	e0fff017 	ldw	r3,-64(fp)
10101d54:	e0bfff17 	ldw	r2,-4(fp)
10101d58:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10101d5c:	e0bff117 	ldw	r2,-60(fp)
10101d60:	1007883a 	mov	r3,r2
10101d64:	e0bfff17 	ldw	r2,-4(fp)
10101d68:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10101d6c:	e0bff217 	ldw	r2,-56(fp)
10101d70:	1007883a 	mov	r3,r2
10101d74:	e0bfff17 	ldw	r2,-4(fp)
10101d78:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10101d7c:	e0bff317 	ldw	r2,-52(fp)
10101d80:	1007883a 	mov	r3,r2
10101d84:	e0bfff17 	ldw	r2,-4(fp)
10101d88:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10101d8c:	e0bff417 	ldw	r2,-48(fp)
10101d90:	1007883a 	mov	r3,r2
10101d94:	e0bfff17 	ldw	r2,-4(fp)
10101d98:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10101d9c:	e0bff617 	ldw	r2,-40(fp)
10101da0:	1007883a 	mov	r3,r2
10101da4:	e0bfff17 	ldw	r2,-4(fp)
10101da8:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10101dac:	e0bffb17 	ldw	r2,-20(fp)
10101db0:	1007883a 	mov	r3,r2
10101db4:	e0bfff17 	ldw	r2,-4(fp)
10101db8:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10101dbc:	e0bffc17 	ldw	r2,-16(fp)
10101dc0:	1007883a 	mov	r3,r2
10101dc4:	e0bfff17 	ldw	r2,-4(fp)
10101dc8:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10101dcc:	e0bffd17 	ldw	r2,-12(fp)
10101dd0:	1007883a 	mov	r3,r2
10101dd4:	e0bfff17 	ldw	r2,-4(fp)
10101dd8:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10101ddc:	e0bff817 	ldw	r2,-32(fp)
10101de0:	1007883a 	mov	r3,r2
10101de4:	e0bfff17 	ldw	r2,-4(fp)
10101de8:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10101dec:	e0bffa17 	ldw	r2,-24(fp)
10101df0:	1007883a 	mov	r3,r2
10101df4:	e0bfff17 	ldw	r2,-4(fp)
10101df8:	10c00c15 	stw	r3,48(r2)

    return rc;
10101dfc:	e0bfeb17 	ldw	r2,-84(fp)
10101e00:	00000206 	br	10101e0c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10101e04:	e0bfec17 	ldw	r2,-80(fp)
10101e08:	0085c83a 	sub	r2,zero,r2
}
10101e0c:	e037883a 	mov	sp,fp
10101e10:	df000017 	ldw	fp,0(sp)
10101e14:	dec00104 	addi	sp,sp,4
10101e18:	f800283a 	ret

10101e1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10101e1c:	defff504 	addi	sp,sp,-44
10101e20:	df000a15 	stw	fp,40(sp)
10101e24:	df000a04 	addi	fp,sp,40
10101e28:	e13ffc15 	stw	r4,-16(fp)
10101e2c:	e17ffd15 	stw	r5,-12(fp)
10101e30:	e1bffe15 	stw	r6,-8(fp)
10101e34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10101e38:	e03ff615 	stw	zero,-40(fp)
10101e3c:	d0a5d317 	ldw	r2,-26804(gp)
  
  if (alt_ticks_per_second ())
10101e40:	10003c26 	beq	r2,zero,10101f34 <alt_alarm_start+0x118>
  {
    if (alarm)
10101e44:	e0bffc17 	ldw	r2,-16(fp)
10101e48:	10003826 	beq	r2,zero,10101f2c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10101e4c:	e0bffc17 	ldw	r2,-16(fp)
10101e50:	e0fffe17 	ldw	r3,-8(fp)
10101e54:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10101e58:	e0bffc17 	ldw	r2,-16(fp)
10101e5c:	e0ffff17 	ldw	r3,-4(fp)
10101e60:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10101e64:	0005303a 	rdctl	r2,status
10101e68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10101e6c:	e0fff917 	ldw	r3,-28(fp)
10101e70:	00bfff84 	movi	r2,-2
10101e74:	1884703a 	and	r2,r3,r2
10101e78:	1001703a 	wrctl	status,r2
  
  return context;
10101e7c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10101e80:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10101e84:	d0a5d417 	ldw	r2,-26800(gp)
      
      current_nticks = alt_nticks();
10101e88:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10101e8c:	e0fffd17 	ldw	r3,-12(fp)
10101e90:	e0bff617 	ldw	r2,-40(fp)
10101e94:	1885883a 	add	r2,r3,r2
10101e98:	10c00044 	addi	r3,r2,1
10101e9c:	e0bffc17 	ldw	r2,-16(fp)
10101ea0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10101ea4:	e0bffc17 	ldw	r2,-16(fp)
10101ea8:	10c00217 	ldw	r3,8(r2)
10101eac:	e0bff617 	ldw	r2,-40(fp)
10101eb0:	1880042e 	bgeu	r3,r2,10101ec4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10101eb4:	e0bffc17 	ldw	r2,-16(fp)
10101eb8:	00c00044 	movi	r3,1
10101ebc:	10c00405 	stb	r3,16(r2)
10101ec0:	00000206 	br	10101ecc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10101ec4:	e0bffc17 	ldw	r2,-16(fp)
10101ec8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10101ecc:	e0bffc17 	ldw	r2,-16(fp)
10101ed0:	d0e01904 	addi	r3,gp,-32668
10101ed4:	e0fffa15 	stw	r3,-24(fp)
10101ed8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10101edc:	e0bffb17 	ldw	r2,-20(fp)
10101ee0:	e0fffa17 	ldw	r3,-24(fp)
10101ee4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10101ee8:	e0bffa17 	ldw	r2,-24(fp)
10101eec:	10c00017 	ldw	r3,0(r2)
10101ef0:	e0bffb17 	ldw	r2,-20(fp)
10101ef4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10101ef8:	e0bffa17 	ldw	r2,-24(fp)
10101efc:	10800017 	ldw	r2,0(r2)
10101f00:	e0fffb17 	ldw	r3,-20(fp)
10101f04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10101f08:	e0bffa17 	ldw	r2,-24(fp)
10101f0c:	e0fffb17 	ldw	r3,-20(fp)
10101f10:	10c00015 	stw	r3,0(r2)
10101f14:	e0bff817 	ldw	r2,-32(fp)
10101f18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10101f1c:	e0bff717 	ldw	r2,-36(fp)
10101f20:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10101f24:	0005883a 	mov	r2,zero
10101f28:	00000306 	br	10101f38 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10101f2c:	00bffa84 	movi	r2,-22
10101f30:	00000106 	br	10101f38 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10101f34:	00bfde84 	movi	r2,-134
  }
}
10101f38:	e037883a 	mov	sp,fp
10101f3c:	df000017 	ldw	fp,0(sp)
10101f40:	dec00104 	addi	sp,sp,4
10101f44:	f800283a 	ret

10101f48 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10101f48:	defffa04 	addi	sp,sp,-24
10101f4c:	dfc00515 	stw	ra,20(sp)
10101f50:	df000415 	stw	fp,16(sp)
10101f54:	df000404 	addi	fp,sp,16
10101f58:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10101f5c:	008000c4 	movi	r2,3
10101f60:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10101f64:	e0fffd17 	ldw	r3,-12(fp)
10101f68:	008003f4 	movhi	r2,15
10101f6c:	10909004 	addi	r2,r2,16960
10101f70:	1885383a 	mul	r2,r3,r2
10101f74:	100b883a 	mov	r5,r2
10101f78:	0100bef4 	movhi	r4,763
10101f7c:	213c2004 	addi	r4,r4,-3968
10101f80:	01036740 	call	10103674 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10101f84:	100b883a 	mov	r5,r2
10101f88:	01200034 	movhi	r4,32768
10101f8c:	213fffc4 	addi	r4,r4,-1
10101f90:	01036740 	call	10103674 <__udivsi3>
10101f94:	100b883a 	mov	r5,r2
10101f98:	e13fff17 	ldw	r4,-4(fp)
10101f9c:	01036740 	call	10103674 <__udivsi3>
10101fa0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10101fa4:	e0bffe17 	ldw	r2,-8(fp)
10101fa8:	10002a26 	beq	r2,zero,10102054 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10101fac:	e03ffc15 	stw	zero,-16(fp)
10101fb0:	00001706 	br	10102010 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10101fb4:	00a00034 	movhi	r2,32768
10101fb8:	10bfffc4 	addi	r2,r2,-1
10101fbc:	10bfffc4 	addi	r2,r2,-1
10101fc0:	103ffe1e 	bne	r2,zero,10101fbc <__alt_data_end+0xfffe1fbc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10101fc4:	e0fffd17 	ldw	r3,-12(fp)
10101fc8:	008003f4 	movhi	r2,15
10101fcc:	10909004 	addi	r2,r2,16960
10101fd0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10101fd4:	100b883a 	mov	r5,r2
10101fd8:	0100bef4 	movhi	r4,763
10101fdc:	213c2004 	addi	r4,r4,-3968
10101fe0:	01036740 	call	10103674 <__udivsi3>
10101fe4:	100b883a 	mov	r5,r2
10101fe8:	01200034 	movhi	r4,32768
10101fec:	213fffc4 	addi	r4,r4,-1
10101ff0:	01036740 	call	10103674 <__udivsi3>
10101ff4:	1007883a 	mov	r3,r2
10101ff8:	e0bfff17 	ldw	r2,-4(fp)
10101ffc:	10c5c83a 	sub	r2,r2,r3
10102000:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10102004:	e0bffc17 	ldw	r2,-16(fp)
10102008:	10800044 	addi	r2,r2,1
1010200c:	e0bffc15 	stw	r2,-16(fp)
10102010:	e0fffc17 	ldw	r3,-16(fp)
10102014:	e0bffe17 	ldw	r2,-8(fp)
10102018:	18bfe616 	blt	r3,r2,10101fb4 <__alt_data_end+0xfffe1fb4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1010201c:	e0fffd17 	ldw	r3,-12(fp)
10102020:	008003f4 	movhi	r2,15
10102024:	10909004 	addi	r2,r2,16960
10102028:	1885383a 	mul	r2,r3,r2
1010202c:	100b883a 	mov	r5,r2
10102030:	0100bef4 	movhi	r4,763
10102034:	213c2004 	addi	r4,r4,-3968
10102038:	01036740 	call	10103674 <__udivsi3>
1010203c:	1007883a 	mov	r3,r2
10102040:	e0bfff17 	ldw	r2,-4(fp)
10102044:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10102048:	10bfffc4 	addi	r2,r2,-1
1010204c:	103ffe1e 	bne	r2,zero,10102048 <__alt_data_end+0xfffe2048>
10102050:	00000d06 	br	10102088 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10102054:	e0fffd17 	ldw	r3,-12(fp)
10102058:	008003f4 	movhi	r2,15
1010205c:	10909004 	addi	r2,r2,16960
10102060:	1885383a 	mul	r2,r3,r2
10102064:	100b883a 	mov	r5,r2
10102068:	0100bef4 	movhi	r4,763
1010206c:	213c2004 	addi	r4,r4,-3968
10102070:	01036740 	call	10103674 <__udivsi3>
10102074:	1007883a 	mov	r3,r2
10102078:	e0bfff17 	ldw	r2,-4(fp)
1010207c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10102080:	10bfffc4 	addi	r2,r2,-1
10102084:	00bffe16 	blt	zero,r2,10102080 <__alt_data_end+0xfffe2080>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10102088:	0005883a 	mov	r2,zero
}
1010208c:	e037883a 	mov	sp,fp
10102090:	dfc00117 	ldw	ra,4(sp)
10102094:	df000017 	ldw	fp,0(sp)
10102098:	dec00204 	addi	sp,sp,8
1010209c:	f800283a 	ret

101020a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101020a0:	defffe04 	addi	sp,sp,-8
101020a4:	dfc00115 	stw	ra,4(sp)
101020a8:	df000015 	stw	fp,0(sp)
101020ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101020b0:	d0a01717 	ldw	r2,-32676(gp)
101020b4:	10000326 	beq	r2,zero,101020c4 <alt_get_errno+0x24>
101020b8:	d0a01717 	ldw	r2,-32676(gp)
101020bc:	103ee83a 	callr	r2
101020c0:	00000106 	br	101020c8 <alt_get_errno+0x28>
101020c4:	d0a5d604 	addi	r2,gp,-26792
}
101020c8:	e037883a 	mov	sp,fp
101020cc:	dfc00117 	ldw	ra,4(sp)
101020d0:	df000017 	ldw	fp,0(sp)
101020d4:	dec00204 	addi	sp,sp,8
101020d8:	f800283a 	ret

101020dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
101020dc:	defffb04 	addi	sp,sp,-20
101020e0:	dfc00415 	stw	ra,16(sp)
101020e4:	df000315 	stw	fp,12(sp)
101020e8:	df000304 	addi	fp,sp,12
101020ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
101020f0:	e0bfff17 	ldw	r2,-4(fp)
101020f4:	10000616 	blt	r2,zero,10102110 <close+0x34>
101020f8:	e0bfff17 	ldw	r2,-4(fp)
101020fc:	10c00324 	muli	r3,r2,12
10102100:	00840434 	movhi	r2,4112
10102104:	10921604 	addi	r2,r2,18520
10102108:	1885883a 	add	r2,r3,r2
1010210c:	00000106 	br	10102114 <close+0x38>
10102110:	0005883a 	mov	r2,zero
10102114:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10102118:	e0bffd17 	ldw	r2,-12(fp)
1010211c:	10001926 	beq	r2,zero,10102184 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10102120:	e0bffd17 	ldw	r2,-12(fp)
10102124:	10800017 	ldw	r2,0(r2)
10102128:	10800417 	ldw	r2,16(r2)
1010212c:	10000626 	beq	r2,zero,10102148 <close+0x6c>
10102130:	e0bffd17 	ldw	r2,-12(fp)
10102134:	10800017 	ldw	r2,0(r2)
10102138:	10800417 	ldw	r2,16(r2)
1010213c:	e13ffd17 	ldw	r4,-12(fp)
10102140:	103ee83a 	callr	r2
10102144:	00000106 	br	1010214c <close+0x70>
10102148:	0005883a 	mov	r2,zero
1010214c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10102150:	e13fff17 	ldw	r4,-4(fp)
10102154:	0102aa80 	call	10102aa8 <alt_release_fd>
    if (rval < 0)
10102158:	e0bffe17 	ldw	r2,-8(fp)
1010215c:	1000070e 	bge	r2,zero,1010217c <close+0xa0>
    {
      ALT_ERRNO = -rval;
10102160:	01020a00 	call	101020a0 <alt_get_errno>
10102164:	1007883a 	mov	r3,r2
10102168:	e0bffe17 	ldw	r2,-8(fp)
1010216c:	0085c83a 	sub	r2,zero,r2
10102170:	18800015 	stw	r2,0(r3)
      return -1;
10102174:	00bfffc4 	movi	r2,-1
10102178:	00000706 	br	10102198 <close+0xbc>
    }
    return 0;
1010217c:	0005883a 	mov	r2,zero
10102180:	00000506 	br	10102198 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10102184:	01020a00 	call	101020a0 <alt_get_errno>
10102188:	1007883a 	mov	r3,r2
1010218c:	00801444 	movi	r2,81
10102190:	18800015 	stw	r2,0(r3)
    return -1;
10102194:	00bfffc4 	movi	r2,-1
  }
}
10102198:	e037883a 	mov	sp,fp
1010219c:	dfc00117 	ldw	ra,4(sp)
101021a0:	df000017 	ldw	fp,0(sp)
101021a4:	dec00204 	addi	sp,sp,8
101021a8:	f800283a 	ret

101021ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101021ac:	defffe04 	addi	sp,sp,-8
101021b0:	df000115 	stw	fp,4(sp)
101021b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101021b8:	e03fff15 	stw	zero,-4(fp)
101021bc:	00000506 	br	101021d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
101021c0:	e0bfff17 	ldw	r2,-4(fp)
101021c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101021c8:	e0bfff17 	ldw	r2,-4(fp)
101021cc:	10800804 	addi	r2,r2,32
101021d0:	e0bfff15 	stw	r2,-4(fp)
101021d4:	e0bfff17 	ldw	r2,-4(fp)
101021d8:	10820030 	cmpltui	r2,r2,2048
101021dc:	103ff81e 	bne	r2,zero,101021c0 <__alt_data_end+0xfffe21c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101021e0:	0001883a 	nop
101021e4:	e037883a 	mov	sp,fp
101021e8:	df000017 	ldw	fp,0(sp)
101021ec:	dec00104 	addi	sp,sp,4
101021f0:	f800283a 	ret

101021f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
101021f4:	defffc04 	addi	sp,sp,-16
101021f8:	df000315 	stw	fp,12(sp)
101021fc:	df000304 	addi	fp,sp,12
10102200:	e13ffd15 	stw	r4,-12(fp)
10102204:	e17ffe15 	stw	r5,-8(fp)
10102208:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010220c:	e0bfff17 	ldw	r2,-4(fp)
}
10102210:	e037883a 	mov	sp,fp
10102214:	df000017 	ldw	fp,0(sp)
10102218:	dec00104 	addi	sp,sp,4
1010221c:	f800283a 	ret

10102220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10102220:	defffe04 	addi	sp,sp,-8
10102224:	dfc00115 	stw	ra,4(sp)
10102228:	df000015 	stw	fp,0(sp)
1010222c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10102230:	d0a01717 	ldw	r2,-32676(gp)
10102234:	10000326 	beq	r2,zero,10102244 <alt_get_errno+0x24>
10102238:	d0a01717 	ldw	r2,-32676(gp)
1010223c:	103ee83a 	callr	r2
10102240:	00000106 	br	10102248 <alt_get_errno+0x28>
10102244:	d0a5d604 	addi	r2,gp,-26792
}
10102248:	e037883a 	mov	sp,fp
1010224c:	dfc00117 	ldw	ra,4(sp)
10102250:	df000017 	ldw	fp,0(sp)
10102254:	dec00204 	addi	sp,sp,8
10102258:	f800283a 	ret

1010225c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010225c:	defffa04 	addi	sp,sp,-24
10102260:	dfc00515 	stw	ra,20(sp)
10102264:	df000415 	stw	fp,16(sp)
10102268:	df000404 	addi	fp,sp,16
1010226c:	e13ffe15 	stw	r4,-8(fp)
10102270:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10102274:	e0bffe17 	ldw	r2,-8(fp)
10102278:	10000326 	beq	r2,zero,10102288 <alt_dev_llist_insert+0x2c>
1010227c:	e0bffe17 	ldw	r2,-8(fp)
10102280:	10800217 	ldw	r2,8(r2)
10102284:	1000061e 	bne	r2,zero,101022a0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10102288:	01022200 	call	10102220 <alt_get_errno>
1010228c:	1007883a 	mov	r3,r2
10102290:	00800584 	movi	r2,22
10102294:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10102298:	00bffa84 	movi	r2,-22
1010229c:	00001306 	br	101022ec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101022a0:	e0bffe17 	ldw	r2,-8(fp)
101022a4:	e0ffff17 	ldw	r3,-4(fp)
101022a8:	e0fffc15 	stw	r3,-16(fp)
101022ac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101022b0:	e0bffd17 	ldw	r2,-12(fp)
101022b4:	e0fffc17 	ldw	r3,-16(fp)
101022b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101022bc:	e0bffc17 	ldw	r2,-16(fp)
101022c0:	10c00017 	ldw	r3,0(r2)
101022c4:	e0bffd17 	ldw	r2,-12(fp)
101022c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101022cc:	e0bffc17 	ldw	r2,-16(fp)
101022d0:	10800017 	ldw	r2,0(r2)
101022d4:	e0fffd17 	ldw	r3,-12(fp)
101022d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101022dc:	e0bffc17 	ldw	r2,-16(fp)
101022e0:	e0fffd17 	ldw	r3,-12(fp)
101022e4:	10c00015 	stw	r3,0(r2)

  return 0;  
101022e8:	0005883a 	mov	r2,zero
}
101022ec:	e037883a 	mov	sp,fp
101022f0:	dfc00117 	ldw	ra,4(sp)
101022f4:	df000017 	ldw	fp,0(sp)
101022f8:	dec00204 	addi	sp,sp,8
101022fc:	f800283a 	ret

10102300 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10102300:	defffd04 	addi	sp,sp,-12
10102304:	dfc00215 	stw	ra,8(sp)
10102308:	df000115 	stw	fp,4(sp)
1010230c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10102310:	00840434 	movhi	r2,4112
10102314:	108dd804 	addi	r2,r2,14176
10102318:	e0bfff15 	stw	r2,-4(fp)
1010231c:	00000606 	br	10102338 <_do_ctors+0x38>
        (*ctor) (); 
10102320:	e0bfff17 	ldw	r2,-4(fp)
10102324:	10800017 	ldw	r2,0(r2)
10102328:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010232c:	e0bfff17 	ldw	r2,-4(fp)
10102330:	10bfff04 	addi	r2,r2,-4
10102334:	e0bfff15 	stw	r2,-4(fp)
10102338:	e0ffff17 	ldw	r3,-4(fp)
1010233c:	00840434 	movhi	r2,4112
10102340:	108dd904 	addi	r2,r2,14180
10102344:	18bff62e 	bgeu	r3,r2,10102320 <__alt_data_end+0xfffe2320>
        (*ctor) (); 
}
10102348:	0001883a 	nop
1010234c:	e037883a 	mov	sp,fp
10102350:	dfc00117 	ldw	ra,4(sp)
10102354:	df000017 	ldw	fp,0(sp)
10102358:	dec00204 	addi	sp,sp,8
1010235c:	f800283a 	ret

10102360 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10102360:	defffd04 	addi	sp,sp,-12
10102364:	dfc00215 	stw	ra,8(sp)
10102368:	df000115 	stw	fp,4(sp)
1010236c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10102370:	00840434 	movhi	r2,4112
10102374:	108dd804 	addi	r2,r2,14176
10102378:	e0bfff15 	stw	r2,-4(fp)
1010237c:	00000606 	br	10102398 <_do_dtors+0x38>
        (*dtor) (); 
10102380:	e0bfff17 	ldw	r2,-4(fp)
10102384:	10800017 	ldw	r2,0(r2)
10102388:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010238c:	e0bfff17 	ldw	r2,-4(fp)
10102390:	10bfff04 	addi	r2,r2,-4
10102394:	e0bfff15 	stw	r2,-4(fp)
10102398:	e0ffff17 	ldw	r3,-4(fp)
1010239c:	00840434 	movhi	r2,4112
101023a0:	108dd904 	addi	r2,r2,14180
101023a4:	18bff62e 	bgeu	r3,r2,10102380 <__alt_data_end+0xfffe2380>
        (*dtor) (); 
}
101023a8:	0001883a 	nop
101023ac:	e037883a 	mov	sp,fp
101023b0:	dfc00117 	ldw	ra,4(sp)
101023b4:	df000017 	ldw	fp,0(sp)
101023b8:	dec00204 	addi	sp,sp,8
101023bc:	f800283a 	ret

101023c0 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
101023c0:	defffc04 	addi	sp,sp,-16
101023c4:	df000315 	stw	fp,12(sp)
101023c8:	df000304 	addi	fp,sp,12
101023cc:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
101023d0:	e0bfff17 	ldw	r2,-4(fp)
101023d4:	10800217 	ldw	r2,8(r2)
101023d8:	1000021e 	bne	r2,zero,101023e4 <alt_fs_reg+0x24>
  {
    return -ENODEV;
101023dc:	00bffb44 	movi	r2,-19
101023e0:	00001306 	br	10102430 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
101023e4:	e0bfff17 	ldw	r2,-4(fp)
101023e8:	d0e01204 	addi	r3,gp,-32696
101023ec:	e0fffd15 	stw	r3,-12(fp)
101023f0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101023f4:	e0bffe17 	ldw	r2,-8(fp)
101023f8:	e0fffd17 	ldw	r3,-12(fp)
101023fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10102400:	e0bffd17 	ldw	r2,-12(fp)
10102404:	10c00017 	ldw	r3,0(r2)
10102408:	e0bffe17 	ldw	r2,-8(fp)
1010240c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10102410:	e0bffd17 	ldw	r2,-12(fp)
10102414:	10800017 	ldw	r2,0(r2)
10102418:	e0fffe17 	ldw	r3,-8(fp)
1010241c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10102420:	e0bffd17 	ldw	r2,-12(fp)
10102424:	e0fffe17 	ldw	r3,-8(fp)
10102428:	10c00015 	stw	r3,0(r2)

  return 0;
1010242c:	0005883a 	mov	r2,zero
} 
10102430:	e037883a 	mov	sp,fp
10102434:	df000017 	ldw	fp,0(sp)
10102438:	dec00104 	addi	sp,sp,4
1010243c:	f800283a 	ret

10102440 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10102440:	defffe04 	addi	sp,sp,-8
10102444:	dfc00115 	stw	ra,4(sp)
10102448:	df000015 	stw	fp,0(sp)
1010244c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10102450:	01440004 	movi	r5,4096
10102454:	0009883a 	mov	r4,zero
10102458:	0102f100 	call	10102f10 <alt_icache_flush>
#endif
}
1010245c:	0001883a 	nop
10102460:	e037883a 	mov	sp,fp
10102464:	dfc00117 	ldw	ra,4(sp)
10102468:	df000017 	ldw	fp,0(sp)
1010246c:	dec00204 	addi	sp,sp,8
10102470:	f800283a 	ret

10102474 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10102474:	defff904 	addi	sp,sp,-28
10102478:	dfc00615 	stw	ra,24(sp)
1010247c:	df000515 	stw	fp,20(sp)
10102480:	df000504 	addi	fp,sp,20
10102484:	e13ffc15 	stw	r4,-16(fp)
10102488:	e17ffd15 	stw	r5,-12(fp)
1010248c:	e1bffe15 	stw	r6,-8(fp)
10102490:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10102494:	e0800217 	ldw	r2,8(fp)
10102498:	d8800015 	stw	r2,0(sp)
1010249c:	e1ffff17 	ldw	r7,-4(fp)
101024a0:	e1bffe17 	ldw	r6,-8(fp)
101024a4:	e17ffd17 	ldw	r5,-12(fp)
101024a8:	e13ffc17 	ldw	r4,-16(fp)
101024ac:	01026240 	call	10102624 <alt_iic_isr_register>
}  
101024b0:	e037883a 	mov	sp,fp
101024b4:	dfc00117 	ldw	ra,4(sp)
101024b8:	df000017 	ldw	fp,0(sp)
101024bc:	dec00204 	addi	sp,sp,8
101024c0:	f800283a 	ret

101024c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101024c4:	defff904 	addi	sp,sp,-28
101024c8:	df000615 	stw	fp,24(sp)
101024cc:	df000604 	addi	fp,sp,24
101024d0:	e13ffe15 	stw	r4,-8(fp)
101024d4:	e17fff15 	stw	r5,-4(fp)
101024d8:	e0bfff17 	ldw	r2,-4(fp)
101024dc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101024e0:	0005303a 	rdctl	r2,status
101024e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101024e8:	e0fffb17 	ldw	r3,-20(fp)
101024ec:	00bfff84 	movi	r2,-2
101024f0:	1884703a 	and	r2,r3,r2
101024f4:	1001703a 	wrctl	status,r2
  
  return context;
101024f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101024fc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10102500:	00c00044 	movi	r3,1
10102504:	e0bffa17 	ldw	r2,-24(fp)
10102508:	1884983a 	sll	r2,r3,r2
1010250c:	1007883a 	mov	r3,r2
10102510:	d0a5d217 	ldw	r2,-26808(gp)
10102514:	1884b03a 	or	r2,r3,r2
10102518:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010251c:	d0a5d217 	ldw	r2,-26808(gp)
10102520:	100170fa 	wrctl	ienable,r2
10102524:	e0bffc17 	ldw	r2,-16(fp)
10102528:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010252c:	e0bffd17 	ldw	r2,-12(fp)
10102530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10102534:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10102538:	0001883a 	nop
}
1010253c:	e037883a 	mov	sp,fp
10102540:	df000017 	ldw	fp,0(sp)
10102544:	dec00104 	addi	sp,sp,4
10102548:	f800283a 	ret

1010254c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1010254c:	defff904 	addi	sp,sp,-28
10102550:	df000615 	stw	fp,24(sp)
10102554:	df000604 	addi	fp,sp,24
10102558:	e13ffe15 	stw	r4,-8(fp)
1010255c:	e17fff15 	stw	r5,-4(fp)
10102560:	e0bfff17 	ldw	r2,-4(fp)
10102564:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10102568:	0005303a 	rdctl	r2,status
1010256c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10102570:	e0fffb17 	ldw	r3,-20(fp)
10102574:	00bfff84 	movi	r2,-2
10102578:	1884703a 	and	r2,r3,r2
1010257c:	1001703a 	wrctl	status,r2
  
  return context;
10102580:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10102584:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10102588:	00c00044 	movi	r3,1
1010258c:	e0bffa17 	ldw	r2,-24(fp)
10102590:	1884983a 	sll	r2,r3,r2
10102594:	0084303a 	nor	r2,zero,r2
10102598:	1007883a 	mov	r3,r2
1010259c:	d0a5d217 	ldw	r2,-26808(gp)
101025a0:	1884703a 	and	r2,r3,r2
101025a4:	d0a5d215 	stw	r2,-26808(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101025a8:	d0a5d217 	ldw	r2,-26808(gp)
101025ac:	100170fa 	wrctl	ienable,r2
101025b0:	e0bffc17 	ldw	r2,-16(fp)
101025b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101025b8:	e0bffd17 	ldw	r2,-12(fp)
101025bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101025c0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101025c4:	0001883a 	nop
}
101025c8:	e037883a 	mov	sp,fp
101025cc:	df000017 	ldw	fp,0(sp)
101025d0:	dec00104 	addi	sp,sp,4
101025d4:	f800283a 	ret

101025d8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101025d8:	defffc04 	addi	sp,sp,-16
101025dc:	df000315 	stw	fp,12(sp)
101025e0:	df000304 	addi	fp,sp,12
101025e4:	e13ffe15 	stw	r4,-8(fp)
101025e8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101025ec:	000530fa 	rdctl	r2,ienable
101025f0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
101025f4:	00c00044 	movi	r3,1
101025f8:	e0bfff17 	ldw	r2,-4(fp)
101025fc:	1884983a 	sll	r2,r3,r2
10102600:	1007883a 	mov	r3,r2
10102604:	e0bffd17 	ldw	r2,-12(fp)
10102608:	1884703a 	and	r2,r3,r2
1010260c:	1004c03a 	cmpne	r2,r2,zero
10102610:	10803fcc 	andi	r2,r2,255
}
10102614:	e037883a 	mov	sp,fp
10102618:	df000017 	ldw	fp,0(sp)
1010261c:	dec00104 	addi	sp,sp,4
10102620:	f800283a 	ret

10102624 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10102624:	defff504 	addi	sp,sp,-44
10102628:	dfc00a15 	stw	ra,40(sp)
1010262c:	df000915 	stw	fp,36(sp)
10102630:	df000904 	addi	fp,sp,36
10102634:	e13ffc15 	stw	r4,-16(fp)
10102638:	e17ffd15 	stw	r5,-12(fp)
1010263c:	e1bffe15 	stw	r6,-8(fp)
10102640:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10102644:	00bffa84 	movi	r2,-22
10102648:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1010264c:	e0bffd17 	ldw	r2,-12(fp)
10102650:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10102654:	e0bff817 	ldw	r2,-32(fp)
10102658:	10800808 	cmpgei	r2,r2,32
1010265c:	1000271e 	bne	r2,zero,101026fc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10102660:	0005303a 	rdctl	r2,status
10102664:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10102668:	e0fffb17 	ldw	r3,-20(fp)
1010266c:	00bfff84 	movi	r2,-2
10102670:	1884703a 	and	r2,r3,r2
10102674:	1001703a 	wrctl	status,r2
  
  return context;
10102678:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1010267c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10102680:	00840434 	movhi	r2,4112
10102684:	10995604 	addi	r2,r2,25944
10102688:	e0fff817 	ldw	r3,-32(fp)
1010268c:	180690fa 	slli	r3,r3,3
10102690:	10c5883a 	add	r2,r2,r3
10102694:	e0fffe17 	ldw	r3,-8(fp)
10102698:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1010269c:	00840434 	movhi	r2,4112
101026a0:	10995604 	addi	r2,r2,25944
101026a4:	e0fff817 	ldw	r3,-32(fp)
101026a8:	180690fa 	slli	r3,r3,3
101026ac:	10c5883a 	add	r2,r2,r3
101026b0:	10800104 	addi	r2,r2,4
101026b4:	e0ffff17 	ldw	r3,-4(fp)
101026b8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101026bc:	e0bffe17 	ldw	r2,-8(fp)
101026c0:	10000526 	beq	r2,zero,101026d8 <alt_iic_isr_register+0xb4>
101026c4:	e0bff817 	ldw	r2,-32(fp)
101026c8:	100b883a 	mov	r5,r2
101026cc:	e13ffc17 	ldw	r4,-16(fp)
101026d0:	01024c40 	call	101024c4 <alt_ic_irq_enable>
101026d4:	00000406 	br	101026e8 <alt_iic_isr_register+0xc4>
101026d8:	e0bff817 	ldw	r2,-32(fp)
101026dc:	100b883a 	mov	r5,r2
101026e0:	e13ffc17 	ldw	r4,-16(fp)
101026e4:	010254c0 	call	1010254c <alt_ic_irq_disable>
101026e8:	e0bff715 	stw	r2,-36(fp)
101026ec:	e0bffa17 	ldw	r2,-24(fp)
101026f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101026f4:	e0bff917 	ldw	r2,-28(fp)
101026f8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
101026fc:	e0bff717 	ldw	r2,-36(fp)
}
10102700:	e037883a 	mov	sp,fp
10102704:	dfc00117 	ldw	ra,4(sp)
10102708:	df000017 	ldw	fp,0(sp)
1010270c:	dec00204 	addi	sp,sp,8
10102710:	f800283a 	ret

10102714 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10102714:	defff904 	addi	sp,sp,-28
10102718:	dfc00615 	stw	ra,24(sp)
1010271c:	df000515 	stw	fp,20(sp)
10102720:	df000504 	addi	fp,sp,20
10102724:	e13ffc15 	stw	r4,-16(fp)
10102728:	e17ffd15 	stw	r5,-12(fp)
1010272c:	e1bffe15 	stw	r6,-8(fp)
10102730:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10102734:	e1bfff17 	ldw	r6,-4(fp)
10102738:	e17ffe17 	ldw	r5,-8(fp)
1010273c:	e13ffd17 	ldw	r4,-12(fp)
10102740:	01029540 	call	10102954 <open>
10102744:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10102748:	e0bffb17 	ldw	r2,-20(fp)
1010274c:	10001c16 	blt	r2,zero,101027c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10102750:	00840434 	movhi	r2,4112
10102754:	10921604 	addi	r2,r2,18520
10102758:	e0fffb17 	ldw	r3,-20(fp)
1010275c:	18c00324 	muli	r3,r3,12
10102760:	10c5883a 	add	r2,r2,r3
10102764:	10c00017 	ldw	r3,0(r2)
10102768:	e0bffc17 	ldw	r2,-16(fp)
1010276c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10102770:	00840434 	movhi	r2,4112
10102774:	10921604 	addi	r2,r2,18520
10102778:	e0fffb17 	ldw	r3,-20(fp)
1010277c:	18c00324 	muli	r3,r3,12
10102780:	10c5883a 	add	r2,r2,r3
10102784:	10800104 	addi	r2,r2,4
10102788:	10c00017 	ldw	r3,0(r2)
1010278c:	e0bffc17 	ldw	r2,-16(fp)
10102790:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10102794:	00840434 	movhi	r2,4112
10102798:	10921604 	addi	r2,r2,18520
1010279c:	e0fffb17 	ldw	r3,-20(fp)
101027a0:	18c00324 	muli	r3,r3,12
101027a4:	10c5883a 	add	r2,r2,r3
101027a8:	10800204 	addi	r2,r2,8
101027ac:	10c00017 	ldw	r3,0(r2)
101027b0:	e0bffc17 	ldw	r2,-16(fp)
101027b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101027b8:	e13ffb17 	ldw	r4,-20(fp)
101027bc:	0102aa80 	call	10102aa8 <alt_release_fd>
  }
} 
101027c0:	0001883a 	nop
101027c4:	e037883a 	mov	sp,fp
101027c8:	dfc00117 	ldw	ra,4(sp)
101027cc:	df000017 	ldw	fp,0(sp)
101027d0:	dec00204 	addi	sp,sp,8
101027d4:	f800283a 	ret

101027d8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101027d8:	defffb04 	addi	sp,sp,-20
101027dc:	dfc00415 	stw	ra,16(sp)
101027e0:	df000315 	stw	fp,12(sp)
101027e4:	df000304 	addi	fp,sp,12
101027e8:	e13ffd15 	stw	r4,-12(fp)
101027ec:	e17ffe15 	stw	r5,-8(fp)
101027f0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
101027f4:	01c07fc4 	movi	r7,511
101027f8:	01800044 	movi	r6,1
101027fc:	e17ffd17 	ldw	r5,-12(fp)
10102800:	01040434 	movhi	r4,4112
10102804:	21121904 	addi	r4,r4,18532
10102808:	01027140 	call	10102714 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1010280c:	01c07fc4 	movi	r7,511
10102810:	000d883a 	mov	r6,zero
10102814:	e17ffe17 	ldw	r5,-8(fp)
10102818:	01040434 	movhi	r4,4112
1010281c:	21121604 	addi	r4,r4,18520
10102820:	01027140 	call	10102714 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10102824:	01c07fc4 	movi	r7,511
10102828:	01800044 	movi	r6,1
1010282c:	e17fff17 	ldw	r5,-4(fp)
10102830:	01040434 	movhi	r4,4112
10102834:	21121c04 	addi	r4,r4,18544
10102838:	01027140 	call	10102714 <alt_open_fd>
}  
1010283c:	0001883a 	nop
10102840:	e037883a 	mov	sp,fp
10102844:	dfc00117 	ldw	ra,4(sp)
10102848:	df000017 	ldw	fp,0(sp)
1010284c:	dec00204 	addi	sp,sp,8
10102850:	f800283a 	ret

10102854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10102854:	defffe04 	addi	sp,sp,-8
10102858:	dfc00115 	stw	ra,4(sp)
1010285c:	df000015 	stw	fp,0(sp)
10102860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10102864:	d0a01717 	ldw	r2,-32676(gp)
10102868:	10000326 	beq	r2,zero,10102878 <alt_get_errno+0x24>
1010286c:	d0a01717 	ldw	r2,-32676(gp)
10102870:	103ee83a 	callr	r2
10102874:	00000106 	br	1010287c <alt_get_errno+0x28>
10102878:	d0a5d604 	addi	r2,gp,-26792
}
1010287c:	e037883a 	mov	sp,fp
10102880:	dfc00117 	ldw	ra,4(sp)
10102884:	df000017 	ldw	fp,0(sp)
10102888:	dec00204 	addi	sp,sp,8
1010288c:	f800283a 	ret

10102890 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10102890:	defffd04 	addi	sp,sp,-12
10102894:	df000215 	stw	fp,8(sp)
10102898:	df000204 	addi	fp,sp,8
1010289c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
101028a0:	e0bfff17 	ldw	r2,-4(fp)
101028a4:	10800217 	ldw	r2,8(r2)
101028a8:	10d00034 	orhi	r3,r2,16384
101028ac:	e0bfff17 	ldw	r2,-4(fp)
101028b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
101028b4:	e03ffe15 	stw	zero,-8(fp)
101028b8:	00001d06 	br	10102930 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101028bc:	00840434 	movhi	r2,4112
101028c0:	10921604 	addi	r2,r2,18520
101028c4:	e0fffe17 	ldw	r3,-8(fp)
101028c8:	18c00324 	muli	r3,r3,12
101028cc:	10c5883a 	add	r2,r2,r3
101028d0:	10c00017 	ldw	r3,0(r2)
101028d4:	e0bfff17 	ldw	r2,-4(fp)
101028d8:	10800017 	ldw	r2,0(r2)
101028dc:	1880111e 	bne	r3,r2,10102924 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101028e0:	00840434 	movhi	r2,4112
101028e4:	10921604 	addi	r2,r2,18520
101028e8:	e0fffe17 	ldw	r3,-8(fp)
101028ec:	18c00324 	muli	r3,r3,12
101028f0:	10c5883a 	add	r2,r2,r3
101028f4:	10800204 	addi	r2,r2,8
101028f8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101028fc:	1000090e 	bge	r2,zero,10102924 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10102900:	e0bffe17 	ldw	r2,-8(fp)
10102904:	10c00324 	muli	r3,r2,12
10102908:	00840434 	movhi	r2,4112
1010290c:	10921604 	addi	r2,r2,18520
10102910:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10102914:	e0bfff17 	ldw	r2,-4(fp)
10102918:	18800226 	beq	r3,r2,10102924 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010291c:	00bffcc4 	movi	r2,-13
10102920:	00000806 	br	10102944 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10102924:	e0bffe17 	ldw	r2,-8(fp)
10102928:	10800044 	addi	r2,r2,1
1010292c:	e0bffe15 	stw	r2,-8(fp)
10102930:	d0a01617 	ldw	r2,-32680(gp)
10102934:	1007883a 	mov	r3,r2
10102938:	e0bffe17 	ldw	r2,-8(fp)
1010293c:	18bfdf2e 	bgeu	r3,r2,101028bc <__alt_data_end+0xfffe28bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10102940:	0005883a 	mov	r2,zero
}
10102944:	e037883a 	mov	sp,fp
10102948:	df000017 	ldw	fp,0(sp)
1010294c:	dec00104 	addi	sp,sp,4
10102950:	f800283a 	ret

10102954 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10102954:	defff604 	addi	sp,sp,-40
10102958:	dfc00915 	stw	ra,36(sp)
1010295c:	df000815 	stw	fp,32(sp)
10102960:	df000804 	addi	fp,sp,32
10102964:	e13ffd15 	stw	r4,-12(fp)
10102968:	e17ffe15 	stw	r5,-8(fp)
1010296c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10102970:	00bfffc4 	movi	r2,-1
10102974:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10102978:	00bffb44 	movi	r2,-19
1010297c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10102980:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10102984:	d1601404 	addi	r5,gp,-32688
10102988:	e13ffd17 	ldw	r4,-12(fp)
1010298c:	0102cd40 	call	10102cd4 <alt_find_dev>
10102990:	e0bff815 	stw	r2,-32(fp)
10102994:	e0bff817 	ldw	r2,-32(fp)
10102998:	1000051e 	bne	r2,zero,101029b0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010299c:	e13ffd17 	ldw	r4,-12(fp)
101029a0:	0102d640 	call	10102d64 <alt_find_file>
101029a4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
101029a8:	00800044 	movi	r2,1
101029ac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
101029b0:	e0bff817 	ldw	r2,-32(fp)
101029b4:	10002926 	beq	r2,zero,10102a5c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
101029b8:	e13ff817 	ldw	r4,-32(fp)
101029bc:	0102e6c0 	call	10102e6c <alt_get_fd>
101029c0:	e0bff915 	stw	r2,-28(fp)
101029c4:	e0bff917 	ldw	r2,-28(fp)
101029c8:	1000030e 	bge	r2,zero,101029d8 <open+0x84>
    {
      status = index;
101029cc:	e0bff917 	ldw	r2,-28(fp)
101029d0:	e0bffa15 	stw	r2,-24(fp)
101029d4:	00002306 	br	10102a64 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
101029d8:	e0bff917 	ldw	r2,-28(fp)
101029dc:	10c00324 	muli	r3,r2,12
101029e0:	00840434 	movhi	r2,4112
101029e4:	10921604 	addi	r2,r2,18520
101029e8:	1885883a 	add	r2,r3,r2
101029ec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
101029f0:	e0fffe17 	ldw	r3,-8(fp)
101029f4:	00900034 	movhi	r2,16384
101029f8:	10bfffc4 	addi	r2,r2,-1
101029fc:	1886703a 	and	r3,r3,r2
10102a00:	e0bffc17 	ldw	r2,-16(fp)
10102a04:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10102a08:	e0bffb17 	ldw	r2,-20(fp)
10102a0c:	1000051e 	bne	r2,zero,10102a24 <open+0xd0>
10102a10:	e13ffc17 	ldw	r4,-16(fp)
10102a14:	01028900 	call	10102890 <alt_file_locked>
10102a18:	e0bffa15 	stw	r2,-24(fp)
10102a1c:	e0bffa17 	ldw	r2,-24(fp)
10102a20:	10001016 	blt	r2,zero,10102a64 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10102a24:	e0bff817 	ldw	r2,-32(fp)
10102a28:	10800317 	ldw	r2,12(r2)
10102a2c:	10000826 	beq	r2,zero,10102a50 <open+0xfc>
10102a30:	e0bff817 	ldw	r2,-32(fp)
10102a34:	10800317 	ldw	r2,12(r2)
10102a38:	e1ffff17 	ldw	r7,-4(fp)
10102a3c:	e1bffe17 	ldw	r6,-8(fp)
10102a40:	e17ffd17 	ldw	r5,-12(fp)
10102a44:	e13ffc17 	ldw	r4,-16(fp)
10102a48:	103ee83a 	callr	r2
10102a4c:	00000106 	br	10102a54 <open+0x100>
10102a50:	0005883a 	mov	r2,zero
10102a54:	e0bffa15 	stw	r2,-24(fp)
10102a58:	00000206 	br	10102a64 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10102a5c:	00bffb44 	movi	r2,-19
10102a60:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10102a64:	e0bffa17 	ldw	r2,-24(fp)
10102a68:	1000090e 	bge	r2,zero,10102a90 <open+0x13c>
  {
    alt_release_fd (index);  
10102a6c:	e13ff917 	ldw	r4,-28(fp)
10102a70:	0102aa80 	call	10102aa8 <alt_release_fd>
    ALT_ERRNO = -status;
10102a74:	01028540 	call	10102854 <alt_get_errno>
10102a78:	1007883a 	mov	r3,r2
10102a7c:	e0bffa17 	ldw	r2,-24(fp)
10102a80:	0085c83a 	sub	r2,zero,r2
10102a84:	18800015 	stw	r2,0(r3)
    return -1;
10102a88:	00bfffc4 	movi	r2,-1
10102a8c:	00000106 	br	10102a94 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10102a90:	e0bff917 	ldw	r2,-28(fp)
}
10102a94:	e037883a 	mov	sp,fp
10102a98:	dfc00117 	ldw	ra,4(sp)
10102a9c:	df000017 	ldw	fp,0(sp)
10102aa0:	dec00204 	addi	sp,sp,8
10102aa4:	f800283a 	ret

10102aa8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10102aa8:	defffe04 	addi	sp,sp,-8
10102aac:	df000115 	stw	fp,4(sp)
10102ab0:	df000104 	addi	fp,sp,4
10102ab4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10102ab8:	e0bfff17 	ldw	r2,-4(fp)
10102abc:	108000d0 	cmplti	r2,r2,3
10102ac0:	10000d1e 	bne	r2,zero,10102af8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10102ac4:	00840434 	movhi	r2,4112
10102ac8:	10921604 	addi	r2,r2,18520
10102acc:	e0ffff17 	ldw	r3,-4(fp)
10102ad0:	18c00324 	muli	r3,r3,12
10102ad4:	10c5883a 	add	r2,r2,r3
10102ad8:	10800204 	addi	r2,r2,8
10102adc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10102ae0:	00840434 	movhi	r2,4112
10102ae4:	10921604 	addi	r2,r2,18520
10102ae8:	e0ffff17 	ldw	r3,-4(fp)
10102aec:	18c00324 	muli	r3,r3,12
10102af0:	10c5883a 	add	r2,r2,r3
10102af4:	10000015 	stw	zero,0(r2)
  }
}
10102af8:	0001883a 	nop
10102afc:	e037883a 	mov	sp,fp
10102b00:	df000017 	ldw	fp,0(sp)
10102b04:	dec00104 	addi	sp,sp,4
10102b08:	f800283a 	ret

10102b0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10102b0c:	defffa04 	addi	sp,sp,-24
10102b10:	df000515 	stw	fp,20(sp)
10102b14:	df000504 	addi	fp,sp,20
10102b18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10102b1c:	0005303a 	rdctl	r2,status
10102b20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10102b24:	e0fffc17 	ldw	r3,-16(fp)
10102b28:	00bfff84 	movi	r2,-2
10102b2c:	1884703a 	and	r2,r3,r2
10102b30:	1001703a 	wrctl	status,r2
  
  return context;
10102b34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10102b38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10102b3c:	e0bfff17 	ldw	r2,-4(fp)
10102b40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10102b44:	e0bffd17 	ldw	r2,-12(fp)
10102b48:	10800017 	ldw	r2,0(r2)
10102b4c:	e0fffd17 	ldw	r3,-12(fp)
10102b50:	18c00117 	ldw	r3,4(r3)
10102b54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10102b58:	e0bffd17 	ldw	r2,-12(fp)
10102b5c:	10800117 	ldw	r2,4(r2)
10102b60:	e0fffd17 	ldw	r3,-12(fp)
10102b64:	18c00017 	ldw	r3,0(r3)
10102b68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10102b6c:	e0bffd17 	ldw	r2,-12(fp)
10102b70:	e0fffd17 	ldw	r3,-12(fp)
10102b74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10102b78:	e0bffd17 	ldw	r2,-12(fp)
10102b7c:	e0fffd17 	ldw	r3,-12(fp)
10102b80:	10c00015 	stw	r3,0(r2)
10102b84:	e0bffb17 	ldw	r2,-20(fp)
10102b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10102b8c:	e0bffe17 	ldw	r2,-8(fp)
10102b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10102b94:	0001883a 	nop
10102b98:	e037883a 	mov	sp,fp
10102b9c:	df000017 	ldw	fp,0(sp)
10102ba0:	dec00104 	addi	sp,sp,4
10102ba4:	f800283a 	ret

10102ba8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10102ba8:	defffb04 	addi	sp,sp,-20
10102bac:	dfc00415 	stw	ra,16(sp)
10102bb0:	df000315 	stw	fp,12(sp)
10102bb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10102bb8:	d0a01917 	ldw	r2,-32668(gp)
10102bbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10102bc0:	d0a5d417 	ldw	r2,-26800(gp)
10102bc4:	10800044 	addi	r2,r2,1
10102bc8:	d0a5d415 	stw	r2,-26800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10102bcc:	00002e06 	br	10102c88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10102bd0:	e0bffd17 	ldw	r2,-12(fp)
10102bd4:	10800017 	ldw	r2,0(r2)
10102bd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10102bdc:	e0bffd17 	ldw	r2,-12(fp)
10102be0:	10800403 	ldbu	r2,16(r2)
10102be4:	10803fcc 	andi	r2,r2,255
10102be8:	10000426 	beq	r2,zero,10102bfc <alt_tick+0x54>
10102bec:	d0a5d417 	ldw	r2,-26800(gp)
10102bf0:	1000021e 	bne	r2,zero,10102bfc <alt_tick+0x54>
    {
      alarm->rollover = 0;
10102bf4:	e0bffd17 	ldw	r2,-12(fp)
10102bf8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10102bfc:	e0bffd17 	ldw	r2,-12(fp)
10102c00:	10800217 	ldw	r2,8(r2)
10102c04:	d0e5d417 	ldw	r3,-26800(gp)
10102c08:	18801d36 	bltu	r3,r2,10102c80 <alt_tick+0xd8>
10102c0c:	e0bffd17 	ldw	r2,-12(fp)
10102c10:	10800403 	ldbu	r2,16(r2)
10102c14:	10803fcc 	andi	r2,r2,255
10102c18:	1000191e 	bne	r2,zero,10102c80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10102c1c:	e0bffd17 	ldw	r2,-12(fp)
10102c20:	10800317 	ldw	r2,12(r2)
10102c24:	e0fffd17 	ldw	r3,-12(fp)
10102c28:	18c00517 	ldw	r3,20(r3)
10102c2c:	1809883a 	mov	r4,r3
10102c30:	103ee83a 	callr	r2
10102c34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10102c38:	e0bfff17 	ldw	r2,-4(fp)
10102c3c:	1000031e 	bne	r2,zero,10102c4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10102c40:	e13ffd17 	ldw	r4,-12(fp)
10102c44:	0102b0c0 	call	10102b0c <alt_alarm_stop>
10102c48:	00000d06 	br	10102c80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10102c4c:	e0bffd17 	ldw	r2,-12(fp)
10102c50:	10c00217 	ldw	r3,8(r2)
10102c54:	e0bfff17 	ldw	r2,-4(fp)
10102c58:	1887883a 	add	r3,r3,r2
10102c5c:	e0bffd17 	ldw	r2,-12(fp)
10102c60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10102c64:	e0bffd17 	ldw	r2,-12(fp)
10102c68:	10c00217 	ldw	r3,8(r2)
10102c6c:	d0a5d417 	ldw	r2,-26800(gp)
10102c70:	1880032e 	bgeu	r3,r2,10102c80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10102c74:	e0bffd17 	ldw	r2,-12(fp)
10102c78:	00c00044 	movi	r3,1
10102c7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10102c80:	e0bffe17 	ldw	r2,-8(fp)
10102c84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10102c88:	e0fffd17 	ldw	r3,-12(fp)
10102c8c:	d0a01904 	addi	r2,gp,-32668
10102c90:	18bfcf1e 	bne	r3,r2,10102bd0 <__alt_data_end+0xfffe2bd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10102c94:	0001883a 	nop
}
10102c98:	0001883a 	nop
10102c9c:	e037883a 	mov	sp,fp
10102ca0:	dfc00117 	ldw	ra,4(sp)
10102ca4:	df000017 	ldw	fp,0(sp)
10102ca8:	dec00204 	addi	sp,sp,8
10102cac:	f800283a 	ret

10102cb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10102cb0:	deffff04 	addi	sp,sp,-4
10102cb4:	df000015 	stw	fp,0(sp)
10102cb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10102cbc:	000170fa 	wrctl	ienable,zero
}
10102cc0:	0001883a 	nop
10102cc4:	e037883a 	mov	sp,fp
10102cc8:	df000017 	ldw	fp,0(sp)
10102ccc:	dec00104 	addi	sp,sp,4
10102cd0:	f800283a 	ret

10102cd4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10102cd4:	defffa04 	addi	sp,sp,-24
10102cd8:	dfc00515 	stw	ra,20(sp)
10102cdc:	df000415 	stw	fp,16(sp)
10102ce0:	df000404 	addi	fp,sp,16
10102ce4:	e13ffe15 	stw	r4,-8(fp)
10102ce8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10102cec:	e0bfff17 	ldw	r2,-4(fp)
10102cf0:	10800017 	ldw	r2,0(r2)
10102cf4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10102cf8:	e13ffe17 	ldw	r4,-8(fp)
10102cfc:	010324c0 	call	1010324c <strlen>
10102d00:	10800044 	addi	r2,r2,1
10102d04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10102d08:	00000d06 	br	10102d40 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10102d0c:	e0bffc17 	ldw	r2,-16(fp)
10102d10:	10800217 	ldw	r2,8(r2)
10102d14:	e0fffd17 	ldw	r3,-12(fp)
10102d18:	180d883a 	mov	r6,r3
10102d1c:	e17ffe17 	ldw	r5,-8(fp)
10102d20:	1009883a 	mov	r4,r2
10102d24:	01030880 	call	10103088 <memcmp>
10102d28:	1000021e 	bne	r2,zero,10102d34 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10102d2c:	e0bffc17 	ldw	r2,-16(fp)
10102d30:	00000706 	br	10102d50 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10102d34:	e0bffc17 	ldw	r2,-16(fp)
10102d38:	10800017 	ldw	r2,0(r2)
10102d3c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10102d40:	e0fffc17 	ldw	r3,-16(fp)
10102d44:	e0bfff17 	ldw	r2,-4(fp)
10102d48:	18bff01e 	bne	r3,r2,10102d0c <__alt_data_end+0xfffe2d0c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10102d4c:	0005883a 	mov	r2,zero
}
10102d50:	e037883a 	mov	sp,fp
10102d54:	dfc00117 	ldw	ra,4(sp)
10102d58:	df000017 	ldw	fp,0(sp)
10102d5c:	dec00204 	addi	sp,sp,8
10102d60:	f800283a 	ret

10102d64 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10102d64:	defffb04 	addi	sp,sp,-20
10102d68:	dfc00415 	stw	ra,16(sp)
10102d6c:	df000315 	stw	fp,12(sp)
10102d70:	df000304 	addi	fp,sp,12
10102d74:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10102d78:	d0a01217 	ldw	r2,-32696(gp)
10102d7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10102d80:	00003106 	br	10102e48 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10102d84:	e0bffd17 	ldw	r2,-12(fp)
10102d88:	10800217 	ldw	r2,8(r2)
10102d8c:	1009883a 	mov	r4,r2
10102d90:	010324c0 	call	1010324c <strlen>
10102d94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10102d98:	e0bffd17 	ldw	r2,-12(fp)
10102d9c:	10c00217 	ldw	r3,8(r2)
10102da0:	e0bffe17 	ldw	r2,-8(fp)
10102da4:	10bfffc4 	addi	r2,r2,-1
10102da8:	1885883a 	add	r2,r3,r2
10102dac:	10800003 	ldbu	r2,0(r2)
10102db0:	10803fcc 	andi	r2,r2,255
10102db4:	1080201c 	xori	r2,r2,128
10102db8:	10bfe004 	addi	r2,r2,-128
10102dbc:	10800bd8 	cmpnei	r2,r2,47
10102dc0:	1000031e 	bne	r2,zero,10102dd0 <alt_find_file+0x6c>
    {
      len -= 1;
10102dc4:	e0bffe17 	ldw	r2,-8(fp)
10102dc8:	10bfffc4 	addi	r2,r2,-1
10102dcc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10102dd0:	e0bffe17 	ldw	r2,-8(fp)
10102dd4:	e0ffff17 	ldw	r3,-4(fp)
10102dd8:	1885883a 	add	r2,r3,r2
10102ddc:	10800003 	ldbu	r2,0(r2)
10102de0:	10803fcc 	andi	r2,r2,255
10102de4:	1080201c 	xori	r2,r2,128
10102de8:	10bfe004 	addi	r2,r2,-128
10102dec:	10800be0 	cmpeqi	r2,r2,47
10102df0:	1000081e 	bne	r2,zero,10102e14 <alt_find_file+0xb0>
10102df4:	e0bffe17 	ldw	r2,-8(fp)
10102df8:	e0ffff17 	ldw	r3,-4(fp)
10102dfc:	1885883a 	add	r2,r3,r2
10102e00:	10800003 	ldbu	r2,0(r2)
10102e04:	10803fcc 	andi	r2,r2,255
10102e08:	1080201c 	xori	r2,r2,128
10102e0c:	10bfe004 	addi	r2,r2,-128
10102e10:	10000a1e 	bne	r2,zero,10102e3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10102e14:	e0bffd17 	ldw	r2,-12(fp)
10102e18:	10800217 	ldw	r2,8(r2)
10102e1c:	e0fffe17 	ldw	r3,-8(fp)
10102e20:	180d883a 	mov	r6,r3
10102e24:	e17fff17 	ldw	r5,-4(fp)
10102e28:	1009883a 	mov	r4,r2
10102e2c:	01030880 	call	10103088 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10102e30:	1000021e 	bne	r2,zero,10102e3c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10102e34:	e0bffd17 	ldw	r2,-12(fp)
10102e38:	00000706 	br	10102e58 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10102e3c:	e0bffd17 	ldw	r2,-12(fp)
10102e40:	10800017 	ldw	r2,0(r2)
10102e44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10102e48:	e0fffd17 	ldw	r3,-12(fp)
10102e4c:	d0a01204 	addi	r2,gp,-32696
10102e50:	18bfcc1e 	bne	r3,r2,10102d84 <__alt_data_end+0xfffe2d84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10102e54:	0005883a 	mov	r2,zero
}
10102e58:	e037883a 	mov	sp,fp
10102e5c:	dfc00117 	ldw	ra,4(sp)
10102e60:	df000017 	ldw	fp,0(sp)
10102e64:	dec00204 	addi	sp,sp,8
10102e68:	f800283a 	ret

10102e6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10102e6c:	defffc04 	addi	sp,sp,-16
10102e70:	df000315 	stw	fp,12(sp)
10102e74:	df000304 	addi	fp,sp,12
10102e78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10102e7c:	00bffa04 	movi	r2,-24
10102e80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10102e84:	e03ffd15 	stw	zero,-12(fp)
10102e88:	00001906 	br	10102ef0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10102e8c:	00840434 	movhi	r2,4112
10102e90:	10921604 	addi	r2,r2,18520
10102e94:	e0fffd17 	ldw	r3,-12(fp)
10102e98:	18c00324 	muli	r3,r3,12
10102e9c:	10c5883a 	add	r2,r2,r3
10102ea0:	10800017 	ldw	r2,0(r2)
10102ea4:	10000f1e 	bne	r2,zero,10102ee4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10102ea8:	00840434 	movhi	r2,4112
10102eac:	10921604 	addi	r2,r2,18520
10102eb0:	e0fffd17 	ldw	r3,-12(fp)
10102eb4:	18c00324 	muli	r3,r3,12
10102eb8:	10c5883a 	add	r2,r2,r3
10102ebc:	e0ffff17 	ldw	r3,-4(fp)
10102ec0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10102ec4:	d0e01617 	ldw	r3,-32680(gp)
10102ec8:	e0bffd17 	ldw	r2,-12(fp)
10102ecc:	1880020e 	bge	r3,r2,10102ed8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10102ed0:	e0bffd17 	ldw	r2,-12(fp)
10102ed4:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
10102ed8:	e0bffd17 	ldw	r2,-12(fp)
10102edc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10102ee0:	00000606 	br	10102efc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10102ee4:	e0bffd17 	ldw	r2,-12(fp)
10102ee8:	10800044 	addi	r2,r2,1
10102eec:	e0bffd15 	stw	r2,-12(fp)
10102ef0:	e0bffd17 	ldw	r2,-12(fp)
10102ef4:	10800810 	cmplti	r2,r2,32
10102ef8:	103fe41e 	bne	r2,zero,10102e8c <__alt_data_end+0xfffe2e8c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10102efc:	e0bffe17 	ldw	r2,-8(fp)
}
10102f00:	e037883a 	mov	sp,fp
10102f04:	df000017 	ldw	fp,0(sp)
10102f08:	dec00104 	addi	sp,sp,4
10102f0c:	f800283a 	ret

10102f10 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10102f10:	defffb04 	addi	sp,sp,-20
10102f14:	df000415 	stw	fp,16(sp)
10102f18:	df000404 	addi	fp,sp,16
10102f1c:	e13ffe15 	stw	r4,-8(fp)
10102f20:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10102f24:	e0bfff17 	ldw	r2,-4(fp)
10102f28:	10840070 	cmpltui	r2,r2,4097
10102f2c:	1000021e 	bne	r2,zero,10102f38 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10102f30:	00840004 	movi	r2,4096
10102f34:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10102f38:	e0fffe17 	ldw	r3,-8(fp)
10102f3c:	e0bfff17 	ldw	r2,-4(fp)
10102f40:	1885883a 	add	r2,r3,r2
10102f44:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10102f48:	e0bffe17 	ldw	r2,-8(fp)
10102f4c:	e0bffc15 	stw	r2,-16(fp)
10102f50:	00000506 	br	10102f68 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10102f54:	e0bffc17 	ldw	r2,-16(fp)
10102f58:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10102f5c:	e0bffc17 	ldw	r2,-16(fp)
10102f60:	10800804 	addi	r2,r2,32
10102f64:	e0bffc15 	stw	r2,-16(fp)
10102f68:	e0fffc17 	ldw	r3,-16(fp)
10102f6c:	e0bffd17 	ldw	r2,-12(fp)
10102f70:	18bff836 	bltu	r3,r2,10102f54 <__alt_data_end+0xfffe2f54>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10102f74:	e0bffe17 	ldw	r2,-8(fp)
10102f78:	108007cc 	andi	r2,r2,31
10102f7c:	10000226 	beq	r2,zero,10102f88 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10102f80:	e0bffc17 	ldw	r2,-16(fp)
10102f84:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10102f88:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10102f8c:	0001883a 	nop
10102f90:	e037883a 	mov	sp,fp
10102f94:	df000017 	ldw	fp,0(sp)
10102f98:	dec00104 	addi	sp,sp,4
10102f9c:	f800283a 	ret

10102fa0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10102fa0:	defffe04 	addi	sp,sp,-8
10102fa4:	df000115 	stw	fp,4(sp)
10102fa8:	df000104 	addi	fp,sp,4
10102fac:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10102fb0:	e0bfff17 	ldw	r2,-4(fp)
10102fb4:	10bffe84 	addi	r2,r2,-6
10102fb8:	10c00428 	cmpgeui	r3,r2,16
10102fbc:	18001a1e 	bne	r3,zero,10103028 <alt_exception_cause_generated_bad_addr+0x88>
10102fc0:	100690ba 	slli	r3,r2,2
10102fc4:	00840434 	movhi	r2,4112
10102fc8:	108bf604 	addi	r2,r2,12248
10102fcc:	1885883a 	add	r2,r3,r2
10102fd0:	10800017 	ldw	r2,0(r2)
10102fd4:	1000683a 	jmp	r2
10102fd8:	10103018 	cmpnei	zero,r2,16576
10102fdc:	10103018 	cmpnei	zero,r2,16576
10102fe0:	10103028 	cmpgeui	zero,r2,16576
10102fe4:	10103028 	cmpgeui	zero,r2,16576
10102fe8:	10103028 	cmpgeui	zero,r2,16576
10102fec:	10103018 	cmpnei	zero,r2,16576
10102ff0:	10103020 	cmpeqi	zero,r2,16576
10102ff4:	10103028 	cmpgeui	zero,r2,16576
10102ff8:	10103018 	cmpnei	zero,r2,16576
10102ffc:	10103018 	cmpnei	zero,r2,16576
10103000:	10103028 	cmpgeui	zero,r2,16576
10103004:	10103018 	cmpnei	zero,r2,16576
10103008:	10103020 	cmpeqi	zero,r2,16576
1010300c:	10103028 	cmpgeui	zero,r2,16576
10103010:	10103028 	cmpgeui	zero,r2,16576
10103014:	10103018 	cmpnei	zero,r2,16576
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10103018:	00800044 	movi	r2,1
1010301c:	00000306 	br	1010302c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10103020:	0005883a 	mov	r2,zero
10103024:	00000106 	br	1010302c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10103028:	0005883a 	mov	r2,zero
  }
}
1010302c:	e037883a 	mov	sp,fp
10103030:	df000017 	ldw	fp,0(sp)
10103034:	dec00104 	addi	sp,sp,4
10103038:	f800283a 	ret

1010303c <atexit>:
1010303c:	200b883a 	mov	r5,r4
10103040:	000f883a 	mov	r7,zero
10103044:	000d883a 	mov	r6,zero
10103048:	0009883a 	mov	r4,zero
1010304c:	01032e41 	jmpi	101032e4 <__register_exitproc>

10103050 <exit>:
10103050:	defffe04 	addi	sp,sp,-8
10103054:	000b883a 	mov	r5,zero
10103058:	dc000015 	stw	r16,0(sp)
1010305c:	dfc00115 	stw	ra,4(sp)
10103060:	2021883a 	mov	r16,r4
10103064:	01033fc0 	call	101033fc <__call_exitprocs>
10103068:	00840434 	movhi	r2,4112
1010306c:	10939a04 	addi	r2,r2,20072
10103070:	11000017 	ldw	r4,0(r2)
10103074:	20800f17 	ldw	r2,60(r4)
10103078:	10000126 	beq	r2,zero,10103080 <exit+0x30>
1010307c:	103ee83a 	callr	r2
10103080:	8009883a 	mov	r4,r16
10103084:	01037300 	call	10103730 <_exit>

10103088 <memcmp>:
10103088:	01c000c4 	movi	r7,3
1010308c:	3980192e 	bgeu	r7,r6,101030f4 <memcmp+0x6c>
10103090:	2144b03a 	or	r2,r4,r5
10103094:	11c4703a 	and	r2,r2,r7
10103098:	10000f26 	beq	r2,zero,101030d8 <memcmp+0x50>
1010309c:	20800003 	ldbu	r2,0(r4)
101030a0:	28c00003 	ldbu	r3,0(r5)
101030a4:	10c0151e 	bne	r2,r3,101030fc <memcmp+0x74>
101030a8:	31bfff84 	addi	r6,r6,-2
101030ac:	01ffffc4 	movi	r7,-1
101030b0:	00000406 	br	101030c4 <memcmp+0x3c>
101030b4:	20800003 	ldbu	r2,0(r4)
101030b8:	28c00003 	ldbu	r3,0(r5)
101030bc:	31bfffc4 	addi	r6,r6,-1
101030c0:	10c00e1e 	bne	r2,r3,101030fc <memcmp+0x74>
101030c4:	21000044 	addi	r4,r4,1
101030c8:	29400044 	addi	r5,r5,1
101030cc:	31fff91e 	bne	r6,r7,101030b4 <__alt_data_end+0xfffe30b4>
101030d0:	0005883a 	mov	r2,zero
101030d4:	f800283a 	ret
101030d8:	20c00017 	ldw	r3,0(r4)
101030dc:	28800017 	ldw	r2,0(r5)
101030e0:	18bfee1e 	bne	r3,r2,1010309c <__alt_data_end+0xfffe309c>
101030e4:	31bfff04 	addi	r6,r6,-4
101030e8:	21000104 	addi	r4,r4,4
101030ec:	29400104 	addi	r5,r5,4
101030f0:	39bff936 	bltu	r7,r6,101030d8 <__alt_data_end+0xfffe30d8>
101030f4:	303fe91e 	bne	r6,zero,1010309c <__alt_data_end+0xfffe309c>
101030f8:	003ff506 	br	101030d0 <__alt_data_end+0xfffe30d0>
101030fc:	10c5c83a 	sub	r2,r2,r3
10103100:	f800283a 	ret

10103104 <memcpy>:
10103104:	defffd04 	addi	sp,sp,-12
10103108:	dfc00215 	stw	ra,8(sp)
1010310c:	dc400115 	stw	r17,4(sp)
10103110:	dc000015 	stw	r16,0(sp)
10103114:	00c003c4 	movi	r3,15
10103118:	2005883a 	mov	r2,r4
1010311c:	1980452e 	bgeu	r3,r6,10103234 <memcpy+0x130>
10103120:	2906b03a 	or	r3,r5,r4
10103124:	18c000cc 	andi	r3,r3,3
10103128:	1800441e 	bne	r3,zero,1010323c <memcpy+0x138>
1010312c:	347ffc04 	addi	r17,r6,-16
10103130:	8822d13a 	srli	r17,r17,4
10103134:	28c00104 	addi	r3,r5,4
10103138:	23400104 	addi	r13,r4,4
1010313c:	8820913a 	slli	r16,r17,4
10103140:	2b000204 	addi	r12,r5,8
10103144:	22c00204 	addi	r11,r4,8
10103148:	84000504 	addi	r16,r16,20
1010314c:	2a800304 	addi	r10,r5,12
10103150:	22400304 	addi	r9,r4,12
10103154:	2c21883a 	add	r16,r5,r16
10103158:	2811883a 	mov	r8,r5
1010315c:	200f883a 	mov	r7,r4
10103160:	41000017 	ldw	r4,0(r8)
10103164:	1fc00017 	ldw	ra,0(r3)
10103168:	63c00017 	ldw	r15,0(r12)
1010316c:	39000015 	stw	r4,0(r7)
10103170:	53800017 	ldw	r14,0(r10)
10103174:	6fc00015 	stw	ra,0(r13)
10103178:	5bc00015 	stw	r15,0(r11)
1010317c:	4b800015 	stw	r14,0(r9)
10103180:	18c00404 	addi	r3,r3,16
10103184:	39c00404 	addi	r7,r7,16
10103188:	42000404 	addi	r8,r8,16
1010318c:	6b400404 	addi	r13,r13,16
10103190:	63000404 	addi	r12,r12,16
10103194:	5ac00404 	addi	r11,r11,16
10103198:	52800404 	addi	r10,r10,16
1010319c:	4a400404 	addi	r9,r9,16
101031a0:	1c3fef1e 	bne	r3,r16,10103160 <__alt_data_end+0xfffe3160>
101031a4:	89c00044 	addi	r7,r17,1
101031a8:	380e913a 	slli	r7,r7,4
101031ac:	310003cc 	andi	r4,r6,15
101031b0:	02c000c4 	movi	r11,3
101031b4:	11c7883a 	add	r3,r2,r7
101031b8:	29cb883a 	add	r5,r5,r7
101031bc:	5900212e 	bgeu	r11,r4,10103244 <memcpy+0x140>
101031c0:	1813883a 	mov	r9,r3
101031c4:	2811883a 	mov	r8,r5
101031c8:	200f883a 	mov	r7,r4
101031cc:	42800017 	ldw	r10,0(r8)
101031d0:	4a400104 	addi	r9,r9,4
101031d4:	39ffff04 	addi	r7,r7,-4
101031d8:	4abfff15 	stw	r10,-4(r9)
101031dc:	42000104 	addi	r8,r8,4
101031e0:	59fffa36 	bltu	r11,r7,101031cc <__alt_data_end+0xfffe31cc>
101031e4:	213fff04 	addi	r4,r4,-4
101031e8:	2008d0ba 	srli	r4,r4,2
101031ec:	318000cc 	andi	r6,r6,3
101031f0:	21000044 	addi	r4,r4,1
101031f4:	2109883a 	add	r4,r4,r4
101031f8:	2109883a 	add	r4,r4,r4
101031fc:	1907883a 	add	r3,r3,r4
10103200:	290b883a 	add	r5,r5,r4
10103204:	30000626 	beq	r6,zero,10103220 <memcpy+0x11c>
10103208:	198d883a 	add	r6,r3,r6
1010320c:	29c00003 	ldbu	r7,0(r5)
10103210:	18c00044 	addi	r3,r3,1
10103214:	29400044 	addi	r5,r5,1
10103218:	19ffffc5 	stb	r7,-1(r3)
1010321c:	19bffb1e 	bne	r3,r6,1010320c <__alt_data_end+0xfffe320c>
10103220:	dfc00217 	ldw	ra,8(sp)
10103224:	dc400117 	ldw	r17,4(sp)
10103228:	dc000017 	ldw	r16,0(sp)
1010322c:	dec00304 	addi	sp,sp,12
10103230:	f800283a 	ret
10103234:	2007883a 	mov	r3,r4
10103238:	003ff206 	br	10103204 <__alt_data_end+0xfffe3204>
1010323c:	2007883a 	mov	r3,r4
10103240:	003ff106 	br	10103208 <__alt_data_end+0xfffe3208>
10103244:	200d883a 	mov	r6,r4
10103248:	003fee06 	br	10103204 <__alt_data_end+0xfffe3204>

1010324c <strlen>:
1010324c:	208000cc 	andi	r2,r4,3
10103250:	10002026 	beq	r2,zero,101032d4 <strlen+0x88>
10103254:	20800007 	ldb	r2,0(r4)
10103258:	10002026 	beq	r2,zero,101032dc <strlen+0x90>
1010325c:	2005883a 	mov	r2,r4
10103260:	00000206 	br	1010326c <strlen+0x20>
10103264:	10c00007 	ldb	r3,0(r2)
10103268:	18001826 	beq	r3,zero,101032cc <strlen+0x80>
1010326c:	10800044 	addi	r2,r2,1
10103270:	10c000cc 	andi	r3,r2,3
10103274:	183ffb1e 	bne	r3,zero,10103264 <__alt_data_end+0xfffe3264>
10103278:	10c00017 	ldw	r3,0(r2)
1010327c:	01ffbff4 	movhi	r7,65279
10103280:	39ffbfc4 	addi	r7,r7,-257
10103284:	00ca303a 	nor	r5,zero,r3
10103288:	01a02074 	movhi	r6,32897
1010328c:	19c7883a 	add	r3,r3,r7
10103290:	31a02004 	addi	r6,r6,-32640
10103294:	1946703a 	and	r3,r3,r5
10103298:	1986703a 	and	r3,r3,r6
1010329c:	1800091e 	bne	r3,zero,101032c4 <strlen+0x78>
101032a0:	10800104 	addi	r2,r2,4
101032a4:	10c00017 	ldw	r3,0(r2)
101032a8:	19cb883a 	add	r5,r3,r7
101032ac:	00c6303a 	nor	r3,zero,r3
101032b0:	28c6703a 	and	r3,r5,r3
101032b4:	1986703a 	and	r3,r3,r6
101032b8:	183ff926 	beq	r3,zero,101032a0 <__alt_data_end+0xfffe32a0>
101032bc:	00000106 	br	101032c4 <strlen+0x78>
101032c0:	10800044 	addi	r2,r2,1
101032c4:	10c00007 	ldb	r3,0(r2)
101032c8:	183ffd1e 	bne	r3,zero,101032c0 <__alt_data_end+0xfffe32c0>
101032cc:	1105c83a 	sub	r2,r2,r4
101032d0:	f800283a 	ret
101032d4:	2005883a 	mov	r2,r4
101032d8:	003fe706 	br	10103278 <__alt_data_end+0xfffe3278>
101032dc:	0005883a 	mov	r2,zero
101032e0:	f800283a 	ret

101032e4 <__register_exitproc>:
101032e4:	defffa04 	addi	sp,sp,-24
101032e8:	dc000315 	stw	r16,12(sp)
101032ec:	04040434 	movhi	r16,4112
101032f0:	84139a04 	addi	r16,r16,20072
101032f4:	80c00017 	ldw	r3,0(r16)
101032f8:	dc400415 	stw	r17,16(sp)
101032fc:	dfc00515 	stw	ra,20(sp)
10103300:	18805217 	ldw	r2,328(r3)
10103304:	2023883a 	mov	r17,r4
10103308:	10003726 	beq	r2,zero,101033e8 <__register_exitproc+0x104>
1010330c:	10c00117 	ldw	r3,4(r2)
10103310:	010007c4 	movi	r4,31
10103314:	20c00e16 	blt	r4,r3,10103350 <__register_exitproc+0x6c>
10103318:	1a000044 	addi	r8,r3,1
1010331c:	8800221e 	bne	r17,zero,101033a8 <__register_exitproc+0xc4>
10103320:	18c00084 	addi	r3,r3,2
10103324:	18c7883a 	add	r3,r3,r3
10103328:	18c7883a 	add	r3,r3,r3
1010332c:	12000115 	stw	r8,4(r2)
10103330:	10c7883a 	add	r3,r2,r3
10103334:	19400015 	stw	r5,0(r3)
10103338:	0005883a 	mov	r2,zero
1010333c:	dfc00517 	ldw	ra,20(sp)
10103340:	dc400417 	ldw	r17,16(sp)
10103344:	dc000317 	ldw	r16,12(sp)
10103348:	dec00604 	addi	sp,sp,24
1010334c:	f800283a 	ret
10103350:	00800034 	movhi	r2,0
10103354:	10800004 	addi	r2,r2,0
10103358:	10002626 	beq	r2,zero,101033f4 <__register_exitproc+0x110>
1010335c:	01006404 	movi	r4,400
10103360:	d9400015 	stw	r5,0(sp)
10103364:	d9800115 	stw	r6,4(sp)
10103368:	d9c00215 	stw	r7,8(sp)
1010336c:	00000000 	call	10000000 <__reset-0x100000>
10103370:	d9400017 	ldw	r5,0(sp)
10103374:	d9800117 	ldw	r6,4(sp)
10103378:	d9c00217 	ldw	r7,8(sp)
1010337c:	10001d26 	beq	r2,zero,101033f4 <__register_exitproc+0x110>
10103380:	81000017 	ldw	r4,0(r16)
10103384:	10000115 	stw	zero,4(r2)
10103388:	02000044 	movi	r8,1
1010338c:	22405217 	ldw	r9,328(r4)
10103390:	0007883a 	mov	r3,zero
10103394:	12400015 	stw	r9,0(r2)
10103398:	20805215 	stw	r2,328(r4)
1010339c:	10006215 	stw	zero,392(r2)
101033a0:	10006315 	stw	zero,396(r2)
101033a4:	883fde26 	beq	r17,zero,10103320 <__alt_data_end+0xfffe3320>
101033a8:	18c9883a 	add	r4,r3,r3
101033ac:	2109883a 	add	r4,r4,r4
101033b0:	1109883a 	add	r4,r2,r4
101033b4:	21802215 	stw	r6,136(r4)
101033b8:	01800044 	movi	r6,1
101033bc:	12406217 	ldw	r9,392(r2)
101033c0:	30cc983a 	sll	r6,r6,r3
101033c4:	4992b03a 	or	r9,r9,r6
101033c8:	12406215 	stw	r9,392(r2)
101033cc:	21c04215 	stw	r7,264(r4)
101033d0:	01000084 	movi	r4,2
101033d4:	893fd21e 	bne	r17,r4,10103320 <__alt_data_end+0xfffe3320>
101033d8:	11006317 	ldw	r4,396(r2)
101033dc:	218cb03a 	or	r6,r4,r6
101033e0:	11806315 	stw	r6,396(r2)
101033e4:	003fce06 	br	10103320 <__alt_data_end+0xfffe3320>
101033e8:	18805304 	addi	r2,r3,332
101033ec:	18805215 	stw	r2,328(r3)
101033f0:	003fc606 	br	1010330c <__alt_data_end+0xfffe330c>
101033f4:	00bfffc4 	movi	r2,-1
101033f8:	003fd006 	br	1010333c <__alt_data_end+0xfffe333c>

101033fc <__call_exitprocs>:
101033fc:	defff504 	addi	sp,sp,-44
10103400:	df000915 	stw	fp,36(sp)
10103404:	dd400615 	stw	r21,24(sp)
10103408:	dc800315 	stw	r18,12(sp)
1010340c:	dfc00a15 	stw	ra,40(sp)
10103410:	ddc00815 	stw	r23,32(sp)
10103414:	dd800715 	stw	r22,28(sp)
10103418:	dd000515 	stw	r20,20(sp)
1010341c:	dcc00415 	stw	r19,16(sp)
10103420:	dc400215 	stw	r17,8(sp)
10103424:	dc000115 	stw	r16,4(sp)
10103428:	d9000015 	stw	r4,0(sp)
1010342c:	2839883a 	mov	fp,r5
10103430:	04800044 	movi	r18,1
10103434:	057fffc4 	movi	r21,-1
10103438:	00840434 	movhi	r2,4112
1010343c:	10939a04 	addi	r2,r2,20072
10103440:	12000017 	ldw	r8,0(r2)
10103444:	45005217 	ldw	r20,328(r8)
10103448:	44c05204 	addi	r19,r8,328
1010344c:	a0001c26 	beq	r20,zero,101034c0 <__call_exitprocs+0xc4>
10103450:	a0800117 	ldw	r2,4(r20)
10103454:	15ffffc4 	addi	r23,r2,-1
10103458:	b8000d16 	blt	r23,zero,10103490 <__call_exitprocs+0x94>
1010345c:	14000044 	addi	r16,r2,1
10103460:	8421883a 	add	r16,r16,r16
10103464:	8421883a 	add	r16,r16,r16
10103468:	84402004 	addi	r17,r16,128
1010346c:	a463883a 	add	r17,r20,r17
10103470:	a421883a 	add	r16,r20,r16
10103474:	e0001e26 	beq	fp,zero,101034f0 <__call_exitprocs+0xf4>
10103478:	80804017 	ldw	r2,256(r16)
1010347c:	e0801c26 	beq	fp,r2,101034f0 <__call_exitprocs+0xf4>
10103480:	bdffffc4 	addi	r23,r23,-1
10103484:	843fff04 	addi	r16,r16,-4
10103488:	8c7fff04 	addi	r17,r17,-4
1010348c:	bd7ff91e 	bne	r23,r21,10103474 <__alt_data_end+0xfffe3474>
10103490:	00800034 	movhi	r2,0
10103494:	10800004 	addi	r2,r2,0
10103498:	10000926 	beq	r2,zero,101034c0 <__call_exitprocs+0xc4>
1010349c:	a0800117 	ldw	r2,4(r20)
101034a0:	1000301e 	bne	r2,zero,10103564 <__call_exitprocs+0x168>
101034a4:	a0800017 	ldw	r2,0(r20)
101034a8:	10003226 	beq	r2,zero,10103574 <__call_exitprocs+0x178>
101034ac:	a009883a 	mov	r4,r20
101034b0:	98800015 	stw	r2,0(r19)
101034b4:	00000000 	call	10000000 <__reset-0x100000>
101034b8:	9d000017 	ldw	r20,0(r19)
101034bc:	a03fe41e 	bne	r20,zero,10103450 <__alt_data_end+0xfffe3450>
101034c0:	dfc00a17 	ldw	ra,40(sp)
101034c4:	df000917 	ldw	fp,36(sp)
101034c8:	ddc00817 	ldw	r23,32(sp)
101034cc:	dd800717 	ldw	r22,28(sp)
101034d0:	dd400617 	ldw	r21,24(sp)
101034d4:	dd000517 	ldw	r20,20(sp)
101034d8:	dcc00417 	ldw	r19,16(sp)
101034dc:	dc800317 	ldw	r18,12(sp)
101034e0:	dc400217 	ldw	r17,8(sp)
101034e4:	dc000117 	ldw	r16,4(sp)
101034e8:	dec00b04 	addi	sp,sp,44
101034ec:	f800283a 	ret
101034f0:	a0800117 	ldw	r2,4(r20)
101034f4:	80c00017 	ldw	r3,0(r16)
101034f8:	10bfffc4 	addi	r2,r2,-1
101034fc:	15c01426 	beq	r2,r23,10103550 <__call_exitprocs+0x154>
10103500:	80000015 	stw	zero,0(r16)
10103504:	183fde26 	beq	r3,zero,10103480 <__alt_data_end+0xfffe3480>
10103508:	95c8983a 	sll	r4,r18,r23
1010350c:	a0806217 	ldw	r2,392(r20)
10103510:	a5800117 	ldw	r22,4(r20)
10103514:	2084703a 	and	r2,r4,r2
10103518:	10000b26 	beq	r2,zero,10103548 <__call_exitprocs+0x14c>
1010351c:	a0806317 	ldw	r2,396(r20)
10103520:	2088703a 	and	r4,r4,r2
10103524:	20000c1e 	bne	r4,zero,10103558 <__call_exitprocs+0x15c>
10103528:	89400017 	ldw	r5,0(r17)
1010352c:	d9000017 	ldw	r4,0(sp)
10103530:	183ee83a 	callr	r3
10103534:	a0800117 	ldw	r2,4(r20)
10103538:	15bfbf1e 	bne	r2,r22,10103438 <__alt_data_end+0xfffe3438>
1010353c:	98800017 	ldw	r2,0(r19)
10103540:	153fcf26 	beq	r2,r20,10103480 <__alt_data_end+0xfffe3480>
10103544:	003fbc06 	br	10103438 <__alt_data_end+0xfffe3438>
10103548:	183ee83a 	callr	r3
1010354c:	003ff906 	br	10103534 <__alt_data_end+0xfffe3534>
10103550:	a5c00115 	stw	r23,4(r20)
10103554:	003feb06 	br	10103504 <__alt_data_end+0xfffe3504>
10103558:	89000017 	ldw	r4,0(r17)
1010355c:	183ee83a 	callr	r3
10103560:	003ff406 	br	10103534 <__alt_data_end+0xfffe3534>
10103564:	a0800017 	ldw	r2,0(r20)
10103568:	a027883a 	mov	r19,r20
1010356c:	1029883a 	mov	r20,r2
10103570:	003fb606 	br	1010344c <__alt_data_end+0xfffe344c>
10103574:	0005883a 	mov	r2,zero
10103578:	003ffb06 	br	10103568 <__alt_data_end+0xfffe3568>

1010357c <__divsi3>:
1010357c:	20001b16 	blt	r4,zero,101035ec <__divsi3+0x70>
10103580:	000f883a 	mov	r7,zero
10103584:	28001616 	blt	r5,zero,101035e0 <__divsi3+0x64>
10103588:	200d883a 	mov	r6,r4
1010358c:	29001a2e 	bgeu	r5,r4,101035f8 <__divsi3+0x7c>
10103590:	00800804 	movi	r2,32
10103594:	00c00044 	movi	r3,1
10103598:	00000106 	br	101035a0 <__divsi3+0x24>
1010359c:	10000d26 	beq	r2,zero,101035d4 <__divsi3+0x58>
101035a0:	294b883a 	add	r5,r5,r5
101035a4:	10bfffc4 	addi	r2,r2,-1
101035a8:	18c7883a 	add	r3,r3,r3
101035ac:	293ffb36 	bltu	r5,r4,1010359c <__alt_data_end+0xfffe359c>
101035b0:	0005883a 	mov	r2,zero
101035b4:	18000726 	beq	r3,zero,101035d4 <__divsi3+0x58>
101035b8:	0005883a 	mov	r2,zero
101035bc:	31400236 	bltu	r6,r5,101035c8 <__divsi3+0x4c>
101035c0:	314dc83a 	sub	r6,r6,r5
101035c4:	10c4b03a 	or	r2,r2,r3
101035c8:	1806d07a 	srli	r3,r3,1
101035cc:	280ad07a 	srli	r5,r5,1
101035d0:	183ffa1e 	bne	r3,zero,101035bc <__alt_data_end+0xfffe35bc>
101035d4:	38000126 	beq	r7,zero,101035dc <__divsi3+0x60>
101035d8:	0085c83a 	sub	r2,zero,r2
101035dc:	f800283a 	ret
101035e0:	014bc83a 	sub	r5,zero,r5
101035e4:	39c0005c 	xori	r7,r7,1
101035e8:	003fe706 	br	10103588 <__alt_data_end+0xfffe3588>
101035ec:	0109c83a 	sub	r4,zero,r4
101035f0:	01c00044 	movi	r7,1
101035f4:	003fe306 	br	10103584 <__alt_data_end+0xfffe3584>
101035f8:	00c00044 	movi	r3,1
101035fc:	003fee06 	br	101035b8 <__alt_data_end+0xfffe35b8>

10103600 <__modsi3>:
10103600:	20001716 	blt	r4,zero,10103660 <__modsi3+0x60>
10103604:	000f883a 	mov	r7,zero
10103608:	2005883a 	mov	r2,r4
1010360c:	28001216 	blt	r5,zero,10103658 <__modsi3+0x58>
10103610:	2900162e 	bgeu	r5,r4,1010366c <__modsi3+0x6c>
10103614:	01800804 	movi	r6,32
10103618:	00c00044 	movi	r3,1
1010361c:	00000106 	br	10103624 <__modsi3+0x24>
10103620:	30000a26 	beq	r6,zero,1010364c <__modsi3+0x4c>
10103624:	294b883a 	add	r5,r5,r5
10103628:	31bfffc4 	addi	r6,r6,-1
1010362c:	18c7883a 	add	r3,r3,r3
10103630:	293ffb36 	bltu	r5,r4,10103620 <__alt_data_end+0xfffe3620>
10103634:	18000526 	beq	r3,zero,1010364c <__modsi3+0x4c>
10103638:	1806d07a 	srli	r3,r3,1
1010363c:	11400136 	bltu	r2,r5,10103644 <__modsi3+0x44>
10103640:	1145c83a 	sub	r2,r2,r5
10103644:	280ad07a 	srli	r5,r5,1
10103648:	183ffb1e 	bne	r3,zero,10103638 <__alt_data_end+0xfffe3638>
1010364c:	38000126 	beq	r7,zero,10103654 <__modsi3+0x54>
10103650:	0085c83a 	sub	r2,zero,r2
10103654:	f800283a 	ret
10103658:	014bc83a 	sub	r5,zero,r5
1010365c:	003fec06 	br	10103610 <__alt_data_end+0xfffe3610>
10103660:	0109c83a 	sub	r4,zero,r4
10103664:	01c00044 	movi	r7,1
10103668:	003fe706 	br	10103608 <__alt_data_end+0xfffe3608>
1010366c:	00c00044 	movi	r3,1
10103670:	003ff106 	br	10103638 <__alt_data_end+0xfffe3638>

10103674 <__udivsi3>:
10103674:	200d883a 	mov	r6,r4
10103678:	2900152e 	bgeu	r5,r4,101036d0 <__udivsi3+0x5c>
1010367c:	28001416 	blt	r5,zero,101036d0 <__udivsi3+0x5c>
10103680:	00800804 	movi	r2,32
10103684:	00c00044 	movi	r3,1
10103688:	00000206 	br	10103694 <__udivsi3+0x20>
1010368c:	10000e26 	beq	r2,zero,101036c8 <__udivsi3+0x54>
10103690:	28000516 	blt	r5,zero,101036a8 <__udivsi3+0x34>
10103694:	294b883a 	add	r5,r5,r5
10103698:	10bfffc4 	addi	r2,r2,-1
1010369c:	18c7883a 	add	r3,r3,r3
101036a0:	293ffa36 	bltu	r5,r4,1010368c <__alt_data_end+0xfffe368c>
101036a4:	18000826 	beq	r3,zero,101036c8 <__udivsi3+0x54>
101036a8:	0005883a 	mov	r2,zero
101036ac:	31400236 	bltu	r6,r5,101036b8 <__udivsi3+0x44>
101036b0:	314dc83a 	sub	r6,r6,r5
101036b4:	10c4b03a 	or	r2,r2,r3
101036b8:	1806d07a 	srli	r3,r3,1
101036bc:	280ad07a 	srli	r5,r5,1
101036c0:	183ffa1e 	bne	r3,zero,101036ac <__alt_data_end+0xfffe36ac>
101036c4:	f800283a 	ret
101036c8:	0005883a 	mov	r2,zero
101036cc:	f800283a 	ret
101036d0:	00c00044 	movi	r3,1
101036d4:	003ff406 	br	101036a8 <__alt_data_end+0xfffe36a8>

101036d8 <__umodsi3>:
101036d8:	2005883a 	mov	r2,r4
101036dc:	2900122e 	bgeu	r5,r4,10103728 <__umodsi3+0x50>
101036e0:	28001116 	blt	r5,zero,10103728 <__umodsi3+0x50>
101036e4:	01800804 	movi	r6,32
101036e8:	00c00044 	movi	r3,1
101036ec:	00000206 	br	101036f8 <__umodsi3+0x20>
101036f0:	30000c26 	beq	r6,zero,10103724 <__umodsi3+0x4c>
101036f4:	28000516 	blt	r5,zero,1010370c <__umodsi3+0x34>
101036f8:	294b883a 	add	r5,r5,r5
101036fc:	31bfffc4 	addi	r6,r6,-1
10103700:	18c7883a 	add	r3,r3,r3
10103704:	293ffa36 	bltu	r5,r4,101036f0 <__alt_data_end+0xfffe36f0>
10103708:	18000626 	beq	r3,zero,10103724 <__umodsi3+0x4c>
1010370c:	1806d07a 	srli	r3,r3,1
10103710:	11400136 	bltu	r2,r5,10103718 <__umodsi3+0x40>
10103714:	1145c83a 	sub	r2,r2,r5
10103718:	280ad07a 	srli	r5,r5,1
1010371c:	183ffb1e 	bne	r3,zero,1010370c <__alt_data_end+0xfffe370c>
10103720:	f800283a 	ret
10103724:	f800283a 	ret
10103728:	00c00044 	movi	r3,1
1010372c:	003ff706 	br	1010370c <__alt_data_end+0xfffe370c>

10103730 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10103730:	defffd04 	addi	sp,sp,-12
10103734:	df000215 	stw	fp,8(sp)
10103738:	df000204 	addi	fp,sp,8
1010373c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10103740:	0001883a 	nop
10103744:	e0bfff17 	ldw	r2,-4(fp)
10103748:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1010374c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10103750:	10000226 	beq	r2,zero,1010375c <_exit+0x2c>
    ALT_SIM_FAIL();
10103754:	002af070 	cmpltui	zero,zero,43969
10103758:	00000106 	br	10103760 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1010375c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10103760:	003fff06 	br	10103760 <__alt_data_end+0xfffe3760>
