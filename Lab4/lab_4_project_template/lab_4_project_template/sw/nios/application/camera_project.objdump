
camera_project.elf:     file format elf32-littlenios2
camera_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00010e44 memsz 0x00010e44 flags r-x
    LOAD off    0x00011e64 vaddr 0x10110e64 paddr 0x101129c0 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x0001451c vaddr 0x1011451c paddr 0x1011451c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000108a8  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000378  10110aec  10110aec  00011aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10110e64  101129c0  00011e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1011451c  1011451c  0001451c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  1011467c  1011467c  000139c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000139c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001018  00000000  00000000  000139e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028d6e  00000000  00000000  00014a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a24b  00000000  00000000  0003d76e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ca8b  00000000  00000000  000479b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002600  00000000  00000000  00054444  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003de1  00000000  00000000  00056a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000181f8  00000000  00000000  0005a825  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00072a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001970  00000000  00000000  00072a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077b0e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00077b11  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00077b1d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00077b1e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00077b1f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00077b2a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00077b35  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00077b40  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000072  00000000  00000000  00077b4a  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  00077bbc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002896c1  00000000  00000000  0007d52b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10110aec l    d  .rodata	00000000 .rodata
10110e64 l    d  .rwdata	00000000 .rwdata
1011451c l    d  .bss	00000000 .bss
1011467c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/hugom/OneDrive/Documents/Cours/Embedded_sys/Lab4/lab_4_project_template/lab_4_project_template/sw/nios/camera_project_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100314 l     F .text	0000003c max
10100350 l     F .text	000000c8 write_frame_width_reg
10100928 l     F .text	00000034 is_idle
10100418 l     F .text	000000cc write_frame_height_reg
101004e4 l     F .text	000000cc write_frame_frame_blank_reg
101005b0 l     F .text	000000c8 write_frame_line_blank_reg
10100678 l     F .text	000000cc write_line_line_blank_reg
10100744 l     F .text	000000c8 write_line_frame_blank_reg
1010080c l     F .text	0000002c read_frame_width_reg
10100838 l     F .text	00000030 read_frame_height_reg
10100868 l     F .text	00000030 read_frame_frame_blank_reg
10100898 l     F .text	00000030 read_frame_line_blank_reg
101008c8 l     F .text	00000030 read_line_line_blank_reg
101008f8 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 main_with_cmos_generator.c
00000000 l    df *ABS*	00000000 memory_access.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
10110e64 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
1010200c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
10110ba2 l     O .rodata	00000010 zeroes.4404
101045a0 l     F .text	000000bc __sbprintf
10110bb2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10104864 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10106394 l     F .text	00000008 __fp_unlock
101063a8 l     F .text	0000019c __sinit.part.1
10106544 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
101116b0 l     O .rwdata	00000020 lc_ctype_charset
10111690 l     O .rwdata	00000020 lc_message_charset
101116d0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
10110be0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1010839c l     F .text	000000fc __sprint_r.part.0
10110d14 l     O .rodata	00000010 blanks.4348
10110d04 l     O .rodata	00000010 zeroes.4349
10109928 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010df3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e048 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e160 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010e240 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010e32c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010e500 l     F .text	0000003c alt_get_errno
1010e53c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010e754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112968 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1010e9a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010ead4 l     F .text	00000034 alt_dev_reg
101118b0 l     O .rwdata	00001060 jtag_uart_0
10112910 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010edb8 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010efc4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
1011296c l     O .rwdata	00000009 hcinfo.2538
10112978 l     O .rwdata	0000000a hcinfo.2551
10112984 l     O .rwdata	00000009 hcinfo.2560
10112990 l     O .rwdata	0000000a hcinfo.2573
1011299c l     O .rwdata	0000000a hcinfo.2586
101129a8 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010fbf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110324 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10114550 g     O .bss	00000004 alt_instruction_exception_handler
10107fdc g     F .text	00000074 _mprec_log10
101080c8 g     F .text	0000008c __any_on
10106d9c g     F .text	00000054 _isatty_r
10110bec g     O .rodata	00000028 __mprec_tinytens
1010e43c g     F .text	0000007c alt_main
1011457c g     O .bss	00000100 alt_irq
10106ecc g     F .text	00000060 _lseek_r
101129c0 g       *ABS*	00000000 __flash_rwdata_start
10106734 g     F .text	000000ac __sflags
1010ca68 g     F .text	00000088 .hidden __eqdf2
1011467c g       *ABS*	00000000 __alt_heap_start
10101fd0 g     F .text	0000003c printf
1010aa88 g     F .text	0000009c _wcrtomb_r
10102328 g     F .text	0000005c __sseek
101066e4 g     F .text	00000010 __sinit
1010a930 g     F .text	00000140 __swbuf_r
10106df0 g     F .text	0000007c _setlocale_r
1010654c g     F .text	00000068 __sfmoreglue
1010e4dc g     F .text	00000024 __malloc_unlock
1010f5fc g     F .text	0000011c alt_hostfs_open
1010a270 g     F .text	0000015c memmove
101066cc g     F .text	00000018 _cleanup
10107158 g     F .text	000000a8 _Balloc
1010caf0 g     F .text	000000dc .hidden __gtdf2
10110608 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
101013f4 g     F .text	0000005c _fstat_r
1011451c g     O .bss	00000004 errno
101022a4 g     F .text	00000008 __seofread
1011453c g     O .bss	00000004 alt_argv
1011a938 g       *ABS*	00000000 _gp
10111730 g     O .rwdata	00000180 alt_fd_list
1010f834 g     F .text	00000068 alt_hostfs_seek
1010fd94 g     F .text	00000090 alt_find_dev
10107010 g     F .text	00000148 memcpy
1010639c g     F .text	0000000c _cleanup_r
1010dd54 g     F .text	000000dc .hidden __floatsidf
1010ff2c g     F .text	00000080 alt_fs_reg
101103e8 g     F .text	0000007c alt_io_redirect
1010cbcc g     F .text	000000f4 .hidden __ltdf2
10110aec g       *ABS*	00000000 __DTOR_END__
101106bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
101081b4 g     F .text	00000074 __fpclassifyd
10107f38 g     F .text	000000a4 __ratio
1010990c g     F .text	0000001c __vfiprintf_internal
1010f1bc g     F .text	0000021c altera_avalon_jtag_uart_read
10101fa0 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10100a50 g     F .text	00000108 cmos_sensor_output_generator_configure
1010b818 g     F .text	00000064 .hidden __udivsi3
1010e19c g     F .text	000000a4 isatty
10110c3c g     O .rodata	000000c8 __mprec_tens
10100290 g     F .text	00000084 start_cmos
10106e6c g     F .text	0000000c __locale_charset
1011062c g     F .text	00000090 alt_icache_flush
10114528 g     O .bss	00000004 __malloc_top_pad
10112948 g     O .rwdata	00000004 __mb_cur_max
10106e9c g     F .text	0000000c _localeconv_r
10109db4 g     F .text	000004bc __sfvwrite_r
10107564 g     F .text	0000003c __i2b
101021fc g     F .text	00000054 _sbrk_r
1010f75c g     F .text	0000006c alt_hostfs_read
10108154 g     F .text	00000060 _read_r
10100d50 g     F .text	000000cc read_memory
10112960 g     O .rwdata	00000004 alt_max_fd
10109aa8 g     F .text	000000f0 _fclose_r
10106364 g     F .text	00000030 fflush
10114524 g     O .bss	00000004 __malloc_max_sbrked_mem
1010b8d4 g     F .text	000008ac .hidden __adddf3
10107ce0 g     F .text	0000010c __b2d
1010b1e8 g     F .text	00000538 .hidden __umoddi3
1010e368 g     F .text	000000d4 lseek
10112938 g     O .rwdata	00000004 _global_impure_ptr
1010a3cc g     F .text	00000564 _realloc_r
1011467c g       *ABS*	00000000 __bss_end
10110234 g     F .text	000000f0 alt_iic_isr_register
10110500 g     F .text	00000108 alt_tick
1010ac70 g     F .text	00000578 .hidden __udivdi3
10109d10 g     F .text	00000024 _fputwc_r
10110c14 g     O .rodata	00000028 __mprec_bigtens
10107348 g     F .text	00000104 __s2b
1010de30 g     F .text	000000a8 .hidden __floatunsidf
10107a20 g     F .text	00000060 __mcmp
10106704 g     F .text	00000018 __fp_lock_all
101101e8 g     F .text	0000004c alt_ic_irq_enabled
10110464 g     F .text	0000009c alt_alarm_stop
10100b90 g     F .text	00000038 cmos_sensor_output_generator_stop
10114544 g     O .bss	00000004 alt_irq_active
10100f94 g     F .text	00000444 _fseeko_r
1010f718 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10111708 g     O .rwdata	00000028 alt_dev_null
1010fbac g     F .text	00000048 alt_dcache_flush_all
1010744c g     F .text	00000068 __hi0bits
1010dcd4 g     F .text	00000080 .hidden __fixdfsi
10100b58 g     F .text	00000038 cmos_sensor_output_generator_start
101129c0 g       *ABS*	00000000 __ram_rwdata_end
10112958 g     O .rwdata	00000008 alt_dev_list
1010e9dc g     F .text	000000f8 write
10110e64 g       *ABS*	00000000 __ram_rodata_end
1010e0b0 g     F .text	000000b0 fstat
10100f50 g     F .text	00000024 fprintf
1010cbcc g     F .text	000000f4 .hidden __ledf2
10107798 g     F .text	00000140 __pow5mult
101084b0 g     F .text	0000145c ___vfiprintf_internal_r
10114534 g     O .bss	00000004 __nlocale_changed
1010b87c g     F .text	00000058 .hidden __umodsi3
1011467c g       *ABS*	00000000 end
101013d8 g     F .text	0000001c fseeko
10100f78 g     F .text	0000001c fseek
1010ecf8 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10110aec g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010ded8 g     F .text	00000064 .hidden __clzsi2
1010f3d8 g     F .text	00000224 altera_avalon_jtag_uart_write
101066f4 g     F .text	00000004 __sfp_lock_acquire
10106f2c g     F .text	000000e4 memchr
1010238c g     F .text	000021f8 ___vfprintf_internal_r
10106904 g     F .text	00000310 _free_r
1010095c g     F .text	00000078 cmos_sensor_output_generator_inst
10106e78 g     F .text	00000010 __locale_mb_cur_max
10110938 g     F .text	00000180 __call_exitprocs
10114530 g     O .bss	00000004 __mlocale_changed
10112940 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10114548 g     O .bss	00000004 _alt_tick_rate
101078d8 g     F .text	00000148 __lshift
1011454c g     O .bss	00000004 _alt_nticks
1010e790 g     F .text	000000fc read
1010eb40 g     F .text	00000054 alt_sys_init
10101f40 g     F .text	00000060 _open_r
10110820 g     F .text	00000118 __register_exitproc
101075a0 g     F .text	000001f8 __multiply
1010f064 g     F .text	00000068 altera_avalon_jtag_uart_close
10110e64 g       *ABS*	00000000 __ram_rwdata_start
10110aec g       *ABS*	00000000 __ram_rodata_start
10114554 g     O .bss	00000028 __malloc_current_mallinfo
10107dec g     F .text	0000014c __d2b
1010eb94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1010ffac g     F .text	000000a4 alt_get_fd
10104810 g     F .text	00000054 _close_r
101107a4 g     F .text	0000007c memcmp
1010ec54 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1011467c g       *ABS*	00000000 __alt_stack_base
1010eca4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
101046bc g     F .text	00000154 __swsetup_r
1010c180 g     F .text	000008e8 .hidden __divdf3
101065b4 g     F .text	00000118 __sfp
10108050 g     F .text	00000078 __copybits
10111288 g     O .rwdata	00000408 __malloc_av_
10106700 g     F .text	00000004 __sinit_lock_release
1010ccc0 g     F .text	00000718 .hidden __muldf3
10102250 g     F .text	00000054 __sread
1010fe24 g     F .text	00000108 alt_find_file
1010fc30 g     F .text	000000a4 alt_dev_llist_insert
1010e4b8 g     F .text	00000024 __malloc_lock
10100f28 g     F .text	00000028 _fprintf_r
1010e8f0 g     F .text	000000b0 sbrk
10106308 g     F .text	0000005c _fflush_r
101099e4 g     F .text	000000c4 _calloc_r
10100f10 g     F .text	00000018 fopen
1011451c g       *ABS*	00000000 __bss_start
10101e18 g     F .text	00000128 memset
10100bc8 g     F .text	00000188 main
10114540 g     O .bss	00000004 alt_envp
10114520 g     O .bss	00000004 __malloc_max_total_mem
1010ebf4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010aa70 g     F .text	00000018 __swbuf
10102384 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10109b98 g     F .text	00000014 fclose
10104a64 g     F .text	00001688 _dtoa_r
1010160c g     F .text	0000080c _malloc_r
1010abe4 g     F .text	00000030 __ascii_wctomb
10112964 g     O .rwdata	00000004 alt_errno
10106c14 g     F .text	000000c4 _fwalk
1010b720 g     F .text	00000084 .hidden __divsi3
101067e0 g     F .text	00000124 _malloc_trim_r
10110aec g       *ABS*	00000000 __CTOR_END__
10108228 g     F .text	000000dc strcmp
10110aec g       *ABS*	00000000 __flash_rodata_start
10110aec g       *ABS*	00000000 __DTOR_LIST__
1010ca68 g     F .text	00000088 .hidden __nedf2
1010eb08 g     F .text	00000038 alt_irq_init
1010e88c g     F .text	00000064 alt_release_fd
10110d24 g     O .rodata	00000100 .hidden __clz_tab
1011452c g     O .bss	00000004 _PathLocale
10110758 g     F .text	00000014 atexit
1010465c g     F .text	00000060 _write_r
10106ea8 g     F .text	00000018 setlocale
1011293c g     O .rwdata	00000004 _impure_ptr
10114538 g     O .bss	00000004 alt_argc
101060ec g     F .text	0000021c __sflush_r
1010fd34 g     F .text	00000060 _do_dtors
10106e94 g     F .text	00000008 __locale_cjk_lang
10100f74 g     F .text	00000004 _fseek_r
10102028 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10107c7c g     F .text	00000064 __ulp
1010671c g     F .text	00000018 __fp_unlock_all
10112950 g     O .rwdata	00000008 alt_fs_list
1010f7c8 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10106ec0 g     F .text	0000000c localeconv
10110084 g     F .text	00000050 alt_ic_isr_register
101129c0 g       *ABS*	00000000 _edata
1011467c g       *ABS*	00000000 _end
10109bac g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
101009d4 g     F .text	0000007c cmos_sensor_output_generator_init
1010f0cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1011015c g     F .text	0000008c alt_ic_irq_disable
101022ac g     F .text	0000007c __swrite
10112944 g     O .rwdata	00000004 __malloc_trim_threshold
10106e88 g     F .text	0000000c __locale_msgcharset
1011076c g     F .text	00000038 exit
10106cd8 g     F .text	000000c4 _fwalk_reent
10107a80 g     F .text	000001fc __mdiff
1010b7a4 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
101066f8 g     F .text	00000004 __sfp_lock_release
10100e1c g     F .text	000000f4 _fopen_r
10110ab8 g     F .text	00000034 _exit
1010fa80 g     F .text	0000012c alt_alarm_start
10101450 g     F .text	000001bc __smakebuf_r
10108304 g     F .text	00000098 strlen
1010e600 g     F .text	00000154 open
1010caf0 g     F .text	000000dc .hidden __gedf2
1011294c g     O .rwdata	00000004 __wctomb
10108498 g     F .text	00000018 __sprint_r
10110050 g     F .text	00000034 alt_icache_flush_all
101129b4 g     O .rwdata	00000004 alt_priority_mask
101100d4 g     F .text	00000088 alt_ic_irq_enable
10104584 g     F .text	0000001c __vfprintf_internal
1010ac14 g     F .text	0000005c _wctomb_r
1010d3d8 g     F .text	000008fc .hidden __subdf3
101074b4 g     F .text	000000b0 __lo0bits
101129b8 g     O .rwdata	00000008 alt_alarm_list
1010fcd4 g     F .text	00000060 _do_ctors
1010ab24 g     F .text	000000c0 wcrtomb
1010df78 g     F .text	000000d0 close
1010e2a8 g     F .text	00000084 alt_load
10109d34 g     F .text	00000080 fputwc
101066fc g     F .text	00000004 __sinit_lock_acquire
10107228 g     F .text	00000120 __multadd
10107200 g     F .text	00000028 _Bfree
1010f89c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10915f04 	addi	r2,r2,17788
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10915f04 	addi	r2,r2,17788
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6aa4e14 	ori	gp,gp,43320
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10914714 	ori	r2,r2,17692

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d19f14 	ori	r3,r3,18044

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010e2a80 	call	1010e2a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010e43c0 	call	1010e43c <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <start_cmos>:
#include "cmos_sensor_output_generator/cmos_sensor_output_generator.h"
#include "cmos_sensor_output_generator/cmos_sensor_output_generator_regs.h"

#include "cmos_sensor_output_generator.h"

void start_cmos(void) {
10100290:	defff704 	addi	sp,sp,-36
10100294:	dfc00815 	stw	ra,32(sp)
10100298:	df000715 	stw	fp,28(sp)
1010029c:	df000704 	addi	fp,sp,28
    cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
101002a0:	00807804 	movi	r2,480
101002a4:	d8800015 	stw	r2,0(sp)
101002a8:	01c0a004 	movi	r7,640
101002ac:	01800304 	movi	r6,12
101002b0:	01440034 	movhi	r5,4096
101002b4:	29420804 	addi	r5,r5,2080
101002b8:	e13ffc04 	addi	r4,fp,-16
101002bc:	010095c0 	call	1010095c <cmos_sensor_output_generator_inst>
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
    cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
101002c0:	e13ffc04 	addi	r4,fp,-16
101002c4:	01009d40 	call	101009d4 <cmos_sensor_output_generator_init>

    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
101002c8:	e13ffc04 	addi	r4,fp,-16
101002cc:	0100b900 	call	10100b90 <cmos_sensor_output_generator_stop>

    cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
101002d0:	d8000215 	stw	zero,8(sp)
101002d4:	00800044 	movi	r2,1
101002d8:	d8800115 	stw	r2,4(sp)
101002dc:	d8000015 	stw	zero,0(sp)
101002e0:	01c00044 	movi	r7,1
101002e4:	0180a004 	movi	r6,640
101002e8:	01407804 	movi	r5,480
101002ec:	e13ffc04 	addi	r4,fp,-16
101002f0:	0100a500 	call	10100a50 <cmos_sensor_output_generator_configure>
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

    cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
101002f4:	e13ffc04 	addi	r4,fp,-16
101002f8:	0100b580 	call	10100b58 <cmos_sensor_output_generator_start>
}
101002fc:	0001883a 	nop
10100300:	e037883a 	mov	sp,fp
10100304:	dfc00117 	ldw	ra,4(sp)
10100308:	df000017 	ldw	fp,0(sp)
1010030c:	dec00204 	addi	sp,sp,8
10100310:	f800283a 	ret

10100314 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100314:	defffd04 	addi	sp,sp,-12
10100318:	df000215 	stw	fp,8(sp)
1010031c:	df000204 	addi	fp,sp,8
10100320:	e13ffe15 	stw	r4,-8(fp)
10100324:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
10100328:	e0bffe17 	ldw	r2,-8(fp)
1010032c:	e0ffff17 	ldw	r3,-4(fp)
10100330:	1880022e 	bgeu	r3,r2,1010033c <max+0x28>
        return a;
10100334:	e0bffe17 	ldw	r2,-8(fp)
10100338:	00000106 	br	10100340 <max+0x2c>
    } else {
        return b;
1010033c:	e0bfff17 	ldw	r2,-4(fp)
    }
}
10100340:	e037883a 	mov	sp,fp
10100344:	df000017 	ldw	fp,0(sp)
10100348:	dec00104 	addi	sp,sp,4
1010034c:	f800283a 	ret

10100350 <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
10100350:	defffa04 	addi	sp,sp,-24
10100354:	dfc00515 	stw	ra,20(sp)
10100358:	df000415 	stw	fp,16(sp)
1010035c:	df000404 	addi	fp,sp,16
10100360:	e13ffe15 	stw	r4,-8(fp)
10100364:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100368:	e0bffe17 	ldw	r2,-8(fp)
1010036c:	10c00217 	ldw	r3,8(r2)
10100370:	e0bffe17 	ldw	r2,-8(fp)
10100374:	10800317 	ldw	r2,12(r2)
10100378:	100b883a 	mov	r5,r2
1010037c:	1809883a 	mov	r4,r3
10100380:	01003140 	call	10100314 <max>
10100384:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100388:	e0bfff17 	ldw	r2,-4(fp)
1010038c:	1004c03a 	cmpne	r2,r2,zero
10100390:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100394:	e0bfff17 	ldw	r2,-4(fp)
10100398:	e0fffc17 	ldw	r3,-16(fp)
1010039c:	1885403a 	cmpgeu	r2,r3,r2
101003a0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003a4:	e0bffd03 	ldbu	r2,-12(fp)
101003a8:	10000826 	beq	r2,zero,101003cc <write_frame_width_reg+0x7c>
101003ac:	e0bffd43 	ldbu	r2,-11(fp)
101003b0:	10000626 	beq	r2,zero,101003cc <write_frame_width_reg+0x7c>
101003b4:	e13ffe17 	ldw	r4,-8(fp)
101003b8:	01009280 	call	10100928 <is_idle>
101003bc:	10803fcc 	andi	r2,r2,255
101003c0:	10000226 	beq	r2,zero,101003cc <write_frame_width_reg+0x7c>
101003c4:	00800044 	movi	r2,1
101003c8:	00000106 	br	101003d0 <write_frame_width_reg+0x80>
101003cc:	0005883a 	mov	r2,zero
101003d0:	e0bffd85 	stb	r2,-10(fp)
101003d4:	e0bffd83 	ldbu	r2,-10(fp)
101003d8:	1080004c 	andi	r2,r2,1
101003dc:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101003e0:	e0bffd83 	ldbu	r2,-10(fp)
101003e4:	10000626 	beq	r2,zero,10100400 <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
101003e8:	e0bffe17 	ldw	r2,-8(fp)
101003ec:	10800017 	ldw	r2,0(r2)
101003f0:	e0ffff17 	ldw	r3,-4(fp)
101003f4:	10c00035 	stwio	r3,0(r2)
        return true;
101003f8:	00800044 	movi	r2,1
101003fc:	00000106 	br	10100404 <write_frame_width_reg+0xb4>
    } else {
        return false;
10100400:	0005883a 	mov	r2,zero
    }
}
10100404:	e037883a 	mov	sp,fp
10100408:	dfc00117 	ldw	ra,4(sp)
1010040c:	df000017 	ldw	fp,0(sp)
10100410:	dec00204 	addi	sp,sp,8
10100414:	f800283a 	ret

10100418 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100418:	defffa04 	addi	sp,sp,-24
1010041c:	dfc00515 	stw	ra,20(sp)
10100420:	df000415 	stw	fp,16(sp)
10100424:	df000404 	addi	fp,sp,16
10100428:	e13ffe15 	stw	r4,-8(fp)
1010042c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100430:	e0bffe17 	ldw	r2,-8(fp)
10100434:	10c00217 	ldw	r3,8(r2)
10100438:	e0bffe17 	ldw	r2,-8(fp)
1010043c:	10800317 	ldw	r2,12(r2)
10100440:	100b883a 	mov	r5,r2
10100444:	1809883a 	mov	r4,r3
10100448:	01003140 	call	10100314 <max>
1010044c:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
10100450:	e0bfff17 	ldw	r2,-4(fp)
10100454:	1004c03a 	cmpne	r2,r2,zero
10100458:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
1010045c:	e0bfff17 	ldw	r2,-4(fp)
10100460:	e0fffc17 	ldw	r3,-16(fp)
10100464:	1885403a 	cmpgeu	r2,r3,r2
10100468:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010046c:	e0bffd03 	ldbu	r2,-12(fp)
10100470:	10000826 	beq	r2,zero,10100494 <write_frame_height_reg+0x7c>
10100474:	e0bffd43 	ldbu	r2,-11(fp)
10100478:	10000626 	beq	r2,zero,10100494 <write_frame_height_reg+0x7c>
1010047c:	e13ffe17 	ldw	r4,-8(fp)
10100480:	01009280 	call	10100928 <is_idle>
10100484:	10803fcc 	andi	r2,r2,255
10100488:	10000226 	beq	r2,zero,10100494 <write_frame_height_reg+0x7c>
1010048c:	00800044 	movi	r2,1
10100490:	00000106 	br	10100498 <write_frame_height_reg+0x80>
10100494:	0005883a 	mov	r2,zero
10100498:	e0bffd85 	stb	r2,-10(fp)
1010049c:	e0bffd83 	ldbu	r2,-10(fp)
101004a0:	1080004c 	andi	r2,r2,1
101004a4:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004a8:	e0bffd83 	ldbu	r2,-10(fp)
101004ac:	10000726 	beq	r2,zero,101004cc <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
101004b0:	e0bffe17 	ldw	r2,-8(fp)
101004b4:	10800017 	ldw	r2,0(r2)
101004b8:	10800104 	addi	r2,r2,4
101004bc:	e0ffff17 	ldw	r3,-4(fp)
101004c0:	10c00035 	stwio	r3,0(r2)
        return true;
101004c4:	00800044 	movi	r2,1
101004c8:	00000106 	br	101004d0 <write_frame_height_reg+0xb8>
    } else {
        return false;
101004cc:	0005883a 	mov	r2,zero
    }
}
101004d0:	e037883a 	mov	sp,fp
101004d4:	dfc00117 	ldw	ra,4(sp)
101004d8:	df000017 	ldw	fp,0(sp)
101004dc:	dec00204 	addi	sp,sp,8
101004e0:	f800283a 	ret

101004e4 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
101004e4:	defffa04 	addi	sp,sp,-24
101004e8:	dfc00515 	stw	ra,20(sp)
101004ec:	df000415 	stw	fp,16(sp)
101004f0:	df000404 	addi	fp,sp,16
101004f4:	e13ffe15 	stw	r4,-8(fp)
101004f8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101004fc:	e0bffe17 	ldw	r2,-8(fp)
10100500:	10c00217 	ldw	r3,8(r2)
10100504:	e0bffe17 	ldw	r2,-8(fp)
10100508:	10800317 	ldw	r2,12(r2)
1010050c:	100b883a 	mov	r5,r2
10100510:	1809883a 	mov	r4,r3
10100514:	01003140 	call	10100314 <max>
10100518:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
1010051c:	e0bfff17 	ldw	r2,-4(fp)
10100520:	1004c03a 	cmpne	r2,r2,zero
10100524:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
10100528:	e0bfff17 	ldw	r2,-4(fp)
1010052c:	e0fffc17 	ldw	r3,-16(fp)
10100530:	1885403a 	cmpgeu	r2,r3,r2
10100534:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100538:	e0bffd03 	ldbu	r2,-12(fp)
1010053c:	10000826 	beq	r2,zero,10100560 <write_frame_frame_blank_reg+0x7c>
10100540:	e0bffd43 	ldbu	r2,-11(fp)
10100544:	10000626 	beq	r2,zero,10100560 <write_frame_frame_blank_reg+0x7c>
10100548:	e13ffe17 	ldw	r4,-8(fp)
1010054c:	01009280 	call	10100928 <is_idle>
10100550:	10803fcc 	andi	r2,r2,255
10100554:	10000226 	beq	r2,zero,10100560 <write_frame_frame_blank_reg+0x7c>
10100558:	00800044 	movi	r2,1
1010055c:	00000106 	br	10100564 <write_frame_frame_blank_reg+0x80>
10100560:	0005883a 	mov	r2,zero
10100564:	e0bffd85 	stb	r2,-10(fp)
10100568:	e0bffd83 	ldbu	r2,-10(fp)
1010056c:	1080004c 	andi	r2,r2,1
10100570:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100574:	e0bffd83 	ldbu	r2,-10(fp)
10100578:	10000726 	beq	r2,zero,10100598 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
1010057c:	e0bffe17 	ldw	r2,-8(fp)
10100580:	10800017 	ldw	r2,0(r2)
10100584:	10800204 	addi	r2,r2,8
10100588:	e0ffff17 	ldw	r3,-4(fp)
1010058c:	10c00035 	stwio	r3,0(r2)
        return true;
10100590:	00800044 	movi	r2,1
10100594:	00000106 	br	1010059c <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100598:	0005883a 	mov	r2,zero
    }
}
1010059c:	e037883a 	mov	sp,fp
101005a0:	dfc00117 	ldw	ra,4(sp)
101005a4:	df000017 	ldw	fp,0(sp)
101005a8:	dec00204 	addi	sp,sp,8
101005ac:	f800283a 	ret

101005b0 <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
101005b0:	defffa04 	addi	sp,sp,-24
101005b4:	dfc00515 	stw	ra,20(sp)
101005b8:	df000415 	stw	fp,16(sp)
101005bc:	df000404 	addi	fp,sp,16
101005c0:	e13ffe15 	stw	r4,-8(fp)
101005c4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101005c8:	e0bffe17 	ldw	r2,-8(fp)
101005cc:	10c00217 	ldw	r3,8(r2)
101005d0:	e0bffe17 	ldw	r2,-8(fp)
101005d4:	10800317 	ldw	r2,12(r2)
101005d8:	100b883a 	mov	r5,r2
101005dc:	1809883a 	mov	r4,r3
101005e0:	01003140 	call	10100314 <max>
101005e4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
101005e8:	00800044 	movi	r2,1
101005ec:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
101005f0:	e0bfff17 	ldw	r2,-4(fp)
101005f4:	e0fffc17 	ldw	r3,-16(fp)
101005f8:	1885403a 	cmpgeu	r2,r3,r2
101005fc:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100600:	e0bffd03 	ldbu	r2,-12(fp)
10100604:	10000826 	beq	r2,zero,10100628 <write_frame_line_blank_reg+0x78>
10100608:	e0bffd43 	ldbu	r2,-11(fp)
1010060c:	10000626 	beq	r2,zero,10100628 <write_frame_line_blank_reg+0x78>
10100610:	e13ffe17 	ldw	r4,-8(fp)
10100614:	01009280 	call	10100928 <is_idle>
10100618:	10803fcc 	andi	r2,r2,255
1010061c:	10000226 	beq	r2,zero,10100628 <write_frame_line_blank_reg+0x78>
10100620:	00800044 	movi	r2,1
10100624:	00000106 	br	1010062c <write_frame_line_blank_reg+0x7c>
10100628:	0005883a 	mov	r2,zero
1010062c:	e0bffd85 	stb	r2,-10(fp)
10100630:	e0bffd83 	ldbu	r2,-10(fp)
10100634:	1080004c 	andi	r2,r2,1
10100638:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010063c:	e0bffd83 	ldbu	r2,-10(fp)
10100640:	10000726 	beq	r2,zero,10100660 <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
10100644:	e0bffe17 	ldw	r2,-8(fp)
10100648:	10800017 	ldw	r2,0(r2)
1010064c:	10800304 	addi	r2,r2,12
10100650:	e0ffff17 	ldw	r3,-4(fp)
10100654:	10c00035 	stwio	r3,0(r2)
        return true;
10100658:	00800044 	movi	r2,1
1010065c:	00000106 	br	10100664 <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
10100660:	0005883a 	mov	r2,zero
    }
}
10100664:	e037883a 	mov	sp,fp
10100668:	dfc00117 	ldw	ra,4(sp)
1010066c:	df000017 	ldw	fp,0(sp)
10100670:	dec00204 	addi	sp,sp,8
10100674:	f800283a 	ret

10100678 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
10100678:	defffa04 	addi	sp,sp,-24
1010067c:	dfc00515 	stw	ra,20(sp)
10100680:	df000415 	stw	fp,16(sp)
10100684:	df000404 	addi	fp,sp,16
10100688:	e13ffe15 	stw	r4,-8(fp)
1010068c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100690:	e0bffe17 	ldw	r2,-8(fp)
10100694:	10c00217 	ldw	r3,8(r2)
10100698:	e0bffe17 	ldw	r2,-8(fp)
1010069c:	10800317 	ldw	r2,12(r2)
101006a0:	100b883a 	mov	r5,r2
101006a4:	1809883a 	mov	r4,r3
101006a8:	01003140 	call	10100314 <max>
101006ac:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
101006b0:	e0bfff17 	ldw	r2,-4(fp)
101006b4:	1004c03a 	cmpne	r2,r2,zero
101006b8:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
101006bc:	e0bfff17 	ldw	r2,-4(fp)
101006c0:	e0fffc17 	ldw	r3,-16(fp)
101006c4:	1885403a 	cmpgeu	r2,r3,r2
101006c8:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101006cc:	e0bffd03 	ldbu	r2,-12(fp)
101006d0:	10000826 	beq	r2,zero,101006f4 <write_line_line_blank_reg+0x7c>
101006d4:	e0bffd43 	ldbu	r2,-11(fp)
101006d8:	10000626 	beq	r2,zero,101006f4 <write_line_line_blank_reg+0x7c>
101006dc:	e13ffe17 	ldw	r4,-8(fp)
101006e0:	01009280 	call	10100928 <is_idle>
101006e4:	10803fcc 	andi	r2,r2,255
101006e8:	10000226 	beq	r2,zero,101006f4 <write_line_line_blank_reg+0x7c>
101006ec:	00800044 	movi	r2,1
101006f0:	00000106 	br	101006f8 <write_line_line_blank_reg+0x80>
101006f4:	0005883a 	mov	r2,zero
101006f8:	e0bffd85 	stb	r2,-10(fp)
101006fc:	e0bffd83 	ldbu	r2,-10(fp)
10100700:	1080004c 	andi	r2,r2,1
10100704:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100708:	e0bffd83 	ldbu	r2,-10(fp)
1010070c:	10000726 	beq	r2,zero,1010072c <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
10100710:	e0bffe17 	ldw	r2,-8(fp)
10100714:	10800017 	ldw	r2,0(r2)
10100718:	10800404 	addi	r2,r2,16
1010071c:	e0ffff17 	ldw	r3,-4(fp)
10100720:	10c00035 	stwio	r3,0(r2)
        return true;
10100724:	00800044 	movi	r2,1
10100728:	00000106 	br	10100730 <write_line_line_blank_reg+0xb8>
    } else {
        return false;
1010072c:	0005883a 	mov	r2,zero
    }
}
10100730:	e037883a 	mov	sp,fp
10100734:	dfc00117 	ldw	ra,4(sp)
10100738:	df000017 	ldw	fp,0(sp)
1010073c:	dec00204 	addi	sp,sp,8
10100740:	f800283a 	ret

10100744 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
10100744:	defffa04 	addi	sp,sp,-24
10100748:	dfc00515 	stw	ra,20(sp)
1010074c:	df000415 	stw	fp,16(sp)
10100750:	df000404 	addi	fp,sp,16
10100754:	e13ffe15 	stw	r4,-8(fp)
10100758:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
1010075c:	e0bffe17 	ldw	r2,-8(fp)
10100760:	10c00217 	ldw	r3,8(r2)
10100764:	e0bffe17 	ldw	r2,-8(fp)
10100768:	10800317 	ldw	r2,12(r2)
1010076c:	100b883a 	mov	r5,r2
10100770:	1809883a 	mov	r4,r3
10100774:	01003140 	call	10100314 <max>
10100778:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
1010077c:	00800044 	movi	r2,1
10100780:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100784:	e0bfff17 	ldw	r2,-4(fp)
10100788:	e0fffc17 	ldw	r3,-16(fp)
1010078c:	1885403a 	cmpgeu	r2,r3,r2
10100790:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100794:	e0bffd03 	ldbu	r2,-12(fp)
10100798:	10000826 	beq	r2,zero,101007bc <write_line_frame_blank_reg+0x78>
1010079c:	e0bffd43 	ldbu	r2,-11(fp)
101007a0:	10000626 	beq	r2,zero,101007bc <write_line_frame_blank_reg+0x78>
101007a4:	e13ffe17 	ldw	r4,-8(fp)
101007a8:	01009280 	call	10100928 <is_idle>
101007ac:	10803fcc 	andi	r2,r2,255
101007b0:	10000226 	beq	r2,zero,101007bc <write_line_frame_blank_reg+0x78>
101007b4:	00800044 	movi	r2,1
101007b8:	00000106 	br	101007c0 <write_line_frame_blank_reg+0x7c>
101007bc:	0005883a 	mov	r2,zero
101007c0:	e0bffd85 	stb	r2,-10(fp)
101007c4:	e0bffd83 	ldbu	r2,-10(fp)
101007c8:	1080004c 	andi	r2,r2,1
101007cc:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101007d0:	e0bffd83 	ldbu	r2,-10(fp)
101007d4:	10000726 	beq	r2,zero,101007f4 <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
101007d8:	e0bffe17 	ldw	r2,-8(fp)
101007dc:	10800017 	ldw	r2,0(r2)
101007e0:	10800504 	addi	r2,r2,20
101007e4:	e0ffff17 	ldw	r3,-4(fp)
101007e8:	10c00035 	stwio	r3,0(r2)
        return true;
101007ec:	00800044 	movi	r2,1
101007f0:	00000106 	br	101007f8 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
101007f4:	0005883a 	mov	r2,zero
    }
}
101007f8:	e037883a 	mov	sp,fp
101007fc:	dfc00117 	ldw	ra,4(sp)
10100800:	df000017 	ldw	fp,0(sp)
10100804:	dec00204 	addi	sp,sp,8
10100808:	f800283a 	ret

1010080c <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
1010080c:	defffe04 	addi	sp,sp,-8
10100810:	df000115 	stw	fp,4(sp)
10100814:	df000104 	addi	fp,sp,4
10100818:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
1010081c:	e0bfff17 	ldw	r2,-4(fp)
10100820:	10800017 	ldw	r2,0(r2)
10100824:	10800037 	ldwio	r2,0(r2)
}
10100828:	e037883a 	mov	sp,fp
1010082c:	df000017 	ldw	fp,0(sp)
10100830:	dec00104 	addi	sp,sp,4
10100834:	f800283a 	ret

10100838 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
10100838:	defffe04 	addi	sp,sp,-8
1010083c:	df000115 	stw	fp,4(sp)
10100840:	df000104 	addi	fp,sp,4
10100844:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
10100848:	e0bfff17 	ldw	r2,-4(fp)
1010084c:	10800017 	ldw	r2,0(r2)
10100850:	10800104 	addi	r2,r2,4
10100854:	10800037 	ldwio	r2,0(r2)
}
10100858:	e037883a 	mov	sp,fp
1010085c:	df000017 	ldw	fp,0(sp)
10100860:	dec00104 	addi	sp,sp,4
10100864:	f800283a 	ret

10100868 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100868:	defffe04 	addi	sp,sp,-8
1010086c:	df000115 	stw	fp,4(sp)
10100870:	df000104 	addi	fp,sp,4
10100874:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
10100878:	e0bfff17 	ldw	r2,-4(fp)
1010087c:	10800017 	ldw	r2,0(r2)
10100880:	10800204 	addi	r2,r2,8
10100884:	10800037 	ldwio	r2,0(r2)
}
10100888:	e037883a 	mov	sp,fp
1010088c:	df000017 	ldw	fp,0(sp)
10100890:	dec00104 	addi	sp,sp,4
10100894:	f800283a 	ret

10100898 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100898:	defffe04 	addi	sp,sp,-8
1010089c:	df000115 	stw	fp,4(sp)
101008a0:	df000104 	addi	fp,sp,4
101008a4:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
101008a8:	e0bfff17 	ldw	r2,-4(fp)
101008ac:	10800017 	ldw	r2,0(r2)
101008b0:	10800304 	addi	r2,r2,12
101008b4:	10800037 	ldwio	r2,0(r2)
}
101008b8:	e037883a 	mov	sp,fp
101008bc:	df000017 	ldw	fp,0(sp)
101008c0:	dec00104 	addi	sp,sp,4
101008c4:	f800283a 	ret

101008c8 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
101008c8:	defffe04 	addi	sp,sp,-8
101008cc:	df000115 	stw	fp,4(sp)
101008d0:	df000104 	addi	fp,sp,4
101008d4:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
101008d8:	e0bfff17 	ldw	r2,-4(fp)
101008dc:	10800017 	ldw	r2,0(r2)
101008e0:	10800404 	addi	r2,r2,16
101008e4:	10800037 	ldwio	r2,0(r2)
}
101008e8:	e037883a 	mov	sp,fp
101008ec:	df000017 	ldw	fp,0(sp)
101008f0:	dec00104 	addi	sp,sp,4
101008f4:	f800283a 	ret

101008f8 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101008f8:	defffe04 	addi	sp,sp,-8
101008fc:	df000115 	stw	fp,4(sp)
10100900:	df000104 	addi	fp,sp,4
10100904:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
10100908:	e0bfff17 	ldw	r2,-4(fp)
1010090c:	10800017 	ldw	r2,0(r2)
10100910:	10800504 	addi	r2,r2,20
10100914:	10800037 	ldwio	r2,0(r2)
}
10100918:	e037883a 	mov	sp,fp
1010091c:	df000017 	ldw	fp,0(sp)
10100920:	dec00104 	addi	sp,sp,4
10100924:	f800283a 	ret

10100928 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
10100928:	defffe04 	addi	sp,sp,-8
1010092c:	df000115 	stw	fp,4(sp)
10100930:	df000104 	addi	fp,sp,4
10100934:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
10100938:	e0bfff17 	ldw	r2,-4(fp)
1010093c:	10800017 	ldw	r2,0(r2)
10100940:	10800704 	addi	r2,r2,28
10100944:	10800037 	ldwio	r2,0(r2)
10100948:	10800060 	cmpeqi	r2,r2,1
}
1010094c:	e037883a 	mov	sp,fp
10100950:	df000017 	ldw	fp,0(sp)
10100954:	dec00104 	addi	sp,sp,4
10100958:	f800283a 	ret

1010095c <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
1010095c:	defff704 	addi	sp,sp,-36
10100960:	df000815 	stw	fp,32(sp)
10100964:	df000804 	addi	fp,sp,32
10100968:	e13ffc15 	stw	r4,-16(fp)
1010096c:	e17ffd15 	stw	r5,-12(fp)
10100970:	3005883a 	mov	r2,r6
10100974:	e1ffff15 	stw	r7,-4(fp)
10100978:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
1010097c:	e0bffd17 	ldw	r2,-12(fp)
10100980:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100984:	e0bffe03 	ldbu	r2,-8(fp)
10100988:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
1010098c:	e0bfff17 	ldw	r2,-4(fp)
10100990:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100994:	e0800117 	ldw	r2,4(fp)
10100998:	e0bffb15 	stw	r2,-20(fp)

    return dev;
1010099c:	e0bffc17 	ldw	r2,-16(fp)
101009a0:	e0fff817 	ldw	r3,-32(fp)
101009a4:	10c00015 	stw	r3,0(r2)
101009a8:	e0fff917 	ldw	r3,-28(fp)
101009ac:	10c00115 	stw	r3,4(r2)
101009b0:	e0fffa17 	ldw	r3,-24(fp)
101009b4:	10c00215 	stw	r3,8(r2)
101009b8:	e0fffb17 	ldw	r3,-20(fp)
101009bc:	10c00315 	stw	r3,12(r2)
}
101009c0:	e0bffc17 	ldw	r2,-16(fp)
101009c4:	e037883a 	mov	sp,fp
101009c8:	df000017 	ldw	fp,0(sp)
101009cc:	dec00104 	addi	sp,sp,4
101009d0:	f800283a 	ret

101009d4 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
101009d4:	defffd04 	addi	sp,sp,-12
101009d8:	dfc00215 	stw	ra,8(sp)
101009dc:	df000115 	stw	fp,4(sp)
101009e0:	df000104 	addi	fp,sp,4
101009e4:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
101009e8:	e13fff17 	ldw	r4,-4(fp)
101009ec:	0100b900 	call	10100b90 <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
101009f0:	01400044 	movi	r5,1
101009f4:	e13fff17 	ldw	r4,-4(fp)
101009f8:	01003500 	call	10100350 <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
101009fc:	01400044 	movi	r5,1
10100a00:	e13fff17 	ldw	r4,-4(fp)
10100a04:	01004180 	call	10100418 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
10100a08:	01400044 	movi	r5,1
10100a0c:	e13fff17 	ldw	r4,-4(fp)
10100a10:	01004e40 	call	101004e4 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100a14:	000b883a 	mov	r5,zero
10100a18:	e13fff17 	ldw	r4,-4(fp)
10100a1c:	01005b00 	call	101005b0 <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
10100a20:	01400044 	movi	r5,1
10100a24:	e13fff17 	ldw	r4,-4(fp)
10100a28:	01006780 	call	10100678 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
10100a2c:	000b883a 	mov	r5,zero
10100a30:	e13fff17 	ldw	r4,-4(fp)
10100a34:	01007440 	call	10100744 <write_line_frame_blank_reg>
}
10100a38:	0001883a 	nop
10100a3c:	e037883a 	mov	sp,fp
10100a40:	dfc00117 	ldw	ra,4(sp)
10100a44:	df000017 	ldw	fp,0(sp)
10100a48:	dec00204 	addi	sp,sp,8
10100a4c:	f800283a 	ret

10100a50 <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
10100a50:	defff904 	addi	sp,sp,-28
10100a54:	dfc00615 	stw	ra,24(sp)
10100a58:	df000515 	stw	fp,20(sp)
10100a5c:	df000504 	addi	fp,sp,20
10100a60:	e13ffc15 	stw	r4,-16(fp)
10100a64:	e17ffd15 	stw	r5,-12(fp)
10100a68:	e1bffe15 	stw	r6,-8(fp)
10100a6c:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
10100a70:	00800044 	movi	r2,1
10100a74:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
10100a78:	e13ffc17 	ldw	r4,-16(fp)
10100a7c:	0100b900 	call	10100b90 <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
10100a80:	e17ffd17 	ldw	r5,-12(fp)
10100a84:	e13ffc17 	ldw	r4,-16(fp)
10100a88:	01003500 	call	10100350 <write_frame_width_reg>
10100a8c:	e0fffb03 	ldbu	r3,-20(fp)
10100a90:	10803fcc 	andi	r2,r2,255
10100a94:	1884703a 	and	r2,r3,r2
10100a98:	1004c03a 	cmpne	r2,r2,zero
10100a9c:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100aa0:	e17ffe17 	ldw	r5,-8(fp)
10100aa4:	e13ffc17 	ldw	r4,-16(fp)
10100aa8:	01004180 	call	10100418 <write_frame_height_reg>
10100aac:	e0fffb03 	ldbu	r3,-20(fp)
10100ab0:	10803fcc 	andi	r2,r2,255
10100ab4:	1884703a 	and	r2,r3,r2
10100ab8:	1004c03a 	cmpne	r2,r2,zero
10100abc:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100ac0:	e17fff17 	ldw	r5,-4(fp)
10100ac4:	e13ffc17 	ldw	r4,-16(fp)
10100ac8:	01004e40 	call	101004e4 <write_frame_frame_blank_reg>
10100acc:	e0fffb03 	ldbu	r3,-20(fp)
10100ad0:	10803fcc 	andi	r2,r2,255
10100ad4:	1884703a 	and	r2,r3,r2
10100ad8:	1004c03a 	cmpne	r2,r2,zero
10100adc:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100ae0:	e1400217 	ldw	r5,8(fp)
10100ae4:	e13ffc17 	ldw	r4,-16(fp)
10100ae8:	01005b00 	call	101005b0 <write_frame_line_blank_reg>
10100aec:	e0fffb03 	ldbu	r3,-20(fp)
10100af0:	10803fcc 	andi	r2,r2,255
10100af4:	1884703a 	and	r2,r3,r2
10100af8:	1004c03a 	cmpne	r2,r2,zero
10100afc:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100b00:	e1400317 	ldw	r5,12(fp)
10100b04:	e13ffc17 	ldw	r4,-16(fp)
10100b08:	01006780 	call	10100678 <write_line_line_blank_reg>
10100b0c:	e0fffb03 	ldbu	r3,-20(fp)
10100b10:	10803fcc 	andi	r2,r2,255
10100b14:	1884703a 	and	r2,r3,r2
10100b18:	1004c03a 	cmpne	r2,r2,zero
10100b1c:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100b20:	e1400417 	ldw	r5,16(fp)
10100b24:	e13ffc17 	ldw	r4,-16(fp)
10100b28:	01007440 	call	10100744 <write_line_frame_blank_reg>
10100b2c:	e0fffb03 	ldbu	r3,-20(fp)
10100b30:	10803fcc 	andi	r2,r2,255
10100b34:	1884703a 	and	r2,r3,r2
10100b38:	1004c03a 	cmpne	r2,r2,zero
10100b3c:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100b40:	e0bffb03 	ldbu	r2,-20(fp)
}
10100b44:	e037883a 	mov	sp,fp
10100b48:	dfc00117 	ldw	ra,4(sp)
10100b4c:	df000017 	ldw	fp,0(sp)
10100b50:	dec00204 	addi	sp,sp,8
10100b54:	f800283a 	ret

10100b58 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100b58:	defffe04 	addi	sp,sp,-8
10100b5c:	df000115 	stw	fp,4(sp)
10100b60:	df000104 	addi	fp,sp,4
10100b64:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100b68:	e0bfff17 	ldw	r2,-4(fp)
10100b6c:	10800017 	ldw	r2,0(r2)
10100b70:	10800604 	addi	r2,r2,24
10100b74:	00c00044 	movi	r3,1
10100b78:	10c00035 	stwio	r3,0(r2)
}
10100b7c:	0001883a 	nop
10100b80:	e037883a 	mov	sp,fp
10100b84:	df000017 	ldw	fp,0(sp)
10100b88:	dec00104 	addi	sp,sp,4
10100b8c:	f800283a 	ret

10100b90 <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b90:	defffe04 	addi	sp,sp,-8
10100b94:	df000115 	stw	fp,4(sp)
10100b98:	df000104 	addi	fp,sp,4
10100b9c:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100ba0:	e0bfff17 	ldw	r2,-4(fp)
10100ba4:	10800017 	ldw	r2,0(r2)
10100ba8:	10800604 	addi	r2,r2,24
10100bac:	0007883a 	mov	r3,zero
10100bb0:	10c00035 	stwio	r3,0(r2)
}
10100bb4:	0001883a 	nop
10100bb8:	e037883a 	mov	sp,fp
10100bbc:	df000017 	ldw	fp,0(sp)
10100bc0:	dec00104 	addi	sp,sp,4
10100bc4:	f800283a 	ret

10100bc8 <main>:
#define IREGENABLE 2
#define IREGBURST 3
#define IREGLIGHT 4
#define CAMERA_CTRL_BASE (0x10000840)

int main(void) {
10100bc8:	defff604 	addi	sp,sp,-40
10100bcc:	dfc00915 	stw	ra,36(sp)
10100bd0:	df000815 	stw	fp,32(sp)
10100bd4:	df000804 	addi	fp,sp,32

	start_cmos();
10100bd8:	01002900 	call	10100290 <start_cmos>

	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGADR * 4, 0);								// sets all the pins in mode Output
10100bdc:	0007883a 	mov	r3,zero
10100be0:	00840034 	movhi	r2,4096
10100be4:	10821004 	addi	r2,r2,2112
10100be8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGBURST * 4, 1);
10100bec:	00c00044 	movi	r3,1
10100bf0:	00840034 	movhi	r2,4096
10100bf4:	10821304 	addi	r2,r2,2124
10100bf8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLENGTH * 4, 2);										// sets the polarity to 1
10100bfc:	00c00084 	movi	r3,2
10100c00:	00840034 	movhi	r2,4096
10100c04:	10821104 	addi	r2,r2,2116
10100c08:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLIGHT * 4, 0);		// sets the duty cycle of the PWM
10100c0c:	0007883a 	mov	r3,zero
10100c10:	00840034 	movhi	r2,4096
10100c14:	10821404 	addi	r2,r2,2128
10100c18:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);					// sets the period of the PWM
10100c1c:	00c00044 	movi	r3,1
10100c20:	00840034 	movhi	r2,4096
10100c24:	10821204 	addi	r2,r2,2120
10100c28:	10c00035 	stwio	r3,0(r2)

	volatile unsigned int read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
10100c2c:	00840034 	movhi	r2,4096
10100c30:	10821204 	addi	r2,r2,2120
10100c34:	10800037 	ldwio	r2,0(r2)
10100c38:	e0bff815 	stw	r2,-32(fp)
	volatile unsigned int k = 0;
10100c3c:	e03ff915 	stw	zero,-28(fp)
	volatile unsigned int fval = IORD_32DIRECT(CAMERA_CTRL_BASE, 4 * 4);		//FVAL
10100c40:	00840034 	movhi	r2,4096
10100c44:	10821404 	addi	r2,r2,2128
10100c48:	10800037 	ldwio	r2,0(r2)
10100c4c:	e0bffa15 	stw	r2,-24(fp)
	volatile unsigned int lval = IORD_32DIRECT(CAMERA_CTRL_BASE, 5 * 4);		//LVAL
10100c50:	00840034 	movhi	r2,4096
10100c54:	10821504 	addi	r2,r2,2132
10100c58:	10800037 	ldwio	r2,0(r2)
10100c5c:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int dma = IORD_32DIRECT(CAMERA_CTRL_BASE, 6 * 4);		//DMA
10100c60:	00840034 	movhi	r2,4096
10100c64:	10821604 	addi	r2,r2,2136
10100c68:	10800037 	ldwio	r2,0(r2)
10100c6c:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int row = IORD_32DIRECT(CAMERA_CTRL_BASE, 0 * 4);		//row
10100c70:	00840034 	movhi	r2,4096
10100c74:	10821004 	addi	r2,r2,2112
10100c78:	10800037 	ldwio	r2,0(r2)
10100c7c:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int inter = IORD_32DIRECT(CAMERA_CTRL_BASE, 7 * 4);		//Inter
10100c80:	00840034 	movhi	r2,4096
10100c84:	10821704 	addi	r2,r2,2140
10100c88:	10800037 	ldwio	r2,0(r2)
10100c8c:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int send = IORD_32DIRECT(CAMERA_CTRL_BASE, 1 * 4);		//send
10100c90:	00840034 	movhi	r2,4096
10100c94:	10821104 	addi	r2,r2,2116
10100c98:	10800037 	ldwio	r2,0(r2)
10100c9c:	e0bfff15 	stw	r2,-4(fp)

	while(read_enable == 1){
10100ca0:	00002106 	br	10100d28 <main+0x160>
		read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
10100ca4:	00840034 	movhi	r2,4096
10100ca8:	10821204 	addi	r2,r2,2120
10100cac:	10800037 	ldwio	r2,0(r2)
10100cb0:	e0bff815 	stw	r2,-32(fp)
		fval = IORD_32DIRECT(CAMERA_CTRL_BASE, 4 * 4);		//FVAL
10100cb4:	00840034 	movhi	r2,4096
10100cb8:	10821404 	addi	r2,r2,2128
10100cbc:	10800037 	ldwio	r2,0(r2)
10100cc0:	e0bffa15 	stw	r2,-24(fp)
		lval = IORD_32DIRECT(CAMERA_CTRL_BASE, 5 * 4);		//LVAL
10100cc4:	00840034 	movhi	r2,4096
10100cc8:	10821504 	addi	r2,r2,2132
10100ccc:	10800037 	ldwio	r2,0(r2)
10100cd0:	e0bffb15 	stw	r2,-20(fp)
		dma = IORD_32DIRECT(CAMERA_CTRL_BASE, 6 * 4);		//DMA
10100cd4:	00840034 	movhi	r2,4096
10100cd8:	10821604 	addi	r2,r2,2136
10100cdc:	10800037 	ldwio	r2,0(r2)
10100ce0:	e0bffc15 	stw	r2,-16(fp)
		row = IORD_32DIRECT(CAMERA_CTRL_BASE, 0 * 4);		//row
10100ce4:	00840034 	movhi	r2,4096
10100ce8:	10821004 	addi	r2,r2,2112
10100cec:	10800037 	ldwio	r2,0(r2)
10100cf0:	e0bffd15 	stw	r2,-12(fp)
		inter = IORD_32DIRECT(CAMERA_CTRL_BASE, 7 * 4);		//Inter
10100cf4:	00840034 	movhi	r2,4096
10100cf8:	10821704 	addi	r2,r2,2140
10100cfc:	10800037 	ldwio	r2,0(r2)
10100d00:	e0bffe15 	stw	r2,-8(fp)
		send = IORD_32DIRECT(CAMERA_CTRL_BASE, 1 * 4);		//send
10100d04:	00840034 	movhi	r2,4096
10100d08:	10821104 	addi	r2,r2,2116
10100d0c:	10800037 	ldwio	r2,0(r2)
10100d10:	e0bfff15 	stw	r2,-4(fp)
		if (fval == 0){
10100d14:	e0bffa17 	ldw	r2,-24(fp)
10100d18:	1000031e 	bne	r2,zero,10100d28 <main+0x160>
			k++;
10100d1c:	e0bff917 	ldw	r2,-28(fp)
10100d20:	10800044 	addi	r2,r2,1
10100d24:	e0bff915 	stw	r2,-28(fp)
	volatile unsigned int dma = IORD_32DIRECT(CAMERA_CTRL_BASE, 6 * 4);		//DMA
	volatile unsigned int row = IORD_32DIRECT(CAMERA_CTRL_BASE, 0 * 4);		//row
	volatile unsigned int inter = IORD_32DIRECT(CAMERA_CTRL_BASE, 7 * 4);		//Inter
	volatile unsigned int send = IORD_32DIRECT(CAMERA_CTRL_BASE, 1 * 4);		//send

	while(read_enable == 1){
10100d28:	e0bff817 	ldw	r2,-32(fp)
10100d2c:	10800060 	cmpeqi	r2,r2,1
10100d30:	103fdc1e 	bne	r2,zero,10100ca4 <__alt_data_end+0xfffe0ca4>
		if (fval == 0){
			k++;
		}
	}

	read_memory();
10100d34:	0100d500 	call	10100d50 <read_memory>

    return 0;
10100d38:	0005883a 	mov	r2,zero
}
10100d3c:	e037883a 	mov	sp,fp
10100d40:	dfc00117 	ldw	ra,4(sp)
10100d44:	df000017 	ldw	fp,0(sp)
10100d48:	dec00204 	addi	sp,sp,8
10100d4c:	f800283a 	ret

10100d50 <read_memory>:
#include "io.h"
#include "system.h"

#include "memory_access.h"

int read_memory(void) {
10100d50:	defff804 	addi	sp,sp,-32
10100d54:	dfc00715 	stw	ra,28(sp)
10100d58:	df000615 	stw	fp,24(sp)
10100d5c:	df000604 	addi	fp,sp,24
    uint32_t megabyte_count = 0;
10100d60:	e03ffb15 	stw	zero,-20(fp)

    char* filename = "/mnt/host/image.ppm";
10100d64:	00840474 	movhi	r2,4113
10100d68:	1082bb04 	addi	r2,r2,2796
10100d6c:	e0bffc15 	stw	r2,-16(fp)

    FILE *foutput = fopen(filename, "w");
10100d70:	01440474 	movhi	r5,4113
10100d74:	2942c004 	addi	r5,r5,2816
10100d78:	e13ffc17 	ldw	r4,-16(fp)
10100d7c:	0100f100 	call	10100f10 <fopen>
10100d80:	e0bffd15 	stw	r2,-12(fp)
    if (!foutput) {
10100d84:	e0bffd17 	ldw	r2,-12(fp)
10100d88:	1000061e 	bne	r2,zero,10100da4 <read_memory+0x54>
     printf("Error: could not open \"%s\" for writing\n", filename);
10100d8c:	e17ffc17 	ldw	r5,-16(fp)
10100d90:	01040474 	movhi	r4,4113
10100d94:	2102c104 	addi	r4,r4,2820
10100d98:	0101fd00 	call	10101fd0 <printf>
     return false;
10100d9c:	0005883a 	mov	r2,zero
10100da0:	00001906 	br	10100e08 <read_memory+0xb8>
    }

    printf("Begin writing file");
10100da4:	01040474 	movhi	r4,4113
10100da8:	2102cb04 	addi	r4,r4,2860
10100dac:	0101fd00 	call	10101fd0 <printf>

    for (uint32_t i = 0; i < 2 * 4; i += sizeof(uint32_t)) {
10100db0:	e03ffa15 	stw	zero,-24(fp)
10100db4:	00000d06 	br	10100dec <read_memory+0x9c>

        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10100db8:	e0bffa17 	ldw	r2,-24(fp)
10100dbc:	e0bffe15 	stw	r2,-8(fp)

        // Read through address span expander
        uint32_t readdata = IORD_32DIRECT(addr, 0);
10100dc0:	e0bffe17 	ldw	r2,-8(fp)
10100dc4:	10800037 	ldwio	r2,0(r2)
10100dc8:	e0bfff15 	stw	r2,-4(fp)

        /* Use fprintf function to write to file through file pointer */
        fprintf(foutput,"%" PRIu32 "\n", readdata);
10100dcc:	e1bfff17 	ldw	r6,-4(fp)
10100dd0:	01440474 	movhi	r5,4113
10100dd4:	2942d004 	addi	r5,r5,2880
10100dd8:	e13ffd17 	ldw	r4,-12(fp)
10100ddc:	0100f500 	call	10100f50 <fprintf>
     return false;
    }

    printf("Begin writing file");

    for (uint32_t i = 0; i < 2 * 4; i += sizeof(uint32_t)) {
10100de0:	e0bffa17 	ldw	r2,-24(fp)
10100de4:	10800104 	addi	r2,r2,4
10100de8:	e0bffa15 	stw	r2,-24(fp)
10100dec:	e0bffa17 	ldw	r2,-24(fp)
10100df0:	10800230 	cmpltui	r2,r2,8
10100df4:	103ff01e 	bne	r2,zero,10100db8 <__alt_data_end+0xfffe0db8>
        /* Use fprintf function to write to file through file pointer */
        fprintf(foutput,"%" PRIu32 "\n", readdata);

    }

    printf("End writing file");
10100df8:	01040474 	movhi	r4,4113
10100dfc:	2102d204 	addi	r4,r4,2888
10100e00:	0101fd00 	call	10101fd0 <printf>

    return EXIT_SUCCESS;
10100e04:	0005883a 	mov	r2,zero
}
10100e08:	e037883a 	mov	sp,fp
10100e0c:	dfc00117 	ldw	ra,4(sp)
10100e10:	df000017 	ldw	fp,0(sp)
10100e14:	dec00204 	addi	sp,sp,8
10100e18:	f800283a 	ret

10100e1c <_fopen_r>:
10100e1c:	defffa04 	addi	sp,sp,-24
10100e20:	3005883a 	mov	r2,r6
10100e24:	dcc00415 	stw	r19,16(sp)
10100e28:	d80d883a 	mov	r6,sp
10100e2c:	2827883a 	mov	r19,r5
10100e30:	100b883a 	mov	r5,r2
10100e34:	dc800315 	stw	r18,12(sp)
10100e38:	dfc00515 	stw	ra,20(sp)
10100e3c:	dc400215 	stw	r17,8(sp)
10100e40:	dc000115 	stw	r16,4(sp)
10100e44:	2025883a 	mov	r18,r4
10100e48:	01067340 	call	10106734 <__sflags>
10100e4c:	10002726 	beq	r2,zero,10100eec <_fopen_r+0xd0>
10100e50:	9009883a 	mov	r4,r18
10100e54:	1023883a 	mov	r17,r2
10100e58:	01065b40 	call	101065b4 <__sfp>
10100e5c:	1021883a 	mov	r16,r2
10100e60:	10002226 	beq	r2,zero,10100eec <_fopen_r+0xd0>
10100e64:	d9800017 	ldw	r6,0(sp)
10100e68:	01c06d84 	movi	r7,438
10100e6c:	980b883a 	mov	r5,r19
10100e70:	9009883a 	mov	r4,r18
10100e74:	0101f400 	call	10101f40 <_open_r>
10100e78:	10001916 	blt	r2,zero,10100ee0 <_fopen_r+0xc4>
10100e7c:	8080038d 	sth	r2,14(r16)
10100e80:	00840434 	movhi	r2,4112
10100e84:	10889404 	addi	r2,r2,8784
10100e88:	80800815 	stw	r2,32(r16)
10100e8c:	00840434 	movhi	r2,4112
10100e90:	1088ab04 	addi	r2,r2,8876
10100e94:	80800915 	stw	r2,36(r16)
10100e98:	00840434 	movhi	r2,4112
10100e9c:	1088ca04 	addi	r2,r2,9000
10100ea0:	80800a15 	stw	r2,40(r16)
10100ea4:	00840434 	movhi	r2,4112
10100ea8:	1088e104 	addi	r2,r2,9092
10100eac:	8440030d 	sth	r17,12(r16)
10100eb0:	84000715 	stw	r16,28(r16)
10100eb4:	80800b15 	stw	r2,44(r16)
10100eb8:	8c40400c 	andi	r17,r17,256
10100ebc:	88000d1e 	bne	r17,zero,10100ef4 <_fopen_r+0xd8>
10100ec0:	8005883a 	mov	r2,r16
10100ec4:	dfc00517 	ldw	ra,20(sp)
10100ec8:	dcc00417 	ldw	r19,16(sp)
10100ecc:	dc800317 	ldw	r18,12(sp)
10100ed0:	dc400217 	ldw	r17,8(sp)
10100ed4:	dc000117 	ldw	r16,4(sp)
10100ed8:	dec00604 	addi	sp,sp,24
10100edc:	f800283a 	ret
10100ee0:	01066f40 	call	101066f4 <__sfp_lock_acquire>
10100ee4:	8000030d 	sth	zero,12(r16)
10100ee8:	01066f80 	call	101066f8 <__sfp_lock_release>
10100eec:	0005883a 	mov	r2,zero
10100ef0:	003ff406 	br	10100ec4 <__alt_data_end+0xfffe0ec4>
10100ef4:	01c00084 	movi	r7,2
10100ef8:	000d883a 	mov	r6,zero
10100efc:	800b883a 	mov	r5,r16
10100f00:	9009883a 	mov	r4,r18
10100f04:	0100f740 	call	10100f74 <_fseek_r>
10100f08:	8005883a 	mov	r2,r16
10100f0c:	003fed06 	br	10100ec4 <__alt_data_end+0xfffe0ec4>

10100f10 <fopen>:
10100f10:	00840474 	movhi	r2,4113
10100f14:	108a4f04 	addi	r2,r2,10556
10100f18:	280d883a 	mov	r6,r5
10100f1c:	200b883a 	mov	r5,r4
10100f20:	11000017 	ldw	r4,0(r2)
10100f24:	0100e1c1 	jmpi	10100e1c <_fopen_r>

10100f28 <_fprintf_r>:
10100f28:	defffe04 	addi	sp,sp,-8
10100f2c:	2809883a 	mov	r4,r5
10100f30:	300b883a 	mov	r5,r6
10100f34:	dfc00015 	stw	ra,0(sp)
10100f38:	d9c00115 	stw	r7,4(sp)
10100f3c:	d9800104 	addi	r6,sp,4
10100f40:	01045840 	call	10104584 <__vfprintf_internal>
10100f44:	dfc00017 	ldw	ra,0(sp)
10100f48:	dec00204 	addi	sp,sp,8
10100f4c:	f800283a 	ret

10100f50 <fprintf>:
10100f50:	defffd04 	addi	sp,sp,-12
10100f54:	dfc00015 	stw	ra,0(sp)
10100f58:	d9800115 	stw	r6,4(sp)
10100f5c:	d9c00215 	stw	r7,8(sp)
10100f60:	d9800104 	addi	r6,sp,4
10100f64:	01045840 	call	10104584 <__vfprintf_internal>
10100f68:	dfc00017 	ldw	ra,0(sp)
10100f6c:	dec00304 	addi	sp,sp,12
10100f70:	f800283a 	ret

10100f74 <_fseek_r>:
10100f74:	0100f941 	jmpi	10100f94 <_fseeko_r>

10100f78 <fseek>:
10100f78:	00840474 	movhi	r2,4113
10100f7c:	108a4f04 	addi	r2,r2,10556
10100f80:	300f883a 	mov	r7,r6
10100f84:	280d883a 	mov	r6,r5
10100f88:	200b883a 	mov	r5,r4
10100f8c:	11000017 	ldw	r4,0(r2)
10100f90:	0100f941 	jmpi	10100f94 <_fseeko_r>

10100f94 <_fseeko_r>:
10100f94:	deffe804 	addi	sp,sp,-96
10100f98:	dd401415 	stw	r21,80(sp)
10100f9c:	dc801115 	stw	r18,68(sp)
10100fa0:	dc401015 	stw	r17,64(sp)
10100fa4:	dc000f15 	stw	r16,60(sp)
10100fa8:	dfc01715 	stw	ra,92(sp)
10100fac:	ddc01615 	stw	r23,88(sp)
10100fb0:	dd801515 	stw	r22,84(sp)
10100fb4:	dd001315 	stw	r20,76(sp)
10100fb8:	dcc01215 	stw	r19,72(sp)
10100fbc:	2023883a 	mov	r17,r4
10100fc0:	2821883a 	mov	r16,r5
10100fc4:	302b883a 	mov	r21,r6
10100fc8:	3825883a 	mov	r18,r7
10100fcc:	20000226 	beq	r4,zero,10100fd8 <_fseeko_r+0x44>
10100fd0:	20800e17 	ldw	r2,56(r4)
10100fd4:	10005a26 	beq	r2,zero,10101140 <_fseeko_r+0x1ac>
10100fd8:	8080030b 	ldhu	r2,12(r16)
10100fdc:	00c04204 	movi	r3,264
10100fe0:	1080420c 	andi	r2,r2,264
10100fe4:	10c05b26 	beq	r2,r3,10101154 <_fseeko_r+0x1c0>
10100fe8:	85000a17 	ldw	r20,40(r16)
10100fec:	a000f626 	beq	r20,zero,101013c8 <_fseeko_r+0x434>
10100ff0:	00800044 	movi	r2,1
10100ff4:	90803e26 	beq	r18,r2,101010f0 <_fseeko_r+0x15c>
10100ff8:	00800084 	movi	r2,2
10100ffc:	90801026 	beq	r18,r2,10101040 <_fseeko_r+0xac>
10101000:	90000f26 	beq	r18,zero,10101040 <_fseeko_r+0xac>
10101004:	00800584 	movi	r2,22
10101008:	88800015 	stw	r2,0(r17)
1010100c:	04ffffc4 	movi	r19,-1
10101010:	9805883a 	mov	r2,r19
10101014:	dfc01717 	ldw	ra,92(sp)
10101018:	ddc01617 	ldw	r23,88(sp)
1010101c:	dd801517 	ldw	r22,84(sp)
10101020:	dd401417 	ldw	r21,80(sp)
10101024:	dd001317 	ldw	r20,76(sp)
10101028:	dcc01217 	ldw	r19,72(sp)
1010102c:	dc801117 	ldw	r18,68(sp)
10101030:	dc401017 	ldw	r17,64(sp)
10101034:	dc000f17 	ldw	r16,60(sp)
10101038:	dec01804 	addi	sp,sp,96
1010103c:	f800283a 	ret
10101040:	80800417 	ldw	r2,16(r16)
10101044:	002f883a 	mov	r23,zero
10101048:	0027883a 	mov	r19,zero
1010104c:	1000cb26 	beq	r2,zero,1010137c <_fseeko_r+0x3e8>
10101050:	8080030b 	ldhu	r2,12(r16)
10101054:	10c2068c 	andi	r3,r2,2074
10101058:	1800071e 	bne	r3,zero,10101078 <_fseeko_r+0xe4>
1010105c:	10c1000c 	andi	r3,r2,1024
10101060:	1800451e 	bne	r3,zero,10101178 <_fseeko_r+0x1e4>
10101064:	00c40434 	movhi	r3,4112
10101068:	18c8ca04 	addi	r3,r3,9000
1010106c:	a0c0b726 	beq	r20,r3,1010134c <_fseeko_r+0x3b8>
10101070:	10820014 	ori	r2,r2,2048
10101074:	8080030d 	sth	r2,12(r16)
10101078:	800b883a 	mov	r5,r16
1010107c:	8809883a 	mov	r4,r17
10101080:	01063080 	call	10106308 <_fflush_r>
10101084:	1027883a 	mov	r19,r2
10101088:	103fe01e 	bne	r2,zero,1010100c <__alt_data_end+0xfffe100c>
1010108c:	81400717 	ldw	r5,28(r16)
10101090:	900f883a 	mov	r7,r18
10101094:	a80d883a 	mov	r6,r21
10101098:	8809883a 	mov	r4,r17
1010109c:	a03ee83a 	callr	r20
101010a0:	00ffffc4 	movi	r3,-1
101010a4:	10ffd926 	beq	r2,r3,1010100c <__alt_data_end+0xfffe100c>
101010a8:	81400c17 	ldw	r5,48(r16)
101010ac:	28000526 	beq	r5,zero,101010c4 <_fseeko_r+0x130>
101010b0:	80801004 	addi	r2,r16,64
101010b4:	28800226 	beq	r5,r2,101010c0 <_fseeko_r+0x12c>
101010b8:	8809883a 	mov	r4,r17
101010bc:	01069040 	call	10106904 <_free_r>
101010c0:	80000c15 	stw	zero,48(r16)
101010c4:	8080030b 	ldhu	r2,12(r16)
101010c8:	80c00417 	ldw	r3,16(r16)
101010cc:	80000115 	stw	zero,4(r16)
101010d0:	10bdf7cc 	andi	r2,r2,63455
101010d4:	80c00015 	stw	r3,0(r16)
101010d8:	8080030d 	sth	r2,12(r16)
101010dc:	01800204 	movi	r6,8
101010e0:	000b883a 	mov	r5,zero
101010e4:	81001704 	addi	r4,r16,92
101010e8:	0101e180 	call	10101e18 <memset>
101010ec:	003fc806 	br	10101010 <__alt_data_end+0xfffe1010>
101010f0:	800b883a 	mov	r5,r16
101010f4:	8809883a 	mov	r4,r17
101010f8:	01063080 	call	10106308 <_fflush_r>
101010fc:	8080030b 	ldhu	r2,12(r16)
10101100:	10c4000c 	andi	r3,r2,4096
10101104:	18008726 	beq	r3,zero,10101324 <_fseeko_r+0x390>
10101108:	84c01417 	ldw	r19,80(r16)
1010110c:	10c0010c 	andi	r3,r2,4
10101110:	1800431e 	bne	r3,zero,10101220 <_fseeko_r+0x28c>
10101114:	1080020c 	andi	r2,r2,8
10101118:	10008026 	beq	r2,zero,1010131c <_fseeko_r+0x388>
1010111c:	80c00017 	ldw	r3,0(r16)
10101120:	80800417 	ldw	r2,16(r16)
10101124:	18000226 	beq	r3,zero,10101130 <_fseeko_r+0x19c>
10101128:	1887c83a 	sub	r3,r3,r2
1010112c:	98e7883a 	add	r19,r19,r3
10101130:	aceb883a 	add	r21,r21,r19
10101134:	05c00044 	movi	r23,1
10101138:	0025883a 	mov	r18,zero
1010113c:	003fc306 	br	1010104c <__alt_data_end+0xfffe104c>
10101140:	01066e40 	call	101066e4 <__sinit>
10101144:	8080030b 	ldhu	r2,12(r16)
10101148:	00c04204 	movi	r3,264
1010114c:	1080420c 	andi	r2,r2,264
10101150:	10ffa51e 	bne	r2,r3,10100fe8 <__alt_data_end+0xfffe0fe8>
10101154:	800b883a 	mov	r5,r16
10101158:	8809883a 	mov	r4,r17
1010115c:	01063080 	call	10106308 <_fflush_r>
10101160:	003fa106 	br	10100fe8 <__alt_data_end+0xfffe0fe8>
10101164:	8080030b 	ldhu	r2,12(r16)
10101168:	00c10004 	movi	r3,1024
1010116c:	80c01315 	stw	r3,76(r16)
10101170:	10c4b03a 	or	r2,r2,r3
10101174:	8080030d 	sth	r2,12(r16)
10101178:	9000311e 	bne	r18,zero,10101240 <_fseeko_r+0x2ac>
1010117c:	a82d883a 	mov	r22,r21
10101180:	b800371e 	bne	r23,zero,10101260 <_fseeko_r+0x2cc>
10101184:	8080030b 	ldhu	r2,12(r16)
10101188:	1084000c 	andi	r2,r2,4096
1010118c:	10007f26 	beq	r2,zero,1010138c <_fseeko_r+0x3f8>
10101190:	80801417 	ldw	r2,80(r16)
10101194:	81800117 	ldw	r6,4(r16)
10101198:	81400c17 	ldw	r5,48(r16)
1010119c:	11a7c83a 	sub	r19,r2,r6
101011a0:	28008226 	beq	r5,zero,101013ac <_fseeko_r+0x418>
101011a4:	81c00f17 	ldw	r7,60(r16)
101011a8:	99e7c83a 	sub	r19,r19,r7
101011ac:	81000e17 	ldw	r4,56(r16)
101011b0:	80800417 	ldw	r2,16(r16)
101011b4:	99a7883a 	add	r19,r19,r6
101011b8:	2087c83a 	sub	r3,r4,r2
101011bc:	98e7c83a 	sub	r19,r19,r3
101011c0:	38c7883a 	add	r3,r7,r3
101011c4:	b4c02b16 	blt	r22,r19,10101274 <_fseeko_r+0x2e0>
101011c8:	98c9883a 	add	r4,r19,r3
101011cc:	b100292e 	bgeu	r22,r4,10101274 <_fseeko_r+0x2e0>
101011d0:	b4e7c83a 	sub	r19,r22,r19
101011d4:	14c5883a 	add	r2,r2,r19
101011d8:	1ce7c83a 	sub	r19,r3,r19
101011dc:	80800015 	stw	r2,0(r16)
101011e0:	84c00115 	stw	r19,4(r16)
101011e4:	28000526 	beq	r5,zero,101011fc <_fseeko_r+0x268>
101011e8:	80801004 	addi	r2,r16,64
101011ec:	28800226 	beq	r5,r2,101011f8 <_fseeko_r+0x264>
101011f0:	8809883a 	mov	r4,r17
101011f4:	01069040 	call	10106904 <_free_r>
101011f8:	80000c15 	stw	zero,48(r16)
101011fc:	8080030b 	ldhu	r2,12(r16)
10101200:	01800204 	movi	r6,8
10101204:	000b883a 	mov	r5,zero
10101208:	10bff7cc 	andi	r2,r2,65503
1010120c:	8080030d 	sth	r2,12(r16)
10101210:	81001704 	addi	r4,r16,92
10101214:	0101e180 	call	10101e18 <memset>
10101218:	0027883a 	mov	r19,zero
1010121c:	003f7c06 	br	10101010 <__alt_data_end+0xfffe1010>
10101220:	80c00117 	ldw	r3,4(r16)
10101224:	80800c17 	ldw	r2,48(r16)
10101228:	98e7c83a 	sub	r19,r19,r3
1010122c:	10003b26 	beq	r2,zero,1010131c <_fseeko_r+0x388>
10101230:	80c00f17 	ldw	r3,60(r16)
10101234:	80800417 	ldw	r2,16(r16)
10101238:	98e7c83a 	sub	r19,r19,r3
1010123c:	003fbc06 	br	10101130 <__alt_data_end+0xfffe1130>
10101240:	8140038f 	ldh	r5,14(r16)
10101244:	d80d883a 	mov	r6,sp
10101248:	8809883a 	mov	r4,r17
1010124c:	01013f40 	call	101013f4 <_fstat_r>
10101250:	103f891e 	bne	r2,zero,10101078 <__alt_data_end+0xfffe1078>
10101254:	dd800417 	ldw	r22,16(sp)
10101258:	adad883a 	add	r22,r21,r22
1010125c:	b83fc926 	beq	r23,zero,10101184 <__alt_data_end+0xfffe1184>
10101260:	81400c17 	ldw	r5,48(r16)
10101264:	81800117 	ldw	r6,4(r16)
10101268:	28005026 	beq	r5,zero,101013ac <_fseeko_r+0x418>
1010126c:	81c00f17 	ldw	r7,60(r16)
10101270:	003fce06 	br	101011ac <__alt_data_end+0xfffe11ac>
10101274:	84c01317 	ldw	r19,76(r16)
10101278:	81400717 	ldw	r5,28(r16)
1010127c:	000f883a 	mov	r7,zero
10101280:	04e7c83a 	sub	r19,zero,r19
10101284:	9da6703a 	and	r19,r19,r22
10101288:	980d883a 	mov	r6,r19
1010128c:	8809883a 	mov	r4,r17
10101290:	a03ee83a 	callr	r20
10101294:	00ffffc4 	movi	r3,-1
10101298:	10ff7726 	beq	r2,r3,10101078 <__alt_data_end+0xfffe1078>
1010129c:	80800417 	ldw	r2,16(r16)
101012a0:	81400c17 	ldw	r5,48(r16)
101012a4:	80000115 	stw	zero,4(r16)
101012a8:	80800015 	stw	r2,0(r16)
101012ac:	28000526 	beq	r5,zero,101012c4 <_fseeko_r+0x330>
101012b0:	80801004 	addi	r2,r16,64
101012b4:	28800226 	beq	r5,r2,101012c0 <_fseeko_r+0x32c>
101012b8:	8809883a 	mov	r4,r17
101012bc:	01069040 	call	10106904 <_free_r>
101012c0:	80000c15 	stw	zero,48(r16)
101012c4:	8080030b 	ldhu	r2,12(r16)
101012c8:	b4e7c83a 	sub	r19,r22,r19
101012cc:	10bff7cc 	andi	r2,r2,65503
101012d0:	8080030d 	sth	r2,12(r16)
101012d4:	98000b26 	beq	r19,zero,10101304 <_fseeko_r+0x370>
101012d8:	800b883a 	mov	r5,r16
101012dc:	8809883a 	mov	r4,r17
101012e0:	01020280 	call	10102028 <__srefill_r>
101012e4:	103f641e 	bne	r2,zero,10101078 <__alt_data_end+0xfffe1078>
101012e8:	80800117 	ldw	r2,4(r16)
101012ec:	14ff6236 	bltu	r2,r19,10101078 <__alt_data_end+0xfffe1078>
101012f0:	80c00017 	ldw	r3,0(r16)
101012f4:	14c5c83a 	sub	r2,r2,r19
101012f8:	80800115 	stw	r2,4(r16)
101012fc:	1ce7883a 	add	r19,r3,r19
10101300:	84c00015 	stw	r19,0(r16)
10101304:	01800204 	movi	r6,8
10101308:	000b883a 	mov	r5,zero
1010130c:	81001704 	addi	r4,r16,92
10101310:	0101e180 	call	10101e18 <memset>
10101314:	0027883a 	mov	r19,zero
10101318:	003f3d06 	br	10101010 <__alt_data_end+0xfffe1010>
1010131c:	80800417 	ldw	r2,16(r16)
10101320:	003f8306 	br	10101130 <__alt_data_end+0xfffe1130>
10101324:	81400717 	ldw	r5,28(r16)
10101328:	900f883a 	mov	r7,r18
1010132c:	000d883a 	mov	r6,zero
10101330:	8809883a 	mov	r4,r17
10101334:	a03ee83a 	callr	r20
10101338:	1027883a 	mov	r19,r2
1010133c:	00bfffc4 	movi	r2,-1
10101340:	98bf3226 	beq	r19,r2,1010100c <__alt_data_end+0xfffe100c>
10101344:	8080030b 	ldhu	r2,12(r16)
10101348:	003f7006 	br	1010110c <__alt_data_end+0xfffe110c>
1010134c:	8140038f 	ldh	r5,14(r16)
10101350:	283f4716 	blt	r5,zero,10101070 <__alt_data_end+0xfffe1070>
10101354:	d80d883a 	mov	r6,sp
10101358:	8809883a 	mov	r4,r17
1010135c:	01013f40 	call	101013f4 <_fstat_r>
10101360:	1000041e 	bne	r2,zero,10101374 <_fseeko_r+0x3e0>
10101364:	d8800117 	ldw	r2,4(sp)
10101368:	00e00014 	movui	r3,32768
1010136c:	10bc000c 	andi	r2,r2,61440
10101370:	10ff7c26 	beq	r2,r3,10101164 <__alt_data_end+0xfffe1164>
10101374:	8080030b 	ldhu	r2,12(r16)
10101378:	003f3d06 	br	10101070 <__alt_data_end+0xfffe1070>
1010137c:	800b883a 	mov	r5,r16
10101380:	8809883a 	mov	r4,r17
10101384:	01014500 	call	10101450 <__smakebuf_r>
10101388:	003f3106 	br	10101050 <__alt_data_end+0xfffe1050>
1010138c:	81400717 	ldw	r5,28(r16)
10101390:	01c00044 	movi	r7,1
10101394:	000d883a 	mov	r6,zero
10101398:	8809883a 	mov	r4,r17
1010139c:	a03ee83a 	callr	r20
101013a0:	00ffffc4 	movi	r3,-1
101013a4:	10ff7b1e 	bne	r2,r3,10101194 <__alt_data_end+0xfffe1194>
101013a8:	003f3306 	br	10101078 <__alt_data_end+0xfffe1078>
101013ac:	80c00017 	ldw	r3,0(r16)
101013b0:	80800417 	ldw	r2,16(r16)
101013b4:	000b883a 	mov	r5,zero
101013b8:	1887c83a 	sub	r3,r3,r2
101013bc:	98e7c83a 	sub	r19,r19,r3
101013c0:	30c7883a 	add	r3,r6,r3
101013c4:	003f7f06 	br	101011c4 <__alt_data_end+0xfffe11c4>
101013c8:	00800744 	movi	r2,29
101013cc:	88800015 	stw	r2,0(r17)
101013d0:	04ffffc4 	movi	r19,-1
101013d4:	003f0e06 	br	10101010 <__alt_data_end+0xfffe1010>

101013d8 <fseeko>:
101013d8:	00840474 	movhi	r2,4113
101013dc:	108a4f04 	addi	r2,r2,10556
101013e0:	300f883a 	mov	r7,r6
101013e4:	280d883a 	mov	r6,r5
101013e8:	200b883a 	mov	r5,r4
101013ec:	11000017 	ldw	r4,0(r2)
101013f0:	0100f941 	jmpi	10100f94 <_fseeko_r>

101013f4 <_fstat_r>:
101013f4:	defffd04 	addi	sp,sp,-12
101013f8:	2805883a 	mov	r2,r5
101013fc:	dc000015 	stw	r16,0(sp)
10101400:	04040474 	movhi	r16,4113
10101404:	dc400115 	stw	r17,4(sp)
10101408:	84114704 	addi	r16,r16,17692
1010140c:	2023883a 	mov	r17,r4
10101410:	300b883a 	mov	r5,r6
10101414:	1009883a 	mov	r4,r2
10101418:	dfc00215 	stw	ra,8(sp)
1010141c:	80000015 	stw	zero,0(r16)
10101420:	010e0b00 	call	1010e0b0 <fstat>
10101424:	00ffffc4 	movi	r3,-1
10101428:	10c00526 	beq	r2,r3,10101440 <_fstat_r+0x4c>
1010142c:	dfc00217 	ldw	ra,8(sp)
10101430:	dc400117 	ldw	r17,4(sp)
10101434:	dc000017 	ldw	r16,0(sp)
10101438:	dec00304 	addi	sp,sp,12
1010143c:	f800283a 	ret
10101440:	80c00017 	ldw	r3,0(r16)
10101444:	183ff926 	beq	r3,zero,1010142c <__alt_data_end+0xfffe142c>
10101448:	88c00015 	stw	r3,0(r17)
1010144c:	003ff706 	br	1010142c <__alt_data_end+0xfffe142c>

10101450 <__smakebuf_r>:
10101450:	2880030b 	ldhu	r2,12(r5)
10101454:	10c0008c 	andi	r3,r2,2
10101458:	1800411e 	bne	r3,zero,10101560 <__smakebuf_r+0x110>
1010145c:	deffec04 	addi	sp,sp,-80
10101460:	dc000f15 	stw	r16,60(sp)
10101464:	2821883a 	mov	r16,r5
10101468:	2940038f 	ldh	r5,14(r5)
1010146c:	dc401015 	stw	r17,64(sp)
10101470:	dfc01315 	stw	ra,76(sp)
10101474:	dcc01215 	stw	r19,72(sp)
10101478:	dc801115 	stw	r18,68(sp)
1010147c:	2023883a 	mov	r17,r4
10101480:	28001c16 	blt	r5,zero,101014f4 <__smakebuf_r+0xa4>
10101484:	d80d883a 	mov	r6,sp
10101488:	01013f40 	call	101013f4 <_fstat_r>
1010148c:	10001816 	blt	r2,zero,101014f0 <__smakebuf_r+0xa0>
10101490:	d8800117 	ldw	r2,4(sp)
10101494:	00e00014 	movui	r3,32768
10101498:	10bc000c 	andi	r2,r2,61440
1010149c:	14c80020 	cmpeqi	r19,r2,8192
101014a0:	10c03726 	beq	r2,r3,10101580 <__smakebuf_r+0x130>
101014a4:	80c0030b 	ldhu	r3,12(r16)
101014a8:	18c20014 	ori	r3,r3,2048
101014ac:	80c0030d 	sth	r3,12(r16)
101014b0:	00c80004 	movi	r3,8192
101014b4:	10c0521e 	bne	r2,r3,10101600 <__smakebuf_r+0x1b0>
101014b8:	8140038f 	ldh	r5,14(r16)
101014bc:	8809883a 	mov	r4,r17
101014c0:	0106d9c0 	call	10106d9c <_isatty_r>
101014c4:	10004c26 	beq	r2,zero,101015f8 <__smakebuf_r+0x1a8>
101014c8:	8080030b 	ldhu	r2,12(r16)
101014cc:	80c010c4 	addi	r3,r16,67
101014d0:	80c00015 	stw	r3,0(r16)
101014d4:	10800054 	ori	r2,r2,1
101014d8:	8080030d 	sth	r2,12(r16)
101014dc:	00800044 	movi	r2,1
101014e0:	80c00415 	stw	r3,16(r16)
101014e4:	80800515 	stw	r2,20(r16)
101014e8:	04810004 	movi	r18,1024
101014ec:	00000706 	br	1010150c <__smakebuf_r+0xbc>
101014f0:	8080030b 	ldhu	r2,12(r16)
101014f4:	10c0200c 	andi	r3,r2,128
101014f8:	18001f1e 	bne	r3,zero,10101578 <__smakebuf_r+0x128>
101014fc:	04810004 	movi	r18,1024
10101500:	10820014 	ori	r2,r2,2048
10101504:	8080030d 	sth	r2,12(r16)
10101508:	0027883a 	mov	r19,zero
1010150c:	900b883a 	mov	r5,r18
10101510:	8809883a 	mov	r4,r17
10101514:	010160c0 	call	1010160c <_malloc_r>
10101518:	10002c26 	beq	r2,zero,101015cc <__smakebuf_r+0x17c>
1010151c:	80c0030b 	ldhu	r3,12(r16)
10101520:	01040434 	movhi	r4,4112
10101524:	2118e704 	addi	r4,r4,25500
10101528:	89000f15 	stw	r4,60(r17)
1010152c:	18c02014 	ori	r3,r3,128
10101530:	80c0030d 	sth	r3,12(r16)
10101534:	80800015 	stw	r2,0(r16)
10101538:	80800415 	stw	r2,16(r16)
1010153c:	84800515 	stw	r18,20(r16)
10101540:	98001a1e 	bne	r19,zero,101015ac <__smakebuf_r+0x15c>
10101544:	dfc01317 	ldw	ra,76(sp)
10101548:	dcc01217 	ldw	r19,72(sp)
1010154c:	dc801117 	ldw	r18,68(sp)
10101550:	dc401017 	ldw	r17,64(sp)
10101554:	dc000f17 	ldw	r16,60(sp)
10101558:	dec01404 	addi	sp,sp,80
1010155c:	f800283a 	ret
10101560:	288010c4 	addi	r2,r5,67
10101564:	28800015 	stw	r2,0(r5)
10101568:	28800415 	stw	r2,16(r5)
1010156c:	00800044 	movi	r2,1
10101570:	28800515 	stw	r2,20(r5)
10101574:	f800283a 	ret
10101578:	04801004 	movi	r18,64
1010157c:	003fe006 	br	10101500 <__alt_data_end+0xfffe1500>
10101580:	81000a17 	ldw	r4,40(r16)
10101584:	00c40434 	movhi	r3,4112
10101588:	18c8ca04 	addi	r3,r3,9000
1010158c:	20ffc51e 	bne	r4,r3,101014a4 <__alt_data_end+0xfffe14a4>
10101590:	8080030b 	ldhu	r2,12(r16)
10101594:	04810004 	movi	r18,1024
10101598:	84801315 	stw	r18,76(r16)
1010159c:	1484b03a 	or	r2,r2,r18
101015a0:	8080030d 	sth	r2,12(r16)
101015a4:	0027883a 	mov	r19,zero
101015a8:	003fd806 	br	1010150c <__alt_data_end+0xfffe150c>
101015ac:	8140038f 	ldh	r5,14(r16)
101015b0:	8809883a 	mov	r4,r17
101015b4:	0106d9c0 	call	10106d9c <_isatty_r>
101015b8:	103fe226 	beq	r2,zero,10101544 <__alt_data_end+0xfffe1544>
101015bc:	8080030b 	ldhu	r2,12(r16)
101015c0:	10800054 	ori	r2,r2,1
101015c4:	8080030d 	sth	r2,12(r16)
101015c8:	003fde06 	br	10101544 <__alt_data_end+0xfffe1544>
101015cc:	8080030b 	ldhu	r2,12(r16)
101015d0:	10c0800c 	andi	r3,r2,512
101015d4:	183fdb1e 	bne	r3,zero,10101544 <__alt_data_end+0xfffe1544>
101015d8:	10800094 	ori	r2,r2,2
101015dc:	80c010c4 	addi	r3,r16,67
101015e0:	8080030d 	sth	r2,12(r16)
101015e4:	00800044 	movi	r2,1
101015e8:	80c00015 	stw	r3,0(r16)
101015ec:	80c00415 	stw	r3,16(r16)
101015f0:	80800515 	stw	r2,20(r16)
101015f4:	003fd306 	br	10101544 <__alt_data_end+0xfffe1544>
101015f8:	04810004 	movi	r18,1024
101015fc:	003fc306 	br	1010150c <__alt_data_end+0xfffe150c>
10101600:	0027883a 	mov	r19,zero
10101604:	04810004 	movi	r18,1024
10101608:	003fc006 	br	1010150c <__alt_data_end+0xfffe150c>

1010160c <_malloc_r>:
1010160c:	defff504 	addi	sp,sp,-44
10101610:	dc800315 	stw	r18,12(sp)
10101614:	dfc00a15 	stw	ra,40(sp)
10101618:	df000915 	stw	fp,36(sp)
1010161c:	ddc00815 	stw	r23,32(sp)
10101620:	dd800715 	stw	r22,28(sp)
10101624:	dd400615 	stw	r21,24(sp)
10101628:	dd000515 	stw	r20,20(sp)
1010162c:	dcc00415 	stw	r19,16(sp)
10101630:	dc400215 	stw	r17,8(sp)
10101634:	dc000115 	stw	r16,4(sp)
10101638:	288002c4 	addi	r2,r5,11
1010163c:	00c00584 	movi	r3,22
10101640:	2025883a 	mov	r18,r4
10101644:	18807f2e 	bgeu	r3,r2,10101844 <_malloc_r+0x238>
10101648:	047ffe04 	movi	r17,-8
1010164c:	1462703a 	and	r17,r2,r17
10101650:	8800a316 	blt	r17,zero,101018e0 <_malloc_r+0x2d4>
10101654:	8940a236 	bltu	r17,r5,101018e0 <_malloc_r+0x2d4>
10101658:	010e4b80 	call	1010e4b8 <__malloc_lock>
1010165c:	00807dc4 	movi	r2,503
10101660:	1441e92e 	bgeu	r2,r17,10101e08 <_malloc_r+0x7fc>
10101664:	8804d27a 	srli	r2,r17,9
10101668:	1000a126 	beq	r2,zero,101018f0 <_malloc_r+0x2e4>
1010166c:	00c00104 	movi	r3,4
10101670:	18811e36 	bltu	r3,r2,10101aec <_malloc_r+0x4e0>
10101674:	8804d1ba 	srli	r2,r17,6
10101678:	12000e44 	addi	r8,r2,57
1010167c:	11c00e04 	addi	r7,r2,56
10101680:	4209883a 	add	r4,r8,r8
10101684:	04c40474 	movhi	r19,4113
10101688:	2109883a 	add	r4,r4,r4
1010168c:	9cc4a204 	addi	r19,r19,4744
10101690:	2109883a 	add	r4,r4,r4
10101694:	9909883a 	add	r4,r19,r4
10101698:	24000117 	ldw	r16,4(r4)
1010169c:	213ffe04 	addi	r4,r4,-8
101016a0:	24009726 	beq	r4,r16,10101900 <_malloc_r+0x2f4>
101016a4:	80800117 	ldw	r2,4(r16)
101016a8:	01bfff04 	movi	r6,-4
101016ac:	014003c4 	movi	r5,15
101016b0:	1184703a 	and	r2,r2,r6
101016b4:	1447c83a 	sub	r3,r2,r17
101016b8:	28c00716 	blt	r5,r3,101016d8 <_malloc_r+0xcc>
101016bc:	1800920e 	bge	r3,zero,10101908 <_malloc_r+0x2fc>
101016c0:	84000317 	ldw	r16,12(r16)
101016c4:	24008e26 	beq	r4,r16,10101900 <_malloc_r+0x2f4>
101016c8:	80800117 	ldw	r2,4(r16)
101016cc:	1184703a 	and	r2,r2,r6
101016d0:	1447c83a 	sub	r3,r2,r17
101016d4:	28fff90e 	bge	r5,r3,101016bc <__alt_data_end+0xfffe16bc>
101016d8:	3809883a 	mov	r4,r7
101016dc:	01840474 	movhi	r6,4113
101016e0:	9c000417 	ldw	r16,16(r19)
101016e4:	3184a204 	addi	r6,r6,4744
101016e8:	32000204 	addi	r8,r6,8
101016ec:	82013426 	beq	r16,r8,10101bc0 <_malloc_r+0x5b4>
101016f0:	80c00117 	ldw	r3,4(r16)
101016f4:	00bfff04 	movi	r2,-4
101016f8:	188e703a 	and	r7,r3,r2
101016fc:	3c45c83a 	sub	r2,r7,r17
10101700:	00c003c4 	movi	r3,15
10101704:	18811f16 	blt	r3,r2,10101b84 <_malloc_r+0x578>
10101708:	32000515 	stw	r8,20(r6)
1010170c:	32000415 	stw	r8,16(r6)
10101710:	10007f0e 	bge	r2,zero,10101910 <_malloc_r+0x304>
10101714:	00807fc4 	movi	r2,511
10101718:	11c0fd36 	bltu	r2,r7,10101b10 <_malloc_r+0x504>
1010171c:	3806d0fa 	srli	r3,r7,3
10101720:	01c00044 	movi	r7,1
10101724:	30800117 	ldw	r2,4(r6)
10101728:	19400044 	addi	r5,r3,1
1010172c:	294b883a 	add	r5,r5,r5
10101730:	1807d0ba 	srai	r3,r3,2
10101734:	294b883a 	add	r5,r5,r5
10101738:	294b883a 	add	r5,r5,r5
1010173c:	298b883a 	add	r5,r5,r6
10101740:	38c6983a 	sll	r3,r7,r3
10101744:	29c00017 	ldw	r7,0(r5)
10101748:	2a7ffe04 	addi	r9,r5,-8
1010174c:	1886b03a 	or	r3,r3,r2
10101750:	82400315 	stw	r9,12(r16)
10101754:	81c00215 	stw	r7,8(r16)
10101758:	30c00115 	stw	r3,4(r6)
1010175c:	2c000015 	stw	r16,0(r5)
10101760:	3c000315 	stw	r16,12(r7)
10101764:	2005d0ba 	srai	r2,r4,2
10101768:	01400044 	movi	r5,1
1010176c:	288a983a 	sll	r5,r5,r2
10101770:	19406f36 	bltu	r3,r5,10101930 <_malloc_r+0x324>
10101774:	28c4703a 	and	r2,r5,r3
10101778:	10000a1e 	bne	r2,zero,101017a4 <_malloc_r+0x198>
1010177c:	00bfff04 	movi	r2,-4
10101780:	294b883a 	add	r5,r5,r5
10101784:	2088703a 	and	r4,r4,r2
10101788:	28c4703a 	and	r2,r5,r3
1010178c:	21000104 	addi	r4,r4,4
10101790:	1000041e 	bne	r2,zero,101017a4 <_malloc_r+0x198>
10101794:	294b883a 	add	r5,r5,r5
10101798:	28c4703a 	and	r2,r5,r3
1010179c:	21000104 	addi	r4,r4,4
101017a0:	103ffc26 	beq	r2,zero,10101794 <__alt_data_end+0xfffe1794>
101017a4:	02bfff04 	movi	r10,-4
101017a8:	024003c4 	movi	r9,15
101017ac:	21800044 	addi	r6,r4,1
101017b0:	318d883a 	add	r6,r6,r6
101017b4:	318d883a 	add	r6,r6,r6
101017b8:	318d883a 	add	r6,r6,r6
101017bc:	998d883a 	add	r6,r19,r6
101017c0:	333ffe04 	addi	r12,r6,-8
101017c4:	2017883a 	mov	r11,r4
101017c8:	31800104 	addi	r6,r6,4
101017cc:	34000017 	ldw	r16,0(r6)
101017d0:	31fffd04 	addi	r7,r6,-12
101017d4:	81c0041e 	bne	r16,r7,101017e8 <_malloc_r+0x1dc>
101017d8:	0000fb06 	br	10101bc8 <_malloc_r+0x5bc>
101017dc:	1801030e 	bge	r3,zero,10101bec <_malloc_r+0x5e0>
101017e0:	84000317 	ldw	r16,12(r16)
101017e4:	81c0f826 	beq	r16,r7,10101bc8 <_malloc_r+0x5bc>
101017e8:	80800117 	ldw	r2,4(r16)
101017ec:	1284703a 	and	r2,r2,r10
101017f0:	1447c83a 	sub	r3,r2,r17
101017f4:	48fff90e 	bge	r9,r3,101017dc <__alt_data_end+0xfffe17dc>
101017f8:	80800317 	ldw	r2,12(r16)
101017fc:	81000217 	ldw	r4,8(r16)
10101800:	89400054 	ori	r5,r17,1
10101804:	81400115 	stw	r5,4(r16)
10101808:	20800315 	stw	r2,12(r4)
1010180c:	11000215 	stw	r4,8(r2)
10101810:	8463883a 	add	r17,r16,r17
10101814:	9c400515 	stw	r17,20(r19)
10101818:	9c400415 	stw	r17,16(r19)
1010181c:	18800054 	ori	r2,r3,1
10101820:	88800115 	stw	r2,4(r17)
10101824:	8a000315 	stw	r8,12(r17)
10101828:	8a000215 	stw	r8,8(r17)
1010182c:	88e3883a 	add	r17,r17,r3
10101830:	88c00015 	stw	r3,0(r17)
10101834:	9009883a 	mov	r4,r18
10101838:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010183c:	80800204 	addi	r2,r16,8
10101840:	00001b06 	br	101018b0 <_malloc_r+0x2a4>
10101844:	04400404 	movi	r17,16
10101848:	89402536 	bltu	r17,r5,101018e0 <_malloc_r+0x2d4>
1010184c:	010e4b80 	call	1010e4b8 <__malloc_lock>
10101850:	00800184 	movi	r2,6
10101854:	01000084 	movi	r4,2
10101858:	04c40474 	movhi	r19,4113
1010185c:	1085883a 	add	r2,r2,r2
10101860:	9cc4a204 	addi	r19,r19,4744
10101864:	1085883a 	add	r2,r2,r2
10101868:	9885883a 	add	r2,r19,r2
1010186c:	14000117 	ldw	r16,4(r2)
10101870:	10fffe04 	addi	r3,r2,-8
10101874:	80c0d926 	beq	r16,r3,10101bdc <_malloc_r+0x5d0>
10101878:	80c00117 	ldw	r3,4(r16)
1010187c:	81000317 	ldw	r4,12(r16)
10101880:	00bfff04 	movi	r2,-4
10101884:	1884703a 	and	r2,r3,r2
10101888:	81400217 	ldw	r5,8(r16)
1010188c:	8085883a 	add	r2,r16,r2
10101890:	10c00117 	ldw	r3,4(r2)
10101894:	29000315 	stw	r4,12(r5)
10101898:	21400215 	stw	r5,8(r4)
1010189c:	18c00054 	ori	r3,r3,1
101018a0:	10c00115 	stw	r3,4(r2)
101018a4:	9009883a 	mov	r4,r18
101018a8:	010e4dc0 	call	1010e4dc <__malloc_unlock>
101018ac:	80800204 	addi	r2,r16,8
101018b0:	dfc00a17 	ldw	ra,40(sp)
101018b4:	df000917 	ldw	fp,36(sp)
101018b8:	ddc00817 	ldw	r23,32(sp)
101018bc:	dd800717 	ldw	r22,28(sp)
101018c0:	dd400617 	ldw	r21,24(sp)
101018c4:	dd000517 	ldw	r20,20(sp)
101018c8:	dcc00417 	ldw	r19,16(sp)
101018cc:	dc800317 	ldw	r18,12(sp)
101018d0:	dc400217 	ldw	r17,8(sp)
101018d4:	dc000117 	ldw	r16,4(sp)
101018d8:	dec00b04 	addi	sp,sp,44
101018dc:	f800283a 	ret
101018e0:	00800304 	movi	r2,12
101018e4:	90800015 	stw	r2,0(r18)
101018e8:	0005883a 	mov	r2,zero
101018ec:	003ff006 	br	101018b0 <__alt_data_end+0xfffe18b0>
101018f0:	01002004 	movi	r4,128
101018f4:	02001004 	movi	r8,64
101018f8:	01c00fc4 	movi	r7,63
101018fc:	003f6106 	br	10101684 <__alt_data_end+0xfffe1684>
10101900:	4009883a 	mov	r4,r8
10101904:	003f7506 	br	101016dc <__alt_data_end+0xfffe16dc>
10101908:	81000317 	ldw	r4,12(r16)
1010190c:	003fde06 	br	10101888 <__alt_data_end+0xfffe1888>
10101910:	81c5883a 	add	r2,r16,r7
10101914:	11400117 	ldw	r5,4(r2)
10101918:	9009883a 	mov	r4,r18
1010191c:	29400054 	ori	r5,r5,1
10101920:	11400115 	stw	r5,4(r2)
10101924:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10101928:	80800204 	addi	r2,r16,8
1010192c:	003fe006 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101930:	9c000217 	ldw	r16,8(r19)
10101934:	00bfff04 	movi	r2,-4
10101938:	85800117 	ldw	r22,4(r16)
1010193c:	b0ac703a 	and	r22,r22,r2
10101940:	b4400336 	bltu	r22,r17,10101950 <_malloc_r+0x344>
10101944:	b445c83a 	sub	r2,r22,r17
10101948:	00c003c4 	movi	r3,15
1010194c:	18805d16 	blt	r3,r2,10101ac4 <_malloc_r+0x4b8>
10101950:	05c40474 	movhi	r23,4113
10101954:	00840474 	movhi	r2,4113
10101958:	10914a04 	addi	r2,r2,17704
1010195c:	bdca5004 	addi	r23,r23,10560
10101960:	15400017 	ldw	r21,0(r2)
10101964:	b8c00017 	ldw	r3,0(r23)
10101968:	00bfffc4 	movi	r2,-1
1010196c:	858d883a 	add	r6,r16,r22
10101970:	8d6b883a 	add	r21,r17,r21
10101974:	1880ea26 	beq	r3,r2,10101d20 <_malloc_r+0x714>
10101978:	ad4403c4 	addi	r21,r21,4111
1010197c:	00bc0004 	movi	r2,-4096
10101980:	a8aa703a 	and	r21,r21,r2
10101984:	a80b883a 	mov	r5,r21
10101988:	9009883a 	mov	r4,r18
1010198c:	d9800015 	stw	r6,0(sp)
10101990:	01021fc0 	call	101021fc <_sbrk_r>
10101994:	1029883a 	mov	r20,r2
10101998:	00bfffc4 	movi	r2,-1
1010199c:	d9800017 	ldw	r6,0(sp)
101019a0:	a080e826 	beq	r20,r2,10101d44 <_malloc_r+0x738>
101019a4:	a180a636 	bltu	r20,r6,10101c40 <_malloc_r+0x634>
101019a8:	07040474 	movhi	fp,4113
101019ac:	e7115504 	addi	fp,fp,17748
101019b0:	e0800017 	ldw	r2,0(fp)
101019b4:	a887883a 	add	r3,r21,r2
101019b8:	e0c00015 	stw	r3,0(fp)
101019bc:	3500e626 	beq	r6,r20,10101d58 <_malloc_r+0x74c>
101019c0:	b9000017 	ldw	r4,0(r23)
101019c4:	00bfffc4 	movi	r2,-1
101019c8:	2080ee26 	beq	r4,r2,10101d84 <_malloc_r+0x778>
101019cc:	a185c83a 	sub	r2,r20,r6
101019d0:	10c5883a 	add	r2,r2,r3
101019d4:	e0800015 	stw	r2,0(fp)
101019d8:	a0c001cc 	andi	r3,r20,7
101019dc:	1800bc26 	beq	r3,zero,10101cd0 <_malloc_r+0x6c4>
101019e0:	a0e9c83a 	sub	r20,r20,r3
101019e4:	00840204 	movi	r2,4104
101019e8:	a5000204 	addi	r20,r20,8
101019ec:	10c7c83a 	sub	r3,r2,r3
101019f0:	a545883a 	add	r2,r20,r21
101019f4:	1083ffcc 	andi	r2,r2,4095
101019f8:	18abc83a 	sub	r21,r3,r2
101019fc:	a80b883a 	mov	r5,r21
10101a00:	9009883a 	mov	r4,r18
10101a04:	01021fc0 	call	101021fc <_sbrk_r>
10101a08:	00ffffc4 	movi	r3,-1
10101a0c:	10c0e126 	beq	r2,r3,10101d94 <_malloc_r+0x788>
10101a10:	1505c83a 	sub	r2,r2,r20
10101a14:	1545883a 	add	r2,r2,r21
10101a18:	10800054 	ori	r2,r2,1
10101a1c:	e0c00017 	ldw	r3,0(fp)
10101a20:	9d000215 	stw	r20,8(r19)
10101a24:	a0800115 	stw	r2,4(r20)
10101a28:	a8c7883a 	add	r3,r21,r3
10101a2c:	e0c00015 	stw	r3,0(fp)
10101a30:	84c00e26 	beq	r16,r19,10101a6c <_malloc_r+0x460>
10101a34:	018003c4 	movi	r6,15
10101a38:	3580a72e 	bgeu	r6,r22,10101cd8 <_malloc_r+0x6cc>
10101a3c:	81400117 	ldw	r5,4(r16)
10101a40:	013ffe04 	movi	r4,-8
10101a44:	b0bffd04 	addi	r2,r22,-12
10101a48:	1104703a 	and	r2,r2,r4
10101a4c:	2900004c 	andi	r4,r5,1
10101a50:	2088b03a 	or	r4,r4,r2
10101a54:	81000115 	stw	r4,4(r16)
10101a58:	01400144 	movi	r5,5
10101a5c:	8089883a 	add	r4,r16,r2
10101a60:	21400115 	stw	r5,4(r4)
10101a64:	21400215 	stw	r5,8(r4)
10101a68:	3080cd36 	bltu	r6,r2,10101da0 <_malloc_r+0x794>
10101a6c:	00840474 	movhi	r2,4113
10101a70:	10914904 	addi	r2,r2,17700
10101a74:	11000017 	ldw	r4,0(r2)
10101a78:	20c0012e 	bgeu	r4,r3,10101a80 <_malloc_r+0x474>
10101a7c:	10c00015 	stw	r3,0(r2)
10101a80:	00840474 	movhi	r2,4113
10101a84:	10914804 	addi	r2,r2,17696
10101a88:	11000017 	ldw	r4,0(r2)
10101a8c:	9c000217 	ldw	r16,8(r19)
10101a90:	20c0012e 	bgeu	r4,r3,10101a98 <_malloc_r+0x48c>
10101a94:	10c00015 	stw	r3,0(r2)
10101a98:	80c00117 	ldw	r3,4(r16)
10101a9c:	00bfff04 	movi	r2,-4
10101aa0:	1886703a 	and	r3,r3,r2
10101aa4:	1c45c83a 	sub	r2,r3,r17
10101aa8:	1c400236 	bltu	r3,r17,10101ab4 <_malloc_r+0x4a8>
10101aac:	00c003c4 	movi	r3,15
10101ab0:	18800416 	blt	r3,r2,10101ac4 <_malloc_r+0x4b8>
10101ab4:	9009883a 	mov	r4,r18
10101ab8:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10101abc:	0005883a 	mov	r2,zero
10101ac0:	003f7b06 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101ac4:	88c00054 	ori	r3,r17,1
10101ac8:	80c00115 	stw	r3,4(r16)
10101acc:	8463883a 	add	r17,r16,r17
10101ad0:	10800054 	ori	r2,r2,1
10101ad4:	9c400215 	stw	r17,8(r19)
10101ad8:	88800115 	stw	r2,4(r17)
10101adc:	9009883a 	mov	r4,r18
10101ae0:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10101ae4:	80800204 	addi	r2,r16,8
10101ae8:	003f7106 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101aec:	00c00504 	movi	r3,20
10101af0:	18804a2e 	bgeu	r3,r2,10101c1c <_malloc_r+0x610>
10101af4:	00c01504 	movi	r3,84
10101af8:	18806e36 	bltu	r3,r2,10101cb4 <_malloc_r+0x6a8>
10101afc:	8804d33a 	srli	r2,r17,12
10101b00:	12001bc4 	addi	r8,r2,111
10101b04:	11c01b84 	addi	r7,r2,110
10101b08:	4209883a 	add	r4,r8,r8
10101b0c:	003edd06 	br	10101684 <__alt_data_end+0xfffe1684>
10101b10:	3804d27a 	srli	r2,r7,9
10101b14:	00c00104 	movi	r3,4
10101b18:	1880442e 	bgeu	r3,r2,10101c2c <_malloc_r+0x620>
10101b1c:	00c00504 	movi	r3,20
10101b20:	18808136 	bltu	r3,r2,10101d28 <_malloc_r+0x71c>
10101b24:	11401704 	addi	r5,r2,92
10101b28:	10c016c4 	addi	r3,r2,91
10101b2c:	294b883a 	add	r5,r5,r5
10101b30:	294b883a 	add	r5,r5,r5
10101b34:	294b883a 	add	r5,r5,r5
10101b38:	994b883a 	add	r5,r19,r5
10101b3c:	28800017 	ldw	r2,0(r5)
10101b40:	01840474 	movhi	r6,4113
10101b44:	297ffe04 	addi	r5,r5,-8
10101b48:	3184a204 	addi	r6,r6,4744
10101b4c:	28806526 	beq	r5,r2,10101ce4 <_malloc_r+0x6d8>
10101b50:	01bfff04 	movi	r6,-4
10101b54:	10c00117 	ldw	r3,4(r2)
10101b58:	1986703a 	and	r3,r3,r6
10101b5c:	38c0022e 	bgeu	r7,r3,10101b68 <_malloc_r+0x55c>
10101b60:	10800217 	ldw	r2,8(r2)
10101b64:	28bffb1e 	bne	r5,r2,10101b54 <__alt_data_end+0xfffe1b54>
10101b68:	11400317 	ldw	r5,12(r2)
10101b6c:	98c00117 	ldw	r3,4(r19)
10101b70:	81400315 	stw	r5,12(r16)
10101b74:	80800215 	stw	r2,8(r16)
10101b78:	2c000215 	stw	r16,8(r5)
10101b7c:	14000315 	stw	r16,12(r2)
10101b80:	003ef806 	br	10101764 <__alt_data_end+0xfffe1764>
10101b84:	88c00054 	ori	r3,r17,1
10101b88:	80c00115 	stw	r3,4(r16)
10101b8c:	8463883a 	add	r17,r16,r17
10101b90:	34400515 	stw	r17,20(r6)
10101b94:	34400415 	stw	r17,16(r6)
10101b98:	10c00054 	ori	r3,r2,1
10101b9c:	8a000315 	stw	r8,12(r17)
10101ba0:	8a000215 	stw	r8,8(r17)
10101ba4:	88c00115 	stw	r3,4(r17)
10101ba8:	88a3883a 	add	r17,r17,r2
10101bac:	88800015 	stw	r2,0(r17)
10101bb0:	9009883a 	mov	r4,r18
10101bb4:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10101bb8:	80800204 	addi	r2,r16,8
10101bbc:	003f3c06 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101bc0:	30c00117 	ldw	r3,4(r6)
10101bc4:	003ee706 	br	10101764 <__alt_data_end+0xfffe1764>
10101bc8:	5ac00044 	addi	r11,r11,1
10101bcc:	588000cc 	andi	r2,r11,3
10101bd0:	31800204 	addi	r6,r6,8
10101bd4:	103efd1e 	bne	r2,zero,101017cc <__alt_data_end+0xfffe17cc>
10101bd8:	00002406 	br	10101c6c <_malloc_r+0x660>
10101bdc:	14000317 	ldw	r16,12(r2)
10101be0:	143f251e 	bne	r2,r16,10101878 <__alt_data_end+0xfffe1878>
10101be4:	21000084 	addi	r4,r4,2
10101be8:	003ebc06 	br	101016dc <__alt_data_end+0xfffe16dc>
10101bec:	8085883a 	add	r2,r16,r2
10101bf0:	10c00117 	ldw	r3,4(r2)
10101bf4:	81000317 	ldw	r4,12(r16)
10101bf8:	81400217 	ldw	r5,8(r16)
10101bfc:	18c00054 	ori	r3,r3,1
10101c00:	10c00115 	stw	r3,4(r2)
10101c04:	29000315 	stw	r4,12(r5)
10101c08:	21400215 	stw	r5,8(r4)
10101c0c:	9009883a 	mov	r4,r18
10101c10:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10101c14:	80800204 	addi	r2,r16,8
10101c18:	003f2506 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101c1c:	12001704 	addi	r8,r2,92
10101c20:	11c016c4 	addi	r7,r2,91
10101c24:	4209883a 	add	r4,r8,r8
10101c28:	003e9606 	br	10101684 <__alt_data_end+0xfffe1684>
10101c2c:	3804d1ba 	srli	r2,r7,6
10101c30:	11400e44 	addi	r5,r2,57
10101c34:	10c00e04 	addi	r3,r2,56
10101c38:	294b883a 	add	r5,r5,r5
10101c3c:	003fbc06 	br	10101b30 <__alt_data_end+0xfffe1b30>
10101c40:	84ff5926 	beq	r16,r19,101019a8 <__alt_data_end+0xfffe19a8>
10101c44:	00840474 	movhi	r2,4113
10101c48:	1084a204 	addi	r2,r2,4744
10101c4c:	14000217 	ldw	r16,8(r2)
10101c50:	00bfff04 	movi	r2,-4
10101c54:	80c00117 	ldw	r3,4(r16)
10101c58:	1886703a 	and	r3,r3,r2
10101c5c:	003f9106 	br	10101aa4 <__alt_data_end+0xfffe1aa4>
10101c60:	60800217 	ldw	r2,8(r12)
10101c64:	213fffc4 	addi	r4,r4,-1
10101c68:	1300651e 	bne	r2,r12,10101e00 <_malloc_r+0x7f4>
10101c6c:	208000cc 	andi	r2,r4,3
10101c70:	633ffe04 	addi	r12,r12,-8
10101c74:	103ffa1e 	bne	r2,zero,10101c60 <__alt_data_end+0xfffe1c60>
10101c78:	98800117 	ldw	r2,4(r19)
10101c7c:	0146303a 	nor	r3,zero,r5
10101c80:	1884703a 	and	r2,r3,r2
10101c84:	98800115 	stw	r2,4(r19)
10101c88:	294b883a 	add	r5,r5,r5
10101c8c:	117f2836 	bltu	r2,r5,10101930 <__alt_data_end+0xfffe1930>
10101c90:	283f2726 	beq	r5,zero,10101930 <__alt_data_end+0xfffe1930>
10101c94:	2886703a 	and	r3,r5,r2
10101c98:	5809883a 	mov	r4,r11
10101c9c:	183ec31e 	bne	r3,zero,101017ac <__alt_data_end+0xfffe17ac>
10101ca0:	294b883a 	add	r5,r5,r5
10101ca4:	2886703a 	and	r3,r5,r2
10101ca8:	21000104 	addi	r4,r4,4
10101cac:	183ffc26 	beq	r3,zero,10101ca0 <__alt_data_end+0xfffe1ca0>
10101cb0:	003ebe06 	br	101017ac <__alt_data_end+0xfffe17ac>
10101cb4:	00c05504 	movi	r3,340
10101cb8:	18801236 	bltu	r3,r2,10101d04 <_malloc_r+0x6f8>
10101cbc:	8804d3fa 	srli	r2,r17,15
10101cc0:	12001e04 	addi	r8,r2,120
10101cc4:	11c01dc4 	addi	r7,r2,119
10101cc8:	4209883a 	add	r4,r8,r8
10101ccc:	003e6d06 	br	10101684 <__alt_data_end+0xfffe1684>
10101cd0:	00c40004 	movi	r3,4096
10101cd4:	003f4606 	br	101019f0 <__alt_data_end+0xfffe19f0>
10101cd8:	00800044 	movi	r2,1
10101cdc:	a0800115 	stw	r2,4(r20)
10101ce0:	003f7406 	br	10101ab4 <__alt_data_end+0xfffe1ab4>
10101ce4:	1805d0ba 	srai	r2,r3,2
10101ce8:	01c00044 	movi	r7,1
10101cec:	30c00117 	ldw	r3,4(r6)
10101cf0:	388e983a 	sll	r7,r7,r2
10101cf4:	2805883a 	mov	r2,r5
10101cf8:	38c6b03a 	or	r3,r7,r3
10101cfc:	30c00115 	stw	r3,4(r6)
10101d00:	003f9b06 	br	10101b70 <__alt_data_end+0xfffe1b70>
10101d04:	00c15504 	movi	r3,1364
10101d08:	18801a36 	bltu	r3,r2,10101d74 <_malloc_r+0x768>
10101d0c:	8804d4ba 	srli	r2,r17,18
10101d10:	12001f44 	addi	r8,r2,125
10101d14:	11c01f04 	addi	r7,r2,124
10101d18:	4209883a 	add	r4,r8,r8
10101d1c:	003e5906 	br	10101684 <__alt_data_end+0xfffe1684>
10101d20:	ad400404 	addi	r21,r21,16
10101d24:	003f1706 	br	10101984 <__alt_data_end+0xfffe1984>
10101d28:	00c01504 	movi	r3,84
10101d2c:	18802336 	bltu	r3,r2,10101dbc <_malloc_r+0x7b0>
10101d30:	3804d33a 	srli	r2,r7,12
10101d34:	11401bc4 	addi	r5,r2,111
10101d38:	10c01b84 	addi	r3,r2,110
10101d3c:	294b883a 	add	r5,r5,r5
10101d40:	003f7b06 	br	10101b30 <__alt_data_end+0xfffe1b30>
10101d44:	9c000217 	ldw	r16,8(r19)
10101d48:	00bfff04 	movi	r2,-4
10101d4c:	80c00117 	ldw	r3,4(r16)
10101d50:	1886703a 	and	r3,r3,r2
10101d54:	003f5306 	br	10101aa4 <__alt_data_end+0xfffe1aa4>
10101d58:	3083ffcc 	andi	r2,r6,4095
10101d5c:	103f181e 	bne	r2,zero,101019c0 <__alt_data_end+0xfffe19c0>
10101d60:	99000217 	ldw	r4,8(r19)
10101d64:	b545883a 	add	r2,r22,r21
10101d68:	10800054 	ori	r2,r2,1
10101d6c:	20800115 	stw	r2,4(r4)
10101d70:	003f3e06 	br	10101a6c <__alt_data_end+0xfffe1a6c>
10101d74:	01003f84 	movi	r4,254
10101d78:	02001fc4 	movi	r8,127
10101d7c:	01c01f84 	movi	r7,126
10101d80:	003e4006 	br	10101684 <__alt_data_end+0xfffe1684>
10101d84:	00840474 	movhi	r2,4113
10101d88:	108a5004 	addi	r2,r2,10560
10101d8c:	15000015 	stw	r20,0(r2)
10101d90:	003f1106 	br	101019d8 <__alt_data_end+0xfffe19d8>
10101d94:	00800044 	movi	r2,1
10101d98:	002b883a 	mov	r21,zero
10101d9c:	003f1f06 	br	10101a1c <__alt_data_end+0xfffe1a1c>
10101da0:	81400204 	addi	r5,r16,8
10101da4:	9009883a 	mov	r4,r18
10101da8:	01069040 	call	10106904 <_free_r>
10101dac:	00840474 	movhi	r2,4113
10101db0:	10915504 	addi	r2,r2,17748
10101db4:	10c00017 	ldw	r3,0(r2)
10101db8:	003f2c06 	br	10101a6c <__alt_data_end+0xfffe1a6c>
10101dbc:	00c05504 	movi	r3,340
10101dc0:	18800536 	bltu	r3,r2,10101dd8 <_malloc_r+0x7cc>
10101dc4:	3804d3fa 	srli	r2,r7,15
10101dc8:	11401e04 	addi	r5,r2,120
10101dcc:	10c01dc4 	addi	r3,r2,119
10101dd0:	294b883a 	add	r5,r5,r5
10101dd4:	003f5606 	br	10101b30 <__alt_data_end+0xfffe1b30>
10101dd8:	00c15504 	movi	r3,1364
10101ddc:	18800536 	bltu	r3,r2,10101df4 <_malloc_r+0x7e8>
10101de0:	3804d4ba 	srli	r2,r7,18
10101de4:	11401f44 	addi	r5,r2,125
10101de8:	10c01f04 	addi	r3,r2,124
10101dec:	294b883a 	add	r5,r5,r5
10101df0:	003f4f06 	br	10101b30 <__alt_data_end+0xfffe1b30>
10101df4:	01403f84 	movi	r5,254
10101df8:	00c01f84 	movi	r3,126
10101dfc:	003f4c06 	br	10101b30 <__alt_data_end+0xfffe1b30>
10101e00:	98800117 	ldw	r2,4(r19)
10101e04:	003fa006 	br	10101c88 <__alt_data_end+0xfffe1c88>
10101e08:	8808d0fa 	srli	r4,r17,3
10101e0c:	20800044 	addi	r2,r4,1
10101e10:	1085883a 	add	r2,r2,r2
10101e14:	003e9006 	br	10101858 <__alt_data_end+0xfffe1858>

10101e18 <memset>:
10101e18:	20c000cc 	andi	r3,r4,3
10101e1c:	2005883a 	mov	r2,r4
10101e20:	18004426 	beq	r3,zero,10101f34 <memset+0x11c>
10101e24:	31ffffc4 	addi	r7,r6,-1
10101e28:	30004026 	beq	r6,zero,10101f2c <memset+0x114>
10101e2c:	2813883a 	mov	r9,r5
10101e30:	200d883a 	mov	r6,r4
10101e34:	2007883a 	mov	r3,r4
10101e38:	00000406 	br	10101e4c <memset+0x34>
10101e3c:	3a3fffc4 	addi	r8,r7,-1
10101e40:	31800044 	addi	r6,r6,1
10101e44:	38003926 	beq	r7,zero,10101f2c <memset+0x114>
10101e48:	400f883a 	mov	r7,r8
10101e4c:	18c00044 	addi	r3,r3,1
10101e50:	32400005 	stb	r9,0(r6)
10101e54:	1a0000cc 	andi	r8,r3,3
10101e58:	403ff81e 	bne	r8,zero,10101e3c <__alt_data_end+0xfffe1e3c>
10101e5c:	010000c4 	movi	r4,3
10101e60:	21c02d2e 	bgeu	r4,r7,10101f18 <memset+0x100>
10101e64:	29003fcc 	andi	r4,r5,255
10101e68:	200c923a 	slli	r6,r4,8
10101e6c:	3108b03a 	or	r4,r6,r4
10101e70:	200c943a 	slli	r6,r4,16
10101e74:	218cb03a 	or	r6,r4,r6
10101e78:	010003c4 	movi	r4,15
10101e7c:	21c0182e 	bgeu	r4,r7,10101ee0 <memset+0xc8>
10101e80:	3b3ffc04 	addi	r12,r7,-16
10101e84:	6018d13a 	srli	r12,r12,4
10101e88:	1a000104 	addi	r8,r3,4
10101e8c:	1ac00204 	addi	r11,r3,8
10101e90:	6008913a 	slli	r4,r12,4
10101e94:	1a800304 	addi	r10,r3,12
10101e98:	1813883a 	mov	r9,r3
10101e9c:	21000504 	addi	r4,r4,20
10101ea0:	1909883a 	add	r4,r3,r4
10101ea4:	49800015 	stw	r6,0(r9)
10101ea8:	41800015 	stw	r6,0(r8)
10101eac:	59800015 	stw	r6,0(r11)
10101eb0:	51800015 	stw	r6,0(r10)
10101eb4:	42000404 	addi	r8,r8,16
10101eb8:	4a400404 	addi	r9,r9,16
10101ebc:	5ac00404 	addi	r11,r11,16
10101ec0:	52800404 	addi	r10,r10,16
10101ec4:	413ff71e 	bne	r8,r4,10101ea4 <__alt_data_end+0xfffe1ea4>
10101ec8:	63000044 	addi	r12,r12,1
10101ecc:	6018913a 	slli	r12,r12,4
10101ed0:	39c003cc 	andi	r7,r7,15
10101ed4:	010000c4 	movi	r4,3
10101ed8:	1b07883a 	add	r3,r3,r12
10101edc:	21c00e2e 	bgeu	r4,r7,10101f18 <memset+0x100>
10101ee0:	1813883a 	mov	r9,r3
10101ee4:	3811883a 	mov	r8,r7
10101ee8:	010000c4 	movi	r4,3
10101eec:	49800015 	stw	r6,0(r9)
10101ef0:	423fff04 	addi	r8,r8,-4
10101ef4:	4a400104 	addi	r9,r9,4
10101ef8:	223ffc36 	bltu	r4,r8,10101eec <__alt_data_end+0xfffe1eec>
10101efc:	393fff04 	addi	r4,r7,-4
10101f00:	2008d0ba 	srli	r4,r4,2
10101f04:	39c000cc 	andi	r7,r7,3
10101f08:	21000044 	addi	r4,r4,1
10101f0c:	2109883a 	add	r4,r4,r4
10101f10:	2109883a 	add	r4,r4,r4
10101f14:	1907883a 	add	r3,r3,r4
10101f18:	38000526 	beq	r7,zero,10101f30 <memset+0x118>
10101f1c:	19cf883a 	add	r7,r3,r7
10101f20:	19400005 	stb	r5,0(r3)
10101f24:	18c00044 	addi	r3,r3,1
10101f28:	38fffd1e 	bne	r7,r3,10101f20 <__alt_data_end+0xfffe1f20>
10101f2c:	f800283a 	ret
10101f30:	f800283a 	ret
10101f34:	2007883a 	mov	r3,r4
10101f38:	300f883a 	mov	r7,r6
10101f3c:	003fc706 	br	10101e5c <__alt_data_end+0xfffe1e5c>

10101f40 <_open_r>:
10101f40:	defffd04 	addi	sp,sp,-12
10101f44:	2805883a 	mov	r2,r5
10101f48:	dc000015 	stw	r16,0(sp)
10101f4c:	04040474 	movhi	r16,4113
10101f50:	dc400115 	stw	r17,4(sp)
10101f54:	300b883a 	mov	r5,r6
10101f58:	84114704 	addi	r16,r16,17692
10101f5c:	2023883a 	mov	r17,r4
10101f60:	380d883a 	mov	r6,r7
10101f64:	1009883a 	mov	r4,r2
10101f68:	dfc00215 	stw	ra,8(sp)
10101f6c:	80000015 	stw	zero,0(r16)
10101f70:	010e6000 	call	1010e600 <open>
10101f74:	00ffffc4 	movi	r3,-1
10101f78:	10c00526 	beq	r2,r3,10101f90 <_open_r+0x50>
10101f7c:	dfc00217 	ldw	ra,8(sp)
10101f80:	dc400117 	ldw	r17,4(sp)
10101f84:	dc000017 	ldw	r16,0(sp)
10101f88:	dec00304 	addi	sp,sp,12
10101f8c:	f800283a 	ret
10101f90:	80c00017 	ldw	r3,0(r16)
10101f94:	183ff926 	beq	r3,zero,10101f7c <__alt_data_end+0xfffe1f7c>
10101f98:	88c00015 	stw	r3,0(r17)
10101f9c:	003ff706 	br	10101f7c <__alt_data_end+0xfffe1f7c>

10101fa0 <_printf_r>:
10101fa0:	defffd04 	addi	sp,sp,-12
10101fa4:	2805883a 	mov	r2,r5
10101fa8:	dfc00015 	stw	ra,0(sp)
10101fac:	d9800115 	stw	r6,4(sp)
10101fb0:	d9c00215 	stw	r7,8(sp)
10101fb4:	21400217 	ldw	r5,8(r4)
10101fb8:	d9c00104 	addi	r7,sp,4
10101fbc:	100d883a 	mov	r6,r2
10101fc0:	010238c0 	call	1010238c <___vfprintf_internal_r>
10101fc4:	dfc00017 	ldw	ra,0(sp)
10101fc8:	dec00304 	addi	sp,sp,12
10101fcc:	f800283a 	ret

10101fd0 <printf>:
10101fd0:	defffc04 	addi	sp,sp,-16
10101fd4:	dfc00015 	stw	ra,0(sp)
10101fd8:	d9400115 	stw	r5,4(sp)
10101fdc:	d9800215 	stw	r6,8(sp)
10101fe0:	d9c00315 	stw	r7,12(sp)
10101fe4:	00840474 	movhi	r2,4113
10101fe8:	108a4f04 	addi	r2,r2,10556
10101fec:	10800017 	ldw	r2,0(r2)
10101ff0:	200b883a 	mov	r5,r4
10101ff4:	d9800104 	addi	r6,sp,4
10101ff8:	11000217 	ldw	r4,8(r2)
10101ffc:	01045840 	call	10104584 <__vfprintf_internal>
10102000:	dfc00017 	ldw	ra,0(sp)
10102004:	dec00404 	addi	sp,sp,16
10102008:	f800283a 	ret

1010200c <lflush>:
1010200c:	2080030b 	ldhu	r2,12(r4)
10102010:	00c00244 	movi	r3,9
10102014:	1080024c 	andi	r2,r2,9
10102018:	10c00226 	beq	r2,r3,10102024 <lflush+0x18>
1010201c:	0005883a 	mov	r2,zero
10102020:	f800283a 	ret
10102024:	01063641 	jmpi	10106364 <fflush>

10102028 <__srefill_r>:
10102028:	defffc04 	addi	sp,sp,-16
1010202c:	dc400115 	stw	r17,4(sp)
10102030:	dc000015 	stw	r16,0(sp)
10102034:	dfc00315 	stw	ra,12(sp)
10102038:	dc800215 	stw	r18,8(sp)
1010203c:	2023883a 	mov	r17,r4
10102040:	2821883a 	mov	r16,r5
10102044:	20000226 	beq	r4,zero,10102050 <__srefill_r+0x28>
10102048:	20800e17 	ldw	r2,56(r4)
1010204c:	10003c26 	beq	r2,zero,10102140 <__srefill_r+0x118>
10102050:	80c0030b 	ldhu	r3,12(r16)
10102054:	1908000c 	andi	r4,r3,8192
10102058:	1805883a 	mov	r2,r3
1010205c:	2000071e 	bne	r4,zero,1010207c <__srefill_r+0x54>
10102060:	81001917 	ldw	r4,100(r16)
10102064:	18880014 	ori	r2,r3,8192
10102068:	00f7ffc4 	movi	r3,-8193
1010206c:	20c8703a 	and	r4,r4,r3
10102070:	8080030d 	sth	r2,12(r16)
10102074:	1007883a 	mov	r3,r2
10102078:	81001915 	stw	r4,100(r16)
1010207c:	80000115 	stw	zero,4(r16)
10102080:	1100080c 	andi	r4,r2,32
10102084:	2000571e 	bne	r4,zero,101021e4 <__srefill_r+0x1bc>
10102088:	1100010c 	andi	r4,r2,4
1010208c:	20001f26 	beq	r4,zero,1010210c <__srefill_r+0xe4>
10102090:	81400c17 	ldw	r5,48(r16)
10102094:	28000826 	beq	r5,zero,101020b8 <__srefill_r+0x90>
10102098:	80801004 	addi	r2,r16,64
1010209c:	28800226 	beq	r5,r2,101020a8 <__srefill_r+0x80>
101020a0:	8809883a 	mov	r4,r17
101020a4:	01069040 	call	10106904 <_free_r>
101020a8:	80800f17 	ldw	r2,60(r16)
101020ac:	80000c15 	stw	zero,48(r16)
101020b0:	80800115 	stw	r2,4(r16)
101020b4:	1000391e 	bne	r2,zero,1010219c <__srefill_r+0x174>
101020b8:	80800417 	ldw	r2,16(r16)
101020bc:	10004b26 	beq	r2,zero,101021ec <__srefill_r+0x1c4>
101020c0:	8480030b 	ldhu	r18,12(r16)
101020c4:	908000cc 	andi	r2,r18,3
101020c8:	10001f1e 	bne	r2,zero,10102148 <__srefill_r+0x120>
101020cc:	81800417 	ldw	r6,16(r16)
101020d0:	80800817 	ldw	r2,32(r16)
101020d4:	81c00517 	ldw	r7,20(r16)
101020d8:	81400717 	ldw	r5,28(r16)
101020dc:	81800015 	stw	r6,0(r16)
101020e0:	8809883a 	mov	r4,r17
101020e4:	103ee83a 	callr	r2
101020e8:	80800115 	stw	r2,4(r16)
101020ec:	00800e0e 	bge	zero,r2,10102128 <__srefill_r+0x100>
101020f0:	0005883a 	mov	r2,zero
101020f4:	dfc00317 	ldw	ra,12(sp)
101020f8:	dc800217 	ldw	r18,8(sp)
101020fc:	dc400117 	ldw	r17,4(sp)
10102100:	dc000017 	ldw	r16,0(sp)
10102104:	dec00404 	addi	sp,sp,16
10102108:	f800283a 	ret
1010210c:	1100040c 	andi	r4,r2,16
10102110:	20003026 	beq	r4,zero,101021d4 <__srefill_r+0x1ac>
10102114:	1080020c 	andi	r2,r2,8
10102118:	1000241e 	bne	r2,zero,101021ac <__srefill_r+0x184>
1010211c:	18c00114 	ori	r3,r3,4
10102120:	80c0030d 	sth	r3,12(r16)
10102124:	003fe406 	br	101020b8 <__alt_data_end+0xfffe20b8>
10102128:	80c0030b 	ldhu	r3,12(r16)
1010212c:	1000161e 	bne	r2,zero,10102188 <__srefill_r+0x160>
10102130:	18c00814 	ori	r3,r3,32
10102134:	00bfffc4 	movi	r2,-1
10102138:	80c0030d 	sth	r3,12(r16)
1010213c:	003fed06 	br	101020f4 <__alt_data_end+0xfffe20f4>
10102140:	01066e40 	call	101066e4 <__sinit>
10102144:	003fc206 	br	10102050 <__alt_data_end+0xfffe2050>
10102148:	00840474 	movhi	r2,4113
1010214c:	108a4e04 	addi	r2,r2,10552
10102150:	11000017 	ldw	r4,0(r2)
10102154:	01440434 	movhi	r5,4112
10102158:	00800044 	movi	r2,1
1010215c:	29480304 	addi	r5,r5,8204
10102160:	8080030d 	sth	r2,12(r16)
10102164:	0106c140 	call	10106c14 <_fwalk>
10102168:	00800244 	movi	r2,9
1010216c:	8480030d 	sth	r18,12(r16)
10102170:	9480024c 	andi	r18,r18,9
10102174:	90bfd51e 	bne	r18,r2,101020cc <__alt_data_end+0xfffe20cc>
10102178:	800b883a 	mov	r5,r16
1010217c:	8809883a 	mov	r4,r17
10102180:	01060ec0 	call	101060ec <__sflush_r>
10102184:	003fd106 	br	101020cc <__alt_data_end+0xfffe20cc>
10102188:	18c01014 	ori	r3,r3,64
1010218c:	80000115 	stw	zero,4(r16)
10102190:	00bfffc4 	movi	r2,-1
10102194:	80c0030d 	sth	r3,12(r16)
10102198:	003fd606 	br	101020f4 <__alt_data_end+0xfffe20f4>
1010219c:	80c00e17 	ldw	r3,56(r16)
101021a0:	0005883a 	mov	r2,zero
101021a4:	80c00015 	stw	r3,0(r16)
101021a8:	003fd206 	br	101020f4 <__alt_data_end+0xfffe20f4>
101021ac:	800b883a 	mov	r5,r16
101021b0:	8809883a 	mov	r4,r17
101021b4:	01063080 	call	10106308 <_fflush_r>
101021b8:	10000a1e 	bne	r2,zero,101021e4 <__srefill_r+0x1bc>
101021bc:	8080030b 	ldhu	r2,12(r16)
101021c0:	00fffdc4 	movi	r3,-9
101021c4:	80000215 	stw	zero,8(r16)
101021c8:	1886703a 	and	r3,r3,r2
101021cc:	80000615 	stw	zero,24(r16)
101021d0:	003fd206 	br	1010211c <__alt_data_end+0xfffe211c>
101021d4:	00800244 	movi	r2,9
101021d8:	88800015 	stw	r2,0(r17)
101021dc:	18c01014 	ori	r3,r3,64
101021e0:	80c0030d 	sth	r3,12(r16)
101021e4:	00bfffc4 	movi	r2,-1
101021e8:	003fc206 	br	101020f4 <__alt_data_end+0xfffe20f4>
101021ec:	800b883a 	mov	r5,r16
101021f0:	8809883a 	mov	r4,r17
101021f4:	01014500 	call	10101450 <__smakebuf_r>
101021f8:	003fb106 	br	101020c0 <__alt_data_end+0xfffe20c0>

101021fc <_sbrk_r>:
101021fc:	defffd04 	addi	sp,sp,-12
10102200:	dc000015 	stw	r16,0(sp)
10102204:	04040474 	movhi	r16,4113
10102208:	dc400115 	stw	r17,4(sp)
1010220c:	84114704 	addi	r16,r16,17692
10102210:	2023883a 	mov	r17,r4
10102214:	2809883a 	mov	r4,r5
10102218:	dfc00215 	stw	ra,8(sp)
1010221c:	80000015 	stw	zero,0(r16)
10102220:	010e8f00 	call	1010e8f0 <sbrk>
10102224:	00ffffc4 	movi	r3,-1
10102228:	10c00526 	beq	r2,r3,10102240 <_sbrk_r+0x44>
1010222c:	dfc00217 	ldw	ra,8(sp)
10102230:	dc400117 	ldw	r17,4(sp)
10102234:	dc000017 	ldw	r16,0(sp)
10102238:	dec00304 	addi	sp,sp,12
1010223c:	f800283a 	ret
10102240:	80c00017 	ldw	r3,0(r16)
10102244:	183ff926 	beq	r3,zero,1010222c <__alt_data_end+0xfffe222c>
10102248:	88c00015 	stw	r3,0(r17)
1010224c:	003ff706 	br	1010222c <__alt_data_end+0xfffe222c>

10102250 <__sread>:
10102250:	defffe04 	addi	sp,sp,-8
10102254:	dc000015 	stw	r16,0(sp)
10102258:	2821883a 	mov	r16,r5
1010225c:	2940038f 	ldh	r5,14(r5)
10102260:	dfc00115 	stw	ra,4(sp)
10102264:	01081540 	call	10108154 <_read_r>
10102268:	10000716 	blt	r2,zero,10102288 <__sread+0x38>
1010226c:	80c01417 	ldw	r3,80(r16)
10102270:	1887883a 	add	r3,r3,r2
10102274:	80c01415 	stw	r3,80(r16)
10102278:	dfc00117 	ldw	ra,4(sp)
1010227c:	dc000017 	ldw	r16,0(sp)
10102280:	dec00204 	addi	sp,sp,8
10102284:	f800283a 	ret
10102288:	80c0030b 	ldhu	r3,12(r16)
1010228c:	18fbffcc 	andi	r3,r3,61439
10102290:	80c0030d 	sth	r3,12(r16)
10102294:	dfc00117 	ldw	ra,4(sp)
10102298:	dc000017 	ldw	r16,0(sp)
1010229c:	dec00204 	addi	sp,sp,8
101022a0:	f800283a 	ret

101022a4 <__seofread>:
101022a4:	0005883a 	mov	r2,zero
101022a8:	f800283a 	ret

101022ac <__swrite>:
101022ac:	2880030b 	ldhu	r2,12(r5)
101022b0:	defffb04 	addi	sp,sp,-20
101022b4:	dcc00315 	stw	r19,12(sp)
101022b8:	dc800215 	stw	r18,8(sp)
101022bc:	dc400115 	stw	r17,4(sp)
101022c0:	dc000015 	stw	r16,0(sp)
101022c4:	dfc00415 	stw	ra,16(sp)
101022c8:	10c0400c 	andi	r3,r2,256
101022cc:	2821883a 	mov	r16,r5
101022d0:	2023883a 	mov	r17,r4
101022d4:	3025883a 	mov	r18,r6
101022d8:	3827883a 	mov	r19,r7
101022dc:	18000526 	beq	r3,zero,101022f4 <__swrite+0x48>
101022e0:	2940038f 	ldh	r5,14(r5)
101022e4:	01c00084 	movi	r7,2
101022e8:	000d883a 	mov	r6,zero
101022ec:	0106ecc0 	call	10106ecc <_lseek_r>
101022f0:	8080030b 	ldhu	r2,12(r16)
101022f4:	8140038f 	ldh	r5,14(r16)
101022f8:	10bbffcc 	andi	r2,r2,61439
101022fc:	980f883a 	mov	r7,r19
10102300:	900d883a 	mov	r6,r18
10102304:	8809883a 	mov	r4,r17
10102308:	8080030d 	sth	r2,12(r16)
1010230c:	dfc00417 	ldw	ra,16(sp)
10102310:	dcc00317 	ldw	r19,12(sp)
10102314:	dc800217 	ldw	r18,8(sp)
10102318:	dc400117 	ldw	r17,4(sp)
1010231c:	dc000017 	ldw	r16,0(sp)
10102320:	dec00504 	addi	sp,sp,20
10102324:	010465c1 	jmpi	1010465c <_write_r>

10102328 <__sseek>:
10102328:	defffe04 	addi	sp,sp,-8
1010232c:	dc000015 	stw	r16,0(sp)
10102330:	2821883a 	mov	r16,r5
10102334:	2940038f 	ldh	r5,14(r5)
10102338:	dfc00115 	stw	ra,4(sp)
1010233c:	0106ecc0 	call	10106ecc <_lseek_r>
10102340:	00ffffc4 	movi	r3,-1
10102344:	10c00826 	beq	r2,r3,10102368 <__sseek+0x40>
10102348:	80c0030b 	ldhu	r3,12(r16)
1010234c:	80801415 	stw	r2,80(r16)
10102350:	18c40014 	ori	r3,r3,4096
10102354:	80c0030d 	sth	r3,12(r16)
10102358:	dfc00117 	ldw	ra,4(sp)
1010235c:	dc000017 	ldw	r16,0(sp)
10102360:	dec00204 	addi	sp,sp,8
10102364:	f800283a 	ret
10102368:	80c0030b 	ldhu	r3,12(r16)
1010236c:	18fbffcc 	andi	r3,r3,61439
10102370:	80c0030d 	sth	r3,12(r16)
10102374:	dfc00117 	ldw	ra,4(sp)
10102378:	dc000017 	ldw	r16,0(sp)
1010237c:	dec00204 	addi	sp,sp,8
10102380:	f800283a 	ret

10102384 <__sclose>:
10102384:	2940038f 	ldh	r5,14(r5)
10102388:	01048101 	jmpi	10104810 <_close_r>

1010238c <___vfprintf_internal_r>:
1010238c:	deffb804 	addi	sp,sp,-288
10102390:	dfc04715 	stw	ra,284(sp)
10102394:	ddc04515 	stw	r23,276(sp)
10102398:	dd404315 	stw	r21,268(sp)
1010239c:	d9002c15 	stw	r4,176(sp)
101023a0:	282f883a 	mov	r23,r5
101023a4:	302b883a 	mov	r21,r6
101023a8:	d9c02d15 	stw	r7,180(sp)
101023ac:	df004615 	stw	fp,280(sp)
101023b0:	dd804415 	stw	r22,272(sp)
101023b4:	dd004215 	stw	r20,264(sp)
101023b8:	dcc04115 	stw	r19,260(sp)
101023bc:	dc804015 	stw	r18,256(sp)
101023c0:	dc403f15 	stw	r17,252(sp)
101023c4:	dc003e15 	stw	r16,248(sp)
101023c8:	0106e9c0 	call	10106e9c <_localeconv_r>
101023cc:	10800017 	ldw	r2,0(r2)
101023d0:	1009883a 	mov	r4,r2
101023d4:	d8803415 	stw	r2,208(sp)
101023d8:	01083040 	call	10108304 <strlen>
101023dc:	d8803715 	stw	r2,220(sp)
101023e0:	d8802c17 	ldw	r2,176(sp)
101023e4:	10000226 	beq	r2,zero,101023f0 <___vfprintf_internal_r+0x64>
101023e8:	10800e17 	ldw	r2,56(r2)
101023ec:	1000f926 	beq	r2,zero,101027d4 <___vfprintf_internal_r+0x448>
101023f0:	b880030b 	ldhu	r2,12(r23)
101023f4:	10c8000c 	andi	r3,r2,8192
101023f8:	1800061e 	bne	r3,zero,10102414 <___vfprintf_internal_r+0x88>
101023fc:	b9001917 	ldw	r4,100(r23)
10102400:	00f7ffc4 	movi	r3,-8193
10102404:	10880014 	ori	r2,r2,8192
10102408:	20c6703a 	and	r3,r4,r3
1010240c:	b880030d 	sth	r2,12(r23)
10102410:	b8c01915 	stw	r3,100(r23)
10102414:	10c0020c 	andi	r3,r2,8
10102418:	1800c126 	beq	r3,zero,10102720 <___vfprintf_internal_r+0x394>
1010241c:	b8c00417 	ldw	r3,16(r23)
10102420:	1800bf26 	beq	r3,zero,10102720 <___vfprintf_internal_r+0x394>
10102424:	1080068c 	andi	r2,r2,26
10102428:	00c00284 	movi	r3,10
1010242c:	10c0c426 	beq	r2,r3,10102740 <___vfprintf_internal_r+0x3b4>
10102430:	d8c00404 	addi	r3,sp,16
10102434:	05040474 	movhi	r20,4113
10102438:	d9001e04 	addi	r4,sp,120
1010243c:	a502e884 	addi	r20,r20,2978
10102440:	d8c01e15 	stw	r3,120(sp)
10102444:	d8002015 	stw	zero,128(sp)
10102448:	d8001f15 	stw	zero,124(sp)
1010244c:	d8003315 	stw	zero,204(sp)
10102450:	d8003615 	stw	zero,216(sp)
10102454:	d8003815 	stw	zero,224(sp)
10102458:	1811883a 	mov	r8,r3
1010245c:	d8003915 	stw	zero,228(sp)
10102460:	d8003a15 	stw	zero,232(sp)
10102464:	d8002f15 	stw	zero,188(sp)
10102468:	d9002815 	stw	r4,160(sp)
1010246c:	a8800007 	ldb	r2,0(r21)
10102470:	10027b26 	beq	r2,zero,10102e60 <___vfprintf_internal_r+0xad4>
10102474:	00c00944 	movi	r3,37
10102478:	a821883a 	mov	r16,r21
1010247c:	10c0021e 	bne	r2,r3,10102488 <___vfprintf_internal_r+0xfc>
10102480:	00001406 	br	101024d4 <___vfprintf_internal_r+0x148>
10102484:	10c00326 	beq	r2,r3,10102494 <___vfprintf_internal_r+0x108>
10102488:	84000044 	addi	r16,r16,1
1010248c:	80800007 	ldb	r2,0(r16)
10102490:	103ffc1e 	bne	r2,zero,10102484 <__alt_data_end+0xfffe2484>
10102494:	8563c83a 	sub	r17,r16,r21
10102498:	88000e26 	beq	r17,zero,101024d4 <___vfprintf_internal_r+0x148>
1010249c:	d8c02017 	ldw	r3,128(sp)
101024a0:	d8801f17 	ldw	r2,124(sp)
101024a4:	45400015 	stw	r21,0(r8)
101024a8:	1c47883a 	add	r3,r3,r17
101024ac:	10800044 	addi	r2,r2,1
101024b0:	d8c02015 	stw	r3,128(sp)
101024b4:	44400115 	stw	r17,4(r8)
101024b8:	d8801f15 	stw	r2,124(sp)
101024bc:	00c001c4 	movi	r3,7
101024c0:	1880a716 	blt	r3,r2,10102760 <___vfprintf_internal_r+0x3d4>
101024c4:	42000204 	addi	r8,r8,8
101024c8:	d9402f17 	ldw	r5,188(sp)
101024cc:	2c4b883a 	add	r5,r5,r17
101024d0:	d9402f15 	stw	r5,188(sp)
101024d4:	80800007 	ldb	r2,0(r16)
101024d8:	1000a826 	beq	r2,zero,1010277c <___vfprintf_internal_r+0x3f0>
101024dc:	84400047 	ldb	r17,1(r16)
101024e0:	00bfffc4 	movi	r2,-1
101024e4:	85400044 	addi	r21,r16,1
101024e8:	d8002785 	stb	zero,158(sp)
101024ec:	0007883a 	mov	r3,zero
101024f0:	000f883a 	mov	r7,zero
101024f4:	d8802915 	stw	r2,164(sp)
101024f8:	d8003115 	stw	zero,196(sp)
101024fc:	0025883a 	mov	r18,zero
10102500:	01401604 	movi	r5,88
10102504:	01800244 	movi	r6,9
10102508:	02800a84 	movi	r10,42
1010250c:	02401b04 	movi	r9,108
10102510:	ad400044 	addi	r21,r21,1
10102514:	88bff804 	addi	r2,r17,-32
10102518:	28830436 	bltu	r5,r2,1010312c <___vfprintf_internal_r+0xda0>
1010251c:	100490ba 	slli	r2,r2,2
10102520:	01040434 	movhi	r4,4112
10102524:	21094d04 	addi	r4,r4,9524
10102528:	1105883a 	add	r2,r2,r4
1010252c:	10800017 	ldw	r2,0(r2)
10102530:	1000683a 	jmp	r2
10102534:	1010304c 	andi	zero,r2,16577
10102538:	1010312c 	andhi	zero,r2,16580
1010253c:	1010312c 	andhi	zero,r2,16580
10102540:	1010306c 	andhi	zero,r2,16577
10102544:	1010312c 	andhi	zero,r2,16580
10102548:	1010312c 	andhi	zero,r2,16580
1010254c:	1010312c 	andhi	zero,r2,16580
10102550:	1010312c 	andhi	zero,r2,16580
10102554:	1010312c 	andhi	zero,r2,16580
10102558:	1010312c 	andhi	zero,r2,16580
1010255c:	101027e0 	cmpeqi	zero,r2,16543
10102560:	10102f88 	cmpgei	zero,r2,16574
10102564:	1010312c 	andhi	zero,r2,16580
10102568:	101026a8 	cmpgeui	zero,r2,16538
1010256c:	10102808 	cmpgei	zero,r2,16544
10102570:	1010312c 	andhi	zero,r2,16580
10102574:	10102848 	cmpgei	zero,r2,16545
10102578:	10102854 	ori	zero,r2,16545
1010257c:	10102854 	ori	zero,r2,16545
10102580:	10102854 	ori	zero,r2,16545
10102584:	10102854 	ori	zero,r2,16545
10102588:	10102854 	ori	zero,r2,16545
1010258c:	10102854 	ori	zero,r2,16545
10102590:	10102854 	ori	zero,r2,16545
10102594:	10102854 	ori	zero,r2,16545
10102598:	10102854 	ori	zero,r2,16545
1010259c:	1010312c 	andhi	zero,r2,16580
101025a0:	1010312c 	andhi	zero,r2,16580
101025a4:	1010312c 	andhi	zero,r2,16580
101025a8:	1010312c 	andhi	zero,r2,16580
101025ac:	1010312c 	andhi	zero,r2,16580
101025b0:	1010312c 	andhi	zero,r2,16580
101025b4:	1010312c 	andhi	zero,r2,16580
101025b8:	1010312c 	andhi	zero,r2,16580
101025bc:	1010312c 	andhi	zero,r2,16580
101025c0:	1010312c 	andhi	zero,r2,16580
101025c4:	10102888 	cmpgei	zero,r2,16546
101025c8:	10102944 	addi	zero,r2,16549
101025cc:	1010312c 	andhi	zero,r2,16580
101025d0:	10102944 	addi	zero,r2,16549
101025d4:	1010312c 	andhi	zero,r2,16580
101025d8:	1010312c 	andhi	zero,r2,16580
101025dc:	1010312c 	andhi	zero,r2,16580
101025e0:	1010312c 	andhi	zero,r2,16580
101025e4:	101029e4 	muli	zero,r2,16551
101025e8:	1010312c 	andhi	zero,r2,16580
101025ec:	1010312c 	andhi	zero,r2,16580
101025f0:	101029f0 	cmpltui	zero,r2,16551
101025f4:	1010312c 	andhi	zero,r2,16580
101025f8:	1010312c 	andhi	zero,r2,16580
101025fc:	1010312c 	andhi	zero,r2,16580
10102600:	1010312c 	andhi	zero,r2,16580
10102604:	1010312c 	andhi	zero,r2,16580
10102608:	10102e68 	cmpgeui	zero,r2,16569
1010260c:	1010312c 	andhi	zero,r2,16580
10102610:	1010312c 	andhi	zero,r2,16580
10102614:	10102ec8 	cmpgei	zero,r2,16571
10102618:	1010312c 	andhi	zero,r2,16580
1010261c:	1010312c 	andhi	zero,r2,16580
10102620:	1010312c 	andhi	zero,r2,16580
10102624:	1010312c 	andhi	zero,r2,16580
10102628:	1010312c 	andhi	zero,r2,16580
1010262c:	1010312c 	andhi	zero,r2,16580
10102630:	1010312c 	andhi	zero,r2,16580
10102634:	1010312c 	andhi	zero,r2,16580
10102638:	1010312c 	andhi	zero,r2,16580
1010263c:	1010312c 	andhi	zero,r2,16580
10102640:	101030d8 	cmpnei	zero,r2,16579
10102644:	10103078 	rdprs	zero,r2,16577
10102648:	10102944 	addi	zero,r2,16549
1010264c:	10102944 	addi	zero,r2,16549
10102650:	10102944 	addi	zero,r2,16549
10102654:	10103088 	cmpgei	zero,r2,16578
10102658:	10103078 	rdprs	zero,r2,16577
1010265c:	1010312c 	andhi	zero,r2,16580
10102660:	1010312c 	andhi	zero,r2,16580
10102664:	10103094 	ori	zero,r2,16578
10102668:	1010312c 	andhi	zero,r2,16580
1010266c:	101030a4 	muli	zero,r2,16578
10102670:	10102f78 	rdprs	zero,r2,16573
10102674:	101026b4 	orhi	zero,r2,16538
10102678:	10102f98 	cmpnei	zero,r2,16574
1010267c:	1010312c 	andhi	zero,r2,16580
10102680:	10102fa4 	muli	zero,r2,16574
10102684:	1010312c 	andhi	zero,r2,16580
10102688:	10103000 	call	11010300 <__alt_data_end+0xef0300>
1010268c:	1010312c 	andhi	zero,r2,16580
10102690:	1010312c 	andhi	zero,r2,16580
10102694:	10103010 	cmplti	zero,r2,16576
10102698:	d9003117 	ldw	r4,196(sp)
1010269c:	d8802d15 	stw	r2,180(sp)
101026a0:	0109c83a 	sub	r4,zero,r4
101026a4:	d9003115 	stw	r4,196(sp)
101026a8:	94800114 	ori	r18,r18,4
101026ac:	ac400007 	ldb	r17,0(r21)
101026b0:	003f9706 	br	10102510 <__alt_data_end+0xfffe2510>
101026b4:	00800c04 	movi	r2,48
101026b8:	d9002d17 	ldw	r4,180(sp)
101026bc:	d9402917 	ldw	r5,164(sp)
101026c0:	d8802705 	stb	r2,156(sp)
101026c4:	00801e04 	movi	r2,120
101026c8:	d8802745 	stb	r2,157(sp)
101026cc:	d8002785 	stb	zero,158(sp)
101026d0:	20c00104 	addi	r3,r4,4
101026d4:	24c00017 	ldw	r19,0(r4)
101026d8:	002d883a 	mov	r22,zero
101026dc:	90800094 	ori	r2,r18,2
101026e0:	28029a16 	blt	r5,zero,1010314c <___vfprintf_internal_r+0xdc0>
101026e4:	00bfdfc4 	movi	r2,-129
101026e8:	90a4703a 	and	r18,r18,r2
101026ec:	d8c02d15 	stw	r3,180(sp)
101026f0:	94800094 	ori	r18,r18,2
101026f4:	9802871e 	bne	r19,zero,10103114 <___vfprintf_internal_r+0xd88>
101026f8:	00840474 	movhi	r2,4113
101026fc:	1082e104 	addi	r2,r2,2948
10102700:	d8803915 	stw	r2,228(sp)
10102704:	04401e04 	movi	r17,120
10102708:	d8802917 	ldw	r2,164(sp)
1010270c:	0039883a 	mov	fp,zero
10102710:	1001e926 	beq	r2,zero,10102eb8 <___vfprintf_internal_r+0xb2c>
10102714:	0027883a 	mov	r19,zero
10102718:	002d883a 	mov	r22,zero
1010271c:	00020506 	br	10102f34 <___vfprintf_internal_r+0xba8>
10102720:	d9002c17 	ldw	r4,176(sp)
10102724:	b80b883a 	mov	r5,r23
10102728:	01046bc0 	call	101046bc <__swsetup_r>
1010272c:	1005ac1e 	bne	r2,zero,10103de0 <___vfprintf_internal_r+0x1a54>
10102730:	b880030b 	ldhu	r2,12(r23)
10102734:	00c00284 	movi	r3,10
10102738:	1080068c 	andi	r2,r2,26
1010273c:	10ff3c1e 	bne	r2,r3,10102430 <__alt_data_end+0xfffe2430>
10102740:	b880038f 	ldh	r2,14(r23)
10102744:	103f3a16 	blt	r2,zero,10102430 <__alt_data_end+0xfffe2430>
10102748:	d9c02d17 	ldw	r7,180(sp)
1010274c:	d9002c17 	ldw	r4,176(sp)
10102750:	a80d883a 	mov	r6,r21
10102754:	b80b883a 	mov	r5,r23
10102758:	01045a00 	call	101045a0 <__sbprintf>
1010275c:	00001106 	br	101027a4 <___vfprintf_internal_r+0x418>
10102760:	d9002c17 	ldw	r4,176(sp)
10102764:	d9801e04 	addi	r6,sp,120
10102768:	b80b883a 	mov	r5,r23
1010276c:	01084980 	call	10108498 <__sprint_r>
10102770:	1000081e 	bne	r2,zero,10102794 <___vfprintf_internal_r+0x408>
10102774:	da000404 	addi	r8,sp,16
10102778:	003f5306 	br	101024c8 <__alt_data_end+0xfffe24c8>
1010277c:	d8802017 	ldw	r2,128(sp)
10102780:	10000426 	beq	r2,zero,10102794 <___vfprintf_internal_r+0x408>
10102784:	d9002c17 	ldw	r4,176(sp)
10102788:	d9801e04 	addi	r6,sp,120
1010278c:	b80b883a 	mov	r5,r23
10102790:	01084980 	call	10108498 <__sprint_r>
10102794:	b880030b 	ldhu	r2,12(r23)
10102798:	1080100c 	andi	r2,r2,64
1010279c:	1005901e 	bne	r2,zero,10103de0 <___vfprintf_internal_r+0x1a54>
101027a0:	d8802f17 	ldw	r2,188(sp)
101027a4:	dfc04717 	ldw	ra,284(sp)
101027a8:	df004617 	ldw	fp,280(sp)
101027ac:	ddc04517 	ldw	r23,276(sp)
101027b0:	dd804417 	ldw	r22,272(sp)
101027b4:	dd404317 	ldw	r21,268(sp)
101027b8:	dd004217 	ldw	r20,264(sp)
101027bc:	dcc04117 	ldw	r19,260(sp)
101027c0:	dc804017 	ldw	r18,256(sp)
101027c4:	dc403f17 	ldw	r17,252(sp)
101027c8:	dc003e17 	ldw	r16,248(sp)
101027cc:	dec04804 	addi	sp,sp,288
101027d0:	f800283a 	ret
101027d4:	d9002c17 	ldw	r4,176(sp)
101027d8:	01066e40 	call	101066e4 <__sinit>
101027dc:	003f0406 	br	101023f0 <__alt_data_end+0xfffe23f0>
101027e0:	d8802d17 	ldw	r2,180(sp)
101027e4:	d9002d17 	ldw	r4,180(sp)
101027e8:	10800017 	ldw	r2,0(r2)
101027ec:	d8803115 	stw	r2,196(sp)
101027f0:	20800104 	addi	r2,r4,4
101027f4:	d9003117 	ldw	r4,196(sp)
101027f8:	203fa716 	blt	r4,zero,10102698 <__alt_data_end+0xfffe2698>
101027fc:	d8802d15 	stw	r2,180(sp)
10102800:	ac400007 	ldb	r17,0(r21)
10102804:	003f4206 	br	10102510 <__alt_data_end+0xfffe2510>
10102808:	ac400007 	ldb	r17,0(r21)
1010280c:	aac00044 	addi	r11,r21,1
10102810:	8a872826 	beq	r17,r10,101044b4 <___vfprintf_internal_r+0x2128>
10102814:	88bff404 	addi	r2,r17,-48
10102818:	0009883a 	mov	r4,zero
1010281c:	30867d36 	bltu	r6,r2,10104214 <___vfprintf_internal_r+0x1e88>
10102820:	5c400007 	ldb	r17,0(r11)
10102824:	210002a4 	muli	r4,r4,10
10102828:	5d400044 	addi	r21,r11,1
1010282c:	a817883a 	mov	r11,r21
10102830:	2089883a 	add	r4,r4,r2
10102834:	88bff404 	addi	r2,r17,-48
10102838:	30bff92e 	bgeu	r6,r2,10102820 <__alt_data_end+0xfffe2820>
1010283c:	2005c916 	blt	r4,zero,10103f64 <___vfprintf_internal_r+0x1bd8>
10102840:	d9002915 	stw	r4,164(sp)
10102844:	003f3306 	br	10102514 <__alt_data_end+0xfffe2514>
10102848:	94802014 	ori	r18,r18,128
1010284c:	ac400007 	ldb	r17,0(r21)
10102850:	003f2f06 	br	10102510 <__alt_data_end+0xfffe2510>
10102854:	a809883a 	mov	r4,r21
10102858:	d8003115 	stw	zero,196(sp)
1010285c:	88bff404 	addi	r2,r17,-48
10102860:	0017883a 	mov	r11,zero
10102864:	24400007 	ldb	r17,0(r4)
10102868:	5ac002a4 	muli	r11,r11,10
1010286c:	ad400044 	addi	r21,r21,1
10102870:	a809883a 	mov	r4,r21
10102874:	12d7883a 	add	r11,r2,r11
10102878:	88bff404 	addi	r2,r17,-48
1010287c:	30bff92e 	bgeu	r6,r2,10102864 <__alt_data_end+0xfffe2864>
10102880:	dac03115 	stw	r11,196(sp)
10102884:	003f2306 	br	10102514 <__alt_data_end+0xfffe2514>
10102888:	18c03fcc 	andi	r3,r3,255
1010288c:	18072b1e 	bne	r3,zero,1010453c <___vfprintf_internal_r+0x21b0>
10102890:	94800414 	ori	r18,r18,16
10102894:	9080080c 	andi	r2,r18,32
10102898:	10037b26 	beq	r2,zero,10103688 <___vfprintf_internal_r+0x12fc>
1010289c:	d9402d17 	ldw	r5,180(sp)
101028a0:	28800117 	ldw	r2,4(r5)
101028a4:	2cc00017 	ldw	r19,0(r5)
101028a8:	29400204 	addi	r5,r5,8
101028ac:	d9402d15 	stw	r5,180(sp)
101028b0:	102d883a 	mov	r22,r2
101028b4:	10044b16 	blt	r2,zero,101039e4 <___vfprintf_internal_r+0x1658>
101028b8:	d9402917 	ldw	r5,164(sp)
101028bc:	df002783 	ldbu	fp,158(sp)
101028c0:	2803bc16 	blt	r5,zero,101037b4 <___vfprintf_internal_r+0x1428>
101028c4:	00ffdfc4 	movi	r3,-129
101028c8:	9d84b03a 	or	r2,r19,r22
101028cc:	90e4703a 	and	r18,r18,r3
101028d0:	10017726 	beq	r2,zero,10102eb0 <___vfprintf_internal_r+0xb24>
101028d4:	b0038326 	beq	r22,zero,101036e4 <___vfprintf_internal_r+0x1358>
101028d8:	dc402a15 	stw	r17,168(sp)
101028dc:	dc001e04 	addi	r16,sp,120
101028e0:	b023883a 	mov	r17,r22
101028e4:	402d883a 	mov	r22,r8
101028e8:	9809883a 	mov	r4,r19
101028ec:	880b883a 	mov	r5,r17
101028f0:	01800284 	movi	r6,10
101028f4:	000f883a 	mov	r7,zero
101028f8:	010b1e80 	call	1010b1e8 <__umoddi3>
101028fc:	10800c04 	addi	r2,r2,48
10102900:	843fffc4 	addi	r16,r16,-1
10102904:	9809883a 	mov	r4,r19
10102908:	880b883a 	mov	r5,r17
1010290c:	80800005 	stb	r2,0(r16)
10102910:	01800284 	movi	r6,10
10102914:	000f883a 	mov	r7,zero
10102918:	010ac700 	call	1010ac70 <__udivdi3>
1010291c:	1027883a 	mov	r19,r2
10102920:	10c4b03a 	or	r2,r2,r3
10102924:	1823883a 	mov	r17,r3
10102928:	103fef1e 	bne	r2,zero,101028e8 <__alt_data_end+0xfffe28e8>
1010292c:	d8c02817 	ldw	r3,160(sp)
10102930:	dc402a17 	ldw	r17,168(sp)
10102934:	b011883a 	mov	r8,r22
10102938:	1c07c83a 	sub	r3,r3,r16
1010293c:	d8c02e15 	stw	r3,184(sp)
10102940:	00005906 	br	10102aa8 <___vfprintf_internal_r+0x71c>
10102944:	18c03fcc 	andi	r3,r3,255
10102948:	1806fa1e 	bne	r3,zero,10104534 <___vfprintf_internal_r+0x21a8>
1010294c:	9080020c 	andi	r2,r18,8
10102950:	10048a26 	beq	r2,zero,10103b7c <___vfprintf_internal_r+0x17f0>
10102954:	d8c02d17 	ldw	r3,180(sp)
10102958:	d9002d17 	ldw	r4,180(sp)
1010295c:	d9402d17 	ldw	r5,180(sp)
10102960:	18c00017 	ldw	r3,0(r3)
10102964:	21000117 	ldw	r4,4(r4)
10102968:	29400204 	addi	r5,r5,8
1010296c:	d8c03615 	stw	r3,216(sp)
10102970:	d9003815 	stw	r4,224(sp)
10102974:	d9402d15 	stw	r5,180(sp)
10102978:	d9003617 	ldw	r4,216(sp)
1010297c:	d9403817 	ldw	r5,224(sp)
10102980:	da003d15 	stw	r8,244(sp)
10102984:	04000044 	movi	r16,1
10102988:	01081b40 	call	101081b4 <__fpclassifyd>
1010298c:	da003d17 	ldw	r8,244(sp)
10102990:	14041f1e 	bne	r2,r16,10103a10 <___vfprintf_internal_r+0x1684>
10102994:	d9003617 	ldw	r4,216(sp)
10102998:	d9403817 	ldw	r5,224(sp)
1010299c:	000d883a 	mov	r6,zero
101029a0:	000f883a 	mov	r7,zero
101029a4:	010cbcc0 	call	1010cbcc <__ledf2>
101029a8:	da003d17 	ldw	r8,244(sp)
101029ac:	1005be16 	blt	r2,zero,101040a8 <___vfprintf_internal_r+0x1d1c>
101029b0:	df002783 	ldbu	fp,158(sp)
101029b4:	008011c4 	movi	r2,71
101029b8:	1445330e 	bge	r2,r17,10103e88 <___vfprintf_internal_r+0x1afc>
101029bc:	04040474 	movhi	r16,4113
101029c0:	8402d904 	addi	r16,r16,2916
101029c4:	00c000c4 	movi	r3,3
101029c8:	00bfdfc4 	movi	r2,-129
101029cc:	d8c02a15 	stw	r3,168(sp)
101029d0:	90a4703a 	and	r18,r18,r2
101029d4:	d8c02e15 	stw	r3,184(sp)
101029d8:	d8002915 	stw	zero,164(sp)
101029dc:	d8003215 	stw	zero,200(sp)
101029e0:	00003706 	br	10102ac0 <___vfprintf_internal_r+0x734>
101029e4:	94800214 	ori	r18,r18,8
101029e8:	ac400007 	ldb	r17,0(r21)
101029ec:	003ec806 	br	10102510 <__alt_data_end+0xfffe2510>
101029f0:	18c03fcc 	andi	r3,r3,255
101029f4:	1806db1e 	bne	r3,zero,10104564 <___vfprintf_internal_r+0x21d8>
101029f8:	94800414 	ori	r18,r18,16
101029fc:	9080080c 	andi	r2,r18,32
10102a00:	1002d826 	beq	r2,zero,10103564 <___vfprintf_internal_r+0x11d8>
10102a04:	d9402d17 	ldw	r5,180(sp)
10102a08:	d8c02917 	ldw	r3,164(sp)
10102a0c:	d8002785 	stb	zero,158(sp)
10102a10:	28800204 	addi	r2,r5,8
10102a14:	2cc00017 	ldw	r19,0(r5)
10102a18:	2d800117 	ldw	r22,4(r5)
10102a1c:	18048f16 	blt	r3,zero,10103c5c <___vfprintf_internal_r+0x18d0>
10102a20:	013fdfc4 	movi	r4,-129
10102a24:	9d86b03a 	or	r3,r19,r22
10102a28:	d8802d15 	stw	r2,180(sp)
10102a2c:	9124703a 	and	r18,r18,r4
10102a30:	1802d91e 	bne	r3,zero,10103598 <___vfprintf_internal_r+0x120c>
10102a34:	d8c02917 	ldw	r3,164(sp)
10102a38:	0039883a 	mov	fp,zero
10102a3c:	1805c326 	beq	r3,zero,1010414c <___vfprintf_internal_r+0x1dc0>
10102a40:	0027883a 	mov	r19,zero
10102a44:	002d883a 	mov	r22,zero
10102a48:	dc001e04 	addi	r16,sp,120
10102a4c:	9806d0fa 	srli	r3,r19,3
10102a50:	b008977a 	slli	r4,r22,29
10102a54:	b02cd0fa 	srli	r22,r22,3
10102a58:	9cc001cc 	andi	r19,r19,7
10102a5c:	98800c04 	addi	r2,r19,48
10102a60:	843fffc4 	addi	r16,r16,-1
10102a64:	20e6b03a 	or	r19,r4,r3
10102a68:	80800005 	stb	r2,0(r16)
10102a6c:	9d86b03a 	or	r3,r19,r22
10102a70:	183ff61e 	bne	r3,zero,10102a4c <__alt_data_end+0xfffe2a4c>
10102a74:	90c0004c 	andi	r3,r18,1
10102a78:	18013b26 	beq	r3,zero,10102f68 <___vfprintf_internal_r+0xbdc>
10102a7c:	10803fcc 	andi	r2,r2,255
10102a80:	1080201c 	xori	r2,r2,128
10102a84:	10bfe004 	addi	r2,r2,-128
10102a88:	00c00c04 	movi	r3,48
10102a8c:	10c13626 	beq	r2,r3,10102f68 <___vfprintf_internal_r+0xbdc>
10102a90:	80ffffc5 	stb	r3,-1(r16)
10102a94:	d8c02817 	ldw	r3,160(sp)
10102a98:	80bfffc4 	addi	r2,r16,-1
10102a9c:	1021883a 	mov	r16,r2
10102aa0:	1887c83a 	sub	r3,r3,r2
10102aa4:	d8c02e15 	stw	r3,184(sp)
10102aa8:	d8802e17 	ldw	r2,184(sp)
10102aac:	d9002917 	ldw	r4,164(sp)
10102ab0:	1100010e 	bge	r2,r4,10102ab8 <___vfprintf_internal_r+0x72c>
10102ab4:	2005883a 	mov	r2,r4
10102ab8:	d8802a15 	stw	r2,168(sp)
10102abc:	d8003215 	stw	zero,200(sp)
10102ac0:	e7003fcc 	andi	fp,fp,255
10102ac4:	e700201c 	xori	fp,fp,128
10102ac8:	e73fe004 	addi	fp,fp,-128
10102acc:	e0000326 	beq	fp,zero,10102adc <___vfprintf_internal_r+0x750>
10102ad0:	d8c02a17 	ldw	r3,168(sp)
10102ad4:	18c00044 	addi	r3,r3,1
10102ad8:	d8c02a15 	stw	r3,168(sp)
10102adc:	90c0008c 	andi	r3,r18,2
10102ae0:	d8c02b15 	stw	r3,172(sp)
10102ae4:	18000326 	beq	r3,zero,10102af4 <___vfprintf_internal_r+0x768>
10102ae8:	d8c02a17 	ldw	r3,168(sp)
10102aec:	18c00084 	addi	r3,r3,2
10102af0:	d8c02a15 	stw	r3,168(sp)
10102af4:	90c0210c 	andi	r3,r18,132
10102af8:	d8c03015 	stw	r3,192(sp)
10102afc:	1801a31e 	bne	r3,zero,1010318c <___vfprintf_internal_r+0xe00>
10102b00:	d9003117 	ldw	r4,196(sp)
10102b04:	d8c02a17 	ldw	r3,168(sp)
10102b08:	20e7c83a 	sub	r19,r4,r3
10102b0c:	04c19f0e 	bge	zero,r19,1010318c <___vfprintf_internal_r+0xe00>
10102b10:	02400404 	movi	r9,16
10102b14:	d8c02017 	ldw	r3,128(sp)
10102b18:	d8801f17 	ldw	r2,124(sp)
10102b1c:	4cc50d0e 	bge	r9,r19,10103f54 <___vfprintf_internal_r+0x1bc8>
10102b20:	01440474 	movhi	r5,4113
10102b24:	2942ec84 	addi	r5,r5,2994
10102b28:	dc403b15 	stw	r17,236(sp)
10102b2c:	d9403515 	stw	r5,212(sp)
10102b30:	9823883a 	mov	r17,r19
10102b34:	482d883a 	mov	r22,r9
10102b38:	9027883a 	mov	r19,r18
10102b3c:	070001c4 	movi	fp,7
10102b40:	8025883a 	mov	r18,r16
10102b44:	dc002c17 	ldw	r16,176(sp)
10102b48:	00000306 	br	10102b58 <___vfprintf_internal_r+0x7cc>
10102b4c:	8c7ffc04 	addi	r17,r17,-16
10102b50:	42000204 	addi	r8,r8,8
10102b54:	b440130e 	bge	r22,r17,10102ba4 <___vfprintf_internal_r+0x818>
10102b58:	01040474 	movhi	r4,4113
10102b5c:	18c00404 	addi	r3,r3,16
10102b60:	10800044 	addi	r2,r2,1
10102b64:	2102ec84 	addi	r4,r4,2994
10102b68:	41000015 	stw	r4,0(r8)
10102b6c:	45800115 	stw	r22,4(r8)
10102b70:	d8c02015 	stw	r3,128(sp)
10102b74:	d8801f15 	stw	r2,124(sp)
10102b78:	e0bff40e 	bge	fp,r2,10102b4c <__alt_data_end+0xfffe2b4c>
10102b7c:	d9801e04 	addi	r6,sp,120
10102b80:	b80b883a 	mov	r5,r23
10102b84:	8009883a 	mov	r4,r16
10102b88:	01084980 	call	10108498 <__sprint_r>
10102b8c:	103f011e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10102b90:	8c7ffc04 	addi	r17,r17,-16
10102b94:	d8c02017 	ldw	r3,128(sp)
10102b98:	d8801f17 	ldw	r2,124(sp)
10102b9c:	da000404 	addi	r8,sp,16
10102ba0:	b47fed16 	blt	r22,r17,10102b58 <__alt_data_end+0xfffe2b58>
10102ba4:	9021883a 	mov	r16,r18
10102ba8:	9825883a 	mov	r18,r19
10102bac:	8827883a 	mov	r19,r17
10102bb0:	dc403b17 	ldw	r17,236(sp)
10102bb4:	d9403517 	ldw	r5,212(sp)
10102bb8:	98c7883a 	add	r3,r19,r3
10102bbc:	10800044 	addi	r2,r2,1
10102bc0:	41400015 	stw	r5,0(r8)
10102bc4:	44c00115 	stw	r19,4(r8)
10102bc8:	d8c02015 	stw	r3,128(sp)
10102bcc:	d8801f15 	stw	r2,124(sp)
10102bd0:	010001c4 	movi	r4,7
10102bd4:	2082a316 	blt	r4,r2,10103664 <___vfprintf_internal_r+0x12d8>
10102bd8:	df002787 	ldb	fp,158(sp)
10102bdc:	42000204 	addi	r8,r8,8
10102be0:	e0000c26 	beq	fp,zero,10102c14 <___vfprintf_internal_r+0x888>
10102be4:	d8801f17 	ldw	r2,124(sp)
10102be8:	d9002784 	addi	r4,sp,158
10102bec:	18c00044 	addi	r3,r3,1
10102bf0:	10800044 	addi	r2,r2,1
10102bf4:	41000015 	stw	r4,0(r8)
10102bf8:	01000044 	movi	r4,1
10102bfc:	41000115 	stw	r4,4(r8)
10102c00:	d8c02015 	stw	r3,128(sp)
10102c04:	d8801f15 	stw	r2,124(sp)
10102c08:	010001c4 	movi	r4,7
10102c0c:	20823c16 	blt	r4,r2,10103500 <___vfprintf_internal_r+0x1174>
10102c10:	42000204 	addi	r8,r8,8
10102c14:	d8802b17 	ldw	r2,172(sp)
10102c18:	10000c26 	beq	r2,zero,10102c4c <___vfprintf_internal_r+0x8c0>
10102c1c:	d8801f17 	ldw	r2,124(sp)
10102c20:	d9002704 	addi	r4,sp,156
10102c24:	18c00084 	addi	r3,r3,2
10102c28:	10800044 	addi	r2,r2,1
10102c2c:	41000015 	stw	r4,0(r8)
10102c30:	01000084 	movi	r4,2
10102c34:	41000115 	stw	r4,4(r8)
10102c38:	d8c02015 	stw	r3,128(sp)
10102c3c:	d8801f15 	stw	r2,124(sp)
10102c40:	010001c4 	movi	r4,7
10102c44:	20823616 	blt	r4,r2,10103520 <___vfprintf_internal_r+0x1194>
10102c48:	42000204 	addi	r8,r8,8
10102c4c:	d9003017 	ldw	r4,192(sp)
10102c50:	00802004 	movi	r2,128
10102c54:	20819926 	beq	r4,r2,101032bc <___vfprintf_internal_r+0xf30>
10102c58:	d9402917 	ldw	r5,164(sp)
10102c5c:	d8802e17 	ldw	r2,184(sp)
10102c60:	28adc83a 	sub	r22,r5,r2
10102c64:	0580310e 	bge	zero,r22,10102d2c <___vfprintf_internal_r+0x9a0>
10102c68:	07000404 	movi	fp,16
10102c6c:	d8801f17 	ldw	r2,124(sp)
10102c70:	e584140e 	bge	fp,r22,10103cc4 <___vfprintf_internal_r+0x1938>
10102c74:	01440474 	movhi	r5,4113
10102c78:	2942e884 	addi	r5,r5,2978
10102c7c:	dc402915 	stw	r17,164(sp)
10102c80:	d9402b15 	stw	r5,172(sp)
10102c84:	b023883a 	mov	r17,r22
10102c88:	04c001c4 	movi	r19,7
10102c8c:	a82d883a 	mov	r22,r21
10102c90:	902b883a 	mov	r21,r18
10102c94:	8025883a 	mov	r18,r16
10102c98:	dc002c17 	ldw	r16,176(sp)
10102c9c:	00000306 	br	10102cac <___vfprintf_internal_r+0x920>
10102ca0:	8c7ffc04 	addi	r17,r17,-16
10102ca4:	42000204 	addi	r8,r8,8
10102ca8:	e440110e 	bge	fp,r17,10102cf0 <___vfprintf_internal_r+0x964>
10102cac:	18c00404 	addi	r3,r3,16
10102cb0:	10800044 	addi	r2,r2,1
10102cb4:	45000015 	stw	r20,0(r8)
10102cb8:	47000115 	stw	fp,4(r8)
10102cbc:	d8c02015 	stw	r3,128(sp)
10102cc0:	d8801f15 	stw	r2,124(sp)
10102cc4:	98bff60e 	bge	r19,r2,10102ca0 <__alt_data_end+0xfffe2ca0>
10102cc8:	d9801e04 	addi	r6,sp,120
10102ccc:	b80b883a 	mov	r5,r23
10102cd0:	8009883a 	mov	r4,r16
10102cd4:	01084980 	call	10108498 <__sprint_r>
10102cd8:	103eae1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10102cdc:	8c7ffc04 	addi	r17,r17,-16
10102ce0:	d8c02017 	ldw	r3,128(sp)
10102ce4:	d8801f17 	ldw	r2,124(sp)
10102ce8:	da000404 	addi	r8,sp,16
10102cec:	e47fef16 	blt	fp,r17,10102cac <__alt_data_end+0xfffe2cac>
10102cf0:	9021883a 	mov	r16,r18
10102cf4:	a825883a 	mov	r18,r21
10102cf8:	b02b883a 	mov	r21,r22
10102cfc:	882d883a 	mov	r22,r17
10102d00:	dc402917 	ldw	r17,164(sp)
10102d04:	d9002b17 	ldw	r4,172(sp)
10102d08:	1d87883a 	add	r3,r3,r22
10102d0c:	10800044 	addi	r2,r2,1
10102d10:	41000015 	stw	r4,0(r8)
10102d14:	45800115 	stw	r22,4(r8)
10102d18:	d8c02015 	stw	r3,128(sp)
10102d1c:	d8801f15 	stw	r2,124(sp)
10102d20:	010001c4 	movi	r4,7
10102d24:	2081ee16 	blt	r4,r2,101034e0 <___vfprintf_internal_r+0x1154>
10102d28:	42000204 	addi	r8,r8,8
10102d2c:	9080400c 	andi	r2,r18,256
10102d30:	1001181e 	bne	r2,zero,10103194 <___vfprintf_internal_r+0xe08>
10102d34:	d9402e17 	ldw	r5,184(sp)
10102d38:	d8801f17 	ldw	r2,124(sp)
10102d3c:	44000015 	stw	r16,0(r8)
10102d40:	1947883a 	add	r3,r3,r5
10102d44:	10800044 	addi	r2,r2,1
10102d48:	41400115 	stw	r5,4(r8)
10102d4c:	d8c02015 	stw	r3,128(sp)
10102d50:	d8801f15 	stw	r2,124(sp)
10102d54:	010001c4 	movi	r4,7
10102d58:	2081d316 	blt	r4,r2,101034a8 <___vfprintf_internal_r+0x111c>
10102d5c:	42000204 	addi	r8,r8,8
10102d60:	9480010c 	andi	r18,r18,4
10102d64:	90003226 	beq	r18,zero,10102e30 <___vfprintf_internal_r+0xaa4>
10102d68:	d9403117 	ldw	r5,196(sp)
10102d6c:	d8802a17 	ldw	r2,168(sp)
10102d70:	28a1c83a 	sub	r16,r5,r2
10102d74:	04002e0e 	bge	zero,r16,10102e30 <___vfprintf_internal_r+0xaa4>
10102d78:	04400404 	movi	r17,16
10102d7c:	d8801f17 	ldw	r2,124(sp)
10102d80:	8c04a20e 	bge	r17,r16,1010400c <___vfprintf_internal_r+0x1c80>
10102d84:	01440474 	movhi	r5,4113
10102d88:	2942ec84 	addi	r5,r5,2994
10102d8c:	d9403515 	stw	r5,212(sp)
10102d90:	048001c4 	movi	r18,7
10102d94:	dcc02c17 	ldw	r19,176(sp)
10102d98:	00000306 	br	10102da8 <___vfprintf_internal_r+0xa1c>
10102d9c:	843ffc04 	addi	r16,r16,-16
10102da0:	42000204 	addi	r8,r8,8
10102da4:	8c00130e 	bge	r17,r16,10102df4 <___vfprintf_internal_r+0xa68>
10102da8:	01040474 	movhi	r4,4113
10102dac:	18c00404 	addi	r3,r3,16
10102db0:	10800044 	addi	r2,r2,1
10102db4:	2102ec84 	addi	r4,r4,2994
10102db8:	41000015 	stw	r4,0(r8)
10102dbc:	44400115 	stw	r17,4(r8)
10102dc0:	d8c02015 	stw	r3,128(sp)
10102dc4:	d8801f15 	stw	r2,124(sp)
10102dc8:	90bff40e 	bge	r18,r2,10102d9c <__alt_data_end+0xfffe2d9c>
10102dcc:	d9801e04 	addi	r6,sp,120
10102dd0:	b80b883a 	mov	r5,r23
10102dd4:	9809883a 	mov	r4,r19
10102dd8:	01084980 	call	10108498 <__sprint_r>
10102ddc:	103e6d1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10102de0:	843ffc04 	addi	r16,r16,-16
10102de4:	d8c02017 	ldw	r3,128(sp)
10102de8:	d8801f17 	ldw	r2,124(sp)
10102dec:	da000404 	addi	r8,sp,16
10102df0:	8c3fed16 	blt	r17,r16,10102da8 <__alt_data_end+0xfffe2da8>
10102df4:	d9403517 	ldw	r5,212(sp)
10102df8:	1c07883a 	add	r3,r3,r16
10102dfc:	10800044 	addi	r2,r2,1
10102e00:	41400015 	stw	r5,0(r8)
10102e04:	44000115 	stw	r16,4(r8)
10102e08:	d8c02015 	stw	r3,128(sp)
10102e0c:	d8801f15 	stw	r2,124(sp)
10102e10:	010001c4 	movi	r4,7
10102e14:	2080060e 	bge	r4,r2,10102e30 <___vfprintf_internal_r+0xaa4>
10102e18:	d9002c17 	ldw	r4,176(sp)
10102e1c:	d9801e04 	addi	r6,sp,120
10102e20:	b80b883a 	mov	r5,r23
10102e24:	01084980 	call	10108498 <__sprint_r>
10102e28:	103e5a1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10102e2c:	d8c02017 	ldw	r3,128(sp)
10102e30:	d8803117 	ldw	r2,196(sp)
10102e34:	d9002a17 	ldw	r4,168(sp)
10102e38:	1100010e 	bge	r2,r4,10102e40 <___vfprintf_internal_r+0xab4>
10102e3c:	2005883a 	mov	r2,r4
10102e40:	d9402f17 	ldw	r5,188(sp)
10102e44:	288b883a 	add	r5,r5,r2
10102e48:	d9402f15 	stw	r5,188(sp)
10102e4c:	18019e1e 	bne	r3,zero,101034c8 <___vfprintf_internal_r+0x113c>
10102e50:	a8800007 	ldb	r2,0(r21)
10102e54:	d8001f15 	stw	zero,124(sp)
10102e58:	da000404 	addi	r8,sp,16
10102e5c:	103d851e 	bne	r2,zero,10102474 <__alt_data_end+0xfffe2474>
10102e60:	a821883a 	mov	r16,r21
10102e64:	003d9b06 	br	101024d4 <__alt_data_end+0xfffe24d4>
10102e68:	18c03fcc 	andi	r3,r3,255
10102e6c:	1805c11e 	bne	r3,zero,10104574 <___vfprintf_internal_r+0x21e8>
10102e70:	94800414 	ori	r18,r18,16
10102e74:	9080080c 	andi	r2,r18,32
10102e78:	10020c26 	beq	r2,zero,101036ac <___vfprintf_internal_r+0x1320>
10102e7c:	d8802d17 	ldw	r2,180(sp)
10102e80:	d9002917 	ldw	r4,164(sp)
10102e84:	d8002785 	stb	zero,158(sp)
10102e88:	10c00204 	addi	r3,r2,8
10102e8c:	14c00017 	ldw	r19,0(r2)
10102e90:	15800117 	ldw	r22,4(r2)
10102e94:	20040f16 	blt	r4,zero,10103ed4 <___vfprintf_internal_r+0x1b48>
10102e98:	013fdfc4 	movi	r4,-129
10102e9c:	9d84b03a 	or	r2,r19,r22
10102ea0:	d8c02d15 	stw	r3,180(sp)
10102ea4:	9124703a 	and	r18,r18,r4
10102ea8:	0039883a 	mov	fp,zero
10102eac:	103e891e 	bne	r2,zero,101028d4 <__alt_data_end+0xfffe28d4>
10102eb0:	d9002917 	ldw	r4,164(sp)
10102eb4:	2002c11e 	bne	r4,zero,101039bc <___vfprintf_internal_r+0x1630>
10102eb8:	d8002915 	stw	zero,164(sp)
10102ebc:	d8002e15 	stw	zero,184(sp)
10102ec0:	dc001e04 	addi	r16,sp,120
10102ec4:	003ef806 	br	10102aa8 <__alt_data_end+0xfffe2aa8>
10102ec8:	18c03fcc 	andi	r3,r3,255
10102ecc:	18059d1e 	bne	r3,zero,10104544 <___vfprintf_internal_r+0x21b8>
10102ed0:	01440474 	movhi	r5,4113
10102ed4:	2942dc04 	addi	r5,r5,2928
10102ed8:	d9403915 	stw	r5,228(sp)
10102edc:	9080080c 	andi	r2,r18,32
10102ee0:	10005226 	beq	r2,zero,1010302c <___vfprintf_internal_r+0xca0>
10102ee4:	d8802d17 	ldw	r2,180(sp)
10102ee8:	14c00017 	ldw	r19,0(r2)
10102eec:	15800117 	ldw	r22,4(r2)
10102ef0:	10800204 	addi	r2,r2,8
10102ef4:	d8802d15 	stw	r2,180(sp)
10102ef8:	9080004c 	andi	r2,r18,1
10102efc:	10019026 	beq	r2,zero,10103540 <___vfprintf_internal_r+0x11b4>
10102f00:	9d84b03a 	or	r2,r19,r22
10102f04:	10036926 	beq	r2,zero,10103cac <___vfprintf_internal_r+0x1920>
10102f08:	d8c02917 	ldw	r3,164(sp)
10102f0c:	00800c04 	movi	r2,48
10102f10:	d8802705 	stb	r2,156(sp)
10102f14:	dc402745 	stb	r17,157(sp)
10102f18:	d8002785 	stb	zero,158(sp)
10102f1c:	90800094 	ori	r2,r18,2
10102f20:	18045d16 	blt	r3,zero,10104098 <___vfprintf_internal_r+0x1d0c>
10102f24:	00bfdfc4 	movi	r2,-129
10102f28:	90a4703a 	and	r18,r18,r2
10102f2c:	94800094 	ori	r18,r18,2
10102f30:	0039883a 	mov	fp,zero
10102f34:	d9003917 	ldw	r4,228(sp)
10102f38:	dc001e04 	addi	r16,sp,120
10102f3c:	988003cc 	andi	r2,r19,15
10102f40:	b006973a 	slli	r3,r22,28
10102f44:	2085883a 	add	r2,r4,r2
10102f48:	9826d13a 	srli	r19,r19,4
10102f4c:	10800003 	ldbu	r2,0(r2)
10102f50:	b02cd13a 	srli	r22,r22,4
10102f54:	843fffc4 	addi	r16,r16,-1
10102f58:	1ce6b03a 	or	r19,r3,r19
10102f5c:	80800005 	stb	r2,0(r16)
10102f60:	9d84b03a 	or	r2,r19,r22
10102f64:	103ff51e 	bne	r2,zero,10102f3c <__alt_data_end+0xfffe2f3c>
10102f68:	d8c02817 	ldw	r3,160(sp)
10102f6c:	1c07c83a 	sub	r3,r3,r16
10102f70:	d8c02e15 	stw	r3,184(sp)
10102f74:	003ecc06 	br	10102aa8 <__alt_data_end+0xfffe2aa8>
10102f78:	18c03fcc 	andi	r3,r3,255
10102f7c:	183e9f26 	beq	r3,zero,101029fc <__alt_data_end+0xfffe29fc>
10102f80:	d9c02785 	stb	r7,158(sp)
10102f84:	003e9d06 	br	101029fc <__alt_data_end+0xfffe29fc>
10102f88:	00c00044 	movi	r3,1
10102f8c:	01c00ac4 	movi	r7,43
10102f90:	ac400007 	ldb	r17,0(r21)
10102f94:	003d5e06 	br	10102510 <__alt_data_end+0xfffe2510>
10102f98:	94800814 	ori	r18,r18,32
10102f9c:	ac400007 	ldb	r17,0(r21)
10102fa0:	003d5b06 	br	10102510 <__alt_data_end+0xfffe2510>
10102fa4:	d8c02d17 	ldw	r3,180(sp)
10102fa8:	d8002785 	stb	zero,158(sp)
10102fac:	1c000017 	ldw	r16,0(r3)
10102fb0:	1cc00104 	addi	r19,r3,4
10102fb4:	80041926 	beq	r16,zero,1010401c <___vfprintf_internal_r+0x1c90>
10102fb8:	d9002917 	ldw	r4,164(sp)
10102fbc:	2003d016 	blt	r4,zero,10103f00 <___vfprintf_internal_r+0x1b74>
10102fc0:	200d883a 	mov	r6,r4
10102fc4:	000b883a 	mov	r5,zero
10102fc8:	8009883a 	mov	r4,r16
10102fcc:	da003d15 	stw	r8,244(sp)
10102fd0:	0106f2c0 	call	10106f2c <memchr>
10102fd4:	da003d17 	ldw	r8,244(sp)
10102fd8:	10045426 	beq	r2,zero,1010412c <___vfprintf_internal_r+0x1da0>
10102fdc:	1405c83a 	sub	r2,r2,r16
10102fe0:	d8802e15 	stw	r2,184(sp)
10102fe4:	1003cc16 	blt	r2,zero,10103f18 <___vfprintf_internal_r+0x1b8c>
10102fe8:	df002783 	ldbu	fp,158(sp)
10102fec:	d8802a15 	stw	r2,168(sp)
10102ff0:	dcc02d15 	stw	r19,180(sp)
10102ff4:	d8002915 	stw	zero,164(sp)
10102ff8:	d8003215 	stw	zero,200(sp)
10102ffc:	003eb006 	br	10102ac0 <__alt_data_end+0xfffe2ac0>
10103000:	18c03fcc 	andi	r3,r3,255
10103004:	183f9b26 	beq	r3,zero,10102e74 <__alt_data_end+0xfffe2e74>
10103008:	d9c02785 	stb	r7,158(sp)
1010300c:	003f9906 	br	10102e74 <__alt_data_end+0xfffe2e74>
10103010:	18c03fcc 	andi	r3,r3,255
10103014:	1805551e 	bne	r3,zero,1010456c <___vfprintf_internal_r+0x21e0>
10103018:	01440474 	movhi	r5,4113
1010301c:	2942e104 	addi	r5,r5,2948
10103020:	d9403915 	stw	r5,228(sp)
10103024:	9080080c 	andi	r2,r18,32
10103028:	103fae1e 	bne	r2,zero,10102ee4 <__alt_data_end+0xfffe2ee4>
1010302c:	9080040c 	andi	r2,r18,16
10103030:	1002de26 	beq	r2,zero,10103bac <___vfprintf_internal_r+0x1820>
10103034:	d8c02d17 	ldw	r3,180(sp)
10103038:	002d883a 	mov	r22,zero
1010303c:	1cc00017 	ldw	r19,0(r3)
10103040:	18c00104 	addi	r3,r3,4
10103044:	d8c02d15 	stw	r3,180(sp)
10103048:	003fab06 	br	10102ef8 <__alt_data_end+0xfffe2ef8>
1010304c:	38803fcc 	andi	r2,r7,255
10103050:	1080201c 	xori	r2,r2,128
10103054:	10bfe004 	addi	r2,r2,-128
10103058:	1002d21e 	bne	r2,zero,10103ba4 <___vfprintf_internal_r+0x1818>
1010305c:	00c00044 	movi	r3,1
10103060:	01c00804 	movi	r7,32
10103064:	ac400007 	ldb	r17,0(r21)
10103068:	003d2906 	br	10102510 <__alt_data_end+0xfffe2510>
1010306c:	94800054 	ori	r18,r18,1
10103070:	ac400007 	ldb	r17,0(r21)
10103074:	003d2606 	br	10102510 <__alt_data_end+0xfffe2510>
10103078:	18c03fcc 	andi	r3,r3,255
1010307c:	183e0526 	beq	r3,zero,10102894 <__alt_data_end+0xfffe2894>
10103080:	d9c02785 	stb	r7,158(sp)
10103084:	003e0306 	br	10102894 <__alt_data_end+0xfffe2894>
10103088:	94801014 	ori	r18,r18,64
1010308c:	ac400007 	ldb	r17,0(r21)
10103090:	003d1f06 	br	10102510 <__alt_data_end+0xfffe2510>
10103094:	ac400007 	ldb	r17,0(r21)
10103098:	8a438726 	beq	r17,r9,10103eb8 <___vfprintf_internal_r+0x1b2c>
1010309c:	94800414 	ori	r18,r18,16
101030a0:	003d1b06 	br	10102510 <__alt_data_end+0xfffe2510>
101030a4:	18c03fcc 	andi	r3,r3,255
101030a8:	1805341e 	bne	r3,zero,1010457c <___vfprintf_internal_r+0x21f0>
101030ac:	9080080c 	andi	r2,r18,32
101030b0:	1002cd26 	beq	r2,zero,10103be8 <___vfprintf_internal_r+0x185c>
101030b4:	d9402d17 	ldw	r5,180(sp)
101030b8:	d9002f17 	ldw	r4,188(sp)
101030bc:	28800017 	ldw	r2,0(r5)
101030c0:	2007d7fa 	srai	r3,r4,31
101030c4:	29400104 	addi	r5,r5,4
101030c8:	d9402d15 	stw	r5,180(sp)
101030cc:	11000015 	stw	r4,0(r2)
101030d0:	10c00115 	stw	r3,4(r2)
101030d4:	003ce506 	br	1010246c <__alt_data_end+0xfffe246c>
101030d8:	d8c02d17 	ldw	r3,180(sp)
101030dc:	d9002d17 	ldw	r4,180(sp)
101030e0:	d8002785 	stb	zero,158(sp)
101030e4:	18800017 	ldw	r2,0(r3)
101030e8:	21000104 	addi	r4,r4,4
101030ec:	00c00044 	movi	r3,1
101030f0:	d8c02a15 	stw	r3,168(sp)
101030f4:	d8801405 	stb	r2,80(sp)
101030f8:	d9002d15 	stw	r4,180(sp)
101030fc:	d8c02e15 	stw	r3,184(sp)
10103100:	d8002915 	stw	zero,164(sp)
10103104:	d8003215 	stw	zero,200(sp)
10103108:	dc001404 	addi	r16,sp,80
1010310c:	0039883a 	mov	fp,zero
10103110:	003e7206 	br	10102adc <__alt_data_end+0xfffe2adc>
10103114:	01040474 	movhi	r4,4113
10103118:	2102e104 	addi	r4,r4,2948
1010311c:	0039883a 	mov	fp,zero
10103120:	d9003915 	stw	r4,228(sp)
10103124:	04401e04 	movi	r17,120
10103128:	003f8206 	br	10102f34 <__alt_data_end+0xfffe2f34>
1010312c:	18c03fcc 	andi	r3,r3,255
10103130:	1805061e 	bne	r3,zero,1010454c <___vfprintf_internal_r+0x21c0>
10103134:	883d9126 	beq	r17,zero,1010277c <__alt_data_end+0xfffe277c>
10103138:	00c00044 	movi	r3,1
1010313c:	d8c02a15 	stw	r3,168(sp)
10103140:	dc401405 	stb	r17,80(sp)
10103144:	d8002785 	stb	zero,158(sp)
10103148:	003fec06 	br	101030fc <__alt_data_end+0xfffe30fc>
1010314c:	01440474 	movhi	r5,4113
10103150:	2942e104 	addi	r5,r5,2948
10103154:	d9403915 	stw	r5,228(sp)
10103158:	d8c02d15 	stw	r3,180(sp)
1010315c:	1025883a 	mov	r18,r2
10103160:	04401e04 	movi	r17,120
10103164:	9d84b03a 	or	r2,r19,r22
10103168:	1000fc1e 	bne	r2,zero,1010355c <___vfprintf_internal_r+0x11d0>
1010316c:	0039883a 	mov	fp,zero
10103170:	00800084 	movi	r2,2
10103174:	10803fcc 	andi	r2,r2,255
10103178:	00c00044 	movi	r3,1
1010317c:	10c20f26 	beq	r2,r3,101039bc <___vfprintf_internal_r+0x1630>
10103180:	00c00084 	movi	r3,2
10103184:	10fd6326 	beq	r2,r3,10102714 <__alt_data_end+0xfffe2714>
10103188:	003e2d06 	br	10102a40 <__alt_data_end+0xfffe2a40>
1010318c:	d8c02017 	ldw	r3,128(sp)
10103190:	003e9306 	br	10102be0 <__alt_data_end+0xfffe2be0>
10103194:	00801944 	movi	r2,101
10103198:	14407e0e 	bge	r2,r17,10103394 <___vfprintf_internal_r+0x1008>
1010319c:	d9003617 	ldw	r4,216(sp)
101031a0:	d9403817 	ldw	r5,224(sp)
101031a4:	000d883a 	mov	r6,zero
101031a8:	000f883a 	mov	r7,zero
101031ac:	d8c03c15 	stw	r3,240(sp)
101031b0:	da003d15 	stw	r8,244(sp)
101031b4:	010ca680 	call	1010ca68 <__eqdf2>
101031b8:	d8c03c17 	ldw	r3,240(sp)
101031bc:	da003d17 	ldw	r8,244(sp)
101031c0:	1000f71e 	bne	r2,zero,101035a0 <___vfprintf_internal_r+0x1214>
101031c4:	d8801f17 	ldw	r2,124(sp)
101031c8:	01040474 	movhi	r4,4113
101031cc:	2102e804 	addi	r4,r4,2976
101031d0:	18c00044 	addi	r3,r3,1
101031d4:	10800044 	addi	r2,r2,1
101031d8:	41000015 	stw	r4,0(r8)
101031dc:	01000044 	movi	r4,1
101031e0:	41000115 	stw	r4,4(r8)
101031e4:	d8c02015 	stw	r3,128(sp)
101031e8:	d8801f15 	stw	r2,124(sp)
101031ec:	010001c4 	movi	r4,7
101031f0:	2082b816 	blt	r4,r2,10103cd4 <___vfprintf_internal_r+0x1948>
101031f4:	42000204 	addi	r8,r8,8
101031f8:	d8802617 	ldw	r2,152(sp)
101031fc:	d9403317 	ldw	r5,204(sp)
10103200:	11400216 	blt	r2,r5,1010320c <___vfprintf_internal_r+0xe80>
10103204:	9080004c 	andi	r2,r18,1
10103208:	103ed526 	beq	r2,zero,10102d60 <__alt_data_end+0xfffe2d60>
1010320c:	d8803717 	ldw	r2,220(sp)
10103210:	d9003417 	ldw	r4,208(sp)
10103214:	d9403717 	ldw	r5,220(sp)
10103218:	1887883a 	add	r3,r3,r2
1010321c:	d8801f17 	ldw	r2,124(sp)
10103220:	41000015 	stw	r4,0(r8)
10103224:	41400115 	stw	r5,4(r8)
10103228:	10800044 	addi	r2,r2,1
1010322c:	d8c02015 	stw	r3,128(sp)
10103230:	d8801f15 	stw	r2,124(sp)
10103234:	010001c4 	movi	r4,7
10103238:	20832916 	blt	r4,r2,10103ee0 <___vfprintf_internal_r+0x1b54>
1010323c:	42000204 	addi	r8,r8,8
10103240:	d8803317 	ldw	r2,204(sp)
10103244:	143fffc4 	addi	r16,r2,-1
10103248:	043ec50e 	bge	zero,r16,10102d60 <__alt_data_end+0xfffe2d60>
1010324c:	04400404 	movi	r17,16
10103250:	d8801f17 	ldw	r2,124(sp)
10103254:	8c00880e 	bge	r17,r16,10103478 <___vfprintf_internal_r+0x10ec>
10103258:	01440474 	movhi	r5,4113
1010325c:	2942e884 	addi	r5,r5,2978
10103260:	d9402b15 	stw	r5,172(sp)
10103264:	058001c4 	movi	r22,7
10103268:	dcc02c17 	ldw	r19,176(sp)
1010326c:	00000306 	br	1010327c <___vfprintf_internal_r+0xef0>
10103270:	42000204 	addi	r8,r8,8
10103274:	843ffc04 	addi	r16,r16,-16
10103278:	8c00820e 	bge	r17,r16,10103484 <___vfprintf_internal_r+0x10f8>
1010327c:	18c00404 	addi	r3,r3,16
10103280:	10800044 	addi	r2,r2,1
10103284:	45000015 	stw	r20,0(r8)
10103288:	44400115 	stw	r17,4(r8)
1010328c:	d8c02015 	stw	r3,128(sp)
10103290:	d8801f15 	stw	r2,124(sp)
10103294:	b0bff60e 	bge	r22,r2,10103270 <__alt_data_end+0xfffe3270>
10103298:	d9801e04 	addi	r6,sp,120
1010329c:	b80b883a 	mov	r5,r23
101032a0:	9809883a 	mov	r4,r19
101032a4:	01084980 	call	10108498 <__sprint_r>
101032a8:	103d3a1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101032ac:	d8c02017 	ldw	r3,128(sp)
101032b0:	d8801f17 	ldw	r2,124(sp)
101032b4:	da000404 	addi	r8,sp,16
101032b8:	003fee06 	br	10103274 <__alt_data_end+0xfffe3274>
101032bc:	d9403117 	ldw	r5,196(sp)
101032c0:	d8802a17 	ldw	r2,168(sp)
101032c4:	28adc83a 	sub	r22,r5,r2
101032c8:	05be630e 	bge	zero,r22,10102c58 <__alt_data_end+0xfffe2c58>
101032cc:	07000404 	movi	fp,16
101032d0:	d8801f17 	ldw	r2,124(sp)
101032d4:	e5838f0e 	bge	fp,r22,10104114 <___vfprintf_internal_r+0x1d88>
101032d8:	01440474 	movhi	r5,4113
101032dc:	2942e884 	addi	r5,r5,2978
101032e0:	dc403015 	stw	r17,192(sp)
101032e4:	d9402b15 	stw	r5,172(sp)
101032e8:	b023883a 	mov	r17,r22
101032ec:	04c001c4 	movi	r19,7
101032f0:	a82d883a 	mov	r22,r21
101032f4:	902b883a 	mov	r21,r18
101032f8:	8025883a 	mov	r18,r16
101032fc:	dc002c17 	ldw	r16,176(sp)
10103300:	00000306 	br	10103310 <___vfprintf_internal_r+0xf84>
10103304:	8c7ffc04 	addi	r17,r17,-16
10103308:	42000204 	addi	r8,r8,8
1010330c:	e440110e 	bge	fp,r17,10103354 <___vfprintf_internal_r+0xfc8>
10103310:	18c00404 	addi	r3,r3,16
10103314:	10800044 	addi	r2,r2,1
10103318:	45000015 	stw	r20,0(r8)
1010331c:	47000115 	stw	fp,4(r8)
10103320:	d8c02015 	stw	r3,128(sp)
10103324:	d8801f15 	stw	r2,124(sp)
10103328:	98bff60e 	bge	r19,r2,10103304 <__alt_data_end+0xfffe3304>
1010332c:	d9801e04 	addi	r6,sp,120
10103330:	b80b883a 	mov	r5,r23
10103334:	8009883a 	mov	r4,r16
10103338:	01084980 	call	10108498 <__sprint_r>
1010333c:	103d151e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103340:	8c7ffc04 	addi	r17,r17,-16
10103344:	d8c02017 	ldw	r3,128(sp)
10103348:	d8801f17 	ldw	r2,124(sp)
1010334c:	da000404 	addi	r8,sp,16
10103350:	e47fef16 	blt	fp,r17,10103310 <__alt_data_end+0xfffe3310>
10103354:	9021883a 	mov	r16,r18
10103358:	a825883a 	mov	r18,r21
1010335c:	b02b883a 	mov	r21,r22
10103360:	882d883a 	mov	r22,r17
10103364:	dc403017 	ldw	r17,192(sp)
10103368:	d9002b17 	ldw	r4,172(sp)
1010336c:	1d87883a 	add	r3,r3,r22
10103370:	10800044 	addi	r2,r2,1
10103374:	41000015 	stw	r4,0(r8)
10103378:	45800115 	stw	r22,4(r8)
1010337c:	d8c02015 	stw	r3,128(sp)
10103380:	d8801f15 	stw	r2,124(sp)
10103384:	010001c4 	movi	r4,7
10103388:	20818e16 	blt	r4,r2,101039c4 <___vfprintf_internal_r+0x1638>
1010338c:	42000204 	addi	r8,r8,8
10103390:	003e3106 	br	10102c58 <__alt_data_end+0xfffe2c58>
10103394:	d9403317 	ldw	r5,204(sp)
10103398:	00800044 	movi	r2,1
1010339c:	18c00044 	addi	r3,r3,1
101033a0:	1141530e 	bge	r2,r5,101038f0 <___vfprintf_internal_r+0x1564>
101033a4:	dc401f17 	ldw	r17,124(sp)
101033a8:	00800044 	movi	r2,1
101033ac:	40800115 	stw	r2,4(r8)
101033b0:	8c400044 	addi	r17,r17,1
101033b4:	44000015 	stw	r16,0(r8)
101033b8:	d8c02015 	stw	r3,128(sp)
101033bc:	dc401f15 	stw	r17,124(sp)
101033c0:	008001c4 	movi	r2,7
101033c4:	14416b16 	blt	r2,r17,10103974 <___vfprintf_internal_r+0x15e8>
101033c8:	42000204 	addi	r8,r8,8
101033cc:	d8803717 	ldw	r2,220(sp)
101033d0:	d9003417 	ldw	r4,208(sp)
101033d4:	8c400044 	addi	r17,r17,1
101033d8:	10c7883a 	add	r3,r2,r3
101033dc:	40800115 	stw	r2,4(r8)
101033e0:	41000015 	stw	r4,0(r8)
101033e4:	d8c02015 	stw	r3,128(sp)
101033e8:	dc401f15 	stw	r17,124(sp)
101033ec:	008001c4 	movi	r2,7
101033f0:	14416916 	blt	r2,r17,10103998 <___vfprintf_internal_r+0x160c>
101033f4:	45800204 	addi	r22,r8,8
101033f8:	d9003617 	ldw	r4,216(sp)
101033fc:	d9403817 	ldw	r5,224(sp)
10103400:	000d883a 	mov	r6,zero
10103404:	000f883a 	mov	r7,zero
10103408:	d8c03c15 	stw	r3,240(sp)
1010340c:	010ca680 	call	1010ca68 <__eqdf2>
10103410:	d8c03c17 	ldw	r3,240(sp)
10103414:	1000bc26 	beq	r2,zero,10103708 <___vfprintf_internal_r+0x137c>
10103418:	d9403317 	ldw	r5,204(sp)
1010341c:	84000044 	addi	r16,r16,1
10103420:	8c400044 	addi	r17,r17,1
10103424:	28bfffc4 	addi	r2,r5,-1
10103428:	1887883a 	add	r3,r3,r2
1010342c:	b0800115 	stw	r2,4(r22)
10103430:	b4000015 	stw	r16,0(r22)
10103434:	d8c02015 	stw	r3,128(sp)
10103438:	dc401f15 	stw	r17,124(sp)
1010343c:	008001c4 	movi	r2,7
10103440:	14414316 	blt	r2,r17,10103950 <___vfprintf_internal_r+0x15c4>
10103444:	b5800204 	addi	r22,r22,8
10103448:	d9003a17 	ldw	r4,232(sp)
1010344c:	df0022c4 	addi	fp,sp,139
10103450:	8c400044 	addi	r17,r17,1
10103454:	20c7883a 	add	r3,r4,r3
10103458:	b7000015 	stw	fp,0(r22)
1010345c:	b1000115 	stw	r4,4(r22)
10103460:	d8c02015 	stw	r3,128(sp)
10103464:	dc401f15 	stw	r17,124(sp)
10103468:	008001c4 	movi	r2,7
1010346c:	14400e16 	blt	r2,r17,101034a8 <___vfprintf_internal_r+0x111c>
10103470:	b2000204 	addi	r8,r22,8
10103474:	003e3a06 	br	10102d60 <__alt_data_end+0xfffe2d60>
10103478:	01040474 	movhi	r4,4113
1010347c:	2102e884 	addi	r4,r4,2978
10103480:	d9002b15 	stw	r4,172(sp)
10103484:	d9002b17 	ldw	r4,172(sp)
10103488:	1c07883a 	add	r3,r3,r16
1010348c:	44000115 	stw	r16,4(r8)
10103490:	41000015 	stw	r4,0(r8)
10103494:	10800044 	addi	r2,r2,1
10103498:	d8c02015 	stw	r3,128(sp)
1010349c:	d8801f15 	stw	r2,124(sp)
101034a0:	010001c4 	movi	r4,7
101034a4:	20be2d0e 	bge	r4,r2,10102d5c <__alt_data_end+0xfffe2d5c>
101034a8:	d9002c17 	ldw	r4,176(sp)
101034ac:	d9801e04 	addi	r6,sp,120
101034b0:	b80b883a 	mov	r5,r23
101034b4:	01084980 	call	10108498 <__sprint_r>
101034b8:	103cb61e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101034bc:	d8c02017 	ldw	r3,128(sp)
101034c0:	da000404 	addi	r8,sp,16
101034c4:	003e2606 	br	10102d60 <__alt_data_end+0xfffe2d60>
101034c8:	d9002c17 	ldw	r4,176(sp)
101034cc:	d9801e04 	addi	r6,sp,120
101034d0:	b80b883a 	mov	r5,r23
101034d4:	01084980 	call	10108498 <__sprint_r>
101034d8:	103e5d26 	beq	r2,zero,10102e50 <__alt_data_end+0xfffe2e50>
101034dc:	003cad06 	br	10102794 <__alt_data_end+0xfffe2794>
101034e0:	d9002c17 	ldw	r4,176(sp)
101034e4:	d9801e04 	addi	r6,sp,120
101034e8:	b80b883a 	mov	r5,r23
101034ec:	01084980 	call	10108498 <__sprint_r>
101034f0:	103ca81e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101034f4:	d8c02017 	ldw	r3,128(sp)
101034f8:	da000404 	addi	r8,sp,16
101034fc:	003e0b06 	br	10102d2c <__alt_data_end+0xfffe2d2c>
10103500:	d9002c17 	ldw	r4,176(sp)
10103504:	d9801e04 	addi	r6,sp,120
10103508:	b80b883a 	mov	r5,r23
1010350c:	01084980 	call	10108498 <__sprint_r>
10103510:	103ca01e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103514:	d8c02017 	ldw	r3,128(sp)
10103518:	da000404 	addi	r8,sp,16
1010351c:	003dbd06 	br	10102c14 <__alt_data_end+0xfffe2c14>
10103520:	d9002c17 	ldw	r4,176(sp)
10103524:	d9801e04 	addi	r6,sp,120
10103528:	b80b883a 	mov	r5,r23
1010352c:	01084980 	call	10108498 <__sprint_r>
10103530:	103c981e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103534:	d8c02017 	ldw	r3,128(sp)
10103538:	da000404 	addi	r8,sp,16
1010353c:	003dc306 	br	10102c4c <__alt_data_end+0xfffe2c4c>
10103540:	d8802917 	ldw	r2,164(sp)
10103544:	d8002785 	stb	zero,158(sp)
10103548:	103f0616 	blt	r2,zero,10103164 <__alt_data_end+0xfffe3164>
1010354c:	00ffdfc4 	movi	r3,-129
10103550:	9d84b03a 	or	r2,r19,r22
10103554:	90e4703a 	and	r18,r18,r3
10103558:	103c6b26 	beq	r2,zero,10102708 <__alt_data_end+0xfffe2708>
1010355c:	0039883a 	mov	fp,zero
10103560:	003e7406 	br	10102f34 <__alt_data_end+0xfffe2f34>
10103564:	9080040c 	andi	r2,r18,16
10103568:	1001b326 	beq	r2,zero,10103c38 <___vfprintf_internal_r+0x18ac>
1010356c:	d9002d17 	ldw	r4,180(sp)
10103570:	d9402917 	ldw	r5,164(sp)
10103574:	d8002785 	stb	zero,158(sp)
10103578:	20800104 	addi	r2,r4,4
1010357c:	24c00017 	ldw	r19,0(r4)
10103580:	002d883a 	mov	r22,zero
10103584:	2801b516 	blt	r5,zero,10103c5c <___vfprintf_internal_r+0x18d0>
10103588:	00ffdfc4 	movi	r3,-129
1010358c:	d8802d15 	stw	r2,180(sp)
10103590:	90e4703a 	and	r18,r18,r3
10103594:	983d2726 	beq	r19,zero,10102a34 <__alt_data_end+0xfffe2a34>
10103598:	0039883a 	mov	fp,zero
1010359c:	003d2a06 	br	10102a48 <__alt_data_end+0xfffe2a48>
101035a0:	dc402617 	ldw	r17,152(sp)
101035a4:	0441d30e 	bge	zero,r17,10103cf4 <___vfprintf_internal_r+0x1968>
101035a8:	dc403217 	ldw	r17,200(sp)
101035ac:	d8803317 	ldw	r2,204(sp)
101035b0:	1440010e 	bge	r2,r17,101035b8 <___vfprintf_internal_r+0x122c>
101035b4:	1023883a 	mov	r17,r2
101035b8:	04400a0e 	bge	zero,r17,101035e4 <___vfprintf_internal_r+0x1258>
101035bc:	d8801f17 	ldw	r2,124(sp)
101035c0:	1c47883a 	add	r3,r3,r17
101035c4:	44000015 	stw	r16,0(r8)
101035c8:	10800044 	addi	r2,r2,1
101035cc:	44400115 	stw	r17,4(r8)
101035d0:	d8c02015 	stw	r3,128(sp)
101035d4:	d8801f15 	stw	r2,124(sp)
101035d8:	010001c4 	movi	r4,7
101035dc:	20826516 	blt	r4,r2,10103f74 <___vfprintf_internal_r+0x1be8>
101035e0:	42000204 	addi	r8,r8,8
101035e4:	88026116 	blt	r17,zero,10103f6c <___vfprintf_internal_r+0x1be0>
101035e8:	d9003217 	ldw	r4,200(sp)
101035ec:	2463c83a 	sub	r17,r4,r17
101035f0:	04407b0e 	bge	zero,r17,101037e0 <___vfprintf_internal_r+0x1454>
101035f4:	05800404 	movi	r22,16
101035f8:	d8801f17 	ldw	r2,124(sp)
101035fc:	b4419d0e 	bge	r22,r17,10103c74 <___vfprintf_internal_r+0x18e8>
10103600:	01040474 	movhi	r4,4113
10103604:	2102e884 	addi	r4,r4,2978
10103608:	d9002b15 	stw	r4,172(sp)
1010360c:	070001c4 	movi	fp,7
10103610:	dcc02c17 	ldw	r19,176(sp)
10103614:	00000306 	br	10103624 <___vfprintf_internal_r+0x1298>
10103618:	42000204 	addi	r8,r8,8
1010361c:	8c7ffc04 	addi	r17,r17,-16
10103620:	b441970e 	bge	r22,r17,10103c80 <___vfprintf_internal_r+0x18f4>
10103624:	18c00404 	addi	r3,r3,16
10103628:	10800044 	addi	r2,r2,1
1010362c:	45000015 	stw	r20,0(r8)
10103630:	45800115 	stw	r22,4(r8)
10103634:	d8c02015 	stw	r3,128(sp)
10103638:	d8801f15 	stw	r2,124(sp)
1010363c:	e0bff60e 	bge	fp,r2,10103618 <__alt_data_end+0xfffe3618>
10103640:	d9801e04 	addi	r6,sp,120
10103644:	b80b883a 	mov	r5,r23
10103648:	9809883a 	mov	r4,r19
1010364c:	01084980 	call	10108498 <__sprint_r>
10103650:	103c501e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103654:	d8c02017 	ldw	r3,128(sp)
10103658:	d8801f17 	ldw	r2,124(sp)
1010365c:	da000404 	addi	r8,sp,16
10103660:	003fee06 	br	1010361c <__alt_data_end+0xfffe361c>
10103664:	d9002c17 	ldw	r4,176(sp)
10103668:	d9801e04 	addi	r6,sp,120
1010366c:	b80b883a 	mov	r5,r23
10103670:	01084980 	call	10108498 <__sprint_r>
10103674:	103c471e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103678:	d8c02017 	ldw	r3,128(sp)
1010367c:	df002787 	ldb	fp,158(sp)
10103680:	da000404 	addi	r8,sp,16
10103684:	003d5606 	br	10102be0 <__alt_data_end+0xfffe2be0>
10103688:	9080040c 	andi	r2,r18,16
1010368c:	10016126 	beq	r2,zero,10103c14 <___vfprintf_internal_r+0x1888>
10103690:	d8802d17 	ldw	r2,180(sp)
10103694:	14c00017 	ldw	r19,0(r2)
10103698:	10800104 	addi	r2,r2,4
1010369c:	d8802d15 	stw	r2,180(sp)
101036a0:	982dd7fa 	srai	r22,r19,31
101036a4:	b005883a 	mov	r2,r22
101036a8:	003c8206 	br	101028b4 <__alt_data_end+0xfffe28b4>
101036ac:	9080040c 	andi	r2,r18,16
101036b0:	10003526 	beq	r2,zero,10103788 <___vfprintf_internal_r+0x13fc>
101036b4:	d9402d17 	ldw	r5,180(sp)
101036b8:	d8c02917 	ldw	r3,164(sp)
101036bc:	d8002785 	stb	zero,158(sp)
101036c0:	28800104 	addi	r2,r5,4
101036c4:	2cc00017 	ldw	r19,0(r5)
101036c8:	002d883a 	mov	r22,zero
101036cc:	18003716 	blt	r3,zero,101037ac <___vfprintf_internal_r+0x1420>
101036d0:	00ffdfc4 	movi	r3,-129
101036d4:	d8802d15 	stw	r2,180(sp)
101036d8:	90e4703a 	and	r18,r18,r3
101036dc:	0039883a 	mov	fp,zero
101036e0:	983df326 	beq	r19,zero,10102eb0 <__alt_data_end+0xfffe2eb0>
101036e4:	00800244 	movi	r2,9
101036e8:	14fc7b36 	bltu	r2,r19,101028d8 <__alt_data_end+0xfffe28d8>
101036ec:	d8c02817 	ldw	r3,160(sp)
101036f0:	dc001dc4 	addi	r16,sp,119
101036f4:	9cc00c04 	addi	r19,r19,48
101036f8:	1c07c83a 	sub	r3,r3,r16
101036fc:	dcc01dc5 	stb	r19,119(sp)
10103700:	d8c02e15 	stw	r3,184(sp)
10103704:	003ce806 	br	10102aa8 <__alt_data_end+0xfffe2aa8>
10103708:	d8803317 	ldw	r2,204(sp)
1010370c:	143fffc4 	addi	r16,r2,-1
10103710:	043f4d0e 	bge	zero,r16,10103448 <__alt_data_end+0xfffe3448>
10103714:	07000404 	movi	fp,16
10103718:	e400810e 	bge	fp,r16,10103920 <___vfprintf_internal_r+0x1594>
1010371c:	01440474 	movhi	r5,4113
10103720:	2942e884 	addi	r5,r5,2978
10103724:	d9402b15 	stw	r5,172(sp)
10103728:	01c001c4 	movi	r7,7
1010372c:	dcc02c17 	ldw	r19,176(sp)
10103730:	00000306 	br	10103740 <___vfprintf_internal_r+0x13b4>
10103734:	b5800204 	addi	r22,r22,8
10103738:	843ffc04 	addi	r16,r16,-16
1010373c:	e4007b0e 	bge	fp,r16,1010392c <___vfprintf_internal_r+0x15a0>
10103740:	18c00404 	addi	r3,r3,16
10103744:	8c400044 	addi	r17,r17,1
10103748:	b5000015 	stw	r20,0(r22)
1010374c:	b7000115 	stw	fp,4(r22)
10103750:	d8c02015 	stw	r3,128(sp)
10103754:	dc401f15 	stw	r17,124(sp)
10103758:	3c7ff60e 	bge	r7,r17,10103734 <__alt_data_end+0xfffe3734>
1010375c:	d9801e04 	addi	r6,sp,120
10103760:	b80b883a 	mov	r5,r23
10103764:	9809883a 	mov	r4,r19
10103768:	d9c03c15 	stw	r7,240(sp)
1010376c:	01084980 	call	10108498 <__sprint_r>
10103770:	d9c03c17 	ldw	r7,240(sp)
10103774:	103c071e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103778:	d8c02017 	ldw	r3,128(sp)
1010377c:	dc401f17 	ldw	r17,124(sp)
10103780:	dd800404 	addi	r22,sp,16
10103784:	003fec06 	br	10103738 <__alt_data_end+0xfffe3738>
10103788:	9080100c 	andi	r2,r18,64
1010378c:	d8002785 	stb	zero,158(sp)
10103790:	10010e26 	beq	r2,zero,10103bcc <___vfprintf_internal_r+0x1840>
10103794:	d9002d17 	ldw	r4,180(sp)
10103798:	d9402917 	ldw	r5,164(sp)
1010379c:	002d883a 	mov	r22,zero
101037a0:	20800104 	addi	r2,r4,4
101037a4:	24c0000b 	ldhu	r19,0(r4)
101037a8:	283fc90e 	bge	r5,zero,101036d0 <__alt_data_end+0xfffe36d0>
101037ac:	d8802d15 	stw	r2,180(sp)
101037b0:	0039883a 	mov	fp,zero
101037b4:	9d84b03a 	or	r2,r19,r22
101037b8:	103c461e 	bne	r2,zero,101028d4 <__alt_data_end+0xfffe28d4>
101037bc:	00800044 	movi	r2,1
101037c0:	003e6c06 	br	10103174 <__alt_data_end+0xfffe3174>
101037c4:	d9002c17 	ldw	r4,176(sp)
101037c8:	d9801e04 	addi	r6,sp,120
101037cc:	b80b883a 	mov	r5,r23
101037d0:	01084980 	call	10108498 <__sprint_r>
101037d4:	103bef1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101037d8:	d8c02017 	ldw	r3,128(sp)
101037dc:	da000404 	addi	r8,sp,16
101037e0:	d9003217 	ldw	r4,200(sp)
101037e4:	d8802617 	ldw	r2,152(sp)
101037e8:	d9403317 	ldw	r5,204(sp)
101037ec:	8123883a 	add	r17,r16,r4
101037f0:	11400216 	blt	r2,r5,101037fc <___vfprintf_internal_r+0x1470>
101037f4:	9100004c 	andi	r4,r18,1
101037f8:	20000d26 	beq	r4,zero,10103830 <___vfprintf_internal_r+0x14a4>
101037fc:	d9003717 	ldw	r4,220(sp)
10103800:	d9403417 	ldw	r5,208(sp)
10103804:	1907883a 	add	r3,r3,r4
10103808:	d9001f17 	ldw	r4,124(sp)
1010380c:	41400015 	stw	r5,0(r8)
10103810:	d9403717 	ldw	r5,220(sp)
10103814:	21000044 	addi	r4,r4,1
10103818:	d8c02015 	stw	r3,128(sp)
1010381c:	41400115 	stw	r5,4(r8)
10103820:	d9001f15 	stw	r4,124(sp)
10103824:	014001c4 	movi	r5,7
10103828:	2901e816 	blt	r5,r4,10103fcc <___vfprintf_internal_r+0x1c40>
1010382c:	42000204 	addi	r8,r8,8
10103830:	d9003317 	ldw	r4,204(sp)
10103834:	8121883a 	add	r16,r16,r4
10103838:	2085c83a 	sub	r2,r4,r2
1010383c:	8461c83a 	sub	r16,r16,r17
10103840:	1400010e 	bge	r2,r16,10103848 <___vfprintf_internal_r+0x14bc>
10103844:	1021883a 	mov	r16,r2
10103848:	04000a0e 	bge	zero,r16,10103874 <___vfprintf_internal_r+0x14e8>
1010384c:	d9001f17 	ldw	r4,124(sp)
10103850:	1c07883a 	add	r3,r3,r16
10103854:	44400015 	stw	r17,0(r8)
10103858:	21000044 	addi	r4,r4,1
1010385c:	44000115 	stw	r16,4(r8)
10103860:	d8c02015 	stw	r3,128(sp)
10103864:	d9001f15 	stw	r4,124(sp)
10103868:	014001c4 	movi	r5,7
1010386c:	2901fb16 	blt	r5,r4,1010405c <___vfprintf_internal_r+0x1cd0>
10103870:	42000204 	addi	r8,r8,8
10103874:	8001f716 	blt	r16,zero,10104054 <___vfprintf_internal_r+0x1cc8>
10103878:	1421c83a 	sub	r16,r2,r16
1010387c:	043d380e 	bge	zero,r16,10102d60 <__alt_data_end+0xfffe2d60>
10103880:	04400404 	movi	r17,16
10103884:	d8801f17 	ldw	r2,124(sp)
10103888:	8c3efb0e 	bge	r17,r16,10103478 <__alt_data_end+0xfffe3478>
1010388c:	01440474 	movhi	r5,4113
10103890:	2942e884 	addi	r5,r5,2978
10103894:	d9402b15 	stw	r5,172(sp)
10103898:	058001c4 	movi	r22,7
1010389c:	dcc02c17 	ldw	r19,176(sp)
101038a0:	00000306 	br	101038b0 <___vfprintf_internal_r+0x1524>
101038a4:	42000204 	addi	r8,r8,8
101038a8:	843ffc04 	addi	r16,r16,-16
101038ac:	8c3ef50e 	bge	r17,r16,10103484 <__alt_data_end+0xfffe3484>
101038b0:	18c00404 	addi	r3,r3,16
101038b4:	10800044 	addi	r2,r2,1
101038b8:	45000015 	stw	r20,0(r8)
101038bc:	44400115 	stw	r17,4(r8)
101038c0:	d8c02015 	stw	r3,128(sp)
101038c4:	d8801f15 	stw	r2,124(sp)
101038c8:	b0bff60e 	bge	r22,r2,101038a4 <__alt_data_end+0xfffe38a4>
101038cc:	d9801e04 	addi	r6,sp,120
101038d0:	b80b883a 	mov	r5,r23
101038d4:	9809883a 	mov	r4,r19
101038d8:	01084980 	call	10108498 <__sprint_r>
101038dc:	103bad1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101038e0:	d8c02017 	ldw	r3,128(sp)
101038e4:	d8801f17 	ldw	r2,124(sp)
101038e8:	da000404 	addi	r8,sp,16
101038ec:	003fee06 	br	101038a8 <__alt_data_end+0xfffe38a8>
101038f0:	9088703a 	and	r4,r18,r2
101038f4:	203eab1e 	bne	r4,zero,101033a4 <__alt_data_end+0xfffe33a4>
101038f8:	dc401f17 	ldw	r17,124(sp)
101038fc:	40800115 	stw	r2,4(r8)
10103900:	44000015 	stw	r16,0(r8)
10103904:	8c400044 	addi	r17,r17,1
10103908:	d8c02015 	stw	r3,128(sp)
1010390c:	dc401f15 	stw	r17,124(sp)
10103910:	008001c4 	movi	r2,7
10103914:	14400e16 	blt	r2,r17,10103950 <___vfprintf_internal_r+0x15c4>
10103918:	45800204 	addi	r22,r8,8
1010391c:	003eca06 	br	10103448 <__alt_data_end+0xfffe3448>
10103920:	01040474 	movhi	r4,4113
10103924:	2102e884 	addi	r4,r4,2978
10103928:	d9002b15 	stw	r4,172(sp)
1010392c:	d8802b17 	ldw	r2,172(sp)
10103930:	1c07883a 	add	r3,r3,r16
10103934:	8c400044 	addi	r17,r17,1
10103938:	b0800015 	stw	r2,0(r22)
1010393c:	b4000115 	stw	r16,4(r22)
10103940:	d8c02015 	stw	r3,128(sp)
10103944:	dc401f15 	stw	r17,124(sp)
10103948:	008001c4 	movi	r2,7
1010394c:	147ebd0e 	bge	r2,r17,10103444 <__alt_data_end+0xfffe3444>
10103950:	d9002c17 	ldw	r4,176(sp)
10103954:	d9801e04 	addi	r6,sp,120
10103958:	b80b883a 	mov	r5,r23
1010395c:	01084980 	call	10108498 <__sprint_r>
10103960:	103b8c1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103964:	d8c02017 	ldw	r3,128(sp)
10103968:	dc401f17 	ldw	r17,124(sp)
1010396c:	dd800404 	addi	r22,sp,16
10103970:	003eb506 	br	10103448 <__alt_data_end+0xfffe3448>
10103974:	d9002c17 	ldw	r4,176(sp)
10103978:	d9801e04 	addi	r6,sp,120
1010397c:	b80b883a 	mov	r5,r23
10103980:	01084980 	call	10108498 <__sprint_r>
10103984:	103b831e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103988:	d8c02017 	ldw	r3,128(sp)
1010398c:	dc401f17 	ldw	r17,124(sp)
10103990:	da000404 	addi	r8,sp,16
10103994:	003e8d06 	br	101033cc <__alt_data_end+0xfffe33cc>
10103998:	d9002c17 	ldw	r4,176(sp)
1010399c:	d9801e04 	addi	r6,sp,120
101039a0:	b80b883a 	mov	r5,r23
101039a4:	01084980 	call	10108498 <__sprint_r>
101039a8:	103b7a1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101039ac:	d8c02017 	ldw	r3,128(sp)
101039b0:	dc401f17 	ldw	r17,124(sp)
101039b4:	dd800404 	addi	r22,sp,16
101039b8:	003e8f06 	br	101033f8 <__alt_data_end+0xfffe33f8>
101039bc:	0027883a 	mov	r19,zero
101039c0:	003f4a06 	br	101036ec <__alt_data_end+0xfffe36ec>
101039c4:	d9002c17 	ldw	r4,176(sp)
101039c8:	d9801e04 	addi	r6,sp,120
101039cc:	b80b883a 	mov	r5,r23
101039d0:	01084980 	call	10108498 <__sprint_r>
101039d4:	103b6f1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
101039d8:	d8c02017 	ldw	r3,128(sp)
101039dc:	da000404 	addi	r8,sp,16
101039e0:	003c9d06 	br	10102c58 <__alt_data_end+0xfffe2c58>
101039e4:	04e7c83a 	sub	r19,zero,r19
101039e8:	9804c03a 	cmpne	r2,r19,zero
101039ec:	05adc83a 	sub	r22,zero,r22
101039f0:	b0adc83a 	sub	r22,r22,r2
101039f4:	d8802917 	ldw	r2,164(sp)
101039f8:	07000b44 	movi	fp,45
101039fc:	df002785 	stb	fp,158(sp)
10103a00:	10017b16 	blt	r2,zero,10103ff0 <___vfprintf_internal_r+0x1c64>
10103a04:	00bfdfc4 	movi	r2,-129
10103a08:	90a4703a 	and	r18,r18,r2
10103a0c:	003bb106 	br	101028d4 <__alt_data_end+0xfffe28d4>
10103a10:	d9003617 	ldw	r4,216(sp)
10103a14:	d9403817 	ldw	r5,224(sp)
10103a18:	da003d15 	stw	r8,244(sp)
10103a1c:	01081b40 	call	101081b4 <__fpclassifyd>
10103a20:	da003d17 	ldw	r8,244(sp)
10103a24:	1000f026 	beq	r2,zero,10103de8 <___vfprintf_internal_r+0x1a5c>
10103a28:	d9002917 	ldw	r4,164(sp)
10103a2c:	05bff7c4 	movi	r22,-33
10103a30:	00bfffc4 	movi	r2,-1
10103a34:	8dac703a 	and	r22,r17,r22
10103a38:	20820026 	beq	r4,r2,1010423c <___vfprintf_internal_r+0x1eb0>
10103a3c:	008011c4 	movi	r2,71
10103a40:	b081f726 	beq	r22,r2,10104220 <___vfprintf_internal_r+0x1e94>
10103a44:	d9003817 	ldw	r4,224(sp)
10103a48:	90c04014 	ori	r3,r18,256
10103a4c:	d8c02b15 	stw	r3,172(sp)
10103a50:	20021516 	blt	r4,zero,101042a8 <___vfprintf_internal_r+0x1f1c>
10103a54:	dcc03817 	ldw	r19,224(sp)
10103a58:	d8002a05 	stb	zero,168(sp)
10103a5c:	00801984 	movi	r2,102
10103a60:	8881f926 	beq	r17,r2,10104248 <___vfprintf_internal_r+0x1ebc>
10103a64:	00801184 	movi	r2,70
10103a68:	88821c26 	beq	r17,r2,101042dc <___vfprintf_internal_r+0x1f50>
10103a6c:	00801144 	movi	r2,69
10103a70:	b081ef26 	beq	r22,r2,10104230 <___vfprintf_internal_r+0x1ea4>
10103a74:	d8c02917 	ldw	r3,164(sp)
10103a78:	d8802104 	addi	r2,sp,132
10103a7c:	d8800315 	stw	r2,12(sp)
10103a80:	d9403617 	ldw	r5,216(sp)
10103a84:	d8802504 	addi	r2,sp,148
10103a88:	d9002c17 	ldw	r4,176(sp)
10103a8c:	d8800215 	stw	r2,8(sp)
10103a90:	d8802604 	addi	r2,sp,152
10103a94:	d8c00015 	stw	r3,0(sp)
10103a98:	d8800115 	stw	r2,4(sp)
10103a9c:	01c00084 	movi	r7,2
10103aa0:	980d883a 	mov	r6,r19
10103aa4:	d8c03c15 	stw	r3,240(sp)
10103aa8:	da003d15 	stw	r8,244(sp)
10103aac:	0104a640 	call	10104a64 <_dtoa_r>
10103ab0:	1021883a 	mov	r16,r2
10103ab4:	008019c4 	movi	r2,103
10103ab8:	d8c03c17 	ldw	r3,240(sp)
10103abc:	da003d17 	ldw	r8,244(sp)
10103ac0:	88817126 	beq	r17,r2,10104088 <___vfprintf_internal_r+0x1cfc>
10103ac4:	008011c4 	movi	r2,71
10103ac8:	88829226 	beq	r17,r2,10104514 <___vfprintf_internal_r+0x2188>
10103acc:	80f9883a 	add	fp,r16,r3
10103ad0:	d9003617 	ldw	r4,216(sp)
10103ad4:	000d883a 	mov	r6,zero
10103ad8:	000f883a 	mov	r7,zero
10103adc:	980b883a 	mov	r5,r19
10103ae0:	da003d15 	stw	r8,244(sp)
10103ae4:	010ca680 	call	1010ca68 <__eqdf2>
10103ae8:	da003d17 	ldw	r8,244(sp)
10103aec:	10018d26 	beq	r2,zero,10104124 <___vfprintf_internal_r+0x1d98>
10103af0:	d8802117 	ldw	r2,132(sp)
10103af4:	1700062e 	bgeu	r2,fp,10103b10 <___vfprintf_internal_r+0x1784>
10103af8:	01000c04 	movi	r4,48
10103afc:	10c00044 	addi	r3,r2,1
10103b00:	d8c02115 	stw	r3,132(sp)
10103b04:	11000005 	stb	r4,0(r2)
10103b08:	d8802117 	ldw	r2,132(sp)
10103b0c:	173ffb36 	bltu	r2,fp,10103afc <__alt_data_end+0xfffe3afc>
10103b10:	1405c83a 	sub	r2,r2,r16
10103b14:	d8803315 	stw	r2,204(sp)
10103b18:	008011c4 	movi	r2,71
10103b1c:	b0817626 	beq	r22,r2,101040f8 <___vfprintf_internal_r+0x1d6c>
10103b20:	00801944 	movi	r2,101
10103b24:	1442810e 	bge	r2,r17,1010452c <___vfprintf_internal_r+0x21a0>
10103b28:	d8c02617 	ldw	r3,152(sp)
10103b2c:	00801984 	movi	r2,102
10103b30:	d8c03215 	stw	r3,200(sp)
10103b34:	8881fe26 	beq	r17,r2,10104330 <___vfprintf_internal_r+0x1fa4>
10103b38:	d8c03217 	ldw	r3,200(sp)
10103b3c:	d9003317 	ldw	r4,204(sp)
10103b40:	1901dd16 	blt	r3,r4,101042b8 <___vfprintf_internal_r+0x1f2c>
10103b44:	9480004c 	andi	r18,r18,1
10103b48:	90022b1e 	bne	r18,zero,101043f8 <___vfprintf_internal_r+0x206c>
10103b4c:	1805883a 	mov	r2,r3
10103b50:	18028016 	blt	r3,zero,10104554 <___vfprintf_internal_r+0x21c8>
10103b54:	d8c03217 	ldw	r3,200(sp)
10103b58:	044019c4 	movi	r17,103
10103b5c:	d8c02e15 	stw	r3,184(sp)
10103b60:	df002a07 	ldb	fp,168(sp)
10103b64:	e001531e 	bne	fp,zero,101040b4 <___vfprintf_internal_r+0x1d28>
10103b68:	df002783 	ldbu	fp,158(sp)
10103b6c:	d8802a15 	stw	r2,168(sp)
10103b70:	dc802b17 	ldw	r18,172(sp)
10103b74:	d8002915 	stw	zero,164(sp)
10103b78:	003bd106 	br	10102ac0 <__alt_data_end+0xfffe2ac0>
10103b7c:	d8802d17 	ldw	r2,180(sp)
10103b80:	d8c02d17 	ldw	r3,180(sp)
10103b84:	d9002d17 	ldw	r4,180(sp)
10103b88:	10800017 	ldw	r2,0(r2)
10103b8c:	18c00117 	ldw	r3,4(r3)
10103b90:	21000204 	addi	r4,r4,8
10103b94:	d8803615 	stw	r2,216(sp)
10103b98:	d8c03815 	stw	r3,224(sp)
10103b9c:	d9002d15 	stw	r4,180(sp)
10103ba0:	003b7506 	br	10102978 <__alt_data_end+0xfffe2978>
10103ba4:	ac400007 	ldb	r17,0(r21)
10103ba8:	003a5906 	br	10102510 <__alt_data_end+0xfffe2510>
10103bac:	9080100c 	andi	r2,r18,64
10103bb0:	1000a826 	beq	r2,zero,10103e54 <___vfprintf_internal_r+0x1ac8>
10103bb4:	d9002d17 	ldw	r4,180(sp)
10103bb8:	002d883a 	mov	r22,zero
10103bbc:	24c0000b 	ldhu	r19,0(r4)
10103bc0:	21000104 	addi	r4,r4,4
10103bc4:	d9002d15 	stw	r4,180(sp)
10103bc8:	003ccb06 	br	10102ef8 <__alt_data_end+0xfffe2ef8>
10103bcc:	d8c02d17 	ldw	r3,180(sp)
10103bd0:	d9002917 	ldw	r4,164(sp)
10103bd4:	002d883a 	mov	r22,zero
10103bd8:	18800104 	addi	r2,r3,4
10103bdc:	1cc00017 	ldw	r19,0(r3)
10103be0:	203ebb0e 	bge	r4,zero,101036d0 <__alt_data_end+0xfffe36d0>
10103be4:	003ef106 	br	101037ac <__alt_data_end+0xfffe37ac>
10103be8:	9080040c 	andi	r2,r18,16
10103bec:	1000921e 	bne	r2,zero,10103e38 <___vfprintf_internal_r+0x1aac>
10103bf0:	9480100c 	andi	r18,r18,64
10103bf4:	90013926 	beq	r18,zero,101040dc <___vfprintf_internal_r+0x1d50>
10103bf8:	d9002d17 	ldw	r4,180(sp)
10103bfc:	d9402f17 	ldw	r5,188(sp)
10103c00:	20800017 	ldw	r2,0(r4)
10103c04:	21000104 	addi	r4,r4,4
10103c08:	d9002d15 	stw	r4,180(sp)
10103c0c:	1140000d 	sth	r5,0(r2)
10103c10:	003a1606 	br	1010246c <__alt_data_end+0xfffe246c>
10103c14:	9080100c 	andi	r2,r18,64
10103c18:	10008026 	beq	r2,zero,10103e1c <___vfprintf_internal_r+0x1a90>
10103c1c:	d8c02d17 	ldw	r3,180(sp)
10103c20:	1cc0000f 	ldh	r19,0(r3)
10103c24:	18c00104 	addi	r3,r3,4
10103c28:	d8c02d15 	stw	r3,180(sp)
10103c2c:	982dd7fa 	srai	r22,r19,31
10103c30:	b005883a 	mov	r2,r22
10103c34:	003b1f06 	br	101028b4 <__alt_data_end+0xfffe28b4>
10103c38:	9080100c 	andi	r2,r18,64
10103c3c:	d8002785 	stb	zero,158(sp)
10103c40:	10008a1e 	bne	r2,zero,10103e6c <___vfprintf_internal_r+0x1ae0>
10103c44:	d9402d17 	ldw	r5,180(sp)
10103c48:	d8c02917 	ldw	r3,164(sp)
10103c4c:	002d883a 	mov	r22,zero
10103c50:	28800104 	addi	r2,r5,4
10103c54:	2cc00017 	ldw	r19,0(r5)
10103c58:	183e4b0e 	bge	r3,zero,10103588 <__alt_data_end+0xfffe3588>
10103c5c:	9d86b03a 	or	r3,r19,r22
10103c60:	d8802d15 	stw	r2,180(sp)
10103c64:	183e4c1e 	bne	r3,zero,10103598 <__alt_data_end+0xfffe3598>
10103c68:	0039883a 	mov	fp,zero
10103c6c:	0005883a 	mov	r2,zero
10103c70:	003d4006 	br	10103174 <__alt_data_end+0xfffe3174>
10103c74:	01440474 	movhi	r5,4113
10103c78:	2942e884 	addi	r5,r5,2978
10103c7c:	d9402b15 	stw	r5,172(sp)
10103c80:	d9402b17 	ldw	r5,172(sp)
10103c84:	1c47883a 	add	r3,r3,r17
10103c88:	10800044 	addi	r2,r2,1
10103c8c:	41400015 	stw	r5,0(r8)
10103c90:	44400115 	stw	r17,4(r8)
10103c94:	d8c02015 	stw	r3,128(sp)
10103c98:	d8801f15 	stw	r2,124(sp)
10103c9c:	010001c4 	movi	r4,7
10103ca0:	20bec816 	blt	r4,r2,101037c4 <__alt_data_end+0xfffe37c4>
10103ca4:	42000204 	addi	r8,r8,8
10103ca8:	003ecd06 	br	101037e0 <__alt_data_end+0xfffe37e0>
10103cac:	d9002917 	ldw	r4,164(sp)
10103cb0:	d8002785 	stb	zero,158(sp)
10103cb4:	203d2d16 	blt	r4,zero,1010316c <__alt_data_end+0xfffe316c>
10103cb8:	00bfdfc4 	movi	r2,-129
10103cbc:	90a4703a 	and	r18,r18,r2
10103cc0:	003a9106 	br	10102708 <__alt_data_end+0xfffe2708>
10103cc4:	01040474 	movhi	r4,4113
10103cc8:	2102e884 	addi	r4,r4,2978
10103ccc:	d9002b15 	stw	r4,172(sp)
10103cd0:	003c0c06 	br	10102d04 <__alt_data_end+0xfffe2d04>
10103cd4:	d9002c17 	ldw	r4,176(sp)
10103cd8:	d9801e04 	addi	r6,sp,120
10103cdc:	b80b883a 	mov	r5,r23
10103ce0:	01084980 	call	10108498 <__sprint_r>
10103ce4:	103aab1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103ce8:	d8c02017 	ldw	r3,128(sp)
10103cec:	da000404 	addi	r8,sp,16
10103cf0:	003d4106 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103cf4:	d8801f17 	ldw	r2,124(sp)
10103cf8:	01440474 	movhi	r5,4113
10103cfc:	01000044 	movi	r4,1
10103d00:	18c00044 	addi	r3,r3,1
10103d04:	10800044 	addi	r2,r2,1
10103d08:	2942e804 	addi	r5,r5,2976
10103d0c:	41000115 	stw	r4,4(r8)
10103d10:	41400015 	stw	r5,0(r8)
10103d14:	d8c02015 	stw	r3,128(sp)
10103d18:	d8801f15 	stw	r2,124(sp)
10103d1c:	010001c4 	movi	r4,7
10103d20:	20805c16 	blt	r4,r2,10103e94 <___vfprintf_internal_r+0x1b08>
10103d24:	42000204 	addi	r8,r8,8
10103d28:	8800041e 	bne	r17,zero,10103d3c <___vfprintf_internal_r+0x19b0>
10103d2c:	d8803317 	ldw	r2,204(sp)
10103d30:	1000021e 	bne	r2,zero,10103d3c <___vfprintf_internal_r+0x19b0>
10103d34:	9080004c 	andi	r2,r18,1
10103d38:	103c0926 	beq	r2,zero,10102d60 <__alt_data_end+0xfffe2d60>
10103d3c:	d9003717 	ldw	r4,220(sp)
10103d40:	d8801f17 	ldw	r2,124(sp)
10103d44:	d9403417 	ldw	r5,208(sp)
10103d48:	20c7883a 	add	r3,r4,r3
10103d4c:	10800044 	addi	r2,r2,1
10103d50:	41000115 	stw	r4,4(r8)
10103d54:	41400015 	stw	r5,0(r8)
10103d58:	d8c02015 	stw	r3,128(sp)
10103d5c:	d8801f15 	stw	r2,124(sp)
10103d60:	010001c4 	movi	r4,7
10103d64:	20812116 	blt	r4,r2,101041ec <___vfprintf_internal_r+0x1e60>
10103d68:	42000204 	addi	r8,r8,8
10103d6c:	0463c83a 	sub	r17,zero,r17
10103d70:	0440730e 	bge	zero,r17,10103f40 <___vfprintf_internal_r+0x1bb4>
10103d74:	05800404 	movi	r22,16
10103d78:	b440860e 	bge	r22,r17,10103f94 <___vfprintf_internal_r+0x1c08>
10103d7c:	01440474 	movhi	r5,4113
10103d80:	2942e884 	addi	r5,r5,2978
10103d84:	d9402b15 	stw	r5,172(sp)
10103d88:	070001c4 	movi	fp,7
10103d8c:	dcc02c17 	ldw	r19,176(sp)
10103d90:	00000306 	br	10103da0 <___vfprintf_internal_r+0x1a14>
10103d94:	42000204 	addi	r8,r8,8
10103d98:	8c7ffc04 	addi	r17,r17,-16
10103d9c:	b440800e 	bge	r22,r17,10103fa0 <___vfprintf_internal_r+0x1c14>
10103da0:	18c00404 	addi	r3,r3,16
10103da4:	10800044 	addi	r2,r2,1
10103da8:	45000015 	stw	r20,0(r8)
10103dac:	45800115 	stw	r22,4(r8)
10103db0:	d8c02015 	stw	r3,128(sp)
10103db4:	d8801f15 	stw	r2,124(sp)
10103db8:	e0bff60e 	bge	fp,r2,10103d94 <__alt_data_end+0xfffe3d94>
10103dbc:	d9801e04 	addi	r6,sp,120
10103dc0:	b80b883a 	mov	r5,r23
10103dc4:	9809883a 	mov	r4,r19
10103dc8:	01084980 	call	10108498 <__sprint_r>
10103dcc:	103a711e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103dd0:	d8c02017 	ldw	r3,128(sp)
10103dd4:	d8801f17 	ldw	r2,124(sp)
10103dd8:	da000404 	addi	r8,sp,16
10103ddc:	003fee06 	br	10103d98 <__alt_data_end+0xfffe3d98>
10103de0:	00bfffc4 	movi	r2,-1
10103de4:	003a6f06 	br	101027a4 <__alt_data_end+0xfffe27a4>
10103de8:	008011c4 	movi	r2,71
10103dec:	1440b816 	blt	r2,r17,101040d0 <___vfprintf_internal_r+0x1d44>
10103df0:	04040474 	movhi	r16,4113
10103df4:	8402da04 	addi	r16,r16,2920
10103df8:	00c000c4 	movi	r3,3
10103dfc:	00bfdfc4 	movi	r2,-129
10103e00:	d8c02a15 	stw	r3,168(sp)
10103e04:	90a4703a 	and	r18,r18,r2
10103e08:	df002783 	ldbu	fp,158(sp)
10103e0c:	d8c02e15 	stw	r3,184(sp)
10103e10:	d8002915 	stw	zero,164(sp)
10103e14:	d8003215 	stw	zero,200(sp)
10103e18:	003b2906 	br	10102ac0 <__alt_data_end+0xfffe2ac0>
10103e1c:	d9002d17 	ldw	r4,180(sp)
10103e20:	24c00017 	ldw	r19,0(r4)
10103e24:	21000104 	addi	r4,r4,4
10103e28:	d9002d15 	stw	r4,180(sp)
10103e2c:	982dd7fa 	srai	r22,r19,31
10103e30:	b005883a 	mov	r2,r22
10103e34:	003a9f06 	br	101028b4 <__alt_data_end+0xfffe28b4>
10103e38:	d9402d17 	ldw	r5,180(sp)
10103e3c:	d8c02f17 	ldw	r3,188(sp)
10103e40:	28800017 	ldw	r2,0(r5)
10103e44:	29400104 	addi	r5,r5,4
10103e48:	d9402d15 	stw	r5,180(sp)
10103e4c:	10c00015 	stw	r3,0(r2)
10103e50:	00398606 	br	1010246c <__alt_data_end+0xfffe246c>
10103e54:	d9402d17 	ldw	r5,180(sp)
10103e58:	002d883a 	mov	r22,zero
10103e5c:	2cc00017 	ldw	r19,0(r5)
10103e60:	29400104 	addi	r5,r5,4
10103e64:	d9402d15 	stw	r5,180(sp)
10103e68:	003c2306 	br	10102ef8 <__alt_data_end+0xfffe2ef8>
10103e6c:	d8c02d17 	ldw	r3,180(sp)
10103e70:	d9002917 	ldw	r4,164(sp)
10103e74:	002d883a 	mov	r22,zero
10103e78:	18800104 	addi	r2,r3,4
10103e7c:	1cc0000b 	ldhu	r19,0(r3)
10103e80:	203dc10e 	bge	r4,zero,10103588 <__alt_data_end+0xfffe3588>
10103e84:	003f7506 	br	10103c5c <__alt_data_end+0xfffe3c5c>
10103e88:	04040474 	movhi	r16,4113
10103e8c:	8402d804 	addi	r16,r16,2912
10103e90:	003acc06 	br	101029c4 <__alt_data_end+0xfffe29c4>
10103e94:	d9002c17 	ldw	r4,176(sp)
10103e98:	d9801e04 	addi	r6,sp,120
10103e9c:	b80b883a 	mov	r5,r23
10103ea0:	01084980 	call	10108498 <__sprint_r>
10103ea4:	103a3b1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103ea8:	dc402617 	ldw	r17,152(sp)
10103eac:	d8c02017 	ldw	r3,128(sp)
10103eb0:	da000404 	addi	r8,sp,16
10103eb4:	003f9c06 	br	10103d28 <__alt_data_end+0xfffe3d28>
10103eb8:	ac400043 	ldbu	r17,1(r21)
10103ebc:	94800814 	ori	r18,r18,32
10103ec0:	ad400044 	addi	r21,r21,1
10103ec4:	8c403fcc 	andi	r17,r17,255
10103ec8:	8c40201c 	xori	r17,r17,128
10103ecc:	8c7fe004 	addi	r17,r17,-128
10103ed0:	00398f06 	br	10102510 <__alt_data_end+0xfffe2510>
10103ed4:	d8c02d15 	stw	r3,180(sp)
10103ed8:	0039883a 	mov	fp,zero
10103edc:	003e3506 	br	101037b4 <__alt_data_end+0xfffe37b4>
10103ee0:	d9002c17 	ldw	r4,176(sp)
10103ee4:	d9801e04 	addi	r6,sp,120
10103ee8:	b80b883a 	mov	r5,r23
10103eec:	01084980 	call	10108498 <__sprint_r>
10103ef0:	103a281e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103ef4:	d8c02017 	ldw	r3,128(sp)
10103ef8:	da000404 	addi	r8,sp,16
10103efc:	003cd006 	br	10103240 <__alt_data_end+0xfffe3240>
10103f00:	8009883a 	mov	r4,r16
10103f04:	da003d15 	stw	r8,244(sp)
10103f08:	01083040 	call	10108304 <strlen>
10103f0c:	d8802e15 	stw	r2,184(sp)
10103f10:	da003d17 	ldw	r8,244(sp)
10103f14:	103c340e 	bge	r2,zero,10102fe8 <__alt_data_end+0xfffe2fe8>
10103f18:	0005883a 	mov	r2,zero
10103f1c:	003c3206 	br	10102fe8 <__alt_data_end+0xfffe2fe8>
10103f20:	d9002c17 	ldw	r4,176(sp)
10103f24:	d9801e04 	addi	r6,sp,120
10103f28:	b80b883a 	mov	r5,r23
10103f2c:	01084980 	call	10108498 <__sprint_r>
10103f30:	103a181e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103f34:	d8c02017 	ldw	r3,128(sp)
10103f38:	d8801f17 	ldw	r2,124(sp)
10103f3c:	da000404 	addi	r8,sp,16
10103f40:	d9403317 	ldw	r5,204(sp)
10103f44:	10800044 	addi	r2,r2,1
10103f48:	44000015 	stw	r16,0(r8)
10103f4c:	28c7883a 	add	r3,r5,r3
10103f50:	003b7d06 	br	10102d48 <__alt_data_end+0xfffe2d48>
10103f54:	01040474 	movhi	r4,4113
10103f58:	2102ec84 	addi	r4,r4,2994
10103f5c:	d9003515 	stw	r4,212(sp)
10103f60:	003b1406 	br	10102bb4 <__alt_data_end+0xfffe2bb4>
10103f64:	013fffc4 	movi	r4,-1
10103f68:	003a3506 	br	10102840 <__alt_data_end+0xfffe2840>
10103f6c:	0023883a 	mov	r17,zero
10103f70:	003d9d06 	br	101035e8 <__alt_data_end+0xfffe35e8>
10103f74:	d9002c17 	ldw	r4,176(sp)
10103f78:	d9801e04 	addi	r6,sp,120
10103f7c:	b80b883a 	mov	r5,r23
10103f80:	01084980 	call	10108498 <__sprint_r>
10103f84:	103a031e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103f88:	d8c02017 	ldw	r3,128(sp)
10103f8c:	da000404 	addi	r8,sp,16
10103f90:	003d9406 	br	101035e4 <__alt_data_end+0xfffe35e4>
10103f94:	01040474 	movhi	r4,4113
10103f98:	2102e884 	addi	r4,r4,2978
10103f9c:	d9002b15 	stw	r4,172(sp)
10103fa0:	d9002b17 	ldw	r4,172(sp)
10103fa4:	1c47883a 	add	r3,r3,r17
10103fa8:	10800044 	addi	r2,r2,1
10103fac:	41000015 	stw	r4,0(r8)
10103fb0:	44400115 	stw	r17,4(r8)
10103fb4:	d8c02015 	stw	r3,128(sp)
10103fb8:	d8801f15 	stw	r2,124(sp)
10103fbc:	010001c4 	movi	r4,7
10103fc0:	20bfd716 	blt	r4,r2,10103f20 <__alt_data_end+0xfffe3f20>
10103fc4:	42000204 	addi	r8,r8,8
10103fc8:	003fdd06 	br	10103f40 <__alt_data_end+0xfffe3f40>
10103fcc:	d9002c17 	ldw	r4,176(sp)
10103fd0:	d9801e04 	addi	r6,sp,120
10103fd4:	b80b883a 	mov	r5,r23
10103fd8:	01084980 	call	10108498 <__sprint_r>
10103fdc:	1039ed1e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10103fe0:	d8802617 	ldw	r2,152(sp)
10103fe4:	d8c02017 	ldw	r3,128(sp)
10103fe8:	da000404 	addi	r8,sp,16
10103fec:	003e1006 	br	10103830 <__alt_data_end+0xfffe3830>
10103ff0:	00800044 	movi	r2,1
10103ff4:	10803fcc 	andi	r2,r2,255
10103ff8:	00c00044 	movi	r3,1
10103ffc:	10fa3526 	beq	r2,r3,101028d4 <__alt_data_end+0xfffe28d4>
10104000:	00c00084 	movi	r3,2
10104004:	10fbcb26 	beq	r2,r3,10102f34 <__alt_data_end+0xfffe2f34>
10104008:	003a8f06 	br	10102a48 <__alt_data_end+0xfffe2a48>
1010400c:	01040474 	movhi	r4,4113
10104010:	2102ec84 	addi	r4,r4,2994
10104014:	d9003515 	stw	r4,212(sp)
10104018:	003b7606 	br	10102df4 <__alt_data_end+0xfffe2df4>
1010401c:	d8802917 	ldw	r2,164(sp)
10104020:	00c00184 	movi	r3,6
10104024:	1880012e 	bgeu	r3,r2,1010402c <___vfprintf_internal_r+0x1ca0>
10104028:	1805883a 	mov	r2,r3
1010402c:	d8802e15 	stw	r2,184(sp)
10104030:	1000ef16 	blt	r2,zero,101043f0 <___vfprintf_internal_r+0x2064>
10104034:	04040474 	movhi	r16,4113
10104038:	d8802a15 	stw	r2,168(sp)
1010403c:	dcc02d15 	stw	r19,180(sp)
10104040:	d8002915 	stw	zero,164(sp)
10104044:	d8003215 	stw	zero,200(sp)
10104048:	8402e604 	addi	r16,r16,2968
1010404c:	0039883a 	mov	fp,zero
10104050:	003aa206 	br	10102adc <__alt_data_end+0xfffe2adc>
10104054:	0021883a 	mov	r16,zero
10104058:	003e0706 	br	10103878 <__alt_data_end+0xfffe3878>
1010405c:	d9002c17 	ldw	r4,176(sp)
10104060:	d9801e04 	addi	r6,sp,120
10104064:	b80b883a 	mov	r5,r23
10104068:	01084980 	call	10108498 <__sprint_r>
1010406c:	1039c91e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10104070:	d8802617 	ldw	r2,152(sp)
10104074:	d9403317 	ldw	r5,204(sp)
10104078:	d8c02017 	ldw	r3,128(sp)
1010407c:	da000404 	addi	r8,sp,16
10104080:	2885c83a 	sub	r2,r5,r2
10104084:	003dfb06 	br	10103874 <__alt_data_end+0xfffe3874>
10104088:	9080004c 	andi	r2,r18,1
1010408c:	103e8f1e 	bne	r2,zero,10103acc <__alt_data_end+0xfffe3acc>
10104090:	d8802117 	ldw	r2,132(sp)
10104094:	003e9e06 	br	10103b10 <__alt_data_end+0xfffe3b10>
10104098:	1025883a 	mov	r18,r2
1010409c:	0039883a 	mov	fp,zero
101040a0:	00800084 	movi	r2,2
101040a4:	003fd306 	br	10103ff4 <__alt_data_end+0xfffe3ff4>
101040a8:	07000b44 	movi	fp,45
101040ac:	df002785 	stb	fp,158(sp)
101040b0:	003a4006 	br	101029b4 <__alt_data_end+0xfffe29b4>
101040b4:	00c00b44 	movi	r3,45
101040b8:	d8c02785 	stb	r3,158(sp)
101040bc:	d8802a15 	stw	r2,168(sp)
101040c0:	dc802b17 	ldw	r18,172(sp)
101040c4:	d8002915 	stw	zero,164(sp)
101040c8:	07000b44 	movi	fp,45
101040cc:	003a8006 	br	10102ad0 <__alt_data_end+0xfffe2ad0>
101040d0:	04040474 	movhi	r16,4113
101040d4:	8402db04 	addi	r16,r16,2924
101040d8:	003f4706 	br	10103df8 <__alt_data_end+0xfffe3df8>
101040dc:	d8c02d17 	ldw	r3,180(sp)
101040e0:	d9002f17 	ldw	r4,188(sp)
101040e4:	18800017 	ldw	r2,0(r3)
101040e8:	18c00104 	addi	r3,r3,4
101040ec:	d8c02d15 	stw	r3,180(sp)
101040f0:	11000015 	stw	r4,0(r2)
101040f4:	0038dd06 	br	1010246c <__alt_data_end+0xfffe246c>
101040f8:	dd802617 	ldw	r22,152(sp)
101040fc:	00bfff44 	movi	r2,-3
10104100:	b0801c16 	blt	r22,r2,10104174 <___vfprintf_internal_r+0x1de8>
10104104:	d9402917 	ldw	r5,164(sp)
10104108:	2d801a16 	blt	r5,r22,10104174 <___vfprintf_internal_r+0x1de8>
1010410c:	dd803215 	stw	r22,200(sp)
10104110:	003e8906 	br	10103b38 <__alt_data_end+0xfffe3b38>
10104114:	01040474 	movhi	r4,4113
10104118:	2102e884 	addi	r4,r4,2978
1010411c:	d9002b15 	stw	r4,172(sp)
10104120:	003c9106 	br	10103368 <__alt_data_end+0xfffe3368>
10104124:	e005883a 	mov	r2,fp
10104128:	003e7906 	br	10103b10 <__alt_data_end+0xfffe3b10>
1010412c:	d9402917 	ldw	r5,164(sp)
10104130:	df002783 	ldbu	fp,158(sp)
10104134:	dcc02d15 	stw	r19,180(sp)
10104138:	d9402a15 	stw	r5,168(sp)
1010413c:	d9402e15 	stw	r5,184(sp)
10104140:	d8002915 	stw	zero,164(sp)
10104144:	d8003215 	stw	zero,200(sp)
10104148:	003a5d06 	br	10102ac0 <__alt_data_end+0xfffe2ac0>
1010414c:	9080004c 	andi	r2,r18,1
10104150:	0039883a 	mov	fp,zero
10104154:	10000426 	beq	r2,zero,10104168 <___vfprintf_internal_r+0x1ddc>
10104158:	00800c04 	movi	r2,48
1010415c:	dc001dc4 	addi	r16,sp,119
10104160:	d8801dc5 	stb	r2,119(sp)
10104164:	003b8006 	br	10102f68 <__alt_data_end+0xfffe2f68>
10104168:	d8002e15 	stw	zero,184(sp)
1010416c:	dc001e04 	addi	r16,sp,120
10104170:	003a4d06 	br	10102aa8 <__alt_data_end+0xfffe2aa8>
10104174:	8c7fff84 	addi	r17,r17,-2
10104178:	b5bfffc4 	addi	r22,r22,-1
1010417c:	dd802615 	stw	r22,152(sp)
10104180:	dc4022c5 	stb	r17,139(sp)
10104184:	b000bf16 	blt	r22,zero,10104484 <___vfprintf_internal_r+0x20f8>
10104188:	00800ac4 	movi	r2,43
1010418c:	d8802305 	stb	r2,140(sp)
10104190:	00800244 	movi	r2,9
10104194:	15807016 	blt	r2,r22,10104358 <___vfprintf_internal_r+0x1fcc>
10104198:	00800c04 	movi	r2,48
1010419c:	b5800c04 	addi	r22,r22,48
101041a0:	d8802345 	stb	r2,141(sp)
101041a4:	dd802385 	stb	r22,142(sp)
101041a8:	d88023c4 	addi	r2,sp,143
101041ac:	df0022c4 	addi	fp,sp,139
101041b0:	d8c03317 	ldw	r3,204(sp)
101041b4:	1739c83a 	sub	fp,r2,fp
101041b8:	d9003317 	ldw	r4,204(sp)
101041bc:	e0c7883a 	add	r3,fp,r3
101041c0:	df003a15 	stw	fp,232(sp)
101041c4:	d8c02e15 	stw	r3,184(sp)
101041c8:	00800044 	movi	r2,1
101041cc:	1100b30e 	bge	r2,r4,1010449c <___vfprintf_internal_r+0x2110>
101041d0:	d8c02e17 	ldw	r3,184(sp)
101041d4:	18c00044 	addi	r3,r3,1
101041d8:	d8c02e15 	stw	r3,184(sp)
101041dc:	1805883a 	mov	r2,r3
101041e0:	1800ac16 	blt	r3,zero,10104494 <___vfprintf_internal_r+0x2108>
101041e4:	d8003215 	stw	zero,200(sp)
101041e8:	003e5d06 	br	10103b60 <__alt_data_end+0xfffe3b60>
101041ec:	d9002c17 	ldw	r4,176(sp)
101041f0:	d9801e04 	addi	r6,sp,120
101041f4:	b80b883a 	mov	r5,r23
101041f8:	01084980 	call	10108498 <__sprint_r>
101041fc:	1039651e 	bne	r2,zero,10102794 <__alt_data_end+0xfffe2794>
10104200:	dc402617 	ldw	r17,152(sp)
10104204:	d8c02017 	ldw	r3,128(sp)
10104208:	d8801f17 	ldw	r2,124(sp)
1010420c:	da000404 	addi	r8,sp,16
10104210:	003ed606 	br	10103d6c <__alt_data_end+0xfffe3d6c>
10104214:	582b883a 	mov	r21,r11
10104218:	d8002915 	stw	zero,164(sp)
1010421c:	0038bd06 	br	10102514 <__alt_data_end+0xfffe2514>
10104220:	d8802917 	ldw	r2,164(sp)
10104224:	103e071e 	bne	r2,zero,10103a44 <__alt_data_end+0xfffe3a44>
10104228:	dc002915 	stw	r16,164(sp)
1010422c:	003e0506 	br	10103a44 <__alt_data_end+0xfffe3a44>
10104230:	d9002917 	ldw	r4,164(sp)
10104234:	20c00044 	addi	r3,r4,1
10104238:	003e0f06 	br	10103a78 <__alt_data_end+0xfffe3a78>
1010423c:	01400184 	movi	r5,6
10104240:	d9402915 	stw	r5,164(sp)
10104244:	003dff06 	br	10103a44 <__alt_data_end+0xfffe3a44>
10104248:	d8802104 	addi	r2,sp,132
1010424c:	d8800315 	stw	r2,12(sp)
10104250:	d8802504 	addi	r2,sp,148
10104254:	d8800215 	stw	r2,8(sp)
10104258:	d8802604 	addi	r2,sp,152
1010425c:	d8800115 	stw	r2,4(sp)
10104260:	d8802917 	ldw	r2,164(sp)
10104264:	d9403617 	ldw	r5,216(sp)
10104268:	d9002c17 	ldw	r4,176(sp)
1010426c:	d8800015 	stw	r2,0(sp)
10104270:	01c000c4 	movi	r7,3
10104274:	980d883a 	mov	r6,r19
10104278:	da003d15 	stw	r8,244(sp)
1010427c:	0104a640 	call	10104a64 <_dtoa_r>
10104280:	d8c02917 	ldw	r3,164(sp)
10104284:	da003d17 	ldw	r8,244(sp)
10104288:	1021883a 	mov	r16,r2
1010428c:	10f9883a 	add	fp,r2,r3
10104290:	81000007 	ldb	r4,0(r16)
10104294:	00800c04 	movi	r2,48
10104298:	20805e26 	beq	r4,r2,10104414 <___vfprintf_internal_r+0x2088>
1010429c:	d8c02617 	ldw	r3,152(sp)
101042a0:	e0f9883a 	add	fp,fp,r3
101042a4:	003e0a06 	br	10103ad0 <__alt_data_end+0xfffe3ad0>
101042a8:	00c00b44 	movi	r3,45
101042ac:	24e0003c 	xorhi	r19,r4,32768
101042b0:	d8c02a05 	stb	r3,168(sp)
101042b4:	003de906 	br	10103a5c <__alt_data_end+0xfffe3a5c>
101042b8:	d8c03217 	ldw	r3,200(sp)
101042bc:	00c07a0e 	bge	zero,r3,101044a8 <___vfprintf_internal_r+0x211c>
101042c0:	00800044 	movi	r2,1
101042c4:	d9003317 	ldw	r4,204(sp)
101042c8:	1105883a 	add	r2,r2,r4
101042cc:	d8802e15 	stw	r2,184(sp)
101042d0:	10004e16 	blt	r2,zero,1010440c <___vfprintf_internal_r+0x2080>
101042d4:	044019c4 	movi	r17,103
101042d8:	003e2106 	br	10103b60 <__alt_data_end+0xfffe3b60>
101042dc:	d9002917 	ldw	r4,164(sp)
101042e0:	d8802104 	addi	r2,sp,132
101042e4:	d8800315 	stw	r2,12(sp)
101042e8:	d9000015 	stw	r4,0(sp)
101042ec:	d8802504 	addi	r2,sp,148
101042f0:	d9403617 	ldw	r5,216(sp)
101042f4:	d9002c17 	ldw	r4,176(sp)
101042f8:	d8800215 	stw	r2,8(sp)
101042fc:	d8802604 	addi	r2,sp,152
10104300:	d8800115 	stw	r2,4(sp)
10104304:	01c000c4 	movi	r7,3
10104308:	980d883a 	mov	r6,r19
1010430c:	da003d15 	stw	r8,244(sp)
10104310:	0104a640 	call	10104a64 <_dtoa_r>
10104314:	d8c02917 	ldw	r3,164(sp)
10104318:	da003d17 	ldw	r8,244(sp)
1010431c:	1021883a 	mov	r16,r2
10104320:	00801184 	movi	r2,70
10104324:	80f9883a 	add	fp,r16,r3
10104328:	88bfd926 	beq	r17,r2,10104290 <__alt_data_end+0xfffe4290>
1010432c:	003de806 	br	10103ad0 <__alt_data_end+0xfffe3ad0>
10104330:	d9002917 	ldw	r4,164(sp)
10104334:	00c04d0e 	bge	zero,r3,1010446c <___vfprintf_internal_r+0x20e0>
10104338:	2000441e 	bne	r4,zero,1010444c <___vfprintf_internal_r+0x20c0>
1010433c:	9480004c 	andi	r18,r18,1
10104340:	9000421e 	bne	r18,zero,1010444c <___vfprintf_internal_r+0x20c0>
10104344:	1805883a 	mov	r2,r3
10104348:	18007016 	blt	r3,zero,1010450c <___vfprintf_internal_r+0x2180>
1010434c:	d8c03217 	ldw	r3,200(sp)
10104350:	d8c02e15 	stw	r3,184(sp)
10104354:	003e0206 	br	10103b60 <__alt_data_end+0xfffe3b60>
10104358:	df0022c4 	addi	fp,sp,139
1010435c:	dc002915 	stw	r16,164(sp)
10104360:	4027883a 	mov	r19,r8
10104364:	e021883a 	mov	r16,fp
10104368:	b009883a 	mov	r4,r22
1010436c:	01400284 	movi	r5,10
10104370:	010b7a40 	call	1010b7a4 <__modsi3>
10104374:	10800c04 	addi	r2,r2,48
10104378:	843fffc4 	addi	r16,r16,-1
1010437c:	b009883a 	mov	r4,r22
10104380:	01400284 	movi	r5,10
10104384:	80800005 	stb	r2,0(r16)
10104388:	010b7200 	call	1010b720 <__divsi3>
1010438c:	102d883a 	mov	r22,r2
10104390:	00800244 	movi	r2,9
10104394:	15bff416 	blt	r2,r22,10104368 <__alt_data_end+0xfffe4368>
10104398:	9811883a 	mov	r8,r19
1010439c:	b0800c04 	addi	r2,r22,48
101043a0:	8027883a 	mov	r19,r16
101043a4:	997fffc4 	addi	r5,r19,-1
101043a8:	98bfffc5 	stb	r2,-1(r19)
101043ac:	dc002917 	ldw	r16,164(sp)
101043b0:	2f006a2e 	bgeu	r5,fp,1010455c <___vfprintf_internal_r+0x21d0>
101043b4:	d9c02384 	addi	r7,sp,142
101043b8:	3ccfc83a 	sub	r7,r7,r19
101043bc:	d9002344 	addi	r4,sp,141
101043c0:	e1cf883a 	add	r7,fp,r7
101043c4:	00000106 	br	101043cc <___vfprintf_internal_r+0x2040>
101043c8:	28800003 	ldbu	r2,0(r5)
101043cc:	20800005 	stb	r2,0(r4)
101043d0:	21000044 	addi	r4,r4,1
101043d4:	29400044 	addi	r5,r5,1
101043d8:	393ffb1e 	bne	r7,r4,101043c8 <__alt_data_end+0xfffe43c8>
101043dc:	d8802304 	addi	r2,sp,140
101043e0:	14c5c83a 	sub	r2,r2,r19
101043e4:	d8c02344 	addi	r3,sp,141
101043e8:	1885883a 	add	r2,r3,r2
101043ec:	003f7006 	br	101041b0 <__alt_data_end+0xfffe41b0>
101043f0:	0005883a 	mov	r2,zero
101043f4:	003f0f06 	br	10104034 <__alt_data_end+0xfffe4034>
101043f8:	d8c03217 	ldw	r3,200(sp)
101043fc:	18c00044 	addi	r3,r3,1
10104400:	d8c02e15 	stw	r3,184(sp)
10104404:	1805883a 	mov	r2,r3
10104408:	183fb20e 	bge	r3,zero,101042d4 <__alt_data_end+0xfffe42d4>
1010440c:	0005883a 	mov	r2,zero
10104410:	003fb006 	br	101042d4 <__alt_data_end+0xfffe42d4>
10104414:	d9003617 	ldw	r4,216(sp)
10104418:	000d883a 	mov	r6,zero
1010441c:	000f883a 	mov	r7,zero
10104420:	980b883a 	mov	r5,r19
10104424:	d8c03c15 	stw	r3,240(sp)
10104428:	da003d15 	stw	r8,244(sp)
1010442c:	010ca680 	call	1010ca68 <__eqdf2>
10104430:	d8c03c17 	ldw	r3,240(sp)
10104434:	da003d17 	ldw	r8,244(sp)
10104438:	103f9826 	beq	r2,zero,1010429c <__alt_data_end+0xfffe429c>
1010443c:	00800044 	movi	r2,1
10104440:	10c7c83a 	sub	r3,r2,r3
10104444:	d8c02615 	stw	r3,152(sp)
10104448:	003f9506 	br	101042a0 <__alt_data_end+0xfffe42a0>
1010444c:	d9002917 	ldw	r4,164(sp)
10104450:	d8c03217 	ldw	r3,200(sp)
10104454:	20800044 	addi	r2,r4,1
10104458:	1885883a 	add	r2,r3,r2
1010445c:	d8802e15 	stw	r2,184(sp)
10104460:	103dbf0e 	bge	r2,zero,10103b60 <__alt_data_end+0xfffe3b60>
10104464:	0005883a 	mov	r2,zero
10104468:	003dbd06 	br	10103b60 <__alt_data_end+0xfffe3b60>
1010446c:	2000211e 	bne	r4,zero,101044f4 <___vfprintf_internal_r+0x2168>
10104470:	9480004c 	andi	r18,r18,1
10104474:	90001f1e 	bne	r18,zero,101044f4 <___vfprintf_internal_r+0x2168>
10104478:	00800044 	movi	r2,1
1010447c:	d8802e15 	stw	r2,184(sp)
10104480:	003db706 	br	10103b60 <__alt_data_end+0xfffe3b60>
10104484:	00800b44 	movi	r2,45
10104488:	05adc83a 	sub	r22,zero,r22
1010448c:	d8802305 	stb	r2,140(sp)
10104490:	003f3f06 	br	10104190 <__alt_data_end+0xfffe4190>
10104494:	0005883a 	mov	r2,zero
10104498:	003f5206 	br	101041e4 <__alt_data_end+0xfffe41e4>
1010449c:	90a4703a 	and	r18,r18,r2
101044a0:	903f4e26 	beq	r18,zero,101041dc <__alt_data_end+0xfffe41dc>
101044a4:	003f4a06 	br	101041d0 <__alt_data_end+0xfffe41d0>
101044a8:	00800084 	movi	r2,2
101044ac:	10c5c83a 	sub	r2,r2,r3
101044b0:	003f8406 	br	101042c4 <__alt_data_end+0xfffe42c4>
101044b4:	d8802d17 	ldw	r2,180(sp)
101044b8:	d9002d17 	ldw	r4,180(sp)
101044bc:	ac400043 	ldbu	r17,1(r21)
101044c0:	10800017 	ldw	r2,0(r2)
101044c4:	582b883a 	mov	r21,r11
101044c8:	d8802915 	stw	r2,164(sp)
101044cc:	20800104 	addi	r2,r4,4
101044d0:	d9002917 	ldw	r4,164(sp)
101044d4:	d8802d15 	stw	r2,180(sp)
101044d8:	203e7a0e 	bge	r4,zero,10103ec4 <__alt_data_end+0xfffe3ec4>
101044dc:	8c403fcc 	andi	r17,r17,255
101044e0:	00bfffc4 	movi	r2,-1
101044e4:	8c40201c 	xori	r17,r17,128
101044e8:	d8802915 	stw	r2,164(sp)
101044ec:	8c7fe004 	addi	r17,r17,-128
101044f0:	00380706 	br	10102510 <__alt_data_end+0xfffe2510>
101044f4:	d8c02917 	ldw	r3,164(sp)
101044f8:	18c00084 	addi	r3,r3,2
101044fc:	d8c02e15 	stw	r3,184(sp)
10104500:	1805883a 	mov	r2,r3
10104504:	183d960e 	bge	r3,zero,10103b60 <__alt_data_end+0xfffe3b60>
10104508:	003fd606 	br	10104464 <__alt_data_end+0xfffe4464>
1010450c:	0005883a 	mov	r2,zero
10104510:	003f8e06 	br	1010434c <__alt_data_end+0xfffe434c>
10104514:	9080004c 	andi	r2,r18,1
10104518:	103f811e 	bne	r2,zero,10104320 <__alt_data_end+0xfffe4320>
1010451c:	d8802117 	ldw	r2,132(sp)
10104520:	1405c83a 	sub	r2,r2,r16
10104524:	d8803315 	stw	r2,204(sp)
10104528:	b47ef326 	beq	r22,r17,101040f8 <__alt_data_end+0xfffe40f8>
1010452c:	dd802617 	ldw	r22,152(sp)
10104530:	003f1106 	br	10104178 <__alt_data_end+0xfffe4178>
10104534:	d9c02785 	stb	r7,158(sp)
10104538:	00390406 	br	1010294c <__alt_data_end+0xfffe294c>
1010453c:	d9c02785 	stb	r7,158(sp)
10104540:	0038d306 	br	10102890 <__alt_data_end+0xfffe2890>
10104544:	d9c02785 	stb	r7,158(sp)
10104548:	003a6106 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
1010454c:	d9c02785 	stb	r7,158(sp)
10104550:	003af806 	br	10103134 <__alt_data_end+0xfffe3134>
10104554:	0005883a 	mov	r2,zero
10104558:	003d7e06 	br	10103b54 <__alt_data_end+0xfffe3b54>
1010455c:	d8802344 	addi	r2,sp,141
10104560:	003f1306 	br	101041b0 <__alt_data_end+0xfffe41b0>
10104564:	d9c02785 	stb	r7,158(sp)
10104568:	00392306 	br	101029f8 <__alt_data_end+0xfffe29f8>
1010456c:	d9c02785 	stb	r7,158(sp)
10104570:	003aa906 	br	10103018 <__alt_data_end+0xfffe3018>
10104574:	d9c02785 	stb	r7,158(sp)
10104578:	003a3d06 	br	10102e70 <__alt_data_end+0xfffe2e70>
1010457c:	d9c02785 	stb	r7,158(sp)
10104580:	003aca06 	br	101030ac <__alt_data_end+0xfffe30ac>

10104584 <__vfprintf_internal>:
10104584:	00840474 	movhi	r2,4113
10104588:	108a4f04 	addi	r2,r2,10556
1010458c:	300f883a 	mov	r7,r6
10104590:	280d883a 	mov	r6,r5
10104594:	200b883a 	mov	r5,r4
10104598:	11000017 	ldw	r4,0(r2)
1010459c:	010238c1 	jmpi	1010238c <___vfprintf_internal_r>

101045a0 <__sbprintf>:
101045a0:	2880030b 	ldhu	r2,12(r5)
101045a4:	2ac01917 	ldw	r11,100(r5)
101045a8:	2a80038b 	ldhu	r10,14(r5)
101045ac:	2a400717 	ldw	r9,28(r5)
101045b0:	2a000917 	ldw	r8,36(r5)
101045b4:	defee204 	addi	sp,sp,-1144
101045b8:	00c10004 	movi	r3,1024
101045bc:	dc011a15 	stw	r16,1128(sp)
101045c0:	10bfff4c 	andi	r2,r2,65533
101045c4:	2821883a 	mov	r16,r5
101045c8:	d8cb883a 	add	r5,sp,r3
101045cc:	dc811c15 	stw	r18,1136(sp)
101045d0:	dc411b15 	stw	r17,1132(sp)
101045d4:	dfc11d15 	stw	ra,1140(sp)
101045d8:	2025883a 	mov	r18,r4
101045dc:	d881030d 	sth	r2,1036(sp)
101045e0:	dac11915 	stw	r11,1124(sp)
101045e4:	da81038d 	sth	r10,1038(sp)
101045e8:	da410715 	stw	r9,1052(sp)
101045ec:	da010915 	stw	r8,1060(sp)
101045f0:	dec10015 	stw	sp,1024(sp)
101045f4:	dec10415 	stw	sp,1040(sp)
101045f8:	d8c10215 	stw	r3,1032(sp)
101045fc:	d8c10515 	stw	r3,1044(sp)
10104600:	d8010615 	stw	zero,1048(sp)
10104604:	010238c0 	call	1010238c <___vfprintf_internal_r>
10104608:	1023883a 	mov	r17,r2
1010460c:	10000416 	blt	r2,zero,10104620 <__sbprintf+0x80>
10104610:	d9410004 	addi	r5,sp,1024
10104614:	9009883a 	mov	r4,r18
10104618:	01063080 	call	10106308 <_fflush_r>
1010461c:	10000d1e 	bne	r2,zero,10104654 <__sbprintf+0xb4>
10104620:	d881030b 	ldhu	r2,1036(sp)
10104624:	1080100c 	andi	r2,r2,64
10104628:	10000326 	beq	r2,zero,10104638 <__sbprintf+0x98>
1010462c:	8080030b 	ldhu	r2,12(r16)
10104630:	10801014 	ori	r2,r2,64
10104634:	8080030d 	sth	r2,12(r16)
10104638:	8805883a 	mov	r2,r17
1010463c:	dfc11d17 	ldw	ra,1140(sp)
10104640:	dc811c17 	ldw	r18,1136(sp)
10104644:	dc411b17 	ldw	r17,1132(sp)
10104648:	dc011a17 	ldw	r16,1128(sp)
1010464c:	dec11e04 	addi	sp,sp,1144
10104650:	f800283a 	ret
10104654:	047fffc4 	movi	r17,-1
10104658:	003ff106 	br	10104620 <__alt_data_end+0xfffe4620>

1010465c <_write_r>:
1010465c:	defffd04 	addi	sp,sp,-12
10104660:	2805883a 	mov	r2,r5
10104664:	dc000015 	stw	r16,0(sp)
10104668:	04040474 	movhi	r16,4113
1010466c:	dc400115 	stw	r17,4(sp)
10104670:	300b883a 	mov	r5,r6
10104674:	84114704 	addi	r16,r16,17692
10104678:	2023883a 	mov	r17,r4
1010467c:	380d883a 	mov	r6,r7
10104680:	1009883a 	mov	r4,r2
10104684:	dfc00215 	stw	ra,8(sp)
10104688:	80000015 	stw	zero,0(r16)
1010468c:	010e9dc0 	call	1010e9dc <write>
10104690:	00ffffc4 	movi	r3,-1
10104694:	10c00526 	beq	r2,r3,101046ac <_write_r+0x50>
10104698:	dfc00217 	ldw	ra,8(sp)
1010469c:	dc400117 	ldw	r17,4(sp)
101046a0:	dc000017 	ldw	r16,0(sp)
101046a4:	dec00304 	addi	sp,sp,12
101046a8:	f800283a 	ret
101046ac:	80c00017 	ldw	r3,0(r16)
101046b0:	183ff926 	beq	r3,zero,10104698 <__alt_data_end+0xfffe4698>
101046b4:	88c00015 	stw	r3,0(r17)
101046b8:	003ff706 	br	10104698 <__alt_data_end+0xfffe4698>

101046bc <__swsetup_r>:
101046bc:	00840474 	movhi	r2,4113
101046c0:	defffd04 	addi	sp,sp,-12
101046c4:	108a4f04 	addi	r2,r2,10556
101046c8:	dc400115 	stw	r17,4(sp)
101046cc:	2023883a 	mov	r17,r4
101046d0:	11000017 	ldw	r4,0(r2)
101046d4:	dc000015 	stw	r16,0(sp)
101046d8:	dfc00215 	stw	ra,8(sp)
101046dc:	2821883a 	mov	r16,r5
101046e0:	20000226 	beq	r4,zero,101046ec <__swsetup_r+0x30>
101046e4:	20800e17 	ldw	r2,56(r4)
101046e8:	10003126 	beq	r2,zero,101047b0 <__swsetup_r+0xf4>
101046ec:	8080030b 	ldhu	r2,12(r16)
101046f0:	10c0020c 	andi	r3,r2,8
101046f4:	1009883a 	mov	r4,r2
101046f8:	18000f26 	beq	r3,zero,10104738 <__swsetup_r+0x7c>
101046fc:	80c00417 	ldw	r3,16(r16)
10104700:	18001526 	beq	r3,zero,10104758 <__swsetup_r+0x9c>
10104704:	1100004c 	andi	r4,r2,1
10104708:	20001c1e 	bne	r4,zero,1010477c <__swsetup_r+0xc0>
1010470c:	1080008c 	andi	r2,r2,2
10104710:	1000291e 	bne	r2,zero,101047b8 <__swsetup_r+0xfc>
10104714:	80800517 	ldw	r2,20(r16)
10104718:	80800215 	stw	r2,8(r16)
1010471c:	18001c26 	beq	r3,zero,10104790 <__swsetup_r+0xd4>
10104720:	0005883a 	mov	r2,zero
10104724:	dfc00217 	ldw	ra,8(sp)
10104728:	dc400117 	ldw	r17,4(sp)
1010472c:	dc000017 	ldw	r16,0(sp)
10104730:	dec00304 	addi	sp,sp,12
10104734:	f800283a 	ret
10104738:	2080040c 	andi	r2,r4,16
1010473c:	10002e26 	beq	r2,zero,101047f8 <__swsetup_r+0x13c>
10104740:	2080010c 	andi	r2,r4,4
10104744:	10001e1e 	bne	r2,zero,101047c0 <__swsetup_r+0x104>
10104748:	80c00417 	ldw	r3,16(r16)
1010474c:	20800214 	ori	r2,r4,8
10104750:	8080030d 	sth	r2,12(r16)
10104754:	183feb1e 	bne	r3,zero,10104704 <__alt_data_end+0xfffe4704>
10104758:	1100a00c 	andi	r4,r2,640
1010475c:	01408004 	movi	r5,512
10104760:	217fe826 	beq	r4,r5,10104704 <__alt_data_end+0xfffe4704>
10104764:	800b883a 	mov	r5,r16
10104768:	8809883a 	mov	r4,r17
1010476c:	01014500 	call	10101450 <__smakebuf_r>
10104770:	8080030b 	ldhu	r2,12(r16)
10104774:	80c00417 	ldw	r3,16(r16)
10104778:	003fe206 	br	10104704 <__alt_data_end+0xfffe4704>
1010477c:	80800517 	ldw	r2,20(r16)
10104780:	80000215 	stw	zero,8(r16)
10104784:	0085c83a 	sub	r2,zero,r2
10104788:	80800615 	stw	r2,24(r16)
1010478c:	183fe41e 	bne	r3,zero,10104720 <__alt_data_end+0xfffe4720>
10104790:	80c0030b 	ldhu	r3,12(r16)
10104794:	0005883a 	mov	r2,zero
10104798:	1900200c 	andi	r4,r3,128
1010479c:	203fe126 	beq	r4,zero,10104724 <__alt_data_end+0xfffe4724>
101047a0:	18c01014 	ori	r3,r3,64
101047a4:	80c0030d 	sth	r3,12(r16)
101047a8:	00bfffc4 	movi	r2,-1
101047ac:	003fdd06 	br	10104724 <__alt_data_end+0xfffe4724>
101047b0:	01066e40 	call	101066e4 <__sinit>
101047b4:	003fcd06 	br	101046ec <__alt_data_end+0xfffe46ec>
101047b8:	0005883a 	mov	r2,zero
101047bc:	003fd606 	br	10104718 <__alt_data_end+0xfffe4718>
101047c0:	81400c17 	ldw	r5,48(r16)
101047c4:	28000626 	beq	r5,zero,101047e0 <__swsetup_r+0x124>
101047c8:	80801004 	addi	r2,r16,64
101047cc:	28800326 	beq	r5,r2,101047dc <__swsetup_r+0x120>
101047d0:	8809883a 	mov	r4,r17
101047d4:	01069040 	call	10106904 <_free_r>
101047d8:	8100030b 	ldhu	r4,12(r16)
101047dc:	80000c15 	stw	zero,48(r16)
101047e0:	80c00417 	ldw	r3,16(r16)
101047e4:	00bff6c4 	movi	r2,-37
101047e8:	1108703a 	and	r4,r2,r4
101047ec:	80000115 	stw	zero,4(r16)
101047f0:	80c00015 	stw	r3,0(r16)
101047f4:	003fd506 	br	1010474c <__alt_data_end+0xfffe474c>
101047f8:	00800244 	movi	r2,9
101047fc:	88800015 	stw	r2,0(r17)
10104800:	20801014 	ori	r2,r4,64
10104804:	8080030d 	sth	r2,12(r16)
10104808:	00bfffc4 	movi	r2,-1
1010480c:	003fc506 	br	10104724 <__alt_data_end+0xfffe4724>

10104810 <_close_r>:
10104810:	defffd04 	addi	sp,sp,-12
10104814:	dc000015 	stw	r16,0(sp)
10104818:	04040474 	movhi	r16,4113
1010481c:	dc400115 	stw	r17,4(sp)
10104820:	84114704 	addi	r16,r16,17692
10104824:	2023883a 	mov	r17,r4
10104828:	2809883a 	mov	r4,r5
1010482c:	dfc00215 	stw	ra,8(sp)
10104830:	80000015 	stw	zero,0(r16)
10104834:	010df780 	call	1010df78 <close>
10104838:	00ffffc4 	movi	r3,-1
1010483c:	10c00526 	beq	r2,r3,10104854 <_close_r+0x44>
10104840:	dfc00217 	ldw	ra,8(sp)
10104844:	dc400117 	ldw	r17,4(sp)
10104848:	dc000017 	ldw	r16,0(sp)
1010484c:	dec00304 	addi	sp,sp,12
10104850:	f800283a 	ret
10104854:	80c00017 	ldw	r3,0(r16)
10104858:	183ff926 	beq	r3,zero,10104840 <__alt_data_end+0xfffe4840>
1010485c:	88c00015 	stw	r3,0(r17)
10104860:	003ff706 	br	10104840 <__alt_data_end+0xfffe4840>

10104864 <quorem>:
10104864:	defff704 	addi	sp,sp,-36
10104868:	dc800215 	stw	r18,8(sp)
1010486c:	20800417 	ldw	r2,16(r4)
10104870:	2c800417 	ldw	r18,16(r5)
10104874:	dfc00815 	stw	ra,32(sp)
10104878:	ddc00715 	stw	r23,28(sp)
1010487c:	dd800615 	stw	r22,24(sp)
10104880:	dd400515 	stw	r21,20(sp)
10104884:	dd000415 	stw	r20,16(sp)
10104888:	dcc00315 	stw	r19,12(sp)
1010488c:	dc400115 	stw	r17,4(sp)
10104890:	dc000015 	stw	r16,0(sp)
10104894:	14807116 	blt	r2,r18,10104a5c <quorem+0x1f8>
10104898:	94bfffc4 	addi	r18,r18,-1
1010489c:	94ad883a 	add	r22,r18,r18
101048a0:	b5ad883a 	add	r22,r22,r22
101048a4:	2c400504 	addi	r17,r5,20
101048a8:	8da9883a 	add	r20,r17,r22
101048ac:	25400504 	addi	r21,r4,20
101048b0:	282f883a 	mov	r23,r5
101048b4:	adad883a 	add	r22,r21,r22
101048b8:	a1400017 	ldw	r5,0(r20)
101048bc:	2021883a 	mov	r16,r4
101048c0:	b1000017 	ldw	r4,0(r22)
101048c4:	29400044 	addi	r5,r5,1
101048c8:	010b8180 	call	1010b818 <__udivsi3>
101048cc:	1027883a 	mov	r19,r2
101048d0:	10002c26 	beq	r2,zero,10104984 <quorem+0x120>
101048d4:	a813883a 	mov	r9,r21
101048d8:	880b883a 	mov	r5,r17
101048dc:	0009883a 	mov	r4,zero
101048e0:	000d883a 	mov	r6,zero
101048e4:	2a000017 	ldw	r8,0(r5)
101048e8:	49c00017 	ldw	r7,0(r9)
101048ec:	29400104 	addi	r5,r5,4
101048f0:	40bfffcc 	andi	r2,r8,65535
101048f4:	14c5383a 	mul	r2,r2,r19
101048f8:	4010d43a 	srli	r8,r8,16
101048fc:	38ffffcc 	andi	r3,r7,65535
10104900:	1105883a 	add	r2,r2,r4
10104904:	1008d43a 	srli	r4,r2,16
10104908:	44d1383a 	mul	r8,r8,r19
1010490c:	198d883a 	add	r6,r3,r6
10104910:	10ffffcc 	andi	r3,r2,65535
10104914:	30c7c83a 	sub	r3,r6,r3
10104918:	380ed43a 	srli	r7,r7,16
1010491c:	4105883a 	add	r2,r8,r4
10104920:	180dd43a 	srai	r6,r3,16
10104924:	113fffcc 	andi	r4,r2,65535
10104928:	390fc83a 	sub	r7,r7,r4
1010492c:	398d883a 	add	r6,r7,r6
10104930:	300e943a 	slli	r7,r6,16
10104934:	18ffffcc 	andi	r3,r3,65535
10104938:	1008d43a 	srli	r4,r2,16
1010493c:	38ceb03a 	or	r7,r7,r3
10104940:	49c00015 	stw	r7,0(r9)
10104944:	300dd43a 	srai	r6,r6,16
10104948:	4a400104 	addi	r9,r9,4
1010494c:	a17fe52e 	bgeu	r20,r5,101048e4 <__alt_data_end+0xfffe48e4>
10104950:	b0800017 	ldw	r2,0(r22)
10104954:	10000b1e 	bne	r2,zero,10104984 <quorem+0x120>
10104958:	b0bfff04 	addi	r2,r22,-4
1010495c:	a880082e 	bgeu	r21,r2,10104980 <quorem+0x11c>
10104960:	b0ffff17 	ldw	r3,-4(r22)
10104964:	18000326 	beq	r3,zero,10104974 <quorem+0x110>
10104968:	00000506 	br	10104980 <quorem+0x11c>
1010496c:	10c00017 	ldw	r3,0(r2)
10104970:	1800031e 	bne	r3,zero,10104980 <quorem+0x11c>
10104974:	10bfff04 	addi	r2,r2,-4
10104978:	94bfffc4 	addi	r18,r18,-1
1010497c:	a8bffb36 	bltu	r21,r2,1010496c <__alt_data_end+0xfffe496c>
10104980:	84800415 	stw	r18,16(r16)
10104984:	b80b883a 	mov	r5,r23
10104988:	8009883a 	mov	r4,r16
1010498c:	0107a200 	call	10107a20 <__mcmp>
10104990:	10002616 	blt	r2,zero,10104a2c <quorem+0x1c8>
10104994:	9cc00044 	addi	r19,r19,1
10104998:	a805883a 	mov	r2,r21
1010499c:	000b883a 	mov	r5,zero
101049a0:	11000017 	ldw	r4,0(r2)
101049a4:	89800017 	ldw	r6,0(r17)
101049a8:	10800104 	addi	r2,r2,4
101049ac:	20ffffcc 	andi	r3,r4,65535
101049b0:	194b883a 	add	r5,r3,r5
101049b4:	30ffffcc 	andi	r3,r6,65535
101049b8:	28c7c83a 	sub	r3,r5,r3
101049bc:	300cd43a 	srli	r6,r6,16
101049c0:	2008d43a 	srli	r4,r4,16
101049c4:	180bd43a 	srai	r5,r3,16
101049c8:	18ffffcc 	andi	r3,r3,65535
101049cc:	2189c83a 	sub	r4,r4,r6
101049d0:	2149883a 	add	r4,r4,r5
101049d4:	200c943a 	slli	r6,r4,16
101049d8:	8c400104 	addi	r17,r17,4
101049dc:	200bd43a 	srai	r5,r4,16
101049e0:	30c6b03a 	or	r3,r6,r3
101049e4:	10ffff15 	stw	r3,-4(r2)
101049e8:	a47fed2e 	bgeu	r20,r17,101049a0 <__alt_data_end+0xfffe49a0>
101049ec:	9485883a 	add	r2,r18,r18
101049f0:	1085883a 	add	r2,r2,r2
101049f4:	a887883a 	add	r3,r21,r2
101049f8:	18800017 	ldw	r2,0(r3)
101049fc:	10000b1e 	bne	r2,zero,10104a2c <quorem+0x1c8>
10104a00:	18bfff04 	addi	r2,r3,-4
10104a04:	a880082e 	bgeu	r21,r2,10104a28 <quorem+0x1c4>
10104a08:	18ffff17 	ldw	r3,-4(r3)
10104a0c:	18000326 	beq	r3,zero,10104a1c <quorem+0x1b8>
10104a10:	00000506 	br	10104a28 <quorem+0x1c4>
10104a14:	10c00017 	ldw	r3,0(r2)
10104a18:	1800031e 	bne	r3,zero,10104a28 <quorem+0x1c4>
10104a1c:	10bfff04 	addi	r2,r2,-4
10104a20:	94bfffc4 	addi	r18,r18,-1
10104a24:	a8bffb36 	bltu	r21,r2,10104a14 <__alt_data_end+0xfffe4a14>
10104a28:	84800415 	stw	r18,16(r16)
10104a2c:	9805883a 	mov	r2,r19
10104a30:	dfc00817 	ldw	ra,32(sp)
10104a34:	ddc00717 	ldw	r23,28(sp)
10104a38:	dd800617 	ldw	r22,24(sp)
10104a3c:	dd400517 	ldw	r21,20(sp)
10104a40:	dd000417 	ldw	r20,16(sp)
10104a44:	dcc00317 	ldw	r19,12(sp)
10104a48:	dc800217 	ldw	r18,8(sp)
10104a4c:	dc400117 	ldw	r17,4(sp)
10104a50:	dc000017 	ldw	r16,0(sp)
10104a54:	dec00904 	addi	sp,sp,36
10104a58:	f800283a 	ret
10104a5c:	0005883a 	mov	r2,zero
10104a60:	003ff306 	br	10104a30 <__alt_data_end+0xfffe4a30>

10104a64 <_dtoa_r>:
10104a64:	20801017 	ldw	r2,64(r4)
10104a68:	deffde04 	addi	sp,sp,-136
10104a6c:	df002015 	stw	fp,128(sp)
10104a70:	dcc01b15 	stw	r19,108(sp)
10104a74:	dc801a15 	stw	r18,104(sp)
10104a78:	dc401915 	stw	r17,100(sp)
10104a7c:	dc001815 	stw	r16,96(sp)
10104a80:	dfc02115 	stw	ra,132(sp)
10104a84:	ddc01f15 	stw	r23,124(sp)
10104a88:	dd801e15 	stw	r22,120(sp)
10104a8c:	dd401d15 	stw	r21,116(sp)
10104a90:	dd001c15 	stw	r20,112(sp)
10104a94:	d9c00315 	stw	r7,12(sp)
10104a98:	2039883a 	mov	fp,r4
10104a9c:	3023883a 	mov	r17,r6
10104aa0:	2825883a 	mov	r18,r5
10104aa4:	dc002417 	ldw	r16,144(sp)
10104aa8:	3027883a 	mov	r19,r6
10104aac:	10000826 	beq	r2,zero,10104ad0 <_dtoa_r+0x6c>
10104ab0:	21801117 	ldw	r6,68(r4)
10104ab4:	00c00044 	movi	r3,1
10104ab8:	100b883a 	mov	r5,r2
10104abc:	1986983a 	sll	r3,r3,r6
10104ac0:	11800115 	stw	r6,4(r2)
10104ac4:	10c00215 	stw	r3,8(r2)
10104ac8:	01072000 	call	10107200 <_Bfree>
10104acc:	e0001015 	stw	zero,64(fp)
10104ad0:	88002e16 	blt	r17,zero,10104b8c <_dtoa_r+0x128>
10104ad4:	80000015 	stw	zero,0(r16)
10104ad8:	889ffc2c 	andhi	r2,r17,32752
10104adc:	00dffc34 	movhi	r3,32752
10104ae0:	10c01c26 	beq	r2,r3,10104b54 <_dtoa_r+0xf0>
10104ae4:	000d883a 	mov	r6,zero
10104ae8:	000f883a 	mov	r7,zero
10104aec:	9009883a 	mov	r4,r18
10104af0:	980b883a 	mov	r5,r19
10104af4:	010ca680 	call	1010ca68 <__eqdf2>
10104af8:	10002b1e 	bne	r2,zero,10104ba8 <_dtoa_r+0x144>
10104afc:	d9c02317 	ldw	r7,140(sp)
10104b00:	00800044 	movi	r2,1
10104b04:	38800015 	stw	r2,0(r7)
10104b08:	d8802517 	ldw	r2,148(sp)
10104b0c:	10019e26 	beq	r2,zero,10105188 <_dtoa_r+0x724>
10104b10:	d8c02517 	ldw	r3,148(sp)
10104b14:	00840474 	movhi	r2,4113
10104b18:	1082e844 	addi	r2,r2,2977
10104b1c:	18800015 	stw	r2,0(r3)
10104b20:	10bfffc4 	addi	r2,r2,-1
10104b24:	dfc02117 	ldw	ra,132(sp)
10104b28:	df002017 	ldw	fp,128(sp)
10104b2c:	ddc01f17 	ldw	r23,124(sp)
10104b30:	dd801e17 	ldw	r22,120(sp)
10104b34:	dd401d17 	ldw	r21,116(sp)
10104b38:	dd001c17 	ldw	r20,112(sp)
10104b3c:	dcc01b17 	ldw	r19,108(sp)
10104b40:	dc801a17 	ldw	r18,104(sp)
10104b44:	dc401917 	ldw	r17,100(sp)
10104b48:	dc001817 	ldw	r16,96(sp)
10104b4c:	dec02204 	addi	sp,sp,136
10104b50:	f800283a 	ret
10104b54:	d8c02317 	ldw	r3,140(sp)
10104b58:	0089c3c4 	movi	r2,9999
10104b5c:	18800015 	stw	r2,0(r3)
10104b60:	90017726 	beq	r18,zero,10105140 <_dtoa_r+0x6dc>
10104b64:	00840474 	movhi	r2,4113
10104b68:	1082f404 	addi	r2,r2,3024
10104b6c:	d9002517 	ldw	r4,148(sp)
10104b70:	203fec26 	beq	r4,zero,10104b24 <__alt_data_end+0xfffe4b24>
10104b74:	10c000c7 	ldb	r3,3(r2)
10104b78:	1801781e 	bne	r3,zero,1010515c <_dtoa_r+0x6f8>
10104b7c:	10c000c4 	addi	r3,r2,3
10104b80:	d9802517 	ldw	r6,148(sp)
10104b84:	30c00015 	stw	r3,0(r6)
10104b88:	003fe606 	br	10104b24 <__alt_data_end+0xfffe4b24>
10104b8c:	04e00034 	movhi	r19,32768
10104b90:	9cffffc4 	addi	r19,r19,-1
10104b94:	00800044 	movi	r2,1
10104b98:	8ce6703a 	and	r19,r17,r19
10104b9c:	80800015 	stw	r2,0(r16)
10104ba0:	9823883a 	mov	r17,r19
10104ba4:	003fcc06 	br	10104ad8 <__alt_data_end+0xfffe4ad8>
10104ba8:	d8800204 	addi	r2,sp,8
10104bac:	d8800015 	stw	r2,0(sp)
10104bb0:	d9c00104 	addi	r7,sp,4
10104bb4:	900b883a 	mov	r5,r18
10104bb8:	980d883a 	mov	r6,r19
10104bbc:	e009883a 	mov	r4,fp
10104bc0:	8820d53a 	srli	r16,r17,20
10104bc4:	0107dec0 	call	10107dec <__d2b>
10104bc8:	d8800915 	stw	r2,36(sp)
10104bcc:	8001651e 	bne	r16,zero,10105164 <_dtoa_r+0x700>
10104bd0:	dd800217 	ldw	r22,8(sp)
10104bd4:	dc000117 	ldw	r16,4(sp)
10104bd8:	00800804 	movi	r2,32
10104bdc:	b421883a 	add	r16,r22,r16
10104be0:	80c10c84 	addi	r3,r16,1074
10104be4:	10c2d10e 	bge	r2,r3,1010572c <_dtoa_r+0xcc8>
10104be8:	00801004 	movi	r2,64
10104bec:	81010484 	addi	r4,r16,1042
10104bf0:	10c7c83a 	sub	r3,r2,r3
10104bf4:	9108d83a 	srl	r4,r18,r4
10104bf8:	88e2983a 	sll	r17,r17,r3
10104bfc:	2448b03a 	or	r4,r4,r17
10104c00:	010de300 	call	1010de30 <__floatunsidf>
10104c04:	017f8434 	movhi	r5,65040
10104c08:	01800044 	movi	r6,1
10104c0c:	1009883a 	mov	r4,r2
10104c10:	194b883a 	add	r5,r3,r5
10104c14:	843fffc4 	addi	r16,r16,-1
10104c18:	d9801115 	stw	r6,68(sp)
10104c1c:	000d883a 	mov	r6,zero
10104c20:	01cffe34 	movhi	r7,16376
10104c24:	010d3d80 	call	1010d3d8 <__subdf3>
10104c28:	0198dbf4 	movhi	r6,25455
10104c2c:	01cff4f4 	movhi	r7,16339
10104c30:	3190d844 	addi	r6,r6,17249
10104c34:	39e1e9c4 	addi	r7,r7,-30809
10104c38:	1009883a 	mov	r4,r2
10104c3c:	180b883a 	mov	r5,r3
10104c40:	010ccc00 	call	1010ccc0 <__muldf3>
10104c44:	01a2d874 	movhi	r6,35681
10104c48:	01cff1f4 	movhi	r7,16327
10104c4c:	31b22cc4 	addi	r6,r6,-14157
10104c50:	39e28a04 	addi	r7,r7,-30168
10104c54:	180b883a 	mov	r5,r3
10104c58:	1009883a 	mov	r4,r2
10104c5c:	010b8d40 	call	1010b8d4 <__adddf3>
10104c60:	8009883a 	mov	r4,r16
10104c64:	1029883a 	mov	r20,r2
10104c68:	1823883a 	mov	r17,r3
10104c6c:	010dd540 	call	1010dd54 <__floatsidf>
10104c70:	019427f4 	movhi	r6,20639
10104c74:	01cff4f4 	movhi	r7,16339
10104c78:	319e7ec4 	addi	r6,r6,31227
10104c7c:	39d104c4 	addi	r7,r7,17427
10104c80:	1009883a 	mov	r4,r2
10104c84:	180b883a 	mov	r5,r3
10104c88:	010ccc00 	call	1010ccc0 <__muldf3>
10104c8c:	100d883a 	mov	r6,r2
10104c90:	180f883a 	mov	r7,r3
10104c94:	a009883a 	mov	r4,r20
10104c98:	880b883a 	mov	r5,r17
10104c9c:	010b8d40 	call	1010b8d4 <__adddf3>
10104ca0:	1009883a 	mov	r4,r2
10104ca4:	180b883a 	mov	r5,r3
10104ca8:	1029883a 	mov	r20,r2
10104cac:	1823883a 	mov	r17,r3
10104cb0:	010dcd40 	call	1010dcd4 <__fixdfsi>
10104cb4:	000d883a 	mov	r6,zero
10104cb8:	000f883a 	mov	r7,zero
10104cbc:	a009883a 	mov	r4,r20
10104cc0:	880b883a 	mov	r5,r17
10104cc4:	d8800515 	stw	r2,20(sp)
10104cc8:	010cbcc0 	call	1010cbcc <__ledf2>
10104ccc:	10028716 	blt	r2,zero,101056ec <_dtoa_r+0xc88>
10104cd0:	d8c00517 	ldw	r3,20(sp)
10104cd4:	00800584 	movi	r2,22
10104cd8:	10c27536 	bltu	r2,r3,101056b0 <_dtoa_r+0xc4c>
10104cdc:	180490fa 	slli	r2,r3,3
10104ce0:	00c40474 	movhi	r3,4113
10104ce4:	18c30f04 	addi	r3,r3,3132
10104ce8:	1885883a 	add	r2,r3,r2
10104cec:	11000017 	ldw	r4,0(r2)
10104cf0:	11400117 	ldw	r5,4(r2)
10104cf4:	900d883a 	mov	r6,r18
10104cf8:	980f883a 	mov	r7,r19
10104cfc:	010caf00 	call	1010caf0 <__gedf2>
10104d00:	00828d0e 	bge	zero,r2,10105738 <_dtoa_r+0xcd4>
10104d04:	d9000517 	ldw	r4,20(sp)
10104d08:	d8000e15 	stw	zero,56(sp)
10104d0c:	213fffc4 	addi	r4,r4,-1
10104d10:	d9000515 	stw	r4,20(sp)
10104d14:	b42dc83a 	sub	r22,r22,r16
10104d18:	b5bfffc4 	addi	r22,r22,-1
10104d1c:	b0026f16 	blt	r22,zero,101056dc <_dtoa_r+0xc78>
10104d20:	d8000815 	stw	zero,32(sp)
10104d24:	d9c00517 	ldw	r7,20(sp)
10104d28:	38026416 	blt	r7,zero,101056bc <_dtoa_r+0xc58>
10104d2c:	b1ed883a 	add	r22,r22,r7
10104d30:	d9c00d15 	stw	r7,52(sp)
10104d34:	d8000a15 	stw	zero,40(sp)
10104d38:	d9800317 	ldw	r6,12(sp)
10104d3c:	00800244 	movi	r2,9
10104d40:	11811436 	bltu	r2,r6,10105194 <_dtoa_r+0x730>
10104d44:	00800144 	movi	r2,5
10104d48:	1184e10e 	bge	r2,r6,101060d0 <_dtoa_r+0x166c>
10104d4c:	31bfff04 	addi	r6,r6,-4
10104d50:	d9800315 	stw	r6,12(sp)
10104d54:	0023883a 	mov	r17,zero
10104d58:	d9800317 	ldw	r6,12(sp)
10104d5c:	008000c4 	movi	r2,3
10104d60:	30836726 	beq	r6,r2,10105b00 <_dtoa_r+0x109c>
10104d64:	1183410e 	bge	r2,r6,10105a6c <_dtoa_r+0x1008>
10104d68:	d9c00317 	ldw	r7,12(sp)
10104d6c:	00800104 	movi	r2,4
10104d70:	38827c26 	beq	r7,r2,10105764 <_dtoa_r+0xd00>
10104d74:	00800144 	movi	r2,5
10104d78:	3884c41e 	bne	r7,r2,1010608c <_dtoa_r+0x1628>
10104d7c:	00800044 	movi	r2,1
10104d80:	d8800b15 	stw	r2,44(sp)
10104d84:	d8c00517 	ldw	r3,20(sp)
10104d88:	d9002217 	ldw	r4,136(sp)
10104d8c:	1907883a 	add	r3,r3,r4
10104d90:	19800044 	addi	r6,r3,1
10104d94:	d8c00c15 	stw	r3,48(sp)
10104d98:	d9800615 	stw	r6,24(sp)
10104d9c:	0183a40e 	bge	zero,r6,10105c30 <_dtoa_r+0x11cc>
10104da0:	d9800617 	ldw	r6,24(sp)
10104da4:	3021883a 	mov	r16,r6
10104da8:	e0001115 	stw	zero,68(fp)
10104dac:	008005c4 	movi	r2,23
10104db0:	1184c92e 	bgeu	r2,r6,101060d8 <_dtoa_r+0x1674>
10104db4:	00c00044 	movi	r3,1
10104db8:	00800104 	movi	r2,4
10104dbc:	1085883a 	add	r2,r2,r2
10104dc0:	11000504 	addi	r4,r2,20
10104dc4:	180b883a 	mov	r5,r3
10104dc8:	18c00044 	addi	r3,r3,1
10104dcc:	313ffb2e 	bgeu	r6,r4,10104dbc <__alt_data_end+0xfffe4dbc>
10104dd0:	e1401115 	stw	r5,68(fp)
10104dd4:	e009883a 	mov	r4,fp
10104dd8:	01071580 	call	10107158 <_Balloc>
10104ddc:	d8800715 	stw	r2,28(sp)
10104de0:	e0801015 	stw	r2,64(fp)
10104de4:	00800384 	movi	r2,14
10104de8:	1400f736 	bltu	r2,r16,101051c8 <_dtoa_r+0x764>
10104dec:	8800f626 	beq	r17,zero,101051c8 <_dtoa_r+0x764>
10104df0:	d9c00517 	ldw	r7,20(sp)
10104df4:	01c39a0e 	bge	zero,r7,10105c60 <_dtoa_r+0x11fc>
10104df8:	388003cc 	andi	r2,r7,15
10104dfc:	100490fa 	slli	r2,r2,3
10104e00:	382bd13a 	srai	r21,r7,4
10104e04:	00c40474 	movhi	r3,4113
10104e08:	18c30f04 	addi	r3,r3,3132
10104e0c:	1885883a 	add	r2,r3,r2
10104e10:	a8c0040c 	andi	r3,r21,16
10104e14:	12400017 	ldw	r9,0(r2)
10104e18:	12000117 	ldw	r8,4(r2)
10104e1c:	18037926 	beq	r3,zero,10105c04 <_dtoa_r+0x11a0>
10104e20:	00840474 	movhi	r2,4113
10104e24:	10830504 	addi	r2,r2,3092
10104e28:	11800817 	ldw	r6,32(r2)
10104e2c:	11c00917 	ldw	r7,36(r2)
10104e30:	9009883a 	mov	r4,r18
10104e34:	980b883a 	mov	r5,r19
10104e38:	da001715 	stw	r8,92(sp)
10104e3c:	da401615 	stw	r9,88(sp)
10104e40:	010c1800 	call	1010c180 <__divdf3>
10104e44:	da001717 	ldw	r8,92(sp)
10104e48:	da401617 	ldw	r9,88(sp)
10104e4c:	ad4003cc 	andi	r21,r21,15
10104e50:	040000c4 	movi	r16,3
10104e54:	1023883a 	mov	r17,r2
10104e58:	1829883a 	mov	r20,r3
10104e5c:	a8001126 	beq	r21,zero,10104ea4 <_dtoa_r+0x440>
10104e60:	05c40474 	movhi	r23,4113
10104e64:	bdc30504 	addi	r23,r23,3092
10104e68:	4805883a 	mov	r2,r9
10104e6c:	4007883a 	mov	r3,r8
10104e70:	a980004c 	andi	r6,r21,1
10104e74:	1009883a 	mov	r4,r2
10104e78:	a82bd07a 	srai	r21,r21,1
10104e7c:	180b883a 	mov	r5,r3
10104e80:	30000426 	beq	r6,zero,10104e94 <_dtoa_r+0x430>
10104e84:	b9800017 	ldw	r6,0(r23)
10104e88:	b9c00117 	ldw	r7,4(r23)
10104e8c:	84000044 	addi	r16,r16,1
10104e90:	010ccc00 	call	1010ccc0 <__muldf3>
10104e94:	bdc00204 	addi	r23,r23,8
10104e98:	a83ff51e 	bne	r21,zero,10104e70 <__alt_data_end+0xfffe4e70>
10104e9c:	1013883a 	mov	r9,r2
10104ea0:	1811883a 	mov	r8,r3
10104ea4:	480d883a 	mov	r6,r9
10104ea8:	400f883a 	mov	r7,r8
10104eac:	8809883a 	mov	r4,r17
10104eb0:	a00b883a 	mov	r5,r20
10104eb4:	010c1800 	call	1010c180 <__divdf3>
10104eb8:	d8800f15 	stw	r2,60(sp)
10104ebc:	d8c01015 	stw	r3,64(sp)
10104ec0:	d8c00e17 	ldw	r3,56(sp)
10104ec4:	18000626 	beq	r3,zero,10104ee0 <_dtoa_r+0x47c>
10104ec8:	d9000f17 	ldw	r4,60(sp)
10104ecc:	d9401017 	ldw	r5,64(sp)
10104ed0:	000d883a 	mov	r6,zero
10104ed4:	01cffc34 	movhi	r7,16368
10104ed8:	010cbcc0 	call	1010cbcc <__ledf2>
10104edc:	10040b16 	blt	r2,zero,10105f0c <_dtoa_r+0x14a8>
10104ee0:	8009883a 	mov	r4,r16
10104ee4:	010dd540 	call	1010dd54 <__floatsidf>
10104ee8:	d9800f17 	ldw	r6,60(sp)
10104eec:	d9c01017 	ldw	r7,64(sp)
10104ef0:	1009883a 	mov	r4,r2
10104ef4:	180b883a 	mov	r5,r3
10104ef8:	010ccc00 	call	1010ccc0 <__muldf3>
10104efc:	000d883a 	mov	r6,zero
10104f00:	01d00734 	movhi	r7,16412
10104f04:	1009883a 	mov	r4,r2
10104f08:	180b883a 	mov	r5,r3
10104f0c:	010b8d40 	call	1010b8d4 <__adddf3>
10104f10:	1021883a 	mov	r16,r2
10104f14:	d8800617 	ldw	r2,24(sp)
10104f18:	047f3034 	movhi	r17,64704
10104f1c:	1c63883a 	add	r17,r3,r17
10104f20:	10031826 	beq	r2,zero,10105b84 <_dtoa_r+0x1120>
10104f24:	d8c00517 	ldw	r3,20(sp)
10104f28:	db000617 	ldw	r12,24(sp)
10104f2c:	d8c01315 	stw	r3,76(sp)
10104f30:	d9000b17 	ldw	r4,44(sp)
10104f34:	20038f26 	beq	r4,zero,10105d74 <_dtoa_r+0x1310>
10104f38:	60bfffc4 	addi	r2,r12,-1
10104f3c:	100490fa 	slli	r2,r2,3
10104f40:	00c40474 	movhi	r3,4113
10104f44:	18c30f04 	addi	r3,r3,3132
10104f48:	1885883a 	add	r2,r3,r2
10104f4c:	11800017 	ldw	r6,0(r2)
10104f50:	11c00117 	ldw	r7,4(r2)
10104f54:	d8800717 	ldw	r2,28(sp)
10104f58:	0009883a 	mov	r4,zero
10104f5c:	014ff834 	movhi	r5,16352
10104f60:	db001615 	stw	r12,88(sp)
10104f64:	15c00044 	addi	r23,r2,1
10104f68:	010c1800 	call	1010c180 <__divdf3>
10104f6c:	800d883a 	mov	r6,r16
10104f70:	880f883a 	mov	r7,r17
10104f74:	1009883a 	mov	r4,r2
10104f78:	180b883a 	mov	r5,r3
10104f7c:	010d3d80 	call	1010d3d8 <__subdf3>
10104f80:	d9401017 	ldw	r5,64(sp)
10104f84:	d9000f17 	ldw	r4,60(sp)
10104f88:	102b883a 	mov	r21,r2
10104f8c:	d8c01215 	stw	r3,72(sp)
10104f90:	010dcd40 	call	1010dcd4 <__fixdfsi>
10104f94:	1009883a 	mov	r4,r2
10104f98:	1029883a 	mov	r20,r2
10104f9c:	010dd540 	call	1010dd54 <__floatsidf>
10104fa0:	d9000f17 	ldw	r4,60(sp)
10104fa4:	d9401017 	ldw	r5,64(sp)
10104fa8:	100d883a 	mov	r6,r2
10104fac:	180f883a 	mov	r7,r3
10104fb0:	010d3d80 	call	1010d3d8 <__subdf3>
10104fb4:	1823883a 	mov	r17,r3
10104fb8:	d8c00717 	ldw	r3,28(sp)
10104fbc:	d9401217 	ldw	r5,72(sp)
10104fc0:	a2000c04 	addi	r8,r20,48
10104fc4:	1021883a 	mov	r16,r2
10104fc8:	1a000005 	stb	r8,0(r3)
10104fcc:	800d883a 	mov	r6,r16
10104fd0:	880f883a 	mov	r7,r17
10104fd4:	a809883a 	mov	r4,r21
10104fd8:	4029883a 	mov	r20,r8
10104fdc:	010caf00 	call	1010caf0 <__gedf2>
10104fe0:	00841d16 	blt	zero,r2,10106058 <_dtoa_r+0x15f4>
10104fe4:	800d883a 	mov	r6,r16
10104fe8:	880f883a 	mov	r7,r17
10104fec:	0009883a 	mov	r4,zero
10104ff0:	014ffc34 	movhi	r5,16368
10104ff4:	010d3d80 	call	1010d3d8 <__subdf3>
10104ff8:	d9401217 	ldw	r5,72(sp)
10104ffc:	100d883a 	mov	r6,r2
10105000:	180f883a 	mov	r7,r3
10105004:	a809883a 	mov	r4,r21
10105008:	010caf00 	call	1010caf0 <__gedf2>
1010500c:	db001617 	ldw	r12,88(sp)
10105010:	00840e16 	blt	zero,r2,1010604c <_dtoa_r+0x15e8>
10105014:	00800044 	movi	r2,1
10105018:	13006b0e 	bge	r2,r12,101051c8 <_dtoa_r+0x764>
1010501c:	d9000717 	ldw	r4,28(sp)
10105020:	dd800f15 	stw	r22,60(sp)
10105024:	dcc01015 	stw	r19,64(sp)
10105028:	2319883a 	add	r12,r4,r12
1010502c:	dcc01217 	ldw	r19,72(sp)
10105030:	602d883a 	mov	r22,r12
10105034:	dc801215 	stw	r18,72(sp)
10105038:	b825883a 	mov	r18,r23
1010503c:	00000906 	br	10105064 <_dtoa_r+0x600>
10105040:	010d3d80 	call	1010d3d8 <__subdf3>
10105044:	a80d883a 	mov	r6,r21
10105048:	980f883a 	mov	r7,r19
1010504c:	1009883a 	mov	r4,r2
10105050:	180b883a 	mov	r5,r3
10105054:	010cbcc0 	call	1010cbcc <__ledf2>
10105058:	1003e816 	blt	r2,zero,10105ffc <_dtoa_r+0x1598>
1010505c:	b825883a 	mov	r18,r23
10105060:	bd83e926 	beq	r23,r22,10106008 <_dtoa_r+0x15a4>
10105064:	a809883a 	mov	r4,r21
10105068:	980b883a 	mov	r5,r19
1010506c:	000d883a 	mov	r6,zero
10105070:	01d00934 	movhi	r7,16420
10105074:	010ccc00 	call	1010ccc0 <__muldf3>
10105078:	000d883a 	mov	r6,zero
1010507c:	01d00934 	movhi	r7,16420
10105080:	8009883a 	mov	r4,r16
10105084:	880b883a 	mov	r5,r17
10105088:	102b883a 	mov	r21,r2
1010508c:	1827883a 	mov	r19,r3
10105090:	010ccc00 	call	1010ccc0 <__muldf3>
10105094:	180b883a 	mov	r5,r3
10105098:	1009883a 	mov	r4,r2
1010509c:	1821883a 	mov	r16,r3
101050a0:	1023883a 	mov	r17,r2
101050a4:	010dcd40 	call	1010dcd4 <__fixdfsi>
101050a8:	1009883a 	mov	r4,r2
101050ac:	1029883a 	mov	r20,r2
101050b0:	010dd540 	call	1010dd54 <__floatsidf>
101050b4:	8809883a 	mov	r4,r17
101050b8:	800b883a 	mov	r5,r16
101050bc:	100d883a 	mov	r6,r2
101050c0:	180f883a 	mov	r7,r3
101050c4:	010d3d80 	call	1010d3d8 <__subdf3>
101050c8:	a5000c04 	addi	r20,r20,48
101050cc:	a80d883a 	mov	r6,r21
101050d0:	980f883a 	mov	r7,r19
101050d4:	1009883a 	mov	r4,r2
101050d8:	180b883a 	mov	r5,r3
101050dc:	95000005 	stb	r20,0(r18)
101050e0:	1021883a 	mov	r16,r2
101050e4:	1823883a 	mov	r17,r3
101050e8:	010cbcc0 	call	1010cbcc <__ledf2>
101050ec:	bdc00044 	addi	r23,r23,1
101050f0:	800d883a 	mov	r6,r16
101050f4:	880f883a 	mov	r7,r17
101050f8:	0009883a 	mov	r4,zero
101050fc:	014ffc34 	movhi	r5,16368
10105100:	103fcf0e 	bge	r2,zero,10105040 <__alt_data_end+0xfffe5040>
10105104:	d8c01317 	ldw	r3,76(sp)
10105108:	d8c00515 	stw	r3,20(sp)
1010510c:	d9400917 	ldw	r5,36(sp)
10105110:	e009883a 	mov	r4,fp
10105114:	01072000 	call	10107200 <_Bfree>
10105118:	d9000517 	ldw	r4,20(sp)
1010511c:	d9802317 	ldw	r6,140(sp)
10105120:	d9c02517 	ldw	r7,148(sp)
10105124:	b8000005 	stb	zero,0(r23)
10105128:	20800044 	addi	r2,r4,1
1010512c:	30800015 	stw	r2,0(r6)
10105130:	3802aa26 	beq	r7,zero,10105bdc <_dtoa_r+0x1178>
10105134:	3dc00015 	stw	r23,0(r7)
10105138:	d8800717 	ldw	r2,28(sp)
1010513c:	003e7906 	br	10104b24 <__alt_data_end+0xfffe4b24>
10105140:	00800434 	movhi	r2,16
10105144:	10bfffc4 	addi	r2,r2,-1
10105148:	88a2703a 	and	r17,r17,r2
1010514c:	883e851e 	bne	r17,zero,10104b64 <__alt_data_end+0xfffe4b64>
10105150:	00840474 	movhi	r2,4113
10105154:	1082f104 	addi	r2,r2,3012
10105158:	003e8406 	br	10104b6c <__alt_data_end+0xfffe4b6c>
1010515c:	10c00204 	addi	r3,r2,8
10105160:	003e8706 	br	10104b80 <__alt_data_end+0xfffe4b80>
10105164:	01400434 	movhi	r5,16
10105168:	297fffc4 	addi	r5,r5,-1
1010516c:	994a703a 	and	r5,r19,r5
10105170:	9009883a 	mov	r4,r18
10105174:	843f0044 	addi	r16,r16,-1023
10105178:	294ffc34 	orhi	r5,r5,16368
1010517c:	dd800217 	ldw	r22,8(sp)
10105180:	d8001115 	stw	zero,68(sp)
10105184:	003ea506 	br	10104c1c <__alt_data_end+0xfffe4c1c>
10105188:	00840474 	movhi	r2,4113
1010518c:	1082e804 	addi	r2,r2,2976
10105190:	003e6406 	br	10104b24 <__alt_data_end+0xfffe4b24>
10105194:	e0001115 	stw	zero,68(fp)
10105198:	000b883a 	mov	r5,zero
1010519c:	e009883a 	mov	r4,fp
101051a0:	01071580 	call	10107158 <_Balloc>
101051a4:	01bfffc4 	movi	r6,-1
101051a8:	01c00044 	movi	r7,1
101051ac:	d8800715 	stw	r2,28(sp)
101051b0:	d9800c15 	stw	r6,48(sp)
101051b4:	e0801015 	stw	r2,64(fp)
101051b8:	d8000315 	stw	zero,12(sp)
101051bc:	d9c00b15 	stw	r7,44(sp)
101051c0:	d9800615 	stw	r6,24(sp)
101051c4:	d8002215 	stw	zero,136(sp)
101051c8:	d8800117 	ldw	r2,4(sp)
101051cc:	10008916 	blt	r2,zero,101053f4 <_dtoa_r+0x990>
101051d0:	d9000517 	ldw	r4,20(sp)
101051d4:	00c00384 	movi	r3,14
101051d8:	19008616 	blt	r3,r4,101053f4 <_dtoa_r+0x990>
101051dc:	200490fa 	slli	r2,r4,3
101051e0:	00c40474 	movhi	r3,4113
101051e4:	d9802217 	ldw	r6,136(sp)
101051e8:	18c30f04 	addi	r3,r3,3132
101051ec:	1885883a 	add	r2,r3,r2
101051f0:	14000017 	ldw	r16,0(r2)
101051f4:	14400117 	ldw	r17,4(r2)
101051f8:	30016316 	blt	r6,zero,10105788 <_dtoa_r+0xd24>
101051fc:	800d883a 	mov	r6,r16
10105200:	880f883a 	mov	r7,r17
10105204:	9009883a 	mov	r4,r18
10105208:	980b883a 	mov	r5,r19
1010520c:	010c1800 	call	1010c180 <__divdf3>
10105210:	180b883a 	mov	r5,r3
10105214:	1009883a 	mov	r4,r2
10105218:	010dcd40 	call	1010dcd4 <__fixdfsi>
1010521c:	1009883a 	mov	r4,r2
10105220:	102b883a 	mov	r21,r2
10105224:	010dd540 	call	1010dd54 <__floatsidf>
10105228:	800d883a 	mov	r6,r16
1010522c:	880f883a 	mov	r7,r17
10105230:	1009883a 	mov	r4,r2
10105234:	180b883a 	mov	r5,r3
10105238:	010ccc00 	call	1010ccc0 <__muldf3>
1010523c:	100d883a 	mov	r6,r2
10105240:	180f883a 	mov	r7,r3
10105244:	9009883a 	mov	r4,r18
10105248:	980b883a 	mov	r5,r19
1010524c:	010d3d80 	call	1010d3d8 <__subdf3>
10105250:	d9c00717 	ldw	r7,28(sp)
10105254:	1009883a 	mov	r4,r2
10105258:	a8800c04 	addi	r2,r21,48
1010525c:	38800005 	stb	r2,0(r7)
10105260:	3dc00044 	addi	r23,r7,1
10105264:	d9c00617 	ldw	r7,24(sp)
10105268:	01800044 	movi	r6,1
1010526c:	180b883a 	mov	r5,r3
10105270:	2005883a 	mov	r2,r4
10105274:	39803826 	beq	r7,r6,10105358 <_dtoa_r+0x8f4>
10105278:	000d883a 	mov	r6,zero
1010527c:	01d00934 	movhi	r7,16420
10105280:	010ccc00 	call	1010ccc0 <__muldf3>
10105284:	000d883a 	mov	r6,zero
10105288:	000f883a 	mov	r7,zero
1010528c:	1009883a 	mov	r4,r2
10105290:	180b883a 	mov	r5,r3
10105294:	1025883a 	mov	r18,r2
10105298:	1827883a 	mov	r19,r3
1010529c:	010ca680 	call	1010ca68 <__eqdf2>
101052a0:	103f9a26 	beq	r2,zero,1010510c <__alt_data_end+0xfffe510c>
101052a4:	d9c00617 	ldw	r7,24(sp)
101052a8:	d8c00717 	ldw	r3,28(sp)
101052ac:	b829883a 	mov	r20,r23
101052b0:	38bfffc4 	addi	r2,r7,-1
101052b4:	18ad883a 	add	r22,r3,r2
101052b8:	00000a06 	br	101052e4 <_dtoa_r+0x880>
101052bc:	010ccc00 	call	1010ccc0 <__muldf3>
101052c0:	000d883a 	mov	r6,zero
101052c4:	000f883a 	mov	r7,zero
101052c8:	1009883a 	mov	r4,r2
101052cc:	180b883a 	mov	r5,r3
101052d0:	1025883a 	mov	r18,r2
101052d4:	1827883a 	mov	r19,r3
101052d8:	b829883a 	mov	r20,r23
101052dc:	010ca680 	call	1010ca68 <__eqdf2>
101052e0:	103f8a26 	beq	r2,zero,1010510c <__alt_data_end+0xfffe510c>
101052e4:	800d883a 	mov	r6,r16
101052e8:	880f883a 	mov	r7,r17
101052ec:	9009883a 	mov	r4,r18
101052f0:	980b883a 	mov	r5,r19
101052f4:	010c1800 	call	1010c180 <__divdf3>
101052f8:	180b883a 	mov	r5,r3
101052fc:	1009883a 	mov	r4,r2
10105300:	010dcd40 	call	1010dcd4 <__fixdfsi>
10105304:	1009883a 	mov	r4,r2
10105308:	102b883a 	mov	r21,r2
1010530c:	010dd540 	call	1010dd54 <__floatsidf>
10105310:	800d883a 	mov	r6,r16
10105314:	880f883a 	mov	r7,r17
10105318:	1009883a 	mov	r4,r2
1010531c:	180b883a 	mov	r5,r3
10105320:	010ccc00 	call	1010ccc0 <__muldf3>
10105324:	100d883a 	mov	r6,r2
10105328:	180f883a 	mov	r7,r3
1010532c:	9009883a 	mov	r4,r18
10105330:	980b883a 	mov	r5,r19
10105334:	010d3d80 	call	1010d3d8 <__subdf3>
10105338:	aa000c04 	addi	r8,r21,48
1010533c:	a2000005 	stb	r8,0(r20)
10105340:	000d883a 	mov	r6,zero
10105344:	01d00934 	movhi	r7,16420
10105348:	1009883a 	mov	r4,r2
1010534c:	180b883a 	mov	r5,r3
10105350:	a5c00044 	addi	r23,r20,1
10105354:	b53fd91e 	bne	r22,r20,101052bc <__alt_data_end+0xfffe52bc>
10105358:	100d883a 	mov	r6,r2
1010535c:	180f883a 	mov	r7,r3
10105360:	1009883a 	mov	r4,r2
10105364:	180b883a 	mov	r5,r3
10105368:	010b8d40 	call	1010b8d4 <__adddf3>
1010536c:	100d883a 	mov	r6,r2
10105370:	180f883a 	mov	r7,r3
10105374:	8009883a 	mov	r4,r16
10105378:	880b883a 	mov	r5,r17
1010537c:	1027883a 	mov	r19,r2
10105380:	1825883a 	mov	r18,r3
10105384:	010cbcc0 	call	1010cbcc <__ledf2>
10105388:	10000816 	blt	r2,zero,101053ac <_dtoa_r+0x948>
1010538c:	980d883a 	mov	r6,r19
10105390:	900f883a 	mov	r7,r18
10105394:	8009883a 	mov	r4,r16
10105398:	880b883a 	mov	r5,r17
1010539c:	010ca680 	call	1010ca68 <__eqdf2>
101053a0:	103f5a1e 	bne	r2,zero,1010510c <__alt_data_end+0xfffe510c>
101053a4:	ad40004c 	andi	r21,r21,1
101053a8:	a83f5826 	beq	r21,zero,1010510c <__alt_data_end+0xfffe510c>
101053ac:	bd3fffc3 	ldbu	r20,-1(r23)
101053b0:	b8bfffc4 	addi	r2,r23,-1
101053b4:	1007883a 	mov	r3,r2
101053b8:	01400e44 	movi	r5,57
101053bc:	d9800717 	ldw	r6,28(sp)
101053c0:	00000506 	br	101053d8 <_dtoa_r+0x974>
101053c4:	18ffffc4 	addi	r3,r3,-1
101053c8:	11824726 	beq	r2,r6,10105ce8 <_dtoa_r+0x1284>
101053cc:	1d000003 	ldbu	r20,0(r3)
101053d0:	102f883a 	mov	r23,r2
101053d4:	10bfffc4 	addi	r2,r2,-1
101053d8:	a1003fcc 	andi	r4,r20,255
101053dc:	2100201c 	xori	r4,r4,128
101053e0:	213fe004 	addi	r4,r4,-128
101053e4:	217ff726 	beq	r4,r5,101053c4 <__alt_data_end+0xfffe53c4>
101053e8:	a2000044 	addi	r8,r20,1
101053ec:	12000005 	stb	r8,0(r2)
101053f0:	003f4606 	br	1010510c <__alt_data_end+0xfffe510c>
101053f4:	d9000b17 	ldw	r4,44(sp)
101053f8:	2000c826 	beq	r4,zero,1010571c <_dtoa_r+0xcb8>
101053fc:	d9800317 	ldw	r6,12(sp)
10105400:	00c00044 	movi	r3,1
10105404:	1980f90e 	bge	r3,r6,101057ec <_dtoa_r+0xd88>
10105408:	d8800617 	ldw	r2,24(sp)
1010540c:	d8c00a17 	ldw	r3,40(sp)
10105410:	157fffc4 	addi	r21,r2,-1
10105414:	1d41f316 	blt	r3,r21,10105be4 <_dtoa_r+0x1180>
10105418:	1d6bc83a 	sub	r21,r3,r21
1010541c:	d9c00617 	ldw	r7,24(sp)
10105420:	3802aa16 	blt	r7,zero,10105ecc <_dtoa_r+0x1468>
10105424:	dd000817 	ldw	r20,32(sp)
10105428:	d8800617 	ldw	r2,24(sp)
1010542c:	d8c00817 	ldw	r3,32(sp)
10105430:	01400044 	movi	r5,1
10105434:	e009883a 	mov	r4,fp
10105438:	1887883a 	add	r3,r3,r2
1010543c:	d8c00815 	stw	r3,32(sp)
10105440:	b0ad883a 	add	r22,r22,r2
10105444:	01075640 	call	10107564 <__i2b>
10105448:	1023883a 	mov	r17,r2
1010544c:	a0000826 	beq	r20,zero,10105470 <_dtoa_r+0xa0c>
10105450:	0580070e 	bge	zero,r22,10105470 <_dtoa_r+0xa0c>
10105454:	a005883a 	mov	r2,r20
10105458:	b500b916 	blt	r22,r20,10105740 <_dtoa_r+0xcdc>
1010545c:	d9000817 	ldw	r4,32(sp)
10105460:	a0a9c83a 	sub	r20,r20,r2
10105464:	b0adc83a 	sub	r22,r22,r2
10105468:	2089c83a 	sub	r4,r4,r2
1010546c:	d9000815 	stw	r4,32(sp)
10105470:	d9800a17 	ldw	r6,40(sp)
10105474:	0181810e 	bge	zero,r6,10105a7c <_dtoa_r+0x1018>
10105478:	d9c00b17 	ldw	r7,44(sp)
1010547c:	3800b326 	beq	r7,zero,1010574c <_dtoa_r+0xce8>
10105480:	a800b226 	beq	r21,zero,1010574c <_dtoa_r+0xce8>
10105484:	880b883a 	mov	r5,r17
10105488:	a80d883a 	mov	r6,r21
1010548c:	e009883a 	mov	r4,fp
10105490:	01077980 	call	10107798 <__pow5mult>
10105494:	d9800917 	ldw	r6,36(sp)
10105498:	100b883a 	mov	r5,r2
1010549c:	e009883a 	mov	r4,fp
101054a0:	1023883a 	mov	r17,r2
101054a4:	01075a00 	call	101075a0 <__multiply>
101054a8:	1021883a 	mov	r16,r2
101054ac:	d8800a17 	ldw	r2,40(sp)
101054b0:	d9400917 	ldw	r5,36(sp)
101054b4:	e009883a 	mov	r4,fp
101054b8:	1545c83a 	sub	r2,r2,r21
101054bc:	d8800a15 	stw	r2,40(sp)
101054c0:	01072000 	call	10107200 <_Bfree>
101054c4:	d8c00a17 	ldw	r3,40(sp)
101054c8:	18009f1e 	bne	r3,zero,10105748 <_dtoa_r+0xce4>
101054cc:	05c00044 	movi	r23,1
101054d0:	e009883a 	mov	r4,fp
101054d4:	b80b883a 	mov	r5,r23
101054d8:	01075640 	call	10107564 <__i2b>
101054dc:	d9000d17 	ldw	r4,52(sp)
101054e0:	102b883a 	mov	r21,r2
101054e4:	2000ce26 	beq	r4,zero,10105820 <_dtoa_r+0xdbc>
101054e8:	200d883a 	mov	r6,r4
101054ec:	100b883a 	mov	r5,r2
101054f0:	e009883a 	mov	r4,fp
101054f4:	01077980 	call	10107798 <__pow5mult>
101054f8:	d9800317 	ldw	r6,12(sp)
101054fc:	102b883a 	mov	r21,r2
10105500:	b981810e 	bge	r23,r6,10105b08 <_dtoa_r+0x10a4>
10105504:	0027883a 	mov	r19,zero
10105508:	a8800417 	ldw	r2,16(r21)
1010550c:	05c00804 	movi	r23,32
10105510:	10800104 	addi	r2,r2,4
10105514:	1085883a 	add	r2,r2,r2
10105518:	1085883a 	add	r2,r2,r2
1010551c:	a885883a 	add	r2,r21,r2
10105520:	11000017 	ldw	r4,0(r2)
10105524:	010744c0 	call	1010744c <__hi0bits>
10105528:	b885c83a 	sub	r2,r23,r2
1010552c:	1585883a 	add	r2,r2,r22
10105530:	108007cc 	andi	r2,r2,31
10105534:	1000b326 	beq	r2,zero,10105804 <_dtoa_r+0xda0>
10105538:	00c00804 	movi	r3,32
1010553c:	1887c83a 	sub	r3,r3,r2
10105540:	01000104 	movi	r4,4
10105544:	20c2cd0e 	bge	r4,r3,1010607c <_dtoa_r+0x1618>
10105548:	00c00704 	movi	r3,28
1010554c:	1885c83a 	sub	r2,r3,r2
10105550:	d8c00817 	ldw	r3,32(sp)
10105554:	a0a9883a 	add	r20,r20,r2
10105558:	b0ad883a 	add	r22,r22,r2
1010555c:	1887883a 	add	r3,r3,r2
10105560:	d8c00815 	stw	r3,32(sp)
10105564:	d9800817 	ldw	r6,32(sp)
10105568:	0180040e 	bge	zero,r6,1010557c <_dtoa_r+0xb18>
1010556c:	800b883a 	mov	r5,r16
10105570:	e009883a 	mov	r4,fp
10105574:	01078d80 	call	101078d8 <__lshift>
10105578:	1021883a 	mov	r16,r2
1010557c:	0580050e 	bge	zero,r22,10105594 <_dtoa_r+0xb30>
10105580:	a80b883a 	mov	r5,r21
10105584:	b00d883a 	mov	r6,r22
10105588:	e009883a 	mov	r4,fp
1010558c:	01078d80 	call	101078d8 <__lshift>
10105590:	102b883a 	mov	r21,r2
10105594:	d9c00e17 	ldw	r7,56(sp)
10105598:	3801211e 	bne	r7,zero,10105a20 <_dtoa_r+0xfbc>
1010559c:	d9800617 	ldw	r6,24(sp)
101055a0:	0181380e 	bge	zero,r6,10105a84 <_dtoa_r+0x1020>
101055a4:	d8c00b17 	ldw	r3,44(sp)
101055a8:	1800ab1e 	bne	r3,zero,10105858 <_dtoa_r+0xdf4>
101055ac:	dc800717 	ldw	r18,28(sp)
101055b0:	dcc00617 	ldw	r19,24(sp)
101055b4:	9029883a 	mov	r20,r18
101055b8:	00000206 	br	101055c4 <_dtoa_r+0xb60>
101055bc:	01072280 	call	10107228 <__multadd>
101055c0:	1021883a 	mov	r16,r2
101055c4:	a80b883a 	mov	r5,r21
101055c8:	8009883a 	mov	r4,r16
101055cc:	01048640 	call	10104864 <quorem>
101055d0:	10800c04 	addi	r2,r2,48
101055d4:	90800005 	stb	r2,0(r18)
101055d8:	94800044 	addi	r18,r18,1
101055dc:	9507c83a 	sub	r3,r18,r20
101055e0:	000f883a 	mov	r7,zero
101055e4:	01800284 	movi	r6,10
101055e8:	800b883a 	mov	r5,r16
101055ec:	e009883a 	mov	r4,fp
101055f0:	1cfff216 	blt	r3,r19,101055bc <__alt_data_end+0xfffe55bc>
101055f4:	1011883a 	mov	r8,r2
101055f8:	d8800617 	ldw	r2,24(sp)
101055fc:	0082370e 	bge	zero,r2,10105edc <_dtoa_r+0x1478>
10105600:	d9000717 	ldw	r4,28(sp)
10105604:	0025883a 	mov	r18,zero
10105608:	20af883a 	add	r23,r4,r2
1010560c:	01800044 	movi	r6,1
10105610:	800b883a 	mov	r5,r16
10105614:	e009883a 	mov	r4,fp
10105618:	da001715 	stw	r8,92(sp)
1010561c:	01078d80 	call	101078d8 <__lshift>
10105620:	a80b883a 	mov	r5,r21
10105624:	1009883a 	mov	r4,r2
10105628:	d8800915 	stw	r2,36(sp)
1010562c:	0107a200 	call	10107a20 <__mcmp>
10105630:	da001717 	ldw	r8,92(sp)
10105634:	0081800e 	bge	zero,r2,10105c38 <_dtoa_r+0x11d4>
10105638:	b93fffc3 	ldbu	r4,-1(r23)
1010563c:	b8bfffc4 	addi	r2,r23,-1
10105640:	1007883a 	mov	r3,r2
10105644:	01800e44 	movi	r6,57
10105648:	d9c00717 	ldw	r7,28(sp)
1010564c:	00000506 	br	10105664 <_dtoa_r+0xc00>
10105650:	18ffffc4 	addi	r3,r3,-1
10105654:	11c12326 	beq	r2,r7,10105ae4 <_dtoa_r+0x1080>
10105658:	19000003 	ldbu	r4,0(r3)
1010565c:	102f883a 	mov	r23,r2
10105660:	10bfffc4 	addi	r2,r2,-1
10105664:	21403fcc 	andi	r5,r4,255
10105668:	2940201c 	xori	r5,r5,128
1010566c:	297fe004 	addi	r5,r5,-128
10105670:	29bff726 	beq	r5,r6,10105650 <__alt_data_end+0xfffe5650>
10105674:	21000044 	addi	r4,r4,1
10105678:	11000005 	stb	r4,0(r2)
1010567c:	a80b883a 	mov	r5,r21
10105680:	e009883a 	mov	r4,fp
10105684:	01072000 	call	10107200 <_Bfree>
10105688:	883ea026 	beq	r17,zero,1010510c <__alt_data_end+0xfffe510c>
1010568c:	90000426 	beq	r18,zero,101056a0 <_dtoa_r+0xc3c>
10105690:	94400326 	beq	r18,r17,101056a0 <_dtoa_r+0xc3c>
10105694:	900b883a 	mov	r5,r18
10105698:	e009883a 	mov	r4,fp
1010569c:	01072000 	call	10107200 <_Bfree>
101056a0:	880b883a 	mov	r5,r17
101056a4:	e009883a 	mov	r4,fp
101056a8:	01072000 	call	10107200 <_Bfree>
101056ac:	003e9706 	br	1010510c <__alt_data_end+0xfffe510c>
101056b0:	01800044 	movi	r6,1
101056b4:	d9800e15 	stw	r6,56(sp)
101056b8:	003d9606 	br	10104d14 <__alt_data_end+0xfffe4d14>
101056bc:	d8800817 	ldw	r2,32(sp)
101056c0:	d8c00517 	ldw	r3,20(sp)
101056c4:	d8000d15 	stw	zero,52(sp)
101056c8:	10c5c83a 	sub	r2,r2,r3
101056cc:	00c9c83a 	sub	r4,zero,r3
101056d0:	d8800815 	stw	r2,32(sp)
101056d4:	d9000a15 	stw	r4,40(sp)
101056d8:	003d9706 	br	10104d38 <__alt_data_end+0xfffe4d38>
101056dc:	05adc83a 	sub	r22,zero,r22
101056e0:	dd800815 	stw	r22,32(sp)
101056e4:	002d883a 	mov	r22,zero
101056e8:	003d8e06 	br	10104d24 <__alt_data_end+0xfffe4d24>
101056ec:	d9000517 	ldw	r4,20(sp)
101056f0:	010dd540 	call	1010dd54 <__floatsidf>
101056f4:	100d883a 	mov	r6,r2
101056f8:	180f883a 	mov	r7,r3
101056fc:	a009883a 	mov	r4,r20
10105700:	880b883a 	mov	r5,r17
10105704:	010ca680 	call	1010ca68 <__eqdf2>
10105708:	103d7126 	beq	r2,zero,10104cd0 <__alt_data_end+0xfffe4cd0>
1010570c:	d9c00517 	ldw	r7,20(sp)
10105710:	39ffffc4 	addi	r7,r7,-1
10105714:	d9c00515 	stw	r7,20(sp)
10105718:	003d6d06 	br	10104cd0 <__alt_data_end+0xfffe4cd0>
1010571c:	dd400a17 	ldw	r21,40(sp)
10105720:	dd000817 	ldw	r20,32(sp)
10105724:	0023883a 	mov	r17,zero
10105728:	003f4806 	br	1010544c <__alt_data_end+0xfffe544c>
1010572c:	10e3c83a 	sub	r17,r2,r3
10105730:	9448983a 	sll	r4,r18,r17
10105734:	003d3206 	br	10104c00 <__alt_data_end+0xfffe4c00>
10105738:	d8000e15 	stw	zero,56(sp)
1010573c:	003d7506 	br	10104d14 <__alt_data_end+0xfffe4d14>
10105740:	b005883a 	mov	r2,r22
10105744:	003f4506 	br	1010545c <__alt_data_end+0xfffe545c>
10105748:	dc000915 	stw	r16,36(sp)
1010574c:	d9800a17 	ldw	r6,40(sp)
10105750:	d9400917 	ldw	r5,36(sp)
10105754:	e009883a 	mov	r4,fp
10105758:	01077980 	call	10107798 <__pow5mult>
1010575c:	1021883a 	mov	r16,r2
10105760:	003f5a06 	br	101054cc <__alt_data_end+0xfffe54cc>
10105764:	01c00044 	movi	r7,1
10105768:	d9c00b15 	stw	r7,44(sp)
1010576c:	d8802217 	ldw	r2,136(sp)
10105770:	0081280e 	bge	zero,r2,10105c14 <_dtoa_r+0x11b0>
10105774:	100d883a 	mov	r6,r2
10105778:	1021883a 	mov	r16,r2
1010577c:	d8800c15 	stw	r2,48(sp)
10105780:	d8800615 	stw	r2,24(sp)
10105784:	003d8806 	br	10104da8 <__alt_data_end+0xfffe4da8>
10105788:	d8800617 	ldw	r2,24(sp)
1010578c:	00be9b16 	blt	zero,r2,101051fc <__alt_data_end+0xfffe51fc>
10105790:	10010f1e 	bne	r2,zero,10105bd0 <_dtoa_r+0x116c>
10105794:	880b883a 	mov	r5,r17
10105798:	000d883a 	mov	r6,zero
1010579c:	01d00534 	movhi	r7,16404
101057a0:	8009883a 	mov	r4,r16
101057a4:	010ccc00 	call	1010ccc0 <__muldf3>
101057a8:	900d883a 	mov	r6,r18
101057ac:	980f883a 	mov	r7,r19
101057b0:	1009883a 	mov	r4,r2
101057b4:	180b883a 	mov	r5,r3
101057b8:	010caf00 	call	1010caf0 <__gedf2>
101057bc:	002b883a 	mov	r21,zero
101057c0:	0023883a 	mov	r17,zero
101057c4:	1000bf16 	blt	r2,zero,10105ac4 <_dtoa_r+0x1060>
101057c8:	d9802217 	ldw	r6,136(sp)
101057cc:	ddc00717 	ldw	r23,28(sp)
101057d0:	018c303a 	nor	r6,zero,r6
101057d4:	d9800515 	stw	r6,20(sp)
101057d8:	a80b883a 	mov	r5,r21
101057dc:	e009883a 	mov	r4,fp
101057e0:	01072000 	call	10107200 <_Bfree>
101057e4:	883e4926 	beq	r17,zero,1010510c <__alt_data_end+0xfffe510c>
101057e8:	003fad06 	br	101056a0 <__alt_data_end+0xfffe56a0>
101057ec:	d9c01117 	ldw	r7,68(sp)
101057f0:	3801bc26 	beq	r7,zero,10105ee4 <_dtoa_r+0x1480>
101057f4:	10810cc4 	addi	r2,r2,1075
101057f8:	dd400a17 	ldw	r21,40(sp)
101057fc:	dd000817 	ldw	r20,32(sp)
10105800:	003f0a06 	br	1010542c <__alt_data_end+0xfffe542c>
10105804:	00800704 	movi	r2,28
10105808:	d9000817 	ldw	r4,32(sp)
1010580c:	a0a9883a 	add	r20,r20,r2
10105810:	b0ad883a 	add	r22,r22,r2
10105814:	2089883a 	add	r4,r4,r2
10105818:	d9000815 	stw	r4,32(sp)
1010581c:	003f5106 	br	10105564 <__alt_data_end+0xfffe5564>
10105820:	d8c00317 	ldw	r3,12(sp)
10105824:	b8c1fc0e 	bge	r23,r3,10106018 <_dtoa_r+0x15b4>
10105828:	0027883a 	mov	r19,zero
1010582c:	b805883a 	mov	r2,r23
10105830:	003f3e06 	br	1010552c <__alt_data_end+0xfffe552c>
10105834:	880b883a 	mov	r5,r17
10105838:	e009883a 	mov	r4,fp
1010583c:	000f883a 	mov	r7,zero
10105840:	01800284 	movi	r6,10
10105844:	01072280 	call	10107228 <__multadd>
10105848:	d9000c17 	ldw	r4,48(sp)
1010584c:	1023883a 	mov	r17,r2
10105850:	0102040e 	bge	zero,r4,10106064 <_dtoa_r+0x1600>
10105854:	d9000615 	stw	r4,24(sp)
10105858:	0500050e 	bge	zero,r20,10105870 <_dtoa_r+0xe0c>
1010585c:	880b883a 	mov	r5,r17
10105860:	a00d883a 	mov	r6,r20
10105864:	e009883a 	mov	r4,fp
10105868:	01078d80 	call	101078d8 <__lshift>
1010586c:	1023883a 	mov	r17,r2
10105870:	9801241e 	bne	r19,zero,10105d04 <_dtoa_r+0x12a0>
10105874:	8829883a 	mov	r20,r17
10105878:	d9000617 	ldw	r4,24(sp)
1010587c:	dcc00717 	ldw	r19,28(sp)
10105880:	9480004c 	andi	r18,r18,1
10105884:	20bfffc4 	addi	r2,r4,-1
10105888:	9885883a 	add	r2,r19,r2
1010588c:	d8800415 	stw	r2,16(sp)
10105890:	dc800615 	stw	r18,24(sp)
10105894:	a80b883a 	mov	r5,r21
10105898:	8009883a 	mov	r4,r16
1010589c:	01048640 	call	10104864 <quorem>
101058a0:	880b883a 	mov	r5,r17
101058a4:	8009883a 	mov	r4,r16
101058a8:	102f883a 	mov	r23,r2
101058ac:	0107a200 	call	10107a20 <__mcmp>
101058b0:	a80b883a 	mov	r5,r21
101058b4:	a00d883a 	mov	r6,r20
101058b8:	e009883a 	mov	r4,fp
101058bc:	102d883a 	mov	r22,r2
101058c0:	0107a800 	call	10107a80 <__mdiff>
101058c4:	1007883a 	mov	r3,r2
101058c8:	10800317 	ldw	r2,12(r2)
101058cc:	bc800c04 	addi	r18,r23,48
101058d0:	180b883a 	mov	r5,r3
101058d4:	10004e1e 	bne	r2,zero,10105a10 <_dtoa_r+0xfac>
101058d8:	8009883a 	mov	r4,r16
101058dc:	d8c01615 	stw	r3,88(sp)
101058e0:	0107a200 	call	10107a20 <__mcmp>
101058e4:	d8c01617 	ldw	r3,88(sp)
101058e8:	e009883a 	mov	r4,fp
101058ec:	d8801615 	stw	r2,88(sp)
101058f0:	180b883a 	mov	r5,r3
101058f4:	01072000 	call	10107200 <_Bfree>
101058f8:	d8801617 	ldw	r2,88(sp)
101058fc:	1000041e 	bne	r2,zero,10105910 <_dtoa_r+0xeac>
10105900:	d9800317 	ldw	r6,12(sp)
10105904:	3000021e 	bne	r6,zero,10105910 <_dtoa_r+0xeac>
10105908:	d8c00617 	ldw	r3,24(sp)
1010590c:	18003726 	beq	r3,zero,101059ec <_dtoa_r+0xf88>
10105910:	b0002016 	blt	r22,zero,10105994 <_dtoa_r+0xf30>
10105914:	b000041e 	bne	r22,zero,10105928 <_dtoa_r+0xec4>
10105918:	d9000317 	ldw	r4,12(sp)
1010591c:	2000021e 	bne	r4,zero,10105928 <_dtoa_r+0xec4>
10105920:	d8c00617 	ldw	r3,24(sp)
10105924:	18001b26 	beq	r3,zero,10105994 <_dtoa_r+0xf30>
10105928:	00810716 	blt	zero,r2,10105d48 <_dtoa_r+0x12e4>
1010592c:	d8c00417 	ldw	r3,16(sp)
10105930:	9d800044 	addi	r22,r19,1
10105934:	9c800005 	stb	r18,0(r19)
10105938:	b02f883a 	mov	r23,r22
1010593c:	98c10626 	beq	r19,r3,10105d58 <_dtoa_r+0x12f4>
10105940:	800b883a 	mov	r5,r16
10105944:	000f883a 	mov	r7,zero
10105948:	01800284 	movi	r6,10
1010594c:	e009883a 	mov	r4,fp
10105950:	01072280 	call	10107228 <__multadd>
10105954:	1021883a 	mov	r16,r2
10105958:	000f883a 	mov	r7,zero
1010595c:	01800284 	movi	r6,10
10105960:	880b883a 	mov	r5,r17
10105964:	e009883a 	mov	r4,fp
10105968:	8d002526 	beq	r17,r20,10105a00 <_dtoa_r+0xf9c>
1010596c:	01072280 	call	10107228 <__multadd>
10105970:	a00b883a 	mov	r5,r20
10105974:	000f883a 	mov	r7,zero
10105978:	01800284 	movi	r6,10
1010597c:	e009883a 	mov	r4,fp
10105980:	1023883a 	mov	r17,r2
10105984:	01072280 	call	10107228 <__multadd>
10105988:	1029883a 	mov	r20,r2
1010598c:	b027883a 	mov	r19,r22
10105990:	003fc006 	br	10105894 <__alt_data_end+0xfffe5894>
10105994:	9011883a 	mov	r8,r18
10105998:	00800e0e 	bge	zero,r2,101059d4 <_dtoa_r+0xf70>
1010599c:	800b883a 	mov	r5,r16
101059a0:	01800044 	movi	r6,1
101059a4:	e009883a 	mov	r4,fp
101059a8:	da001715 	stw	r8,92(sp)
101059ac:	01078d80 	call	101078d8 <__lshift>
101059b0:	a80b883a 	mov	r5,r21
101059b4:	1009883a 	mov	r4,r2
101059b8:	1021883a 	mov	r16,r2
101059bc:	0107a200 	call	10107a20 <__mcmp>
101059c0:	da001717 	ldw	r8,92(sp)
101059c4:	0081960e 	bge	zero,r2,10106020 <_dtoa_r+0x15bc>
101059c8:	00800e44 	movi	r2,57
101059cc:	40817026 	beq	r8,r2,10105f90 <_dtoa_r+0x152c>
101059d0:	ba000c44 	addi	r8,r23,49
101059d4:	8825883a 	mov	r18,r17
101059d8:	9dc00044 	addi	r23,r19,1
101059dc:	9a000005 	stb	r8,0(r19)
101059e0:	a023883a 	mov	r17,r20
101059e4:	dc000915 	stw	r16,36(sp)
101059e8:	003f2406 	br	1010567c <__alt_data_end+0xfffe567c>
101059ec:	00800e44 	movi	r2,57
101059f0:	9011883a 	mov	r8,r18
101059f4:	90816626 	beq	r18,r2,10105f90 <_dtoa_r+0x152c>
101059f8:	05bff516 	blt	zero,r22,101059d0 <__alt_data_end+0xfffe59d0>
101059fc:	003ff506 	br	101059d4 <__alt_data_end+0xfffe59d4>
10105a00:	01072280 	call	10107228 <__multadd>
10105a04:	1023883a 	mov	r17,r2
10105a08:	1029883a 	mov	r20,r2
10105a0c:	003fdf06 	br	1010598c <__alt_data_end+0xfffe598c>
10105a10:	e009883a 	mov	r4,fp
10105a14:	01072000 	call	10107200 <_Bfree>
10105a18:	00800044 	movi	r2,1
10105a1c:	003fbc06 	br	10105910 <__alt_data_end+0xfffe5910>
10105a20:	a80b883a 	mov	r5,r21
10105a24:	8009883a 	mov	r4,r16
10105a28:	0107a200 	call	10107a20 <__mcmp>
10105a2c:	103edb0e 	bge	r2,zero,1010559c <__alt_data_end+0xfffe559c>
10105a30:	800b883a 	mov	r5,r16
10105a34:	000f883a 	mov	r7,zero
10105a38:	01800284 	movi	r6,10
10105a3c:	e009883a 	mov	r4,fp
10105a40:	01072280 	call	10107228 <__multadd>
10105a44:	1021883a 	mov	r16,r2
10105a48:	d8800517 	ldw	r2,20(sp)
10105a4c:	d8c00b17 	ldw	r3,44(sp)
10105a50:	10bfffc4 	addi	r2,r2,-1
10105a54:	d8800515 	stw	r2,20(sp)
10105a58:	183f761e 	bne	r3,zero,10105834 <__alt_data_end+0xfffe5834>
10105a5c:	d9000c17 	ldw	r4,48(sp)
10105a60:	0101730e 	bge	zero,r4,10106030 <_dtoa_r+0x15cc>
10105a64:	d9000615 	stw	r4,24(sp)
10105a68:	003ed006 	br	101055ac <__alt_data_end+0xfffe55ac>
10105a6c:	00800084 	movi	r2,2
10105a70:	3081861e 	bne	r6,r2,1010608c <_dtoa_r+0x1628>
10105a74:	d8000b15 	stw	zero,44(sp)
10105a78:	003f3c06 	br	1010576c <__alt_data_end+0xfffe576c>
10105a7c:	dc000917 	ldw	r16,36(sp)
10105a80:	003e9206 	br	101054cc <__alt_data_end+0xfffe54cc>
10105a84:	d9c00317 	ldw	r7,12(sp)
10105a88:	00800084 	movi	r2,2
10105a8c:	11fec50e 	bge	r2,r7,101055a4 <__alt_data_end+0xfffe55a4>
10105a90:	d9000617 	ldw	r4,24(sp)
10105a94:	20013c1e 	bne	r4,zero,10105f88 <_dtoa_r+0x1524>
10105a98:	a80b883a 	mov	r5,r21
10105a9c:	000f883a 	mov	r7,zero
10105aa0:	01800144 	movi	r6,5
10105aa4:	e009883a 	mov	r4,fp
10105aa8:	01072280 	call	10107228 <__multadd>
10105aac:	100b883a 	mov	r5,r2
10105ab0:	8009883a 	mov	r4,r16
10105ab4:	102b883a 	mov	r21,r2
10105ab8:	0107a200 	call	10107a20 <__mcmp>
10105abc:	dc000915 	stw	r16,36(sp)
10105ac0:	00bf410e 	bge	zero,r2,101057c8 <__alt_data_end+0xfffe57c8>
10105ac4:	d9c00717 	ldw	r7,28(sp)
10105ac8:	00800c44 	movi	r2,49
10105acc:	38800005 	stb	r2,0(r7)
10105ad0:	d8800517 	ldw	r2,20(sp)
10105ad4:	3dc00044 	addi	r23,r7,1
10105ad8:	10800044 	addi	r2,r2,1
10105adc:	d8800515 	stw	r2,20(sp)
10105ae0:	003f3d06 	br	101057d8 <__alt_data_end+0xfffe57d8>
10105ae4:	d9800517 	ldw	r6,20(sp)
10105ae8:	d9c00717 	ldw	r7,28(sp)
10105aec:	00800c44 	movi	r2,49
10105af0:	31800044 	addi	r6,r6,1
10105af4:	d9800515 	stw	r6,20(sp)
10105af8:	38800005 	stb	r2,0(r7)
10105afc:	003edf06 	br	1010567c <__alt_data_end+0xfffe567c>
10105b00:	d8000b15 	stw	zero,44(sp)
10105b04:	003c9f06 	br	10104d84 <__alt_data_end+0xfffe4d84>
10105b08:	903e7e1e 	bne	r18,zero,10105504 <__alt_data_end+0xfffe5504>
10105b0c:	00800434 	movhi	r2,16
10105b10:	10bfffc4 	addi	r2,r2,-1
10105b14:	9884703a 	and	r2,r19,r2
10105b18:	1000ea1e 	bne	r2,zero,10105ec4 <_dtoa_r+0x1460>
10105b1c:	9cdffc2c 	andhi	r19,r19,32752
10105b20:	9800e826 	beq	r19,zero,10105ec4 <_dtoa_r+0x1460>
10105b24:	d9c00817 	ldw	r7,32(sp)
10105b28:	b5800044 	addi	r22,r22,1
10105b2c:	04c00044 	movi	r19,1
10105b30:	39c00044 	addi	r7,r7,1
10105b34:	d9c00815 	stw	r7,32(sp)
10105b38:	d8800d17 	ldw	r2,52(sp)
10105b3c:	103e721e 	bne	r2,zero,10105508 <__alt_data_end+0xfffe5508>
10105b40:	00800044 	movi	r2,1
10105b44:	003e7906 	br	1010552c <__alt_data_end+0xfffe552c>
10105b48:	8009883a 	mov	r4,r16
10105b4c:	010dd540 	call	1010dd54 <__floatsidf>
10105b50:	d9800f17 	ldw	r6,60(sp)
10105b54:	d9c01017 	ldw	r7,64(sp)
10105b58:	1009883a 	mov	r4,r2
10105b5c:	180b883a 	mov	r5,r3
10105b60:	010ccc00 	call	1010ccc0 <__muldf3>
10105b64:	000d883a 	mov	r6,zero
10105b68:	01d00734 	movhi	r7,16412
10105b6c:	1009883a 	mov	r4,r2
10105b70:	180b883a 	mov	r5,r3
10105b74:	010b8d40 	call	1010b8d4 <__adddf3>
10105b78:	047f3034 	movhi	r17,64704
10105b7c:	1021883a 	mov	r16,r2
10105b80:	1c63883a 	add	r17,r3,r17
10105b84:	d9000f17 	ldw	r4,60(sp)
10105b88:	d9401017 	ldw	r5,64(sp)
10105b8c:	000d883a 	mov	r6,zero
10105b90:	01d00534 	movhi	r7,16404
10105b94:	010d3d80 	call	1010d3d8 <__subdf3>
10105b98:	800d883a 	mov	r6,r16
10105b9c:	880f883a 	mov	r7,r17
10105ba0:	1009883a 	mov	r4,r2
10105ba4:	180b883a 	mov	r5,r3
10105ba8:	102b883a 	mov	r21,r2
10105bac:	1829883a 	mov	r20,r3
10105bb0:	010caf00 	call	1010caf0 <__gedf2>
10105bb4:	00806c16 	blt	zero,r2,10105d68 <_dtoa_r+0x1304>
10105bb8:	89e0003c 	xorhi	r7,r17,32768
10105bbc:	800d883a 	mov	r6,r16
10105bc0:	a809883a 	mov	r4,r21
10105bc4:	a00b883a 	mov	r5,r20
10105bc8:	010cbcc0 	call	1010cbcc <__ledf2>
10105bcc:	103d7e0e 	bge	r2,zero,101051c8 <__alt_data_end+0xfffe51c8>
10105bd0:	002b883a 	mov	r21,zero
10105bd4:	0023883a 	mov	r17,zero
10105bd8:	003efb06 	br	101057c8 <__alt_data_end+0xfffe57c8>
10105bdc:	d8800717 	ldw	r2,28(sp)
10105be0:	003bd006 	br	10104b24 <__alt_data_end+0xfffe4b24>
10105be4:	d9000a17 	ldw	r4,40(sp)
10105be8:	d9800d17 	ldw	r6,52(sp)
10105bec:	dd400a15 	stw	r21,40(sp)
10105bf0:	a905c83a 	sub	r2,r21,r4
10105bf4:	308d883a 	add	r6,r6,r2
10105bf8:	d9800d15 	stw	r6,52(sp)
10105bfc:	002b883a 	mov	r21,zero
10105c00:	003e0606 	br	1010541c <__alt_data_end+0xfffe541c>
10105c04:	9023883a 	mov	r17,r18
10105c08:	9829883a 	mov	r20,r19
10105c0c:	04000084 	movi	r16,2
10105c10:	003c9206 	br	10104e5c <__alt_data_end+0xfffe4e5c>
10105c14:	04000044 	movi	r16,1
10105c18:	dc000c15 	stw	r16,48(sp)
10105c1c:	dc000615 	stw	r16,24(sp)
10105c20:	dc002215 	stw	r16,136(sp)
10105c24:	e0001115 	stw	zero,68(fp)
10105c28:	000b883a 	mov	r5,zero
10105c2c:	003c6906 	br	10104dd4 <__alt_data_end+0xfffe4dd4>
10105c30:	3021883a 	mov	r16,r6
10105c34:	003ffb06 	br	10105c24 <__alt_data_end+0xfffe5c24>
10105c38:	1000021e 	bne	r2,zero,10105c44 <_dtoa_r+0x11e0>
10105c3c:	4200004c 	andi	r8,r8,1
10105c40:	403e7d1e 	bne	r8,zero,10105638 <__alt_data_end+0xfffe5638>
10105c44:	01000c04 	movi	r4,48
10105c48:	00000106 	br	10105c50 <_dtoa_r+0x11ec>
10105c4c:	102f883a 	mov	r23,r2
10105c50:	b8bfffc4 	addi	r2,r23,-1
10105c54:	10c00007 	ldb	r3,0(r2)
10105c58:	193ffc26 	beq	r3,r4,10105c4c <__alt_data_end+0xfffe5c4c>
10105c5c:	003e8706 	br	1010567c <__alt_data_end+0xfffe567c>
10105c60:	d8800517 	ldw	r2,20(sp)
10105c64:	00a3c83a 	sub	r17,zero,r2
10105c68:	8800a426 	beq	r17,zero,10105efc <_dtoa_r+0x1498>
10105c6c:	888003cc 	andi	r2,r17,15
10105c70:	100490fa 	slli	r2,r2,3
10105c74:	00c40474 	movhi	r3,4113
10105c78:	18c30f04 	addi	r3,r3,3132
10105c7c:	1885883a 	add	r2,r3,r2
10105c80:	11800017 	ldw	r6,0(r2)
10105c84:	11c00117 	ldw	r7,4(r2)
10105c88:	9009883a 	mov	r4,r18
10105c8c:	980b883a 	mov	r5,r19
10105c90:	8823d13a 	srai	r17,r17,4
10105c94:	010ccc00 	call	1010ccc0 <__muldf3>
10105c98:	d8800f15 	stw	r2,60(sp)
10105c9c:	d8c01015 	stw	r3,64(sp)
10105ca0:	8800e826 	beq	r17,zero,10106044 <_dtoa_r+0x15e0>
10105ca4:	05040474 	movhi	r20,4113
10105ca8:	a5030504 	addi	r20,r20,3092
10105cac:	04000084 	movi	r16,2
10105cb0:	8980004c 	andi	r6,r17,1
10105cb4:	1009883a 	mov	r4,r2
10105cb8:	8823d07a 	srai	r17,r17,1
10105cbc:	180b883a 	mov	r5,r3
10105cc0:	30000426 	beq	r6,zero,10105cd4 <_dtoa_r+0x1270>
10105cc4:	a1800017 	ldw	r6,0(r20)
10105cc8:	a1c00117 	ldw	r7,4(r20)
10105ccc:	84000044 	addi	r16,r16,1
10105cd0:	010ccc00 	call	1010ccc0 <__muldf3>
10105cd4:	a5000204 	addi	r20,r20,8
10105cd8:	883ff51e 	bne	r17,zero,10105cb0 <__alt_data_end+0xfffe5cb0>
10105cdc:	d8800f15 	stw	r2,60(sp)
10105ce0:	d8c01015 	stw	r3,64(sp)
10105ce4:	003c7606 	br	10104ec0 <__alt_data_end+0xfffe4ec0>
10105ce8:	00c00c04 	movi	r3,48
10105cec:	10c00005 	stb	r3,0(r2)
10105cf0:	d8c00517 	ldw	r3,20(sp)
10105cf4:	bd3fffc3 	ldbu	r20,-1(r23)
10105cf8:	18c00044 	addi	r3,r3,1
10105cfc:	d8c00515 	stw	r3,20(sp)
10105d00:	003db906 	br	101053e8 <__alt_data_end+0xfffe53e8>
10105d04:	89400117 	ldw	r5,4(r17)
10105d08:	e009883a 	mov	r4,fp
10105d0c:	01071580 	call	10107158 <_Balloc>
10105d10:	89800417 	ldw	r6,16(r17)
10105d14:	89400304 	addi	r5,r17,12
10105d18:	11000304 	addi	r4,r2,12
10105d1c:	31800084 	addi	r6,r6,2
10105d20:	318d883a 	add	r6,r6,r6
10105d24:	318d883a 	add	r6,r6,r6
10105d28:	1027883a 	mov	r19,r2
10105d2c:	01070100 	call	10107010 <memcpy>
10105d30:	01800044 	movi	r6,1
10105d34:	980b883a 	mov	r5,r19
10105d38:	e009883a 	mov	r4,fp
10105d3c:	01078d80 	call	101078d8 <__lshift>
10105d40:	1029883a 	mov	r20,r2
10105d44:	003ecc06 	br	10105878 <__alt_data_end+0xfffe5878>
10105d48:	00800e44 	movi	r2,57
10105d4c:	90809026 	beq	r18,r2,10105f90 <_dtoa_r+0x152c>
10105d50:	92000044 	addi	r8,r18,1
10105d54:	003f1f06 	br	101059d4 <__alt_data_end+0xfffe59d4>
10105d58:	9011883a 	mov	r8,r18
10105d5c:	8825883a 	mov	r18,r17
10105d60:	a023883a 	mov	r17,r20
10105d64:	003e2906 	br	1010560c <__alt_data_end+0xfffe560c>
10105d68:	002b883a 	mov	r21,zero
10105d6c:	0023883a 	mov	r17,zero
10105d70:	003f5406 	br	10105ac4 <__alt_data_end+0xfffe5ac4>
10105d74:	61bfffc4 	addi	r6,r12,-1
10105d78:	300490fa 	slli	r2,r6,3
10105d7c:	00c40474 	movhi	r3,4113
10105d80:	18c30f04 	addi	r3,r3,3132
10105d84:	1885883a 	add	r2,r3,r2
10105d88:	11000017 	ldw	r4,0(r2)
10105d8c:	11400117 	ldw	r5,4(r2)
10105d90:	d8800717 	ldw	r2,28(sp)
10105d94:	880f883a 	mov	r7,r17
10105d98:	d9801215 	stw	r6,72(sp)
10105d9c:	800d883a 	mov	r6,r16
10105da0:	db001615 	stw	r12,88(sp)
10105da4:	15c00044 	addi	r23,r2,1
10105da8:	010ccc00 	call	1010ccc0 <__muldf3>
10105dac:	d9401017 	ldw	r5,64(sp)
10105db0:	d9000f17 	ldw	r4,60(sp)
10105db4:	d8c01515 	stw	r3,84(sp)
10105db8:	d8801415 	stw	r2,80(sp)
10105dbc:	010dcd40 	call	1010dcd4 <__fixdfsi>
10105dc0:	1009883a 	mov	r4,r2
10105dc4:	1021883a 	mov	r16,r2
10105dc8:	010dd540 	call	1010dd54 <__floatsidf>
10105dcc:	d9000f17 	ldw	r4,60(sp)
10105dd0:	d9401017 	ldw	r5,64(sp)
10105dd4:	100d883a 	mov	r6,r2
10105dd8:	180f883a 	mov	r7,r3
10105ddc:	010d3d80 	call	1010d3d8 <__subdf3>
10105de0:	1829883a 	mov	r20,r3
10105de4:	d8c00717 	ldw	r3,28(sp)
10105de8:	84000c04 	addi	r16,r16,48
10105dec:	1023883a 	mov	r17,r2
10105df0:	1c000005 	stb	r16,0(r3)
10105df4:	db001617 	ldw	r12,88(sp)
10105df8:	00800044 	movi	r2,1
10105dfc:	60802226 	beq	r12,r2,10105e88 <_dtoa_r+0x1424>
10105e00:	d9c00717 	ldw	r7,28(sp)
10105e04:	8805883a 	mov	r2,r17
10105e08:	b82b883a 	mov	r21,r23
10105e0c:	3b19883a 	add	r12,r7,r12
10105e10:	6023883a 	mov	r17,r12
10105e14:	a007883a 	mov	r3,r20
10105e18:	dc800f15 	stw	r18,60(sp)
10105e1c:	000d883a 	mov	r6,zero
10105e20:	01d00934 	movhi	r7,16420
10105e24:	1009883a 	mov	r4,r2
10105e28:	180b883a 	mov	r5,r3
10105e2c:	010ccc00 	call	1010ccc0 <__muldf3>
10105e30:	180b883a 	mov	r5,r3
10105e34:	1009883a 	mov	r4,r2
10105e38:	1829883a 	mov	r20,r3
10105e3c:	1025883a 	mov	r18,r2
10105e40:	010dcd40 	call	1010dcd4 <__fixdfsi>
10105e44:	1009883a 	mov	r4,r2
10105e48:	1021883a 	mov	r16,r2
10105e4c:	010dd540 	call	1010dd54 <__floatsidf>
10105e50:	100d883a 	mov	r6,r2
10105e54:	180f883a 	mov	r7,r3
10105e58:	9009883a 	mov	r4,r18
10105e5c:	a00b883a 	mov	r5,r20
10105e60:	84000c04 	addi	r16,r16,48
10105e64:	010d3d80 	call	1010d3d8 <__subdf3>
10105e68:	ad400044 	addi	r21,r21,1
10105e6c:	ac3fffc5 	stb	r16,-1(r21)
10105e70:	ac7fea1e 	bne	r21,r17,10105e1c <__alt_data_end+0xfffe5e1c>
10105e74:	1023883a 	mov	r17,r2
10105e78:	d8801217 	ldw	r2,72(sp)
10105e7c:	dc800f17 	ldw	r18,60(sp)
10105e80:	1829883a 	mov	r20,r3
10105e84:	b8af883a 	add	r23,r23,r2
10105e88:	d9001417 	ldw	r4,80(sp)
10105e8c:	d9401517 	ldw	r5,84(sp)
10105e90:	000d883a 	mov	r6,zero
10105e94:	01cff834 	movhi	r7,16352
10105e98:	010b8d40 	call	1010b8d4 <__adddf3>
10105e9c:	880d883a 	mov	r6,r17
10105ea0:	a00f883a 	mov	r7,r20
10105ea4:	1009883a 	mov	r4,r2
10105ea8:	180b883a 	mov	r5,r3
10105eac:	010cbcc0 	call	1010cbcc <__ledf2>
10105eb0:	10003e0e 	bge	r2,zero,10105fac <_dtoa_r+0x1548>
10105eb4:	d9001317 	ldw	r4,76(sp)
10105eb8:	bd3fffc3 	ldbu	r20,-1(r23)
10105ebc:	d9000515 	stw	r4,20(sp)
10105ec0:	003d3b06 	br	101053b0 <__alt_data_end+0xfffe53b0>
10105ec4:	0027883a 	mov	r19,zero
10105ec8:	003f1b06 	br	10105b38 <__alt_data_end+0xfffe5b38>
10105ecc:	d8800817 	ldw	r2,32(sp)
10105ed0:	11e9c83a 	sub	r20,r2,r7
10105ed4:	0005883a 	mov	r2,zero
10105ed8:	003d5406 	br	1010542c <__alt_data_end+0xfffe542c>
10105edc:	00800044 	movi	r2,1
10105ee0:	003dc706 	br	10105600 <__alt_data_end+0xfffe5600>
10105ee4:	d8c00217 	ldw	r3,8(sp)
10105ee8:	00800d84 	movi	r2,54
10105eec:	dd400a17 	ldw	r21,40(sp)
10105ef0:	10c5c83a 	sub	r2,r2,r3
10105ef4:	dd000817 	ldw	r20,32(sp)
10105ef8:	003d4c06 	br	1010542c <__alt_data_end+0xfffe542c>
10105efc:	dc800f15 	stw	r18,60(sp)
10105f00:	dcc01015 	stw	r19,64(sp)
10105f04:	04000084 	movi	r16,2
10105f08:	003bed06 	br	10104ec0 <__alt_data_end+0xfffe4ec0>
10105f0c:	d9000617 	ldw	r4,24(sp)
10105f10:	203f0d26 	beq	r4,zero,10105b48 <__alt_data_end+0xfffe5b48>
10105f14:	d9800c17 	ldw	r6,48(sp)
10105f18:	01bcab0e 	bge	zero,r6,101051c8 <__alt_data_end+0xfffe51c8>
10105f1c:	d9401017 	ldw	r5,64(sp)
10105f20:	d9000f17 	ldw	r4,60(sp)
10105f24:	000d883a 	mov	r6,zero
10105f28:	01d00934 	movhi	r7,16420
10105f2c:	010ccc00 	call	1010ccc0 <__muldf3>
10105f30:	81000044 	addi	r4,r16,1
10105f34:	d8800f15 	stw	r2,60(sp)
10105f38:	d8c01015 	stw	r3,64(sp)
10105f3c:	010dd540 	call	1010dd54 <__floatsidf>
10105f40:	d9800f17 	ldw	r6,60(sp)
10105f44:	d9c01017 	ldw	r7,64(sp)
10105f48:	1009883a 	mov	r4,r2
10105f4c:	180b883a 	mov	r5,r3
10105f50:	010ccc00 	call	1010ccc0 <__muldf3>
10105f54:	01d00734 	movhi	r7,16412
10105f58:	000d883a 	mov	r6,zero
10105f5c:	1009883a 	mov	r4,r2
10105f60:	180b883a 	mov	r5,r3
10105f64:	010b8d40 	call	1010b8d4 <__adddf3>
10105f68:	d9c00517 	ldw	r7,20(sp)
10105f6c:	047f3034 	movhi	r17,64704
10105f70:	1021883a 	mov	r16,r2
10105f74:	39ffffc4 	addi	r7,r7,-1
10105f78:	d9c01315 	stw	r7,76(sp)
10105f7c:	1c63883a 	add	r17,r3,r17
10105f80:	db000c17 	ldw	r12,48(sp)
10105f84:	003bea06 	br	10104f30 <__alt_data_end+0xfffe4f30>
10105f88:	dc000915 	stw	r16,36(sp)
10105f8c:	003e0e06 	br	101057c8 <__alt_data_end+0xfffe57c8>
10105f90:	01000e44 	movi	r4,57
10105f94:	8825883a 	mov	r18,r17
10105f98:	9dc00044 	addi	r23,r19,1
10105f9c:	99000005 	stb	r4,0(r19)
10105fa0:	a023883a 	mov	r17,r20
10105fa4:	dc000915 	stw	r16,36(sp)
10105fa8:	003da406 	br	1010563c <__alt_data_end+0xfffe563c>
10105fac:	d9801417 	ldw	r6,80(sp)
10105fb0:	d9c01517 	ldw	r7,84(sp)
10105fb4:	0009883a 	mov	r4,zero
10105fb8:	014ff834 	movhi	r5,16352
10105fbc:	010d3d80 	call	1010d3d8 <__subdf3>
10105fc0:	880d883a 	mov	r6,r17
10105fc4:	a00f883a 	mov	r7,r20
10105fc8:	1009883a 	mov	r4,r2
10105fcc:	180b883a 	mov	r5,r3
10105fd0:	010caf00 	call	1010caf0 <__gedf2>
10105fd4:	00bc7c0e 	bge	zero,r2,101051c8 <__alt_data_end+0xfffe51c8>
10105fd8:	01000c04 	movi	r4,48
10105fdc:	00000106 	br	10105fe4 <_dtoa_r+0x1580>
10105fe0:	102f883a 	mov	r23,r2
10105fe4:	b8bfffc4 	addi	r2,r23,-1
10105fe8:	10c00007 	ldb	r3,0(r2)
10105fec:	193ffc26 	beq	r3,r4,10105fe0 <__alt_data_end+0xfffe5fe0>
10105ff0:	d9801317 	ldw	r6,76(sp)
10105ff4:	d9800515 	stw	r6,20(sp)
10105ff8:	003c4406 	br	1010510c <__alt_data_end+0xfffe510c>
10105ffc:	d9801317 	ldw	r6,76(sp)
10106000:	d9800515 	stw	r6,20(sp)
10106004:	003cea06 	br	101053b0 <__alt_data_end+0xfffe53b0>
10106008:	dd800f17 	ldw	r22,60(sp)
1010600c:	dcc01017 	ldw	r19,64(sp)
10106010:	dc801217 	ldw	r18,72(sp)
10106014:	003c6c06 	br	101051c8 <__alt_data_end+0xfffe51c8>
10106018:	903e031e 	bne	r18,zero,10105828 <__alt_data_end+0xfffe5828>
1010601c:	003ebb06 	br	10105b0c <__alt_data_end+0xfffe5b0c>
10106020:	103e6c1e 	bne	r2,zero,101059d4 <__alt_data_end+0xfffe59d4>
10106024:	4080004c 	andi	r2,r8,1
10106028:	103e6a26 	beq	r2,zero,101059d4 <__alt_data_end+0xfffe59d4>
1010602c:	003e6606 	br	101059c8 <__alt_data_end+0xfffe59c8>
10106030:	d8c00317 	ldw	r3,12(sp)
10106034:	00800084 	movi	r2,2
10106038:	10c02916 	blt	r2,r3,101060e0 <_dtoa_r+0x167c>
1010603c:	d9000c17 	ldw	r4,48(sp)
10106040:	003e8806 	br	10105a64 <__alt_data_end+0xfffe5a64>
10106044:	04000084 	movi	r16,2
10106048:	003b9d06 	br	10104ec0 <__alt_data_end+0xfffe4ec0>
1010604c:	d9001317 	ldw	r4,76(sp)
10106050:	d9000515 	stw	r4,20(sp)
10106054:	003cd606 	br	101053b0 <__alt_data_end+0xfffe53b0>
10106058:	d8801317 	ldw	r2,76(sp)
1010605c:	d8800515 	stw	r2,20(sp)
10106060:	003c2a06 	br	1010510c <__alt_data_end+0xfffe510c>
10106064:	d9800317 	ldw	r6,12(sp)
10106068:	00800084 	movi	r2,2
1010606c:	11801516 	blt	r2,r6,101060c4 <_dtoa_r+0x1660>
10106070:	d9c00c17 	ldw	r7,48(sp)
10106074:	d9c00615 	stw	r7,24(sp)
10106078:	003df706 	br	10105858 <__alt_data_end+0xfffe5858>
1010607c:	193d3926 	beq	r3,r4,10105564 <__alt_data_end+0xfffe5564>
10106080:	00c00f04 	movi	r3,60
10106084:	1885c83a 	sub	r2,r3,r2
10106088:	003ddf06 	br	10105808 <__alt_data_end+0xfffe5808>
1010608c:	e009883a 	mov	r4,fp
10106090:	e0001115 	stw	zero,68(fp)
10106094:	000b883a 	mov	r5,zero
10106098:	01071580 	call	10107158 <_Balloc>
1010609c:	d8800715 	stw	r2,28(sp)
101060a0:	d8c00717 	ldw	r3,28(sp)
101060a4:	00bfffc4 	movi	r2,-1
101060a8:	01000044 	movi	r4,1
101060ac:	d8800c15 	stw	r2,48(sp)
101060b0:	e0c01015 	stw	r3,64(fp)
101060b4:	d9000b15 	stw	r4,44(sp)
101060b8:	d8800615 	stw	r2,24(sp)
101060bc:	d8002215 	stw	zero,136(sp)
101060c0:	003c4106 	br	101051c8 <__alt_data_end+0xfffe51c8>
101060c4:	d8c00c17 	ldw	r3,48(sp)
101060c8:	d8c00615 	stw	r3,24(sp)
101060cc:	003e7006 	br	10105a90 <__alt_data_end+0xfffe5a90>
101060d0:	04400044 	movi	r17,1
101060d4:	003b2006 	br	10104d58 <__alt_data_end+0xfffe4d58>
101060d8:	000b883a 	mov	r5,zero
101060dc:	003b3d06 	br	10104dd4 <__alt_data_end+0xfffe4dd4>
101060e0:	d8800c17 	ldw	r2,48(sp)
101060e4:	d8800615 	stw	r2,24(sp)
101060e8:	003e6906 	br	10105a90 <__alt_data_end+0xfffe5a90>

101060ec <__sflush_r>:
101060ec:	2880030b 	ldhu	r2,12(r5)
101060f0:	defffb04 	addi	sp,sp,-20
101060f4:	dcc00315 	stw	r19,12(sp)
101060f8:	dc400115 	stw	r17,4(sp)
101060fc:	dfc00415 	stw	ra,16(sp)
10106100:	dc800215 	stw	r18,8(sp)
10106104:	dc000015 	stw	r16,0(sp)
10106108:	10c0020c 	andi	r3,r2,8
1010610c:	2823883a 	mov	r17,r5
10106110:	2027883a 	mov	r19,r4
10106114:	1800311e 	bne	r3,zero,101061dc <__sflush_r+0xf0>
10106118:	28c00117 	ldw	r3,4(r5)
1010611c:	10820014 	ori	r2,r2,2048
10106120:	2880030d 	sth	r2,12(r5)
10106124:	00c04b0e 	bge	zero,r3,10106254 <__sflush_r+0x168>
10106128:	8a000a17 	ldw	r8,40(r17)
1010612c:	40002326 	beq	r8,zero,101061bc <__sflush_r+0xd0>
10106130:	9c000017 	ldw	r16,0(r19)
10106134:	10c4000c 	andi	r3,r2,4096
10106138:	98000015 	stw	zero,0(r19)
1010613c:	18004826 	beq	r3,zero,10106260 <__sflush_r+0x174>
10106140:	89801417 	ldw	r6,80(r17)
10106144:	10c0010c 	andi	r3,r2,4
10106148:	18000626 	beq	r3,zero,10106164 <__sflush_r+0x78>
1010614c:	88c00117 	ldw	r3,4(r17)
10106150:	88800c17 	ldw	r2,48(r17)
10106154:	30cdc83a 	sub	r6,r6,r3
10106158:	10000226 	beq	r2,zero,10106164 <__sflush_r+0x78>
1010615c:	88800f17 	ldw	r2,60(r17)
10106160:	308dc83a 	sub	r6,r6,r2
10106164:	89400717 	ldw	r5,28(r17)
10106168:	000f883a 	mov	r7,zero
1010616c:	9809883a 	mov	r4,r19
10106170:	403ee83a 	callr	r8
10106174:	00ffffc4 	movi	r3,-1
10106178:	10c04426 	beq	r2,r3,1010628c <__sflush_r+0x1a0>
1010617c:	88c0030b 	ldhu	r3,12(r17)
10106180:	89000417 	ldw	r4,16(r17)
10106184:	88000115 	stw	zero,4(r17)
10106188:	197dffcc 	andi	r5,r3,63487
1010618c:	8940030d 	sth	r5,12(r17)
10106190:	89000015 	stw	r4,0(r17)
10106194:	18c4000c 	andi	r3,r3,4096
10106198:	18002c1e 	bne	r3,zero,1010624c <__sflush_r+0x160>
1010619c:	89400c17 	ldw	r5,48(r17)
101061a0:	9c000015 	stw	r16,0(r19)
101061a4:	28000526 	beq	r5,zero,101061bc <__sflush_r+0xd0>
101061a8:	88801004 	addi	r2,r17,64
101061ac:	28800226 	beq	r5,r2,101061b8 <__sflush_r+0xcc>
101061b0:	9809883a 	mov	r4,r19
101061b4:	01069040 	call	10106904 <_free_r>
101061b8:	88000c15 	stw	zero,48(r17)
101061bc:	0005883a 	mov	r2,zero
101061c0:	dfc00417 	ldw	ra,16(sp)
101061c4:	dcc00317 	ldw	r19,12(sp)
101061c8:	dc800217 	ldw	r18,8(sp)
101061cc:	dc400117 	ldw	r17,4(sp)
101061d0:	dc000017 	ldw	r16,0(sp)
101061d4:	dec00504 	addi	sp,sp,20
101061d8:	f800283a 	ret
101061dc:	2c800417 	ldw	r18,16(r5)
101061e0:	903ff626 	beq	r18,zero,101061bc <__alt_data_end+0xfffe61bc>
101061e4:	2c000017 	ldw	r16,0(r5)
101061e8:	108000cc 	andi	r2,r2,3
101061ec:	2c800015 	stw	r18,0(r5)
101061f0:	84a1c83a 	sub	r16,r16,r18
101061f4:	1000131e 	bne	r2,zero,10106244 <__sflush_r+0x158>
101061f8:	28800517 	ldw	r2,20(r5)
101061fc:	88800215 	stw	r2,8(r17)
10106200:	04000316 	blt	zero,r16,10106210 <__sflush_r+0x124>
10106204:	003fed06 	br	101061bc <__alt_data_end+0xfffe61bc>
10106208:	90a5883a 	add	r18,r18,r2
1010620c:	043feb0e 	bge	zero,r16,101061bc <__alt_data_end+0xfffe61bc>
10106210:	88800917 	ldw	r2,36(r17)
10106214:	89400717 	ldw	r5,28(r17)
10106218:	800f883a 	mov	r7,r16
1010621c:	900d883a 	mov	r6,r18
10106220:	9809883a 	mov	r4,r19
10106224:	103ee83a 	callr	r2
10106228:	80a1c83a 	sub	r16,r16,r2
1010622c:	00bff616 	blt	zero,r2,10106208 <__alt_data_end+0xfffe6208>
10106230:	88c0030b 	ldhu	r3,12(r17)
10106234:	00bfffc4 	movi	r2,-1
10106238:	18c01014 	ori	r3,r3,64
1010623c:	88c0030d 	sth	r3,12(r17)
10106240:	003fdf06 	br	101061c0 <__alt_data_end+0xfffe61c0>
10106244:	0005883a 	mov	r2,zero
10106248:	003fec06 	br	101061fc <__alt_data_end+0xfffe61fc>
1010624c:	88801415 	stw	r2,80(r17)
10106250:	003fd206 	br	1010619c <__alt_data_end+0xfffe619c>
10106254:	28c00f17 	ldw	r3,60(r5)
10106258:	00ffb316 	blt	zero,r3,10106128 <__alt_data_end+0xfffe6128>
1010625c:	003fd706 	br	101061bc <__alt_data_end+0xfffe61bc>
10106260:	89400717 	ldw	r5,28(r17)
10106264:	000d883a 	mov	r6,zero
10106268:	01c00044 	movi	r7,1
1010626c:	9809883a 	mov	r4,r19
10106270:	403ee83a 	callr	r8
10106274:	100d883a 	mov	r6,r2
10106278:	00bfffc4 	movi	r2,-1
1010627c:	30801426 	beq	r6,r2,101062d0 <__sflush_r+0x1e4>
10106280:	8880030b 	ldhu	r2,12(r17)
10106284:	8a000a17 	ldw	r8,40(r17)
10106288:	003fae06 	br	10106144 <__alt_data_end+0xfffe6144>
1010628c:	98c00017 	ldw	r3,0(r19)
10106290:	183fba26 	beq	r3,zero,1010617c <__alt_data_end+0xfffe617c>
10106294:	01000744 	movi	r4,29
10106298:	19000626 	beq	r3,r4,101062b4 <__sflush_r+0x1c8>
1010629c:	01000584 	movi	r4,22
101062a0:	19000426 	beq	r3,r4,101062b4 <__sflush_r+0x1c8>
101062a4:	88c0030b 	ldhu	r3,12(r17)
101062a8:	18c01014 	ori	r3,r3,64
101062ac:	88c0030d 	sth	r3,12(r17)
101062b0:	003fc306 	br	101061c0 <__alt_data_end+0xfffe61c0>
101062b4:	8880030b 	ldhu	r2,12(r17)
101062b8:	88c00417 	ldw	r3,16(r17)
101062bc:	88000115 	stw	zero,4(r17)
101062c0:	10bdffcc 	andi	r2,r2,63487
101062c4:	8880030d 	sth	r2,12(r17)
101062c8:	88c00015 	stw	r3,0(r17)
101062cc:	003fb306 	br	1010619c <__alt_data_end+0xfffe619c>
101062d0:	98800017 	ldw	r2,0(r19)
101062d4:	103fea26 	beq	r2,zero,10106280 <__alt_data_end+0xfffe6280>
101062d8:	00c00744 	movi	r3,29
101062dc:	10c00226 	beq	r2,r3,101062e8 <__sflush_r+0x1fc>
101062e0:	00c00584 	movi	r3,22
101062e4:	10c0031e 	bne	r2,r3,101062f4 <__sflush_r+0x208>
101062e8:	9c000015 	stw	r16,0(r19)
101062ec:	0005883a 	mov	r2,zero
101062f0:	003fb306 	br	101061c0 <__alt_data_end+0xfffe61c0>
101062f4:	88c0030b 	ldhu	r3,12(r17)
101062f8:	3005883a 	mov	r2,r6
101062fc:	18c01014 	ori	r3,r3,64
10106300:	88c0030d 	sth	r3,12(r17)
10106304:	003fae06 	br	101061c0 <__alt_data_end+0xfffe61c0>

10106308 <_fflush_r>:
10106308:	defffd04 	addi	sp,sp,-12
1010630c:	dc000115 	stw	r16,4(sp)
10106310:	dfc00215 	stw	ra,8(sp)
10106314:	2021883a 	mov	r16,r4
10106318:	20000226 	beq	r4,zero,10106324 <_fflush_r+0x1c>
1010631c:	20800e17 	ldw	r2,56(r4)
10106320:	10000c26 	beq	r2,zero,10106354 <_fflush_r+0x4c>
10106324:	2880030f 	ldh	r2,12(r5)
10106328:	1000051e 	bne	r2,zero,10106340 <_fflush_r+0x38>
1010632c:	0005883a 	mov	r2,zero
10106330:	dfc00217 	ldw	ra,8(sp)
10106334:	dc000117 	ldw	r16,4(sp)
10106338:	dec00304 	addi	sp,sp,12
1010633c:	f800283a 	ret
10106340:	8009883a 	mov	r4,r16
10106344:	dfc00217 	ldw	ra,8(sp)
10106348:	dc000117 	ldw	r16,4(sp)
1010634c:	dec00304 	addi	sp,sp,12
10106350:	01060ec1 	jmpi	101060ec <__sflush_r>
10106354:	d9400015 	stw	r5,0(sp)
10106358:	01066e40 	call	101066e4 <__sinit>
1010635c:	d9400017 	ldw	r5,0(sp)
10106360:	003ff006 	br	10106324 <__alt_data_end+0xfffe6324>

10106364 <fflush>:
10106364:	20000526 	beq	r4,zero,1010637c <fflush+0x18>
10106368:	00840474 	movhi	r2,4113
1010636c:	108a4f04 	addi	r2,r2,10556
10106370:	200b883a 	mov	r5,r4
10106374:	11000017 	ldw	r4,0(r2)
10106378:	01063081 	jmpi	10106308 <_fflush_r>
1010637c:	00840474 	movhi	r2,4113
10106380:	108a4e04 	addi	r2,r2,10552
10106384:	11000017 	ldw	r4,0(r2)
10106388:	01440434 	movhi	r5,4112
1010638c:	2958c204 	addi	r5,r5,25352
10106390:	0106cd81 	jmpi	10106cd8 <_fwalk_reent>

10106394 <__fp_unlock>:
10106394:	0005883a 	mov	r2,zero
10106398:	f800283a 	ret

1010639c <_cleanup_r>:
1010639c:	01440474 	movhi	r5,4113
101063a0:	2966aa04 	addi	r5,r5,-25944
101063a4:	0106cd81 	jmpi	10106cd8 <_fwalk_reent>

101063a8 <__sinit.part.1>:
101063a8:	defff704 	addi	sp,sp,-36
101063ac:	00c40434 	movhi	r3,4112
101063b0:	dfc00815 	stw	ra,32(sp)
101063b4:	ddc00715 	stw	r23,28(sp)
101063b8:	dd800615 	stw	r22,24(sp)
101063bc:	dd400515 	stw	r21,20(sp)
101063c0:	dd000415 	stw	r20,16(sp)
101063c4:	dcc00315 	stw	r19,12(sp)
101063c8:	dc800215 	stw	r18,8(sp)
101063cc:	dc400115 	stw	r17,4(sp)
101063d0:	dc000015 	stw	r16,0(sp)
101063d4:	18d8e704 	addi	r3,r3,25500
101063d8:	24000117 	ldw	r16,4(r4)
101063dc:	20c00f15 	stw	r3,60(r4)
101063e0:	2080bb04 	addi	r2,r4,748
101063e4:	00c000c4 	movi	r3,3
101063e8:	20c0b915 	stw	r3,740(r4)
101063ec:	2080ba15 	stw	r2,744(r4)
101063f0:	2000b815 	stw	zero,736(r4)
101063f4:	05c00204 	movi	r23,8
101063f8:	00800104 	movi	r2,4
101063fc:	2025883a 	mov	r18,r4
10106400:	b80d883a 	mov	r6,r23
10106404:	81001704 	addi	r4,r16,92
10106408:	000b883a 	mov	r5,zero
1010640c:	80000015 	stw	zero,0(r16)
10106410:	80000115 	stw	zero,4(r16)
10106414:	80000215 	stw	zero,8(r16)
10106418:	8080030d 	sth	r2,12(r16)
1010641c:	80001915 	stw	zero,100(r16)
10106420:	8000038d 	sth	zero,14(r16)
10106424:	80000415 	stw	zero,16(r16)
10106428:	80000515 	stw	zero,20(r16)
1010642c:	80000615 	stw	zero,24(r16)
10106430:	0101e180 	call	10101e18 <memset>
10106434:	05840434 	movhi	r22,4112
10106438:	94400217 	ldw	r17,8(r18)
1010643c:	05440434 	movhi	r21,4112
10106440:	05040434 	movhi	r20,4112
10106444:	04c40434 	movhi	r19,4112
10106448:	b5889404 	addi	r22,r22,8784
1010644c:	ad48ab04 	addi	r21,r21,8876
10106450:	a508ca04 	addi	r20,r20,9000
10106454:	9cc8e104 	addi	r19,r19,9092
10106458:	85800815 	stw	r22,32(r16)
1010645c:	85400915 	stw	r21,36(r16)
10106460:	85000a15 	stw	r20,40(r16)
10106464:	84c00b15 	stw	r19,44(r16)
10106468:	84000715 	stw	r16,28(r16)
1010646c:	00800284 	movi	r2,10
10106470:	8880030d 	sth	r2,12(r17)
10106474:	00800044 	movi	r2,1
10106478:	b80d883a 	mov	r6,r23
1010647c:	89001704 	addi	r4,r17,92
10106480:	000b883a 	mov	r5,zero
10106484:	88000015 	stw	zero,0(r17)
10106488:	88000115 	stw	zero,4(r17)
1010648c:	88000215 	stw	zero,8(r17)
10106490:	88001915 	stw	zero,100(r17)
10106494:	8880038d 	sth	r2,14(r17)
10106498:	88000415 	stw	zero,16(r17)
1010649c:	88000515 	stw	zero,20(r17)
101064a0:	88000615 	stw	zero,24(r17)
101064a4:	0101e180 	call	10101e18 <memset>
101064a8:	94000317 	ldw	r16,12(r18)
101064ac:	00800484 	movi	r2,18
101064b0:	8c400715 	stw	r17,28(r17)
101064b4:	8d800815 	stw	r22,32(r17)
101064b8:	8d400915 	stw	r21,36(r17)
101064bc:	8d000a15 	stw	r20,40(r17)
101064c0:	8cc00b15 	stw	r19,44(r17)
101064c4:	8080030d 	sth	r2,12(r16)
101064c8:	00800084 	movi	r2,2
101064cc:	80000015 	stw	zero,0(r16)
101064d0:	80000115 	stw	zero,4(r16)
101064d4:	80000215 	stw	zero,8(r16)
101064d8:	80001915 	stw	zero,100(r16)
101064dc:	8080038d 	sth	r2,14(r16)
101064e0:	80000415 	stw	zero,16(r16)
101064e4:	80000515 	stw	zero,20(r16)
101064e8:	80000615 	stw	zero,24(r16)
101064ec:	b80d883a 	mov	r6,r23
101064f0:	000b883a 	mov	r5,zero
101064f4:	81001704 	addi	r4,r16,92
101064f8:	0101e180 	call	10101e18 <memset>
101064fc:	00800044 	movi	r2,1
10106500:	84000715 	stw	r16,28(r16)
10106504:	85800815 	stw	r22,32(r16)
10106508:	85400915 	stw	r21,36(r16)
1010650c:	85000a15 	stw	r20,40(r16)
10106510:	84c00b15 	stw	r19,44(r16)
10106514:	90800e15 	stw	r2,56(r18)
10106518:	dfc00817 	ldw	ra,32(sp)
1010651c:	ddc00717 	ldw	r23,28(sp)
10106520:	dd800617 	ldw	r22,24(sp)
10106524:	dd400517 	ldw	r21,20(sp)
10106528:	dd000417 	ldw	r20,16(sp)
1010652c:	dcc00317 	ldw	r19,12(sp)
10106530:	dc800217 	ldw	r18,8(sp)
10106534:	dc400117 	ldw	r17,4(sp)
10106538:	dc000017 	ldw	r16,0(sp)
1010653c:	dec00904 	addi	sp,sp,36
10106540:	f800283a 	ret

10106544 <__fp_lock>:
10106544:	0005883a 	mov	r2,zero
10106548:	f800283a 	ret

1010654c <__sfmoreglue>:
1010654c:	defffc04 	addi	sp,sp,-16
10106550:	dc400115 	stw	r17,4(sp)
10106554:	2c7fffc4 	addi	r17,r5,-1
10106558:	8c401a24 	muli	r17,r17,104
1010655c:	dc800215 	stw	r18,8(sp)
10106560:	2825883a 	mov	r18,r5
10106564:	89401d04 	addi	r5,r17,116
10106568:	dc000015 	stw	r16,0(sp)
1010656c:	dfc00315 	stw	ra,12(sp)
10106570:	010160c0 	call	1010160c <_malloc_r>
10106574:	1021883a 	mov	r16,r2
10106578:	10000726 	beq	r2,zero,10106598 <__sfmoreglue+0x4c>
1010657c:	11000304 	addi	r4,r2,12
10106580:	10000015 	stw	zero,0(r2)
10106584:	14800115 	stw	r18,4(r2)
10106588:	11000215 	stw	r4,8(r2)
1010658c:	89801a04 	addi	r6,r17,104
10106590:	000b883a 	mov	r5,zero
10106594:	0101e180 	call	10101e18 <memset>
10106598:	8005883a 	mov	r2,r16
1010659c:	dfc00317 	ldw	ra,12(sp)
101065a0:	dc800217 	ldw	r18,8(sp)
101065a4:	dc400117 	ldw	r17,4(sp)
101065a8:	dc000017 	ldw	r16,0(sp)
101065ac:	dec00404 	addi	sp,sp,16
101065b0:	f800283a 	ret

101065b4 <__sfp>:
101065b4:	defffb04 	addi	sp,sp,-20
101065b8:	dc000015 	stw	r16,0(sp)
101065bc:	04040474 	movhi	r16,4113
101065c0:	840a4e04 	addi	r16,r16,10552
101065c4:	dcc00315 	stw	r19,12(sp)
101065c8:	2027883a 	mov	r19,r4
101065cc:	81000017 	ldw	r4,0(r16)
101065d0:	dfc00415 	stw	ra,16(sp)
101065d4:	dc800215 	stw	r18,8(sp)
101065d8:	20800e17 	ldw	r2,56(r4)
101065dc:	dc400115 	stw	r17,4(sp)
101065e0:	1000021e 	bne	r2,zero,101065ec <__sfp+0x38>
101065e4:	01063a80 	call	101063a8 <__sinit.part.1>
101065e8:	81000017 	ldw	r4,0(r16)
101065ec:	2480b804 	addi	r18,r4,736
101065f0:	047fffc4 	movi	r17,-1
101065f4:	91000117 	ldw	r4,4(r18)
101065f8:	94000217 	ldw	r16,8(r18)
101065fc:	213fffc4 	addi	r4,r4,-1
10106600:	20000a16 	blt	r4,zero,1010662c <__sfp+0x78>
10106604:	8080030f 	ldh	r2,12(r16)
10106608:	10000c26 	beq	r2,zero,1010663c <__sfp+0x88>
1010660c:	80c01d04 	addi	r3,r16,116
10106610:	00000206 	br	1010661c <__sfp+0x68>
10106614:	18bfe60f 	ldh	r2,-104(r3)
10106618:	10000826 	beq	r2,zero,1010663c <__sfp+0x88>
1010661c:	213fffc4 	addi	r4,r4,-1
10106620:	1c3ffd04 	addi	r16,r3,-12
10106624:	18c01a04 	addi	r3,r3,104
10106628:	247ffa1e 	bne	r4,r17,10106614 <__alt_data_end+0xfffe6614>
1010662c:	90800017 	ldw	r2,0(r18)
10106630:	10001d26 	beq	r2,zero,101066a8 <__sfp+0xf4>
10106634:	1025883a 	mov	r18,r2
10106638:	003fee06 	br	101065f4 <__alt_data_end+0xfffe65f4>
1010663c:	00bfffc4 	movi	r2,-1
10106640:	8080038d 	sth	r2,14(r16)
10106644:	00800044 	movi	r2,1
10106648:	8080030d 	sth	r2,12(r16)
1010664c:	80001915 	stw	zero,100(r16)
10106650:	80000015 	stw	zero,0(r16)
10106654:	80000215 	stw	zero,8(r16)
10106658:	80000115 	stw	zero,4(r16)
1010665c:	80000415 	stw	zero,16(r16)
10106660:	80000515 	stw	zero,20(r16)
10106664:	80000615 	stw	zero,24(r16)
10106668:	01800204 	movi	r6,8
1010666c:	000b883a 	mov	r5,zero
10106670:	81001704 	addi	r4,r16,92
10106674:	0101e180 	call	10101e18 <memset>
10106678:	8005883a 	mov	r2,r16
1010667c:	80000c15 	stw	zero,48(r16)
10106680:	80000d15 	stw	zero,52(r16)
10106684:	80001115 	stw	zero,68(r16)
10106688:	80001215 	stw	zero,72(r16)
1010668c:	dfc00417 	ldw	ra,16(sp)
10106690:	dcc00317 	ldw	r19,12(sp)
10106694:	dc800217 	ldw	r18,8(sp)
10106698:	dc400117 	ldw	r17,4(sp)
1010669c:	dc000017 	ldw	r16,0(sp)
101066a0:	dec00504 	addi	sp,sp,20
101066a4:	f800283a 	ret
101066a8:	01400104 	movi	r5,4
101066ac:	9809883a 	mov	r4,r19
101066b0:	010654c0 	call	1010654c <__sfmoreglue>
101066b4:	90800015 	stw	r2,0(r18)
101066b8:	103fde1e 	bne	r2,zero,10106634 <__alt_data_end+0xfffe6634>
101066bc:	00800304 	movi	r2,12
101066c0:	98800015 	stw	r2,0(r19)
101066c4:	0005883a 	mov	r2,zero
101066c8:	003ff006 	br	1010668c <__alt_data_end+0xfffe668c>

101066cc <_cleanup>:
101066cc:	00840474 	movhi	r2,4113
101066d0:	108a4e04 	addi	r2,r2,10552
101066d4:	11000017 	ldw	r4,0(r2)
101066d8:	01440474 	movhi	r5,4113
101066dc:	2966aa04 	addi	r5,r5,-25944
101066e0:	0106cd81 	jmpi	10106cd8 <_fwalk_reent>

101066e4 <__sinit>:
101066e4:	20800e17 	ldw	r2,56(r4)
101066e8:	10000126 	beq	r2,zero,101066f0 <__sinit+0xc>
101066ec:	f800283a 	ret
101066f0:	01063a81 	jmpi	101063a8 <__sinit.part.1>

101066f4 <__sfp_lock_acquire>:
101066f4:	f800283a 	ret

101066f8 <__sfp_lock_release>:
101066f8:	f800283a 	ret

101066fc <__sinit_lock_acquire>:
101066fc:	f800283a 	ret

10106700 <__sinit_lock_release>:
10106700:	f800283a 	ret

10106704 <__fp_lock_all>:
10106704:	00840474 	movhi	r2,4113
10106708:	108a4f04 	addi	r2,r2,10556
1010670c:	11000017 	ldw	r4,0(r2)
10106710:	01440434 	movhi	r5,4112
10106714:	29595104 	addi	r5,r5,25924
10106718:	0106c141 	jmpi	10106c14 <_fwalk>

1010671c <__fp_unlock_all>:
1010671c:	00840474 	movhi	r2,4113
10106720:	108a4f04 	addi	r2,r2,10556
10106724:	11000017 	ldw	r4,0(r2)
10106728:	01440434 	movhi	r5,4112
1010672c:	2958e504 	addi	r5,r5,25492
10106730:	0106c141 	jmpi	10106c14 <_fwalk>

10106734 <__sflags>:
10106734:	28800007 	ldb	r2,0(r5)
10106738:	00c01c84 	movi	r3,114
1010673c:	10c02426 	beq	r2,r3,101067d0 <__sflags+0x9c>
10106740:	00c01dc4 	movi	r3,119
10106744:	10c01e26 	beq	r2,r3,101067c0 <__sflags+0x8c>
10106748:	00c01844 	movi	r3,97
1010674c:	10c00426 	beq	r2,r3,10106760 <__sflags+0x2c>
10106750:	00800584 	movi	r2,22
10106754:	20800015 	stw	r2,0(r4)
10106758:	0005883a 	mov	r2,zero
1010675c:	f800283a 	ret
10106760:	02c08204 	movi	r11,520
10106764:	01000044 	movi	r4,1
10106768:	00804204 	movi	r2,264
1010676c:	01c00ac4 	movi	r7,43
10106770:	02bff8c4 	movi	r10,-29
10106774:	027fff04 	movi	r9,-4
10106778:	02001e04 	movi	r8,120
1010677c:	29400044 	addi	r5,r5,1
10106780:	28c00007 	ldb	r3,0(r5)
10106784:	18000626 	beq	r3,zero,101067a0 <__sflags+0x6c>
10106788:	19c00826 	beq	r3,r7,101067ac <__sflags+0x78>
1010678c:	1a3ffb1e 	bne	r3,r8,1010677c <__alt_data_end+0xfffe677c>
10106790:	29400044 	addi	r5,r5,1
10106794:	28c00007 	ldb	r3,0(r5)
10106798:	21020014 	ori	r4,r4,2048
1010679c:	183ffa1e 	bne	r3,zero,10106788 <__alt_data_end+0xfffe6788>
101067a0:	22c8b03a 	or	r4,r4,r11
101067a4:	31000015 	stw	r4,0(r6)
101067a8:	f800283a 	ret
101067ac:	1284703a 	and	r2,r2,r10
101067b0:	2248703a 	and	r4,r4,r9
101067b4:	10800414 	ori	r2,r2,16
101067b8:	21000094 	ori	r4,r4,2
101067bc:	003fef06 	br	1010677c <__alt_data_end+0xfffe677c>
101067c0:	02c18004 	movi	r11,1536
101067c4:	01000044 	movi	r4,1
101067c8:	00800204 	movi	r2,8
101067cc:	003fe706 	br	1010676c <__alt_data_end+0xfffe676c>
101067d0:	0017883a 	mov	r11,zero
101067d4:	0009883a 	mov	r4,zero
101067d8:	00800104 	movi	r2,4
101067dc:	003fe306 	br	1010676c <__alt_data_end+0xfffe676c>

101067e0 <_malloc_trim_r>:
101067e0:	defffb04 	addi	sp,sp,-20
101067e4:	dcc00315 	stw	r19,12(sp)
101067e8:	04c40474 	movhi	r19,4113
101067ec:	dc800215 	stw	r18,8(sp)
101067f0:	dc400115 	stw	r17,4(sp)
101067f4:	dc000015 	stw	r16,0(sp)
101067f8:	dfc00415 	stw	ra,16(sp)
101067fc:	2821883a 	mov	r16,r5
10106800:	9cc4a204 	addi	r19,r19,4744
10106804:	2025883a 	mov	r18,r4
10106808:	010e4b80 	call	1010e4b8 <__malloc_lock>
1010680c:	98800217 	ldw	r2,8(r19)
10106810:	14400117 	ldw	r17,4(r2)
10106814:	00bfff04 	movi	r2,-4
10106818:	88a2703a 	and	r17,r17,r2
1010681c:	8c21c83a 	sub	r16,r17,r16
10106820:	8403fbc4 	addi	r16,r16,4079
10106824:	8020d33a 	srli	r16,r16,12
10106828:	0083ffc4 	movi	r2,4095
1010682c:	843fffc4 	addi	r16,r16,-1
10106830:	8020933a 	slli	r16,r16,12
10106834:	1400060e 	bge	r2,r16,10106850 <_malloc_trim_r+0x70>
10106838:	000b883a 	mov	r5,zero
1010683c:	9009883a 	mov	r4,r18
10106840:	01021fc0 	call	101021fc <_sbrk_r>
10106844:	98c00217 	ldw	r3,8(r19)
10106848:	1c47883a 	add	r3,r3,r17
1010684c:	10c00a26 	beq	r2,r3,10106878 <_malloc_trim_r+0x98>
10106850:	9009883a 	mov	r4,r18
10106854:	010e4dc0 	call	1010e4dc <__malloc_unlock>
10106858:	0005883a 	mov	r2,zero
1010685c:	dfc00417 	ldw	ra,16(sp)
10106860:	dcc00317 	ldw	r19,12(sp)
10106864:	dc800217 	ldw	r18,8(sp)
10106868:	dc400117 	ldw	r17,4(sp)
1010686c:	dc000017 	ldw	r16,0(sp)
10106870:	dec00504 	addi	sp,sp,20
10106874:	f800283a 	ret
10106878:	040bc83a 	sub	r5,zero,r16
1010687c:	9009883a 	mov	r4,r18
10106880:	01021fc0 	call	101021fc <_sbrk_r>
10106884:	00ffffc4 	movi	r3,-1
10106888:	10c00d26 	beq	r2,r3,101068c0 <_malloc_trim_r+0xe0>
1010688c:	00c40474 	movhi	r3,4113
10106890:	18d15504 	addi	r3,r3,17748
10106894:	18800017 	ldw	r2,0(r3)
10106898:	99000217 	ldw	r4,8(r19)
1010689c:	8c23c83a 	sub	r17,r17,r16
101068a0:	8c400054 	ori	r17,r17,1
101068a4:	1421c83a 	sub	r16,r2,r16
101068a8:	24400115 	stw	r17,4(r4)
101068ac:	9009883a 	mov	r4,r18
101068b0:	1c000015 	stw	r16,0(r3)
101068b4:	010e4dc0 	call	1010e4dc <__malloc_unlock>
101068b8:	00800044 	movi	r2,1
101068bc:	003fe706 	br	1010685c <__alt_data_end+0xfffe685c>
101068c0:	000b883a 	mov	r5,zero
101068c4:	9009883a 	mov	r4,r18
101068c8:	01021fc0 	call	101021fc <_sbrk_r>
101068cc:	99000217 	ldw	r4,8(r19)
101068d0:	014003c4 	movi	r5,15
101068d4:	1107c83a 	sub	r3,r2,r4
101068d8:	28ffdd0e 	bge	r5,r3,10106850 <__alt_data_end+0xfffe6850>
101068dc:	01440474 	movhi	r5,4113
101068e0:	294a5004 	addi	r5,r5,10560
101068e4:	29400017 	ldw	r5,0(r5)
101068e8:	18c00054 	ori	r3,r3,1
101068ec:	20c00115 	stw	r3,4(r4)
101068f0:	00c40474 	movhi	r3,4113
101068f4:	1145c83a 	sub	r2,r2,r5
101068f8:	18d15504 	addi	r3,r3,17748
101068fc:	18800015 	stw	r2,0(r3)
10106900:	003fd306 	br	10106850 <__alt_data_end+0xfffe6850>

10106904 <_free_r>:
10106904:	28004126 	beq	r5,zero,10106a0c <_free_r+0x108>
10106908:	defffd04 	addi	sp,sp,-12
1010690c:	dc400115 	stw	r17,4(sp)
10106910:	dc000015 	stw	r16,0(sp)
10106914:	2023883a 	mov	r17,r4
10106918:	2821883a 	mov	r16,r5
1010691c:	dfc00215 	stw	ra,8(sp)
10106920:	010e4b80 	call	1010e4b8 <__malloc_lock>
10106924:	81ffff17 	ldw	r7,-4(r16)
10106928:	00bfff84 	movi	r2,-2
1010692c:	01040474 	movhi	r4,4113
10106930:	81bffe04 	addi	r6,r16,-8
10106934:	3884703a 	and	r2,r7,r2
10106938:	2104a204 	addi	r4,r4,4744
1010693c:	308b883a 	add	r5,r6,r2
10106940:	2a400117 	ldw	r9,4(r5)
10106944:	22000217 	ldw	r8,8(r4)
10106948:	00ffff04 	movi	r3,-4
1010694c:	48c6703a 	and	r3,r9,r3
10106950:	2a005726 	beq	r5,r8,10106ab0 <_free_r+0x1ac>
10106954:	28c00115 	stw	r3,4(r5)
10106958:	39c0004c 	andi	r7,r7,1
1010695c:	3800091e 	bne	r7,zero,10106984 <_free_r+0x80>
10106960:	823ffe17 	ldw	r8,-8(r16)
10106964:	22400204 	addi	r9,r4,8
10106968:	320dc83a 	sub	r6,r6,r8
1010696c:	31c00217 	ldw	r7,8(r6)
10106970:	1205883a 	add	r2,r2,r8
10106974:	3a406526 	beq	r7,r9,10106b0c <_free_r+0x208>
10106978:	32000317 	ldw	r8,12(r6)
1010697c:	3a000315 	stw	r8,12(r7)
10106980:	41c00215 	stw	r7,8(r8)
10106984:	28cf883a 	add	r7,r5,r3
10106988:	39c00117 	ldw	r7,4(r7)
1010698c:	39c0004c 	andi	r7,r7,1
10106990:	38003a26 	beq	r7,zero,10106a7c <_free_r+0x178>
10106994:	10c00054 	ori	r3,r2,1
10106998:	30c00115 	stw	r3,4(r6)
1010699c:	3087883a 	add	r3,r6,r2
101069a0:	18800015 	stw	r2,0(r3)
101069a4:	00c07fc4 	movi	r3,511
101069a8:	18801936 	bltu	r3,r2,10106a10 <_free_r+0x10c>
101069ac:	1004d0fa 	srli	r2,r2,3
101069b0:	01c00044 	movi	r7,1
101069b4:	21400117 	ldw	r5,4(r4)
101069b8:	10c00044 	addi	r3,r2,1
101069bc:	18c7883a 	add	r3,r3,r3
101069c0:	1005d0ba 	srai	r2,r2,2
101069c4:	18c7883a 	add	r3,r3,r3
101069c8:	18c7883a 	add	r3,r3,r3
101069cc:	1907883a 	add	r3,r3,r4
101069d0:	3884983a 	sll	r2,r7,r2
101069d4:	19c00017 	ldw	r7,0(r3)
101069d8:	1a3ffe04 	addi	r8,r3,-8
101069dc:	1144b03a 	or	r2,r2,r5
101069e0:	32000315 	stw	r8,12(r6)
101069e4:	31c00215 	stw	r7,8(r6)
101069e8:	20800115 	stw	r2,4(r4)
101069ec:	19800015 	stw	r6,0(r3)
101069f0:	39800315 	stw	r6,12(r7)
101069f4:	8809883a 	mov	r4,r17
101069f8:	dfc00217 	ldw	ra,8(sp)
101069fc:	dc400117 	ldw	r17,4(sp)
10106a00:	dc000017 	ldw	r16,0(sp)
10106a04:	dec00304 	addi	sp,sp,12
10106a08:	010e4dc1 	jmpi	1010e4dc <__malloc_unlock>
10106a0c:	f800283a 	ret
10106a10:	100ad27a 	srli	r5,r2,9
10106a14:	00c00104 	movi	r3,4
10106a18:	19404a36 	bltu	r3,r5,10106b44 <_free_r+0x240>
10106a1c:	100ad1ba 	srli	r5,r2,6
10106a20:	28c00e44 	addi	r3,r5,57
10106a24:	18c7883a 	add	r3,r3,r3
10106a28:	29400e04 	addi	r5,r5,56
10106a2c:	18c7883a 	add	r3,r3,r3
10106a30:	18c7883a 	add	r3,r3,r3
10106a34:	1909883a 	add	r4,r3,r4
10106a38:	20c00017 	ldw	r3,0(r4)
10106a3c:	01c40474 	movhi	r7,4113
10106a40:	213ffe04 	addi	r4,r4,-8
10106a44:	39c4a204 	addi	r7,r7,4744
10106a48:	20c04426 	beq	r4,r3,10106b5c <_free_r+0x258>
10106a4c:	01ffff04 	movi	r7,-4
10106a50:	19400117 	ldw	r5,4(r3)
10106a54:	29ca703a 	and	r5,r5,r7
10106a58:	1140022e 	bgeu	r2,r5,10106a64 <_free_r+0x160>
10106a5c:	18c00217 	ldw	r3,8(r3)
10106a60:	20fffb1e 	bne	r4,r3,10106a50 <__alt_data_end+0xfffe6a50>
10106a64:	19000317 	ldw	r4,12(r3)
10106a68:	31000315 	stw	r4,12(r6)
10106a6c:	30c00215 	stw	r3,8(r6)
10106a70:	21800215 	stw	r6,8(r4)
10106a74:	19800315 	stw	r6,12(r3)
10106a78:	003fde06 	br	101069f4 <__alt_data_end+0xfffe69f4>
10106a7c:	29c00217 	ldw	r7,8(r5)
10106a80:	10c5883a 	add	r2,r2,r3
10106a84:	00c40474 	movhi	r3,4113
10106a88:	18c4a404 	addi	r3,r3,4752
10106a8c:	38c03b26 	beq	r7,r3,10106b7c <_free_r+0x278>
10106a90:	2a000317 	ldw	r8,12(r5)
10106a94:	11400054 	ori	r5,r2,1
10106a98:	3087883a 	add	r3,r6,r2
10106a9c:	3a000315 	stw	r8,12(r7)
10106aa0:	41c00215 	stw	r7,8(r8)
10106aa4:	31400115 	stw	r5,4(r6)
10106aa8:	18800015 	stw	r2,0(r3)
10106aac:	003fbd06 	br	101069a4 <__alt_data_end+0xfffe69a4>
10106ab0:	39c0004c 	andi	r7,r7,1
10106ab4:	10c5883a 	add	r2,r2,r3
10106ab8:	3800071e 	bne	r7,zero,10106ad8 <_free_r+0x1d4>
10106abc:	81fffe17 	ldw	r7,-8(r16)
10106ac0:	31cdc83a 	sub	r6,r6,r7
10106ac4:	30c00317 	ldw	r3,12(r6)
10106ac8:	31400217 	ldw	r5,8(r6)
10106acc:	11c5883a 	add	r2,r2,r7
10106ad0:	28c00315 	stw	r3,12(r5)
10106ad4:	19400215 	stw	r5,8(r3)
10106ad8:	10c00054 	ori	r3,r2,1
10106adc:	30c00115 	stw	r3,4(r6)
10106ae0:	00c40474 	movhi	r3,4113
10106ae4:	18ca5104 	addi	r3,r3,10564
10106ae8:	18c00017 	ldw	r3,0(r3)
10106aec:	21800215 	stw	r6,8(r4)
10106af0:	10ffc036 	bltu	r2,r3,101069f4 <__alt_data_end+0xfffe69f4>
10106af4:	00840474 	movhi	r2,4113
10106af8:	10914a04 	addi	r2,r2,17704
10106afc:	11400017 	ldw	r5,0(r2)
10106b00:	8809883a 	mov	r4,r17
10106b04:	01067e00 	call	101067e0 <_malloc_trim_r>
10106b08:	003fba06 	br	101069f4 <__alt_data_end+0xfffe69f4>
10106b0c:	28c9883a 	add	r4,r5,r3
10106b10:	21000117 	ldw	r4,4(r4)
10106b14:	2100004c 	andi	r4,r4,1
10106b18:	2000391e 	bne	r4,zero,10106c00 <_free_r+0x2fc>
10106b1c:	29c00217 	ldw	r7,8(r5)
10106b20:	29000317 	ldw	r4,12(r5)
10106b24:	1885883a 	add	r2,r3,r2
10106b28:	10c00054 	ori	r3,r2,1
10106b2c:	39000315 	stw	r4,12(r7)
10106b30:	21c00215 	stw	r7,8(r4)
10106b34:	30c00115 	stw	r3,4(r6)
10106b38:	308d883a 	add	r6,r6,r2
10106b3c:	30800015 	stw	r2,0(r6)
10106b40:	003fac06 	br	101069f4 <__alt_data_end+0xfffe69f4>
10106b44:	00c00504 	movi	r3,20
10106b48:	19401536 	bltu	r3,r5,10106ba0 <_free_r+0x29c>
10106b4c:	28c01704 	addi	r3,r5,92
10106b50:	18c7883a 	add	r3,r3,r3
10106b54:	294016c4 	addi	r5,r5,91
10106b58:	003fb406 	br	10106a2c <__alt_data_end+0xfffe6a2c>
10106b5c:	280bd0ba 	srai	r5,r5,2
10106b60:	00c00044 	movi	r3,1
10106b64:	38800117 	ldw	r2,4(r7)
10106b68:	194a983a 	sll	r5,r3,r5
10106b6c:	2007883a 	mov	r3,r4
10106b70:	2884b03a 	or	r2,r5,r2
10106b74:	38800115 	stw	r2,4(r7)
10106b78:	003fbb06 	br	10106a68 <__alt_data_end+0xfffe6a68>
10106b7c:	21800515 	stw	r6,20(r4)
10106b80:	21800415 	stw	r6,16(r4)
10106b84:	10c00054 	ori	r3,r2,1
10106b88:	31c00315 	stw	r7,12(r6)
10106b8c:	31c00215 	stw	r7,8(r6)
10106b90:	30c00115 	stw	r3,4(r6)
10106b94:	308d883a 	add	r6,r6,r2
10106b98:	30800015 	stw	r2,0(r6)
10106b9c:	003f9506 	br	101069f4 <__alt_data_end+0xfffe69f4>
10106ba0:	00c01504 	movi	r3,84
10106ba4:	19400536 	bltu	r3,r5,10106bbc <_free_r+0x2b8>
10106ba8:	100ad33a 	srli	r5,r2,12
10106bac:	28c01bc4 	addi	r3,r5,111
10106bb0:	18c7883a 	add	r3,r3,r3
10106bb4:	29401b84 	addi	r5,r5,110
10106bb8:	003f9c06 	br	10106a2c <__alt_data_end+0xfffe6a2c>
10106bbc:	00c05504 	movi	r3,340
10106bc0:	19400536 	bltu	r3,r5,10106bd8 <_free_r+0x2d4>
10106bc4:	100ad3fa 	srli	r5,r2,15
10106bc8:	28c01e04 	addi	r3,r5,120
10106bcc:	18c7883a 	add	r3,r3,r3
10106bd0:	29401dc4 	addi	r5,r5,119
10106bd4:	003f9506 	br	10106a2c <__alt_data_end+0xfffe6a2c>
10106bd8:	00c15504 	movi	r3,1364
10106bdc:	19400536 	bltu	r3,r5,10106bf4 <_free_r+0x2f0>
10106be0:	100ad4ba 	srli	r5,r2,18
10106be4:	28c01f44 	addi	r3,r5,125
10106be8:	18c7883a 	add	r3,r3,r3
10106bec:	29401f04 	addi	r5,r5,124
10106bf0:	003f8e06 	br	10106a2c <__alt_data_end+0xfffe6a2c>
10106bf4:	00c03f84 	movi	r3,254
10106bf8:	01401f84 	movi	r5,126
10106bfc:	003f8b06 	br	10106a2c <__alt_data_end+0xfffe6a2c>
10106c00:	10c00054 	ori	r3,r2,1
10106c04:	30c00115 	stw	r3,4(r6)
10106c08:	308d883a 	add	r6,r6,r2
10106c0c:	30800015 	stw	r2,0(r6)
10106c10:	003f7806 	br	101069f4 <__alt_data_end+0xfffe69f4>

10106c14 <_fwalk>:
10106c14:	defff704 	addi	sp,sp,-36
10106c18:	dd000415 	stw	r20,16(sp)
10106c1c:	dfc00815 	stw	ra,32(sp)
10106c20:	ddc00715 	stw	r23,28(sp)
10106c24:	dd800615 	stw	r22,24(sp)
10106c28:	dd400515 	stw	r21,20(sp)
10106c2c:	dcc00315 	stw	r19,12(sp)
10106c30:	dc800215 	stw	r18,8(sp)
10106c34:	dc400115 	stw	r17,4(sp)
10106c38:	dc000015 	stw	r16,0(sp)
10106c3c:	2500b804 	addi	r20,r4,736
10106c40:	a0002326 	beq	r20,zero,10106cd0 <_fwalk+0xbc>
10106c44:	282b883a 	mov	r21,r5
10106c48:	002f883a 	mov	r23,zero
10106c4c:	05800044 	movi	r22,1
10106c50:	04ffffc4 	movi	r19,-1
10106c54:	a4400117 	ldw	r17,4(r20)
10106c58:	a4800217 	ldw	r18,8(r20)
10106c5c:	8c7fffc4 	addi	r17,r17,-1
10106c60:	88000d16 	blt	r17,zero,10106c98 <_fwalk+0x84>
10106c64:	94000304 	addi	r16,r18,12
10106c68:	94800384 	addi	r18,r18,14
10106c6c:	8080000b 	ldhu	r2,0(r16)
10106c70:	8c7fffc4 	addi	r17,r17,-1
10106c74:	813ffd04 	addi	r4,r16,-12
10106c78:	b080042e 	bgeu	r22,r2,10106c8c <_fwalk+0x78>
10106c7c:	9080000f 	ldh	r2,0(r18)
10106c80:	14c00226 	beq	r2,r19,10106c8c <_fwalk+0x78>
10106c84:	a83ee83a 	callr	r21
10106c88:	b8aeb03a 	or	r23,r23,r2
10106c8c:	84001a04 	addi	r16,r16,104
10106c90:	94801a04 	addi	r18,r18,104
10106c94:	8cfff51e 	bne	r17,r19,10106c6c <__alt_data_end+0xfffe6c6c>
10106c98:	a5000017 	ldw	r20,0(r20)
10106c9c:	a03fed1e 	bne	r20,zero,10106c54 <__alt_data_end+0xfffe6c54>
10106ca0:	b805883a 	mov	r2,r23
10106ca4:	dfc00817 	ldw	ra,32(sp)
10106ca8:	ddc00717 	ldw	r23,28(sp)
10106cac:	dd800617 	ldw	r22,24(sp)
10106cb0:	dd400517 	ldw	r21,20(sp)
10106cb4:	dd000417 	ldw	r20,16(sp)
10106cb8:	dcc00317 	ldw	r19,12(sp)
10106cbc:	dc800217 	ldw	r18,8(sp)
10106cc0:	dc400117 	ldw	r17,4(sp)
10106cc4:	dc000017 	ldw	r16,0(sp)
10106cc8:	dec00904 	addi	sp,sp,36
10106ccc:	f800283a 	ret
10106cd0:	002f883a 	mov	r23,zero
10106cd4:	003ff206 	br	10106ca0 <__alt_data_end+0xfffe6ca0>

10106cd8 <_fwalk_reent>:
10106cd8:	defff704 	addi	sp,sp,-36
10106cdc:	dd000415 	stw	r20,16(sp)
10106ce0:	dfc00815 	stw	ra,32(sp)
10106ce4:	ddc00715 	stw	r23,28(sp)
10106ce8:	dd800615 	stw	r22,24(sp)
10106cec:	dd400515 	stw	r21,20(sp)
10106cf0:	dcc00315 	stw	r19,12(sp)
10106cf4:	dc800215 	stw	r18,8(sp)
10106cf8:	dc400115 	stw	r17,4(sp)
10106cfc:	dc000015 	stw	r16,0(sp)
10106d00:	2500b804 	addi	r20,r4,736
10106d04:	a0002326 	beq	r20,zero,10106d94 <_fwalk_reent+0xbc>
10106d08:	282b883a 	mov	r21,r5
10106d0c:	2027883a 	mov	r19,r4
10106d10:	002f883a 	mov	r23,zero
10106d14:	05800044 	movi	r22,1
10106d18:	04bfffc4 	movi	r18,-1
10106d1c:	a4400117 	ldw	r17,4(r20)
10106d20:	a4000217 	ldw	r16,8(r20)
10106d24:	8c7fffc4 	addi	r17,r17,-1
10106d28:	88000c16 	blt	r17,zero,10106d5c <_fwalk_reent+0x84>
10106d2c:	84000304 	addi	r16,r16,12
10106d30:	8080000b 	ldhu	r2,0(r16)
10106d34:	8c7fffc4 	addi	r17,r17,-1
10106d38:	817ffd04 	addi	r5,r16,-12
10106d3c:	b080052e 	bgeu	r22,r2,10106d54 <_fwalk_reent+0x7c>
10106d40:	8080008f 	ldh	r2,2(r16)
10106d44:	9809883a 	mov	r4,r19
10106d48:	14800226 	beq	r2,r18,10106d54 <_fwalk_reent+0x7c>
10106d4c:	a83ee83a 	callr	r21
10106d50:	b8aeb03a 	or	r23,r23,r2
10106d54:	84001a04 	addi	r16,r16,104
10106d58:	8cbff51e 	bne	r17,r18,10106d30 <__alt_data_end+0xfffe6d30>
10106d5c:	a5000017 	ldw	r20,0(r20)
10106d60:	a03fee1e 	bne	r20,zero,10106d1c <__alt_data_end+0xfffe6d1c>
10106d64:	b805883a 	mov	r2,r23
10106d68:	dfc00817 	ldw	ra,32(sp)
10106d6c:	ddc00717 	ldw	r23,28(sp)
10106d70:	dd800617 	ldw	r22,24(sp)
10106d74:	dd400517 	ldw	r21,20(sp)
10106d78:	dd000417 	ldw	r20,16(sp)
10106d7c:	dcc00317 	ldw	r19,12(sp)
10106d80:	dc800217 	ldw	r18,8(sp)
10106d84:	dc400117 	ldw	r17,4(sp)
10106d88:	dc000017 	ldw	r16,0(sp)
10106d8c:	dec00904 	addi	sp,sp,36
10106d90:	f800283a 	ret
10106d94:	002f883a 	mov	r23,zero
10106d98:	003ff206 	br	10106d64 <__alt_data_end+0xfffe6d64>

10106d9c <_isatty_r>:
10106d9c:	defffd04 	addi	sp,sp,-12
10106da0:	dc000015 	stw	r16,0(sp)
10106da4:	04040474 	movhi	r16,4113
10106da8:	dc400115 	stw	r17,4(sp)
10106dac:	84114704 	addi	r16,r16,17692
10106db0:	2023883a 	mov	r17,r4
10106db4:	2809883a 	mov	r4,r5
10106db8:	dfc00215 	stw	ra,8(sp)
10106dbc:	80000015 	stw	zero,0(r16)
10106dc0:	010e19c0 	call	1010e19c <isatty>
10106dc4:	00ffffc4 	movi	r3,-1
10106dc8:	10c00526 	beq	r2,r3,10106de0 <_isatty_r+0x44>
10106dcc:	dfc00217 	ldw	ra,8(sp)
10106dd0:	dc400117 	ldw	r17,4(sp)
10106dd4:	dc000017 	ldw	r16,0(sp)
10106dd8:	dec00304 	addi	sp,sp,12
10106ddc:	f800283a 	ret
10106de0:	80c00017 	ldw	r3,0(r16)
10106de4:	183ff926 	beq	r3,zero,10106dcc <__alt_data_end+0xfffe6dcc>
10106de8:	88c00015 	stw	r3,0(r17)
10106dec:	003ff706 	br	10106dcc <__alt_data_end+0xfffe6dcc>

10106df0 <_setlocale_r>:
10106df0:	30001b26 	beq	r6,zero,10106e60 <_setlocale_r+0x70>
10106df4:	01440474 	movhi	r5,4113
10106df8:	defffe04 	addi	sp,sp,-8
10106dfc:	2942f504 	addi	r5,r5,3028
10106e00:	3009883a 	mov	r4,r6
10106e04:	dc000015 	stw	r16,0(sp)
10106e08:	dfc00115 	stw	ra,4(sp)
10106e0c:	3021883a 	mov	r16,r6
10106e10:	01082280 	call	10108228 <strcmp>
10106e14:	1000061e 	bne	r2,zero,10106e30 <_setlocale_r+0x40>
10106e18:	00840474 	movhi	r2,4113
10106e1c:	1082d704 	addi	r2,r2,2908
10106e20:	dfc00117 	ldw	ra,4(sp)
10106e24:	dc000017 	ldw	r16,0(sp)
10106e28:	dec00204 	addi	sp,sp,8
10106e2c:	f800283a 	ret
10106e30:	01440474 	movhi	r5,4113
10106e34:	2942d704 	addi	r5,r5,2908
10106e38:	8009883a 	mov	r4,r16
10106e3c:	01082280 	call	10108228 <strcmp>
10106e40:	103ff526 	beq	r2,zero,10106e18 <__alt_data_end+0xfffe6e18>
10106e44:	01440474 	movhi	r5,4113
10106e48:	2942e004 	addi	r5,r5,2944
10106e4c:	8009883a 	mov	r4,r16
10106e50:	01082280 	call	10108228 <strcmp>
10106e54:	103ff026 	beq	r2,zero,10106e18 <__alt_data_end+0xfffe6e18>
10106e58:	0005883a 	mov	r2,zero
10106e5c:	003ff006 	br	10106e20 <__alt_data_end+0xfffe6e20>
10106e60:	00840474 	movhi	r2,4113
10106e64:	1082d704 	addi	r2,r2,2908
10106e68:	f800283a 	ret

10106e6c <__locale_charset>:
10106e6c:	00840474 	movhi	r2,4113
10106e70:	1085ac04 	addi	r2,r2,5808
10106e74:	f800283a 	ret

10106e78 <__locale_mb_cur_max>:
10106e78:	00840474 	movhi	r2,4113
10106e7c:	108a5204 	addi	r2,r2,10568
10106e80:	10800017 	ldw	r2,0(r2)
10106e84:	f800283a 	ret

10106e88 <__locale_msgcharset>:
10106e88:	00840474 	movhi	r2,4113
10106e8c:	1085a404 	addi	r2,r2,5776
10106e90:	f800283a 	ret

10106e94 <__locale_cjk_lang>:
10106e94:	0005883a 	mov	r2,zero
10106e98:	f800283a 	ret

10106e9c <_localeconv_r>:
10106e9c:	00840474 	movhi	r2,4113
10106ea0:	1085b404 	addi	r2,r2,5840
10106ea4:	f800283a 	ret

10106ea8 <setlocale>:
10106ea8:	00840474 	movhi	r2,4113
10106eac:	108a4f04 	addi	r2,r2,10556
10106eb0:	280d883a 	mov	r6,r5
10106eb4:	200b883a 	mov	r5,r4
10106eb8:	11000017 	ldw	r4,0(r2)
10106ebc:	0106df01 	jmpi	10106df0 <_setlocale_r>

10106ec0 <localeconv>:
10106ec0:	00840474 	movhi	r2,4113
10106ec4:	1085b404 	addi	r2,r2,5840
10106ec8:	f800283a 	ret

10106ecc <_lseek_r>:
10106ecc:	defffd04 	addi	sp,sp,-12
10106ed0:	2805883a 	mov	r2,r5
10106ed4:	dc000015 	stw	r16,0(sp)
10106ed8:	04040474 	movhi	r16,4113
10106edc:	dc400115 	stw	r17,4(sp)
10106ee0:	300b883a 	mov	r5,r6
10106ee4:	84114704 	addi	r16,r16,17692
10106ee8:	2023883a 	mov	r17,r4
10106eec:	380d883a 	mov	r6,r7
10106ef0:	1009883a 	mov	r4,r2
10106ef4:	dfc00215 	stw	ra,8(sp)
10106ef8:	80000015 	stw	zero,0(r16)
10106efc:	010e3680 	call	1010e368 <lseek>
10106f00:	00ffffc4 	movi	r3,-1
10106f04:	10c00526 	beq	r2,r3,10106f1c <_lseek_r+0x50>
10106f08:	dfc00217 	ldw	ra,8(sp)
10106f0c:	dc400117 	ldw	r17,4(sp)
10106f10:	dc000017 	ldw	r16,0(sp)
10106f14:	dec00304 	addi	sp,sp,12
10106f18:	f800283a 	ret
10106f1c:	80c00017 	ldw	r3,0(r16)
10106f20:	183ff926 	beq	r3,zero,10106f08 <__alt_data_end+0xfffe6f08>
10106f24:	88c00015 	stw	r3,0(r17)
10106f28:	003ff706 	br	10106f08 <__alt_data_end+0xfffe6f08>

10106f2c <memchr>:
10106f2c:	208000cc 	andi	r2,r4,3
10106f30:	280f883a 	mov	r7,r5
10106f34:	10003426 	beq	r2,zero,10107008 <memchr+0xdc>
10106f38:	30bfffc4 	addi	r2,r6,-1
10106f3c:	30001a26 	beq	r6,zero,10106fa8 <memchr+0x7c>
10106f40:	20c00003 	ldbu	r3,0(r4)
10106f44:	29803fcc 	andi	r6,r5,255
10106f48:	30c0051e 	bne	r6,r3,10106f60 <memchr+0x34>
10106f4c:	00001806 	br	10106fb0 <memchr+0x84>
10106f50:	10001526 	beq	r2,zero,10106fa8 <memchr+0x7c>
10106f54:	20c00003 	ldbu	r3,0(r4)
10106f58:	10bfffc4 	addi	r2,r2,-1
10106f5c:	30c01426 	beq	r6,r3,10106fb0 <memchr+0x84>
10106f60:	21000044 	addi	r4,r4,1
10106f64:	20c000cc 	andi	r3,r4,3
10106f68:	183ff91e 	bne	r3,zero,10106f50 <__alt_data_end+0xfffe6f50>
10106f6c:	020000c4 	movi	r8,3
10106f70:	40801136 	bltu	r8,r2,10106fb8 <memchr+0x8c>
10106f74:	10000c26 	beq	r2,zero,10106fa8 <memchr+0x7c>
10106f78:	20c00003 	ldbu	r3,0(r4)
10106f7c:	29403fcc 	andi	r5,r5,255
10106f80:	28c00b26 	beq	r5,r3,10106fb0 <memchr+0x84>
10106f84:	20c00044 	addi	r3,r4,1
10106f88:	39803fcc 	andi	r6,r7,255
10106f8c:	2089883a 	add	r4,r4,r2
10106f90:	00000306 	br	10106fa0 <memchr+0x74>
10106f94:	18c00044 	addi	r3,r3,1
10106f98:	197fffc3 	ldbu	r5,-1(r3)
10106f9c:	31400526 	beq	r6,r5,10106fb4 <memchr+0x88>
10106fa0:	1805883a 	mov	r2,r3
10106fa4:	20fffb1e 	bne	r4,r3,10106f94 <__alt_data_end+0xfffe6f94>
10106fa8:	0005883a 	mov	r2,zero
10106fac:	f800283a 	ret
10106fb0:	2005883a 	mov	r2,r4
10106fb4:	f800283a 	ret
10106fb8:	28c03fcc 	andi	r3,r5,255
10106fbc:	1812923a 	slli	r9,r3,8
10106fc0:	02ffbff4 	movhi	r11,65279
10106fc4:	02a02074 	movhi	r10,32897
10106fc8:	48d2b03a 	or	r9,r9,r3
10106fcc:	4806943a 	slli	r3,r9,16
10106fd0:	5affbfc4 	addi	r11,r11,-257
10106fd4:	52a02004 	addi	r10,r10,-32640
10106fd8:	48d2b03a 	or	r9,r9,r3
10106fdc:	20c00017 	ldw	r3,0(r4)
10106fe0:	48c6f03a 	xor	r3,r9,r3
10106fe4:	1acd883a 	add	r6,r3,r11
10106fe8:	00c6303a 	nor	r3,zero,r3
10106fec:	30c6703a 	and	r3,r6,r3
10106ff0:	1a86703a 	and	r3,r3,r10
10106ff4:	183fe01e 	bne	r3,zero,10106f78 <__alt_data_end+0xfffe6f78>
10106ff8:	10bfff04 	addi	r2,r2,-4
10106ffc:	21000104 	addi	r4,r4,4
10107000:	40bff636 	bltu	r8,r2,10106fdc <__alt_data_end+0xfffe6fdc>
10107004:	003fdb06 	br	10106f74 <__alt_data_end+0xfffe6f74>
10107008:	3005883a 	mov	r2,r6
1010700c:	003fd706 	br	10106f6c <__alt_data_end+0xfffe6f6c>

10107010 <memcpy>:
10107010:	defffd04 	addi	sp,sp,-12
10107014:	dfc00215 	stw	ra,8(sp)
10107018:	dc400115 	stw	r17,4(sp)
1010701c:	dc000015 	stw	r16,0(sp)
10107020:	00c003c4 	movi	r3,15
10107024:	2005883a 	mov	r2,r4
10107028:	1980452e 	bgeu	r3,r6,10107140 <memcpy+0x130>
1010702c:	2906b03a 	or	r3,r5,r4
10107030:	18c000cc 	andi	r3,r3,3
10107034:	1800441e 	bne	r3,zero,10107148 <memcpy+0x138>
10107038:	347ffc04 	addi	r17,r6,-16
1010703c:	8822d13a 	srli	r17,r17,4
10107040:	28c00104 	addi	r3,r5,4
10107044:	23400104 	addi	r13,r4,4
10107048:	8820913a 	slli	r16,r17,4
1010704c:	2b000204 	addi	r12,r5,8
10107050:	22c00204 	addi	r11,r4,8
10107054:	84000504 	addi	r16,r16,20
10107058:	2a800304 	addi	r10,r5,12
1010705c:	22400304 	addi	r9,r4,12
10107060:	2c21883a 	add	r16,r5,r16
10107064:	2811883a 	mov	r8,r5
10107068:	200f883a 	mov	r7,r4
1010706c:	41000017 	ldw	r4,0(r8)
10107070:	1fc00017 	ldw	ra,0(r3)
10107074:	63c00017 	ldw	r15,0(r12)
10107078:	39000015 	stw	r4,0(r7)
1010707c:	53800017 	ldw	r14,0(r10)
10107080:	6fc00015 	stw	ra,0(r13)
10107084:	5bc00015 	stw	r15,0(r11)
10107088:	4b800015 	stw	r14,0(r9)
1010708c:	18c00404 	addi	r3,r3,16
10107090:	39c00404 	addi	r7,r7,16
10107094:	42000404 	addi	r8,r8,16
10107098:	6b400404 	addi	r13,r13,16
1010709c:	63000404 	addi	r12,r12,16
101070a0:	5ac00404 	addi	r11,r11,16
101070a4:	52800404 	addi	r10,r10,16
101070a8:	4a400404 	addi	r9,r9,16
101070ac:	1c3fef1e 	bne	r3,r16,1010706c <__alt_data_end+0xfffe706c>
101070b0:	89c00044 	addi	r7,r17,1
101070b4:	380e913a 	slli	r7,r7,4
101070b8:	310003cc 	andi	r4,r6,15
101070bc:	02c000c4 	movi	r11,3
101070c0:	11c7883a 	add	r3,r2,r7
101070c4:	29cb883a 	add	r5,r5,r7
101070c8:	5900212e 	bgeu	r11,r4,10107150 <memcpy+0x140>
101070cc:	1813883a 	mov	r9,r3
101070d0:	2811883a 	mov	r8,r5
101070d4:	200f883a 	mov	r7,r4
101070d8:	42800017 	ldw	r10,0(r8)
101070dc:	4a400104 	addi	r9,r9,4
101070e0:	39ffff04 	addi	r7,r7,-4
101070e4:	4abfff15 	stw	r10,-4(r9)
101070e8:	42000104 	addi	r8,r8,4
101070ec:	59fffa36 	bltu	r11,r7,101070d8 <__alt_data_end+0xfffe70d8>
101070f0:	213fff04 	addi	r4,r4,-4
101070f4:	2008d0ba 	srli	r4,r4,2
101070f8:	318000cc 	andi	r6,r6,3
101070fc:	21000044 	addi	r4,r4,1
10107100:	2109883a 	add	r4,r4,r4
10107104:	2109883a 	add	r4,r4,r4
10107108:	1907883a 	add	r3,r3,r4
1010710c:	290b883a 	add	r5,r5,r4
10107110:	30000626 	beq	r6,zero,1010712c <memcpy+0x11c>
10107114:	198d883a 	add	r6,r3,r6
10107118:	29c00003 	ldbu	r7,0(r5)
1010711c:	18c00044 	addi	r3,r3,1
10107120:	29400044 	addi	r5,r5,1
10107124:	19ffffc5 	stb	r7,-1(r3)
10107128:	19bffb1e 	bne	r3,r6,10107118 <__alt_data_end+0xfffe7118>
1010712c:	dfc00217 	ldw	ra,8(sp)
10107130:	dc400117 	ldw	r17,4(sp)
10107134:	dc000017 	ldw	r16,0(sp)
10107138:	dec00304 	addi	sp,sp,12
1010713c:	f800283a 	ret
10107140:	2007883a 	mov	r3,r4
10107144:	003ff206 	br	10107110 <__alt_data_end+0xfffe7110>
10107148:	2007883a 	mov	r3,r4
1010714c:	003ff106 	br	10107114 <__alt_data_end+0xfffe7114>
10107150:	200d883a 	mov	r6,r4
10107154:	003fee06 	br	10107110 <__alt_data_end+0xfffe7110>

10107158 <_Balloc>:
10107158:	20801317 	ldw	r2,76(r4)
1010715c:	defffc04 	addi	sp,sp,-16
10107160:	dc400115 	stw	r17,4(sp)
10107164:	dc000015 	stw	r16,0(sp)
10107168:	dfc00315 	stw	ra,12(sp)
1010716c:	dc800215 	stw	r18,8(sp)
10107170:	2023883a 	mov	r17,r4
10107174:	2821883a 	mov	r16,r5
10107178:	10000f26 	beq	r2,zero,101071b8 <_Balloc+0x60>
1010717c:	8407883a 	add	r3,r16,r16
10107180:	18c7883a 	add	r3,r3,r3
10107184:	10c7883a 	add	r3,r2,r3
10107188:	18800017 	ldw	r2,0(r3)
1010718c:	10001126 	beq	r2,zero,101071d4 <_Balloc+0x7c>
10107190:	11000017 	ldw	r4,0(r2)
10107194:	19000015 	stw	r4,0(r3)
10107198:	10000415 	stw	zero,16(r2)
1010719c:	10000315 	stw	zero,12(r2)
101071a0:	dfc00317 	ldw	ra,12(sp)
101071a4:	dc800217 	ldw	r18,8(sp)
101071a8:	dc400117 	ldw	r17,4(sp)
101071ac:	dc000017 	ldw	r16,0(sp)
101071b0:	dec00404 	addi	sp,sp,16
101071b4:	f800283a 	ret
101071b8:	01800844 	movi	r6,33
101071bc:	01400104 	movi	r5,4
101071c0:	01099e40 	call	101099e4 <_calloc_r>
101071c4:	88801315 	stw	r2,76(r17)
101071c8:	103fec1e 	bne	r2,zero,1010717c <__alt_data_end+0xfffe717c>
101071cc:	0005883a 	mov	r2,zero
101071d0:	003ff306 	br	101071a0 <__alt_data_end+0xfffe71a0>
101071d4:	01400044 	movi	r5,1
101071d8:	2c24983a 	sll	r18,r5,r16
101071dc:	8809883a 	mov	r4,r17
101071e0:	91800144 	addi	r6,r18,5
101071e4:	318d883a 	add	r6,r6,r6
101071e8:	318d883a 	add	r6,r6,r6
101071ec:	01099e40 	call	101099e4 <_calloc_r>
101071f0:	103ff626 	beq	r2,zero,101071cc <__alt_data_end+0xfffe71cc>
101071f4:	14000115 	stw	r16,4(r2)
101071f8:	14800215 	stw	r18,8(r2)
101071fc:	003fe606 	br	10107198 <__alt_data_end+0xfffe7198>

10107200 <_Bfree>:
10107200:	28000826 	beq	r5,zero,10107224 <_Bfree+0x24>
10107204:	28c00117 	ldw	r3,4(r5)
10107208:	20801317 	ldw	r2,76(r4)
1010720c:	18c7883a 	add	r3,r3,r3
10107210:	18c7883a 	add	r3,r3,r3
10107214:	10c5883a 	add	r2,r2,r3
10107218:	10c00017 	ldw	r3,0(r2)
1010721c:	28c00015 	stw	r3,0(r5)
10107220:	11400015 	stw	r5,0(r2)
10107224:	f800283a 	ret

10107228 <__multadd>:
10107228:	defffa04 	addi	sp,sp,-24
1010722c:	dc800315 	stw	r18,12(sp)
10107230:	dc400215 	stw	r17,8(sp)
10107234:	dc000115 	stw	r16,4(sp)
10107238:	2823883a 	mov	r17,r5
1010723c:	2c000417 	ldw	r16,16(r5)
10107240:	dfc00515 	stw	ra,20(sp)
10107244:	dcc00415 	stw	r19,16(sp)
10107248:	2025883a 	mov	r18,r4
1010724c:	29400504 	addi	r5,r5,20
10107250:	0011883a 	mov	r8,zero
10107254:	28c00017 	ldw	r3,0(r5)
10107258:	29400104 	addi	r5,r5,4
1010725c:	42000044 	addi	r8,r8,1
10107260:	18bfffcc 	andi	r2,r3,65535
10107264:	1185383a 	mul	r2,r2,r6
10107268:	1806d43a 	srli	r3,r3,16
1010726c:	11cf883a 	add	r7,r2,r7
10107270:	3808d43a 	srli	r4,r7,16
10107274:	1987383a 	mul	r3,r3,r6
10107278:	38bfffcc 	andi	r2,r7,65535
1010727c:	1907883a 	add	r3,r3,r4
10107280:	1808943a 	slli	r4,r3,16
10107284:	180ed43a 	srli	r7,r3,16
10107288:	2085883a 	add	r2,r4,r2
1010728c:	28bfff15 	stw	r2,-4(r5)
10107290:	443ff016 	blt	r8,r16,10107254 <__alt_data_end+0xfffe7254>
10107294:	38000926 	beq	r7,zero,101072bc <__multadd+0x94>
10107298:	88800217 	ldw	r2,8(r17)
1010729c:	80800f0e 	bge	r16,r2,101072dc <__multadd+0xb4>
101072a0:	80800144 	addi	r2,r16,5
101072a4:	1085883a 	add	r2,r2,r2
101072a8:	1085883a 	add	r2,r2,r2
101072ac:	8885883a 	add	r2,r17,r2
101072b0:	11c00015 	stw	r7,0(r2)
101072b4:	84000044 	addi	r16,r16,1
101072b8:	8c000415 	stw	r16,16(r17)
101072bc:	8805883a 	mov	r2,r17
101072c0:	dfc00517 	ldw	ra,20(sp)
101072c4:	dcc00417 	ldw	r19,16(sp)
101072c8:	dc800317 	ldw	r18,12(sp)
101072cc:	dc400217 	ldw	r17,8(sp)
101072d0:	dc000117 	ldw	r16,4(sp)
101072d4:	dec00604 	addi	sp,sp,24
101072d8:	f800283a 	ret
101072dc:	89400117 	ldw	r5,4(r17)
101072e0:	9009883a 	mov	r4,r18
101072e4:	d9c00015 	stw	r7,0(sp)
101072e8:	29400044 	addi	r5,r5,1
101072ec:	01071580 	call	10107158 <_Balloc>
101072f0:	89800417 	ldw	r6,16(r17)
101072f4:	89400304 	addi	r5,r17,12
101072f8:	11000304 	addi	r4,r2,12
101072fc:	31800084 	addi	r6,r6,2
10107300:	318d883a 	add	r6,r6,r6
10107304:	318d883a 	add	r6,r6,r6
10107308:	1027883a 	mov	r19,r2
1010730c:	01070100 	call	10107010 <memcpy>
10107310:	d9c00017 	ldw	r7,0(sp)
10107314:	88000a26 	beq	r17,zero,10107340 <__multadd+0x118>
10107318:	88c00117 	ldw	r3,4(r17)
1010731c:	90801317 	ldw	r2,76(r18)
10107320:	18c7883a 	add	r3,r3,r3
10107324:	18c7883a 	add	r3,r3,r3
10107328:	10c5883a 	add	r2,r2,r3
1010732c:	10c00017 	ldw	r3,0(r2)
10107330:	88c00015 	stw	r3,0(r17)
10107334:	14400015 	stw	r17,0(r2)
10107338:	9823883a 	mov	r17,r19
1010733c:	003fd806 	br	101072a0 <__alt_data_end+0xfffe72a0>
10107340:	9823883a 	mov	r17,r19
10107344:	003fd606 	br	101072a0 <__alt_data_end+0xfffe72a0>

10107348 <__s2b>:
10107348:	defff904 	addi	sp,sp,-28
1010734c:	dc400115 	stw	r17,4(sp)
10107350:	dc000015 	stw	r16,0(sp)
10107354:	2023883a 	mov	r17,r4
10107358:	2821883a 	mov	r16,r5
1010735c:	39000204 	addi	r4,r7,8
10107360:	01400244 	movi	r5,9
10107364:	dcc00315 	stw	r19,12(sp)
10107368:	dc800215 	stw	r18,8(sp)
1010736c:	dfc00615 	stw	ra,24(sp)
10107370:	dd400515 	stw	r21,20(sp)
10107374:	dd000415 	stw	r20,16(sp)
10107378:	3825883a 	mov	r18,r7
1010737c:	3027883a 	mov	r19,r6
10107380:	010b7200 	call	1010b720 <__divsi3>
10107384:	00c00044 	movi	r3,1
10107388:	000b883a 	mov	r5,zero
1010738c:	1880030e 	bge	r3,r2,1010739c <__s2b+0x54>
10107390:	18c7883a 	add	r3,r3,r3
10107394:	29400044 	addi	r5,r5,1
10107398:	18bffd16 	blt	r3,r2,10107390 <__alt_data_end+0xfffe7390>
1010739c:	8809883a 	mov	r4,r17
101073a0:	01071580 	call	10107158 <_Balloc>
101073a4:	d8c00717 	ldw	r3,28(sp)
101073a8:	10c00515 	stw	r3,20(r2)
101073ac:	00c00044 	movi	r3,1
101073b0:	10c00415 	stw	r3,16(r2)
101073b4:	00c00244 	movi	r3,9
101073b8:	1cc0210e 	bge	r3,r19,10107440 <__s2b+0xf8>
101073bc:	80eb883a 	add	r21,r16,r3
101073c0:	a829883a 	mov	r20,r21
101073c4:	84e1883a 	add	r16,r16,r19
101073c8:	a1c00007 	ldb	r7,0(r20)
101073cc:	01800284 	movi	r6,10
101073d0:	a5000044 	addi	r20,r20,1
101073d4:	100b883a 	mov	r5,r2
101073d8:	39fff404 	addi	r7,r7,-48
101073dc:	8809883a 	mov	r4,r17
101073e0:	01072280 	call	10107228 <__multadd>
101073e4:	a43ff81e 	bne	r20,r16,101073c8 <__alt_data_end+0xfffe73c8>
101073e8:	ace1883a 	add	r16,r21,r19
101073ec:	843ffe04 	addi	r16,r16,-8
101073f0:	9c800a0e 	bge	r19,r18,1010741c <__s2b+0xd4>
101073f4:	94e5c83a 	sub	r18,r18,r19
101073f8:	84a5883a 	add	r18,r16,r18
101073fc:	81c00007 	ldb	r7,0(r16)
10107400:	01800284 	movi	r6,10
10107404:	84000044 	addi	r16,r16,1
10107408:	100b883a 	mov	r5,r2
1010740c:	39fff404 	addi	r7,r7,-48
10107410:	8809883a 	mov	r4,r17
10107414:	01072280 	call	10107228 <__multadd>
10107418:	84bff81e 	bne	r16,r18,101073fc <__alt_data_end+0xfffe73fc>
1010741c:	dfc00617 	ldw	ra,24(sp)
10107420:	dd400517 	ldw	r21,20(sp)
10107424:	dd000417 	ldw	r20,16(sp)
10107428:	dcc00317 	ldw	r19,12(sp)
1010742c:	dc800217 	ldw	r18,8(sp)
10107430:	dc400117 	ldw	r17,4(sp)
10107434:	dc000017 	ldw	r16,0(sp)
10107438:	dec00704 	addi	sp,sp,28
1010743c:	f800283a 	ret
10107440:	84000284 	addi	r16,r16,10
10107444:	1827883a 	mov	r19,r3
10107448:	003fe906 	br	101073f0 <__alt_data_end+0xfffe73f0>

1010744c <__hi0bits>:
1010744c:	20bfffec 	andhi	r2,r4,65535
10107450:	1000141e 	bne	r2,zero,101074a4 <__hi0bits+0x58>
10107454:	2008943a 	slli	r4,r4,16
10107458:	00800404 	movi	r2,16
1010745c:	20ffc02c 	andhi	r3,r4,65280
10107460:	1800021e 	bne	r3,zero,1010746c <__hi0bits+0x20>
10107464:	2008923a 	slli	r4,r4,8
10107468:	10800204 	addi	r2,r2,8
1010746c:	20fc002c 	andhi	r3,r4,61440
10107470:	1800021e 	bne	r3,zero,1010747c <__hi0bits+0x30>
10107474:	2008913a 	slli	r4,r4,4
10107478:	10800104 	addi	r2,r2,4
1010747c:	20f0002c 	andhi	r3,r4,49152
10107480:	1800031e 	bne	r3,zero,10107490 <__hi0bits+0x44>
10107484:	2109883a 	add	r4,r4,r4
10107488:	10800084 	addi	r2,r2,2
1010748c:	2109883a 	add	r4,r4,r4
10107490:	20000316 	blt	r4,zero,101074a0 <__hi0bits+0x54>
10107494:	2110002c 	andhi	r4,r4,16384
10107498:	2000041e 	bne	r4,zero,101074ac <__hi0bits+0x60>
1010749c:	00800804 	movi	r2,32
101074a0:	f800283a 	ret
101074a4:	0005883a 	mov	r2,zero
101074a8:	003fec06 	br	1010745c <__alt_data_end+0xfffe745c>
101074ac:	10800044 	addi	r2,r2,1
101074b0:	f800283a 	ret

101074b4 <__lo0bits>:
101074b4:	20c00017 	ldw	r3,0(r4)
101074b8:	188001cc 	andi	r2,r3,7
101074bc:	10000826 	beq	r2,zero,101074e0 <__lo0bits+0x2c>
101074c0:	1880004c 	andi	r2,r3,1
101074c4:	1000211e 	bne	r2,zero,1010754c <__lo0bits+0x98>
101074c8:	1880008c 	andi	r2,r3,2
101074cc:	1000211e 	bne	r2,zero,10107554 <__lo0bits+0xa0>
101074d0:	1806d0ba 	srli	r3,r3,2
101074d4:	00800084 	movi	r2,2
101074d8:	20c00015 	stw	r3,0(r4)
101074dc:	f800283a 	ret
101074e0:	18bfffcc 	andi	r2,r3,65535
101074e4:	10001326 	beq	r2,zero,10107534 <__lo0bits+0x80>
101074e8:	0005883a 	mov	r2,zero
101074ec:	19403fcc 	andi	r5,r3,255
101074f0:	2800021e 	bne	r5,zero,101074fc <__lo0bits+0x48>
101074f4:	1806d23a 	srli	r3,r3,8
101074f8:	10800204 	addi	r2,r2,8
101074fc:	194003cc 	andi	r5,r3,15
10107500:	2800021e 	bne	r5,zero,1010750c <__lo0bits+0x58>
10107504:	1806d13a 	srli	r3,r3,4
10107508:	10800104 	addi	r2,r2,4
1010750c:	194000cc 	andi	r5,r3,3
10107510:	2800021e 	bne	r5,zero,1010751c <__lo0bits+0x68>
10107514:	1806d0ba 	srli	r3,r3,2
10107518:	10800084 	addi	r2,r2,2
1010751c:	1940004c 	andi	r5,r3,1
10107520:	2800081e 	bne	r5,zero,10107544 <__lo0bits+0x90>
10107524:	1806d07a 	srli	r3,r3,1
10107528:	1800051e 	bne	r3,zero,10107540 <__lo0bits+0x8c>
1010752c:	00800804 	movi	r2,32
10107530:	f800283a 	ret
10107534:	1806d43a 	srli	r3,r3,16
10107538:	00800404 	movi	r2,16
1010753c:	003feb06 	br	101074ec <__alt_data_end+0xfffe74ec>
10107540:	10800044 	addi	r2,r2,1
10107544:	20c00015 	stw	r3,0(r4)
10107548:	f800283a 	ret
1010754c:	0005883a 	mov	r2,zero
10107550:	f800283a 	ret
10107554:	1806d07a 	srli	r3,r3,1
10107558:	00800044 	movi	r2,1
1010755c:	20c00015 	stw	r3,0(r4)
10107560:	f800283a 	ret

10107564 <__i2b>:
10107564:	defffd04 	addi	sp,sp,-12
10107568:	dc000015 	stw	r16,0(sp)
1010756c:	04000044 	movi	r16,1
10107570:	dc400115 	stw	r17,4(sp)
10107574:	2823883a 	mov	r17,r5
10107578:	800b883a 	mov	r5,r16
1010757c:	dfc00215 	stw	ra,8(sp)
10107580:	01071580 	call	10107158 <_Balloc>
10107584:	14400515 	stw	r17,20(r2)
10107588:	14000415 	stw	r16,16(r2)
1010758c:	dfc00217 	ldw	ra,8(sp)
10107590:	dc400117 	ldw	r17,4(sp)
10107594:	dc000017 	ldw	r16,0(sp)
10107598:	dec00304 	addi	sp,sp,12
1010759c:	f800283a 	ret

101075a0 <__multiply>:
101075a0:	defffa04 	addi	sp,sp,-24
101075a4:	dcc00315 	stw	r19,12(sp)
101075a8:	dc800215 	stw	r18,8(sp)
101075ac:	34c00417 	ldw	r19,16(r6)
101075b0:	2c800417 	ldw	r18,16(r5)
101075b4:	dd000415 	stw	r20,16(sp)
101075b8:	dc400115 	stw	r17,4(sp)
101075bc:	dfc00515 	stw	ra,20(sp)
101075c0:	dc000015 	stw	r16,0(sp)
101075c4:	2829883a 	mov	r20,r5
101075c8:	3023883a 	mov	r17,r6
101075cc:	94c0050e 	bge	r18,r19,101075e4 <__multiply+0x44>
101075d0:	9007883a 	mov	r3,r18
101075d4:	3029883a 	mov	r20,r6
101075d8:	9825883a 	mov	r18,r19
101075dc:	2823883a 	mov	r17,r5
101075e0:	1827883a 	mov	r19,r3
101075e4:	a0800217 	ldw	r2,8(r20)
101075e8:	94e1883a 	add	r16,r18,r19
101075ec:	a1400117 	ldw	r5,4(r20)
101075f0:	1400010e 	bge	r2,r16,101075f8 <__multiply+0x58>
101075f4:	29400044 	addi	r5,r5,1
101075f8:	01071580 	call	10107158 <_Balloc>
101075fc:	8415883a 	add	r10,r16,r16
10107600:	12c00504 	addi	r11,r2,20
10107604:	5295883a 	add	r10,r10,r10
10107608:	5a95883a 	add	r10,r11,r10
1010760c:	5807883a 	mov	r3,r11
10107610:	5a80032e 	bgeu	r11,r10,10107620 <__multiply+0x80>
10107614:	18000015 	stw	zero,0(r3)
10107618:	18c00104 	addi	r3,r3,4
1010761c:	1abffd36 	bltu	r3,r10,10107614 <__alt_data_end+0xfffe7614>
10107620:	9ce7883a 	add	r19,r19,r19
10107624:	94a5883a 	add	r18,r18,r18
10107628:	89800504 	addi	r6,r17,20
1010762c:	9ce7883a 	add	r19,r19,r19
10107630:	a3400504 	addi	r13,r20,20
10107634:	94a5883a 	add	r18,r18,r18
10107638:	34d9883a 	add	r12,r6,r19
1010763c:	6c93883a 	add	r9,r13,r18
10107640:	3300422e 	bgeu	r6,r12,1010774c <__multiply+0x1ac>
10107644:	37c00017 	ldw	ra,0(r6)
10107648:	fbffffcc 	andi	r15,ra,65535
1010764c:	78001b26 	beq	r15,zero,101076bc <__multiply+0x11c>
10107650:	5811883a 	mov	r8,r11
10107654:	681d883a 	mov	r14,r13
10107658:	000f883a 	mov	r7,zero
1010765c:	71000017 	ldw	r4,0(r14)
10107660:	40c00017 	ldw	r3,0(r8)
10107664:	73800104 	addi	r14,r14,4
10107668:	217fffcc 	andi	r5,r4,65535
1010766c:	2bcb383a 	mul	r5,r5,r15
10107670:	2008d43a 	srli	r4,r4,16
10107674:	1c7fffcc 	andi	r17,r3,65535
10107678:	2c4b883a 	add	r5,r5,r17
1010767c:	29cb883a 	add	r5,r5,r7
10107680:	23c9383a 	mul	r4,r4,r15
10107684:	1806d43a 	srli	r3,r3,16
10107688:	280ed43a 	srli	r7,r5,16
1010768c:	297fffcc 	andi	r5,r5,65535
10107690:	20c7883a 	add	r3,r4,r3
10107694:	19c7883a 	add	r3,r3,r7
10107698:	1808943a 	slli	r4,r3,16
1010769c:	4023883a 	mov	r17,r8
101076a0:	180ed43a 	srli	r7,r3,16
101076a4:	214ab03a 	or	r5,r4,r5
101076a8:	41400015 	stw	r5,0(r8)
101076ac:	42000104 	addi	r8,r8,4
101076b0:	727fea36 	bltu	r14,r9,1010765c <__alt_data_end+0xfffe765c>
101076b4:	89c00115 	stw	r7,4(r17)
101076b8:	37c00017 	ldw	ra,0(r6)
101076bc:	f83ed43a 	srli	ra,ra,16
101076c0:	f8001f26 	beq	ra,zero,10107740 <__multiply+0x1a0>
101076c4:	58c00017 	ldw	r3,0(r11)
101076c8:	681d883a 	mov	r14,r13
101076cc:	581f883a 	mov	r15,r11
101076d0:	1811883a 	mov	r8,r3
101076d4:	5825883a 	mov	r18,r11
101076d8:	000f883a 	mov	r7,zero
101076dc:	00000106 	br	101076e4 <__multiply+0x144>
101076e0:	8825883a 	mov	r18,r17
101076e4:	7140000b 	ldhu	r5,0(r14)
101076e8:	4010d43a 	srli	r8,r8,16
101076ec:	193fffcc 	andi	r4,r3,65535
101076f0:	2fcb383a 	mul	r5,r5,ra
101076f4:	7bc00104 	addi	r15,r15,4
101076f8:	73800104 	addi	r14,r14,4
101076fc:	2a0b883a 	add	r5,r5,r8
10107700:	29cb883a 	add	r5,r5,r7
10107704:	2806943a 	slli	r3,r5,16
10107708:	94400104 	addi	r17,r18,4
1010770c:	280ad43a 	srli	r5,r5,16
10107710:	1908b03a 	or	r4,r3,r4
10107714:	793fff15 	stw	r4,-4(r15)
10107718:	70ffff17 	ldw	r3,-4(r14)
1010771c:	8a000017 	ldw	r8,0(r17)
10107720:	1806d43a 	srli	r3,r3,16
10107724:	413fffcc 	andi	r4,r8,65535
10107728:	1fc7383a 	mul	r3,r3,ra
1010772c:	1907883a 	add	r3,r3,r4
10107730:	1947883a 	add	r3,r3,r5
10107734:	180ed43a 	srli	r7,r3,16
10107738:	727fe936 	bltu	r14,r9,101076e0 <__alt_data_end+0xfffe76e0>
1010773c:	90c00115 	stw	r3,4(r18)
10107740:	31800104 	addi	r6,r6,4
10107744:	5ac00104 	addi	r11,r11,4
10107748:	333fbe36 	bltu	r6,r12,10107644 <__alt_data_end+0xfffe7644>
1010774c:	0400090e 	bge	zero,r16,10107774 <__multiply+0x1d4>
10107750:	50ffff17 	ldw	r3,-4(r10)
10107754:	52bfff04 	addi	r10,r10,-4
10107758:	18000326 	beq	r3,zero,10107768 <__multiply+0x1c8>
1010775c:	00000506 	br	10107774 <__multiply+0x1d4>
10107760:	50c00017 	ldw	r3,0(r10)
10107764:	1800031e 	bne	r3,zero,10107774 <__multiply+0x1d4>
10107768:	843fffc4 	addi	r16,r16,-1
1010776c:	52bfff04 	addi	r10,r10,-4
10107770:	803ffb1e 	bne	r16,zero,10107760 <__alt_data_end+0xfffe7760>
10107774:	14000415 	stw	r16,16(r2)
10107778:	dfc00517 	ldw	ra,20(sp)
1010777c:	dd000417 	ldw	r20,16(sp)
10107780:	dcc00317 	ldw	r19,12(sp)
10107784:	dc800217 	ldw	r18,8(sp)
10107788:	dc400117 	ldw	r17,4(sp)
1010778c:	dc000017 	ldw	r16,0(sp)
10107790:	dec00604 	addi	sp,sp,24
10107794:	f800283a 	ret

10107798 <__pow5mult>:
10107798:	defffa04 	addi	sp,sp,-24
1010779c:	dcc00315 	stw	r19,12(sp)
101077a0:	dc000015 	stw	r16,0(sp)
101077a4:	dfc00515 	stw	ra,20(sp)
101077a8:	dd000415 	stw	r20,16(sp)
101077ac:	dc800215 	stw	r18,8(sp)
101077b0:	dc400115 	stw	r17,4(sp)
101077b4:	308000cc 	andi	r2,r6,3
101077b8:	3021883a 	mov	r16,r6
101077bc:	2027883a 	mov	r19,r4
101077c0:	10002f1e 	bne	r2,zero,10107880 <__pow5mult+0xe8>
101077c4:	2825883a 	mov	r18,r5
101077c8:	8021d0ba 	srai	r16,r16,2
101077cc:	80001a26 	beq	r16,zero,10107838 <__pow5mult+0xa0>
101077d0:	9c401217 	ldw	r17,72(r19)
101077d4:	8800061e 	bne	r17,zero,101077f0 <__pow5mult+0x58>
101077d8:	00003406 	br	101078ac <__pow5mult+0x114>
101077dc:	8021d07a 	srai	r16,r16,1
101077e0:	80001526 	beq	r16,zero,10107838 <__pow5mult+0xa0>
101077e4:	88800017 	ldw	r2,0(r17)
101077e8:	10001c26 	beq	r2,zero,1010785c <__pow5mult+0xc4>
101077ec:	1023883a 	mov	r17,r2
101077f0:	8080004c 	andi	r2,r16,1
101077f4:	103ff926 	beq	r2,zero,101077dc <__alt_data_end+0xfffe77dc>
101077f8:	880d883a 	mov	r6,r17
101077fc:	900b883a 	mov	r5,r18
10107800:	9809883a 	mov	r4,r19
10107804:	01075a00 	call	101075a0 <__multiply>
10107808:	90001b26 	beq	r18,zero,10107878 <__pow5mult+0xe0>
1010780c:	91000117 	ldw	r4,4(r18)
10107810:	98c01317 	ldw	r3,76(r19)
10107814:	8021d07a 	srai	r16,r16,1
10107818:	2109883a 	add	r4,r4,r4
1010781c:	2109883a 	add	r4,r4,r4
10107820:	1907883a 	add	r3,r3,r4
10107824:	19000017 	ldw	r4,0(r3)
10107828:	91000015 	stw	r4,0(r18)
1010782c:	1c800015 	stw	r18,0(r3)
10107830:	1025883a 	mov	r18,r2
10107834:	803feb1e 	bne	r16,zero,101077e4 <__alt_data_end+0xfffe77e4>
10107838:	9005883a 	mov	r2,r18
1010783c:	dfc00517 	ldw	ra,20(sp)
10107840:	dd000417 	ldw	r20,16(sp)
10107844:	dcc00317 	ldw	r19,12(sp)
10107848:	dc800217 	ldw	r18,8(sp)
1010784c:	dc400117 	ldw	r17,4(sp)
10107850:	dc000017 	ldw	r16,0(sp)
10107854:	dec00604 	addi	sp,sp,24
10107858:	f800283a 	ret
1010785c:	880d883a 	mov	r6,r17
10107860:	880b883a 	mov	r5,r17
10107864:	9809883a 	mov	r4,r19
10107868:	01075a00 	call	101075a0 <__multiply>
1010786c:	88800015 	stw	r2,0(r17)
10107870:	10000015 	stw	zero,0(r2)
10107874:	003fdd06 	br	101077ec <__alt_data_end+0xfffe77ec>
10107878:	1025883a 	mov	r18,r2
1010787c:	003fd706 	br	101077dc <__alt_data_end+0xfffe77dc>
10107880:	10bfffc4 	addi	r2,r2,-1
10107884:	1085883a 	add	r2,r2,r2
10107888:	00c40474 	movhi	r3,4113
1010788c:	18c2f804 	addi	r3,r3,3040
10107890:	1085883a 	add	r2,r2,r2
10107894:	1885883a 	add	r2,r3,r2
10107898:	11800017 	ldw	r6,0(r2)
1010789c:	000f883a 	mov	r7,zero
101078a0:	01072280 	call	10107228 <__multadd>
101078a4:	1025883a 	mov	r18,r2
101078a8:	003fc706 	br	101077c8 <__alt_data_end+0xfffe77c8>
101078ac:	05000044 	movi	r20,1
101078b0:	a00b883a 	mov	r5,r20
101078b4:	9809883a 	mov	r4,r19
101078b8:	01071580 	call	10107158 <_Balloc>
101078bc:	1023883a 	mov	r17,r2
101078c0:	00809c44 	movi	r2,625
101078c4:	88800515 	stw	r2,20(r17)
101078c8:	8d000415 	stw	r20,16(r17)
101078cc:	9c401215 	stw	r17,72(r19)
101078d0:	88000015 	stw	zero,0(r17)
101078d4:	003fc606 	br	101077f0 <__alt_data_end+0xfffe77f0>

101078d8 <__lshift>:
101078d8:	defff904 	addi	sp,sp,-28
101078dc:	dd400515 	stw	r21,20(sp)
101078e0:	dcc00315 	stw	r19,12(sp)
101078e4:	302bd17a 	srai	r21,r6,5
101078e8:	2cc00417 	ldw	r19,16(r5)
101078ec:	28800217 	ldw	r2,8(r5)
101078f0:	dd000415 	stw	r20,16(sp)
101078f4:	ace7883a 	add	r19,r21,r19
101078f8:	dc800215 	stw	r18,8(sp)
101078fc:	dc400115 	stw	r17,4(sp)
10107900:	dc000015 	stw	r16,0(sp)
10107904:	dfc00615 	stw	ra,24(sp)
10107908:	9c000044 	addi	r16,r19,1
1010790c:	2823883a 	mov	r17,r5
10107910:	3029883a 	mov	r20,r6
10107914:	2025883a 	mov	r18,r4
10107918:	29400117 	ldw	r5,4(r5)
1010791c:	1400030e 	bge	r2,r16,1010792c <__lshift+0x54>
10107920:	1085883a 	add	r2,r2,r2
10107924:	29400044 	addi	r5,r5,1
10107928:	143ffd16 	blt	r2,r16,10107920 <__alt_data_end+0xfffe7920>
1010792c:	9009883a 	mov	r4,r18
10107930:	01071580 	call	10107158 <_Balloc>
10107934:	10c00504 	addi	r3,r2,20
10107938:	0540070e 	bge	zero,r21,10107958 <__lshift+0x80>
1010793c:	ad6b883a 	add	r21,r21,r21
10107940:	ad6b883a 	add	r21,r21,r21
10107944:	1809883a 	mov	r4,r3
10107948:	1d47883a 	add	r3,r3,r21
1010794c:	20000015 	stw	zero,0(r4)
10107950:	21000104 	addi	r4,r4,4
10107954:	193ffd1e 	bne	r3,r4,1010794c <__alt_data_end+0xfffe794c>
10107958:	8a000417 	ldw	r8,16(r17)
1010795c:	89000504 	addi	r4,r17,20
10107960:	a18007cc 	andi	r6,r20,31
10107964:	4211883a 	add	r8,r8,r8
10107968:	4211883a 	add	r8,r8,r8
1010796c:	2211883a 	add	r8,r4,r8
10107970:	30002326 	beq	r6,zero,10107a00 <__lshift+0x128>
10107974:	02400804 	movi	r9,32
10107978:	4993c83a 	sub	r9,r9,r6
1010797c:	000b883a 	mov	r5,zero
10107980:	21c00017 	ldw	r7,0(r4)
10107984:	1815883a 	mov	r10,r3
10107988:	18c00104 	addi	r3,r3,4
1010798c:	398e983a 	sll	r7,r7,r6
10107990:	21000104 	addi	r4,r4,4
10107994:	394ab03a 	or	r5,r7,r5
10107998:	197fff15 	stw	r5,-4(r3)
1010799c:	217fff17 	ldw	r5,-4(r4)
101079a0:	2a4ad83a 	srl	r5,r5,r9
101079a4:	223ff636 	bltu	r4,r8,10107980 <__alt_data_end+0xfffe7980>
101079a8:	51400115 	stw	r5,4(r10)
101079ac:	28001a1e 	bne	r5,zero,10107a18 <__lshift+0x140>
101079b0:	843fffc4 	addi	r16,r16,-1
101079b4:	14000415 	stw	r16,16(r2)
101079b8:	88000826 	beq	r17,zero,101079dc <__lshift+0x104>
101079bc:	89000117 	ldw	r4,4(r17)
101079c0:	90c01317 	ldw	r3,76(r18)
101079c4:	2109883a 	add	r4,r4,r4
101079c8:	2109883a 	add	r4,r4,r4
101079cc:	1907883a 	add	r3,r3,r4
101079d0:	19000017 	ldw	r4,0(r3)
101079d4:	89000015 	stw	r4,0(r17)
101079d8:	1c400015 	stw	r17,0(r3)
101079dc:	dfc00617 	ldw	ra,24(sp)
101079e0:	dd400517 	ldw	r21,20(sp)
101079e4:	dd000417 	ldw	r20,16(sp)
101079e8:	dcc00317 	ldw	r19,12(sp)
101079ec:	dc800217 	ldw	r18,8(sp)
101079f0:	dc400117 	ldw	r17,4(sp)
101079f4:	dc000017 	ldw	r16,0(sp)
101079f8:	dec00704 	addi	sp,sp,28
101079fc:	f800283a 	ret
10107a00:	21400017 	ldw	r5,0(r4)
10107a04:	18c00104 	addi	r3,r3,4
10107a08:	21000104 	addi	r4,r4,4
10107a0c:	197fff15 	stw	r5,-4(r3)
10107a10:	223ffb36 	bltu	r4,r8,10107a00 <__alt_data_end+0xfffe7a00>
10107a14:	003fe606 	br	101079b0 <__alt_data_end+0xfffe79b0>
10107a18:	9c000084 	addi	r16,r19,2
10107a1c:	003fe406 	br	101079b0 <__alt_data_end+0xfffe79b0>

10107a20 <__mcmp>:
10107a20:	20800417 	ldw	r2,16(r4)
10107a24:	28c00417 	ldw	r3,16(r5)
10107a28:	10c5c83a 	sub	r2,r2,r3
10107a2c:	1000111e 	bne	r2,zero,10107a74 <__mcmp+0x54>
10107a30:	18c7883a 	add	r3,r3,r3
10107a34:	18c7883a 	add	r3,r3,r3
10107a38:	21000504 	addi	r4,r4,20
10107a3c:	29400504 	addi	r5,r5,20
10107a40:	20c5883a 	add	r2,r4,r3
10107a44:	28cb883a 	add	r5,r5,r3
10107a48:	00000106 	br	10107a50 <__mcmp+0x30>
10107a4c:	20800a2e 	bgeu	r4,r2,10107a78 <__mcmp+0x58>
10107a50:	10bfff04 	addi	r2,r2,-4
10107a54:	297fff04 	addi	r5,r5,-4
10107a58:	11800017 	ldw	r6,0(r2)
10107a5c:	28c00017 	ldw	r3,0(r5)
10107a60:	30fffa26 	beq	r6,r3,10107a4c <__alt_data_end+0xfffe7a4c>
10107a64:	30c00236 	bltu	r6,r3,10107a70 <__mcmp+0x50>
10107a68:	00800044 	movi	r2,1
10107a6c:	f800283a 	ret
10107a70:	00bfffc4 	movi	r2,-1
10107a74:	f800283a 	ret
10107a78:	0005883a 	mov	r2,zero
10107a7c:	f800283a 	ret

10107a80 <__mdiff>:
10107a80:	28c00417 	ldw	r3,16(r5)
10107a84:	30800417 	ldw	r2,16(r6)
10107a88:	defffa04 	addi	sp,sp,-24
10107a8c:	dcc00315 	stw	r19,12(sp)
10107a90:	dc800215 	stw	r18,8(sp)
10107a94:	dfc00515 	stw	ra,20(sp)
10107a98:	dd000415 	stw	r20,16(sp)
10107a9c:	dc400115 	stw	r17,4(sp)
10107aa0:	dc000015 	stw	r16,0(sp)
10107aa4:	1887c83a 	sub	r3,r3,r2
10107aa8:	2825883a 	mov	r18,r5
10107aac:	3027883a 	mov	r19,r6
10107ab0:	1800141e 	bne	r3,zero,10107b04 <__mdiff+0x84>
10107ab4:	1085883a 	add	r2,r2,r2
10107ab8:	1085883a 	add	r2,r2,r2
10107abc:	2a000504 	addi	r8,r5,20
10107ac0:	34000504 	addi	r16,r6,20
10107ac4:	4087883a 	add	r3,r8,r2
10107ac8:	8085883a 	add	r2,r16,r2
10107acc:	00000106 	br	10107ad4 <__mdiff+0x54>
10107ad0:	40c0592e 	bgeu	r8,r3,10107c38 <__mdiff+0x1b8>
10107ad4:	18ffff04 	addi	r3,r3,-4
10107ad8:	10bfff04 	addi	r2,r2,-4
10107adc:	19c00017 	ldw	r7,0(r3)
10107ae0:	11400017 	ldw	r5,0(r2)
10107ae4:	397ffa26 	beq	r7,r5,10107ad0 <__alt_data_end+0xfffe7ad0>
10107ae8:	3940592e 	bgeu	r7,r5,10107c50 <__mdiff+0x1d0>
10107aec:	9005883a 	mov	r2,r18
10107af0:	4023883a 	mov	r17,r8
10107af4:	9825883a 	mov	r18,r19
10107af8:	05000044 	movi	r20,1
10107afc:	1027883a 	mov	r19,r2
10107b00:	00000406 	br	10107b14 <__mdiff+0x94>
10107b04:	18005616 	blt	r3,zero,10107c60 <__mdiff+0x1e0>
10107b08:	34400504 	addi	r17,r6,20
10107b0c:	2c000504 	addi	r16,r5,20
10107b10:	0029883a 	mov	r20,zero
10107b14:	91400117 	ldw	r5,4(r18)
10107b18:	01071580 	call	10107158 <_Balloc>
10107b1c:	92400417 	ldw	r9,16(r18)
10107b20:	9b000417 	ldw	r12,16(r19)
10107b24:	12c00504 	addi	r11,r2,20
10107b28:	4a51883a 	add	r8,r9,r9
10107b2c:	6319883a 	add	r12,r12,r12
10107b30:	4211883a 	add	r8,r8,r8
10107b34:	6319883a 	add	r12,r12,r12
10107b38:	15000315 	stw	r20,12(r2)
10107b3c:	8211883a 	add	r8,r16,r8
10107b40:	8b19883a 	add	r12,r17,r12
10107b44:	0007883a 	mov	r3,zero
10107b48:	81400017 	ldw	r5,0(r16)
10107b4c:	89c00017 	ldw	r7,0(r17)
10107b50:	59800104 	addi	r6,r11,4
10107b54:	293fffcc 	andi	r4,r5,65535
10107b58:	20c7883a 	add	r3,r4,r3
10107b5c:	393fffcc 	andi	r4,r7,65535
10107b60:	1909c83a 	sub	r4,r3,r4
10107b64:	280ad43a 	srli	r5,r5,16
10107b68:	380ed43a 	srli	r7,r7,16
10107b6c:	2007d43a 	srai	r3,r4,16
10107b70:	213fffcc 	andi	r4,r4,65535
10107b74:	29cbc83a 	sub	r5,r5,r7
10107b78:	28c7883a 	add	r3,r5,r3
10107b7c:	180a943a 	slli	r5,r3,16
10107b80:	8c400104 	addi	r17,r17,4
10107b84:	84000104 	addi	r16,r16,4
10107b88:	2908b03a 	or	r4,r5,r4
10107b8c:	59000015 	stw	r4,0(r11)
10107b90:	1807d43a 	srai	r3,r3,16
10107b94:	3015883a 	mov	r10,r6
10107b98:	3017883a 	mov	r11,r6
10107b9c:	8b3fea36 	bltu	r17,r12,10107b48 <__alt_data_end+0xfffe7b48>
10107ba0:	8200162e 	bgeu	r16,r8,10107bfc <__mdiff+0x17c>
10107ba4:	8017883a 	mov	r11,r16
10107ba8:	59400017 	ldw	r5,0(r11)
10107bac:	31800104 	addi	r6,r6,4
10107bb0:	5ac00104 	addi	r11,r11,4
10107bb4:	293fffcc 	andi	r4,r5,65535
10107bb8:	20c7883a 	add	r3,r4,r3
10107bbc:	280ed43a 	srli	r7,r5,16
10107bc0:	180bd43a 	srai	r5,r3,16
10107bc4:	193fffcc 	andi	r4,r3,65535
10107bc8:	3947883a 	add	r3,r7,r5
10107bcc:	180a943a 	slli	r5,r3,16
10107bd0:	1807d43a 	srai	r3,r3,16
10107bd4:	2908b03a 	or	r4,r5,r4
10107bd8:	313fff15 	stw	r4,-4(r6)
10107bdc:	5a3ff236 	bltu	r11,r8,10107ba8 <__alt_data_end+0xfffe7ba8>
10107be0:	0406303a 	nor	r3,zero,r16
10107be4:	1a07883a 	add	r3,r3,r8
10107be8:	1806d0ba 	srli	r3,r3,2
10107bec:	18c00044 	addi	r3,r3,1
10107bf0:	18c7883a 	add	r3,r3,r3
10107bf4:	18c7883a 	add	r3,r3,r3
10107bf8:	50d5883a 	add	r10,r10,r3
10107bfc:	50ffff04 	addi	r3,r10,-4
10107c00:	2000041e 	bne	r4,zero,10107c14 <__mdiff+0x194>
10107c04:	18ffff04 	addi	r3,r3,-4
10107c08:	19000017 	ldw	r4,0(r3)
10107c0c:	4a7fffc4 	addi	r9,r9,-1
10107c10:	203ffc26 	beq	r4,zero,10107c04 <__alt_data_end+0xfffe7c04>
10107c14:	12400415 	stw	r9,16(r2)
10107c18:	dfc00517 	ldw	ra,20(sp)
10107c1c:	dd000417 	ldw	r20,16(sp)
10107c20:	dcc00317 	ldw	r19,12(sp)
10107c24:	dc800217 	ldw	r18,8(sp)
10107c28:	dc400117 	ldw	r17,4(sp)
10107c2c:	dc000017 	ldw	r16,0(sp)
10107c30:	dec00604 	addi	sp,sp,24
10107c34:	f800283a 	ret
10107c38:	000b883a 	mov	r5,zero
10107c3c:	01071580 	call	10107158 <_Balloc>
10107c40:	00c00044 	movi	r3,1
10107c44:	10c00415 	stw	r3,16(r2)
10107c48:	10000515 	stw	zero,20(r2)
10107c4c:	003ff206 	br	10107c18 <__alt_data_end+0xfffe7c18>
10107c50:	8023883a 	mov	r17,r16
10107c54:	0029883a 	mov	r20,zero
10107c58:	4021883a 	mov	r16,r8
10107c5c:	003fad06 	br	10107b14 <__alt_data_end+0xfffe7b14>
10107c60:	9005883a 	mov	r2,r18
10107c64:	94400504 	addi	r17,r18,20
10107c68:	9c000504 	addi	r16,r19,20
10107c6c:	9825883a 	mov	r18,r19
10107c70:	05000044 	movi	r20,1
10107c74:	1027883a 	mov	r19,r2
10107c78:	003fa606 	br	10107b14 <__alt_data_end+0xfffe7b14>

10107c7c <__ulp>:
10107c7c:	295ffc2c 	andhi	r5,r5,32752
10107c80:	00bf3034 	movhi	r2,64704
10107c84:	2887883a 	add	r3,r5,r2
10107c88:	00c0020e 	bge	zero,r3,10107c94 <__ulp+0x18>
10107c8c:	0005883a 	mov	r2,zero
10107c90:	f800283a 	ret
10107c94:	00c7c83a 	sub	r3,zero,r3
10107c98:	1807d53a 	srai	r3,r3,20
10107c9c:	008004c4 	movi	r2,19
10107ca0:	10c00b0e 	bge	r2,r3,10107cd0 <__ulp+0x54>
10107ca4:	18bffb04 	addi	r2,r3,-20
10107ca8:	01000784 	movi	r4,30
10107cac:	0007883a 	mov	r3,zero
10107cb0:	20800516 	blt	r4,r2,10107cc8 <__ulp+0x4c>
10107cb4:	010007c4 	movi	r4,31
10107cb8:	2089c83a 	sub	r4,r4,r2
10107cbc:	00800044 	movi	r2,1
10107cc0:	1104983a 	sll	r2,r2,r4
10107cc4:	f800283a 	ret
10107cc8:	00800044 	movi	r2,1
10107ccc:	f800283a 	ret
10107cd0:	01400234 	movhi	r5,8
10107cd4:	28c7d83a 	sra	r3,r5,r3
10107cd8:	0005883a 	mov	r2,zero
10107cdc:	f800283a 	ret

10107ce0 <__b2d>:
10107ce0:	defffa04 	addi	sp,sp,-24
10107ce4:	dc000015 	stw	r16,0(sp)
10107ce8:	24000417 	ldw	r16,16(r4)
10107cec:	dc400115 	stw	r17,4(sp)
10107cf0:	24400504 	addi	r17,r4,20
10107cf4:	8421883a 	add	r16,r16,r16
10107cf8:	8421883a 	add	r16,r16,r16
10107cfc:	8c21883a 	add	r16,r17,r16
10107d00:	dc800215 	stw	r18,8(sp)
10107d04:	84bfff17 	ldw	r18,-4(r16)
10107d08:	dd000415 	stw	r20,16(sp)
10107d0c:	dcc00315 	stw	r19,12(sp)
10107d10:	9009883a 	mov	r4,r18
10107d14:	2829883a 	mov	r20,r5
10107d18:	dfc00515 	stw	ra,20(sp)
10107d1c:	010744c0 	call	1010744c <__hi0bits>
10107d20:	00c00804 	movi	r3,32
10107d24:	1889c83a 	sub	r4,r3,r2
10107d28:	a1000015 	stw	r4,0(r20)
10107d2c:	01000284 	movi	r4,10
10107d30:	84ffff04 	addi	r19,r16,-4
10107d34:	20801216 	blt	r4,r2,10107d80 <__b2d+0xa0>
10107d38:	018002c4 	movi	r6,11
10107d3c:	308dc83a 	sub	r6,r6,r2
10107d40:	9186d83a 	srl	r3,r18,r6
10107d44:	18cffc34 	orhi	r3,r3,16368
10107d48:	8cc0212e 	bgeu	r17,r19,10107dd0 <__b2d+0xf0>
10107d4c:	813ffe17 	ldw	r4,-8(r16)
10107d50:	218cd83a 	srl	r6,r4,r6
10107d54:	10800544 	addi	r2,r2,21
10107d58:	9084983a 	sll	r2,r18,r2
10107d5c:	1184b03a 	or	r2,r2,r6
10107d60:	dfc00517 	ldw	ra,20(sp)
10107d64:	dd000417 	ldw	r20,16(sp)
10107d68:	dcc00317 	ldw	r19,12(sp)
10107d6c:	dc800217 	ldw	r18,8(sp)
10107d70:	dc400117 	ldw	r17,4(sp)
10107d74:	dc000017 	ldw	r16,0(sp)
10107d78:	dec00604 	addi	sp,sp,24
10107d7c:	f800283a 	ret
10107d80:	8cc00f2e 	bgeu	r17,r19,10107dc0 <__b2d+0xe0>
10107d84:	117ffd44 	addi	r5,r2,-11
10107d88:	80bffe17 	ldw	r2,-8(r16)
10107d8c:	28000e26 	beq	r5,zero,10107dc8 <__b2d+0xe8>
10107d90:	1949c83a 	sub	r4,r3,r5
10107d94:	9164983a 	sll	r18,r18,r5
10107d98:	1106d83a 	srl	r3,r2,r4
10107d9c:	81bffe04 	addi	r6,r16,-8
10107da0:	948ffc34 	orhi	r18,r18,16368
10107da4:	90c6b03a 	or	r3,r18,r3
10107da8:	89800e2e 	bgeu	r17,r6,10107de4 <__b2d+0x104>
10107dac:	81bffd17 	ldw	r6,-12(r16)
10107db0:	1144983a 	sll	r2,r2,r5
10107db4:	310ad83a 	srl	r5,r6,r4
10107db8:	2884b03a 	or	r2,r5,r2
10107dbc:	003fe806 	br	10107d60 <__alt_data_end+0xfffe7d60>
10107dc0:	10bffd44 	addi	r2,r2,-11
10107dc4:	1000041e 	bne	r2,zero,10107dd8 <__b2d+0xf8>
10107dc8:	90cffc34 	orhi	r3,r18,16368
10107dcc:	003fe406 	br	10107d60 <__alt_data_end+0xfffe7d60>
10107dd0:	000d883a 	mov	r6,zero
10107dd4:	003fdf06 	br	10107d54 <__alt_data_end+0xfffe7d54>
10107dd8:	90a4983a 	sll	r18,r18,r2
10107ddc:	0005883a 	mov	r2,zero
10107de0:	003ff906 	br	10107dc8 <__alt_data_end+0xfffe7dc8>
10107de4:	1144983a 	sll	r2,r2,r5
10107de8:	003fdd06 	br	10107d60 <__alt_data_end+0xfffe7d60>

10107dec <__d2b>:
10107dec:	defff804 	addi	sp,sp,-32
10107df0:	dc000215 	stw	r16,8(sp)
10107df4:	3021883a 	mov	r16,r6
10107df8:	dc400315 	stw	r17,12(sp)
10107dfc:	8022907a 	slli	r17,r16,1
10107e00:	dd000615 	stw	r20,24(sp)
10107e04:	2829883a 	mov	r20,r5
10107e08:	01400044 	movi	r5,1
10107e0c:	dcc00515 	stw	r19,20(sp)
10107e10:	dc800415 	stw	r18,16(sp)
10107e14:	dfc00715 	stw	ra,28(sp)
10107e18:	3825883a 	mov	r18,r7
10107e1c:	8822d57a 	srli	r17,r17,21
10107e20:	01071580 	call	10107158 <_Balloc>
10107e24:	1027883a 	mov	r19,r2
10107e28:	00800434 	movhi	r2,16
10107e2c:	10bfffc4 	addi	r2,r2,-1
10107e30:	808c703a 	and	r6,r16,r2
10107e34:	88000126 	beq	r17,zero,10107e3c <__d2b+0x50>
10107e38:	31800434 	orhi	r6,r6,16
10107e3c:	d9800015 	stw	r6,0(sp)
10107e40:	a0002426 	beq	r20,zero,10107ed4 <__d2b+0xe8>
10107e44:	d9000104 	addi	r4,sp,4
10107e48:	dd000115 	stw	r20,4(sp)
10107e4c:	01074b40 	call	101074b4 <__lo0bits>
10107e50:	d8c00017 	ldw	r3,0(sp)
10107e54:	10002f1e 	bne	r2,zero,10107f14 <__d2b+0x128>
10107e58:	d9000117 	ldw	r4,4(sp)
10107e5c:	99000515 	stw	r4,20(r19)
10107e60:	1821003a 	cmpeq	r16,r3,zero
10107e64:	01000084 	movi	r4,2
10107e68:	2421c83a 	sub	r16,r4,r16
10107e6c:	98c00615 	stw	r3,24(r19)
10107e70:	9c000415 	stw	r16,16(r19)
10107e74:	88001f1e 	bne	r17,zero,10107ef4 <__d2b+0x108>
10107e78:	10bef384 	addi	r2,r2,-1074
10107e7c:	90800015 	stw	r2,0(r18)
10107e80:	00900034 	movhi	r2,16384
10107e84:	10bfffc4 	addi	r2,r2,-1
10107e88:	8085883a 	add	r2,r16,r2
10107e8c:	1085883a 	add	r2,r2,r2
10107e90:	1085883a 	add	r2,r2,r2
10107e94:	9885883a 	add	r2,r19,r2
10107e98:	11000517 	ldw	r4,20(r2)
10107e9c:	8020917a 	slli	r16,r16,5
10107ea0:	010744c0 	call	1010744c <__hi0bits>
10107ea4:	d8c00817 	ldw	r3,32(sp)
10107ea8:	8085c83a 	sub	r2,r16,r2
10107eac:	18800015 	stw	r2,0(r3)
10107eb0:	9805883a 	mov	r2,r19
10107eb4:	dfc00717 	ldw	ra,28(sp)
10107eb8:	dd000617 	ldw	r20,24(sp)
10107ebc:	dcc00517 	ldw	r19,20(sp)
10107ec0:	dc800417 	ldw	r18,16(sp)
10107ec4:	dc400317 	ldw	r17,12(sp)
10107ec8:	dc000217 	ldw	r16,8(sp)
10107ecc:	dec00804 	addi	sp,sp,32
10107ed0:	f800283a 	ret
10107ed4:	d809883a 	mov	r4,sp
10107ed8:	01074b40 	call	101074b4 <__lo0bits>
10107edc:	d8c00017 	ldw	r3,0(sp)
10107ee0:	04000044 	movi	r16,1
10107ee4:	9c000415 	stw	r16,16(r19)
10107ee8:	98c00515 	stw	r3,20(r19)
10107eec:	10800804 	addi	r2,r2,32
10107ef0:	883fe126 	beq	r17,zero,10107e78 <__alt_data_end+0xfffe7e78>
10107ef4:	00c00d44 	movi	r3,53
10107ef8:	8c7ef344 	addi	r17,r17,-1075
10107efc:	88a3883a 	add	r17,r17,r2
10107f00:	1885c83a 	sub	r2,r3,r2
10107f04:	d8c00817 	ldw	r3,32(sp)
10107f08:	94400015 	stw	r17,0(r18)
10107f0c:	18800015 	stw	r2,0(r3)
10107f10:	003fe706 	br	10107eb0 <__alt_data_end+0xfffe7eb0>
10107f14:	01000804 	movi	r4,32
10107f18:	2089c83a 	sub	r4,r4,r2
10107f1c:	1908983a 	sll	r4,r3,r4
10107f20:	d9400117 	ldw	r5,4(sp)
10107f24:	1886d83a 	srl	r3,r3,r2
10107f28:	2148b03a 	or	r4,r4,r5
10107f2c:	99000515 	stw	r4,20(r19)
10107f30:	d8c00015 	stw	r3,0(sp)
10107f34:	003fca06 	br	10107e60 <__alt_data_end+0xfffe7e60>

10107f38 <__ratio>:
10107f38:	defff904 	addi	sp,sp,-28
10107f3c:	dc400315 	stw	r17,12(sp)
10107f40:	2823883a 	mov	r17,r5
10107f44:	d9400104 	addi	r5,sp,4
10107f48:	dfc00615 	stw	ra,24(sp)
10107f4c:	dcc00515 	stw	r19,20(sp)
10107f50:	dc800415 	stw	r18,16(sp)
10107f54:	2027883a 	mov	r19,r4
10107f58:	dc000215 	stw	r16,8(sp)
10107f5c:	0107ce00 	call	10107ce0 <__b2d>
10107f60:	d80b883a 	mov	r5,sp
10107f64:	8809883a 	mov	r4,r17
10107f68:	1025883a 	mov	r18,r2
10107f6c:	1821883a 	mov	r16,r3
10107f70:	0107ce00 	call	10107ce0 <__b2d>
10107f74:	8a000417 	ldw	r8,16(r17)
10107f78:	99000417 	ldw	r4,16(r19)
10107f7c:	d9400117 	ldw	r5,4(sp)
10107f80:	2209c83a 	sub	r4,r4,r8
10107f84:	2010917a 	slli	r8,r4,5
10107f88:	d9000017 	ldw	r4,0(sp)
10107f8c:	2909c83a 	sub	r4,r5,r4
10107f90:	4109883a 	add	r4,r8,r4
10107f94:	01000e0e 	bge	zero,r4,10107fd0 <__ratio+0x98>
10107f98:	2008953a 	slli	r4,r4,20
10107f9c:	2421883a 	add	r16,r4,r16
10107fa0:	100d883a 	mov	r6,r2
10107fa4:	180f883a 	mov	r7,r3
10107fa8:	9009883a 	mov	r4,r18
10107fac:	800b883a 	mov	r5,r16
10107fb0:	010c1800 	call	1010c180 <__divdf3>
10107fb4:	dfc00617 	ldw	ra,24(sp)
10107fb8:	dcc00517 	ldw	r19,20(sp)
10107fbc:	dc800417 	ldw	r18,16(sp)
10107fc0:	dc400317 	ldw	r17,12(sp)
10107fc4:	dc000217 	ldw	r16,8(sp)
10107fc8:	dec00704 	addi	sp,sp,28
10107fcc:	f800283a 	ret
10107fd0:	2008953a 	slli	r4,r4,20
10107fd4:	1907c83a 	sub	r3,r3,r4
10107fd8:	003ff106 	br	10107fa0 <__alt_data_end+0xfffe7fa0>

10107fdc <_mprec_log10>:
10107fdc:	defffe04 	addi	sp,sp,-8
10107fe0:	dc000015 	stw	r16,0(sp)
10107fe4:	dfc00115 	stw	ra,4(sp)
10107fe8:	008005c4 	movi	r2,23
10107fec:	2021883a 	mov	r16,r4
10107ff0:	11000d0e 	bge	r2,r4,10108028 <_mprec_log10+0x4c>
10107ff4:	0005883a 	mov	r2,zero
10107ff8:	00cffc34 	movhi	r3,16368
10107ffc:	843fffc4 	addi	r16,r16,-1
10108000:	000d883a 	mov	r6,zero
10108004:	01d00934 	movhi	r7,16420
10108008:	1009883a 	mov	r4,r2
1010800c:	180b883a 	mov	r5,r3
10108010:	010ccc00 	call	1010ccc0 <__muldf3>
10108014:	803ff91e 	bne	r16,zero,10107ffc <__alt_data_end+0xfffe7ffc>
10108018:	dfc00117 	ldw	ra,4(sp)
1010801c:	dc000017 	ldw	r16,0(sp)
10108020:	dec00204 	addi	sp,sp,8
10108024:	f800283a 	ret
10108028:	202090fa 	slli	r16,r4,3
1010802c:	00840474 	movhi	r2,4113
10108030:	10830f04 	addi	r2,r2,3132
10108034:	1421883a 	add	r16,r2,r16
10108038:	80800017 	ldw	r2,0(r16)
1010803c:	80c00117 	ldw	r3,4(r16)
10108040:	dfc00117 	ldw	ra,4(sp)
10108044:	dc000017 	ldw	r16,0(sp)
10108048:	dec00204 	addi	sp,sp,8
1010804c:	f800283a 	ret

10108050 <__copybits>:
10108050:	297fffc4 	addi	r5,r5,-1
10108054:	280fd17a 	srai	r7,r5,5
10108058:	30c00417 	ldw	r3,16(r6)
1010805c:	30800504 	addi	r2,r6,20
10108060:	39c00044 	addi	r7,r7,1
10108064:	18c7883a 	add	r3,r3,r3
10108068:	39cf883a 	add	r7,r7,r7
1010806c:	18c7883a 	add	r3,r3,r3
10108070:	39cf883a 	add	r7,r7,r7
10108074:	10c7883a 	add	r3,r2,r3
10108078:	21cf883a 	add	r7,r4,r7
1010807c:	10c00d2e 	bgeu	r2,r3,101080b4 <__copybits+0x64>
10108080:	200b883a 	mov	r5,r4
10108084:	12000017 	ldw	r8,0(r2)
10108088:	29400104 	addi	r5,r5,4
1010808c:	10800104 	addi	r2,r2,4
10108090:	2a3fff15 	stw	r8,-4(r5)
10108094:	10fffb36 	bltu	r2,r3,10108084 <__alt_data_end+0xfffe8084>
10108098:	1985c83a 	sub	r2,r3,r6
1010809c:	10bffac4 	addi	r2,r2,-21
101080a0:	1004d0ba 	srli	r2,r2,2
101080a4:	10800044 	addi	r2,r2,1
101080a8:	1085883a 	add	r2,r2,r2
101080ac:	1085883a 	add	r2,r2,r2
101080b0:	2089883a 	add	r4,r4,r2
101080b4:	21c0032e 	bgeu	r4,r7,101080c4 <__copybits+0x74>
101080b8:	20000015 	stw	zero,0(r4)
101080bc:	21000104 	addi	r4,r4,4
101080c0:	21fffd36 	bltu	r4,r7,101080b8 <__alt_data_end+0xfffe80b8>
101080c4:	f800283a 	ret

101080c8 <__any_on>:
101080c8:	20c00417 	ldw	r3,16(r4)
101080cc:	2805d17a 	srai	r2,r5,5
101080d0:	21000504 	addi	r4,r4,20
101080d4:	18800d0e 	bge	r3,r2,1010810c <__any_on+0x44>
101080d8:	18c7883a 	add	r3,r3,r3
101080dc:	18c7883a 	add	r3,r3,r3
101080e0:	20c7883a 	add	r3,r4,r3
101080e4:	20c0192e 	bgeu	r4,r3,1010814c <__any_on+0x84>
101080e8:	18bfff17 	ldw	r2,-4(r3)
101080ec:	18ffff04 	addi	r3,r3,-4
101080f0:	1000041e 	bne	r2,zero,10108104 <__any_on+0x3c>
101080f4:	20c0142e 	bgeu	r4,r3,10108148 <__any_on+0x80>
101080f8:	18ffff04 	addi	r3,r3,-4
101080fc:	19400017 	ldw	r5,0(r3)
10108100:	283ffc26 	beq	r5,zero,101080f4 <__alt_data_end+0xfffe80f4>
10108104:	00800044 	movi	r2,1
10108108:	f800283a 	ret
1010810c:	10c00a0e 	bge	r2,r3,10108138 <__any_on+0x70>
10108110:	1085883a 	add	r2,r2,r2
10108114:	1085883a 	add	r2,r2,r2
10108118:	294007cc 	andi	r5,r5,31
1010811c:	2087883a 	add	r3,r4,r2
10108120:	283ff026 	beq	r5,zero,101080e4 <__alt_data_end+0xfffe80e4>
10108124:	19800017 	ldw	r6,0(r3)
10108128:	3144d83a 	srl	r2,r6,r5
1010812c:	114a983a 	sll	r5,r2,r5
10108130:	317ff41e 	bne	r6,r5,10108104 <__alt_data_end+0xfffe8104>
10108134:	003feb06 	br	101080e4 <__alt_data_end+0xfffe80e4>
10108138:	1085883a 	add	r2,r2,r2
1010813c:	1085883a 	add	r2,r2,r2
10108140:	2087883a 	add	r3,r4,r2
10108144:	003fe706 	br	101080e4 <__alt_data_end+0xfffe80e4>
10108148:	f800283a 	ret
1010814c:	0005883a 	mov	r2,zero
10108150:	f800283a 	ret

10108154 <_read_r>:
10108154:	defffd04 	addi	sp,sp,-12
10108158:	2805883a 	mov	r2,r5
1010815c:	dc000015 	stw	r16,0(sp)
10108160:	04040474 	movhi	r16,4113
10108164:	dc400115 	stw	r17,4(sp)
10108168:	300b883a 	mov	r5,r6
1010816c:	84114704 	addi	r16,r16,17692
10108170:	2023883a 	mov	r17,r4
10108174:	380d883a 	mov	r6,r7
10108178:	1009883a 	mov	r4,r2
1010817c:	dfc00215 	stw	ra,8(sp)
10108180:	80000015 	stw	zero,0(r16)
10108184:	010e7900 	call	1010e790 <read>
10108188:	00ffffc4 	movi	r3,-1
1010818c:	10c00526 	beq	r2,r3,101081a4 <_read_r+0x50>
10108190:	dfc00217 	ldw	ra,8(sp)
10108194:	dc400117 	ldw	r17,4(sp)
10108198:	dc000017 	ldw	r16,0(sp)
1010819c:	dec00304 	addi	sp,sp,12
101081a0:	f800283a 	ret
101081a4:	80c00017 	ldw	r3,0(r16)
101081a8:	183ff926 	beq	r3,zero,10108190 <__alt_data_end+0xfffe8190>
101081ac:	88c00015 	stw	r3,0(r17)
101081b0:	003ff706 	br	10108190 <__alt_data_end+0xfffe8190>

101081b4 <__fpclassifyd>:
101081b4:	00a00034 	movhi	r2,32768
101081b8:	10bfffc4 	addi	r2,r2,-1
101081bc:	2884703a 	and	r2,r5,r2
101081c0:	10000726 	beq	r2,zero,101081e0 <__fpclassifyd+0x2c>
101081c4:	00fffc34 	movhi	r3,65520
101081c8:	019ff834 	movhi	r6,32736
101081cc:	28c7883a 	add	r3,r5,r3
101081d0:	31bfffc4 	addi	r6,r6,-1
101081d4:	30c00536 	bltu	r6,r3,101081ec <__fpclassifyd+0x38>
101081d8:	00800104 	movi	r2,4
101081dc:	f800283a 	ret
101081e0:	2000021e 	bne	r4,zero,101081ec <__fpclassifyd+0x38>
101081e4:	00800084 	movi	r2,2
101081e8:	f800283a 	ret
101081ec:	00dffc34 	movhi	r3,32752
101081f0:	019ff834 	movhi	r6,32736
101081f4:	28cb883a 	add	r5,r5,r3
101081f8:	31bfffc4 	addi	r6,r6,-1
101081fc:	317ff62e 	bgeu	r6,r5,101081d8 <__alt_data_end+0xfffe81d8>
10108200:	01400434 	movhi	r5,16
10108204:	297fffc4 	addi	r5,r5,-1
10108208:	28800236 	bltu	r5,r2,10108214 <__fpclassifyd+0x60>
1010820c:	008000c4 	movi	r2,3
10108210:	f800283a 	ret
10108214:	10c00226 	beq	r2,r3,10108220 <__fpclassifyd+0x6c>
10108218:	0005883a 	mov	r2,zero
1010821c:	f800283a 	ret
10108220:	2005003a 	cmpeq	r2,r4,zero
10108224:	f800283a 	ret

10108228 <strcmp>:
10108228:	2144b03a 	or	r2,r4,r5
1010822c:	108000cc 	andi	r2,r2,3
10108230:	1000171e 	bne	r2,zero,10108290 <strcmp+0x68>
10108234:	20800017 	ldw	r2,0(r4)
10108238:	28c00017 	ldw	r3,0(r5)
1010823c:	10c0141e 	bne	r2,r3,10108290 <strcmp+0x68>
10108240:	027fbff4 	movhi	r9,65279
10108244:	4a7fbfc4 	addi	r9,r9,-257
10108248:	0086303a 	nor	r3,zero,r2
1010824c:	02202074 	movhi	r8,32897
10108250:	1245883a 	add	r2,r2,r9
10108254:	42202004 	addi	r8,r8,-32640
10108258:	10c4703a 	and	r2,r2,r3
1010825c:	1204703a 	and	r2,r2,r8
10108260:	10000226 	beq	r2,zero,1010826c <strcmp+0x44>
10108264:	00002306 	br	101082f4 <strcmp+0xcc>
10108268:	1000221e 	bne	r2,zero,101082f4 <strcmp+0xcc>
1010826c:	21000104 	addi	r4,r4,4
10108270:	20c00017 	ldw	r3,0(r4)
10108274:	29400104 	addi	r5,r5,4
10108278:	29800017 	ldw	r6,0(r5)
1010827c:	1a4f883a 	add	r7,r3,r9
10108280:	00c4303a 	nor	r2,zero,r3
10108284:	3884703a 	and	r2,r7,r2
10108288:	1204703a 	and	r2,r2,r8
1010828c:	19bff626 	beq	r3,r6,10108268 <__alt_data_end+0xfffe8268>
10108290:	20800003 	ldbu	r2,0(r4)
10108294:	10c03fcc 	andi	r3,r2,255
10108298:	18c0201c 	xori	r3,r3,128
1010829c:	18ffe004 	addi	r3,r3,-128
101082a0:	18000c26 	beq	r3,zero,101082d4 <strcmp+0xac>
101082a4:	29800007 	ldb	r6,0(r5)
101082a8:	19800326 	beq	r3,r6,101082b8 <strcmp+0x90>
101082ac:	00001306 	br	101082fc <strcmp+0xd4>
101082b0:	29800007 	ldb	r6,0(r5)
101082b4:	11800b1e 	bne	r2,r6,101082e4 <strcmp+0xbc>
101082b8:	21000044 	addi	r4,r4,1
101082bc:	20c00003 	ldbu	r3,0(r4)
101082c0:	29400044 	addi	r5,r5,1
101082c4:	18803fcc 	andi	r2,r3,255
101082c8:	1080201c 	xori	r2,r2,128
101082cc:	10bfe004 	addi	r2,r2,-128
101082d0:	103ff71e 	bne	r2,zero,101082b0 <__alt_data_end+0xfffe82b0>
101082d4:	0007883a 	mov	r3,zero
101082d8:	28800003 	ldbu	r2,0(r5)
101082dc:	1885c83a 	sub	r2,r3,r2
101082e0:	f800283a 	ret
101082e4:	28800003 	ldbu	r2,0(r5)
101082e8:	18c03fcc 	andi	r3,r3,255
101082ec:	1885c83a 	sub	r2,r3,r2
101082f0:	f800283a 	ret
101082f4:	0005883a 	mov	r2,zero
101082f8:	f800283a 	ret
101082fc:	10c03fcc 	andi	r3,r2,255
10108300:	003ff506 	br	101082d8 <__alt_data_end+0xfffe82d8>

10108304 <strlen>:
10108304:	208000cc 	andi	r2,r4,3
10108308:	10002026 	beq	r2,zero,1010838c <strlen+0x88>
1010830c:	20800007 	ldb	r2,0(r4)
10108310:	10002026 	beq	r2,zero,10108394 <strlen+0x90>
10108314:	2005883a 	mov	r2,r4
10108318:	00000206 	br	10108324 <strlen+0x20>
1010831c:	10c00007 	ldb	r3,0(r2)
10108320:	18001826 	beq	r3,zero,10108384 <strlen+0x80>
10108324:	10800044 	addi	r2,r2,1
10108328:	10c000cc 	andi	r3,r2,3
1010832c:	183ffb1e 	bne	r3,zero,1010831c <__alt_data_end+0xfffe831c>
10108330:	10c00017 	ldw	r3,0(r2)
10108334:	01ffbff4 	movhi	r7,65279
10108338:	39ffbfc4 	addi	r7,r7,-257
1010833c:	00ca303a 	nor	r5,zero,r3
10108340:	01a02074 	movhi	r6,32897
10108344:	19c7883a 	add	r3,r3,r7
10108348:	31a02004 	addi	r6,r6,-32640
1010834c:	1946703a 	and	r3,r3,r5
10108350:	1986703a 	and	r3,r3,r6
10108354:	1800091e 	bne	r3,zero,1010837c <strlen+0x78>
10108358:	10800104 	addi	r2,r2,4
1010835c:	10c00017 	ldw	r3,0(r2)
10108360:	19cb883a 	add	r5,r3,r7
10108364:	00c6303a 	nor	r3,zero,r3
10108368:	28c6703a 	and	r3,r5,r3
1010836c:	1986703a 	and	r3,r3,r6
10108370:	183ff926 	beq	r3,zero,10108358 <__alt_data_end+0xfffe8358>
10108374:	00000106 	br	1010837c <strlen+0x78>
10108378:	10800044 	addi	r2,r2,1
1010837c:	10c00007 	ldb	r3,0(r2)
10108380:	183ffd1e 	bne	r3,zero,10108378 <__alt_data_end+0xfffe8378>
10108384:	1105c83a 	sub	r2,r2,r4
10108388:	f800283a 	ret
1010838c:	2005883a 	mov	r2,r4
10108390:	003fe706 	br	10108330 <__alt_data_end+0xfffe8330>
10108394:	0005883a 	mov	r2,zero
10108398:	f800283a 	ret

1010839c <__sprint_r.part.0>:
1010839c:	28801917 	ldw	r2,100(r5)
101083a0:	defff604 	addi	sp,sp,-40
101083a4:	dd400515 	stw	r21,20(sp)
101083a8:	dfc00915 	stw	ra,36(sp)
101083ac:	df000815 	stw	fp,32(sp)
101083b0:	ddc00715 	stw	r23,28(sp)
101083b4:	dd800615 	stw	r22,24(sp)
101083b8:	dd000415 	stw	r20,16(sp)
101083bc:	dcc00315 	stw	r19,12(sp)
101083c0:	dc800215 	stw	r18,8(sp)
101083c4:	dc400115 	stw	r17,4(sp)
101083c8:	dc000015 	stw	r16,0(sp)
101083cc:	1088000c 	andi	r2,r2,8192
101083d0:	302b883a 	mov	r21,r6
101083d4:	10002e26 	beq	r2,zero,10108490 <__sprint_r.part.0+0xf4>
101083d8:	30800217 	ldw	r2,8(r6)
101083dc:	35800017 	ldw	r22,0(r6)
101083e0:	10002926 	beq	r2,zero,10108488 <__sprint_r.part.0+0xec>
101083e4:	2827883a 	mov	r19,r5
101083e8:	2029883a 	mov	r20,r4
101083ec:	b5c00104 	addi	r23,r22,4
101083f0:	04bfffc4 	movi	r18,-1
101083f4:	bc400017 	ldw	r17,0(r23)
101083f8:	b4000017 	ldw	r16,0(r22)
101083fc:	0039883a 	mov	fp,zero
10108400:	8822d0ba 	srli	r17,r17,2
10108404:	8800031e 	bne	r17,zero,10108414 <__sprint_r.part.0+0x78>
10108408:	00001806 	br	1010846c <__sprint_r.part.0+0xd0>
1010840c:	84000104 	addi	r16,r16,4
10108410:	8f001526 	beq	r17,fp,10108468 <__sprint_r.part.0+0xcc>
10108414:	81400017 	ldw	r5,0(r16)
10108418:	980d883a 	mov	r6,r19
1010841c:	a009883a 	mov	r4,r20
10108420:	0109d100 	call	10109d10 <_fputwc_r>
10108424:	e7000044 	addi	fp,fp,1
10108428:	14bff81e 	bne	r2,r18,1010840c <__alt_data_end+0xfffe840c>
1010842c:	9005883a 	mov	r2,r18
10108430:	a8000215 	stw	zero,8(r21)
10108434:	a8000115 	stw	zero,4(r21)
10108438:	dfc00917 	ldw	ra,36(sp)
1010843c:	df000817 	ldw	fp,32(sp)
10108440:	ddc00717 	ldw	r23,28(sp)
10108444:	dd800617 	ldw	r22,24(sp)
10108448:	dd400517 	ldw	r21,20(sp)
1010844c:	dd000417 	ldw	r20,16(sp)
10108450:	dcc00317 	ldw	r19,12(sp)
10108454:	dc800217 	ldw	r18,8(sp)
10108458:	dc400117 	ldw	r17,4(sp)
1010845c:	dc000017 	ldw	r16,0(sp)
10108460:	dec00a04 	addi	sp,sp,40
10108464:	f800283a 	ret
10108468:	a8800217 	ldw	r2,8(r21)
1010846c:	8c63883a 	add	r17,r17,r17
10108470:	8c63883a 	add	r17,r17,r17
10108474:	1445c83a 	sub	r2,r2,r17
10108478:	a8800215 	stw	r2,8(r21)
1010847c:	b5800204 	addi	r22,r22,8
10108480:	bdc00204 	addi	r23,r23,8
10108484:	103fdb1e 	bne	r2,zero,101083f4 <__alt_data_end+0xfffe83f4>
10108488:	0005883a 	mov	r2,zero
1010848c:	003fe806 	br	10108430 <__alt_data_end+0xfffe8430>
10108490:	0109db40 	call	10109db4 <__sfvwrite_r>
10108494:	003fe606 	br	10108430 <__alt_data_end+0xfffe8430>

10108498 <__sprint_r>:
10108498:	30c00217 	ldw	r3,8(r6)
1010849c:	18000126 	beq	r3,zero,101084a4 <__sprint_r+0xc>
101084a0:	010839c1 	jmpi	1010839c <__sprint_r.part.0>
101084a4:	30000115 	stw	zero,4(r6)
101084a8:	0005883a 	mov	r2,zero
101084ac:	f800283a 	ret

101084b0 <___vfiprintf_internal_r>:
101084b0:	deffc904 	addi	sp,sp,-220
101084b4:	df003515 	stw	fp,212(sp)
101084b8:	dd003115 	stw	r20,196(sp)
101084bc:	dfc03615 	stw	ra,216(sp)
101084c0:	ddc03415 	stw	r23,208(sp)
101084c4:	dd803315 	stw	r22,204(sp)
101084c8:	dd403215 	stw	r21,200(sp)
101084cc:	dcc03015 	stw	r19,192(sp)
101084d0:	dc802f15 	stw	r18,188(sp)
101084d4:	dc402e15 	stw	r17,184(sp)
101084d8:	dc002d15 	stw	r16,180(sp)
101084dc:	d9002015 	stw	r4,128(sp)
101084e0:	d9c02215 	stw	r7,136(sp)
101084e4:	2829883a 	mov	r20,r5
101084e8:	3039883a 	mov	fp,r6
101084ec:	20000226 	beq	r4,zero,101084f8 <___vfiprintf_internal_r+0x48>
101084f0:	20800e17 	ldw	r2,56(r4)
101084f4:	1000cf26 	beq	r2,zero,10108834 <___vfiprintf_internal_r+0x384>
101084f8:	a080030b 	ldhu	r2,12(r20)
101084fc:	10c8000c 	andi	r3,r2,8192
10108500:	1800061e 	bne	r3,zero,1010851c <___vfiprintf_internal_r+0x6c>
10108504:	a1001917 	ldw	r4,100(r20)
10108508:	00f7ffc4 	movi	r3,-8193
1010850c:	10880014 	ori	r2,r2,8192
10108510:	20c6703a 	and	r3,r4,r3
10108514:	a080030d 	sth	r2,12(r20)
10108518:	a0c01915 	stw	r3,100(r20)
1010851c:	10c0020c 	andi	r3,r2,8
10108520:	1800a926 	beq	r3,zero,101087c8 <___vfiprintf_internal_r+0x318>
10108524:	a0c00417 	ldw	r3,16(r20)
10108528:	1800a726 	beq	r3,zero,101087c8 <___vfiprintf_internal_r+0x318>
1010852c:	1080068c 	andi	r2,r2,26
10108530:	00c00284 	movi	r3,10
10108534:	10c0ac26 	beq	r2,r3,101087e8 <___vfiprintf_internal_r+0x338>
10108538:	da801a04 	addi	r10,sp,104
1010853c:	da801e15 	stw	r10,120(sp)
10108540:	d8801e17 	ldw	r2,120(sp)
10108544:	da8019c4 	addi	r10,sp,103
10108548:	05840474 	movhi	r22,4113
1010854c:	05c40474 	movhi	r23,4113
10108550:	da801f15 	stw	r10,124(sp)
10108554:	1295c83a 	sub	r10,r2,r10
10108558:	b5834504 	addi	r22,r22,3348
1010855c:	bdc34104 	addi	r23,r23,3332
10108560:	dec01a15 	stw	sp,104(sp)
10108564:	d8001c15 	stw	zero,112(sp)
10108568:	d8001b15 	stw	zero,108(sp)
1010856c:	d8002615 	stw	zero,152(sp)
10108570:	d8002315 	stw	zero,140(sp)
10108574:	da802715 	stw	r10,156(sp)
10108578:	d811883a 	mov	r8,sp
1010857c:	dd002115 	stw	r20,132(sp)
10108580:	e021883a 	mov	r16,fp
10108584:	80800007 	ldb	r2,0(r16)
10108588:	1003ea26 	beq	r2,zero,10109534 <___vfiprintf_internal_r+0x1084>
1010858c:	00c00944 	movi	r3,37
10108590:	8025883a 	mov	r18,r16
10108594:	10c0021e 	bne	r2,r3,101085a0 <___vfiprintf_internal_r+0xf0>
10108598:	00001606 	br	101085f4 <___vfiprintf_internal_r+0x144>
1010859c:	10c00326 	beq	r2,r3,101085ac <___vfiprintf_internal_r+0xfc>
101085a0:	94800044 	addi	r18,r18,1
101085a4:	90800007 	ldb	r2,0(r18)
101085a8:	103ffc1e 	bne	r2,zero,1010859c <__alt_data_end+0xfffe859c>
101085ac:	9423c83a 	sub	r17,r18,r16
101085b0:	88001026 	beq	r17,zero,101085f4 <___vfiprintf_internal_r+0x144>
101085b4:	d8c01c17 	ldw	r3,112(sp)
101085b8:	d8801b17 	ldw	r2,108(sp)
101085bc:	44000015 	stw	r16,0(r8)
101085c0:	88c7883a 	add	r3,r17,r3
101085c4:	10800044 	addi	r2,r2,1
101085c8:	44400115 	stw	r17,4(r8)
101085cc:	d8c01c15 	stw	r3,112(sp)
101085d0:	d8801b15 	stw	r2,108(sp)
101085d4:	010001c4 	movi	r4,7
101085d8:	2080760e 	bge	r4,r2,101087b4 <___vfiprintf_internal_r+0x304>
101085dc:	1803821e 	bne	r3,zero,101093e8 <___vfiprintf_internal_r+0xf38>
101085e0:	da802317 	ldw	r10,140(sp)
101085e4:	d8001b15 	stw	zero,108(sp)
101085e8:	d811883a 	mov	r8,sp
101085ec:	5455883a 	add	r10,r10,r17
101085f0:	da802315 	stw	r10,140(sp)
101085f4:	90800007 	ldb	r2,0(r18)
101085f8:	10044626 	beq	r2,zero,10109714 <___vfiprintf_internal_r+0x1264>
101085fc:	90c00047 	ldb	r3,1(r18)
10108600:	94000044 	addi	r16,r18,1
10108604:	d8001d85 	stb	zero,118(sp)
10108608:	0009883a 	mov	r4,zero
1010860c:	000f883a 	mov	r7,zero
10108610:	027fffc4 	movi	r9,-1
10108614:	0023883a 	mov	r17,zero
10108618:	0029883a 	mov	r20,zero
1010861c:	01401604 	movi	r5,88
10108620:	01800244 	movi	r6,9
10108624:	03400a84 	movi	r13,42
10108628:	03001b04 	movi	r12,108
1010862c:	84000044 	addi	r16,r16,1
10108630:	18bff804 	addi	r2,r3,-32
10108634:	28827336 	bltu	r5,r2,10109004 <___vfiprintf_internal_r+0xb54>
10108638:	100490ba 	slli	r2,r2,2
1010863c:	02840474 	movhi	r10,4113
10108640:	52a19404 	addi	r10,r10,-31152
10108644:	1285883a 	add	r2,r2,r10
10108648:	10800017 	ldw	r2,0(r2)
1010864c:	1000683a 	jmp	r2
10108650:	10108d38 	rdprs	zero,r2,16948
10108654:	10109004 	addi	zero,r2,16960
10108658:	10109004 	addi	zero,r2,16960
1010865c:	10108d58 	cmpnei	zero,r2,16949
10108660:	10109004 	addi	zero,r2,16960
10108664:	10109004 	addi	zero,r2,16960
10108668:	10109004 	addi	zero,r2,16960
1010866c:	10109004 	addi	zero,r2,16960
10108670:	10109004 	addi	zero,r2,16960
10108674:	10109004 	addi	zero,r2,16960
10108678:	10108f40 	call	110108f4 <__alt_data_end+0xef08f4>
1010867c:	10108f5c 	xori	zero,r2,16957
10108680:	10109004 	addi	zero,r2,16960
10108684:	10108844 	addi	zero,r2,16929
10108688:	10108f6c 	andhi	zero,r2,16957
1010868c:	10109004 	addi	zero,r2,16960
10108690:	10108d64 	muli	zero,r2,16949
10108694:	10108d70 	cmpltui	zero,r2,16949
10108698:	10108d70 	cmpltui	zero,r2,16949
1010869c:	10108d70 	cmpltui	zero,r2,16949
101086a0:	10108d70 	cmpltui	zero,r2,16949
101086a4:	10108d70 	cmpltui	zero,r2,16949
101086a8:	10108d70 	cmpltui	zero,r2,16949
101086ac:	10108d70 	cmpltui	zero,r2,16949
101086b0:	10108d70 	cmpltui	zero,r2,16949
101086b4:	10108d70 	cmpltui	zero,r2,16949
101086b8:	10109004 	addi	zero,r2,16960
101086bc:	10109004 	addi	zero,r2,16960
101086c0:	10109004 	addi	zero,r2,16960
101086c4:	10109004 	addi	zero,r2,16960
101086c8:	10109004 	addi	zero,r2,16960
101086cc:	10109004 	addi	zero,r2,16960
101086d0:	10109004 	addi	zero,r2,16960
101086d4:	10109004 	addi	zero,r2,16960
101086d8:	10109004 	addi	zero,r2,16960
101086dc:	10109004 	addi	zero,r2,16960
101086e0:	10108d9c 	xori	zero,r2,16950
101086e4:	10109004 	addi	zero,r2,16960
101086e8:	10109004 	addi	zero,r2,16960
101086ec:	10109004 	addi	zero,r2,16960
101086f0:	10109004 	addi	zero,r2,16960
101086f4:	10109004 	addi	zero,r2,16960
101086f8:	10109004 	addi	zero,r2,16960
101086fc:	10109004 	addi	zero,r2,16960
10108700:	10109004 	addi	zero,r2,16960
10108704:	10109004 	addi	zero,r2,16960
10108708:	10109004 	addi	zero,r2,16960
1010870c:	10108dd4 	ori	zero,r2,16951
10108710:	10109004 	addi	zero,r2,16960
10108714:	10109004 	addi	zero,r2,16960
10108718:	10109004 	addi	zero,r2,16960
1010871c:	10109004 	addi	zero,r2,16960
10108720:	10109004 	addi	zero,r2,16960
10108724:	10108e2c 	andhi	zero,r2,16952
10108728:	10109004 	addi	zero,r2,16960
1010872c:	10109004 	addi	zero,r2,16960
10108730:	10108e9c 	xori	zero,r2,16954
10108734:	10109004 	addi	zero,r2,16960
10108738:	10109004 	addi	zero,r2,16960
1010873c:	10109004 	addi	zero,r2,16960
10108740:	10109004 	addi	zero,r2,16960
10108744:	10109004 	addi	zero,r2,16960
10108748:	10109004 	addi	zero,r2,16960
1010874c:	10109004 	addi	zero,r2,16960
10108750:	10109004 	addi	zero,r2,16960
10108754:	10109004 	addi	zero,r2,16960
10108758:	10109004 	addi	zero,r2,16960
1010875c:	10108c48 	cmpgei	zero,r2,16945
10108760:	10108c74 	orhi	zero,r2,16945
10108764:	10109004 	addi	zero,r2,16960
10108768:	10109004 	addi	zero,r2,16960
1010876c:	10109004 	addi	zero,r2,16960
10108770:	10108fac 	andhi	zero,r2,16958
10108774:	10108c74 	orhi	zero,r2,16945
10108778:	10109004 	addi	zero,r2,16960
1010877c:	10109004 	addi	zero,r2,16960
10108780:	10108b08 	cmpgei	zero,r2,16940
10108784:	10109004 	addi	zero,r2,16960
10108788:	10108b18 	cmpnei	zero,r2,16940
1010878c:	10108b54 	ori	zero,r2,16941
10108790:	10108850 	cmplti	zero,r2,16929
10108794:	10108afc 	xorhi	zero,r2,16939
10108798:	10109004 	addi	zero,r2,16960
1010879c:	10108ed8 	cmpnei	zero,r2,16955
101087a0:	10109004 	addi	zero,r2,16960
101087a4:	10108f30 	cmpltui	zero,r2,16956
101087a8:	10109004 	addi	zero,r2,16960
101087ac:	10109004 	addi	zero,r2,16960
101087b0:	10108bf4 	orhi	zero,r2,16943
101087b4:	42000204 	addi	r8,r8,8
101087b8:	da802317 	ldw	r10,140(sp)
101087bc:	5455883a 	add	r10,r10,r17
101087c0:	da802315 	stw	r10,140(sp)
101087c4:	003f8b06 	br	101085f4 <__alt_data_end+0xfffe85f4>
101087c8:	d9002017 	ldw	r4,128(sp)
101087cc:	a00b883a 	mov	r5,r20
101087d0:	01046bc0 	call	101046bc <__swsetup_r>
101087d4:	1003b11e 	bne	r2,zero,1010969c <___vfiprintf_internal_r+0x11ec>
101087d8:	a080030b 	ldhu	r2,12(r20)
101087dc:	00c00284 	movi	r3,10
101087e0:	1080068c 	andi	r2,r2,26
101087e4:	10ff541e 	bne	r2,r3,10108538 <__alt_data_end+0xfffe8538>
101087e8:	a080038f 	ldh	r2,14(r20)
101087ec:	103f5216 	blt	r2,zero,10108538 <__alt_data_end+0xfffe8538>
101087f0:	d9c02217 	ldw	r7,136(sp)
101087f4:	d9002017 	ldw	r4,128(sp)
101087f8:	e00d883a 	mov	r6,fp
101087fc:	a00b883a 	mov	r5,r20
10108800:	01099280 	call	10109928 <__sbprintf>
10108804:	dfc03617 	ldw	ra,216(sp)
10108808:	df003517 	ldw	fp,212(sp)
1010880c:	ddc03417 	ldw	r23,208(sp)
10108810:	dd803317 	ldw	r22,204(sp)
10108814:	dd403217 	ldw	r21,200(sp)
10108818:	dd003117 	ldw	r20,196(sp)
1010881c:	dcc03017 	ldw	r19,192(sp)
10108820:	dc802f17 	ldw	r18,188(sp)
10108824:	dc402e17 	ldw	r17,184(sp)
10108828:	dc002d17 	ldw	r16,180(sp)
1010882c:	dec03704 	addi	sp,sp,220
10108830:	f800283a 	ret
10108834:	01066e40 	call	101066e4 <__sinit>
10108838:	003f2f06 	br	101084f8 <__alt_data_end+0xfffe84f8>
1010883c:	0463c83a 	sub	r17,zero,r17
10108840:	d8802215 	stw	r2,136(sp)
10108844:	a5000114 	ori	r20,r20,4
10108848:	80c00007 	ldb	r3,0(r16)
1010884c:	003f7706 	br	1010862c <__alt_data_end+0xfffe862c>
10108850:	00800c04 	movi	r2,48
10108854:	da802217 	ldw	r10,136(sp)
10108858:	d8801d05 	stb	r2,116(sp)
1010885c:	00801e04 	movi	r2,120
10108860:	d8801d45 	stb	r2,117(sp)
10108864:	d8001d85 	stb	zero,118(sp)
10108868:	50c00104 	addi	r3,r10,4
1010886c:	54800017 	ldw	r18,0(r10)
10108870:	0027883a 	mov	r19,zero
10108874:	a0800094 	ori	r2,r20,2
10108878:	48030b16 	blt	r9,zero,101094a8 <___vfiprintf_internal_r+0xff8>
1010887c:	00bfdfc4 	movi	r2,-129
10108880:	a096703a 	and	r11,r20,r2
10108884:	d8c02215 	stw	r3,136(sp)
10108888:	5d000094 	ori	r20,r11,2
1010888c:	90032b1e 	bne	r18,zero,1010953c <___vfiprintf_internal_r+0x108c>
10108890:	00840474 	movhi	r2,4113
10108894:	1082e104 	addi	r2,r2,2948
10108898:	d8802615 	stw	r2,152(sp)
1010889c:	0039883a 	mov	fp,zero
101088a0:	48017b1e 	bne	r9,zero,10108e90 <___vfiprintf_internal_r+0x9e0>
101088a4:	0013883a 	mov	r9,zero
101088a8:	0027883a 	mov	r19,zero
101088ac:	dd401a04 	addi	r21,sp,104
101088b0:	4825883a 	mov	r18,r9
101088b4:	4cc0010e 	bge	r9,r19,101088bc <___vfiprintf_internal_r+0x40c>
101088b8:	9825883a 	mov	r18,r19
101088bc:	e7003fcc 	andi	fp,fp,255
101088c0:	e700201c 	xori	fp,fp,128
101088c4:	e73fe004 	addi	fp,fp,-128
101088c8:	e0000126 	beq	fp,zero,101088d0 <___vfiprintf_internal_r+0x420>
101088cc:	94800044 	addi	r18,r18,1
101088d0:	a380008c 	andi	r14,r20,2
101088d4:	70000126 	beq	r14,zero,101088dc <___vfiprintf_internal_r+0x42c>
101088d8:	94800084 	addi	r18,r18,2
101088dc:	a700210c 	andi	fp,r20,132
101088e0:	e001df1e 	bne	fp,zero,10109060 <___vfiprintf_internal_r+0xbb0>
101088e4:	8c87c83a 	sub	r3,r17,r18
101088e8:	00c1dd0e 	bge	zero,r3,10109060 <___vfiprintf_internal_r+0xbb0>
101088ec:	01c00404 	movi	r7,16
101088f0:	d8801c17 	ldw	r2,112(sp)
101088f4:	38c3ad0e 	bge	r7,r3,101097ac <___vfiprintf_internal_r+0x12fc>
101088f8:	02840474 	movhi	r10,4113
101088fc:	52834504 	addi	r10,r10,3348
10108900:	dc002915 	stw	r16,164(sp)
10108904:	d9801b17 	ldw	r6,108(sp)
10108908:	da802415 	stw	r10,144(sp)
1010890c:	03c001c4 	movi	r15,7
10108910:	da402515 	stw	r9,148(sp)
10108914:	db802815 	stw	r14,160(sp)
10108918:	1821883a 	mov	r16,r3
1010891c:	00000506 	br	10108934 <___vfiprintf_internal_r+0x484>
10108920:	31400084 	addi	r5,r6,2
10108924:	42000204 	addi	r8,r8,8
10108928:	200d883a 	mov	r6,r4
1010892c:	843ffc04 	addi	r16,r16,-16
10108930:	3c000d0e 	bge	r7,r16,10108968 <___vfiprintf_internal_r+0x4b8>
10108934:	10800404 	addi	r2,r2,16
10108938:	31000044 	addi	r4,r6,1
1010893c:	45800015 	stw	r22,0(r8)
10108940:	41c00115 	stw	r7,4(r8)
10108944:	d8801c15 	stw	r2,112(sp)
10108948:	d9001b15 	stw	r4,108(sp)
1010894c:	793ff40e 	bge	r15,r4,10108920 <__alt_data_end+0xfffe8920>
10108950:	1001b51e 	bne	r2,zero,10109028 <___vfiprintf_internal_r+0xb78>
10108954:	843ffc04 	addi	r16,r16,-16
10108958:	000d883a 	mov	r6,zero
1010895c:	01400044 	movi	r5,1
10108960:	d811883a 	mov	r8,sp
10108964:	3c3ff316 	blt	r7,r16,10108934 <__alt_data_end+0xfffe8934>
10108968:	8007883a 	mov	r3,r16
1010896c:	da402517 	ldw	r9,148(sp)
10108970:	db802817 	ldw	r14,160(sp)
10108974:	dc002917 	ldw	r16,164(sp)
10108978:	da802417 	ldw	r10,144(sp)
1010897c:	1885883a 	add	r2,r3,r2
10108980:	40c00115 	stw	r3,4(r8)
10108984:	42800015 	stw	r10,0(r8)
10108988:	d8801c15 	stw	r2,112(sp)
1010898c:	d9401b15 	stw	r5,108(sp)
10108990:	00c001c4 	movi	r3,7
10108994:	19426016 	blt	r3,r5,10109318 <___vfiprintf_internal_r+0xe68>
10108998:	d8c01d87 	ldb	r3,118(sp)
1010899c:	42000204 	addi	r8,r8,8
101089a0:	29000044 	addi	r4,r5,1
101089a4:	1801b31e 	bne	r3,zero,10109074 <___vfiprintf_internal_r+0xbc4>
101089a8:	7001c026 	beq	r14,zero,101090ac <___vfiprintf_internal_r+0xbfc>
101089ac:	d8c01d04 	addi	r3,sp,116
101089b0:	10800084 	addi	r2,r2,2
101089b4:	40c00015 	stw	r3,0(r8)
101089b8:	00c00084 	movi	r3,2
101089bc:	40c00115 	stw	r3,4(r8)
101089c0:	d8801c15 	stw	r2,112(sp)
101089c4:	d9001b15 	stw	r4,108(sp)
101089c8:	00c001c4 	movi	r3,7
101089cc:	1902650e 	bge	r3,r4,10109364 <___vfiprintf_internal_r+0xeb4>
101089d0:	10029a1e 	bne	r2,zero,1010943c <___vfiprintf_internal_r+0xf8c>
101089d4:	00c02004 	movi	r3,128
101089d8:	01000044 	movi	r4,1
101089dc:	000b883a 	mov	r5,zero
101089e0:	d811883a 	mov	r8,sp
101089e4:	e0c1b31e 	bne	fp,r3,101090b4 <___vfiprintf_internal_r+0xc04>
101089e8:	8cb9c83a 	sub	fp,r17,r18
101089ec:	0701b10e 	bge	zero,fp,101090b4 <___vfiprintf_internal_r+0xc04>
101089f0:	01c00404 	movi	r7,16
101089f4:	3f03890e 	bge	r7,fp,1010981c <___vfiprintf_internal_r+0x136c>
101089f8:	00c40474 	movhi	r3,4113
101089fc:	18c34104 	addi	r3,r3,3332
10108a00:	d8c02415 	stw	r3,144(sp)
10108a04:	8007883a 	mov	r3,r16
10108a08:	034001c4 	movi	r13,7
10108a0c:	e021883a 	mov	r16,fp
10108a10:	da402515 	stw	r9,148(sp)
10108a14:	1839883a 	mov	fp,r3
10108a18:	00000506 	br	10108a30 <___vfiprintf_internal_r+0x580>
10108a1c:	29800084 	addi	r6,r5,2
10108a20:	42000204 	addi	r8,r8,8
10108a24:	180b883a 	mov	r5,r3
10108a28:	843ffc04 	addi	r16,r16,-16
10108a2c:	3c000d0e 	bge	r7,r16,10108a64 <___vfiprintf_internal_r+0x5b4>
10108a30:	10800404 	addi	r2,r2,16
10108a34:	28c00044 	addi	r3,r5,1
10108a38:	45c00015 	stw	r23,0(r8)
10108a3c:	41c00115 	stw	r7,4(r8)
10108a40:	d8801c15 	stw	r2,112(sp)
10108a44:	d8c01b15 	stw	r3,108(sp)
10108a48:	68fff40e 	bge	r13,r3,10108a1c <__alt_data_end+0xfffe8a1c>
10108a4c:	1002241e 	bne	r2,zero,101092e0 <___vfiprintf_internal_r+0xe30>
10108a50:	843ffc04 	addi	r16,r16,-16
10108a54:	01800044 	movi	r6,1
10108a58:	000b883a 	mov	r5,zero
10108a5c:	d811883a 	mov	r8,sp
10108a60:	3c3ff316 	blt	r7,r16,10108a30 <__alt_data_end+0xfffe8a30>
10108a64:	da402517 	ldw	r9,148(sp)
10108a68:	e007883a 	mov	r3,fp
10108a6c:	8039883a 	mov	fp,r16
10108a70:	1821883a 	mov	r16,r3
10108a74:	d8c02417 	ldw	r3,144(sp)
10108a78:	1705883a 	add	r2,r2,fp
10108a7c:	47000115 	stw	fp,4(r8)
10108a80:	40c00015 	stw	r3,0(r8)
10108a84:	d8801c15 	stw	r2,112(sp)
10108a88:	d9801b15 	stw	r6,108(sp)
10108a8c:	00c001c4 	movi	r3,7
10108a90:	19827616 	blt	r3,r6,1010946c <___vfiprintf_internal_r+0xfbc>
10108a94:	4cf9c83a 	sub	fp,r9,r19
10108a98:	42000204 	addi	r8,r8,8
10108a9c:	31000044 	addi	r4,r6,1
10108aa0:	300b883a 	mov	r5,r6
10108aa4:	07018516 	blt	zero,fp,101090bc <___vfiprintf_internal_r+0xc0c>
10108aa8:	9885883a 	add	r2,r19,r2
10108aac:	45400015 	stw	r21,0(r8)
10108ab0:	44c00115 	stw	r19,4(r8)
10108ab4:	d8801c15 	stw	r2,112(sp)
10108ab8:	d9001b15 	stw	r4,108(sp)
10108abc:	00c001c4 	movi	r3,7
10108ac0:	1901dd0e 	bge	r3,r4,10109238 <___vfiprintf_internal_r+0xd88>
10108ac4:	1002401e 	bne	r2,zero,101093c8 <___vfiprintf_internal_r+0xf18>
10108ac8:	d8001b15 	stw	zero,108(sp)
10108acc:	a2c0010c 	andi	r11,r20,4
10108ad0:	58000226 	beq	r11,zero,10108adc <___vfiprintf_internal_r+0x62c>
10108ad4:	8ca7c83a 	sub	r19,r17,r18
10108ad8:	04c2f216 	blt	zero,r19,101096a4 <___vfiprintf_internal_r+0x11f4>
10108adc:	8c80010e 	bge	r17,r18,10108ae4 <___vfiprintf_internal_r+0x634>
10108ae0:	9023883a 	mov	r17,r18
10108ae4:	da802317 	ldw	r10,140(sp)
10108ae8:	5455883a 	add	r10,r10,r17
10108aec:	da802315 	stw	r10,140(sp)
10108af0:	d8001b15 	stw	zero,108(sp)
10108af4:	d811883a 	mov	r8,sp
10108af8:	003ea206 	br	10108584 <__alt_data_end+0xfffe8584>
10108afc:	a5000814 	ori	r20,r20,32
10108b00:	80c00007 	ldb	r3,0(r16)
10108b04:	003ec906 	br	1010862c <__alt_data_end+0xfffe862c>
10108b08:	80c00007 	ldb	r3,0(r16)
10108b0c:	1b030926 	beq	r3,r12,10109734 <___vfiprintf_internal_r+0x1284>
10108b10:	a5000414 	ori	r20,r20,16
10108b14:	003ec506 	br	1010862c <__alt_data_end+0xfffe862c>
10108b18:	21003fcc 	andi	r4,r4,255
10108b1c:	20035e1e 	bne	r4,zero,10109898 <___vfiprintf_internal_r+0x13e8>
10108b20:	a080080c 	andi	r2,r20,32
10108b24:	1002a526 	beq	r2,zero,101095bc <___vfiprintf_internal_r+0x110c>
10108b28:	da802217 	ldw	r10,136(sp)
10108b2c:	50800017 	ldw	r2,0(r10)
10108b30:	da802317 	ldw	r10,140(sp)
10108b34:	5007d7fa 	srai	r3,r10,31
10108b38:	da802217 	ldw	r10,136(sp)
10108b3c:	10c00115 	stw	r3,4(r2)
10108b40:	52800104 	addi	r10,r10,4
10108b44:	da802215 	stw	r10,136(sp)
10108b48:	da802317 	ldw	r10,140(sp)
10108b4c:	12800015 	stw	r10,0(r2)
10108b50:	003e8c06 	br	10108584 <__alt_data_end+0xfffe8584>
10108b54:	21003fcc 	andi	r4,r4,255
10108b58:	2003511e 	bne	r4,zero,101098a0 <___vfiprintf_internal_r+0x13f0>
10108b5c:	a080080c 	andi	r2,r20,32
10108b60:	1000a126 	beq	r2,zero,10108de8 <___vfiprintf_internal_r+0x938>
10108b64:	da802217 	ldw	r10,136(sp)
10108b68:	d8001d85 	stb	zero,118(sp)
10108b6c:	50800204 	addi	r2,r10,8
10108b70:	54800017 	ldw	r18,0(r10)
10108b74:	54c00117 	ldw	r19,4(r10)
10108b78:	4802b416 	blt	r9,zero,1010964c <___vfiprintf_internal_r+0x119c>
10108b7c:	013fdfc4 	movi	r4,-129
10108b80:	94c6b03a 	or	r3,r18,r19
10108b84:	d8802215 	stw	r2,136(sp)
10108b88:	a128703a 	and	r20,r20,r4
10108b8c:	1800a226 	beq	r3,zero,10108e18 <___vfiprintf_internal_r+0x968>
10108b90:	0039883a 	mov	fp,zero
10108b94:	dd401a04 	addi	r21,sp,104
10108b98:	9006d0fa 	srli	r3,r18,3
10108b9c:	9808977a 	slli	r4,r19,29
10108ba0:	9826d0fa 	srli	r19,r19,3
10108ba4:	948001cc 	andi	r18,r18,7
10108ba8:	90800c04 	addi	r2,r18,48
10108bac:	ad7fffc4 	addi	r21,r21,-1
10108bb0:	20e4b03a 	or	r18,r4,r3
10108bb4:	a8800005 	stb	r2,0(r21)
10108bb8:	94c6b03a 	or	r3,r18,r19
10108bbc:	183ff61e 	bne	r3,zero,10108b98 <__alt_data_end+0xfffe8b98>
10108bc0:	a0c0004c 	andi	r3,r20,1
10108bc4:	18005926 	beq	r3,zero,10108d2c <___vfiprintf_internal_r+0x87c>
10108bc8:	10803fcc 	andi	r2,r2,255
10108bcc:	1080201c 	xori	r2,r2,128
10108bd0:	10bfe004 	addi	r2,r2,-128
10108bd4:	00c00c04 	movi	r3,48
10108bd8:	10c05426 	beq	r2,r3,10108d2c <___vfiprintf_internal_r+0x87c>
10108bdc:	da801e17 	ldw	r10,120(sp)
10108be0:	a8bfffc4 	addi	r2,r21,-1
10108be4:	a8ffffc5 	stb	r3,-1(r21)
10108be8:	50a7c83a 	sub	r19,r10,r2
10108bec:	102b883a 	mov	r21,r2
10108bf0:	003f2f06 	br	101088b0 <__alt_data_end+0xfffe88b0>
10108bf4:	21003fcc 	andi	r4,r4,255
10108bf8:	2003421e 	bne	r4,zero,10109904 <___vfiprintf_internal_r+0x1454>
10108bfc:	00840474 	movhi	r2,4113
10108c00:	1082e104 	addi	r2,r2,2948
10108c04:	d8802615 	stw	r2,152(sp)
10108c08:	a080080c 	andi	r2,r20,32
10108c0c:	1000aa26 	beq	r2,zero,10108eb8 <___vfiprintf_internal_r+0xa08>
10108c10:	da802217 	ldw	r10,136(sp)
10108c14:	54800017 	ldw	r18,0(r10)
10108c18:	54c00117 	ldw	r19,4(r10)
10108c1c:	52800204 	addi	r10,r10,8
10108c20:	da802215 	stw	r10,136(sp)
10108c24:	a080004c 	andi	r2,r20,1
10108c28:	1001d226 	beq	r2,zero,10109374 <___vfiprintf_internal_r+0xec4>
10108c2c:	94c4b03a 	or	r2,r18,r19
10108c30:	1002351e 	bne	r2,zero,10109508 <___vfiprintf_internal_r+0x1058>
10108c34:	d8001d85 	stb	zero,118(sp)
10108c38:	48022216 	blt	r9,zero,101094c4 <___vfiprintf_internal_r+0x1014>
10108c3c:	00bfdfc4 	movi	r2,-129
10108c40:	a0a8703a 	and	r20,r20,r2
10108c44:	003f1506 	br	1010889c <__alt_data_end+0xfffe889c>
10108c48:	da802217 	ldw	r10,136(sp)
10108c4c:	04800044 	movi	r18,1
10108c50:	d8001d85 	stb	zero,118(sp)
10108c54:	50800017 	ldw	r2,0(r10)
10108c58:	52800104 	addi	r10,r10,4
10108c5c:	da802215 	stw	r10,136(sp)
10108c60:	d8801005 	stb	r2,64(sp)
10108c64:	9027883a 	mov	r19,r18
10108c68:	dd401004 	addi	r21,sp,64
10108c6c:	0013883a 	mov	r9,zero
10108c70:	003f1706 	br	101088d0 <__alt_data_end+0xfffe88d0>
10108c74:	21003fcc 	andi	r4,r4,255
10108c78:	2003201e 	bne	r4,zero,101098fc <___vfiprintf_internal_r+0x144c>
10108c7c:	a080080c 	andi	r2,r20,32
10108c80:	10004b26 	beq	r2,zero,10108db0 <___vfiprintf_internal_r+0x900>
10108c84:	da802217 	ldw	r10,136(sp)
10108c88:	50800117 	ldw	r2,4(r10)
10108c8c:	54800017 	ldw	r18,0(r10)
10108c90:	52800204 	addi	r10,r10,8
10108c94:	da802215 	stw	r10,136(sp)
10108c98:	1027883a 	mov	r19,r2
10108c9c:	10022c16 	blt	r2,zero,10109550 <___vfiprintf_internal_r+0x10a0>
10108ca0:	df001d83 	ldbu	fp,118(sp)
10108ca4:	48007216 	blt	r9,zero,10108e70 <___vfiprintf_internal_r+0x9c0>
10108ca8:	00ffdfc4 	movi	r3,-129
10108cac:	94c4b03a 	or	r2,r18,r19
10108cb0:	a0e8703a 	and	r20,r20,r3
10108cb4:	1000cc26 	beq	r2,zero,10108fe8 <___vfiprintf_internal_r+0xb38>
10108cb8:	98021026 	beq	r19,zero,101094fc <___vfiprintf_internal_r+0x104c>
10108cbc:	dc402415 	stw	r17,144(sp)
10108cc0:	dc002515 	stw	r16,148(sp)
10108cc4:	9823883a 	mov	r17,r19
10108cc8:	9021883a 	mov	r16,r18
10108ccc:	dd401a04 	addi	r21,sp,104
10108cd0:	4825883a 	mov	r18,r9
10108cd4:	4027883a 	mov	r19,r8
10108cd8:	8009883a 	mov	r4,r16
10108cdc:	880b883a 	mov	r5,r17
10108ce0:	01800284 	movi	r6,10
10108ce4:	000f883a 	mov	r7,zero
10108ce8:	010b1e80 	call	1010b1e8 <__umoddi3>
10108cec:	10800c04 	addi	r2,r2,48
10108cf0:	ad7fffc4 	addi	r21,r21,-1
10108cf4:	8009883a 	mov	r4,r16
10108cf8:	880b883a 	mov	r5,r17
10108cfc:	a8800005 	stb	r2,0(r21)
10108d00:	01800284 	movi	r6,10
10108d04:	000f883a 	mov	r7,zero
10108d08:	010ac700 	call	1010ac70 <__udivdi3>
10108d0c:	1021883a 	mov	r16,r2
10108d10:	10c4b03a 	or	r2,r2,r3
10108d14:	1823883a 	mov	r17,r3
10108d18:	103fef1e 	bne	r2,zero,10108cd8 <__alt_data_end+0xfffe8cd8>
10108d1c:	dc402417 	ldw	r17,144(sp)
10108d20:	dc002517 	ldw	r16,148(sp)
10108d24:	9013883a 	mov	r9,r18
10108d28:	9811883a 	mov	r8,r19
10108d2c:	da801e17 	ldw	r10,120(sp)
10108d30:	5567c83a 	sub	r19,r10,r21
10108d34:	003ede06 	br	101088b0 <__alt_data_end+0xfffe88b0>
10108d38:	38803fcc 	andi	r2,r7,255
10108d3c:	1080201c 	xori	r2,r2,128
10108d40:	10bfe004 	addi	r2,r2,-128
10108d44:	1002371e 	bne	r2,zero,10109624 <___vfiprintf_internal_r+0x1174>
10108d48:	01000044 	movi	r4,1
10108d4c:	01c00804 	movi	r7,32
10108d50:	80c00007 	ldb	r3,0(r16)
10108d54:	003e3506 	br	1010862c <__alt_data_end+0xfffe862c>
10108d58:	a5000054 	ori	r20,r20,1
10108d5c:	80c00007 	ldb	r3,0(r16)
10108d60:	003e3206 	br	1010862c <__alt_data_end+0xfffe862c>
10108d64:	a5002014 	ori	r20,r20,128
10108d68:	80c00007 	ldb	r3,0(r16)
10108d6c:	003e2f06 	br	1010862c <__alt_data_end+0xfffe862c>
10108d70:	8015883a 	mov	r10,r16
10108d74:	0023883a 	mov	r17,zero
10108d78:	18bff404 	addi	r2,r3,-48
10108d7c:	50c00007 	ldb	r3,0(r10)
10108d80:	8c4002a4 	muli	r17,r17,10
10108d84:	84000044 	addi	r16,r16,1
10108d88:	8015883a 	mov	r10,r16
10108d8c:	1463883a 	add	r17,r2,r17
10108d90:	18bff404 	addi	r2,r3,-48
10108d94:	30bff92e 	bgeu	r6,r2,10108d7c <__alt_data_end+0xfffe8d7c>
10108d98:	003e2506 	br	10108630 <__alt_data_end+0xfffe8630>
10108d9c:	21003fcc 	andi	r4,r4,255
10108da0:	2002d41e 	bne	r4,zero,101098f4 <___vfiprintf_internal_r+0x1444>
10108da4:	a5000414 	ori	r20,r20,16
10108da8:	a080080c 	andi	r2,r20,32
10108dac:	103fb51e 	bne	r2,zero,10108c84 <__alt_data_end+0xfffe8c84>
10108db0:	a080040c 	andi	r2,r20,16
10108db4:	1001f826 	beq	r2,zero,10109598 <___vfiprintf_internal_r+0x10e8>
10108db8:	da802217 	ldw	r10,136(sp)
10108dbc:	54800017 	ldw	r18,0(r10)
10108dc0:	52800104 	addi	r10,r10,4
10108dc4:	da802215 	stw	r10,136(sp)
10108dc8:	9027d7fa 	srai	r19,r18,31
10108dcc:	9805883a 	mov	r2,r19
10108dd0:	003fb206 	br	10108c9c <__alt_data_end+0xfffe8c9c>
10108dd4:	21003fcc 	andi	r4,r4,255
10108dd8:	2002c41e 	bne	r4,zero,101098ec <___vfiprintf_internal_r+0x143c>
10108ddc:	a5000414 	ori	r20,r20,16
10108de0:	a080080c 	andi	r2,r20,32
10108de4:	103f5f1e 	bne	r2,zero,10108b64 <__alt_data_end+0xfffe8b64>
10108de8:	a080040c 	andi	r2,r20,16
10108dec:	10020f26 	beq	r2,zero,1010962c <___vfiprintf_internal_r+0x117c>
10108df0:	da802217 	ldw	r10,136(sp)
10108df4:	d8001d85 	stb	zero,118(sp)
10108df8:	0027883a 	mov	r19,zero
10108dfc:	50800104 	addi	r2,r10,4
10108e00:	54800017 	ldw	r18,0(r10)
10108e04:	48021116 	blt	r9,zero,1010964c <___vfiprintf_internal_r+0x119c>
10108e08:	00ffdfc4 	movi	r3,-129
10108e0c:	d8802215 	stw	r2,136(sp)
10108e10:	a0e8703a 	and	r20,r20,r3
10108e14:	903f5e1e 	bne	r18,zero,10108b90 <__alt_data_end+0xfffe8b90>
10108e18:	0039883a 	mov	fp,zero
10108e1c:	4802a626 	beq	r9,zero,101098b8 <___vfiprintf_internal_r+0x1408>
10108e20:	0025883a 	mov	r18,zero
10108e24:	0027883a 	mov	r19,zero
10108e28:	003f5a06 	br	10108b94 <__alt_data_end+0xfffe8b94>
10108e2c:	21003fcc 	andi	r4,r4,255
10108e30:	20029f1e 	bne	r4,zero,101098b0 <___vfiprintf_internal_r+0x1400>
10108e34:	a5000414 	ori	r20,r20,16
10108e38:	a080080c 	andi	r2,r20,32
10108e3c:	10005e1e 	bne	r2,zero,10108fb8 <___vfiprintf_internal_r+0xb08>
10108e40:	a080040c 	andi	r2,r20,16
10108e44:	1001a21e 	bne	r2,zero,101094d0 <___vfiprintf_internal_r+0x1020>
10108e48:	a080100c 	andi	r2,r20,64
10108e4c:	d8001d85 	stb	zero,118(sp)
10108e50:	da802217 	ldw	r10,136(sp)
10108e54:	1002231e 	bne	r2,zero,101096e4 <___vfiprintf_internal_r+0x1234>
10108e58:	50800104 	addi	r2,r10,4
10108e5c:	54800017 	ldw	r18,0(r10)
10108e60:	0027883a 	mov	r19,zero
10108e64:	4801a00e 	bge	r9,zero,101094e8 <___vfiprintf_internal_r+0x1038>
10108e68:	d8802215 	stw	r2,136(sp)
10108e6c:	0039883a 	mov	fp,zero
10108e70:	94c4b03a 	or	r2,r18,r19
10108e74:	103f901e 	bne	r2,zero,10108cb8 <__alt_data_end+0xfffe8cb8>
10108e78:	00800044 	movi	r2,1
10108e7c:	10803fcc 	andi	r2,r2,255
10108e80:	00c00044 	movi	r3,1
10108e84:	10c05926 	beq	r2,r3,10108fec <___vfiprintf_internal_r+0xb3c>
10108e88:	00c00084 	movi	r3,2
10108e8c:	10ffe41e 	bne	r2,r3,10108e20 <__alt_data_end+0xfffe8e20>
10108e90:	0025883a 	mov	r18,zero
10108e94:	0027883a 	mov	r19,zero
10108e98:	00013d06 	br	10109390 <___vfiprintf_internal_r+0xee0>
10108e9c:	21003fcc 	andi	r4,r4,255
10108ea0:	2002811e 	bne	r4,zero,101098a8 <___vfiprintf_internal_r+0x13f8>
10108ea4:	00840474 	movhi	r2,4113
10108ea8:	1082dc04 	addi	r2,r2,2928
10108eac:	d8802615 	stw	r2,152(sp)
10108eb0:	a080080c 	andi	r2,r20,32
10108eb4:	103f561e 	bne	r2,zero,10108c10 <__alt_data_end+0xfffe8c10>
10108eb8:	a080040c 	andi	r2,r20,16
10108ebc:	1001d126 	beq	r2,zero,10109604 <___vfiprintf_internal_r+0x1154>
10108ec0:	da802217 	ldw	r10,136(sp)
10108ec4:	0027883a 	mov	r19,zero
10108ec8:	54800017 	ldw	r18,0(r10)
10108ecc:	52800104 	addi	r10,r10,4
10108ed0:	da802215 	stw	r10,136(sp)
10108ed4:	003f5306 	br	10108c24 <__alt_data_end+0xfffe8c24>
10108ed8:	da802217 	ldw	r10,136(sp)
10108edc:	d8001d85 	stb	zero,118(sp)
10108ee0:	55400017 	ldw	r21,0(r10)
10108ee4:	50c00104 	addi	r3,r10,4
10108ee8:	a8024226 	beq	r21,zero,101097f4 <___vfiprintf_internal_r+0x1344>
10108eec:	48021816 	blt	r9,zero,10109750 <___vfiprintf_internal_r+0x12a0>
10108ef0:	480d883a 	mov	r6,r9
10108ef4:	000b883a 	mov	r5,zero
10108ef8:	a809883a 	mov	r4,r21
10108efc:	d8c02a15 	stw	r3,168(sp)
10108f00:	da002b15 	stw	r8,172(sp)
10108f04:	da402c15 	stw	r9,176(sp)
10108f08:	0106f2c0 	call	10106f2c <memchr>
10108f0c:	d8c02a17 	ldw	r3,168(sp)
10108f10:	da002b17 	ldw	r8,172(sp)
10108f14:	da402c17 	ldw	r9,176(sp)
10108f18:	10024826 	beq	r2,zero,1010983c <___vfiprintf_internal_r+0x138c>
10108f1c:	1567c83a 	sub	r19,r2,r21
10108f20:	df001d83 	ldbu	fp,118(sp)
10108f24:	d8c02215 	stw	r3,136(sp)
10108f28:	0013883a 	mov	r9,zero
10108f2c:	003e6006 	br	101088b0 <__alt_data_end+0xfffe88b0>
10108f30:	21003fcc 	andi	r4,r4,255
10108f34:	203fc026 	beq	r4,zero,10108e38 <__alt_data_end+0xfffe8e38>
10108f38:	d9c01d85 	stb	r7,118(sp)
10108f3c:	003fbe06 	br	10108e38 <__alt_data_end+0xfffe8e38>
10108f40:	da802217 	ldw	r10,136(sp)
10108f44:	54400017 	ldw	r17,0(r10)
10108f48:	50800104 	addi	r2,r10,4
10108f4c:	883e3b16 	blt	r17,zero,1010883c <__alt_data_end+0xfffe883c>
10108f50:	d8802215 	stw	r2,136(sp)
10108f54:	80c00007 	ldb	r3,0(r16)
10108f58:	003db406 	br	1010862c <__alt_data_end+0xfffe862c>
10108f5c:	01000044 	movi	r4,1
10108f60:	01c00ac4 	movi	r7,43
10108f64:	80c00007 	ldb	r3,0(r16)
10108f68:	003db006 	br	1010862c <__alt_data_end+0xfffe862c>
10108f6c:	80c00007 	ldb	r3,0(r16)
10108f70:	82800044 	addi	r10,r16,1
10108f74:	1b423c26 	beq	r3,r13,10109868 <___vfiprintf_internal_r+0x13b8>
10108f78:	18bff404 	addi	r2,r3,-48
10108f7c:	0013883a 	mov	r9,zero
10108f80:	30822b36 	bltu	r6,r2,10109830 <___vfiprintf_internal_r+0x1380>
10108f84:	50c00007 	ldb	r3,0(r10)
10108f88:	4a4002a4 	muli	r9,r9,10
10108f8c:	54000044 	addi	r16,r10,1
10108f90:	8015883a 	mov	r10,r16
10108f94:	4893883a 	add	r9,r9,r2
10108f98:	18bff404 	addi	r2,r3,-48
10108f9c:	30bff92e 	bgeu	r6,r2,10108f84 <__alt_data_end+0xfffe8f84>
10108fa0:	483da30e 	bge	r9,zero,10108630 <__alt_data_end+0xfffe8630>
10108fa4:	027fffc4 	movi	r9,-1
10108fa8:	003da106 	br	10108630 <__alt_data_end+0xfffe8630>
10108fac:	a5001014 	ori	r20,r20,64
10108fb0:	80c00007 	ldb	r3,0(r16)
10108fb4:	003d9d06 	br	1010862c <__alt_data_end+0xfffe862c>
10108fb8:	da802217 	ldw	r10,136(sp)
10108fbc:	d8001d85 	stb	zero,118(sp)
10108fc0:	50c00204 	addi	r3,r10,8
10108fc4:	54800017 	ldw	r18,0(r10)
10108fc8:	54c00117 	ldw	r19,4(r10)
10108fcc:	4801ca16 	blt	r9,zero,101096f8 <___vfiprintf_internal_r+0x1248>
10108fd0:	013fdfc4 	movi	r4,-129
10108fd4:	94c4b03a 	or	r2,r18,r19
10108fd8:	d8c02215 	stw	r3,136(sp)
10108fdc:	a128703a 	and	r20,r20,r4
10108fe0:	0039883a 	mov	fp,zero
10108fe4:	103f341e 	bne	r2,zero,10108cb8 <__alt_data_end+0xfffe8cb8>
10108fe8:	483e2e26 	beq	r9,zero,101088a4 <__alt_data_end+0xfffe88a4>
10108fec:	0025883a 	mov	r18,zero
10108ff0:	94800c04 	addi	r18,r18,48
10108ff4:	dc8019c5 	stb	r18,103(sp)
10108ff8:	dcc02717 	ldw	r19,156(sp)
10108ffc:	dd4019c4 	addi	r21,sp,103
10109000:	003e2b06 	br	101088b0 <__alt_data_end+0xfffe88b0>
10109004:	21003fcc 	andi	r4,r4,255
10109008:	2002361e 	bne	r4,zero,101098e4 <___vfiprintf_internal_r+0x1434>
1010900c:	1801c126 	beq	r3,zero,10109714 <___vfiprintf_internal_r+0x1264>
10109010:	04800044 	movi	r18,1
10109014:	d8c01005 	stb	r3,64(sp)
10109018:	d8001d85 	stb	zero,118(sp)
1010901c:	9027883a 	mov	r19,r18
10109020:	dd401004 	addi	r21,sp,64
10109024:	003f1106 	br	10108c6c <__alt_data_end+0xfffe8c6c>
10109028:	d9402117 	ldw	r5,132(sp)
1010902c:	d9002017 	ldw	r4,128(sp)
10109030:	d9801a04 	addi	r6,sp,104
10109034:	d9c02b15 	stw	r7,172(sp)
10109038:	dbc02a15 	stw	r15,168(sp)
1010903c:	010839c0 	call	1010839c <__sprint_r.part.0>
10109040:	d9c02b17 	ldw	r7,172(sp)
10109044:	dbc02a17 	ldw	r15,168(sp)
10109048:	10006d1e 	bne	r2,zero,10109200 <___vfiprintf_internal_r+0xd50>
1010904c:	d9801b17 	ldw	r6,108(sp)
10109050:	d8801c17 	ldw	r2,112(sp)
10109054:	d811883a 	mov	r8,sp
10109058:	31400044 	addi	r5,r6,1
1010905c:	003e3306 	br	1010892c <__alt_data_end+0xfffe892c>
10109060:	d9401b17 	ldw	r5,108(sp)
10109064:	d8801c17 	ldw	r2,112(sp)
10109068:	29000044 	addi	r4,r5,1
1010906c:	d8c01d87 	ldb	r3,118(sp)
10109070:	183e4d26 	beq	r3,zero,101089a8 <__alt_data_end+0xfffe89a8>
10109074:	00c00044 	movi	r3,1
10109078:	d9401d84 	addi	r5,sp,118
1010907c:	10c5883a 	add	r2,r2,r3
10109080:	41400015 	stw	r5,0(r8)
10109084:	40c00115 	stw	r3,4(r8)
10109088:	d8801c15 	stw	r2,112(sp)
1010908c:	d9001b15 	stw	r4,108(sp)
10109090:	014001c4 	movi	r5,7
10109094:	2900a90e 	bge	r5,r4,1010933c <___vfiprintf_internal_r+0xe8c>
10109098:	1000da1e 	bne	r2,zero,10109404 <___vfiprintf_internal_r+0xf54>
1010909c:	7000ab1e 	bne	r14,zero,1010934c <___vfiprintf_internal_r+0xe9c>
101090a0:	000b883a 	mov	r5,zero
101090a4:	1809883a 	mov	r4,r3
101090a8:	d811883a 	mov	r8,sp
101090ac:	00c02004 	movi	r3,128
101090b0:	e0fe4d26 	beq	fp,r3,101089e8 <__alt_data_end+0xfffe89e8>
101090b4:	4cf9c83a 	sub	fp,r9,r19
101090b8:	073e7b0e 	bge	zero,fp,10108aa8 <__alt_data_end+0xfffe8aa8>
101090bc:	01c00404 	movi	r7,16
101090c0:	3f01900e 	bge	r7,fp,10109704 <___vfiprintf_internal_r+0x1254>
101090c4:	00c40474 	movhi	r3,4113
101090c8:	18c34104 	addi	r3,r3,3332
101090cc:	d8c02415 	stw	r3,144(sp)
101090d0:	034001c4 	movi	r13,7
101090d4:	00000506 	br	101090ec <___vfiprintf_internal_r+0xc3c>
101090d8:	29000084 	addi	r4,r5,2
101090dc:	42000204 	addi	r8,r8,8
101090e0:	180b883a 	mov	r5,r3
101090e4:	e73ffc04 	addi	fp,fp,-16
101090e8:	3f000d0e 	bge	r7,fp,10109120 <___vfiprintf_internal_r+0xc70>
101090ec:	10800404 	addi	r2,r2,16
101090f0:	28c00044 	addi	r3,r5,1
101090f4:	45c00015 	stw	r23,0(r8)
101090f8:	41c00115 	stw	r7,4(r8)
101090fc:	d8801c15 	stw	r2,112(sp)
10109100:	d8c01b15 	stw	r3,108(sp)
10109104:	68fff40e 	bge	r13,r3,101090d8 <__alt_data_end+0xfffe90d8>
10109108:	1000101e 	bne	r2,zero,1010914c <___vfiprintf_internal_r+0xc9c>
1010910c:	e73ffc04 	addi	fp,fp,-16
10109110:	01000044 	movi	r4,1
10109114:	000b883a 	mov	r5,zero
10109118:	d811883a 	mov	r8,sp
1010911c:	3f3ff316 	blt	r7,fp,101090ec <__alt_data_end+0xfffe90ec>
10109120:	da802417 	ldw	r10,144(sp)
10109124:	1705883a 	add	r2,r2,fp
10109128:	47000115 	stw	fp,4(r8)
1010912c:	42800015 	stw	r10,0(r8)
10109130:	d8801c15 	stw	r2,112(sp)
10109134:	d9001b15 	stw	r4,108(sp)
10109138:	00c001c4 	movi	r3,7
1010913c:	19003616 	blt	r3,r4,10109218 <___vfiprintf_internal_r+0xd68>
10109140:	42000204 	addi	r8,r8,8
10109144:	21000044 	addi	r4,r4,1
10109148:	003e5706 	br	10108aa8 <__alt_data_end+0xfffe8aa8>
1010914c:	d9402117 	ldw	r5,132(sp)
10109150:	d9002017 	ldw	r4,128(sp)
10109154:	d9801a04 	addi	r6,sp,104
10109158:	d9c02b15 	stw	r7,172(sp)
1010915c:	db402a15 	stw	r13,168(sp)
10109160:	010839c0 	call	1010839c <__sprint_r.part.0>
10109164:	d9c02b17 	ldw	r7,172(sp)
10109168:	db402a17 	ldw	r13,168(sp)
1010916c:	1000241e 	bne	r2,zero,10109200 <___vfiprintf_internal_r+0xd50>
10109170:	d9401b17 	ldw	r5,108(sp)
10109174:	d8801c17 	ldw	r2,112(sp)
10109178:	d811883a 	mov	r8,sp
1010917c:	29000044 	addi	r4,r5,1
10109180:	003fd806 	br	101090e4 <__alt_data_end+0xfffe90e4>
10109184:	d9401b17 	ldw	r5,108(sp)
10109188:	00c40474 	movhi	r3,4113
1010918c:	18c34504 	addi	r3,r3,3348
10109190:	d8c02415 	stw	r3,144(sp)
10109194:	29400044 	addi	r5,r5,1
10109198:	d8c02417 	ldw	r3,144(sp)
1010919c:	14c5883a 	add	r2,r2,r19
101091a0:	44c00115 	stw	r19,4(r8)
101091a4:	40c00015 	stw	r3,0(r8)
101091a8:	d8801c15 	stw	r2,112(sp)
101091ac:	d9401b15 	stw	r5,108(sp)
101091b0:	00c001c4 	movi	r3,7
101091b4:	1940070e 	bge	r3,r5,101091d4 <___vfiprintf_internal_r+0xd24>
101091b8:	103e4826 	beq	r2,zero,10108adc <__alt_data_end+0xfffe8adc>
101091bc:	d9402117 	ldw	r5,132(sp)
101091c0:	d9002017 	ldw	r4,128(sp)
101091c4:	d9801a04 	addi	r6,sp,104
101091c8:	010839c0 	call	1010839c <__sprint_r.part.0>
101091cc:	10000c1e 	bne	r2,zero,10109200 <___vfiprintf_internal_r+0xd50>
101091d0:	d8801c17 	ldw	r2,112(sp)
101091d4:	8c80010e 	bge	r17,r18,101091dc <___vfiprintf_internal_r+0xd2c>
101091d8:	9023883a 	mov	r17,r18
101091dc:	da802317 	ldw	r10,140(sp)
101091e0:	5455883a 	add	r10,r10,r17
101091e4:	da802315 	stw	r10,140(sp)
101091e8:	103e4126 	beq	r2,zero,10108af0 <__alt_data_end+0xfffe8af0>
101091ec:	d9402117 	ldw	r5,132(sp)
101091f0:	d9002017 	ldw	r4,128(sp)
101091f4:	d9801a04 	addi	r6,sp,104
101091f8:	010839c0 	call	1010839c <__sprint_r.part.0>
101091fc:	103e3c26 	beq	r2,zero,10108af0 <__alt_data_end+0xfffe8af0>
10109200:	dd002117 	ldw	r20,132(sp)
10109204:	a080030b 	ldhu	r2,12(r20)
10109208:	1080100c 	andi	r2,r2,64
1010920c:	1001231e 	bne	r2,zero,1010969c <___vfiprintf_internal_r+0x11ec>
10109210:	d8802317 	ldw	r2,140(sp)
10109214:	003d7b06 	br	10108804 <__alt_data_end+0xfffe8804>
10109218:	1000991e 	bne	r2,zero,10109480 <___vfiprintf_internal_r+0xfd0>
1010921c:	00c00044 	movi	r3,1
10109220:	9805883a 	mov	r2,r19
10109224:	dd400015 	stw	r21,0(sp)
10109228:	dcc00115 	stw	r19,4(sp)
1010922c:	dcc01c15 	stw	r19,112(sp)
10109230:	d8c01b15 	stw	r3,108(sp)
10109234:	d811883a 	mov	r8,sp
10109238:	42000204 	addi	r8,r8,8
1010923c:	a2c0010c 	andi	r11,r20,4
10109240:	583fe426 	beq	r11,zero,101091d4 <__alt_data_end+0xfffe91d4>
10109244:	8ca7c83a 	sub	r19,r17,r18
10109248:	04ffe20e 	bge	zero,r19,101091d4 <__alt_data_end+0xfffe91d4>
1010924c:	01c00404 	movi	r7,16
10109250:	3cffcc0e 	bge	r7,r19,10109184 <__alt_data_end+0xfffe9184>
10109254:	02840474 	movhi	r10,4113
10109258:	52834504 	addi	r10,r10,3348
1010925c:	d9001b17 	ldw	r4,108(sp)
10109260:	da802415 	stw	r10,144(sp)
10109264:	382b883a 	mov	r21,r7
10109268:	050001c4 	movi	r20,7
1010926c:	df002017 	ldw	fp,128(sp)
10109270:	00000506 	br	10109288 <___vfiprintf_internal_r+0xdd8>
10109274:	21400084 	addi	r5,r4,2
10109278:	42000204 	addi	r8,r8,8
1010927c:	1809883a 	mov	r4,r3
10109280:	9cfffc04 	addi	r19,r19,-16
10109284:	acffc40e 	bge	r21,r19,10109198 <__alt_data_end+0xfffe9198>
10109288:	10800404 	addi	r2,r2,16
1010928c:	20c00044 	addi	r3,r4,1
10109290:	45800015 	stw	r22,0(r8)
10109294:	45400115 	stw	r21,4(r8)
10109298:	d8801c15 	stw	r2,112(sp)
1010929c:	d8c01b15 	stw	r3,108(sp)
101092a0:	a0fff40e 	bge	r20,r3,10109274 <__alt_data_end+0xfffe9274>
101092a4:	1000041e 	bne	r2,zero,101092b8 <___vfiprintf_internal_r+0xe08>
101092a8:	01400044 	movi	r5,1
101092ac:	0009883a 	mov	r4,zero
101092b0:	d811883a 	mov	r8,sp
101092b4:	003ff206 	br	10109280 <__alt_data_end+0xfffe9280>
101092b8:	d9402117 	ldw	r5,132(sp)
101092bc:	d9801a04 	addi	r6,sp,104
101092c0:	e009883a 	mov	r4,fp
101092c4:	010839c0 	call	1010839c <__sprint_r.part.0>
101092c8:	103fcd1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
101092cc:	d9001b17 	ldw	r4,108(sp)
101092d0:	d8801c17 	ldw	r2,112(sp)
101092d4:	d811883a 	mov	r8,sp
101092d8:	21400044 	addi	r5,r4,1
101092dc:	003fe806 	br	10109280 <__alt_data_end+0xfffe9280>
101092e0:	d9402117 	ldw	r5,132(sp)
101092e4:	d9002017 	ldw	r4,128(sp)
101092e8:	d9801a04 	addi	r6,sp,104
101092ec:	d9c02b15 	stw	r7,172(sp)
101092f0:	db402a15 	stw	r13,168(sp)
101092f4:	010839c0 	call	1010839c <__sprint_r.part.0>
101092f8:	d9c02b17 	ldw	r7,172(sp)
101092fc:	db402a17 	ldw	r13,168(sp)
10109300:	103fbf1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109304:	d9401b17 	ldw	r5,108(sp)
10109308:	d8801c17 	ldw	r2,112(sp)
1010930c:	d811883a 	mov	r8,sp
10109310:	29800044 	addi	r6,r5,1
10109314:	003dc406 	br	10108a28 <__alt_data_end+0xfffe8a28>
10109318:	1000d21e 	bne	r2,zero,10109664 <___vfiprintf_internal_r+0x11b4>
1010931c:	d8c01d87 	ldb	r3,118(sp)
10109320:	18009526 	beq	r3,zero,10109578 <___vfiprintf_internal_r+0x10c8>
10109324:	00800044 	movi	r2,1
10109328:	d8c01d84 	addi	r3,sp,118
1010932c:	1009883a 	mov	r4,r2
10109330:	d8c00015 	stw	r3,0(sp)
10109334:	d8800115 	stw	r2,4(sp)
10109338:	d811883a 	mov	r8,sp
1010933c:	200b883a 	mov	r5,r4
10109340:	42000204 	addi	r8,r8,8
10109344:	21000044 	addi	r4,r4,1
10109348:	003d9706 	br	101089a8 <__alt_data_end+0xfffe89a8>
1010934c:	d9001d04 	addi	r4,sp,116
10109350:	00800084 	movi	r2,2
10109354:	d9000015 	stw	r4,0(sp)
10109358:	d8800115 	stw	r2,4(sp)
1010935c:	1809883a 	mov	r4,r3
10109360:	d811883a 	mov	r8,sp
10109364:	200b883a 	mov	r5,r4
10109368:	42000204 	addi	r8,r8,8
1010936c:	21000044 	addi	r4,r4,1
10109370:	003f4e06 	br	101090ac <__alt_data_end+0xfffe90ac>
10109374:	d8001d85 	stb	zero,118(sp)
10109378:	48005016 	blt	r9,zero,101094bc <___vfiprintf_internal_r+0x100c>
1010937c:	00ffdfc4 	movi	r3,-129
10109380:	94c4b03a 	or	r2,r18,r19
10109384:	a0e8703a 	and	r20,r20,r3
10109388:	103d4426 	beq	r2,zero,1010889c <__alt_data_end+0xfffe889c>
1010938c:	0039883a 	mov	fp,zero
10109390:	d9002617 	ldw	r4,152(sp)
10109394:	dd401a04 	addi	r21,sp,104
10109398:	908003cc 	andi	r2,r18,15
1010939c:	9806973a 	slli	r3,r19,28
101093a0:	2085883a 	add	r2,r4,r2
101093a4:	9024d13a 	srli	r18,r18,4
101093a8:	10800003 	ldbu	r2,0(r2)
101093ac:	9826d13a 	srli	r19,r19,4
101093b0:	ad7fffc4 	addi	r21,r21,-1
101093b4:	1ca4b03a 	or	r18,r3,r18
101093b8:	a8800005 	stb	r2,0(r21)
101093bc:	94c4b03a 	or	r2,r18,r19
101093c0:	103ff51e 	bne	r2,zero,10109398 <__alt_data_end+0xfffe9398>
101093c4:	003e5906 	br	10108d2c <__alt_data_end+0xfffe8d2c>
101093c8:	d9402117 	ldw	r5,132(sp)
101093cc:	d9002017 	ldw	r4,128(sp)
101093d0:	d9801a04 	addi	r6,sp,104
101093d4:	010839c0 	call	1010839c <__sprint_r.part.0>
101093d8:	103f891e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
101093dc:	d8801c17 	ldw	r2,112(sp)
101093e0:	d811883a 	mov	r8,sp
101093e4:	003f9506 	br	1010923c <__alt_data_end+0xfffe923c>
101093e8:	d9402117 	ldw	r5,132(sp)
101093ec:	d9002017 	ldw	r4,128(sp)
101093f0:	d9801a04 	addi	r6,sp,104
101093f4:	010839c0 	call	1010839c <__sprint_r.part.0>
101093f8:	103f811e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
101093fc:	d811883a 	mov	r8,sp
10109400:	003ced06 	br	101087b8 <__alt_data_end+0xfffe87b8>
10109404:	d9402117 	ldw	r5,132(sp)
10109408:	d9002017 	ldw	r4,128(sp)
1010940c:	d9801a04 	addi	r6,sp,104
10109410:	da402c15 	stw	r9,176(sp)
10109414:	db802a15 	stw	r14,168(sp)
10109418:	010839c0 	call	1010839c <__sprint_r.part.0>
1010941c:	da402c17 	ldw	r9,176(sp)
10109420:	db802a17 	ldw	r14,168(sp)
10109424:	103f761e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109428:	d9401b17 	ldw	r5,108(sp)
1010942c:	d8801c17 	ldw	r2,112(sp)
10109430:	d811883a 	mov	r8,sp
10109434:	29000044 	addi	r4,r5,1
10109438:	003d5b06 	br	101089a8 <__alt_data_end+0xfffe89a8>
1010943c:	d9402117 	ldw	r5,132(sp)
10109440:	d9002017 	ldw	r4,128(sp)
10109444:	d9801a04 	addi	r6,sp,104
10109448:	da402c15 	stw	r9,176(sp)
1010944c:	010839c0 	call	1010839c <__sprint_r.part.0>
10109450:	da402c17 	ldw	r9,176(sp)
10109454:	103f6a1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109458:	d9401b17 	ldw	r5,108(sp)
1010945c:	d8801c17 	ldw	r2,112(sp)
10109460:	d811883a 	mov	r8,sp
10109464:	29000044 	addi	r4,r5,1
10109468:	003f1006 	br	101090ac <__alt_data_end+0xfffe90ac>
1010946c:	1000c31e 	bne	r2,zero,1010977c <___vfiprintf_internal_r+0x12cc>
10109470:	01000044 	movi	r4,1
10109474:	000b883a 	mov	r5,zero
10109478:	d811883a 	mov	r8,sp
1010947c:	003f0d06 	br	101090b4 <__alt_data_end+0xfffe90b4>
10109480:	d9402117 	ldw	r5,132(sp)
10109484:	d9002017 	ldw	r4,128(sp)
10109488:	d9801a04 	addi	r6,sp,104
1010948c:	010839c0 	call	1010839c <__sprint_r.part.0>
10109490:	103f5b1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109494:	d9001b17 	ldw	r4,108(sp)
10109498:	d8801c17 	ldw	r2,112(sp)
1010949c:	d811883a 	mov	r8,sp
101094a0:	21000044 	addi	r4,r4,1
101094a4:	003d8006 	br	10108aa8 <__alt_data_end+0xfffe8aa8>
101094a8:	01040474 	movhi	r4,4113
101094ac:	2102e104 	addi	r4,r4,2948
101094b0:	d9002615 	stw	r4,152(sp)
101094b4:	d8c02215 	stw	r3,136(sp)
101094b8:	1029883a 	mov	r20,r2
101094bc:	94c4b03a 	or	r2,r18,r19
101094c0:	103fb21e 	bne	r2,zero,1010938c <__alt_data_end+0xfffe938c>
101094c4:	0039883a 	mov	fp,zero
101094c8:	00800084 	movi	r2,2
101094cc:	003e6b06 	br	10108e7c <__alt_data_end+0xfffe8e7c>
101094d0:	da802217 	ldw	r10,136(sp)
101094d4:	d8001d85 	stb	zero,118(sp)
101094d8:	0027883a 	mov	r19,zero
101094dc:	50800104 	addi	r2,r10,4
101094e0:	54800017 	ldw	r18,0(r10)
101094e4:	483e6016 	blt	r9,zero,10108e68 <__alt_data_end+0xfffe8e68>
101094e8:	00ffdfc4 	movi	r3,-129
101094ec:	d8802215 	stw	r2,136(sp)
101094f0:	a0e8703a 	and	r20,r20,r3
101094f4:	0039883a 	mov	fp,zero
101094f8:	903ebb26 	beq	r18,zero,10108fe8 <__alt_data_end+0xfffe8fe8>
101094fc:	00800244 	movi	r2,9
10109500:	14bdee36 	bltu	r2,r18,10108cbc <__alt_data_end+0xfffe8cbc>
10109504:	003eba06 	br	10108ff0 <__alt_data_end+0xfffe8ff0>
10109508:	00800c04 	movi	r2,48
1010950c:	d8c01d45 	stb	r3,117(sp)
10109510:	d8801d05 	stb	r2,116(sp)
10109514:	d8001d85 	stb	zero,118(sp)
10109518:	a0c00094 	ori	r3,r20,2
1010951c:	4800a916 	blt	r9,zero,101097c4 <___vfiprintf_internal_r+0x1314>
10109520:	00bfdfc4 	movi	r2,-129
10109524:	a096703a 	and	r11,r20,r2
10109528:	5d000094 	ori	r20,r11,2
1010952c:	0039883a 	mov	fp,zero
10109530:	003f9706 	br	10109390 <__alt_data_end+0xfffe9390>
10109534:	8025883a 	mov	r18,r16
10109538:	003c2e06 	br	101085f4 <__alt_data_end+0xfffe85f4>
1010953c:	00840474 	movhi	r2,4113
10109540:	1082e104 	addi	r2,r2,2948
10109544:	0039883a 	mov	fp,zero
10109548:	d8802615 	stw	r2,152(sp)
1010954c:	003f9006 	br	10109390 <__alt_data_end+0xfffe9390>
10109550:	04a5c83a 	sub	r18,zero,r18
10109554:	07000b44 	movi	fp,45
10109558:	9004c03a 	cmpne	r2,r18,zero
1010955c:	04e7c83a 	sub	r19,zero,r19
10109560:	df001d85 	stb	fp,118(sp)
10109564:	98a7c83a 	sub	r19,r19,r2
10109568:	48009f16 	blt	r9,zero,101097e8 <___vfiprintf_internal_r+0x1338>
1010956c:	00bfdfc4 	movi	r2,-129
10109570:	a0a8703a 	and	r20,r20,r2
10109574:	003dd006 	br	10108cb8 <__alt_data_end+0xfffe8cb8>
10109578:	70004c26 	beq	r14,zero,101096ac <___vfiprintf_internal_r+0x11fc>
1010957c:	00800084 	movi	r2,2
10109580:	d8c01d04 	addi	r3,sp,116
10109584:	d8c00015 	stw	r3,0(sp)
10109588:	d8800115 	stw	r2,4(sp)
1010958c:	01000044 	movi	r4,1
10109590:	d811883a 	mov	r8,sp
10109594:	003f7306 	br	10109364 <__alt_data_end+0xfffe9364>
10109598:	a080100c 	andi	r2,r20,64
1010959c:	da802217 	ldw	r10,136(sp)
101095a0:	103e0626 	beq	r2,zero,10108dbc <__alt_data_end+0xfffe8dbc>
101095a4:	5480000f 	ldh	r18,0(r10)
101095a8:	52800104 	addi	r10,r10,4
101095ac:	da802215 	stw	r10,136(sp)
101095b0:	9027d7fa 	srai	r19,r18,31
101095b4:	9805883a 	mov	r2,r19
101095b8:	003db806 	br	10108c9c <__alt_data_end+0xfffe8c9c>
101095bc:	a080040c 	andi	r2,r20,16
101095c0:	1000091e 	bne	r2,zero,101095e8 <___vfiprintf_internal_r+0x1138>
101095c4:	a2c0100c 	andi	r11,r20,64
101095c8:	58000726 	beq	r11,zero,101095e8 <___vfiprintf_internal_r+0x1138>
101095cc:	da802217 	ldw	r10,136(sp)
101095d0:	50800017 	ldw	r2,0(r10)
101095d4:	52800104 	addi	r10,r10,4
101095d8:	da802215 	stw	r10,136(sp)
101095dc:	da802317 	ldw	r10,140(sp)
101095e0:	1280000d 	sth	r10,0(r2)
101095e4:	003be706 	br	10108584 <__alt_data_end+0xfffe8584>
101095e8:	da802217 	ldw	r10,136(sp)
101095ec:	50800017 	ldw	r2,0(r10)
101095f0:	52800104 	addi	r10,r10,4
101095f4:	da802215 	stw	r10,136(sp)
101095f8:	da802317 	ldw	r10,140(sp)
101095fc:	12800015 	stw	r10,0(r2)
10109600:	003be006 	br	10108584 <__alt_data_end+0xfffe8584>
10109604:	a080100c 	andi	r2,r20,64
10109608:	da802217 	ldw	r10,136(sp)
1010960c:	10003026 	beq	r2,zero,101096d0 <___vfiprintf_internal_r+0x1220>
10109610:	5480000b 	ldhu	r18,0(r10)
10109614:	52800104 	addi	r10,r10,4
10109618:	0027883a 	mov	r19,zero
1010961c:	da802215 	stw	r10,136(sp)
10109620:	003d8006 	br	10108c24 <__alt_data_end+0xfffe8c24>
10109624:	80c00007 	ldb	r3,0(r16)
10109628:	003c0006 	br	1010862c <__alt_data_end+0xfffe862c>
1010962c:	a080100c 	andi	r2,r20,64
10109630:	d8001d85 	stb	zero,118(sp)
10109634:	da802217 	ldw	r10,136(sp)
10109638:	1000201e 	bne	r2,zero,101096bc <___vfiprintf_internal_r+0x120c>
1010963c:	50800104 	addi	r2,r10,4
10109640:	54800017 	ldw	r18,0(r10)
10109644:	0027883a 	mov	r19,zero
10109648:	483def0e 	bge	r9,zero,10108e08 <__alt_data_end+0xfffe8e08>
1010964c:	94c6b03a 	or	r3,r18,r19
10109650:	d8802215 	stw	r2,136(sp)
10109654:	183d4e1e 	bne	r3,zero,10108b90 <__alt_data_end+0xfffe8b90>
10109658:	0039883a 	mov	fp,zero
1010965c:	0005883a 	mov	r2,zero
10109660:	003e0606 	br	10108e7c <__alt_data_end+0xfffe8e7c>
10109664:	d9402117 	ldw	r5,132(sp)
10109668:	d9002017 	ldw	r4,128(sp)
1010966c:	d9801a04 	addi	r6,sp,104
10109670:	da402c15 	stw	r9,176(sp)
10109674:	db802a15 	stw	r14,168(sp)
10109678:	010839c0 	call	1010839c <__sprint_r.part.0>
1010967c:	da402c17 	ldw	r9,176(sp)
10109680:	db802a17 	ldw	r14,168(sp)
10109684:	103ede1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109688:	d9401b17 	ldw	r5,108(sp)
1010968c:	d8801c17 	ldw	r2,112(sp)
10109690:	d811883a 	mov	r8,sp
10109694:	29000044 	addi	r4,r5,1
10109698:	003e7406 	br	1010906c <__alt_data_end+0xfffe906c>
1010969c:	00bfffc4 	movi	r2,-1
101096a0:	003c5806 	br	10108804 <__alt_data_end+0xfffe8804>
101096a4:	d811883a 	mov	r8,sp
101096a8:	003ee806 	br	1010924c <__alt_data_end+0xfffe924c>
101096ac:	000b883a 	mov	r5,zero
101096b0:	01000044 	movi	r4,1
101096b4:	d811883a 	mov	r8,sp
101096b8:	003e7c06 	br	101090ac <__alt_data_end+0xfffe90ac>
101096bc:	50800104 	addi	r2,r10,4
101096c0:	5480000b 	ldhu	r18,0(r10)
101096c4:	0027883a 	mov	r19,zero
101096c8:	483dcf0e 	bge	r9,zero,10108e08 <__alt_data_end+0xfffe8e08>
101096cc:	003fdf06 	br	1010964c <__alt_data_end+0xfffe964c>
101096d0:	54800017 	ldw	r18,0(r10)
101096d4:	52800104 	addi	r10,r10,4
101096d8:	0027883a 	mov	r19,zero
101096dc:	da802215 	stw	r10,136(sp)
101096e0:	003d5006 	br	10108c24 <__alt_data_end+0xfffe8c24>
101096e4:	50800104 	addi	r2,r10,4
101096e8:	5480000b 	ldhu	r18,0(r10)
101096ec:	0027883a 	mov	r19,zero
101096f0:	483f7d0e 	bge	r9,zero,101094e8 <__alt_data_end+0xfffe94e8>
101096f4:	003ddc06 	br	10108e68 <__alt_data_end+0xfffe8e68>
101096f8:	d8c02215 	stw	r3,136(sp)
101096fc:	0039883a 	mov	fp,zero
10109700:	003ddb06 	br	10108e70 <__alt_data_end+0xfffe8e70>
10109704:	02840474 	movhi	r10,4113
10109708:	52834104 	addi	r10,r10,3332
1010970c:	da802415 	stw	r10,144(sp)
10109710:	003e8306 	br	10109120 <__alt_data_end+0xfffe9120>
10109714:	d8801c17 	ldw	r2,112(sp)
10109718:	dd002117 	ldw	r20,132(sp)
1010971c:	103eb926 	beq	r2,zero,10109204 <__alt_data_end+0xfffe9204>
10109720:	d9002017 	ldw	r4,128(sp)
10109724:	d9801a04 	addi	r6,sp,104
10109728:	a00b883a 	mov	r5,r20
1010972c:	010839c0 	call	1010839c <__sprint_r.part.0>
10109730:	003eb406 	br	10109204 <__alt_data_end+0xfffe9204>
10109734:	80c00043 	ldbu	r3,1(r16)
10109738:	a5000814 	ori	r20,r20,32
1010973c:	84000044 	addi	r16,r16,1
10109740:	18c03fcc 	andi	r3,r3,255
10109744:	18c0201c 	xori	r3,r3,128
10109748:	18ffe004 	addi	r3,r3,-128
1010974c:	003bb706 	br	1010862c <__alt_data_end+0xfffe862c>
10109750:	a809883a 	mov	r4,r21
10109754:	d8c02a15 	stw	r3,168(sp)
10109758:	da002b15 	stw	r8,172(sp)
1010975c:	01083040 	call	10108304 <strlen>
10109760:	d8c02a17 	ldw	r3,168(sp)
10109764:	1027883a 	mov	r19,r2
10109768:	df001d83 	ldbu	fp,118(sp)
1010976c:	d8c02215 	stw	r3,136(sp)
10109770:	0013883a 	mov	r9,zero
10109774:	da002b17 	ldw	r8,172(sp)
10109778:	003c4d06 	br	101088b0 <__alt_data_end+0xfffe88b0>
1010977c:	d9402117 	ldw	r5,132(sp)
10109780:	d9002017 	ldw	r4,128(sp)
10109784:	d9801a04 	addi	r6,sp,104
10109788:	da402c15 	stw	r9,176(sp)
1010978c:	010839c0 	call	1010839c <__sprint_r.part.0>
10109790:	da402c17 	ldw	r9,176(sp)
10109794:	103e9a1e 	bne	r2,zero,10109200 <__alt_data_end+0xfffe9200>
10109798:	d9401b17 	ldw	r5,108(sp)
1010979c:	d8801c17 	ldw	r2,112(sp)
101097a0:	d811883a 	mov	r8,sp
101097a4:	29000044 	addi	r4,r5,1
101097a8:	003e4206 	br	101090b4 <__alt_data_end+0xfffe90b4>
101097ac:	d9401b17 	ldw	r5,108(sp)
101097b0:	01040474 	movhi	r4,4113
101097b4:	21034504 	addi	r4,r4,3348
101097b8:	d9002415 	stw	r4,144(sp)
101097bc:	29400044 	addi	r5,r5,1
101097c0:	003c6d06 	br	10108978 <__alt_data_end+0xfffe8978>
101097c4:	0039883a 	mov	fp,zero
101097c8:	00800084 	movi	r2,2
101097cc:	10803fcc 	andi	r2,r2,255
101097d0:	01000044 	movi	r4,1
101097d4:	11001e26 	beq	r2,r4,10109850 <___vfiprintf_internal_r+0x13a0>
101097d8:	01000084 	movi	r4,2
101097dc:	11001e1e 	bne	r2,r4,10109858 <___vfiprintf_internal_r+0x13a8>
101097e0:	1829883a 	mov	r20,r3
101097e4:	003eea06 	br	10109390 <__alt_data_end+0xfffe9390>
101097e8:	a007883a 	mov	r3,r20
101097ec:	00800044 	movi	r2,1
101097f0:	003ff606 	br	101097cc <__alt_data_end+0xfffe97cc>
101097f4:	00800184 	movi	r2,6
101097f8:	1240012e 	bgeu	r2,r9,10109800 <___vfiprintf_internal_r+0x1350>
101097fc:	1013883a 	mov	r9,r2
10109800:	4827883a 	mov	r19,r9
10109804:	4825883a 	mov	r18,r9
10109808:	48001516 	blt	r9,zero,10109860 <___vfiprintf_internal_r+0x13b0>
1010980c:	05440474 	movhi	r21,4113
10109810:	d8c02215 	stw	r3,136(sp)
10109814:	ad42e604 	addi	r21,r21,2968
10109818:	003d1406 	br	10108c6c <__alt_data_end+0xfffe8c6c>
1010981c:	02840474 	movhi	r10,4113
10109820:	52834104 	addi	r10,r10,3332
10109824:	da802415 	stw	r10,144(sp)
10109828:	200d883a 	mov	r6,r4
1010982c:	003c9106 	br	10108a74 <__alt_data_end+0xfffe8a74>
10109830:	5021883a 	mov	r16,r10
10109834:	0013883a 	mov	r9,zero
10109838:	003b7d06 	br	10108630 <__alt_data_end+0xfffe8630>
1010983c:	4827883a 	mov	r19,r9
10109840:	df001d83 	ldbu	fp,118(sp)
10109844:	d8c02215 	stw	r3,136(sp)
10109848:	0013883a 	mov	r9,zero
1010984c:	003c1806 	br	101088b0 <__alt_data_end+0xfffe88b0>
10109850:	1829883a 	mov	r20,r3
10109854:	003d1806 	br	10108cb8 <__alt_data_end+0xfffe8cb8>
10109858:	1829883a 	mov	r20,r3
1010985c:	003ccd06 	br	10108b94 <__alt_data_end+0xfffe8b94>
10109860:	0025883a 	mov	r18,zero
10109864:	003fe906 	br	1010980c <__alt_data_end+0xfffe980c>
10109868:	d8802217 	ldw	r2,136(sp)
1010986c:	80c00043 	ldbu	r3,1(r16)
10109870:	5021883a 	mov	r16,r10
10109874:	12400017 	ldw	r9,0(r2)
10109878:	10800104 	addi	r2,r2,4
1010987c:	d8802215 	stw	r2,136(sp)
10109880:	483faf0e 	bge	r9,zero,10109740 <__alt_data_end+0xfffe9740>
10109884:	18c03fcc 	andi	r3,r3,255
10109888:	18c0201c 	xori	r3,r3,128
1010988c:	027fffc4 	movi	r9,-1
10109890:	18ffe004 	addi	r3,r3,-128
10109894:	003b6506 	br	1010862c <__alt_data_end+0xfffe862c>
10109898:	d9c01d85 	stb	r7,118(sp)
1010989c:	003ca006 	br	10108b20 <__alt_data_end+0xfffe8b20>
101098a0:	d9c01d85 	stb	r7,118(sp)
101098a4:	003cad06 	br	10108b5c <__alt_data_end+0xfffe8b5c>
101098a8:	d9c01d85 	stb	r7,118(sp)
101098ac:	003d7d06 	br	10108ea4 <__alt_data_end+0xfffe8ea4>
101098b0:	d9c01d85 	stb	r7,118(sp)
101098b4:	003d5f06 	br	10108e34 <__alt_data_end+0xfffe8e34>
101098b8:	a080004c 	andi	r2,r20,1
101098bc:	0039883a 	mov	fp,zero
101098c0:	10000526 	beq	r2,zero,101098d8 <___vfiprintf_internal_r+0x1428>
101098c4:	00800c04 	movi	r2,48
101098c8:	d88019c5 	stb	r2,103(sp)
101098cc:	dcc02717 	ldw	r19,156(sp)
101098d0:	dd4019c4 	addi	r21,sp,103
101098d4:	003bf606 	br	101088b0 <__alt_data_end+0xfffe88b0>
101098d8:	0027883a 	mov	r19,zero
101098dc:	dd401a04 	addi	r21,sp,104
101098e0:	003bf306 	br	101088b0 <__alt_data_end+0xfffe88b0>
101098e4:	d9c01d85 	stb	r7,118(sp)
101098e8:	003dc806 	br	1010900c <__alt_data_end+0xfffe900c>
101098ec:	d9c01d85 	stb	r7,118(sp)
101098f0:	003d3a06 	br	10108ddc <__alt_data_end+0xfffe8ddc>
101098f4:	d9c01d85 	stb	r7,118(sp)
101098f8:	003d2a06 	br	10108da4 <__alt_data_end+0xfffe8da4>
101098fc:	d9c01d85 	stb	r7,118(sp)
10109900:	003cde06 	br	10108c7c <__alt_data_end+0xfffe8c7c>
10109904:	d9c01d85 	stb	r7,118(sp)
10109908:	003cbc06 	br	10108bfc <__alt_data_end+0xfffe8bfc>

1010990c <__vfiprintf_internal>:
1010990c:	00840474 	movhi	r2,4113
10109910:	108a4f04 	addi	r2,r2,10556
10109914:	300f883a 	mov	r7,r6
10109918:	280d883a 	mov	r6,r5
1010991c:	200b883a 	mov	r5,r4
10109920:	11000017 	ldw	r4,0(r2)
10109924:	01084b01 	jmpi	101084b0 <___vfiprintf_internal_r>

10109928 <__sbprintf>:
10109928:	2880030b 	ldhu	r2,12(r5)
1010992c:	2ac01917 	ldw	r11,100(r5)
10109930:	2a80038b 	ldhu	r10,14(r5)
10109934:	2a400717 	ldw	r9,28(r5)
10109938:	2a000917 	ldw	r8,36(r5)
1010993c:	defee204 	addi	sp,sp,-1144
10109940:	00c10004 	movi	r3,1024
10109944:	dc011a15 	stw	r16,1128(sp)
10109948:	10bfff4c 	andi	r2,r2,65533
1010994c:	2821883a 	mov	r16,r5
10109950:	d8cb883a 	add	r5,sp,r3
10109954:	dc811c15 	stw	r18,1136(sp)
10109958:	dc411b15 	stw	r17,1132(sp)
1010995c:	dfc11d15 	stw	ra,1140(sp)
10109960:	2025883a 	mov	r18,r4
10109964:	d881030d 	sth	r2,1036(sp)
10109968:	dac11915 	stw	r11,1124(sp)
1010996c:	da81038d 	sth	r10,1038(sp)
10109970:	da410715 	stw	r9,1052(sp)
10109974:	da010915 	stw	r8,1060(sp)
10109978:	dec10015 	stw	sp,1024(sp)
1010997c:	dec10415 	stw	sp,1040(sp)
10109980:	d8c10215 	stw	r3,1032(sp)
10109984:	d8c10515 	stw	r3,1044(sp)
10109988:	d8010615 	stw	zero,1048(sp)
1010998c:	01084b00 	call	101084b0 <___vfiprintf_internal_r>
10109990:	1023883a 	mov	r17,r2
10109994:	10000416 	blt	r2,zero,101099a8 <__sbprintf+0x80>
10109998:	d9410004 	addi	r5,sp,1024
1010999c:	9009883a 	mov	r4,r18
101099a0:	01063080 	call	10106308 <_fflush_r>
101099a4:	10000d1e 	bne	r2,zero,101099dc <__sbprintf+0xb4>
101099a8:	d881030b 	ldhu	r2,1036(sp)
101099ac:	1080100c 	andi	r2,r2,64
101099b0:	10000326 	beq	r2,zero,101099c0 <__sbprintf+0x98>
101099b4:	8080030b 	ldhu	r2,12(r16)
101099b8:	10801014 	ori	r2,r2,64
101099bc:	8080030d 	sth	r2,12(r16)
101099c0:	8805883a 	mov	r2,r17
101099c4:	dfc11d17 	ldw	ra,1140(sp)
101099c8:	dc811c17 	ldw	r18,1136(sp)
101099cc:	dc411b17 	ldw	r17,1132(sp)
101099d0:	dc011a17 	ldw	r16,1128(sp)
101099d4:	dec11e04 	addi	sp,sp,1144
101099d8:	f800283a 	ret
101099dc:	047fffc4 	movi	r17,-1
101099e0:	003ff106 	br	101099a8 <__alt_data_end+0xfffe99a8>

101099e4 <_calloc_r>:
101099e4:	298b383a 	mul	r5,r5,r6
101099e8:	defffe04 	addi	sp,sp,-8
101099ec:	dfc00115 	stw	ra,4(sp)
101099f0:	dc000015 	stw	r16,0(sp)
101099f4:	010160c0 	call	1010160c <_malloc_r>
101099f8:	10002926 	beq	r2,zero,10109aa0 <_calloc_r+0xbc>
101099fc:	11bfff17 	ldw	r6,-4(r2)
10109a00:	1021883a 	mov	r16,r2
10109a04:	00bfff04 	movi	r2,-4
10109a08:	308c703a 	and	r6,r6,r2
10109a0c:	00c00904 	movi	r3,36
10109a10:	308d883a 	add	r6,r6,r2
10109a14:	19801636 	bltu	r3,r6,10109a70 <_calloc_r+0x8c>
10109a18:	008004c4 	movi	r2,19
10109a1c:	11800b2e 	bgeu	r2,r6,10109a4c <_calloc_r+0x68>
10109a20:	80000015 	stw	zero,0(r16)
10109a24:	80000115 	stw	zero,4(r16)
10109a28:	008006c4 	movi	r2,27
10109a2c:	11801a2e 	bgeu	r2,r6,10109a98 <_calloc_r+0xb4>
10109a30:	80000215 	stw	zero,8(r16)
10109a34:	80000315 	stw	zero,12(r16)
10109a38:	30c0151e 	bne	r6,r3,10109a90 <_calloc_r+0xac>
10109a3c:	80000415 	stw	zero,16(r16)
10109a40:	80800604 	addi	r2,r16,24
10109a44:	80000515 	stw	zero,20(r16)
10109a48:	00000106 	br	10109a50 <_calloc_r+0x6c>
10109a4c:	8005883a 	mov	r2,r16
10109a50:	10000015 	stw	zero,0(r2)
10109a54:	10000115 	stw	zero,4(r2)
10109a58:	10000215 	stw	zero,8(r2)
10109a5c:	8005883a 	mov	r2,r16
10109a60:	dfc00117 	ldw	ra,4(sp)
10109a64:	dc000017 	ldw	r16,0(sp)
10109a68:	dec00204 	addi	sp,sp,8
10109a6c:	f800283a 	ret
10109a70:	000b883a 	mov	r5,zero
10109a74:	8009883a 	mov	r4,r16
10109a78:	0101e180 	call	10101e18 <memset>
10109a7c:	8005883a 	mov	r2,r16
10109a80:	dfc00117 	ldw	ra,4(sp)
10109a84:	dc000017 	ldw	r16,0(sp)
10109a88:	dec00204 	addi	sp,sp,8
10109a8c:	f800283a 	ret
10109a90:	80800404 	addi	r2,r16,16
10109a94:	003fee06 	br	10109a50 <__alt_data_end+0xfffe9a50>
10109a98:	80800204 	addi	r2,r16,8
10109a9c:	003fec06 	br	10109a50 <__alt_data_end+0xfffe9a50>
10109aa0:	0005883a 	mov	r2,zero
10109aa4:	003fee06 	br	10109a60 <__alt_data_end+0xfffe9a60>

10109aa8 <_fclose_r>:
10109aa8:	28003926 	beq	r5,zero,10109b90 <_fclose_r+0xe8>
10109aac:	defffc04 	addi	sp,sp,-16
10109ab0:	dc400115 	stw	r17,4(sp)
10109ab4:	dc000015 	stw	r16,0(sp)
10109ab8:	dfc00315 	stw	ra,12(sp)
10109abc:	dc800215 	stw	r18,8(sp)
10109ac0:	2023883a 	mov	r17,r4
10109ac4:	2821883a 	mov	r16,r5
10109ac8:	20000226 	beq	r4,zero,10109ad4 <_fclose_r+0x2c>
10109acc:	20800e17 	ldw	r2,56(r4)
10109ad0:	10002726 	beq	r2,zero,10109b70 <_fclose_r+0xc8>
10109ad4:	8080030f 	ldh	r2,12(r16)
10109ad8:	1000071e 	bne	r2,zero,10109af8 <_fclose_r+0x50>
10109adc:	0005883a 	mov	r2,zero
10109ae0:	dfc00317 	ldw	ra,12(sp)
10109ae4:	dc800217 	ldw	r18,8(sp)
10109ae8:	dc400117 	ldw	r17,4(sp)
10109aec:	dc000017 	ldw	r16,0(sp)
10109af0:	dec00404 	addi	sp,sp,16
10109af4:	f800283a 	ret
10109af8:	800b883a 	mov	r5,r16
10109afc:	8809883a 	mov	r4,r17
10109b00:	01060ec0 	call	101060ec <__sflush_r>
10109b04:	1025883a 	mov	r18,r2
10109b08:	80800b17 	ldw	r2,44(r16)
10109b0c:	10000426 	beq	r2,zero,10109b20 <_fclose_r+0x78>
10109b10:	81400717 	ldw	r5,28(r16)
10109b14:	8809883a 	mov	r4,r17
10109b18:	103ee83a 	callr	r2
10109b1c:	10001616 	blt	r2,zero,10109b78 <_fclose_r+0xd0>
10109b20:	8080030b 	ldhu	r2,12(r16)
10109b24:	1080200c 	andi	r2,r2,128
10109b28:	1000151e 	bne	r2,zero,10109b80 <_fclose_r+0xd8>
10109b2c:	81400c17 	ldw	r5,48(r16)
10109b30:	28000526 	beq	r5,zero,10109b48 <_fclose_r+0xa0>
10109b34:	80801004 	addi	r2,r16,64
10109b38:	28800226 	beq	r5,r2,10109b44 <_fclose_r+0x9c>
10109b3c:	8809883a 	mov	r4,r17
10109b40:	01069040 	call	10106904 <_free_r>
10109b44:	80000c15 	stw	zero,48(r16)
10109b48:	81401117 	ldw	r5,68(r16)
10109b4c:	28000326 	beq	r5,zero,10109b5c <_fclose_r+0xb4>
10109b50:	8809883a 	mov	r4,r17
10109b54:	01069040 	call	10106904 <_free_r>
10109b58:	80001115 	stw	zero,68(r16)
10109b5c:	01066f40 	call	101066f4 <__sfp_lock_acquire>
10109b60:	8000030d 	sth	zero,12(r16)
10109b64:	01066f80 	call	101066f8 <__sfp_lock_release>
10109b68:	9005883a 	mov	r2,r18
10109b6c:	003fdc06 	br	10109ae0 <__alt_data_end+0xfffe9ae0>
10109b70:	01066e40 	call	101066e4 <__sinit>
10109b74:	003fd706 	br	10109ad4 <__alt_data_end+0xfffe9ad4>
10109b78:	04bfffc4 	movi	r18,-1
10109b7c:	003fe806 	br	10109b20 <__alt_data_end+0xfffe9b20>
10109b80:	81400417 	ldw	r5,16(r16)
10109b84:	8809883a 	mov	r4,r17
10109b88:	01069040 	call	10106904 <_free_r>
10109b8c:	003fe706 	br	10109b2c <__alt_data_end+0xfffe9b2c>
10109b90:	0005883a 	mov	r2,zero
10109b94:	f800283a 	ret

10109b98 <fclose>:
10109b98:	00840474 	movhi	r2,4113
10109b9c:	108a4f04 	addi	r2,r2,10556
10109ba0:	200b883a 	mov	r5,r4
10109ba4:	11000017 	ldw	r4,0(r2)
10109ba8:	0109aa81 	jmpi	10109aa8 <_fclose_r>

10109bac <__fputwc>:
10109bac:	defff804 	addi	sp,sp,-32
10109bb0:	dcc00415 	stw	r19,16(sp)
10109bb4:	dc800315 	stw	r18,12(sp)
10109bb8:	dc000115 	stw	r16,4(sp)
10109bbc:	dfc00715 	stw	ra,28(sp)
10109bc0:	dd400615 	stw	r21,24(sp)
10109bc4:	dd000515 	stw	r20,20(sp)
10109bc8:	dc400215 	stw	r17,8(sp)
10109bcc:	2027883a 	mov	r19,r4
10109bd0:	2825883a 	mov	r18,r5
10109bd4:	3021883a 	mov	r16,r6
10109bd8:	0106e780 	call	10106e78 <__locale_mb_cur_max>
10109bdc:	00c00044 	movi	r3,1
10109be0:	10c03e26 	beq	r2,r3,10109cdc <__fputwc+0x130>
10109be4:	81c01704 	addi	r7,r16,92
10109be8:	900d883a 	mov	r6,r18
10109bec:	d80b883a 	mov	r5,sp
10109bf0:	9809883a 	mov	r4,r19
10109bf4:	010aa880 	call	1010aa88 <_wcrtomb_r>
10109bf8:	1029883a 	mov	r20,r2
10109bfc:	00bfffc4 	movi	r2,-1
10109c00:	a0802026 	beq	r20,r2,10109c84 <__fputwc+0xd8>
10109c04:	d9400003 	ldbu	r5,0(sp)
10109c08:	a0001c26 	beq	r20,zero,10109c7c <__fputwc+0xd0>
10109c0c:	0023883a 	mov	r17,zero
10109c10:	05400284 	movi	r21,10
10109c14:	00000906 	br	10109c3c <__fputwc+0x90>
10109c18:	80800017 	ldw	r2,0(r16)
10109c1c:	11400005 	stb	r5,0(r2)
10109c20:	80c00017 	ldw	r3,0(r16)
10109c24:	18c00044 	addi	r3,r3,1
10109c28:	80c00015 	stw	r3,0(r16)
10109c2c:	8c400044 	addi	r17,r17,1
10109c30:	dc45883a 	add	r2,sp,r17
10109c34:	8d00112e 	bgeu	r17,r20,10109c7c <__fputwc+0xd0>
10109c38:	11400003 	ldbu	r5,0(r2)
10109c3c:	80c00217 	ldw	r3,8(r16)
10109c40:	18ffffc4 	addi	r3,r3,-1
10109c44:	80c00215 	stw	r3,8(r16)
10109c48:	183ff30e 	bge	r3,zero,10109c18 <__alt_data_end+0xfffe9c18>
10109c4c:	80800617 	ldw	r2,24(r16)
10109c50:	18801916 	blt	r3,r2,10109cb8 <__fputwc+0x10c>
10109c54:	80800017 	ldw	r2,0(r16)
10109c58:	11400005 	stb	r5,0(r2)
10109c5c:	80800017 	ldw	r2,0(r16)
10109c60:	10c00003 	ldbu	r3,0(r2)
10109c64:	10800044 	addi	r2,r2,1
10109c68:	1d402326 	beq	r3,r21,10109cf8 <__fputwc+0x14c>
10109c6c:	80800015 	stw	r2,0(r16)
10109c70:	8c400044 	addi	r17,r17,1
10109c74:	dc45883a 	add	r2,sp,r17
10109c78:	8d3fef36 	bltu	r17,r20,10109c38 <__alt_data_end+0xfffe9c38>
10109c7c:	9005883a 	mov	r2,r18
10109c80:	00000406 	br	10109c94 <__fputwc+0xe8>
10109c84:	80c0030b 	ldhu	r3,12(r16)
10109c88:	a005883a 	mov	r2,r20
10109c8c:	18c01014 	ori	r3,r3,64
10109c90:	80c0030d 	sth	r3,12(r16)
10109c94:	dfc00717 	ldw	ra,28(sp)
10109c98:	dd400617 	ldw	r21,24(sp)
10109c9c:	dd000517 	ldw	r20,20(sp)
10109ca0:	dcc00417 	ldw	r19,16(sp)
10109ca4:	dc800317 	ldw	r18,12(sp)
10109ca8:	dc400217 	ldw	r17,8(sp)
10109cac:	dc000117 	ldw	r16,4(sp)
10109cb0:	dec00804 	addi	sp,sp,32
10109cb4:	f800283a 	ret
10109cb8:	800d883a 	mov	r6,r16
10109cbc:	29403fcc 	andi	r5,r5,255
10109cc0:	9809883a 	mov	r4,r19
10109cc4:	010a9300 	call	1010a930 <__swbuf_r>
10109cc8:	10bfffe0 	cmpeqi	r2,r2,-1
10109ccc:	10803fcc 	andi	r2,r2,255
10109cd0:	103fd626 	beq	r2,zero,10109c2c <__alt_data_end+0xfffe9c2c>
10109cd4:	00bfffc4 	movi	r2,-1
10109cd8:	003fee06 	br	10109c94 <__alt_data_end+0xfffe9c94>
10109cdc:	90ffffc4 	addi	r3,r18,-1
10109ce0:	01003f84 	movi	r4,254
10109ce4:	20ffbf36 	bltu	r4,r3,10109be4 <__alt_data_end+0xfffe9be4>
10109ce8:	900b883a 	mov	r5,r18
10109cec:	dc800005 	stb	r18,0(sp)
10109cf0:	1029883a 	mov	r20,r2
10109cf4:	003fc506 	br	10109c0c <__alt_data_end+0xfffe9c0c>
10109cf8:	800d883a 	mov	r6,r16
10109cfc:	a80b883a 	mov	r5,r21
10109d00:	9809883a 	mov	r4,r19
10109d04:	010a9300 	call	1010a930 <__swbuf_r>
10109d08:	10bfffe0 	cmpeqi	r2,r2,-1
10109d0c:	003fef06 	br	10109ccc <__alt_data_end+0xfffe9ccc>

10109d10 <_fputwc_r>:
10109d10:	3080030b 	ldhu	r2,12(r6)
10109d14:	10c8000c 	andi	r3,r2,8192
10109d18:	1800051e 	bne	r3,zero,10109d30 <_fputwc_r+0x20>
10109d1c:	30c01917 	ldw	r3,100(r6)
10109d20:	10880014 	ori	r2,r2,8192
10109d24:	3080030d 	sth	r2,12(r6)
10109d28:	18880014 	ori	r2,r3,8192
10109d2c:	30801915 	stw	r2,100(r6)
10109d30:	0109bac1 	jmpi	10109bac <__fputwc>

10109d34 <fputwc>:
10109d34:	00840474 	movhi	r2,4113
10109d38:	defffc04 	addi	sp,sp,-16
10109d3c:	108a4f04 	addi	r2,r2,10556
10109d40:	dc000115 	stw	r16,4(sp)
10109d44:	14000017 	ldw	r16,0(r2)
10109d48:	dc400215 	stw	r17,8(sp)
10109d4c:	dfc00315 	stw	ra,12(sp)
10109d50:	2023883a 	mov	r17,r4
10109d54:	80000226 	beq	r16,zero,10109d60 <fputwc+0x2c>
10109d58:	80800e17 	ldw	r2,56(r16)
10109d5c:	10001026 	beq	r2,zero,10109da0 <fputwc+0x6c>
10109d60:	2880030b 	ldhu	r2,12(r5)
10109d64:	10c8000c 	andi	r3,r2,8192
10109d68:	1800051e 	bne	r3,zero,10109d80 <fputwc+0x4c>
10109d6c:	28c01917 	ldw	r3,100(r5)
10109d70:	10880014 	ori	r2,r2,8192
10109d74:	2880030d 	sth	r2,12(r5)
10109d78:	18880014 	ori	r2,r3,8192
10109d7c:	28801915 	stw	r2,100(r5)
10109d80:	280d883a 	mov	r6,r5
10109d84:	8009883a 	mov	r4,r16
10109d88:	880b883a 	mov	r5,r17
10109d8c:	dfc00317 	ldw	ra,12(sp)
10109d90:	dc400217 	ldw	r17,8(sp)
10109d94:	dc000117 	ldw	r16,4(sp)
10109d98:	dec00404 	addi	sp,sp,16
10109d9c:	0109bac1 	jmpi	10109bac <__fputwc>
10109da0:	8009883a 	mov	r4,r16
10109da4:	d9400015 	stw	r5,0(sp)
10109da8:	01066e40 	call	101066e4 <__sinit>
10109dac:	d9400017 	ldw	r5,0(sp)
10109db0:	003feb06 	br	10109d60 <__alt_data_end+0xfffe9d60>

10109db4 <__sfvwrite_r>:
10109db4:	30800217 	ldw	r2,8(r6)
10109db8:	10006726 	beq	r2,zero,10109f58 <__sfvwrite_r+0x1a4>
10109dbc:	28c0030b 	ldhu	r3,12(r5)
10109dc0:	defff404 	addi	sp,sp,-48
10109dc4:	dd400715 	stw	r21,28(sp)
10109dc8:	dd000615 	stw	r20,24(sp)
10109dcc:	dc000215 	stw	r16,8(sp)
10109dd0:	dfc00b15 	stw	ra,44(sp)
10109dd4:	df000a15 	stw	fp,40(sp)
10109dd8:	ddc00915 	stw	r23,36(sp)
10109ddc:	dd800815 	stw	r22,32(sp)
10109de0:	dcc00515 	stw	r19,20(sp)
10109de4:	dc800415 	stw	r18,16(sp)
10109de8:	dc400315 	stw	r17,12(sp)
10109dec:	1880020c 	andi	r2,r3,8
10109df0:	2821883a 	mov	r16,r5
10109df4:	202b883a 	mov	r21,r4
10109df8:	3029883a 	mov	r20,r6
10109dfc:	10002726 	beq	r2,zero,10109e9c <__sfvwrite_r+0xe8>
10109e00:	28800417 	ldw	r2,16(r5)
10109e04:	10002526 	beq	r2,zero,10109e9c <__sfvwrite_r+0xe8>
10109e08:	1880008c 	andi	r2,r3,2
10109e0c:	a4400017 	ldw	r17,0(r20)
10109e10:	10002a26 	beq	r2,zero,10109ebc <__sfvwrite_r+0x108>
10109e14:	05a00034 	movhi	r22,32768
10109e18:	0027883a 	mov	r19,zero
10109e1c:	0025883a 	mov	r18,zero
10109e20:	b5bf0004 	addi	r22,r22,-1024
10109e24:	980d883a 	mov	r6,r19
10109e28:	a809883a 	mov	r4,r21
10109e2c:	90004626 	beq	r18,zero,10109f48 <__sfvwrite_r+0x194>
10109e30:	900f883a 	mov	r7,r18
10109e34:	b480022e 	bgeu	r22,r18,10109e40 <__sfvwrite_r+0x8c>
10109e38:	01e00034 	movhi	r7,32768
10109e3c:	39ff0004 	addi	r7,r7,-1024
10109e40:	80800917 	ldw	r2,36(r16)
10109e44:	81400717 	ldw	r5,28(r16)
10109e48:	103ee83a 	callr	r2
10109e4c:	0080570e 	bge	zero,r2,10109fac <__sfvwrite_r+0x1f8>
10109e50:	a0c00217 	ldw	r3,8(r20)
10109e54:	98a7883a 	add	r19,r19,r2
10109e58:	90a5c83a 	sub	r18,r18,r2
10109e5c:	1885c83a 	sub	r2,r3,r2
10109e60:	a0800215 	stw	r2,8(r20)
10109e64:	103fef1e 	bne	r2,zero,10109e24 <__alt_data_end+0xfffe9e24>
10109e68:	0005883a 	mov	r2,zero
10109e6c:	dfc00b17 	ldw	ra,44(sp)
10109e70:	df000a17 	ldw	fp,40(sp)
10109e74:	ddc00917 	ldw	r23,36(sp)
10109e78:	dd800817 	ldw	r22,32(sp)
10109e7c:	dd400717 	ldw	r21,28(sp)
10109e80:	dd000617 	ldw	r20,24(sp)
10109e84:	dcc00517 	ldw	r19,20(sp)
10109e88:	dc800417 	ldw	r18,16(sp)
10109e8c:	dc400317 	ldw	r17,12(sp)
10109e90:	dc000217 	ldw	r16,8(sp)
10109e94:	dec00c04 	addi	sp,sp,48
10109e98:	f800283a 	ret
10109e9c:	800b883a 	mov	r5,r16
10109ea0:	a809883a 	mov	r4,r21
10109ea4:	01046bc0 	call	101046bc <__swsetup_r>
10109ea8:	1000eb1e 	bne	r2,zero,1010a258 <__sfvwrite_r+0x4a4>
10109eac:	80c0030b 	ldhu	r3,12(r16)
10109eb0:	a4400017 	ldw	r17,0(r20)
10109eb4:	1880008c 	andi	r2,r3,2
10109eb8:	103fd61e 	bne	r2,zero,10109e14 <__alt_data_end+0xfffe9e14>
10109ebc:	1880004c 	andi	r2,r3,1
10109ec0:	10003f1e 	bne	r2,zero,10109fc0 <__sfvwrite_r+0x20c>
10109ec4:	0039883a 	mov	fp,zero
10109ec8:	0025883a 	mov	r18,zero
10109ecc:	90001a26 	beq	r18,zero,10109f38 <__sfvwrite_r+0x184>
10109ed0:	1880800c 	andi	r2,r3,512
10109ed4:	84c00217 	ldw	r19,8(r16)
10109ed8:	10002126 	beq	r2,zero,10109f60 <__sfvwrite_r+0x1ac>
10109edc:	982f883a 	mov	r23,r19
10109ee0:	94c09336 	bltu	r18,r19,1010a130 <__sfvwrite_r+0x37c>
10109ee4:	1881200c 	andi	r2,r3,1152
10109ee8:	10009e1e 	bne	r2,zero,1010a164 <__sfvwrite_r+0x3b0>
10109eec:	81000017 	ldw	r4,0(r16)
10109ef0:	b80d883a 	mov	r6,r23
10109ef4:	e00b883a 	mov	r5,fp
10109ef8:	010a2700 	call	1010a270 <memmove>
10109efc:	80c00217 	ldw	r3,8(r16)
10109f00:	81000017 	ldw	r4,0(r16)
10109f04:	9005883a 	mov	r2,r18
10109f08:	1ce7c83a 	sub	r19,r3,r19
10109f0c:	25cf883a 	add	r7,r4,r23
10109f10:	84c00215 	stw	r19,8(r16)
10109f14:	81c00015 	stw	r7,0(r16)
10109f18:	a0c00217 	ldw	r3,8(r20)
10109f1c:	e0b9883a 	add	fp,fp,r2
10109f20:	90a5c83a 	sub	r18,r18,r2
10109f24:	18a7c83a 	sub	r19,r3,r2
10109f28:	a4c00215 	stw	r19,8(r20)
10109f2c:	983fce26 	beq	r19,zero,10109e68 <__alt_data_end+0xfffe9e68>
10109f30:	80c0030b 	ldhu	r3,12(r16)
10109f34:	903fe61e 	bne	r18,zero,10109ed0 <__alt_data_end+0xfffe9ed0>
10109f38:	8f000017 	ldw	fp,0(r17)
10109f3c:	8c800117 	ldw	r18,4(r17)
10109f40:	8c400204 	addi	r17,r17,8
10109f44:	003fe106 	br	10109ecc <__alt_data_end+0xfffe9ecc>
10109f48:	8cc00017 	ldw	r19,0(r17)
10109f4c:	8c800117 	ldw	r18,4(r17)
10109f50:	8c400204 	addi	r17,r17,8
10109f54:	003fb306 	br	10109e24 <__alt_data_end+0xfffe9e24>
10109f58:	0005883a 	mov	r2,zero
10109f5c:	f800283a 	ret
10109f60:	81000017 	ldw	r4,0(r16)
10109f64:	80800417 	ldw	r2,16(r16)
10109f68:	11005736 	bltu	r2,r4,1010a0c8 <__sfvwrite_r+0x314>
10109f6c:	85c00517 	ldw	r23,20(r16)
10109f70:	95c05536 	bltu	r18,r23,1010a0c8 <__sfvwrite_r+0x314>
10109f74:	00a00034 	movhi	r2,32768
10109f78:	10bfffc4 	addi	r2,r2,-1
10109f7c:	9009883a 	mov	r4,r18
10109f80:	1480012e 	bgeu	r2,r18,10109f88 <__sfvwrite_r+0x1d4>
10109f84:	1009883a 	mov	r4,r2
10109f88:	b80b883a 	mov	r5,r23
10109f8c:	010b7200 	call	1010b720 <__divsi3>
10109f90:	15cf383a 	mul	r7,r2,r23
10109f94:	81400717 	ldw	r5,28(r16)
10109f98:	80800917 	ldw	r2,36(r16)
10109f9c:	e00d883a 	mov	r6,fp
10109fa0:	a809883a 	mov	r4,r21
10109fa4:	103ee83a 	callr	r2
10109fa8:	00bfdb16 	blt	zero,r2,10109f18 <__alt_data_end+0xfffe9f18>
10109fac:	8080030b 	ldhu	r2,12(r16)
10109fb0:	10801014 	ori	r2,r2,64
10109fb4:	8080030d 	sth	r2,12(r16)
10109fb8:	00bfffc4 	movi	r2,-1
10109fbc:	003fab06 	br	10109e6c <__alt_data_end+0xfffe9e6c>
10109fc0:	0027883a 	mov	r19,zero
10109fc4:	0011883a 	mov	r8,zero
10109fc8:	0039883a 	mov	fp,zero
10109fcc:	0025883a 	mov	r18,zero
10109fd0:	90001f26 	beq	r18,zero,1010a050 <__sfvwrite_r+0x29c>
10109fd4:	40005a26 	beq	r8,zero,1010a140 <__sfvwrite_r+0x38c>
10109fd8:	982d883a 	mov	r22,r19
10109fdc:	94c0012e 	bgeu	r18,r19,10109fe4 <__sfvwrite_r+0x230>
10109fe0:	902d883a 	mov	r22,r18
10109fe4:	81000017 	ldw	r4,0(r16)
10109fe8:	80800417 	ldw	r2,16(r16)
10109fec:	b02f883a 	mov	r23,r22
10109ff0:	81c00517 	ldw	r7,20(r16)
10109ff4:	1100032e 	bgeu	r2,r4,1010a004 <__sfvwrite_r+0x250>
10109ff8:	80c00217 	ldw	r3,8(r16)
10109ffc:	38c7883a 	add	r3,r7,r3
1010a000:	1d801816 	blt	r3,r22,1010a064 <__sfvwrite_r+0x2b0>
1010a004:	b1c03e16 	blt	r22,r7,1010a100 <__sfvwrite_r+0x34c>
1010a008:	80800917 	ldw	r2,36(r16)
1010a00c:	81400717 	ldw	r5,28(r16)
1010a010:	e00d883a 	mov	r6,fp
1010a014:	da000115 	stw	r8,4(sp)
1010a018:	a809883a 	mov	r4,r21
1010a01c:	103ee83a 	callr	r2
1010a020:	102f883a 	mov	r23,r2
1010a024:	da000117 	ldw	r8,4(sp)
1010a028:	00bfe00e 	bge	zero,r2,10109fac <__alt_data_end+0xfffe9fac>
1010a02c:	9de7c83a 	sub	r19,r19,r23
1010a030:	98001f26 	beq	r19,zero,1010a0b0 <__sfvwrite_r+0x2fc>
1010a034:	a0800217 	ldw	r2,8(r20)
1010a038:	e5f9883a 	add	fp,fp,r23
1010a03c:	95e5c83a 	sub	r18,r18,r23
1010a040:	15efc83a 	sub	r23,r2,r23
1010a044:	a5c00215 	stw	r23,8(r20)
1010a048:	b83f8726 	beq	r23,zero,10109e68 <__alt_data_end+0xfffe9e68>
1010a04c:	903fe11e 	bne	r18,zero,10109fd4 <__alt_data_end+0xfffe9fd4>
1010a050:	8f000017 	ldw	fp,0(r17)
1010a054:	8c800117 	ldw	r18,4(r17)
1010a058:	0011883a 	mov	r8,zero
1010a05c:	8c400204 	addi	r17,r17,8
1010a060:	003fdb06 	br	10109fd0 <__alt_data_end+0xfffe9fd0>
1010a064:	180d883a 	mov	r6,r3
1010a068:	e00b883a 	mov	r5,fp
1010a06c:	da000115 	stw	r8,4(sp)
1010a070:	d8c00015 	stw	r3,0(sp)
1010a074:	010a2700 	call	1010a270 <memmove>
1010a078:	d8c00017 	ldw	r3,0(sp)
1010a07c:	80800017 	ldw	r2,0(r16)
1010a080:	800b883a 	mov	r5,r16
1010a084:	a809883a 	mov	r4,r21
1010a088:	10c5883a 	add	r2,r2,r3
1010a08c:	80800015 	stw	r2,0(r16)
1010a090:	d8c00015 	stw	r3,0(sp)
1010a094:	01063080 	call	10106308 <_fflush_r>
1010a098:	d8c00017 	ldw	r3,0(sp)
1010a09c:	da000117 	ldw	r8,4(sp)
1010a0a0:	103fc21e 	bne	r2,zero,10109fac <__alt_data_end+0xfffe9fac>
1010a0a4:	182f883a 	mov	r23,r3
1010a0a8:	9de7c83a 	sub	r19,r19,r23
1010a0ac:	983fe11e 	bne	r19,zero,1010a034 <__alt_data_end+0xfffea034>
1010a0b0:	800b883a 	mov	r5,r16
1010a0b4:	a809883a 	mov	r4,r21
1010a0b8:	01063080 	call	10106308 <_fflush_r>
1010a0bc:	103fbb1e 	bne	r2,zero,10109fac <__alt_data_end+0xfffe9fac>
1010a0c0:	0011883a 	mov	r8,zero
1010a0c4:	003fdb06 	br	1010a034 <__alt_data_end+0xfffea034>
1010a0c8:	94c0012e 	bgeu	r18,r19,1010a0d0 <__sfvwrite_r+0x31c>
1010a0cc:	9027883a 	mov	r19,r18
1010a0d0:	980d883a 	mov	r6,r19
1010a0d4:	e00b883a 	mov	r5,fp
1010a0d8:	010a2700 	call	1010a270 <memmove>
1010a0dc:	80800217 	ldw	r2,8(r16)
1010a0e0:	80c00017 	ldw	r3,0(r16)
1010a0e4:	14c5c83a 	sub	r2,r2,r19
1010a0e8:	1cc7883a 	add	r3,r3,r19
1010a0ec:	80800215 	stw	r2,8(r16)
1010a0f0:	80c00015 	stw	r3,0(r16)
1010a0f4:	10004326 	beq	r2,zero,1010a204 <__sfvwrite_r+0x450>
1010a0f8:	9805883a 	mov	r2,r19
1010a0fc:	003f8606 	br	10109f18 <__alt_data_end+0xfffe9f18>
1010a100:	b00d883a 	mov	r6,r22
1010a104:	e00b883a 	mov	r5,fp
1010a108:	da000115 	stw	r8,4(sp)
1010a10c:	010a2700 	call	1010a270 <memmove>
1010a110:	80800217 	ldw	r2,8(r16)
1010a114:	80c00017 	ldw	r3,0(r16)
1010a118:	da000117 	ldw	r8,4(sp)
1010a11c:	1585c83a 	sub	r2,r2,r22
1010a120:	1dad883a 	add	r22,r3,r22
1010a124:	80800215 	stw	r2,8(r16)
1010a128:	85800015 	stw	r22,0(r16)
1010a12c:	003fbf06 	br	1010a02c <__alt_data_end+0xfffea02c>
1010a130:	81000017 	ldw	r4,0(r16)
1010a134:	9027883a 	mov	r19,r18
1010a138:	902f883a 	mov	r23,r18
1010a13c:	003f6c06 	br	10109ef0 <__alt_data_end+0xfffe9ef0>
1010a140:	900d883a 	mov	r6,r18
1010a144:	01400284 	movi	r5,10
1010a148:	e009883a 	mov	r4,fp
1010a14c:	0106f2c0 	call	10106f2c <memchr>
1010a150:	10003e26 	beq	r2,zero,1010a24c <__sfvwrite_r+0x498>
1010a154:	10800044 	addi	r2,r2,1
1010a158:	1727c83a 	sub	r19,r2,fp
1010a15c:	02000044 	movi	r8,1
1010a160:	003f9d06 	br	10109fd8 <__alt_data_end+0xfffe9fd8>
1010a164:	80800517 	ldw	r2,20(r16)
1010a168:	81400417 	ldw	r5,16(r16)
1010a16c:	81c00017 	ldw	r7,0(r16)
1010a170:	10a7883a 	add	r19,r2,r2
1010a174:	9885883a 	add	r2,r19,r2
1010a178:	1026d7fa 	srli	r19,r2,31
1010a17c:	396dc83a 	sub	r22,r7,r5
1010a180:	b1000044 	addi	r4,r22,1
1010a184:	9885883a 	add	r2,r19,r2
1010a188:	1027d07a 	srai	r19,r2,1
1010a18c:	2485883a 	add	r2,r4,r18
1010a190:	980d883a 	mov	r6,r19
1010a194:	9880022e 	bgeu	r19,r2,1010a1a0 <__sfvwrite_r+0x3ec>
1010a198:	1027883a 	mov	r19,r2
1010a19c:	100d883a 	mov	r6,r2
1010a1a0:	18c1000c 	andi	r3,r3,1024
1010a1a4:	18001c26 	beq	r3,zero,1010a218 <__sfvwrite_r+0x464>
1010a1a8:	300b883a 	mov	r5,r6
1010a1ac:	a809883a 	mov	r4,r21
1010a1b0:	010160c0 	call	1010160c <_malloc_r>
1010a1b4:	102f883a 	mov	r23,r2
1010a1b8:	10002926 	beq	r2,zero,1010a260 <__sfvwrite_r+0x4ac>
1010a1bc:	81400417 	ldw	r5,16(r16)
1010a1c0:	b00d883a 	mov	r6,r22
1010a1c4:	1009883a 	mov	r4,r2
1010a1c8:	01070100 	call	10107010 <memcpy>
1010a1cc:	8080030b 	ldhu	r2,12(r16)
1010a1d0:	00fedfc4 	movi	r3,-1153
1010a1d4:	10c4703a 	and	r2,r2,r3
1010a1d8:	10802014 	ori	r2,r2,128
1010a1dc:	8080030d 	sth	r2,12(r16)
1010a1e0:	bd89883a 	add	r4,r23,r22
1010a1e4:	9d8fc83a 	sub	r7,r19,r22
1010a1e8:	85c00415 	stw	r23,16(r16)
1010a1ec:	84c00515 	stw	r19,20(r16)
1010a1f0:	81000015 	stw	r4,0(r16)
1010a1f4:	9027883a 	mov	r19,r18
1010a1f8:	81c00215 	stw	r7,8(r16)
1010a1fc:	902f883a 	mov	r23,r18
1010a200:	003f3b06 	br	10109ef0 <__alt_data_end+0xfffe9ef0>
1010a204:	800b883a 	mov	r5,r16
1010a208:	a809883a 	mov	r4,r21
1010a20c:	01063080 	call	10106308 <_fflush_r>
1010a210:	103fb926 	beq	r2,zero,1010a0f8 <__alt_data_end+0xfffea0f8>
1010a214:	003f6506 	br	10109fac <__alt_data_end+0xfffe9fac>
1010a218:	a809883a 	mov	r4,r21
1010a21c:	010a3cc0 	call	1010a3cc <_realloc_r>
1010a220:	102f883a 	mov	r23,r2
1010a224:	103fee1e 	bne	r2,zero,1010a1e0 <__alt_data_end+0xfffea1e0>
1010a228:	81400417 	ldw	r5,16(r16)
1010a22c:	a809883a 	mov	r4,r21
1010a230:	01069040 	call	10106904 <_free_r>
1010a234:	8080030b 	ldhu	r2,12(r16)
1010a238:	00ffdfc4 	movi	r3,-129
1010a23c:	1884703a 	and	r2,r3,r2
1010a240:	00c00304 	movi	r3,12
1010a244:	a8c00015 	stw	r3,0(r21)
1010a248:	003f5906 	br	10109fb0 <__alt_data_end+0xfffe9fb0>
1010a24c:	94c00044 	addi	r19,r18,1
1010a250:	02000044 	movi	r8,1
1010a254:	003f6006 	br	10109fd8 <__alt_data_end+0xfffe9fd8>
1010a258:	00bfffc4 	movi	r2,-1
1010a25c:	003f0306 	br	10109e6c <__alt_data_end+0xfffe9e6c>
1010a260:	00800304 	movi	r2,12
1010a264:	a8800015 	stw	r2,0(r21)
1010a268:	8080030b 	ldhu	r2,12(r16)
1010a26c:	003f5006 	br	10109fb0 <__alt_data_end+0xfffe9fb0>

1010a270 <memmove>:
1010a270:	2005883a 	mov	r2,r4
1010a274:	29000b2e 	bgeu	r5,r4,1010a2a4 <memmove+0x34>
1010a278:	298f883a 	add	r7,r5,r6
1010a27c:	21c0092e 	bgeu	r4,r7,1010a2a4 <memmove+0x34>
1010a280:	2187883a 	add	r3,r4,r6
1010a284:	198bc83a 	sub	r5,r3,r6
1010a288:	30004826 	beq	r6,zero,1010a3ac <memmove+0x13c>
1010a28c:	39ffffc4 	addi	r7,r7,-1
1010a290:	39000003 	ldbu	r4,0(r7)
1010a294:	18ffffc4 	addi	r3,r3,-1
1010a298:	19000005 	stb	r4,0(r3)
1010a29c:	28fffb1e 	bne	r5,r3,1010a28c <__alt_data_end+0xfffea28c>
1010a2a0:	f800283a 	ret
1010a2a4:	00c003c4 	movi	r3,15
1010a2a8:	1980412e 	bgeu	r3,r6,1010a3b0 <memmove+0x140>
1010a2ac:	2886b03a 	or	r3,r5,r2
1010a2b0:	18c000cc 	andi	r3,r3,3
1010a2b4:	1800401e 	bne	r3,zero,1010a3b8 <memmove+0x148>
1010a2b8:	33fffc04 	addi	r15,r6,-16
1010a2bc:	781ed13a 	srli	r15,r15,4
1010a2c0:	28c00104 	addi	r3,r5,4
1010a2c4:	13400104 	addi	r13,r2,4
1010a2c8:	781c913a 	slli	r14,r15,4
1010a2cc:	2b000204 	addi	r12,r5,8
1010a2d0:	12c00204 	addi	r11,r2,8
1010a2d4:	73800504 	addi	r14,r14,20
1010a2d8:	2a800304 	addi	r10,r5,12
1010a2dc:	12400304 	addi	r9,r2,12
1010a2e0:	2b9d883a 	add	r14,r5,r14
1010a2e4:	2811883a 	mov	r8,r5
1010a2e8:	100f883a 	mov	r7,r2
1010a2ec:	41000017 	ldw	r4,0(r8)
1010a2f0:	39c00404 	addi	r7,r7,16
1010a2f4:	18c00404 	addi	r3,r3,16
1010a2f8:	393ffc15 	stw	r4,-16(r7)
1010a2fc:	193ffc17 	ldw	r4,-16(r3)
1010a300:	6b400404 	addi	r13,r13,16
1010a304:	5ac00404 	addi	r11,r11,16
1010a308:	693ffc15 	stw	r4,-16(r13)
1010a30c:	61000017 	ldw	r4,0(r12)
1010a310:	4a400404 	addi	r9,r9,16
1010a314:	42000404 	addi	r8,r8,16
1010a318:	593ffc15 	stw	r4,-16(r11)
1010a31c:	51000017 	ldw	r4,0(r10)
1010a320:	63000404 	addi	r12,r12,16
1010a324:	52800404 	addi	r10,r10,16
1010a328:	493ffc15 	stw	r4,-16(r9)
1010a32c:	1bbfef1e 	bne	r3,r14,1010a2ec <__alt_data_end+0xfffea2ec>
1010a330:	79000044 	addi	r4,r15,1
1010a334:	2008913a 	slli	r4,r4,4
1010a338:	328003cc 	andi	r10,r6,15
1010a33c:	02c000c4 	movi	r11,3
1010a340:	1107883a 	add	r3,r2,r4
1010a344:	290b883a 	add	r5,r5,r4
1010a348:	5a801e2e 	bgeu	r11,r10,1010a3c4 <memmove+0x154>
1010a34c:	1813883a 	mov	r9,r3
1010a350:	2811883a 	mov	r8,r5
1010a354:	500f883a 	mov	r7,r10
1010a358:	41000017 	ldw	r4,0(r8)
1010a35c:	4a400104 	addi	r9,r9,4
1010a360:	39ffff04 	addi	r7,r7,-4
1010a364:	493fff15 	stw	r4,-4(r9)
1010a368:	42000104 	addi	r8,r8,4
1010a36c:	59fffa36 	bltu	r11,r7,1010a358 <__alt_data_end+0xfffea358>
1010a370:	513fff04 	addi	r4,r10,-4
1010a374:	2008d0ba 	srli	r4,r4,2
1010a378:	318000cc 	andi	r6,r6,3
1010a37c:	21000044 	addi	r4,r4,1
1010a380:	2109883a 	add	r4,r4,r4
1010a384:	2109883a 	add	r4,r4,r4
1010a388:	1907883a 	add	r3,r3,r4
1010a38c:	290b883a 	add	r5,r5,r4
1010a390:	30000b26 	beq	r6,zero,1010a3c0 <memmove+0x150>
1010a394:	198d883a 	add	r6,r3,r6
1010a398:	29c00003 	ldbu	r7,0(r5)
1010a39c:	18c00044 	addi	r3,r3,1
1010a3a0:	29400044 	addi	r5,r5,1
1010a3a4:	19ffffc5 	stb	r7,-1(r3)
1010a3a8:	19bffb1e 	bne	r3,r6,1010a398 <__alt_data_end+0xfffea398>
1010a3ac:	f800283a 	ret
1010a3b0:	1007883a 	mov	r3,r2
1010a3b4:	003ff606 	br	1010a390 <__alt_data_end+0xfffea390>
1010a3b8:	1007883a 	mov	r3,r2
1010a3bc:	003ff506 	br	1010a394 <__alt_data_end+0xfffea394>
1010a3c0:	f800283a 	ret
1010a3c4:	500d883a 	mov	r6,r10
1010a3c8:	003ff106 	br	1010a390 <__alt_data_end+0xfffea390>

1010a3cc <_realloc_r>:
1010a3cc:	defff604 	addi	sp,sp,-40
1010a3d0:	dc800215 	stw	r18,8(sp)
1010a3d4:	dfc00915 	stw	ra,36(sp)
1010a3d8:	df000815 	stw	fp,32(sp)
1010a3dc:	ddc00715 	stw	r23,28(sp)
1010a3e0:	dd800615 	stw	r22,24(sp)
1010a3e4:	dd400515 	stw	r21,20(sp)
1010a3e8:	dd000415 	stw	r20,16(sp)
1010a3ec:	dcc00315 	stw	r19,12(sp)
1010a3f0:	dc400115 	stw	r17,4(sp)
1010a3f4:	dc000015 	stw	r16,0(sp)
1010a3f8:	3025883a 	mov	r18,r6
1010a3fc:	2800b726 	beq	r5,zero,1010a6dc <_realloc_r+0x310>
1010a400:	282b883a 	mov	r21,r5
1010a404:	2029883a 	mov	r20,r4
1010a408:	010e4b80 	call	1010e4b8 <__malloc_lock>
1010a40c:	a8bfff17 	ldw	r2,-4(r21)
1010a410:	043fff04 	movi	r16,-4
1010a414:	90c002c4 	addi	r3,r18,11
1010a418:	01000584 	movi	r4,22
1010a41c:	acfffe04 	addi	r19,r21,-8
1010a420:	1420703a 	and	r16,r2,r16
1010a424:	20c0332e 	bgeu	r4,r3,1010a4f4 <_realloc_r+0x128>
1010a428:	047ffe04 	movi	r17,-8
1010a42c:	1c62703a 	and	r17,r3,r17
1010a430:	8807883a 	mov	r3,r17
1010a434:	88005816 	blt	r17,zero,1010a598 <_realloc_r+0x1cc>
1010a438:	8c805736 	bltu	r17,r18,1010a598 <_realloc_r+0x1cc>
1010a43c:	80c0300e 	bge	r16,r3,1010a500 <_realloc_r+0x134>
1010a440:	07040474 	movhi	fp,4113
1010a444:	e704a204 	addi	fp,fp,4744
1010a448:	e1c00217 	ldw	r7,8(fp)
1010a44c:	9c09883a 	add	r4,r19,r16
1010a450:	22000117 	ldw	r8,4(r4)
1010a454:	21c06326 	beq	r4,r7,1010a5e4 <_realloc_r+0x218>
1010a458:	017fff84 	movi	r5,-2
1010a45c:	414a703a 	and	r5,r8,r5
1010a460:	214b883a 	add	r5,r4,r5
1010a464:	29800117 	ldw	r6,4(r5)
1010a468:	3180004c 	andi	r6,r6,1
1010a46c:	30003f26 	beq	r6,zero,1010a56c <_realloc_r+0x1a0>
1010a470:	1080004c 	andi	r2,r2,1
1010a474:	10008326 	beq	r2,zero,1010a684 <_realloc_r+0x2b8>
1010a478:	900b883a 	mov	r5,r18
1010a47c:	a009883a 	mov	r4,r20
1010a480:	010160c0 	call	1010160c <_malloc_r>
1010a484:	1025883a 	mov	r18,r2
1010a488:	10011e26 	beq	r2,zero,1010a904 <_realloc_r+0x538>
1010a48c:	a93fff17 	ldw	r4,-4(r21)
1010a490:	10fffe04 	addi	r3,r2,-8
1010a494:	00bfff84 	movi	r2,-2
1010a498:	2084703a 	and	r2,r4,r2
1010a49c:	9885883a 	add	r2,r19,r2
1010a4a0:	1880ee26 	beq	r3,r2,1010a85c <_realloc_r+0x490>
1010a4a4:	81bfff04 	addi	r6,r16,-4
1010a4a8:	00800904 	movi	r2,36
1010a4ac:	1180b836 	bltu	r2,r6,1010a790 <_realloc_r+0x3c4>
1010a4b0:	00c004c4 	movi	r3,19
1010a4b4:	19809636 	bltu	r3,r6,1010a710 <_realloc_r+0x344>
1010a4b8:	9005883a 	mov	r2,r18
1010a4bc:	a807883a 	mov	r3,r21
1010a4c0:	19000017 	ldw	r4,0(r3)
1010a4c4:	11000015 	stw	r4,0(r2)
1010a4c8:	19000117 	ldw	r4,4(r3)
1010a4cc:	11000115 	stw	r4,4(r2)
1010a4d0:	18c00217 	ldw	r3,8(r3)
1010a4d4:	10c00215 	stw	r3,8(r2)
1010a4d8:	a80b883a 	mov	r5,r21
1010a4dc:	a009883a 	mov	r4,r20
1010a4e0:	01069040 	call	10106904 <_free_r>
1010a4e4:	a009883a 	mov	r4,r20
1010a4e8:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010a4ec:	9005883a 	mov	r2,r18
1010a4f0:	00001206 	br	1010a53c <_realloc_r+0x170>
1010a4f4:	00c00404 	movi	r3,16
1010a4f8:	1823883a 	mov	r17,r3
1010a4fc:	003fce06 	br	1010a438 <__alt_data_end+0xfffea438>
1010a500:	a825883a 	mov	r18,r21
1010a504:	8445c83a 	sub	r2,r16,r17
1010a508:	00c003c4 	movi	r3,15
1010a50c:	18802636 	bltu	r3,r2,1010a5a8 <_realloc_r+0x1dc>
1010a510:	99800117 	ldw	r6,4(r19)
1010a514:	9c07883a 	add	r3,r19,r16
1010a518:	3180004c 	andi	r6,r6,1
1010a51c:	3420b03a 	or	r16,r6,r16
1010a520:	9c000115 	stw	r16,4(r19)
1010a524:	18800117 	ldw	r2,4(r3)
1010a528:	10800054 	ori	r2,r2,1
1010a52c:	18800115 	stw	r2,4(r3)
1010a530:	a009883a 	mov	r4,r20
1010a534:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010a538:	9005883a 	mov	r2,r18
1010a53c:	dfc00917 	ldw	ra,36(sp)
1010a540:	df000817 	ldw	fp,32(sp)
1010a544:	ddc00717 	ldw	r23,28(sp)
1010a548:	dd800617 	ldw	r22,24(sp)
1010a54c:	dd400517 	ldw	r21,20(sp)
1010a550:	dd000417 	ldw	r20,16(sp)
1010a554:	dcc00317 	ldw	r19,12(sp)
1010a558:	dc800217 	ldw	r18,8(sp)
1010a55c:	dc400117 	ldw	r17,4(sp)
1010a560:	dc000017 	ldw	r16,0(sp)
1010a564:	dec00a04 	addi	sp,sp,40
1010a568:	f800283a 	ret
1010a56c:	017fff04 	movi	r5,-4
1010a570:	414a703a 	and	r5,r8,r5
1010a574:	814d883a 	add	r6,r16,r5
1010a578:	30c01f16 	blt	r6,r3,1010a5f8 <_realloc_r+0x22c>
1010a57c:	20800317 	ldw	r2,12(r4)
1010a580:	20c00217 	ldw	r3,8(r4)
1010a584:	a825883a 	mov	r18,r21
1010a588:	3021883a 	mov	r16,r6
1010a58c:	18800315 	stw	r2,12(r3)
1010a590:	10c00215 	stw	r3,8(r2)
1010a594:	003fdb06 	br	1010a504 <__alt_data_end+0xfffea504>
1010a598:	00800304 	movi	r2,12
1010a59c:	a0800015 	stw	r2,0(r20)
1010a5a0:	0005883a 	mov	r2,zero
1010a5a4:	003fe506 	br	1010a53c <__alt_data_end+0xfffea53c>
1010a5a8:	98c00117 	ldw	r3,4(r19)
1010a5ac:	9c4b883a 	add	r5,r19,r17
1010a5b0:	11000054 	ori	r4,r2,1
1010a5b4:	18c0004c 	andi	r3,r3,1
1010a5b8:	1c62b03a 	or	r17,r3,r17
1010a5bc:	9c400115 	stw	r17,4(r19)
1010a5c0:	29000115 	stw	r4,4(r5)
1010a5c4:	2885883a 	add	r2,r5,r2
1010a5c8:	10c00117 	ldw	r3,4(r2)
1010a5cc:	29400204 	addi	r5,r5,8
1010a5d0:	a009883a 	mov	r4,r20
1010a5d4:	18c00054 	ori	r3,r3,1
1010a5d8:	10c00115 	stw	r3,4(r2)
1010a5dc:	01069040 	call	10106904 <_free_r>
1010a5e0:	003fd306 	br	1010a530 <__alt_data_end+0xfffea530>
1010a5e4:	017fff04 	movi	r5,-4
1010a5e8:	414a703a 	and	r5,r8,r5
1010a5ec:	89800404 	addi	r6,r17,16
1010a5f0:	8151883a 	add	r8,r16,r5
1010a5f4:	4180590e 	bge	r8,r6,1010a75c <_realloc_r+0x390>
1010a5f8:	1080004c 	andi	r2,r2,1
1010a5fc:	103f9e1e 	bne	r2,zero,1010a478 <__alt_data_end+0xfffea478>
1010a600:	adbffe17 	ldw	r22,-8(r21)
1010a604:	00bfff04 	movi	r2,-4
1010a608:	9dadc83a 	sub	r22,r19,r22
1010a60c:	b1800117 	ldw	r6,4(r22)
1010a610:	3084703a 	and	r2,r6,r2
1010a614:	20002026 	beq	r4,zero,1010a698 <_realloc_r+0x2cc>
1010a618:	80af883a 	add	r23,r16,r2
1010a61c:	b96f883a 	add	r23,r23,r5
1010a620:	21c05f26 	beq	r4,r7,1010a7a0 <_realloc_r+0x3d4>
1010a624:	b8c01c16 	blt	r23,r3,1010a698 <_realloc_r+0x2cc>
1010a628:	20800317 	ldw	r2,12(r4)
1010a62c:	20c00217 	ldw	r3,8(r4)
1010a630:	81bfff04 	addi	r6,r16,-4
1010a634:	01000904 	movi	r4,36
1010a638:	18800315 	stw	r2,12(r3)
1010a63c:	10c00215 	stw	r3,8(r2)
1010a640:	b0c00217 	ldw	r3,8(r22)
1010a644:	b0800317 	ldw	r2,12(r22)
1010a648:	b4800204 	addi	r18,r22,8
1010a64c:	18800315 	stw	r2,12(r3)
1010a650:	10c00215 	stw	r3,8(r2)
1010a654:	21801b36 	bltu	r4,r6,1010a6c4 <_realloc_r+0x2f8>
1010a658:	008004c4 	movi	r2,19
1010a65c:	1180352e 	bgeu	r2,r6,1010a734 <_realloc_r+0x368>
1010a660:	a8800017 	ldw	r2,0(r21)
1010a664:	b0800215 	stw	r2,8(r22)
1010a668:	a8800117 	ldw	r2,4(r21)
1010a66c:	b0800315 	stw	r2,12(r22)
1010a670:	008006c4 	movi	r2,27
1010a674:	11807f36 	bltu	r2,r6,1010a874 <_realloc_r+0x4a8>
1010a678:	b0800404 	addi	r2,r22,16
1010a67c:	ad400204 	addi	r21,r21,8
1010a680:	00002d06 	br	1010a738 <_realloc_r+0x36c>
1010a684:	adbffe17 	ldw	r22,-8(r21)
1010a688:	00bfff04 	movi	r2,-4
1010a68c:	9dadc83a 	sub	r22,r19,r22
1010a690:	b1000117 	ldw	r4,4(r22)
1010a694:	2084703a 	and	r2,r4,r2
1010a698:	b03f7726 	beq	r22,zero,1010a478 <__alt_data_end+0xfffea478>
1010a69c:	80af883a 	add	r23,r16,r2
1010a6a0:	b8ff7516 	blt	r23,r3,1010a478 <__alt_data_end+0xfffea478>
1010a6a4:	b0800317 	ldw	r2,12(r22)
1010a6a8:	b0c00217 	ldw	r3,8(r22)
1010a6ac:	81bfff04 	addi	r6,r16,-4
1010a6b0:	01000904 	movi	r4,36
1010a6b4:	18800315 	stw	r2,12(r3)
1010a6b8:	10c00215 	stw	r3,8(r2)
1010a6bc:	b4800204 	addi	r18,r22,8
1010a6c0:	21bfe52e 	bgeu	r4,r6,1010a658 <__alt_data_end+0xfffea658>
1010a6c4:	a80b883a 	mov	r5,r21
1010a6c8:	9009883a 	mov	r4,r18
1010a6cc:	010a2700 	call	1010a270 <memmove>
1010a6d0:	b821883a 	mov	r16,r23
1010a6d4:	b027883a 	mov	r19,r22
1010a6d8:	003f8a06 	br	1010a504 <__alt_data_end+0xfffea504>
1010a6dc:	300b883a 	mov	r5,r6
1010a6e0:	dfc00917 	ldw	ra,36(sp)
1010a6e4:	df000817 	ldw	fp,32(sp)
1010a6e8:	ddc00717 	ldw	r23,28(sp)
1010a6ec:	dd800617 	ldw	r22,24(sp)
1010a6f0:	dd400517 	ldw	r21,20(sp)
1010a6f4:	dd000417 	ldw	r20,16(sp)
1010a6f8:	dcc00317 	ldw	r19,12(sp)
1010a6fc:	dc800217 	ldw	r18,8(sp)
1010a700:	dc400117 	ldw	r17,4(sp)
1010a704:	dc000017 	ldw	r16,0(sp)
1010a708:	dec00a04 	addi	sp,sp,40
1010a70c:	010160c1 	jmpi	1010160c <_malloc_r>
1010a710:	a8c00017 	ldw	r3,0(r21)
1010a714:	90c00015 	stw	r3,0(r18)
1010a718:	a8c00117 	ldw	r3,4(r21)
1010a71c:	90c00115 	stw	r3,4(r18)
1010a720:	00c006c4 	movi	r3,27
1010a724:	19804536 	bltu	r3,r6,1010a83c <_realloc_r+0x470>
1010a728:	90800204 	addi	r2,r18,8
1010a72c:	a8c00204 	addi	r3,r21,8
1010a730:	003f6306 	br	1010a4c0 <__alt_data_end+0xfffea4c0>
1010a734:	9005883a 	mov	r2,r18
1010a738:	a8c00017 	ldw	r3,0(r21)
1010a73c:	b821883a 	mov	r16,r23
1010a740:	b027883a 	mov	r19,r22
1010a744:	10c00015 	stw	r3,0(r2)
1010a748:	a8c00117 	ldw	r3,4(r21)
1010a74c:	10c00115 	stw	r3,4(r2)
1010a750:	a8c00217 	ldw	r3,8(r21)
1010a754:	10c00215 	stw	r3,8(r2)
1010a758:	003f6a06 	br	1010a504 <__alt_data_end+0xfffea504>
1010a75c:	9c67883a 	add	r19,r19,r17
1010a760:	4445c83a 	sub	r2,r8,r17
1010a764:	e4c00215 	stw	r19,8(fp)
1010a768:	10800054 	ori	r2,r2,1
1010a76c:	98800115 	stw	r2,4(r19)
1010a770:	a8bfff17 	ldw	r2,-4(r21)
1010a774:	a009883a 	mov	r4,r20
1010a778:	1080004c 	andi	r2,r2,1
1010a77c:	1462b03a 	or	r17,r2,r17
1010a780:	ac7fff15 	stw	r17,-4(r21)
1010a784:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010a788:	a805883a 	mov	r2,r21
1010a78c:	003f6b06 	br	1010a53c <__alt_data_end+0xfffea53c>
1010a790:	a80b883a 	mov	r5,r21
1010a794:	9009883a 	mov	r4,r18
1010a798:	010a2700 	call	1010a270 <memmove>
1010a79c:	003f4e06 	br	1010a4d8 <__alt_data_end+0xfffea4d8>
1010a7a0:	89000404 	addi	r4,r17,16
1010a7a4:	b93fbc16 	blt	r23,r4,1010a698 <__alt_data_end+0xfffea698>
1010a7a8:	b0800317 	ldw	r2,12(r22)
1010a7ac:	b0c00217 	ldw	r3,8(r22)
1010a7b0:	81bfff04 	addi	r6,r16,-4
1010a7b4:	01000904 	movi	r4,36
1010a7b8:	18800315 	stw	r2,12(r3)
1010a7bc:	10c00215 	stw	r3,8(r2)
1010a7c0:	b4800204 	addi	r18,r22,8
1010a7c4:	21804336 	bltu	r4,r6,1010a8d4 <_realloc_r+0x508>
1010a7c8:	008004c4 	movi	r2,19
1010a7cc:	11803f2e 	bgeu	r2,r6,1010a8cc <_realloc_r+0x500>
1010a7d0:	a8800017 	ldw	r2,0(r21)
1010a7d4:	b0800215 	stw	r2,8(r22)
1010a7d8:	a8800117 	ldw	r2,4(r21)
1010a7dc:	b0800315 	stw	r2,12(r22)
1010a7e0:	008006c4 	movi	r2,27
1010a7e4:	11803f36 	bltu	r2,r6,1010a8e4 <_realloc_r+0x518>
1010a7e8:	b0800404 	addi	r2,r22,16
1010a7ec:	ad400204 	addi	r21,r21,8
1010a7f0:	a8c00017 	ldw	r3,0(r21)
1010a7f4:	10c00015 	stw	r3,0(r2)
1010a7f8:	a8c00117 	ldw	r3,4(r21)
1010a7fc:	10c00115 	stw	r3,4(r2)
1010a800:	a8c00217 	ldw	r3,8(r21)
1010a804:	10c00215 	stw	r3,8(r2)
1010a808:	b447883a 	add	r3,r22,r17
1010a80c:	bc45c83a 	sub	r2,r23,r17
1010a810:	e0c00215 	stw	r3,8(fp)
1010a814:	10800054 	ori	r2,r2,1
1010a818:	18800115 	stw	r2,4(r3)
1010a81c:	b0800117 	ldw	r2,4(r22)
1010a820:	a009883a 	mov	r4,r20
1010a824:	1080004c 	andi	r2,r2,1
1010a828:	1462b03a 	or	r17,r2,r17
1010a82c:	b4400115 	stw	r17,4(r22)
1010a830:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010a834:	9005883a 	mov	r2,r18
1010a838:	003f4006 	br	1010a53c <__alt_data_end+0xfffea53c>
1010a83c:	a8c00217 	ldw	r3,8(r21)
1010a840:	90c00215 	stw	r3,8(r18)
1010a844:	a8c00317 	ldw	r3,12(r21)
1010a848:	90c00315 	stw	r3,12(r18)
1010a84c:	30801126 	beq	r6,r2,1010a894 <_realloc_r+0x4c8>
1010a850:	90800404 	addi	r2,r18,16
1010a854:	a8c00404 	addi	r3,r21,16
1010a858:	003f1906 	br	1010a4c0 <__alt_data_end+0xfffea4c0>
1010a85c:	90ffff17 	ldw	r3,-4(r18)
1010a860:	00bfff04 	movi	r2,-4
1010a864:	a825883a 	mov	r18,r21
1010a868:	1884703a 	and	r2,r3,r2
1010a86c:	80a1883a 	add	r16,r16,r2
1010a870:	003f2406 	br	1010a504 <__alt_data_end+0xfffea504>
1010a874:	a8800217 	ldw	r2,8(r21)
1010a878:	b0800415 	stw	r2,16(r22)
1010a87c:	a8800317 	ldw	r2,12(r21)
1010a880:	b0800515 	stw	r2,20(r22)
1010a884:	31000a26 	beq	r6,r4,1010a8b0 <_realloc_r+0x4e4>
1010a888:	b0800604 	addi	r2,r22,24
1010a88c:	ad400404 	addi	r21,r21,16
1010a890:	003fa906 	br	1010a738 <__alt_data_end+0xfffea738>
1010a894:	a9000417 	ldw	r4,16(r21)
1010a898:	90800604 	addi	r2,r18,24
1010a89c:	a8c00604 	addi	r3,r21,24
1010a8a0:	91000415 	stw	r4,16(r18)
1010a8a4:	a9000517 	ldw	r4,20(r21)
1010a8a8:	91000515 	stw	r4,20(r18)
1010a8ac:	003f0406 	br	1010a4c0 <__alt_data_end+0xfffea4c0>
1010a8b0:	a8c00417 	ldw	r3,16(r21)
1010a8b4:	ad400604 	addi	r21,r21,24
1010a8b8:	b0800804 	addi	r2,r22,32
1010a8bc:	b0c00615 	stw	r3,24(r22)
1010a8c0:	a8ffff17 	ldw	r3,-4(r21)
1010a8c4:	b0c00715 	stw	r3,28(r22)
1010a8c8:	003f9b06 	br	1010a738 <__alt_data_end+0xfffea738>
1010a8cc:	9005883a 	mov	r2,r18
1010a8d0:	003fc706 	br	1010a7f0 <__alt_data_end+0xfffea7f0>
1010a8d4:	a80b883a 	mov	r5,r21
1010a8d8:	9009883a 	mov	r4,r18
1010a8dc:	010a2700 	call	1010a270 <memmove>
1010a8e0:	003fc906 	br	1010a808 <__alt_data_end+0xfffea808>
1010a8e4:	a8800217 	ldw	r2,8(r21)
1010a8e8:	b0800415 	stw	r2,16(r22)
1010a8ec:	a8800317 	ldw	r2,12(r21)
1010a8f0:	b0800515 	stw	r2,20(r22)
1010a8f4:	31000726 	beq	r6,r4,1010a914 <_realloc_r+0x548>
1010a8f8:	b0800604 	addi	r2,r22,24
1010a8fc:	ad400404 	addi	r21,r21,16
1010a900:	003fbb06 	br	1010a7f0 <__alt_data_end+0xfffea7f0>
1010a904:	a009883a 	mov	r4,r20
1010a908:	010e4dc0 	call	1010e4dc <__malloc_unlock>
1010a90c:	0005883a 	mov	r2,zero
1010a910:	003f0a06 	br	1010a53c <__alt_data_end+0xfffea53c>
1010a914:	a8c00417 	ldw	r3,16(r21)
1010a918:	ad400604 	addi	r21,r21,24
1010a91c:	b0800804 	addi	r2,r22,32
1010a920:	b0c00615 	stw	r3,24(r22)
1010a924:	a8ffff17 	ldw	r3,-4(r21)
1010a928:	b0c00715 	stw	r3,28(r22)
1010a92c:	003fb006 	br	1010a7f0 <__alt_data_end+0xfffea7f0>

1010a930 <__swbuf_r>:
1010a930:	defffb04 	addi	sp,sp,-20
1010a934:	dcc00315 	stw	r19,12(sp)
1010a938:	dc800215 	stw	r18,8(sp)
1010a93c:	dc000015 	stw	r16,0(sp)
1010a940:	dfc00415 	stw	ra,16(sp)
1010a944:	dc400115 	stw	r17,4(sp)
1010a948:	2025883a 	mov	r18,r4
1010a94c:	2827883a 	mov	r19,r5
1010a950:	3021883a 	mov	r16,r6
1010a954:	20000226 	beq	r4,zero,1010a960 <__swbuf_r+0x30>
1010a958:	20800e17 	ldw	r2,56(r4)
1010a95c:	10004226 	beq	r2,zero,1010aa68 <__swbuf_r+0x138>
1010a960:	80800617 	ldw	r2,24(r16)
1010a964:	8100030b 	ldhu	r4,12(r16)
1010a968:	80800215 	stw	r2,8(r16)
1010a96c:	2080020c 	andi	r2,r4,8
1010a970:	10003626 	beq	r2,zero,1010aa4c <__swbuf_r+0x11c>
1010a974:	80c00417 	ldw	r3,16(r16)
1010a978:	18003426 	beq	r3,zero,1010aa4c <__swbuf_r+0x11c>
1010a97c:	2088000c 	andi	r2,r4,8192
1010a980:	9c403fcc 	andi	r17,r19,255
1010a984:	10001a26 	beq	r2,zero,1010a9f0 <__swbuf_r+0xc0>
1010a988:	80800017 	ldw	r2,0(r16)
1010a98c:	81000517 	ldw	r4,20(r16)
1010a990:	10c7c83a 	sub	r3,r2,r3
1010a994:	1900200e 	bge	r3,r4,1010aa18 <__swbuf_r+0xe8>
1010a998:	18c00044 	addi	r3,r3,1
1010a99c:	81000217 	ldw	r4,8(r16)
1010a9a0:	11400044 	addi	r5,r2,1
1010a9a4:	81400015 	stw	r5,0(r16)
1010a9a8:	213fffc4 	addi	r4,r4,-1
1010a9ac:	81000215 	stw	r4,8(r16)
1010a9b0:	14c00005 	stb	r19,0(r2)
1010a9b4:	80800517 	ldw	r2,20(r16)
1010a9b8:	10c01e26 	beq	r2,r3,1010aa34 <__swbuf_r+0x104>
1010a9bc:	8080030b 	ldhu	r2,12(r16)
1010a9c0:	1080004c 	andi	r2,r2,1
1010a9c4:	10000226 	beq	r2,zero,1010a9d0 <__swbuf_r+0xa0>
1010a9c8:	00800284 	movi	r2,10
1010a9cc:	88801926 	beq	r17,r2,1010aa34 <__swbuf_r+0x104>
1010a9d0:	8805883a 	mov	r2,r17
1010a9d4:	dfc00417 	ldw	ra,16(sp)
1010a9d8:	dcc00317 	ldw	r19,12(sp)
1010a9dc:	dc800217 	ldw	r18,8(sp)
1010a9e0:	dc400117 	ldw	r17,4(sp)
1010a9e4:	dc000017 	ldw	r16,0(sp)
1010a9e8:	dec00504 	addi	sp,sp,20
1010a9ec:	f800283a 	ret
1010a9f0:	81401917 	ldw	r5,100(r16)
1010a9f4:	00b7ffc4 	movi	r2,-8193
1010a9f8:	21080014 	ori	r4,r4,8192
1010a9fc:	2884703a 	and	r2,r5,r2
1010aa00:	80801915 	stw	r2,100(r16)
1010aa04:	80800017 	ldw	r2,0(r16)
1010aa08:	8100030d 	sth	r4,12(r16)
1010aa0c:	81000517 	ldw	r4,20(r16)
1010aa10:	10c7c83a 	sub	r3,r2,r3
1010aa14:	193fe016 	blt	r3,r4,1010a998 <__alt_data_end+0xfffea998>
1010aa18:	800b883a 	mov	r5,r16
1010aa1c:	9009883a 	mov	r4,r18
1010aa20:	01063080 	call	10106308 <_fflush_r>
1010aa24:	1000071e 	bne	r2,zero,1010aa44 <__swbuf_r+0x114>
1010aa28:	80800017 	ldw	r2,0(r16)
1010aa2c:	00c00044 	movi	r3,1
1010aa30:	003fda06 	br	1010a99c <__alt_data_end+0xfffea99c>
1010aa34:	800b883a 	mov	r5,r16
1010aa38:	9009883a 	mov	r4,r18
1010aa3c:	01063080 	call	10106308 <_fflush_r>
1010aa40:	103fe326 	beq	r2,zero,1010a9d0 <__alt_data_end+0xfffea9d0>
1010aa44:	00bfffc4 	movi	r2,-1
1010aa48:	003fe206 	br	1010a9d4 <__alt_data_end+0xfffea9d4>
1010aa4c:	800b883a 	mov	r5,r16
1010aa50:	9009883a 	mov	r4,r18
1010aa54:	01046bc0 	call	101046bc <__swsetup_r>
1010aa58:	103ffa1e 	bne	r2,zero,1010aa44 <__alt_data_end+0xfffeaa44>
1010aa5c:	8100030b 	ldhu	r4,12(r16)
1010aa60:	80c00417 	ldw	r3,16(r16)
1010aa64:	003fc506 	br	1010a97c <__alt_data_end+0xfffea97c>
1010aa68:	01066e40 	call	101066e4 <__sinit>
1010aa6c:	003fbc06 	br	1010a960 <__alt_data_end+0xfffea960>

1010aa70 <__swbuf>:
1010aa70:	00840474 	movhi	r2,4113
1010aa74:	108a4f04 	addi	r2,r2,10556
1010aa78:	280d883a 	mov	r6,r5
1010aa7c:	200b883a 	mov	r5,r4
1010aa80:	11000017 	ldw	r4,0(r2)
1010aa84:	010a9301 	jmpi	1010a930 <__swbuf_r>

1010aa88 <_wcrtomb_r>:
1010aa88:	defff604 	addi	sp,sp,-40
1010aa8c:	00840474 	movhi	r2,4113
1010aa90:	dc800815 	stw	r18,32(sp)
1010aa94:	dc400715 	stw	r17,28(sp)
1010aa98:	dc000615 	stw	r16,24(sp)
1010aa9c:	108a5304 	addi	r2,r2,10572
1010aaa0:	dfc00915 	stw	ra,36(sp)
1010aaa4:	2021883a 	mov	r16,r4
1010aaa8:	3823883a 	mov	r17,r7
1010aaac:	14800017 	ldw	r18,0(r2)
1010aab0:	28001426 	beq	r5,zero,1010ab04 <_wcrtomb_r+0x7c>
1010aab4:	d9400415 	stw	r5,16(sp)
1010aab8:	d9800515 	stw	r6,20(sp)
1010aabc:	0106e6c0 	call	10106e6c <__locale_charset>
1010aac0:	d9800517 	ldw	r6,20(sp)
1010aac4:	d9400417 	ldw	r5,16(sp)
1010aac8:	100f883a 	mov	r7,r2
1010aacc:	dc400015 	stw	r17,0(sp)
1010aad0:	8009883a 	mov	r4,r16
1010aad4:	903ee83a 	callr	r18
1010aad8:	00ffffc4 	movi	r3,-1
1010aadc:	10c0031e 	bne	r2,r3,1010aaec <_wcrtomb_r+0x64>
1010aae0:	88000015 	stw	zero,0(r17)
1010aae4:	00c02284 	movi	r3,138
1010aae8:	80c00015 	stw	r3,0(r16)
1010aaec:	dfc00917 	ldw	ra,36(sp)
1010aaf0:	dc800817 	ldw	r18,32(sp)
1010aaf4:	dc400717 	ldw	r17,28(sp)
1010aaf8:	dc000617 	ldw	r16,24(sp)
1010aafc:	dec00a04 	addi	sp,sp,40
1010ab00:	f800283a 	ret
1010ab04:	0106e6c0 	call	10106e6c <__locale_charset>
1010ab08:	100f883a 	mov	r7,r2
1010ab0c:	dc400015 	stw	r17,0(sp)
1010ab10:	000d883a 	mov	r6,zero
1010ab14:	d9400104 	addi	r5,sp,4
1010ab18:	8009883a 	mov	r4,r16
1010ab1c:	903ee83a 	callr	r18
1010ab20:	003fed06 	br	1010aad8 <__alt_data_end+0xfffeaad8>

1010ab24 <wcrtomb>:
1010ab24:	defff604 	addi	sp,sp,-40
1010ab28:	00840474 	movhi	r2,4113
1010ab2c:	dc800615 	stw	r18,24(sp)
1010ab30:	dc400515 	stw	r17,20(sp)
1010ab34:	108a4f04 	addi	r2,r2,10556
1010ab38:	dfc00915 	stw	ra,36(sp)
1010ab3c:	dd000815 	stw	r20,32(sp)
1010ab40:	dcc00715 	stw	r19,28(sp)
1010ab44:	dc000415 	stw	r16,16(sp)
1010ab48:	3025883a 	mov	r18,r6
1010ab4c:	14400017 	ldw	r17,0(r2)
1010ab50:	20001926 	beq	r4,zero,1010abb8 <wcrtomb+0x94>
1010ab54:	00840474 	movhi	r2,4113
1010ab58:	108a5304 	addi	r2,r2,10572
1010ab5c:	15000017 	ldw	r20,0(r2)
1010ab60:	2021883a 	mov	r16,r4
1010ab64:	2827883a 	mov	r19,r5
1010ab68:	0106e6c0 	call	10106e6c <__locale_charset>
1010ab6c:	100f883a 	mov	r7,r2
1010ab70:	dc800015 	stw	r18,0(sp)
1010ab74:	980d883a 	mov	r6,r19
1010ab78:	800b883a 	mov	r5,r16
1010ab7c:	8809883a 	mov	r4,r17
1010ab80:	a03ee83a 	callr	r20
1010ab84:	00ffffc4 	movi	r3,-1
1010ab88:	10c0031e 	bne	r2,r3,1010ab98 <wcrtomb+0x74>
1010ab8c:	90000015 	stw	zero,0(r18)
1010ab90:	00c02284 	movi	r3,138
1010ab94:	88c00015 	stw	r3,0(r17)
1010ab98:	dfc00917 	ldw	ra,36(sp)
1010ab9c:	dd000817 	ldw	r20,32(sp)
1010aba0:	dcc00717 	ldw	r19,28(sp)
1010aba4:	dc800617 	ldw	r18,24(sp)
1010aba8:	dc400517 	ldw	r17,20(sp)
1010abac:	dc000417 	ldw	r16,16(sp)
1010abb0:	dec00a04 	addi	sp,sp,40
1010abb4:	f800283a 	ret
1010abb8:	00840474 	movhi	r2,4113
1010abbc:	108a5304 	addi	r2,r2,10572
1010abc0:	14000017 	ldw	r16,0(r2)
1010abc4:	0106e6c0 	call	10106e6c <__locale_charset>
1010abc8:	100f883a 	mov	r7,r2
1010abcc:	dc800015 	stw	r18,0(sp)
1010abd0:	000d883a 	mov	r6,zero
1010abd4:	d9400104 	addi	r5,sp,4
1010abd8:	8809883a 	mov	r4,r17
1010abdc:	803ee83a 	callr	r16
1010abe0:	003fe806 	br	1010ab84 <__alt_data_end+0xfffeab84>

1010abe4 <__ascii_wctomb>:
1010abe4:	28000526 	beq	r5,zero,1010abfc <__ascii_wctomb+0x18>
1010abe8:	00803fc4 	movi	r2,255
1010abec:	11800536 	bltu	r2,r6,1010ac04 <__ascii_wctomb+0x20>
1010abf0:	29800005 	stb	r6,0(r5)
1010abf4:	00800044 	movi	r2,1
1010abf8:	f800283a 	ret
1010abfc:	0005883a 	mov	r2,zero
1010ac00:	f800283a 	ret
1010ac04:	00802284 	movi	r2,138
1010ac08:	20800015 	stw	r2,0(r4)
1010ac0c:	00bfffc4 	movi	r2,-1
1010ac10:	f800283a 	ret

1010ac14 <_wctomb_r>:
1010ac14:	00840474 	movhi	r2,4113
1010ac18:	defff904 	addi	sp,sp,-28
1010ac1c:	108a5304 	addi	r2,r2,10572
1010ac20:	dfc00615 	stw	ra,24(sp)
1010ac24:	dc400515 	stw	r17,20(sp)
1010ac28:	dc000415 	stw	r16,16(sp)
1010ac2c:	3823883a 	mov	r17,r7
1010ac30:	14000017 	ldw	r16,0(r2)
1010ac34:	d9000115 	stw	r4,4(sp)
1010ac38:	d9400215 	stw	r5,8(sp)
1010ac3c:	d9800315 	stw	r6,12(sp)
1010ac40:	0106e6c0 	call	10106e6c <__locale_charset>
1010ac44:	d9800317 	ldw	r6,12(sp)
1010ac48:	d9400217 	ldw	r5,8(sp)
1010ac4c:	d9000117 	ldw	r4,4(sp)
1010ac50:	100f883a 	mov	r7,r2
1010ac54:	dc400015 	stw	r17,0(sp)
1010ac58:	803ee83a 	callr	r16
1010ac5c:	dfc00617 	ldw	ra,24(sp)
1010ac60:	dc400517 	ldw	r17,20(sp)
1010ac64:	dc000417 	ldw	r16,16(sp)
1010ac68:	dec00704 	addi	sp,sp,28
1010ac6c:	f800283a 	ret

1010ac70 <__udivdi3>:
1010ac70:	defff504 	addi	sp,sp,-44
1010ac74:	dcc00415 	stw	r19,16(sp)
1010ac78:	dc000115 	stw	r16,4(sp)
1010ac7c:	dfc00a15 	stw	ra,40(sp)
1010ac80:	df000915 	stw	fp,36(sp)
1010ac84:	ddc00815 	stw	r23,32(sp)
1010ac88:	dd800715 	stw	r22,28(sp)
1010ac8c:	dd400615 	stw	r21,24(sp)
1010ac90:	dd000515 	stw	r20,20(sp)
1010ac94:	dc800315 	stw	r18,12(sp)
1010ac98:	dc400215 	stw	r17,8(sp)
1010ac9c:	2027883a 	mov	r19,r4
1010aca0:	2821883a 	mov	r16,r5
1010aca4:	3800411e 	bne	r7,zero,1010adac <__udivdi3+0x13c>
1010aca8:	3023883a 	mov	r17,r6
1010acac:	2025883a 	mov	r18,r4
1010acb0:	2980522e 	bgeu	r5,r6,1010adfc <__udivdi3+0x18c>
1010acb4:	00bfffd4 	movui	r2,65535
1010acb8:	282d883a 	mov	r22,r5
1010acbc:	1180a836 	bltu	r2,r6,1010af60 <__udivdi3+0x2f0>
1010acc0:	00803fc4 	movi	r2,255
1010acc4:	1185803a 	cmpltu	r2,r2,r6
1010acc8:	100490fa 	slli	r2,r2,3
1010accc:	3086d83a 	srl	r3,r6,r2
1010acd0:	01040474 	movhi	r4,4113
1010acd4:	21034904 	addi	r4,r4,3364
1010acd8:	20c7883a 	add	r3,r4,r3
1010acdc:	18c00003 	ldbu	r3,0(r3)
1010ace0:	1885883a 	add	r2,r3,r2
1010ace4:	00c00804 	movi	r3,32
1010ace8:	1887c83a 	sub	r3,r3,r2
1010acec:	18000526 	beq	r3,zero,1010ad04 <__udivdi3+0x94>
1010acf0:	80e0983a 	sll	r16,r16,r3
1010acf4:	9884d83a 	srl	r2,r19,r2
1010acf8:	30e2983a 	sll	r17,r6,r3
1010acfc:	98e4983a 	sll	r18,r19,r3
1010ad00:	142cb03a 	or	r22,r2,r16
1010ad04:	882ad43a 	srli	r21,r17,16
1010ad08:	b009883a 	mov	r4,r22
1010ad0c:	8d3fffcc 	andi	r20,r17,65535
1010ad10:	a80b883a 	mov	r5,r21
1010ad14:	010b87c0 	call	1010b87c <__umodsi3>
1010ad18:	b009883a 	mov	r4,r22
1010ad1c:	a80b883a 	mov	r5,r21
1010ad20:	1027883a 	mov	r19,r2
1010ad24:	010b8180 	call	1010b818 <__udivsi3>
1010ad28:	102d883a 	mov	r22,r2
1010ad2c:	9826943a 	slli	r19,r19,16
1010ad30:	9004d43a 	srli	r2,r18,16
1010ad34:	a5a1383a 	mul	r16,r20,r22
1010ad38:	14c4b03a 	or	r2,r2,r19
1010ad3c:	1400052e 	bgeu	r2,r16,1010ad54 <__udivdi3+0xe4>
1010ad40:	1445883a 	add	r2,r2,r17
1010ad44:	b0ffffc4 	addi	r3,r22,-1
1010ad48:	14400136 	bltu	r2,r17,1010ad50 <__udivdi3+0xe0>
1010ad4c:	14012336 	bltu	r2,r16,1010b1dc <__udivdi3+0x56c>
1010ad50:	182d883a 	mov	r22,r3
1010ad54:	1421c83a 	sub	r16,r2,r16
1010ad58:	a80b883a 	mov	r5,r21
1010ad5c:	8009883a 	mov	r4,r16
1010ad60:	010b87c0 	call	1010b87c <__umodsi3>
1010ad64:	1027883a 	mov	r19,r2
1010ad68:	a80b883a 	mov	r5,r21
1010ad6c:	8009883a 	mov	r4,r16
1010ad70:	010b8180 	call	1010b818 <__udivsi3>
1010ad74:	9826943a 	slli	r19,r19,16
1010ad78:	a0a9383a 	mul	r20,r20,r2
1010ad7c:	94bfffcc 	andi	r18,r18,65535
1010ad80:	94e4b03a 	or	r18,r18,r19
1010ad84:	9500052e 	bgeu	r18,r20,1010ad9c <__udivdi3+0x12c>
1010ad88:	8ca5883a 	add	r18,r17,r18
1010ad8c:	10ffffc4 	addi	r3,r2,-1
1010ad90:	9440f136 	bltu	r18,r17,1010b158 <__udivdi3+0x4e8>
1010ad94:	9500f02e 	bgeu	r18,r20,1010b158 <__udivdi3+0x4e8>
1010ad98:	10bfff84 	addi	r2,r2,-2
1010ad9c:	b00c943a 	slli	r6,r22,16
1010ada0:	0007883a 	mov	r3,zero
1010ada4:	3084b03a 	or	r2,r6,r2
1010ada8:	00005906 	br	1010af10 <__udivdi3+0x2a0>
1010adac:	29c05636 	bltu	r5,r7,1010af08 <__udivdi3+0x298>
1010adb0:	00bfffd4 	movui	r2,65535
1010adb4:	11c0622e 	bgeu	r2,r7,1010af40 <__udivdi3+0x2d0>
1010adb8:	00804034 	movhi	r2,256
1010adbc:	10bfffc4 	addi	r2,r2,-1
1010adc0:	11c0ee36 	bltu	r2,r7,1010b17c <__udivdi3+0x50c>
1010adc4:	00800404 	movi	r2,16
1010adc8:	3886d83a 	srl	r3,r7,r2
1010adcc:	01040474 	movhi	r4,4113
1010add0:	21034904 	addi	r4,r4,3364
1010add4:	20c7883a 	add	r3,r4,r3
1010add8:	18c00003 	ldbu	r3,0(r3)
1010addc:	05400804 	movi	r21,32
1010ade0:	1885883a 	add	r2,r3,r2
1010ade4:	a8abc83a 	sub	r21,r21,r2
1010ade8:	a800621e 	bne	r21,zero,1010af74 <__udivdi3+0x304>
1010adec:	3c00e936 	bltu	r7,r16,1010b194 <__udivdi3+0x524>
1010adf0:	9985403a 	cmpgeu	r2,r19,r6
1010adf4:	0007883a 	mov	r3,zero
1010adf8:	00004506 	br	1010af10 <__udivdi3+0x2a0>
1010adfc:	3000041e 	bne	r6,zero,1010ae10 <__udivdi3+0x1a0>
1010ae00:	000b883a 	mov	r5,zero
1010ae04:	01000044 	movi	r4,1
1010ae08:	010b8180 	call	1010b818 <__udivsi3>
1010ae0c:	1023883a 	mov	r17,r2
1010ae10:	00bfffd4 	movui	r2,65535
1010ae14:	14404e2e 	bgeu	r2,r17,1010af50 <__udivdi3+0x2e0>
1010ae18:	00804034 	movhi	r2,256
1010ae1c:	10bfffc4 	addi	r2,r2,-1
1010ae20:	1440d836 	bltu	r2,r17,1010b184 <__udivdi3+0x514>
1010ae24:	00800404 	movi	r2,16
1010ae28:	8886d83a 	srl	r3,r17,r2
1010ae2c:	01040474 	movhi	r4,4113
1010ae30:	21034904 	addi	r4,r4,3364
1010ae34:	20c7883a 	add	r3,r4,r3
1010ae38:	18c00003 	ldbu	r3,0(r3)
1010ae3c:	1885883a 	add	r2,r3,r2
1010ae40:	00c00804 	movi	r3,32
1010ae44:	1887c83a 	sub	r3,r3,r2
1010ae48:	18008f1e 	bne	r3,zero,1010b088 <__udivdi3+0x418>
1010ae4c:	882ad43a 	srli	r21,r17,16
1010ae50:	8461c83a 	sub	r16,r16,r17
1010ae54:	8d3fffcc 	andi	r20,r17,65535
1010ae58:	00c00044 	movi	r3,1
1010ae5c:	8009883a 	mov	r4,r16
1010ae60:	a80b883a 	mov	r5,r21
1010ae64:	d8c00015 	stw	r3,0(sp)
1010ae68:	010b87c0 	call	1010b87c <__umodsi3>
1010ae6c:	8009883a 	mov	r4,r16
1010ae70:	a80b883a 	mov	r5,r21
1010ae74:	1027883a 	mov	r19,r2
1010ae78:	010b8180 	call	1010b818 <__udivsi3>
1010ae7c:	9826943a 	slli	r19,r19,16
1010ae80:	9008d43a 	srli	r4,r18,16
1010ae84:	1521383a 	mul	r16,r2,r20
1010ae88:	102d883a 	mov	r22,r2
1010ae8c:	24c8b03a 	or	r4,r4,r19
1010ae90:	d8c00017 	ldw	r3,0(sp)
1010ae94:	2400052e 	bgeu	r4,r16,1010aeac <__udivdi3+0x23c>
1010ae98:	2449883a 	add	r4,r4,r17
1010ae9c:	b0bfffc4 	addi	r2,r22,-1
1010aea0:	24400136 	bltu	r4,r17,1010aea8 <__udivdi3+0x238>
1010aea4:	2400ca36 	bltu	r4,r16,1010b1d0 <__udivdi3+0x560>
1010aea8:	102d883a 	mov	r22,r2
1010aeac:	2421c83a 	sub	r16,r4,r16
1010aeb0:	a80b883a 	mov	r5,r21
1010aeb4:	8009883a 	mov	r4,r16
1010aeb8:	d8c00015 	stw	r3,0(sp)
1010aebc:	010b87c0 	call	1010b87c <__umodsi3>
1010aec0:	1027883a 	mov	r19,r2
1010aec4:	a80b883a 	mov	r5,r21
1010aec8:	8009883a 	mov	r4,r16
1010aecc:	010b8180 	call	1010b818 <__udivsi3>
1010aed0:	9826943a 	slli	r19,r19,16
1010aed4:	1529383a 	mul	r20,r2,r20
1010aed8:	94bfffcc 	andi	r18,r18,65535
1010aedc:	94e4b03a 	or	r18,r18,r19
1010aee0:	d8c00017 	ldw	r3,0(sp)
1010aee4:	9500052e 	bgeu	r18,r20,1010aefc <__udivdi3+0x28c>
1010aee8:	8ca5883a 	add	r18,r17,r18
1010aeec:	113fffc4 	addi	r4,r2,-1
1010aef0:	94409736 	bltu	r18,r17,1010b150 <__udivdi3+0x4e0>
1010aef4:	9500962e 	bgeu	r18,r20,1010b150 <__udivdi3+0x4e0>
1010aef8:	10bfff84 	addi	r2,r2,-2
1010aefc:	b00c943a 	slli	r6,r22,16
1010af00:	3084b03a 	or	r2,r6,r2
1010af04:	00000206 	br	1010af10 <__udivdi3+0x2a0>
1010af08:	0007883a 	mov	r3,zero
1010af0c:	0005883a 	mov	r2,zero
1010af10:	dfc00a17 	ldw	ra,40(sp)
1010af14:	df000917 	ldw	fp,36(sp)
1010af18:	ddc00817 	ldw	r23,32(sp)
1010af1c:	dd800717 	ldw	r22,28(sp)
1010af20:	dd400617 	ldw	r21,24(sp)
1010af24:	dd000517 	ldw	r20,20(sp)
1010af28:	dcc00417 	ldw	r19,16(sp)
1010af2c:	dc800317 	ldw	r18,12(sp)
1010af30:	dc400217 	ldw	r17,8(sp)
1010af34:	dc000117 	ldw	r16,4(sp)
1010af38:	dec00b04 	addi	sp,sp,44
1010af3c:	f800283a 	ret
1010af40:	00803fc4 	movi	r2,255
1010af44:	11c5803a 	cmpltu	r2,r2,r7
1010af48:	100490fa 	slli	r2,r2,3
1010af4c:	003f9e06 	br	1010adc8 <__alt_data_end+0xfffeadc8>
1010af50:	00803fc4 	movi	r2,255
1010af54:	1445803a 	cmpltu	r2,r2,r17
1010af58:	100490fa 	slli	r2,r2,3
1010af5c:	003fb206 	br	1010ae28 <__alt_data_end+0xfffeae28>
1010af60:	00804034 	movhi	r2,256
1010af64:	10bfffc4 	addi	r2,r2,-1
1010af68:	11808836 	bltu	r2,r6,1010b18c <__udivdi3+0x51c>
1010af6c:	00800404 	movi	r2,16
1010af70:	003f5606 	br	1010accc <__alt_data_end+0xfffeaccc>
1010af74:	30aed83a 	srl	r23,r6,r2
1010af78:	3d4e983a 	sll	r7,r7,r21
1010af7c:	80acd83a 	srl	r22,r16,r2
1010af80:	9884d83a 	srl	r2,r19,r2
1010af84:	3deeb03a 	or	r23,r7,r23
1010af88:	b824d43a 	srli	r18,r23,16
1010af8c:	8560983a 	sll	r16,r16,r21
1010af90:	b009883a 	mov	r4,r22
1010af94:	900b883a 	mov	r5,r18
1010af98:	3568983a 	sll	r20,r6,r21
1010af9c:	1420b03a 	or	r16,r2,r16
1010afa0:	010b87c0 	call	1010b87c <__umodsi3>
1010afa4:	b009883a 	mov	r4,r22
1010afa8:	900b883a 	mov	r5,r18
1010afac:	1023883a 	mov	r17,r2
1010afb0:	010b8180 	call	1010b818 <__udivsi3>
1010afb4:	8808943a 	slli	r4,r17,16
1010afb8:	bf3fffcc 	andi	fp,r23,65535
1010afbc:	8006d43a 	srli	r3,r16,16
1010afc0:	e0a3383a 	mul	r17,fp,r2
1010afc4:	100d883a 	mov	r6,r2
1010afc8:	1906b03a 	or	r3,r3,r4
1010afcc:	1c40042e 	bgeu	r3,r17,1010afe0 <__udivdi3+0x370>
1010afd0:	1dc7883a 	add	r3,r3,r23
1010afd4:	10bfffc4 	addi	r2,r2,-1
1010afd8:	1dc0752e 	bgeu	r3,r23,1010b1b0 <__udivdi3+0x540>
1010afdc:	100d883a 	mov	r6,r2
1010afe0:	1c63c83a 	sub	r17,r3,r17
1010afe4:	900b883a 	mov	r5,r18
1010afe8:	8809883a 	mov	r4,r17
1010afec:	d9800015 	stw	r6,0(sp)
1010aff0:	010b87c0 	call	1010b87c <__umodsi3>
1010aff4:	102d883a 	mov	r22,r2
1010aff8:	8809883a 	mov	r4,r17
1010affc:	900b883a 	mov	r5,r18
1010b000:	010b8180 	call	1010b818 <__udivsi3>
1010b004:	b02c943a 	slli	r22,r22,16
1010b008:	e089383a 	mul	r4,fp,r2
1010b00c:	843fffcc 	andi	r16,r16,65535
1010b010:	85a0b03a 	or	r16,r16,r22
1010b014:	d9800017 	ldw	r6,0(sp)
1010b018:	8100042e 	bgeu	r16,r4,1010b02c <__udivdi3+0x3bc>
1010b01c:	85e1883a 	add	r16,r16,r23
1010b020:	10ffffc4 	addi	r3,r2,-1
1010b024:	85c05e2e 	bgeu	r16,r23,1010b1a0 <__udivdi3+0x530>
1010b028:	1805883a 	mov	r2,r3
1010b02c:	300c943a 	slli	r6,r6,16
1010b030:	a17fffcc 	andi	r5,r20,65535
1010b034:	a028d43a 	srli	r20,r20,16
1010b038:	3084b03a 	or	r2,r6,r2
1010b03c:	10ffffcc 	andi	r3,r2,65535
1010b040:	100cd43a 	srli	r6,r2,16
1010b044:	194f383a 	mul	r7,r3,r5
1010b048:	1d07383a 	mul	r3,r3,r20
1010b04c:	314b383a 	mul	r5,r6,r5
1010b050:	3810d43a 	srli	r8,r7,16
1010b054:	8121c83a 	sub	r16,r16,r4
1010b058:	1947883a 	add	r3,r3,r5
1010b05c:	40c7883a 	add	r3,r8,r3
1010b060:	350d383a 	mul	r6,r6,r20
1010b064:	1940022e 	bgeu	r3,r5,1010b070 <__udivdi3+0x400>
1010b068:	01000074 	movhi	r4,1
1010b06c:	310d883a 	add	r6,r6,r4
1010b070:	1828d43a 	srli	r20,r3,16
1010b074:	a18d883a 	add	r6,r20,r6
1010b078:	81803e36 	bltu	r16,r6,1010b174 <__udivdi3+0x504>
1010b07c:	81803826 	beq	r16,r6,1010b160 <__udivdi3+0x4f0>
1010b080:	0007883a 	mov	r3,zero
1010b084:	003fa206 	br	1010af10 <__alt_data_end+0xfffeaf10>
1010b088:	88e2983a 	sll	r17,r17,r3
1010b08c:	80a8d83a 	srl	r20,r16,r2
1010b090:	80e0983a 	sll	r16,r16,r3
1010b094:	882ad43a 	srli	r21,r17,16
1010b098:	9884d83a 	srl	r2,r19,r2
1010b09c:	a009883a 	mov	r4,r20
1010b0a0:	a80b883a 	mov	r5,r21
1010b0a4:	142eb03a 	or	r23,r2,r16
1010b0a8:	98e4983a 	sll	r18,r19,r3
1010b0ac:	010b87c0 	call	1010b87c <__umodsi3>
1010b0b0:	a009883a 	mov	r4,r20
1010b0b4:	a80b883a 	mov	r5,r21
1010b0b8:	1021883a 	mov	r16,r2
1010b0bc:	010b8180 	call	1010b818 <__udivsi3>
1010b0c0:	1039883a 	mov	fp,r2
1010b0c4:	8d3fffcc 	andi	r20,r17,65535
1010b0c8:	8020943a 	slli	r16,r16,16
1010b0cc:	b804d43a 	srli	r2,r23,16
1010b0d0:	a72d383a 	mul	r22,r20,fp
1010b0d4:	1404b03a 	or	r2,r2,r16
1010b0d8:	1580062e 	bgeu	r2,r22,1010b0f4 <__udivdi3+0x484>
1010b0dc:	1445883a 	add	r2,r2,r17
1010b0e0:	e0ffffc4 	addi	r3,fp,-1
1010b0e4:	14403836 	bltu	r2,r17,1010b1c8 <__udivdi3+0x558>
1010b0e8:	1580372e 	bgeu	r2,r22,1010b1c8 <__udivdi3+0x558>
1010b0ec:	e73fff84 	addi	fp,fp,-2
1010b0f0:	1445883a 	add	r2,r2,r17
1010b0f4:	15adc83a 	sub	r22,r2,r22
1010b0f8:	a80b883a 	mov	r5,r21
1010b0fc:	b009883a 	mov	r4,r22
1010b100:	010b87c0 	call	1010b87c <__umodsi3>
1010b104:	1027883a 	mov	r19,r2
1010b108:	b009883a 	mov	r4,r22
1010b10c:	a80b883a 	mov	r5,r21
1010b110:	010b8180 	call	1010b818 <__udivsi3>
1010b114:	9826943a 	slli	r19,r19,16
1010b118:	a0a1383a 	mul	r16,r20,r2
1010b11c:	b93fffcc 	andi	r4,r23,65535
1010b120:	24c8b03a 	or	r4,r4,r19
1010b124:	2400062e 	bgeu	r4,r16,1010b140 <__udivdi3+0x4d0>
1010b128:	2449883a 	add	r4,r4,r17
1010b12c:	10ffffc4 	addi	r3,r2,-1
1010b130:	24402336 	bltu	r4,r17,1010b1c0 <__udivdi3+0x550>
1010b134:	2400222e 	bgeu	r4,r16,1010b1c0 <__udivdi3+0x550>
1010b138:	10bfff84 	addi	r2,r2,-2
1010b13c:	2449883a 	add	r4,r4,r17
1010b140:	e038943a 	slli	fp,fp,16
1010b144:	2421c83a 	sub	r16,r4,r16
1010b148:	e086b03a 	or	r3,fp,r2
1010b14c:	003f4306 	br	1010ae5c <__alt_data_end+0xfffeae5c>
1010b150:	2005883a 	mov	r2,r4
1010b154:	003f6906 	br	1010aefc <__alt_data_end+0xfffeaefc>
1010b158:	1805883a 	mov	r2,r3
1010b15c:	003f0f06 	br	1010ad9c <__alt_data_end+0xfffead9c>
1010b160:	1806943a 	slli	r3,r3,16
1010b164:	9d66983a 	sll	r19,r19,r21
1010b168:	39ffffcc 	andi	r7,r7,65535
1010b16c:	19c7883a 	add	r3,r3,r7
1010b170:	98ffc32e 	bgeu	r19,r3,1010b080 <__alt_data_end+0xfffeb080>
1010b174:	10bfffc4 	addi	r2,r2,-1
1010b178:	003fc106 	br	1010b080 <__alt_data_end+0xfffeb080>
1010b17c:	00800604 	movi	r2,24
1010b180:	003f1106 	br	1010adc8 <__alt_data_end+0xfffeadc8>
1010b184:	00800604 	movi	r2,24
1010b188:	003f2706 	br	1010ae28 <__alt_data_end+0xfffeae28>
1010b18c:	00800604 	movi	r2,24
1010b190:	003ece06 	br	1010accc <__alt_data_end+0xfffeaccc>
1010b194:	0007883a 	mov	r3,zero
1010b198:	00800044 	movi	r2,1
1010b19c:	003f5c06 	br	1010af10 <__alt_data_end+0xfffeaf10>
1010b1a0:	813fa12e 	bgeu	r16,r4,1010b028 <__alt_data_end+0xfffeb028>
1010b1a4:	10bfff84 	addi	r2,r2,-2
1010b1a8:	85e1883a 	add	r16,r16,r23
1010b1ac:	003f9f06 	br	1010b02c <__alt_data_end+0xfffeb02c>
1010b1b0:	1c7f8a2e 	bgeu	r3,r17,1010afdc <__alt_data_end+0xfffeafdc>
1010b1b4:	31bfff84 	addi	r6,r6,-2
1010b1b8:	1dc7883a 	add	r3,r3,r23
1010b1bc:	003f8806 	br	1010afe0 <__alt_data_end+0xfffeafe0>
1010b1c0:	1805883a 	mov	r2,r3
1010b1c4:	003fde06 	br	1010b140 <__alt_data_end+0xfffeb140>
1010b1c8:	1839883a 	mov	fp,r3
1010b1cc:	003fc906 	br	1010b0f4 <__alt_data_end+0xfffeb0f4>
1010b1d0:	b5bfff84 	addi	r22,r22,-2
1010b1d4:	2449883a 	add	r4,r4,r17
1010b1d8:	003f3406 	br	1010aeac <__alt_data_end+0xfffeaeac>
1010b1dc:	b5bfff84 	addi	r22,r22,-2
1010b1e0:	1445883a 	add	r2,r2,r17
1010b1e4:	003edb06 	br	1010ad54 <__alt_data_end+0xfffead54>

1010b1e8 <__umoddi3>:
1010b1e8:	defff404 	addi	sp,sp,-48
1010b1ec:	df000a15 	stw	fp,40(sp)
1010b1f0:	dc400315 	stw	r17,12(sp)
1010b1f4:	dc000215 	stw	r16,8(sp)
1010b1f8:	dfc00b15 	stw	ra,44(sp)
1010b1fc:	ddc00915 	stw	r23,36(sp)
1010b200:	dd800815 	stw	r22,32(sp)
1010b204:	dd400715 	stw	r21,28(sp)
1010b208:	dd000615 	stw	r20,24(sp)
1010b20c:	dcc00515 	stw	r19,20(sp)
1010b210:	dc800415 	stw	r18,16(sp)
1010b214:	2021883a 	mov	r16,r4
1010b218:	2823883a 	mov	r17,r5
1010b21c:	2839883a 	mov	fp,r5
1010b220:	38003c1e 	bne	r7,zero,1010b314 <__umoddi3+0x12c>
1010b224:	3027883a 	mov	r19,r6
1010b228:	2029883a 	mov	r20,r4
1010b22c:	2980512e 	bgeu	r5,r6,1010b374 <__umoddi3+0x18c>
1010b230:	00bfffd4 	movui	r2,65535
1010b234:	11809a36 	bltu	r2,r6,1010b4a0 <__umoddi3+0x2b8>
1010b238:	01003fc4 	movi	r4,255
1010b23c:	2189803a 	cmpltu	r4,r4,r6
1010b240:	200890fa 	slli	r4,r4,3
1010b244:	3104d83a 	srl	r2,r6,r4
1010b248:	00c40474 	movhi	r3,4113
1010b24c:	18c34904 	addi	r3,r3,3364
1010b250:	1885883a 	add	r2,r3,r2
1010b254:	10c00003 	ldbu	r3,0(r2)
1010b258:	00800804 	movi	r2,32
1010b25c:	1909883a 	add	r4,r3,r4
1010b260:	1125c83a 	sub	r18,r2,r4
1010b264:	90000526 	beq	r18,zero,1010b27c <__umoddi3+0x94>
1010b268:	8ca2983a 	sll	r17,r17,r18
1010b26c:	8108d83a 	srl	r4,r16,r4
1010b270:	34a6983a 	sll	r19,r6,r18
1010b274:	84a8983a 	sll	r20,r16,r18
1010b278:	2478b03a 	or	fp,r4,r17
1010b27c:	982ed43a 	srli	r23,r19,16
1010b280:	e009883a 	mov	r4,fp
1010b284:	9dbfffcc 	andi	r22,r19,65535
1010b288:	b80b883a 	mov	r5,r23
1010b28c:	010b87c0 	call	1010b87c <__umodsi3>
1010b290:	e009883a 	mov	r4,fp
1010b294:	b80b883a 	mov	r5,r23
1010b298:	102b883a 	mov	r21,r2
1010b29c:	010b8180 	call	1010b818 <__udivsi3>
1010b2a0:	a806943a 	slli	r3,r21,16
1010b2a4:	a008d43a 	srli	r4,r20,16
1010b2a8:	b085383a 	mul	r2,r22,r2
1010b2ac:	20c8b03a 	or	r4,r4,r3
1010b2b0:	2080032e 	bgeu	r4,r2,1010b2c0 <__umoddi3+0xd8>
1010b2b4:	24c9883a 	add	r4,r4,r19
1010b2b8:	24c00136 	bltu	r4,r19,1010b2c0 <__umoddi3+0xd8>
1010b2bc:	20811036 	bltu	r4,r2,1010b700 <__umoddi3+0x518>
1010b2c0:	20abc83a 	sub	r21,r4,r2
1010b2c4:	b80b883a 	mov	r5,r23
1010b2c8:	a809883a 	mov	r4,r21
1010b2cc:	010b87c0 	call	1010b87c <__umodsi3>
1010b2d0:	1023883a 	mov	r17,r2
1010b2d4:	b80b883a 	mov	r5,r23
1010b2d8:	a809883a 	mov	r4,r21
1010b2dc:	010b8180 	call	1010b818 <__udivsi3>
1010b2e0:	8822943a 	slli	r17,r17,16
1010b2e4:	b085383a 	mul	r2,r22,r2
1010b2e8:	a0ffffcc 	andi	r3,r20,65535
1010b2ec:	1c46b03a 	or	r3,r3,r17
1010b2f0:	1880042e 	bgeu	r3,r2,1010b304 <__umoddi3+0x11c>
1010b2f4:	1cc7883a 	add	r3,r3,r19
1010b2f8:	1cc00236 	bltu	r3,r19,1010b304 <__umoddi3+0x11c>
1010b2fc:	1880012e 	bgeu	r3,r2,1010b304 <__umoddi3+0x11c>
1010b300:	1cc7883a 	add	r3,r3,r19
1010b304:	1885c83a 	sub	r2,r3,r2
1010b308:	1484d83a 	srl	r2,r2,r18
1010b30c:	0007883a 	mov	r3,zero
1010b310:	00004f06 	br	1010b450 <__umoddi3+0x268>
1010b314:	29c04c36 	bltu	r5,r7,1010b448 <__umoddi3+0x260>
1010b318:	00bfffd4 	movui	r2,65535
1010b31c:	11c0582e 	bgeu	r2,r7,1010b480 <__umoddi3+0x298>
1010b320:	00804034 	movhi	r2,256
1010b324:	10bfffc4 	addi	r2,r2,-1
1010b328:	11c0e736 	bltu	r2,r7,1010b6c8 <__umoddi3+0x4e0>
1010b32c:	01000404 	movi	r4,16
1010b330:	3904d83a 	srl	r2,r7,r4
1010b334:	00c40474 	movhi	r3,4113
1010b338:	18c34904 	addi	r3,r3,3364
1010b33c:	1885883a 	add	r2,r3,r2
1010b340:	14c00003 	ldbu	r19,0(r2)
1010b344:	00c00804 	movi	r3,32
1010b348:	9927883a 	add	r19,r19,r4
1010b34c:	1ce9c83a 	sub	r20,r3,r19
1010b350:	a000581e 	bne	r20,zero,1010b4b4 <__umoddi3+0x2cc>
1010b354:	3c400136 	bltu	r7,r17,1010b35c <__umoddi3+0x174>
1010b358:	8180eb36 	bltu	r16,r6,1010b708 <__umoddi3+0x520>
1010b35c:	8185c83a 	sub	r2,r16,r6
1010b360:	89e3c83a 	sub	r17,r17,r7
1010b364:	8089803a 	cmpltu	r4,r16,r2
1010b368:	8939c83a 	sub	fp,r17,r4
1010b36c:	e007883a 	mov	r3,fp
1010b370:	00003706 	br	1010b450 <__umoddi3+0x268>
1010b374:	3000041e 	bne	r6,zero,1010b388 <__umoddi3+0x1a0>
1010b378:	000b883a 	mov	r5,zero
1010b37c:	01000044 	movi	r4,1
1010b380:	010b8180 	call	1010b818 <__udivsi3>
1010b384:	1027883a 	mov	r19,r2
1010b388:	00bfffd4 	movui	r2,65535
1010b38c:	14c0402e 	bgeu	r2,r19,1010b490 <__umoddi3+0x2a8>
1010b390:	00804034 	movhi	r2,256
1010b394:	10bfffc4 	addi	r2,r2,-1
1010b398:	14c0cd36 	bltu	r2,r19,1010b6d0 <__umoddi3+0x4e8>
1010b39c:	00800404 	movi	r2,16
1010b3a0:	9886d83a 	srl	r3,r19,r2
1010b3a4:	01040474 	movhi	r4,4113
1010b3a8:	21034904 	addi	r4,r4,3364
1010b3ac:	20c7883a 	add	r3,r4,r3
1010b3b0:	18c00003 	ldbu	r3,0(r3)
1010b3b4:	1887883a 	add	r3,r3,r2
1010b3b8:	00800804 	movi	r2,32
1010b3bc:	10e5c83a 	sub	r18,r2,r3
1010b3c0:	9000901e 	bne	r18,zero,1010b604 <__umoddi3+0x41c>
1010b3c4:	982cd43a 	srli	r22,r19,16
1010b3c8:	8ce3c83a 	sub	r17,r17,r19
1010b3cc:	9d7fffcc 	andi	r21,r19,65535
1010b3d0:	b00b883a 	mov	r5,r22
1010b3d4:	8809883a 	mov	r4,r17
1010b3d8:	010b87c0 	call	1010b87c <__umodsi3>
1010b3dc:	8809883a 	mov	r4,r17
1010b3e0:	b00b883a 	mov	r5,r22
1010b3e4:	1021883a 	mov	r16,r2
1010b3e8:	010b8180 	call	1010b818 <__udivsi3>
1010b3ec:	8006943a 	slli	r3,r16,16
1010b3f0:	a008d43a 	srli	r4,r20,16
1010b3f4:	1545383a 	mul	r2,r2,r21
1010b3f8:	20c8b03a 	or	r4,r4,r3
1010b3fc:	2080042e 	bgeu	r4,r2,1010b410 <__umoddi3+0x228>
1010b400:	24c9883a 	add	r4,r4,r19
1010b404:	24c00236 	bltu	r4,r19,1010b410 <__umoddi3+0x228>
1010b408:	2080012e 	bgeu	r4,r2,1010b410 <__umoddi3+0x228>
1010b40c:	24c9883a 	add	r4,r4,r19
1010b410:	20a1c83a 	sub	r16,r4,r2
1010b414:	b00b883a 	mov	r5,r22
1010b418:	8009883a 	mov	r4,r16
1010b41c:	010b87c0 	call	1010b87c <__umodsi3>
1010b420:	1023883a 	mov	r17,r2
1010b424:	b00b883a 	mov	r5,r22
1010b428:	8009883a 	mov	r4,r16
1010b42c:	010b8180 	call	1010b818 <__udivsi3>
1010b430:	8822943a 	slli	r17,r17,16
1010b434:	1545383a 	mul	r2,r2,r21
1010b438:	a53fffcc 	andi	r20,r20,65535
1010b43c:	a446b03a 	or	r3,r20,r17
1010b440:	18bfb02e 	bgeu	r3,r2,1010b304 <__alt_data_end+0xfffeb304>
1010b444:	003fab06 	br	1010b2f4 <__alt_data_end+0xfffeb2f4>
1010b448:	2005883a 	mov	r2,r4
1010b44c:	2807883a 	mov	r3,r5
1010b450:	dfc00b17 	ldw	ra,44(sp)
1010b454:	df000a17 	ldw	fp,40(sp)
1010b458:	ddc00917 	ldw	r23,36(sp)
1010b45c:	dd800817 	ldw	r22,32(sp)
1010b460:	dd400717 	ldw	r21,28(sp)
1010b464:	dd000617 	ldw	r20,24(sp)
1010b468:	dcc00517 	ldw	r19,20(sp)
1010b46c:	dc800417 	ldw	r18,16(sp)
1010b470:	dc400317 	ldw	r17,12(sp)
1010b474:	dc000217 	ldw	r16,8(sp)
1010b478:	dec00c04 	addi	sp,sp,48
1010b47c:	f800283a 	ret
1010b480:	04c03fc4 	movi	r19,255
1010b484:	99c9803a 	cmpltu	r4,r19,r7
1010b488:	200890fa 	slli	r4,r4,3
1010b48c:	003fa806 	br	1010b330 <__alt_data_end+0xfffeb330>
1010b490:	00803fc4 	movi	r2,255
1010b494:	14c5803a 	cmpltu	r2,r2,r19
1010b498:	100490fa 	slli	r2,r2,3
1010b49c:	003fc006 	br	1010b3a0 <__alt_data_end+0xfffeb3a0>
1010b4a0:	00804034 	movhi	r2,256
1010b4a4:	10bfffc4 	addi	r2,r2,-1
1010b4a8:	11808b36 	bltu	r2,r6,1010b6d8 <__umoddi3+0x4f0>
1010b4ac:	01000404 	movi	r4,16
1010b4b0:	003f6406 	br	1010b244 <__alt_data_end+0xfffeb244>
1010b4b4:	34c4d83a 	srl	r2,r6,r19
1010b4b8:	3d0e983a 	sll	r7,r7,r20
1010b4bc:	8cf8d83a 	srl	fp,r17,r19
1010b4c0:	8d10983a 	sll	r8,r17,r20
1010b4c4:	38aab03a 	or	r21,r7,r2
1010b4c8:	a82cd43a 	srli	r22,r21,16
1010b4cc:	84e2d83a 	srl	r17,r16,r19
1010b4d0:	e009883a 	mov	r4,fp
1010b4d4:	b00b883a 	mov	r5,r22
1010b4d8:	8a22b03a 	or	r17,r17,r8
1010b4dc:	3524983a 	sll	r18,r6,r20
1010b4e0:	010b87c0 	call	1010b87c <__umodsi3>
1010b4e4:	e009883a 	mov	r4,fp
1010b4e8:	b00b883a 	mov	r5,r22
1010b4ec:	102f883a 	mov	r23,r2
1010b4f0:	010b8180 	call	1010b818 <__udivsi3>
1010b4f4:	100d883a 	mov	r6,r2
1010b4f8:	b808943a 	slli	r4,r23,16
1010b4fc:	aa3fffcc 	andi	r8,r21,65535
1010b500:	8804d43a 	srli	r2,r17,16
1010b504:	41af383a 	mul	r23,r8,r6
1010b508:	8520983a 	sll	r16,r16,r20
1010b50c:	1104b03a 	or	r2,r2,r4
1010b510:	15c0042e 	bgeu	r2,r23,1010b524 <__umoddi3+0x33c>
1010b514:	1545883a 	add	r2,r2,r21
1010b518:	30ffffc4 	addi	r3,r6,-1
1010b51c:	1540742e 	bgeu	r2,r21,1010b6f0 <__umoddi3+0x508>
1010b520:	180d883a 	mov	r6,r3
1010b524:	15efc83a 	sub	r23,r2,r23
1010b528:	b00b883a 	mov	r5,r22
1010b52c:	b809883a 	mov	r4,r23
1010b530:	d9800115 	stw	r6,4(sp)
1010b534:	da000015 	stw	r8,0(sp)
1010b538:	010b87c0 	call	1010b87c <__umodsi3>
1010b53c:	b00b883a 	mov	r5,r22
1010b540:	b809883a 	mov	r4,r23
1010b544:	1039883a 	mov	fp,r2
1010b548:	010b8180 	call	1010b818 <__udivsi3>
1010b54c:	da000017 	ldw	r8,0(sp)
1010b550:	e038943a 	slli	fp,fp,16
1010b554:	100b883a 	mov	r5,r2
1010b558:	4089383a 	mul	r4,r8,r2
1010b55c:	8a3fffcc 	andi	r8,r17,65535
1010b560:	4710b03a 	or	r8,r8,fp
1010b564:	d9800117 	ldw	r6,4(sp)
1010b568:	4100042e 	bgeu	r8,r4,1010b57c <__umoddi3+0x394>
1010b56c:	4551883a 	add	r8,r8,r21
1010b570:	10bfffc4 	addi	r2,r2,-1
1010b574:	45405a2e 	bgeu	r8,r21,1010b6e0 <__umoddi3+0x4f8>
1010b578:	100b883a 	mov	r5,r2
1010b57c:	300c943a 	slli	r6,r6,16
1010b580:	91ffffcc 	andi	r7,r18,65535
1010b584:	9004d43a 	srli	r2,r18,16
1010b588:	314cb03a 	or	r6,r6,r5
1010b58c:	317fffcc 	andi	r5,r6,65535
1010b590:	300cd43a 	srli	r6,r6,16
1010b594:	29d3383a 	mul	r9,r5,r7
1010b598:	288b383a 	mul	r5,r5,r2
1010b59c:	31cf383a 	mul	r7,r6,r7
1010b5a0:	4806d43a 	srli	r3,r9,16
1010b5a4:	4111c83a 	sub	r8,r8,r4
1010b5a8:	29cb883a 	add	r5,r5,r7
1010b5ac:	194b883a 	add	r5,r3,r5
1010b5b0:	3085383a 	mul	r2,r6,r2
1010b5b4:	29c0022e 	bgeu	r5,r7,1010b5c0 <__umoddi3+0x3d8>
1010b5b8:	00c00074 	movhi	r3,1
1010b5bc:	10c5883a 	add	r2,r2,r3
1010b5c0:	2808d43a 	srli	r4,r5,16
1010b5c4:	280a943a 	slli	r5,r5,16
1010b5c8:	4a7fffcc 	andi	r9,r9,65535
1010b5cc:	2085883a 	add	r2,r4,r2
1010b5d0:	2a4b883a 	add	r5,r5,r9
1010b5d4:	40803636 	bltu	r8,r2,1010b6b0 <__umoddi3+0x4c8>
1010b5d8:	40804d26 	beq	r8,r2,1010b710 <__umoddi3+0x528>
1010b5dc:	4089c83a 	sub	r4,r8,r2
1010b5e0:	280f883a 	mov	r7,r5
1010b5e4:	81cfc83a 	sub	r7,r16,r7
1010b5e8:	81c7803a 	cmpltu	r3,r16,r7
1010b5ec:	20c7c83a 	sub	r3,r4,r3
1010b5f0:	1cc4983a 	sll	r2,r3,r19
1010b5f4:	3d0ed83a 	srl	r7,r7,r20
1010b5f8:	1d06d83a 	srl	r3,r3,r20
1010b5fc:	11c4b03a 	or	r2,r2,r7
1010b600:	003f9306 	br	1010b450 <__alt_data_end+0xfffeb450>
1010b604:	9ca6983a 	sll	r19,r19,r18
1010b608:	88e8d83a 	srl	r20,r17,r3
1010b60c:	80c4d83a 	srl	r2,r16,r3
1010b610:	982cd43a 	srli	r22,r19,16
1010b614:	8ca2983a 	sll	r17,r17,r18
1010b618:	a009883a 	mov	r4,r20
1010b61c:	b00b883a 	mov	r5,r22
1010b620:	1478b03a 	or	fp,r2,r17
1010b624:	010b87c0 	call	1010b87c <__umodsi3>
1010b628:	a009883a 	mov	r4,r20
1010b62c:	b00b883a 	mov	r5,r22
1010b630:	1023883a 	mov	r17,r2
1010b634:	010b8180 	call	1010b818 <__udivsi3>
1010b638:	9d7fffcc 	andi	r21,r19,65535
1010b63c:	880a943a 	slli	r5,r17,16
1010b640:	e008d43a 	srli	r4,fp,16
1010b644:	a885383a 	mul	r2,r21,r2
1010b648:	84a8983a 	sll	r20,r16,r18
1010b64c:	2148b03a 	or	r4,r4,r5
1010b650:	2080042e 	bgeu	r4,r2,1010b664 <__umoddi3+0x47c>
1010b654:	24c9883a 	add	r4,r4,r19
1010b658:	24c00236 	bltu	r4,r19,1010b664 <__umoddi3+0x47c>
1010b65c:	2080012e 	bgeu	r4,r2,1010b664 <__umoddi3+0x47c>
1010b660:	24c9883a 	add	r4,r4,r19
1010b664:	20a3c83a 	sub	r17,r4,r2
1010b668:	b00b883a 	mov	r5,r22
1010b66c:	8809883a 	mov	r4,r17
1010b670:	010b87c0 	call	1010b87c <__umodsi3>
1010b674:	102f883a 	mov	r23,r2
1010b678:	8809883a 	mov	r4,r17
1010b67c:	b00b883a 	mov	r5,r22
1010b680:	010b8180 	call	1010b818 <__udivsi3>
1010b684:	b82e943a 	slli	r23,r23,16
1010b688:	a885383a 	mul	r2,r21,r2
1010b68c:	e13fffcc 	andi	r4,fp,65535
1010b690:	25c8b03a 	or	r4,r4,r23
1010b694:	2080042e 	bgeu	r4,r2,1010b6a8 <__umoddi3+0x4c0>
1010b698:	24c9883a 	add	r4,r4,r19
1010b69c:	24c00236 	bltu	r4,r19,1010b6a8 <__umoddi3+0x4c0>
1010b6a0:	2080012e 	bgeu	r4,r2,1010b6a8 <__umoddi3+0x4c0>
1010b6a4:	24c9883a 	add	r4,r4,r19
1010b6a8:	20a3c83a 	sub	r17,r4,r2
1010b6ac:	003f4806 	br	1010b3d0 <__alt_data_end+0xfffeb3d0>
1010b6b0:	2c8fc83a 	sub	r7,r5,r18
1010b6b4:	1545c83a 	sub	r2,r2,r21
1010b6b8:	29cb803a 	cmpltu	r5,r5,r7
1010b6bc:	1145c83a 	sub	r2,r2,r5
1010b6c0:	4089c83a 	sub	r4,r8,r2
1010b6c4:	003fc706 	br	1010b5e4 <__alt_data_end+0xfffeb5e4>
1010b6c8:	01000604 	movi	r4,24
1010b6cc:	003f1806 	br	1010b330 <__alt_data_end+0xfffeb330>
1010b6d0:	00800604 	movi	r2,24
1010b6d4:	003f3206 	br	1010b3a0 <__alt_data_end+0xfffeb3a0>
1010b6d8:	01000604 	movi	r4,24
1010b6dc:	003ed906 	br	1010b244 <__alt_data_end+0xfffeb244>
1010b6e0:	413fa52e 	bgeu	r8,r4,1010b578 <__alt_data_end+0xfffeb578>
1010b6e4:	297fff84 	addi	r5,r5,-2
1010b6e8:	4551883a 	add	r8,r8,r21
1010b6ec:	003fa306 	br	1010b57c <__alt_data_end+0xfffeb57c>
1010b6f0:	15ff8b2e 	bgeu	r2,r23,1010b520 <__alt_data_end+0xfffeb520>
1010b6f4:	31bfff84 	addi	r6,r6,-2
1010b6f8:	1545883a 	add	r2,r2,r21
1010b6fc:	003f8906 	br	1010b524 <__alt_data_end+0xfffeb524>
1010b700:	24c9883a 	add	r4,r4,r19
1010b704:	003eee06 	br	1010b2c0 <__alt_data_end+0xfffeb2c0>
1010b708:	8005883a 	mov	r2,r16
1010b70c:	003f1706 	br	1010b36c <__alt_data_end+0xfffeb36c>
1010b710:	817fe736 	bltu	r16,r5,1010b6b0 <__alt_data_end+0xfffeb6b0>
1010b714:	280f883a 	mov	r7,r5
1010b718:	0009883a 	mov	r4,zero
1010b71c:	003fb106 	br	1010b5e4 <__alt_data_end+0xfffeb5e4>

1010b720 <__divsi3>:
1010b720:	20001b16 	blt	r4,zero,1010b790 <__divsi3+0x70>
1010b724:	000f883a 	mov	r7,zero
1010b728:	28001616 	blt	r5,zero,1010b784 <__divsi3+0x64>
1010b72c:	200d883a 	mov	r6,r4
1010b730:	29001a2e 	bgeu	r5,r4,1010b79c <__divsi3+0x7c>
1010b734:	00800804 	movi	r2,32
1010b738:	00c00044 	movi	r3,1
1010b73c:	00000106 	br	1010b744 <__divsi3+0x24>
1010b740:	10000d26 	beq	r2,zero,1010b778 <__divsi3+0x58>
1010b744:	294b883a 	add	r5,r5,r5
1010b748:	10bfffc4 	addi	r2,r2,-1
1010b74c:	18c7883a 	add	r3,r3,r3
1010b750:	293ffb36 	bltu	r5,r4,1010b740 <__alt_data_end+0xfffeb740>
1010b754:	0005883a 	mov	r2,zero
1010b758:	18000726 	beq	r3,zero,1010b778 <__divsi3+0x58>
1010b75c:	0005883a 	mov	r2,zero
1010b760:	31400236 	bltu	r6,r5,1010b76c <__divsi3+0x4c>
1010b764:	314dc83a 	sub	r6,r6,r5
1010b768:	10c4b03a 	or	r2,r2,r3
1010b76c:	1806d07a 	srli	r3,r3,1
1010b770:	280ad07a 	srli	r5,r5,1
1010b774:	183ffa1e 	bne	r3,zero,1010b760 <__alt_data_end+0xfffeb760>
1010b778:	38000126 	beq	r7,zero,1010b780 <__divsi3+0x60>
1010b77c:	0085c83a 	sub	r2,zero,r2
1010b780:	f800283a 	ret
1010b784:	014bc83a 	sub	r5,zero,r5
1010b788:	39c0005c 	xori	r7,r7,1
1010b78c:	003fe706 	br	1010b72c <__alt_data_end+0xfffeb72c>
1010b790:	0109c83a 	sub	r4,zero,r4
1010b794:	01c00044 	movi	r7,1
1010b798:	003fe306 	br	1010b728 <__alt_data_end+0xfffeb728>
1010b79c:	00c00044 	movi	r3,1
1010b7a0:	003fee06 	br	1010b75c <__alt_data_end+0xfffeb75c>

1010b7a4 <__modsi3>:
1010b7a4:	20001716 	blt	r4,zero,1010b804 <__modsi3+0x60>
1010b7a8:	000f883a 	mov	r7,zero
1010b7ac:	2005883a 	mov	r2,r4
1010b7b0:	28001216 	blt	r5,zero,1010b7fc <__modsi3+0x58>
1010b7b4:	2900162e 	bgeu	r5,r4,1010b810 <__modsi3+0x6c>
1010b7b8:	01800804 	movi	r6,32
1010b7bc:	00c00044 	movi	r3,1
1010b7c0:	00000106 	br	1010b7c8 <__modsi3+0x24>
1010b7c4:	30000a26 	beq	r6,zero,1010b7f0 <__modsi3+0x4c>
1010b7c8:	294b883a 	add	r5,r5,r5
1010b7cc:	31bfffc4 	addi	r6,r6,-1
1010b7d0:	18c7883a 	add	r3,r3,r3
1010b7d4:	293ffb36 	bltu	r5,r4,1010b7c4 <__alt_data_end+0xfffeb7c4>
1010b7d8:	18000526 	beq	r3,zero,1010b7f0 <__modsi3+0x4c>
1010b7dc:	1806d07a 	srli	r3,r3,1
1010b7e0:	11400136 	bltu	r2,r5,1010b7e8 <__modsi3+0x44>
1010b7e4:	1145c83a 	sub	r2,r2,r5
1010b7e8:	280ad07a 	srli	r5,r5,1
1010b7ec:	183ffb1e 	bne	r3,zero,1010b7dc <__alt_data_end+0xfffeb7dc>
1010b7f0:	38000126 	beq	r7,zero,1010b7f8 <__modsi3+0x54>
1010b7f4:	0085c83a 	sub	r2,zero,r2
1010b7f8:	f800283a 	ret
1010b7fc:	014bc83a 	sub	r5,zero,r5
1010b800:	003fec06 	br	1010b7b4 <__alt_data_end+0xfffeb7b4>
1010b804:	0109c83a 	sub	r4,zero,r4
1010b808:	01c00044 	movi	r7,1
1010b80c:	003fe706 	br	1010b7ac <__alt_data_end+0xfffeb7ac>
1010b810:	00c00044 	movi	r3,1
1010b814:	003ff106 	br	1010b7dc <__alt_data_end+0xfffeb7dc>

1010b818 <__udivsi3>:
1010b818:	200d883a 	mov	r6,r4
1010b81c:	2900152e 	bgeu	r5,r4,1010b874 <__udivsi3+0x5c>
1010b820:	28001416 	blt	r5,zero,1010b874 <__udivsi3+0x5c>
1010b824:	00800804 	movi	r2,32
1010b828:	00c00044 	movi	r3,1
1010b82c:	00000206 	br	1010b838 <__udivsi3+0x20>
1010b830:	10000e26 	beq	r2,zero,1010b86c <__udivsi3+0x54>
1010b834:	28000516 	blt	r5,zero,1010b84c <__udivsi3+0x34>
1010b838:	294b883a 	add	r5,r5,r5
1010b83c:	10bfffc4 	addi	r2,r2,-1
1010b840:	18c7883a 	add	r3,r3,r3
1010b844:	293ffa36 	bltu	r5,r4,1010b830 <__alt_data_end+0xfffeb830>
1010b848:	18000826 	beq	r3,zero,1010b86c <__udivsi3+0x54>
1010b84c:	0005883a 	mov	r2,zero
1010b850:	31400236 	bltu	r6,r5,1010b85c <__udivsi3+0x44>
1010b854:	314dc83a 	sub	r6,r6,r5
1010b858:	10c4b03a 	or	r2,r2,r3
1010b85c:	1806d07a 	srli	r3,r3,1
1010b860:	280ad07a 	srli	r5,r5,1
1010b864:	183ffa1e 	bne	r3,zero,1010b850 <__alt_data_end+0xfffeb850>
1010b868:	f800283a 	ret
1010b86c:	0005883a 	mov	r2,zero
1010b870:	f800283a 	ret
1010b874:	00c00044 	movi	r3,1
1010b878:	003ff406 	br	1010b84c <__alt_data_end+0xfffeb84c>

1010b87c <__umodsi3>:
1010b87c:	2005883a 	mov	r2,r4
1010b880:	2900122e 	bgeu	r5,r4,1010b8cc <__umodsi3+0x50>
1010b884:	28001116 	blt	r5,zero,1010b8cc <__umodsi3+0x50>
1010b888:	01800804 	movi	r6,32
1010b88c:	00c00044 	movi	r3,1
1010b890:	00000206 	br	1010b89c <__umodsi3+0x20>
1010b894:	30000c26 	beq	r6,zero,1010b8c8 <__umodsi3+0x4c>
1010b898:	28000516 	blt	r5,zero,1010b8b0 <__umodsi3+0x34>
1010b89c:	294b883a 	add	r5,r5,r5
1010b8a0:	31bfffc4 	addi	r6,r6,-1
1010b8a4:	18c7883a 	add	r3,r3,r3
1010b8a8:	293ffa36 	bltu	r5,r4,1010b894 <__alt_data_end+0xfffeb894>
1010b8ac:	18000626 	beq	r3,zero,1010b8c8 <__umodsi3+0x4c>
1010b8b0:	1806d07a 	srli	r3,r3,1
1010b8b4:	11400136 	bltu	r2,r5,1010b8bc <__umodsi3+0x40>
1010b8b8:	1145c83a 	sub	r2,r2,r5
1010b8bc:	280ad07a 	srli	r5,r5,1
1010b8c0:	183ffb1e 	bne	r3,zero,1010b8b0 <__alt_data_end+0xfffeb8b0>
1010b8c4:	f800283a 	ret
1010b8c8:	f800283a 	ret
1010b8cc:	00c00044 	movi	r3,1
1010b8d0:	003ff706 	br	1010b8b0 <__alt_data_end+0xfffeb8b0>

1010b8d4 <__adddf3>:
1010b8d4:	02c00434 	movhi	r11,16
1010b8d8:	5affffc4 	addi	r11,r11,-1
1010b8dc:	2806d7fa 	srli	r3,r5,31
1010b8e0:	2ad4703a 	and	r10,r5,r11
1010b8e4:	3ad2703a 	and	r9,r7,r11
1010b8e8:	3804d53a 	srli	r2,r7,20
1010b8ec:	3018d77a 	srli	r12,r6,29
1010b8f0:	280ad53a 	srli	r5,r5,20
1010b8f4:	501490fa 	slli	r10,r10,3
1010b8f8:	2010d77a 	srli	r8,r4,29
1010b8fc:	481290fa 	slli	r9,r9,3
1010b900:	380ed7fa 	srli	r7,r7,31
1010b904:	defffb04 	addi	sp,sp,-20
1010b908:	dc800215 	stw	r18,8(sp)
1010b90c:	dc400115 	stw	r17,4(sp)
1010b910:	dc000015 	stw	r16,0(sp)
1010b914:	dfc00415 	stw	ra,16(sp)
1010b918:	dcc00315 	stw	r19,12(sp)
1010b91c:	1c803fcc 	andi	r18,r3,255
1010b920:	2c01ffcc 	andi	r16,r5,2047
1010b924:	5210b03a 	or	r8,r10,r8
1010b928:	202290fa 	slli	r17,r4,3
1010b92c:	1081ffcc 	andi	r2,r2,2047
1010b930:	4b12b03a 	or	r9,r9,r12
1010b934:	300c90fa 	slli	r6,r6,3
1010b938:	91c07526 	beq	r18,r7,1010bb10 <__adddf3+0x23c>
1010b93c:	8087c83a 	sub	r3,r16,r2
1010b940:	00c0ab0e 	bge	zero,r3,1010bbf0 <__adddf3+0x31c>
1010b944:	10002a1e 	bne	r2,zero,1010b9f0 <__adddf3+0x11c>
1010b948:	4984b03a 	or	r2,r9,r6
1010b94c:	1000961e 	bne	r2,zero,1010bba8 <__adddf3+0x2d4>
1010b950:	888001cc 	andi	r2,r17,7
1010b954:	10000726 	beq	r2,zero,1010b974 <__adddf3+0xa0>
1010b958:	888003cc 	andi	r2,r17,15
1010b95c:	00c00104 	movi	r3,4
1010b960:	10c00426 	beq	r2,r3,1010b974 <__adddf3+0xa0>
1010b964:	88c7883a 	add	r3,r17,r3
1010b968:	1c63803a 	cmpltu	r17,r3,r17
1010b96c:	4451883a 	add	r8,r8,r17
1010b970:	1823883a 	mov	r17,r3
1010b974:	4080202c 	andhi	r2,r8,128
1010b978:	10005926 	beq	r2,zero,1010bae0 <__adddf3+0x20c>
1010b97c:	84000044 	addi	r16,r16,1
1010b980:	0081ffc4 	movi	r2,2047
1010b984:	8080ba26 	beq	r16,r2,1010bc70 <__adddf3+0x39c>
1010b988:	00bfe034 	movhi	r2,65408
1010b98c:	10bfffc4 	addi	r2,r2,-1
1010b990:	4090703a 	and	r8,r8,r2
1010b994:	4004977a 	slli	r2,r8,29
1010b998:	4010927a 	slli	r8,r8,9
1010b99c:	8822d0fa 	srli	r17,r17,3
1010b9a0:	8401ffcc 	andi	r16,r16,2047
1010b9a4:	4010d33a 	srli	r8,r8,12
1010b9a8:	9007883a 	mov	r3,r18
1010b9ac:	1444b03a 	or	r2,r2,r17
1010b9b0:	8401ffcc 	andi	r16,r16,2047
1010b9b4:	8020953a 	slli	r16,r16,20
1010b9b8:	18c03fcc 	andi	r3,r3,255
1010b9bc:	01000434 	movhi	r4,16
1010b9c0:	213fffc4 	addi	r4,r4,-1
1010b9c4:	180697fa 	slli	r3,r3,31
1010b9c8:	4110703a 	and	r8,r8,r4
1010b9cc:	4410b03a 	or	r8,r8,r16
1010b9d0:	40c6b03a 	or	r3,r8,r3
1010b9d4:	dfc00417 	ldw	ra,16(sp)
1010b9d8:	dcc00317 	ldw	r19,12(sp)
1010b9dc:	dc800217 	ldw	r18,8(sp)
1010b9e0:	dc400117 	ldw	r17,4(sp)
1010b9e4:	dc000017 	ldw	r16,0(sp)
1010b9e8:	dec00504 	addi	sp,sp,20
1010b9ec:	f800283a 	ret
1010b9f0:	0081ffc4 	movi	r2,2047
1010b9f4:	80bfd626 	beq	r16,r2,1010b950 <__alt_data_end+0xfffeb950>
1010b9f8:	4a402034 	orhi	r9,r9,128
1010b9fc:	00800e04 	movi	r2,56
1010ba00:	10c09f16 	blt	r2,r3,1010bc80 <__adddf3+0x3ac>
1010ba04:	008007c4 	movi	r2,31
1010ba08:	10c0c216 	blt	r2,r3,1010bd14 <__adddf3+0x440>
1010ba0c:	00800804 	movi	r2,32
1010ba10:	10c5c83a 	sub	r2,r2,r3
1010ba14:	488a983a 	sll	r5,r9,r2
1010ba18:	30c8d83a 	srl	r4,r6,r3
1010ba1c:	3084983a 	sll	r2,r6,r2
1010ba20:	48c6d83a 	srl	r3,r9,r3
1010ba24:	290cb03a 	or	r6,r5,r4
1010ba28:	1004c03a 	cmpne	r2,r2,zero
1010ba2c:	308cb03a 	or	r6,r6,r2
1010ba30:	898dc83a 	sub	r6,r17,r6
1010ba34:	89a3803a 	cmpltu	r17,r17,r6
1010ba38:	40d1c83a 	sub	r8,r8,r3
1010ba3c:	4451c83a 	sub	r8,r8,r17
1010ba40:	3023883a 	mov	r17,r6
1010ba44:	4080202c 	andhi	r2,r8,128
1010ba48:	10002326 	beq	r2,zero,1010bad8 <__adddf3+0x204>
1010ba4c:	04c02034 	movhi	r19,128
1010ba50:	9cffffc4 	addi	r19,r19,-1
1010ba54:	44e6703a 	and	r19,r8,r19
1010ba58:	98007626 	beq	r19,zero,1010bc34 <__adddf3+0x360>
1010ba5c:	9809883a 	mov	r4,r19
1010ba60:	010ded80 	call	1010ded8 <__clzsi2>
1010ba64:	10fffe04 	addi	r3,r2,-8
1010ba68:	010007c4 	movi	r4,31
1010ba6c:	20c07716 	blt	r4,r3,1010bc4c <__adddf3+0x378>
1010ba70:	00800804 	movi	r2,32
1010ba74:	10c5c83a 	sub	r2,r2,r3
1010ba78:	8884d83a 	srl	r2,r17,r2
1010ba7c:	98d0983a 	sll	r8,r19,r3
1010ba80:	88e2983a 	sll	r17,r17,r3
1010ba84:	1204b03a 	or	r2,r2,r8
1010ba88:	1c007416 	blt	r3,r16,1010bc5c <__adddf3+0x388>
1010ba8c:	1c21c83a 	sub	r16,r3,r16
1010ba90:	82000044 	addi	r8,r16,1
1010ba94:	00c007c4 	movi	r3,31
1010ba98:	1a009116 	blt	r3,r8,1010bce0 <__adddf3+0x40c>
1010ba9c:	00c00804 	movi	r3,32
1010baa0:	1a07c83a 	sub	r3,r3,r8
1010baa4:	8a08d83a 	srl	r4,r17,r8
1010baa8:	88e2983a 	sll	r17,r17,r3
1010baac:	10c6983a 	sll	r3,r2,r3
1010bab0:	1210d83a 	srl	r8,r2,r8
1010bab4:	8804c03a 	cmpne	r2,r17,zero
1010bab8:	1906b03a 	or	r3,r3,r4
1010babc:	18a2b03a 	or	r17,r3,r2
1010bac0:	0021883a 	mov	r16,zero
1010bac4:	003fa206 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bac8:	1890b03a 	or	r8,r3,r2
1010bacc:	40017d26 	beq	r8,zero,1010c0c4 <__adddf3+0x7f0>
1010bad0:	1011883a 	mov	r8,r2
1010bad4:	1823883a 	mov	r17,r3
1010bad8:	888001cc 	andi	r2,r17,7
1010badc:	103f9e1e 	bne	r2,zero,1010b958 <__alt_data_end+0xfffeb958>
1010bae0:	4004977a 	slli	r2,r8,29
1010bae4:	8822d0fa 	srli	r17,r17,3
1010bae8:	4010d0fa 	srli	r8,r8,3
1010baec:	9007883a 	mov	r3,r18
1010baf0:	1444b03a 	or	r2,r2,r17
1010baf4:	0101ffc4 	movi	r4,2047
1010baf8:	81002426 	beq	r16,r4,1010bb8c <__adddf3+0x2b8>
1010bafc:	8120703a 	and	r16,r16,r4
1010bb00:	01000434 	movhi	r4,16
1010bb04:	213fffc4 	addi	r4,r4,-1
1010bb08:	4110703a 	and	r8,r8,r4
1010bb0c:	003fa806 	br	1010b9b0 <__alt_data_end+0xfffeb9b0>
1010bb10:	8089c83a 	sub	r4,r16,r2
1010bb14:	01005e0e 	bge	zero,r4,1010bc90 <__adddf3+0x3bc>
1010bb18:	10002b26 	beq	r2,zero,1010bbc8 <__adddf3+0x2f4>
1010bb1c:	0081ffc4 	movi	r2,2047
1010bb20:	80bf8b26 	beq	r16,r2,1010b950 <__alt_data_end+0xfffeb950>
1010bb24:	4a402034 	orhi	r9,r9,128
1010bb28:	00800e04 	movi	r2,56
1010bb2c:	1100a40e 	bge	r2,r4,1010bdc0 <__adddf3+0x4ec>
1010bb30:	498cb03a 	or	r6,r9,r6
1010bb34:	300ac03a 	cmpne	r5,r6,zero
1010bb38:	0013883a 	mov	r9,zero
1010bb3c:	2c4b883a 	add	r5,r5,r17
1010bb40:	2c63803a 	cmpltu	r17,r5,r17
1010bb44:	4a11883a 	add	r8,r9,r8
1010bb48:	8a11883a 	add	r8,r17,r8
1010bb4c:	2823883a 	mov	r17,r5
1010bb50:	4080202c 	andhi	r2,r8,128
1010bb54:	103fe026 	beq	r2,zero,1010bad8 <__alt_data_end+0xfffebad8>
1010bb58:	84000044 	addi	r16,r16,1
1010bb5c:	0081ffc4 	movi	r2,2047
1010bb60:	8080d226 	beq	r16,r2,1010beac <__adddf3+0x5d8>
1010bb64:	00bfe034 	movhi	r2,65408
1010bb68:	10bfffc4 	addi	r2,r2,-1
1010bb6c:	4090703a 	and	r8,r8,r2
1010bb70:	880ad07a 	srli	r5,r17,1
1010bb74:	400897fa 	slli	r4,r8,31
1010bb78:	88c0004c 	andi	r3,r17,1
1010bb7c:	28e2b03a 	or	r17,r5,r3
1010bb80:	4010d07a 	srli	r8,r8,1
1010bb84:	2462b03a 	or	r17,r4,r17
1010bb88:	003f7106 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bb8c:	4088b03a 	or	r4,r8,r2
1010bb90:	20014526 	beq	r4,zero,1010c0a8 <__adddf3+0x7d4>
1010bb94:	01000434 	movhi	r4,16
1010bb98:	42000234 	orhi	r8,r8,8
1010bb9c:	213fffc4 	addi	r4,r4,-1
1010bba0:	4110703a 	and	r8,r8,r4
1010bba4:	003f8206 	br	1010b9b0 <__alt_data_end+0xfffeb9b0>
1010bba8:	18ffffc4 	addi	r3,r3,-1
1010bbac:	1800491e 	bne	r3,zero,1010bcd4 <__adddf3+0x400>
1010bbb0:	898bc83a 	sub	r5,r17,r6
1010bbb4:	8963803a 	cmpltu	r17,r17,r5
1010bbb8:	4251c83a 	sub	r8,r8,r9
1010bbbc:	4451c83a 	sub	r8,r8,r17
1010bbc0:	2823883a 	mov	r17,r5
1010bbc4:	003f9f06 	br	1010ba44 <__alt_data_end+0xfffeba44>
1010bbc8:	4984b03a 	or	r2,r9,r6
1010bbcc:	103f6026 	beq	r2,zero,1010b950 <__alt_data_end+0xfffeb950>
1010bbd0:	213fffc4 	addi	r4,r4,-1
1010bbd4:	2000931e 	bne	r4,zero,1010be24 <__adddf3+0x550>
1010bbd8:	898d883a 	add	r6,r17,r6
1010bbdc:	3463803a 	cmpltu	r17,r6,r17
1010bbe0:	4251883a 	add	r8,r8,r9
1010bbe4:	8a11883a 	add	r8,r17,r8
1010bbe8:	3023883a 	mov	r17,r6
1010bbec:	003fd806 	br	1010bb50 <__alt_data_end+0xfffebb50>
1010bbf0:	1800541e 	bne	r3,zero,1010bd44 <__adddf3+0x470>
1010bbf4:	80800044 	addi	r2,r16,1
1010bbf8:	1081ffcc 	andi	r2,r2,2047
1010bbfc:	00c00044 	movi	r3,1
1010bc00:	1880a00e 	bge	r3,r2,1010be84 <__adddf3+0x5b0>
1010bc04:	8989c83a 	sub	r4,r17,r6
1010bc08:	8905803a 	cmpltu	r2,r17,r4
1010bc0c:	4267c83a 	sub	r19,r8,r9
1010bc10:	98a7c83a 	sub	r19,r19,r2
1010bc14:	9880202c 	andhi	r2,r19,128
1010bc18:	10006326 	beq	r2,zero,1010bda8 <__adddf3+0x4d4>
1010bc1c:	3463c83a 	sub	r17,r6,r17
1010bc20:	4a07c83a 	sub	r3,r9,r8
1010bc24:	344d803a 	cmpltu	r6,r6,r17
1010bc28:	19a7c83a 	sub	r19,r3,r6
1010bc2c:	3825883a 	mov	r18,r7
1010bc30:	983f8a1e 	bne	r19,zero,1010ba5c <__alt_data_end+0xfffeba5c>
1010bc34:	8809883a 	mov	r4,r17
1010bc38:	010ded80 	call	1010ded8 <__clzsi2>
1010bc3c:	10800804 	addi	r2,r2,32
1010bc40:	10fffe04 	addi	r3,r2,-8
1010bc44:	010007c4 	movi	r4,31
1010bc48:	20ff890e 	bge	r4,r3,1010ba70 <__alt_data_end+0xfffeba70>
1010bc4c:	10bff604 	addi	r2,r2,-40
1010bc50:	8884983a 	sll	r2,r17,r2
1010bc54:	0023883a 	mov	r17,zero
1010bc58:	1c3f8c0e 	bge	r3,r16,1010ba8c <__alt_data_end+0xfffeba8c>
1010bc5c:	023fe034 	movhi	r8,65408
1010bc60:	423fffc4 	addi	r8,r8,-1
1010bc64:	80e1c83a 	sub	r16,r16,r3
1010bc68:	1210703a 	and	r8,r2,r8
1010bc6c:	003f3806 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bc70:	9007883a 	mov	r3,r18
1010bc74:	0011883a 	mov	r8,zero
1010bc78:	0005883a 	mov	r2,zero
1010bc7c:	003f4c06 	br	1010b9b0 <__alt_data_end+0xfffeb9b0>
1010bc80:	498cb03a 	or	r6,r9,r6
1010bc84:	300cc03a 	cmpne	r6,r6,zero
1010bc88:	0007883a 	mov	r3,zero
1010bc8c:	003f6806 	br	1010ba30 <__alt_data_end+0xfffeba30>
1010bc90:	20009c1e 	bne	r4,zero,1010bf04 <__adddf3+0x630>
1010bc94:	80800044 	addi	r2,r16,1
1010bc98:	1141ffcc 	andi	r5,r2,2047
1010bc9c:	01000044 	movi	r4,1
1010bca0:	2140670e 	bge	r4,r5,1010be40 <__adddf3+0x56c>
1010bca4:	0101ffc4 	movi	r4,2047
1010bca8:	11007f26 	beq	r2,r4,1010bea8 <__adddf3+0x5d4>
1010bcac:	898d883a 	add	r6,r17,r6
1010bcb0:	4247883a 	add	r3,r8,r9
1010bcb4:	3451803a 	cmpltu	r8,r6,r17
1010bcb8:	40d1883a 	add	r8,r8,r3
1010bcbc:	402297fa 	slli	r17,r8,31
1010bcc0:	300cd07a 	srli	r6,r6,1
1010bcc4:	4010d07a 	srli	r8,r8,1
1010bcc8:	1021883a 	mov	r16,r2
1010bccc:	89a2b03a 	or	r17,r17,r6
1010bcd0:	003f1f06 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bcd4:	0081ffc4 	movi	r2,2047
1010bcd8:	80bf481e 	bne	r16,r2,1010b9fc <__alt_data_end+0xfffeb9fc>
1010bcdc:	003f1c06 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bce0:	843ff844 	addi	r16,r16,-31
1010bce4:	01000804 	movi	r4,32
1010bce8:	1406d83a 	srl	r3,r2,r16
1010bcec:	41005026 	beq	r8,r4,1010be30 <__adddf3+0x55c>
1010bcf0:	01001004 	movi	r4,64
1010bcf4:	2211c83a 	sub	r8,r4,r8
1010bcf8:	1204983a 	sll	r2,r2,r8
1010bcfc:	88a2b03a 	or	r17,r17,r2
1010bd00:	8822c03a 	cmpne	r17,r17,zero
1010bd04:	1c62b03a 	or	r17,r3,r17
1010bd08:	0011883a 	mov	r8,zero
1010bd0c:	0021883a 	mov	r16,zero
1010bd10:	003f7106 	br	1010bad8 <__alt_data_end+0xfffebad8>
1010bd14:	193ff804 	addi	r4,r3,-32
1010bd18:	00800804 	movi	r2,32
1010bd1c:	4908d83a 	srl	r4,r9,r4
1010bd20:	18804526 	beq	r3,r2,1010be38 <__adddf3+0x564>
1010bd24:	00801004 	movi	r2,64
1010bd28:	10c5c83a 	sub	r2,r2,r3
1010bd2c:	4886983a 	sll	r3,r9,r2
1010bd30:	198cb03a 	or	r6,r3,r6
1010bd34:	300cc03a 	cmpne	r6,r6,zero
1010bd38:	218cb03a 	or	r6,r4,r6
1010bd3c:	0007883a 	mov	r3,zero
1010bd40:	003f3b06 	br	1010ba30 <__alt_data_end+0xfffeba30>
1010bd44:	80002a26 	beq	r16,zero,1010bdf0 <__adddf3+0x51c>
1010bd48:	0101ffc4 	movi	r4,2047
1010bd4c:	11006826 	beq	r2,r4,1010bef0 <__adddf3+0x61c>
1010bd50:	00c7c83a 	sub	r3,zero,r3
1010bd54:	42002034 	orhi	r8,r8,128
1010bd58:	01000e04 	movi	r4,56
1010bd5c:	20c07c16 	blt	r4,r3,1010bf50 <__adddf3+0x67c>
1010bd60:	010007c4 	movi	r4,31
1010bd64:	20c0da16 	blt	r4,r3,1010c0d0 <__adddf3+0x7fc>
1010bd68:	01000804 	movi	r4,32
1010bd6c:	20c9c83a 	sub	r4,r4,r3
1010bd70:	4114983a 	sll	r10,r8,r4
1010bd74:	88cad83a 	srl	r5,r17,r3
1010bd78:	8908983a 	sll	r4,r17,r4
1010bd7c:	40c6d83a 	srl	r3,r8,r3
1010bd80:	5162b03a 	or	r17,r10,r5
1010bd84:	2008c03a 	cmpne	r4,r4,zero
1010bd88:	8922b03a 	or	r17,r17,r4
1010bd8c:	3463c83a 	sub	r17,r6,r17
1010bd90:	48c7c83a 	sub	r3,r9,r3
1010bd94:	344d803a 	cmpltu	r6,r6,r17
1010bd98:	1991c83a 	sub	r8,r3,r6
1010bd9c:	1021883a 	mov	r16,r2
1010bda0:	3825883a 	mov	r18,r7
1010bda4:	003f2706 	br	1010ba44 <__alt_data_end+0xfffeba44>
1010bda8:	24d0b03a 	or	r8,r4,r19
1010bdac:	40001b1e 	bne	r8,zero,1010be1c <__adddf3+0x548>
1010bdb0:	0005883a 	mov	r2,zero
1010bdb4:	0007883a 	mov	r3,zero
1010bdb8:	0021883a 	mov	r16,zero
1010bdbc:	003f4d06 	br	1010baf4 <__alt_data_end+0xfffebaf4>
1010bdc0:	008007c4 	movi	r2,31
1010bdc4:	11003c16 	blt	r2,r4,1010beb8 <__adddf3+0x5e4>
1010bdc8:	00800804 	movi	r2,32
1010bdcc:	1105c83a 	sub	r2,r2,r4
1010bdd0:	488e983a 	sll	r7,r9,r2
1010bdd4:	310ad83a 	srl	r5,r6,r4
1010bdd8:	3084983a 	sll	r2,r6,r2
1010bddc:	4912d83a 	srl	r9,r9,r4
1010bde0:	394ab03a 	or	r5,r7,r5
1010bde4:	1004c03a 	cmpne	r2,r2,zero
1010bde8:	288ab03a 	or	r5,r5,r2
1010bdec:	003f5306 	br	1010bb3c <__alt_data_end+0xfffebb3c>
1010bdf0:	4448b03a 	or	r4,r8,r17
1010bdf4:	20003e26 	beq	r4,zero,1010bef0 <__adddf3+0x61c>
1010bdf8:	00c6303a 	nor	r3,zero,r3
1010bdfc:	18003a1e 	bne	r3,zero,1010bee8 <__adddf3+0x614>
1010be00:	3463c83a 	sub	r17,r6,r17
1010be04:	4a07c83a 	sub	r3,r9,r8
1010be08:	344d803a 	cmpltu	r6,r6,r17
1010be0c:	1991c83a 	sub	r8,r3,r6
1010be10:	1021883a 	mov	r16,r2
1010be14:	3825883a 	mov	r18,r7
1010be18:	003f0a06 	br	1010ba44 <__alt_data_end+0xfffeba44>
1010be1c:	2023883a 	mov	r17,r4
1010be20:	003f0d06 	br	1010ba58 <__alt_data_end+0xfffeba58>
1010be24:	0081ffc4 	movi	r2,2047
1010be28:	80bf3f1e 	bne	r16,r2,1010bb28 <__alt_data_end+0xfffebb28>
1010be2c:	003ec806 	br	1010b950 <__alt_data_end+0xfffeb950>
1010be30:	0005883a 	mov	r2,zero
1010be34:	003fb106 	br	1010bcfc <__alt_data_end+0xfffebcfc>
1010be38:	0007883a 	mov	r3,zero
1010be3c:	003fbc06 	br	1010bd30 <__alt_data_end+0xfffebd30>
1010be40:	4444b03a 	or	r2,r8,r17
1010be44:	8000871e 	bne	r16,zero,1010c064 <__adddf3+0x790>
1010be48:	1000ba26 	beq	r2,zero,1010c134 <__adddf3+0x860>
1010be4c:	4984b03a 	or	r2,r9,r6
1010be50:	103ebf26 	beq	r2,zero,1010b950 <__alt_data_end+0xfffeb950>
1010be54:	8985883a 	add	r2,r17,r6
1010be58:	4247883a 	add	r3,r8,r9
1010be5c:	1451803a 	cmpltu	r8,r2,r17
1010be60:	40d1883a 	add	r8,r8,r3
1010be64:	40c0202c 	andhi	r3,r8,128
1010be68:	1023883a 	mov	r17,r2
1010be6c:	183f1a26 	beq	r3,zero,1010bad8 <__alt_data_end+0xfffebad8>
1010be70:	00bfe034 	movhi	r2,65408
1010be74:	10bfffc4 	addi	r2,r2,-1
1010be78:	2021883a 	mov	r16,r4
1010be7c:	4090703a 	and	r8,r8,r2
1010be80:	003eb306 	br	1010b950 <__alt_data_end+0xfffeb950>
1010be84:	4444b03a 	or	r2,r8,r17
1010be88:	8000291e 	bne	r16,zero,1010bf30 <__adddf3+0x65c>
1010be8c:	10004b1e 	bne	r2,zero,1010bfbc <__adddf3+0x6e8>
1010be90:	4990b03a 	or	r8,r9,r6
1010be94:	40008b26 	beq	r8,zero,1010c0c4 <__adddf3+0x7f0>
1010be98:	4811883a 	mov	r8,r9
1010be9c:	3023883a 	mov	r17,r6
1010bea0:	3825883a 	mov	r18,r7
1010bea4:	003eaa06 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bea8:	1021883a 	mov	r16,r2
1010beac:	0011883a 	mov	r8,zero
1010beb0:	0005883a 	mov	r2,zero
1010beb4:	003f0f06 	br	1010baf4 <__alt_data_end+0xfffebaf4>
1010beb8:	217ff804 	addi	r5,r4,-32
1010bebc:	00800804 	movi	r2,32
1010bec0:	494ad83a 	srl	r5,r9,r5
1010bec4:	20807d26 	beq	r4,r2,1010c0bc <__adddf3+0x7e8>
1010bec8:	00801004 	movi	r2,64
1010becc:	1109c83a 	sub	r4,r2,r4
1010bed0:	4912983a 	sll	r9,r9,r4
1010bed4:	498cb03a 	or	r6,r9,r6
1010bed8:	300cc03a 	cmpne	r6,r6,zero
1010bedc:	298ab03a 	or	r5,r5,r6
1010bee0:	0013883a 	mov	r9,zero
1010bee4:	003f1506 	br	1010bb3c <__alt_data_end+0xfffebb3c>
1010bee8:	0101ffc4 	movi	r4,2047
1010beec:	113f9a1e 	bne	r2,r4,1010bd58 <__alt_data_end+0xfffebd58>
1010bef0:	4811883a 	mov	r8,r9
1010bef4:	3023883a 	mov	r17,r6
1010bef8:	1021883a 	mov	r16,r2
1010befc:	3825883a 	mov	r18,r7
1010bf00:	003e9306 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bf04:	8000161e 	bne	r16,zero,1010bf60 <__adddf3+0x68c>
1010bf08:	444ab03a 	or	r5,r8,r17
1010bf0c:	28005126 	beq	r5,zero,1010c054 <__adddf3+0x780>
1010bf10:	0108303a 	nor	r4,zero,r4
1010bf14:	20004d1e 	bne	r4,zero,1010c04c <__adddf3+0x778>
1010bf18:	89a3883a 	add	r17,r17,r6
1010bf1c:	4253883a 	add	r9,r8,r9
1010bf20:	898d803a 	cmpltu	r6,r17,r6
1010bf24:	3251883a 	add	r8,r6,r9
1010bf28:	1021883a 	mov	r16,r2
1010bf2c:	003f0806 	br	1010bb50 <__alt_data_end+0xfffebb50>
1010bf30:	1000301e 	bne	r2,zero,1010bff4 <__adddf3+0x720>
1010bf34:	4984b03a 	or	r2,r9,r6
1010bf38:	10007126 	beq	r2,zero,1010c100 <__adddf3+0x82c>
1010bf3c:	4811883a 	mov	r8,r9
1010bf40:	3023883a 	mov	r17,r6
1010bf44:	3825883a 	mov	r18,r7
1010bf48:	0401ffc4 	movi	r16,2047
1010bf4c:	003e8006 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bf50:	4462b03a 	or	r17,r8,r17
1010bf54:	8822c03a 	cmpne	r17,r17,zero
1010bf58:	0007883a 	mov	r3,zero
1010bf5c:	003f8b06 	br	1010bd8c <__alt_data_end+0xfffebd8c>
1010bf60:	0141ffc4 	movi	r5,2047
1010bf64:	11403b26 	beq	r2,r5,1010c054 <__adddf3+0x780>
1010bf68:	0109c83a 	sub	r4,zero,r4
1010bf6c:	42002034 	orhi	r8,r8,128
1010bf70:	01400e04 	movi	r5,56
1010bf74:	29006716 	blt	r5,r4,1010c114 <__adddf3+0x840>
1010bf78:	014007c4 	movi	r5,31
1010bf7c:	29007016 	blt	r5,r4,1010c140 <__adddf3+0x86c>
1010bf80:	01400804 	movi	r5,32
1010bf84:	290bc83a 	sub	r5,r5,r4
1010bf88:	4154983a 	sll	r10,r8,r5
1010bf8c:	890ed83a 	srl	r7,r17,r4
1010bf90:	894a983a 	sll	r5,r17,r5
1010bf94:	4108d83a 	srl	r4,r8,r4
1010bf98:	51e2b03a 	or	r17,r10,r7
1010bf9c:	280ac03a 	cmpne	r5,r5,zero
1010bfa0:	8962b03a 	or	r17,r17,r5
1010bfa4:	89a3883a 	add	r17,r17,r6
1010bfa8:	2253883a 	add	r9,r4,r9
1010bfac:	898d803a 	cmpltu	r6,r17,r6
1010bfb0:	3251883a 	add	r8,r6,r9
1010bfb4:	1021883a 	mov	r16,r2
1010bfb8:	003ee506 	br	1010bb50 <__alt_data_end+0xfffebb50>
1010bfbc:	4984b03a 	or	r2,r9,r6
1010bfc0:	103e6326 	beq	r2,zero,1010b950 <__alt_data_end+0xfffeb950>
1010bfc4:	8987c83a 	sub	r3,r17,r6
1010bfc8:	88c9803a 	cmpltu	r4,r17,r3
1010bfcc:	4245c83a 	sub	r2,r8,r9
1010bfd0:	1105c83a 	sub	r2,r2,r4
1010bfd4:	1100202c 	andhi	r4,r2,128
1010bfd8:	203ebb26 	beq	r4,zero,1010bac8 <__alt_data_end+0xfffebac8>
1010bfdc:	3463c83a 	sub	r17,r6,r17
1010bfe0:	4a07c83a 	sub	r3,r9,r8
1010bfe4:	344d803a 	cmpltu	r6,r6,r17
1010bfe8:	1991c83a 	sub	r8,r3,r6
1010bfec:	3825883a 	mov	r18,r7
1010bff0:	003e5706 	br	1010b950 <__alt_data_end+0xfffeb950>
1010bff4:	4984b03a 	or	r2,r9,r6
1010bff8:	10002e26 	beq	r2,zero,1010c0b4 <__adddf3+0x7e0>
1010bffc:	4004d0fa 	srli	r2,r8,3
1010c000:	8822d0fa 	srli	r17,r17,3
1010c004:	4010977a 	slli	r8,r8,29
1010c008:	10c0022c 	andhi	r3,r2,8
1010c00c:	4462b03a 	or	r17,r8,r17
1010c010:	18000826 	beq	r3,zero,1010c034 <__adddf3+0x760>
1010c014:	4808d0fa 	srli	r4,r9,3
1010c018:	20c0022c 	andhi	r3,r4,8
1010c01c:	1800051e 	bne	r3,zero,1010c034 <__adddf3+0x760>
1010c020:	300cd0fa 	srli	r6,r6,3
1010c024:	4806977a 	slli	r3,r9,29
1010c028:	2005883a 	mov	r2,r4
1010c02c:	3825883a 	mov	r18,r7
1010c030:	19a2b03a 	or	r17,r3,r6
1010c034:	8810d77a 	srli	r8,r17,29
1010c038:	100490fa 	slli	r2,r2,3
1010c03c:	882290fa 	slli	r17,r17,3
1010c040:	0401ffc4 	movi	r16,2047
1010c044:	4090b03a 	or	r8,r8,r2
1010c048:	003e4106 	br	1010b950 <__alt_data_end+0xfffeb950>
1010c04c:	0141ffc4 	movi	r5,2047
1010c050:	117fc71e 	bne	r2,r5,1010bf70 <__alt_data_end+0xfffebf70>
1010c054:	4811883a 	mov	r8,r9
1010c058:	3023883a 	mov	r17,r6
1010c05c:	1021883a 	mov	r16,r2
1010c060:	003e3b06 	br	1010b950 <__alt_data_end+0xfffeb950>
1010c064:	10002f26 	beq	r2,zero,1010c124 <__adddf3+0x850>
1010c068:	4984b03a 	or	r2,r9,r6
1010c06c:	10001126 	beq	r2,zero,1010c0b4 <__adddf3+0x7e0>
1010c070:	4004d0fa 	srli	r2,r8,3
1010c074:	8822d0fa 	srli	r17,r17,3
1010c078:	4010977a 	slli	r8,r8,29
1010c07c:	10c0022c 	andhi	r3,r2,8
1010c080:	4462b03a 	or	r17,r8,r17
1010c084:	183feb26 	beq	r3,zero,1010c034 <__alt_data_end+0xfffec034>
1010c088:	4808d0fa 	srli	r4,r9,3
1010c08c:	20c0022c 	andhi	r3,r4,8
1010c090:	183fe81e 	bne	r3,zero,1010c034 <__alt_data_end+0xfffec034>
1010c094:	300cd0fa 	srli	r6,r6,3
1010c098:	4806977a 	slli	r3,r9,29
1010c09c:	2005883a 	mov	r2,r4
1010c0a0:	19a2b03a 	or	r17,r3,r6
1010c0a4:	003fe306 	br	1010c034 <__alt_data_end+0xfffec034>
1010c0a8:	0011883a 	mov	r8,zero
1010c0ac:	0005883a 	mov	r2,zero
1010c0b0:	003e3f06 	br	1010b9b0 <__alt_data_end+0xfffeb9b0>
1010c0b4:	0401ffc4 	movi	r16,2047
1010c0b8:	003e2506 	br	1010b950 <__alt_data_end+0xfffeb950>
1010c0bc:	0013883a 	mov	r9,zero
1010c0c0:	003f8406 	br	1010bed4 <__alt_data_end+0xfffebed4>
1010c0c4:	0005883a 	mov	r2,zero
1010c0c8:	0007883a 	mov	r3,zero
1010c0cc:	003e8906 	br	1010baf4 <__alt_data_end+0xfffebaf4>
1010c0d0:	197ff804 	addi	r5,r3,-32
1010c0d4:	01000804 	movi	r4,32
1010c0d8:	414ad83a 	srl	r5,r8,r5
1010c0dc:	19002426 	beq	r3,r4,1010c170 <__adddf3+0x89c>
1010c0e0:	01001004 	movi	r4,64
1010c0e4:	20c7c83a 	sub	r3,r4,r3
1010c0e8:	40c6983a 	sll	r3,r8,r3
1010c0ec:	1c46b03a 	or	r3,r3,r17
1010c0f0:	1806c03a 	cmpne	r3,r3,zero
1010c0f4:	28e2b03a 	or	r17,r5,r3
1010c0f8:	0007883a 	mov	r3,zero
1010c0fc:	003f2306 	br	1010bd8c <__alt_data_end+0xfffebd8c>
1010c100:	0007883a 	mov	r3,zero
1010c104:	5811883a 	mov	r8,r11
1010c108:	00bfffc4 	movi	r2,-1
1010c10c:	0401ffc4 	movi	r16,2047
1010c110:	003e7806 	br	1010baf4 <__alt_data_end+0xfffebaf4>
1010c114:	4462b03a 	or	r17,r8,r17
1010c118:	8822c03a 	cmpne	r17,r17,zero
1010c11c:	0009883a 	mov	r4,zero
1010c120:	003fa006 	br	1010bfa4 <__alt_data_end+0xfffebfa4>
1010c124:	4811883a 	mov	r8,r9
1010c128:	3023883a 	mov	r17,r6
1010c12c:	0401ffc4 	movi	r16,2047
1010c130:	003e0706 	br	1010b950 <__alt_data_end+0xfffeb950>
1010c134:	4811883a 	mov	r8,r9
1010c138:	3023883a 	mov	r17,r6
1010c13c:	003e0406 	br	1010b950 <__alt_data_end+0xfffeb950>
1010c140:	21fff804 	addi	r7,r4,-32
1010c144:	01400804 	movi	r5,32
1010c148:	41ced83a 	srl	r7,r8,r7
1010c14c:	21400a26 	beq	r4,r5,1010c178 <__adddf3+0x8a4>
1010c150:	01401004 	movi	r5,64
1010c154:	2909c83a 	sub	r4,r5,r4
1010c158:	4108983a 	sll	r4,r8,r4
1010c15c:	2448b03a 	or	r4,r4,r17
1010c160:	2008c03a 	cmpne	r4,r4,zero
1010c164:	3922b03a 	or	r17,r7,r4
1010c168:	0009883a 	mov	r4,zero
1010c16c:	003f8d06 	br	1010bfa4 <__alt_data_end+0xfffebfa4>
1010c170:	0007883a 	mov	r3,zero
1010c174:	003fdd06 	br	1010c0ec <__alt_data_end+0xfffec0ec>
1010c178:	0009883a 	mov	r4,zero
1010c17c:	003ff706 	br	1010c15c <__alt_data_end+0xfffec15c>

1010c180 <__divdf3>:
1010c180:	defff204 	addi	sp,sp,-56
1010c184:	dd400915 	stw	r21,36(sp)
1010c188:	282ad53a 	srli	r21,r5,20
1010c18c:	dd000815 	stw	r20,32(sp)
1010c190:	2828d7fa 	srli	r20,r5,31
1010c194:	dc000415 	stw	r16,16(sp)
1010c198:	04000434 	movhi	r16,16
1010c19c:	df000c15 	stw	fp,48(sp)
1010c1a0:	843fffc4 	addi	r16,r16,-1
1010c1a4:	dfc00d15 	stw	ra,52(sp)
1010c1a8:	ddc00b15 	stw	r23,44(sp)
1010c1ac:	dd800a15 	stw	r22,40(sp)
1010c1b0:	dcc00715 	stw	r19,28(sp)
1010c1b4:	dc800615 	stw	r18,24(sp)
1010c1b8:	dc400515 	stw	r17,20(sp)
1010c1bc:	ad41ffcc 	andi	r21,r21,2047
1010c1c0:	2c20703a 	and	r16,r5,r16
1010c1c4:	a7003fcc 	andi	fp,r20,255
1010c1c8:	a8006126 	beq	r21,zero,1010c350 <__divdf3+0x1d0>
1010c1cc:	0081ffc4 	movi	r2,2047
1010c1d0:	2025883a 	mov	r18,r4
1010c1d4:	a8803726 	beq	r21,r2,1010c2b4 <__divdf3+0x134>
1010c1d8:	80800434 	orhi	r2,r16,16
1010c1dc:	100490fa 	slli	r2,r2,3
1010c1e0:	2020d77a 	srli	r16,r4,29
1010c1e4:	202490fa 	slli	r18,r4,3
1010c1e8:	ad7f0044 	addi	r21,r21,-1023
1010c1ec:	80a0b03a 	or	r16,r16,r2
1010c1f0:	0027883a 	mov	r19,zero
1010c1f4:	0013883a 	mov	r9,zero
1010c1f8:	3804d53a 	srli	r2,r7,20
1010c1fc:	382cd7fa 	srli	r22,r7,31
1010c200:	04400434 	movhi	r17,16
1010c204:	8c7fffc4 	addi	r17,r17,-1
1010c208:	1081ffcc 	andi	r2,r2,2047
1010c20c:	3011883a 	mov	r8,r6
1010c210:	3c62703a 	and	r17,r7,r17
1010c214:	b5c03fcc 	andi	r23,r22,255
1010c218:	10006c26 	beq	r2,zero,1010c3cc <__divdf3+0x24c>
1010c21c:	00c1ffc4 	movi	r3,2047
1010c220:	10c06426 	beq	r2,r3,1010c3b4 <__divdf3+0x234>
1010c224:	88c00434 	orhi	r3,r17,16
1010c228:	180690fa 	slli	r3,r3,3
1010c22c:	3022d77a 	srli	r17,r6,29
1010c230:	301090fa 	slli	r8,r6,3
1010c234:	10bf0044 	addi	r2,r2,-1023
1010c238:	88e2b03a 	or	r17,r17,r3
1010c23c:	000f883a 	mov	r7,zero
1010c240:	a58cf03a 	xor	r6,r20,r22
1010c244:	3cc8b03a 	or	r4,r7,r19
1010c248:	a8abc83a 	sub	r21,r21,r2
1010c24c:	008003c4 	movi	r2,15
1010c250:	3007883a 	mov	r3,r6
1010c254:	34c03fcc 	andi	r19,r6,255
1010c258:	11009036 	bltu	r2,r4,1010c49c <__divdf3+0x31c>
1010c25c:	200890ba 	slli	r4,r4,2
1010c260:	00840474 	movhi	r2,4113
1010c264:	10b09d04 	addi	r2,r2,-15756
1010c268:	2089883a 	add	r4,r4,r2
1010c26c:	20800017 	ldw	r2,0(r4)
1010c270:	1000683a 	jmp	r2
1010c274:	1010c49c 	xori	zero,r2,17170
1010c278:	1010c2ec 	andhi	zero,r2,17163
1010c27c:	1010c48c 	andi	zero,r2,17170
1010c280:	1010c2e0 	cmpeqi	zero,r2,17163
1010c284:	1010c48c 	andi	zero,r2,17170
1010c288:	1010c460 	cmpeqi	zero,r2,17169
1010c28c:	1010c48c 	andi	zero,r2,17170
1010c290:	1010c2e0 	cmpeqi	zero,r2,17163
1010c294:	1010c2ec 	andhi	zero,r2,17163
1010c298:	1010c2ec 	andhi	zero,r2,17163
1010c29c:	1010c460 	cmpeqi	zero,r2,17169
1010c2a0:	1010c2e0 	cmpeqi	zero,r2,17163
1010c2a4:	1010c2d0 	cmplti	zero,r2,17163
1010c2a8:	1010c2d0 	cmplti	zero,r2,17163
1010c2ac:	1010c2d0 	cmplti	zero,r2,17163
1010c2b0:	1010c780 	call	11010c78 <__alt_data_end+0xef0c78>
1010c2b4:	2404b03a 	or	r2,r4,r16
1010c2b8:	1000661e 	bne	r2,zero,1010c454 <__divdf3+0x2d4>
1010c2bc:	04c00204 	movi	r19,8
1010c2c0:	0021883a 	mov	r16,zero
1010c2c4:	0025883a 	mov	r18,zero
1010c2c8:	02400084 	movi	r9,2
1010c2cc:	003fca06 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c2d0:	8023883a 	mov	r17,r16
1010c2d4:	9011883a 	mov	r8,r18
1010c2d8:	e02f883a 	mov	r23,fp
1010c2dc:	480f883a 	mov	r7,r9
1010c2e0:	00800084 	movi	r2,2
1010c2e4:	3881311e 	bne	r7,r2,1010c7ac <__divdf3+0x62c>
1010c2e8:	b827883a 	mov	r19,r23
1010c2ec:	98c0004c 	andi	r3,r19,1
1010c2f0:	0081ffc4 	movi	r2,2047
1010c2f4:	000b883a 	mov	r5,zero
1010c2f8:	0025883a 	mov	r18,zero
1010c2fc:	1004953a 	slli	r2,r2,20
1010c300:	18c03fcc 	andi	r3,r3,255
1010c304:	04400434 	movhi	r17,16
1010c308:	8c7fffc4 	addi	r17,r17,-1
1010c30c:	180697fa 	slli	r3,r3,31
1010c310:	2c4a703a 	and	r5,r5,r17
1010c314:	288ab03a 	or	r5,r5,r2
1010c318:	28c6b03a 	or	r3,r5,r3
1010c31c:	9005883a 	mov	r2,r18
1010c320:	dfc00d17 	ldw	ra,52(sp)
1010c324:	df000c17 	ldw	fp,48(sp)
1010c328:	ddc00b17 	ldw	r23,44(sp)
1010c32c:	dd800a17 	ldw	r22,40(sp)
1010c330:	dd400917 	ldw	r21,36(sp)
1010c334:	dd000817 	ldw	r20,32(sp)
1010c338:	dcc00717 	ldw	r19,28(sp)
1010c33c:	dc800617 	ldw	r18,24(sp)
1010c340:	dc400517 	ldw	r17,20(sp)
1010c344:	dc000417 	ldw	r16,16(sp)
1010c348:	dec00e04 	addi	sp,sp,56
1010c34c:	f800283a 	ret
1010c350:	2404b03a 	or	r2,r4,r16
1010c354:	2027883a 	mov	r19,r4
1010c358:	10003926 	beq	r2,zero,1010c440 <__divdf3+0x2c0>
1010c35c:	80012e26 	beq	r16,zero,1010c818 <__divdf3+0x698>
1010c360:	8009883a 	mov	r4,r16
1010c364:	d9800315 	stw	r6,12(sp)
1010c368:	d9c00215 	stw	r7,8(sp)
1010c36c:	010ded80 	call	1010ded8 <__clzsi2>
1010c370:	d9800317 	ldw	r6,12(sp)
1010c374:	d9c00217 	ldw	r7,8(sp)
1010c378:	113ffd44 	addi	r4,r2,-11
1010c37c:	00c00704 	movi	r3,28
1010c380:	19012116 	blt	r3,r4,1010c808 <__divdf3+0x688>
1010c384:	00c00744 	movi	r3,29
1010c388:	147ffe04 	addi	r17,r2,-8
1010c38c:	1907c83a 	sub	r3,r3,r4
1010c390:	8460983a 	sll	r16,r16,r17
1010c394:	98c6d83a 	srl	r3,r19,r3
1010c398:	9c64983a 	sll	r18,r19,r17
1010c39c:	1c20b03a 	or	r16,r3,r16
1010c3a0:	1080fcc4 	addi	r2,r2,1011
1010c3a4:	00abc83a 	sub	r21,zero,r2
1010c3a8:	0027883a 	mov	r19,zero
1010c3ac:	0013883a 	mov	r9,zero
1010c3b0:	003f9106 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c3b4:	3446b03a 	or	r3,r6,r17
1010c3b8:	18001f1e 	bne	r3,zero,1010c438 <__divdf3+0x2b8>
1010c3bc:	0023883a 	mov	r17,zero
1010c3c0:	0011883a 	mov	r8,zero
1010c3c4:	01c00084 	movi	r7,2
1010c3c8:	003f9d06 	br	1010c240 <__alt_data_end+0xfffec240>
1010c3cc:	3446b03a 	or	r3,r6,r17
1010c3d0:	18001526 	beq	r3,zero,1010c428 <__divdf3+0x2a8>
1010c3d4:	88011b26 	beq	r17,zero,1010c844 <__divdf3+0x6c4>
1010c3d8:	8809883a 	mov	r4,r17
1010c3dc:	d9800315 	stw	r6,12(sp)
1010c3e0:	da400115 	stw	r9,4(sp)
1010c3e4:	010ded80 	call	1010ded8 <__clzsi2>
1010c3e8:	d9800317 	ldw	r6,12(sp)
1010c3ec:	da400117 	ldw	r9,4(sp)
1010c3f0:	113ffd44 	addi	r4,r2,-11
1010c3f4:	00c00704 	movi	r3,28
1010c3f8:	19010e16 	blt	r3,r4,1010c834 <__divdf3+0x6b4>
1010c3fc:	00c00744 	movi	r3,29
1010c400:	123ffe04 	addi	r8,r2,-8
1010c404:	1907c83a 	sub	r3,r3,r4
1010c408:	8a22983a 	sll	r17,r17,r8
1010c40c:	30c6d83a 	srl	r3,r6,r3
1010c410:	3210983a 	sll	r8,r6,r8
1010c414:	1c62b03a 	or	r17,r3,r17
1010c418:	1080fcc4 	addi	r2,r2,1011
1010c41c:	0085c83a 	sub	r2,zero,r2
1010c420:	000f883a 	mov	r7,zero
1010c424:	003f8606 	br	1010c240 <__alt_data_end+0xfffec240>
1010c428:	0023883a 	mov	r17,zero
1010c42c:	0011883a 	mov	r8,zero
1010c430:	01c00044 	movi	r7,1
1010c434:	003f8206 	br	1010c240 <__alt_data_end+0xfffec240>
1010c438:	01c000c4 	movi	r7,3
1010c43c:	003f8006 	br	1010c240 <__alt_data_end+0xfffec240>
1010c440:	04c00104 	movi	r19,4
1010c444:	0021883a 	mov	r16,zero
1010c448:	0025883a 	mov	r18,zero
1010c44c:	02400044 	movi	r9,1
1010c450:	003f6906 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c454:	04c00304 	movi	r19,12
1010c458:	024000c4 	movi	r9,3
1010c45c:	003f6606 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c460:	01400434 	movhi	r5,16
1010c464:	0007883a 	mov	r3,zero
1010c468:	297fffc4 	addi	r5,r5,-1
1010c46c:	04bfffc4 	movi	r18,-1
1010c470:	0081ffc4 	movi	r2,2047
1010c474:	003fa106 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c478:	00c00044 	movi	r3,1
1010c47c:	1887c83a 	sub	r3,r3,r2
1010c480:	01000e04 	movi	r4,56
1010c484:	20c1210e 	bge	r4,r3,1010c90c <__divdf3+0x78c>
1010c488:	98c0004c 	andi	r3,r19,1
1010c48c:	0005883a 	mov	r2,zero
1010c490:	000b883a 	mov	r5,zero
1010c494:	0025883a 	mov	r18,zero
1010c498:	003f9806 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c49c:	8c00fd36 	bltu	r17,r16,1010c894 <__divdf3+0x714>
1010c4a0:	8440fb26 	beq	r16,r17,1010c890 <__divdf3+0x710>
1010c4a4:	8007883a 	mov	r3,r16
1010c4a8:	ad7fffc4 	addi	r21,r21,-1
1010c4ac:	0021883a 	mov	r16,zero
1010c4b0:	4004d63a 	srli	r2,r8,24
1010c4b4:	8822923a 	slli	r17,r17,8
1010c4b8:	1809883a 	mov	r4,r3
1010c4bc:	402c923a 	slli	r22,r8,8
1010c4c0:	88b8b03a 	or	fp,r17,r2
1010c4c4:	e028d43a 	srli	r20,fp,16
1010c4c8:	d8c00015 	stw	r3,0(sp)
1010c4cc:	e5ffffcc 	andi	r23,fp,65535
1010c4d0:	a00b883a 	mov	r5,r20
1010c4d4:	010b8180 	call	1010b818 <__udivsi3>
1010c4d8:	d8c00017 	ldw	r3,0(sp)
1010c4dc:	a00b883a 	mov	r5,r20
1010c4e0:	d8800315 	stw	r2,12(sp)
1010c4e4:	1809883a 	mov	r4,r3
1010c4e8:	010b87c0 	call	1010b87c <__umodsi3>
1010c4ec:	d9800317 	ldw	r6,12(sp)
1010c4f0:	1006943a 	slli	r3,r2,16
1010c4f4:	9004d43a 	srli	r2,r18,16
1010c4f8:	b9a3383a 	mul	r17,r23,r6
1010c4fc:	10c4b03a 	or	r2,r2,r3
1010c500:	1440062e 	bgeu	r2,r17,1010c51c <__divdf3+0x39c>
1010c504:	1705883a 	add	r2,r2,fp
1010c508:	30ffffc4 	addi	r3,r6,-1
1010c50c:	1700ee36 	bltu	r2,fp,1010c8c8 <__divdf3+0x748>
1010c510:	1440ed2e 	bgeu	r2,r17,1010c8c8 <__divdf3+0x748>
1010c514:	31bfff84 	addi	r6,r6,-2
1010c518:	1705883a 	add	r2,r2,fp
1010c51c:	1463c83a 	sub	r17,r2,r17
1010c520:	a00b883a 	mov	r5,r20
1010c524:	8809883a 	mov	r4,r17
1010c528:	d9800315 	stw	r6,12(sp)
1010c52c:	010b8180 	call	1010b818 <__udivsi3>
1010c530:	a00b883a 	mov	r5,r20
1010c534:	8809883a 	mov	r4,r17
1010c538:	d8800215 	stw	r2,8(sp)
1010c53c:	010b87c0 	call	1010b87c <__umodsi3>
1010c540:	d9c00217 	ldw	r7,8(sp)
1010c544:	1004943a 	slli	r2,r2,16
1010c548:	94bfffcc 	andi	r18,r18,65535
1010c54c:	b9d1383a 	mul	r8,r23,r7
1010c550:	90a4b03a 	or	r18,r18,r2
1010c554:	d9800317 	ldw	r6,12(sp)
1010c558:	9200062e 	bgeu	r18,r8,1010c574 <__divdf3+0x3f4>
1010c55c:	9725883a 	add	r18,r18,fp
1010c560:	38bfffc4 	addi	r2,r7,-1
1010c564:	9700d636 	bltu	r18,fp,1010c8c0 <__divdf3+0x740>
1010c568:	9200d52e 	bgeu	r18,r8,1010c8c0 <__divdf3+0x740>
1010c56c:	39ffff84 	addi	r7,r7,-2
1010c570:	9725883a 	add	r18,r18,fp
1010c574:	3004943a 	slli	r2,r6,16
1010c578:	b012d43a 	srli	r9,r22,16
1010c57c:	b1bfffcc 	andi	r6,r22,65535
1010c580:	11e2b03a 	or	r17,r2,r7
1010c584:	8806d43a 	srli	r3,r17,16
1010c588:	893fffcc 	andi	r4,r17,65535
1010c58c:	218b383a 	mul	r5,r4,r6
1010c590:	30c5383a 	mul	r2,r6,r3
1010c594:	2249383a 	mul	r4,r4,r9
1010c598:	280ed43a 	srli	r7,r5,16
1010c59c:	9225c83a 	sub	r18,r18,r8
1010c5a0:	2089883a 	add	r4,r4,r2
1010c5a4:	3909883a 	add	r4,r7,r4
1010c5a8:	1a47383a 	mul	r3,r3,r9
1010c5ac:	2080022e 	bgeu	r4,r2,1010c5b8 <__divdf3+0x438>
1010c5b0:	00800074 	movhi	r2,1
1010c5b4:	1887883a 	add	r3,r3,r2
1010c5b8:	2004d43a 	srli	r2,r4,16
1010c5bc:	2008943a 	slli	r4,r4,16
1010c5c0:	297fffcc 	andi	r5,r5,65535
1010c5c4:	10c7883a 	add	r3,r2,r3
1010c5c8:	2149883a 	add	r4,r4,r5
1010c5cc:	90c0a536 	bltu	r18,r3,1010c864 <__divdf3+0x6e4>
1010c5d0:	90c0bf26 	beq	r18,r3,1010c8d0 <__divdf3+0x750>
1010c5d4:	90c7c83a 	sub	r3,r18,r3
1010c5d8:	810fc83a 	sub	r7,r16,r4
1010c5dc:	81e5803a 	cmpltu	r18,r16,r7
1010c5e0:	1ca5c83a 	sub	r18,r3,r18
1010c5e4:	e480c126 	beq	fp,r18,1010c8ec <__divdf3+0x76c>
1010c5e8:	a00b883a 	mov	r5,r20
1010c5ec:	9009883a 	mov	r4,r18
1010c5f0:	d9800315 	stw	r6,12(sp)
1010c5f4:	d9c00215 	stw	r7,8(sp)
1010c5f8:	da400115 	stw	r9,4(sp)
1010c5fc:	010b8180 	call	1010b818 <__udivsi3>
1010c600:	a00b883a 	mov	r5,r20
1010c604:	9009883a 	mov	r4,r18
1010c608:	d8800015 	stw	r2,0(sp)
1010c60c:	010b87c0 	call	1010b87c <__umodsi3>
1010c610:	d9c00217 	ldw	r7,8(sp)
1010c614:	da000017 	ldw	r8,0(sp)
1010c618:	1006943a 	slli	r3,r2,16
1010c61c:	3804d43a 	srli	r2,r7,16
1010c620:	ba21383a 	mul	r16,r23,r8
1010c624:	d9800317 	ldw	r6,12(sp)
1010c628:	10c4b03a 	or	r2,r2,r3
1010c62c:	da400117 	ldw	r9,4(sp)
1010c630:	1400062e 	bgeu	r2,r16,1010c64c <__divdf3+0x4cc>
1010c634:	1705883a 	add	r2,r2,fp
1010c638:	40ffffc4 	addi	r3,r8,-1
1010c63c:	1700ad36 	bltu	r2,fp,1010c8f4 <__divdf3+0x774>
1010c640:	1400ac2e 	bgeu	r2,r16,1010c8f4 <__divdf3+0x774>
1010c644:	423fff84 	addi	r8,r8,-2
1010c648:	1705883a 	add	r2,r2,fp
1010c64c:	1421c83a 	sub	r16,r2,r16
1010c650:	a00b883a 	mov	r5,r20
1010c654:	8009883a 	mov	r4,r16
1010c658:	d9800315 	stw	r6,12(sp)
1010c65c:	d9c00215 	stw	r7,8(sp)
1010c660:	da000015 	stw	r8,0(sp)
1010c664:	da400115 	stw	r9,4(sp)
1010c668:	010b8180 	call	1010b818 <__udivsi3>
1010c66c:	8009883a 	mov	r4,r16
1010c670:	a00b883a 	mov	r5,r20
1010c674:	1025883a 	mov	r18,r2
1010c678:	010b87c0 	call	1010b87c <__umodsi3>
1010c67c:	d9c00217 	ldw	r7,8(sp)
1010c680:	1004943a 	slli	r2,r2,16
1010c684:	bcaf383a 	mul	r23,r23,r18
1010c688:	393fffcc 	andi	r4,r7,65535
1010c68c:	2088b03a 	or	r4,r4,r2
1010c690:	d9800317 	ldw	r6,12(sp)
1010c694:	da000017 	ldw	r8,0(sp)
1010c698:	da400117 	ldw	r9,4(sp)
1010c69c:	25c0062e 	bgeu	r4,r23,1010c6b8 <__divdf3+0x538>
1010c6a0:	2709883a 	add	r4,r4,fp
1010c6a4:	90bfffc4 	addi	r2,r18,-1
1010c6a8:	27009436 	bltu	r4,fp,1010c8fc <__divdf3+0x77c>
1010c6ac:	25c0932e 	bgeu	r4,r23,1010c8fc <__divdf3+0x77c>
1010c6b0:	94bfff84 	addi	r18,r18,-2
1010c6b4:	2709883a 	add	r4,r4,fp
1010c6b8:	4004943a 	slli	r2,r8,16
1010c6bc:	25efc83a 	sub	r23,r4,r23
1010c6c0:	1490b03a 	or	r8,r2,r18
1010c6c4:	4008d43a 	srli	r4,r8,16
1010c6c8:	40ffffcc 	andi	r3,r8,65535
1010c6cc:	30c5383a 	mul	r2,r6,r3
1010c6d0:	1a47383a 	mul	r3,r3,r9
1010c6d4:	310d383a 	mul	r6,r6,r4
1010c6d8:	100ad43a 	srli	r5,r2,16
1010c6dc:	4913383a 	mul	r9,r9,r4
1010c6e0:	1987883a 	add	r3,r3,r6
1010c6e4:	28c7883a 	add	r3,r5,r3
1010c6e8:	1980022e 	bgeu	r3,r6,1010c6f4 <__divdf3+0x574>
1010c6ec:	01000074 	movhi	r4,1
1010c6f0:	4913883a 	add	r9,r9,r4
1010c6f4:	1808d43a 	srli	r4,r3,16
1010c6f8:	1806943a 	slli	r3,r3,16
1010c6fc:	10bfffcc 	andi	r2,r2,65535
1010c700:	2253883a 	add	r9,r4,r9
1010c704:	1887883a 	add	r3,r3,r2
1010c708:	ba403836 	bltu	r23,r9,1010c7ec <__divdf3+0x66c>
1010c70c:	ba403626 	beq	r23,r9,1010c7e8 <__divdf3+0x668>
1010c710:	42000054 	ori	r8,r8,1
1010c714:	a880ffc4 	addi	r2,r21,1023
1010c718:	00bf570e 	bge	zero,r2,1010c478 <__alt_data_end+0xfffec478>
1010c71c:	40c001cc 	andi	r3,r8,7
1010c720:	18000726 	beq	r3,zero,1010c740 <__divdf3+0x5c0>
1010c724:	40c003cc 	andi	r3,r8,15
1010c728:	01000104 	movi	r4,4
1010c72c:	19000426 	beq	r3,r4,1010c740 <__divdf3+0x5c0>
1010c730:	4107883a 	add	r3,r8,r4
1010c734:	1a11803a 	cmpltu	r8,r3,r8
1010c738:	8a23883a 	add	r17,r17,r8
1010c73c:	1811883a 	mov	r8,r3
1010c740:	88c0402c 	andhi	r3,r17,256
1010c744:	18000426 	beq	r3,zero,1010c758 <__divdf3+0x5d8>
1010c748:	00ffc034 	movhi	r3,65280
1010c74c:	18ffffc4 	addi	r3,r3,-1
1010c750:	a8810004 	addi	r2,r21,1024
1010c754:	88e2703a 	and	r17,r17,r3
1010c758:	00c1ff84 	movi	r3,2046
1010c75c:	18bee316 	blt	r3,r2,1010c2ec <__alt_data_end+0xfffec2ec>
1010c760:	8824977a 	slli	r18,r17,29
1010c764:	4010d0fa 	srli	r8,r8,3
1010c768:	8822927a 	slli	r17,r17,9
1010c76c:	1081ffcc 	andi	r2,r2,2047
1010c770:	9224b03a 	or	r18,r18,r8
1010c774:	880ad33a 	srli	r5,r17,12
1010c778:	98c0004c 	andi	r3,r19,1
1010c77c:	003edf06 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c780:	8080022c 	andhi	r2,r16,8
1010c784:	10001226 	beq	r2,zero,1010c7d0 <__divdf3+0x650>
1010c788:	8880022c 	andhi	r2,r17,8
1010c78c:	1000101e 	bne	r2,zero,1010c7d0 <__divdf3+0x650>
1010c790:	00800434 	movhi	r2,16
1010c794:	89400234 	orhi	r5,r17,8
1010c798:	10bfffc4 	addi	r2,r2,-1
1010c79c:	b007883a 	mov	r3,r22
1010c7a0:	288a703a 	and	r5,r5,r2
1010c7a4:	4025883a 	mov	r18,r8
1010c7a8:	003f3106 	br	1010c470 <__alt_data_end+0xfffec470>
1010c7ac:	008000c4 	movi	r2,3
1010c7b0:	3880a626 	beq	r7,r2,1010ca4c <__divdf3+0x8cc>
1010c7b4:	00800044 	movi	r2,1
1010c7b8:	3880521e 	bne	r7,r2,1010c904 <__divdf3+0x784>
1010c7bc:	b807883a 	mov	r3,r23
1010c7c0:	0005883a 	mov	r2,zero
1010c7c4:	000b883a 	mov	r5,zero
1010c7c8:	0025883a 	mov	r18,zero
1010c7cc:	003ecb06 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c7d0:	00800434 	movhi	r2,16
1010c7d4:	81400234 	orhi	r5,r16,8
1010c7d8:	10bfffc4 	addi	r2,r2,-1
1010c7dc:	a007883a 	mov	r3,r20
1010c7e0:	288a703a 	and	r5,r5,r2
1010c7e4:	003f2206 	br	1010c470 <__alt_data_end+0xfffec470>
1010c7e8:	183fca26 	beq	r3,zero,1010c714 <__alt_data_end+0xfffec714>
1010c7ec:	e5ef883a 	add	r23,fp,r23
1010c7f0:	40bfffc4 	addi	r2,r8,-1
1010c7f4:	bf00392e 	bgeu	r23,fp,1010c8dc <__divdf3+0x75c>
1010c7f8:	1011883a 	mov	r8,r2
1010c7fc:	ba7fc41e 	bne	r23,r9,1010c710 <__alt_data_end+0xfffec710>
1010c800:	b0ffc31e 	bne	r22,r3,1010c710 <__alt_data_end+0xfffec710>
1010c804:	003fc306 	br	1010c714 <__alt_data_end+0xfffec714>
1010c808:	143ff604 	addi	r16,r2,-40
1010c80c:	9c20983a 	sll	r16,r19,r16
1010c810:	0025883a 	mov	r18,zero
1010c814:	003ee206 	br	1010c3a0 <__alt_data_end+0xfffec3a0>
1010c818:	d9800315 	stw	r6,12(sp)
1010c81c:	d9c00215 	stw	r7,8(sp)
1010c820:	010ded80 	call	1010ded8 <__clzsi2>
1010c824:	10800804 	addi	r2,r2,32
1010c828:	d9c00217 	ldw	r7,8(sp)
1010c82c:	d9800317 	ldw	r6,12(sp)
1010c830:	003ed106 	br	1010c378 <__alt_data_end+0xfffec378>
1010c834:	147ff604 	addi	r17,r2,-40
1010c838:	3462983a 	sll	r17,r6,r17
1010c83c:	0011883a 	mov	r8,zero
1010c840:	003ef506 	br	1010c418 <__alt_data_end+0xfffec418>
1010c844:	3009883a 	mov	r4,r6
1010c848:	d9800315 	stw	r6,12(sp)
1010c84c:	da400115 	stw	r9,4(sp)
1010c850:	010ded80 	call	1010ded8 <__clzsi2>
1010c854:	10800804 	addi	r2,r2,32
1010c858:	da400117 	ldw	r9,4(sp)
1010c85c:	d9800317 	ldw	r6,12(sp)
1010c860:	003ee306 	br	1010c3f0 <__alt_data_end+0xfffec3f0>
1010c864:	85a1883a 	add	r16,r16,r22
1010c868:	8585803a 	cmpltu	r2,r16,r22
1010c86c:	1705883a 	add	r2,r2,fp
1010c870:	14a5883a 	add	r18,r2,r18
1010c874:	88bfffc4 	addi	r2,r17,-1
1010c878:	e4800c2e 	bgeu	fp,r18,1010c8ac <__divdf3+0x72c>
1010c87c:	90c03e36 	bltu	r18,r3,1010c978 <__divdf3+0x7f8>
1010c880:	1c806926 	beq	r3,r18,1010ca28 <__divdf3+0x8a8>
1010c884:	90c7c83a 	sub	r3,r18,r3
1010c888:	1023883a 	mov	r17,r2
1010c88c:	003f5206 	br	1010c5d8 <__alt_data_end+0xfffec5d8>
1010c890:	923f0436 	bltu	r18,r8,1010c4a4 <__alt_data_end+0xfffec4a4>
1010c894:	800897fa 	slli	r4,r16,31
1010c898:	9004d07a 	srli	r2,r18,1
1010c89c:	8006d07a 	srli	r3,r16,1
1010c8a0:	902097fa 	slli	r16,r18,31
1010c8a4:	20a4b03a 	or	r18,r4,r2
1010c8a8:	003f0106 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c8ac:	e4bff51e 	bne	fp,r18,1010c884 <__alt_data_end+0xfffec884>
1010c8b0:	85bff22e 	bgeu	r16,r22,1010c87c <__alt_data_end+0xfffec87c>
1010c8b4:	e0c7c83a 	sub	r3,fp,r3
1010c8b8:	1023883a 	mov	r17,r2
1010c8bc:	003f4606 	br	1010c5d8 <__alt_data_end+0xfffec5d8>
1010c8c0:	100f883a 	mov	r7,r2
1010c8c4:	003f2b06 	br	1010c574 <__alt_data_end+0xfffec574>
1010c8c8:	180d883a 	mov	r6,r3
1010c8cc:	003f1306 	br	1010c51c <__alt_data_end+0xfffec51c>
1010c8d0:	813fe436 	bltu	r16,r4,1010c864 <__alt_data_end+0xfffec864>
1010c8d4:	0007883a 	mov	r3,zero
1010c8d8:	003f3f06 	br	1010c5d8 <__alt_data_end+0xfffec5d8>
1010c8dc:	ba402c36 	bltu	r23,r9,1010c990 <__divdf3+0x810>
1010c8e0:	4dc05426 	beq	r9,r23,1010ca34 <__divdf3+0x8b4>
1010c8e4:	1011883a 	mov	r8,r2
1010c8e8:	003f8906 	br	1010c710 <__alt_data_end+0xfffec710>
1010c8ec:	023fffc4 	movi	r8,-1
1010c8f0:	003f8806 	br	1010c714 <__alt_data_end+0xfffec714>
1010c8f4:	1811883a 	mov	r8,r3
1010c8f8:	003f5406 	br	1010c64c <__alt_data_end+0xfffec64c>
1010c8fc:	1025883a 	mov	r18,r2
1010c900:	003f6d06 	br	1010c6b8 <__alt_data_end+0xfffec6b8>
1010c904:	b827883a 	mov	r19,r23
1010c908:	003f8206 	br	1010c714 <__alt_data_end+0xfffec714>
1010c90c:	010007c4 	movi	r4,31
1010c910:	20c02616 	blt	r4,r3,1010c9ac <__divdf3+0x82c>
1010c914:	00800804 	movi	r2,32
1010c918:	10c5c83a 	sub	r2,r2,r3
1010c91c:	888a983a 	sll	r5,r17,r2
1010c920:	40c8d83a 	srl	r4,r8,r3
1010c924:	4084983a 	sll	r2,r8,r2
1010c928:	88e2d83a 	srl	r17,r17,r3
1010c92c:	2906b03a 	or	r3,r5,r4
1010c930:	1004c03a 	cmpne	r2,r2,zero
1010c934:	1886b03a 	or	r3,r3,r2
1010c938:	188001cc 	andi	r2,r3,7
1010c93c:	10000726 	beq	r2,zero,1010c95c <__divdf3+0x7dc>
1010c940:	188003cc 	andi	r2,r3,15
1010c944:	01000104 	movi	r4,4
1010c948:	11000426 	beq	r2,r4,1010c95c <__divdf3+0x7dc>
1010c94c:	1805883a 	mov	r2,r3
1010c950:	10c00104 	addi	r3,r2,4
1010c954:	1885803a 	cmpltu	r2,r3,r2
1010c958:	88a3883a 	add	r17,r17,r2
1010c95c:	8880202c 	andhi	r2,r17,128
1010c960:	10002726 	beq	r2,zero,1010ca00 <__divdf3+0x880>
1010c964:	98c0004c 	andi	r3,r19,1
1010c968:	00800044 	movi	r2,1
1010c96c:	000b883a 	mov	r5,zero
1010c970:	0025883a 	mov	r18,zero
1010c974:	003e6106 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c978:	85a1883a 	add	r16,r16,r22
1010c97c:	8585803a 	cmpltu	r2,r16,r22
1010c980:	1705883a 	add	r2,r2,fp
1010c984:	14a5883a 	add	r18,r2,r18
1010c988:	8c7fff84 	addi	r17,r17,-2
1010c98c:	003f1106 	br	1010c5d4 <__alt_data_end+0xfffec5d4>
1010c990:	b589883a 	add	r4,r22,r22
1010c994:	25ad803a 	cmpltu	r22,r4,r22
1010c998:	b739883a 	add	fp,r22,fp
1010c99c:	40bfff84 	addi	r2,r8,-2
1010c9a0:	bf2f883a 	add	r23,r23,fp
1010c9a4:	202d883a 	mov	r22,r4
1010c9a8:	003f9306 	br	1010c7f8 <__alt_data_end+0xfffec7f8>
1010c9ac:	013ff844 	movi	r4,-31
1010c9b0:	2085c83a 	sub	r2,r4,r2
1010c9b4:	8888d83a 	srl	r4,r17,r2
1010c9b8:	00800804 	movi	r2,32
1010c9bc:	18802126 	beq	r3,r2,1010ca44 <__divdf3+0x8c4>
1010c9c0:	00801004 	movi	r2,64
1010c9c4:	10c5c83a 	sub	r2,r2,r3
1010c9c8:	8884983a 	sll	r2,r17,r2
1010c9cc:	1204b03a 	or	r2,r2,r8
1010c9d0:	1004c03a 	cmpne	r2,r2,zero
1010c9d4:	2084b03a 	or	r2,r4,r2
1010c9d8:	144001cc 	andi	r17,r2,7
1010c9dc:	88000d1e 	bne	r17,zero,1010ca14 <__divdf3+0x894>
1010c9e0:	000b883a 	mov	r5,zero
1010c9e4:	1024d0fa 	srli	r18,r2,3
1010c9e8:	98c0004c 	andi	r3,r19,1
1010c9ec:	0005883a 	mov	r2,zero
1010c9f0:	9464b03a 	or	r18,r18,r17
1010c9f4:	003e4106 	br	1010c2fc <__alt_data_end+0xfffec2fc>
1010c9f8:	1007883a 	mov	r3,r2
1010c9fc:	0023883a 	mov	r17,zero
1010ca00:	880a927a 	slli	r5,r17,9
1010ca04:	1805883a 	mov	r2,r3
1010ca08:	8822977a 	slli	r17,r17,29
1010ca0c:	280ad33a 	srli	r5,r5,12
1010ca10:	003ff406 	br	1010c9e4 <__alt_data_end+0xfffec9e4>
1010ca14:	10c003cc 	andi	r3,r2,15
1010ca18:	01000104 	movi	r4,4
1010ca1c:	193ff626 	beq	r3,r4,1010c9f8 <__alt_data_end+0xfffec9f8>
1010ca20:	0023883a 	mov	r17,zero
1010ca24:	003fca06 	br	1010c950 <__alt_data_end+0xfffec950>
1010ca28:	813fd336 	bltu	r16,r4,1010c978 <__alt_data_end+0xfffec978>
1010ca2c:	1023883a 	mov	r17,r2
1010ca30:	003fa806 	br	1010c8d4 <__alt_data_end+0xfffec8d4>
1010ca34:	b0ffd636 	bltu	r22,r3,1010c990 <__alt_data_end+0xfffec990>
1010ca38:	1011883a 	mov	r8,r2
1010ca3c:	b0ff341e 	bne	r22,r3,1010c710 <__alt_data_end+0xfffec710>
1010ca40:	003f3406 	br	1010c714 <__alt_data_end+0xfffec714>
1010ca44:	0005883a 	mov	r2,zero
1010ca48:	003fe006 	br	1010c9cc <__alt_data_end+0xfffec9cc>
1010ca4c:	00800434 	movhi	r2,16
1010ca50:	89400234 	orhi	r5,r17,8
1010ca54:	10bfffc4 	addi	r2,r2,-1
1010ca58:	b807883a 	mov	r3,r23
1010ca5c:	288a703a 	and	r5,r5,r2
1010ca60:	4025883a 	mov	r18,r8
1010ca64:	003e8206 	br	1010c470 <__alt_data_end+0xfffec470>

1010ca68 <__eqdf2>:
1010ca68:	2804d53a 	srli	r2,r5,20
1010ca6c:	3806d53a 	srli	r3,r7,20
1010ca70:	02000434 	movhi	r8,16
1010ca74:	423fffc4 	addi	r8,r8,-1
1010ca78:	1081ffcc 	andi	r2,r2,2047
1010ca7c:	0281ffc4 	movi	r10,2047
1010ca80:	2a12703a 	and	r9,r5,r8
1010ca84:	18c1ffcc 	andi	r3,r3,2047
1010ca88:	3a10703a 	and	r8,r7,r8
1010ca8c:	280ad7fa 	srli	r5,r5,31
1010ca90:	380ed7fa 	srli	r7,r7,31
1010ca94:	12801026 	beq	r2,r10,1010cad8 <__eqdf2+0x70>
1010ca98:	0281ffc4 	movi	r10,2047
1010ca9c:	1a800a26 	beq	r3,r10,1010cac8 <__eqdf2+0x60>
1010caa0:	10c00226 	beq	r2,r3,1010caac <__eqdf2+0x44>
1010caa4:	00800044 	movi	r2,1
1010caa8:	f800283a 	ret
1010caac:	4a3ffd1e 	bne	r9,r8,1010caa4 <__alt_data_end+0xfffecaa4>
1010cab0:	21bffc1e 	bne	r4,r6,1010caa4 <__alt_data_end+0xfffecaa4>
1010cab4:	29c00c26 	beq	r5,r7,1010cae8 <__eqdf2+0x80>
1010cab8:	103ffa1e 	bne	r2,zero,1010caa4 <__alt_data_end+0xfffecaa4>
1010cabc:	2244b03a 	or	r2,r4,r9
1010cac0:	1004c03a 	cmpne	r2,r2,zero
1010cac4:	f800283a 	ret
1010cac8:	3214b03a 	or	r10,r6,r8
1010cacc:	503ff426 	beq	r10,zero,1010caa0 <__alt_data_end+0xfffecaa0>
1010cad0:	00800044 	movi	r2,1
1010cad4:	f800283a 	ret
1010cad8:	2254b03a 	or	r10,r4,r9
1010cadc:	503fee26 	beq	r10,zero,1010ca98 <__alt_data_end+0xfffeca98>
1010cae0:	00800044 	movi	r2,1
1010cae4:	f800283a 	ret
1010cae8:	0005883a 	mov	r2,zero
1010caec:	f800283a 	ret

1010caf0 <__gedf2>:
1010caf0:	2804d53a 	srli	r2,r5,20
1010caf4:	3806d53a 	srli	r3,r7,20
1010caf8:	02000434 	movhi	r8,16
1010cafc:	423fffc4 	addi	r8,r8,-1
1010cb00:	1081ffcc 	andi	r2,r2,2047
1010cb04:	0241ffc4 	movi	r9,2047
1010cb08:	2a14703a 	and	r10,r5,r8
1010cb0c:	18c1ffcc 	andi	r3,r3,2047
1010cb10:	3a10703a 	and	r8,r7,r8
1010cb14:	280ad7fa 	srli	r5,r5,31
1010cb18:	380ed7fa 	srli	r7,r7,31
1010cb1c:	12401d26 	beq	r2,r9,1010cb94 <__gedf2+0xa4>
1010cb20:	0241ffc4 	movi	r9,2047
1010cb24:	1a401226 	beq	r3,r9,1010cb70 <__gedf2+0x80>
1010cb28:	1000081e 	bne	r2,zero,1010cb4c <__gedf2+0x5c>
1010cb2c:	2296b03a 	or	r11,r4,r10
1010cb30:	5813003a 	cmpeq	r9,r11,zero
1010cb34:	1800091e 	bne	r3,zero,1010cb5c <__gedf2+0x6c>
1010cb38:	3218b03a 	or	r12,r6,r8
1010cb3c:	6000071e 	bne	r12,zero,1010cb5c <__gedf2+0x6c>
1010cb40:	0005883a 	mov	r2,zero
1010cb44:	5800101e 	bne	r11,zero,1010cb88 <__gedf2+0x98>
1010cb48:	f800283a 	ret
1010cb4c:	18000c1e 	bne	r3,zero,1010cb80 <__gedf2+0x90>
1010cb50:	3212b03a 	or	r9,r6,r8
1010cb54:	48000c26 	beq	r9,zero,1010cb88 <__gedf2+0x98>
1010cb58:	0013883a 	mov	r9,zero
1010cb5c:	39c03fcc 	andi	r7,r7,255
1010cb60:	48000826 	beq	r9,zero,1010cb84 <__gedf2+0x94>
1010cb64:	38000926 	beq	r7,zero,1010cb8c <__gedf2+0x9c>
1010cb68:	00800044 	movi	r2,1
1010cb6c:	f800283a 	ret
1010cb70:	3212b03a 	or	r9,r6,r8
1010cb74:	483fec26 	beq	r9,zero,1010cb28 <__alt_data_end+0xfffecb28>
1010cb78:	00bfff84 	movi	r2,-2
1010cb7c:	f800283a 	ret
1010cb80:	39c03fcc 	andi	r7,r7,255
1010cb84:	29c00626 	beq	r5,r7,1010cba0 <__gedf2+0xb0>
1010cb88:	283ff726 	beq	r5,zero,1010cb68 <__alt_data_end+0xfffecb68>
1010cb8c:	00bfffc4 	movi	r2,-1
1010cb90:	f800283a 	ret
1010cb94:	2292b03a 	or	r9,r4,r10
1010cb98:	483fe126 	beq	r9,zero,1010cb20 <__alt_data_end+0xfffecb20>
1010cb9c:	003ff606 	br	1010cb78 <__alt_data_end+0xfffecb78>
1010cba0:	18bff916 	blt	r3,r2,1010cb88 <__alt_data_end+0xfffecb88>
1010cba4:	10c00316 	blt	r2,r3,1010cbb4 <__gedf2+0xc4>
1010cba8:	42bff736 	bltu	r8,r10,1010cb88 <__alt_data_end+0xfffecb88>
1010cbac:	52000326 	beq	r10,r8,1010cbbc <__gedf2+0xcc>
1010cbb0:	5200042e 	bgeu	r10,r8,1010cbc4 <__gedf2+0xd4>
1010cbb4:	283fec1e 	bne	r5,zero,1010cb68 <__alt_data_end+0xfffecb68>
1010cbb8:	003ff406 	br	1010cb8c <__alt_data_end+0xfffecb8c>
1010cbbc:	313ff236 	bltu	r6,r4,1010cb88 <__alt_data_end+0xfffecb88>
1010cbc0:	21bffc36 	bltu	r4,r6,1010cbb4 <__alt_data_end+0xfffecbb4>
1010cbc4:	0005883a 	mov	r2,zero
1010cbc8:	f800283a 	ret

1010cbcc <__ledf2>:
1010cbcc:	2804d53a 	srli	r2,r5,20
1010cbd0:	3810d53a 	srli	r8,r7,20
1010cbd4:	00c00434 	movhi	r3,16
1010cbd8:	18ffffc4 	addi	r3,r3,-1
1010cbdc:	1081ffcc 	andi	r2,r2,2047
1010cbe0:	0241ffc4 	movi	r9,2047
1010cbe4:	28d4703a 	and	r10,r5,r3
1010cbe8:	4201ffcc 	andi	r8,r8,2047
1010cbec:	38c6703a 	and	r3,r7,r3
1010cbf0:	280ad7fa 	srli	r5,r5,31
1010cbf4:	380ed7fa 	srli	r7,r7,31
1010cbf8:	12401f26 	beq	r2,r9,1010cc78 <__ledf2+0xac>
1010cbfc:	0241ffc4 	movi	r9,2047
1010cc00:	42401426 	beq	r8,r9,1010cc54 <__ledf2+0x88>
1010cc04:	1000091e 	bne	r2,zero,1010cc2c <__ledf2+0x60>
1010cc08:	2296b03a 	or	r11,r4,r10
1010cc0c:	5813003a 	cmpeq	r9,r11,zero
1010cc10:	29403fcc 	andi	r5,r5,255
1010cc14:	40000a1e 	bne	r8,zero,1010cc40 <__ledf2+0x74>
1010cc18:	30d8b03a 	or	r12,r6,r3
1010cc1c:	6000081e 	bne	r12,zero,1010cc40 <__ledf2+0x74>
1010cc20:	0005883a 	mov	r2,zero
1010cc24:	5800111e 	bne	r11,zero,1010cc6c <__ledf2+0xa0>
1010cc28:	f800283a 	ret
1010cc2c:	29403fcc 	andi	r5,r5,255
1010cc30:	40000c1e 	bne	r8,zero,1010cc64 <__ledf2+0x98>
1010cc34:	30d2b03a 	or	r9,r6,r3
1010cc38:	48000c26 	beq	r9,zero,1010cc6c <__ledf2+0xa0>
1010cc3c:	0013883a 	mov	r9,zero
1010cc40:	39c03fcc 	andi	r7,r7,255
1010cc44:	48000826 	beq	r9,zero,1010cc68 <__ledf2+0x9c>
1010cc48:	38001126 	beq	r7,zero,1010cc90 <__ledf2+0xc4>
1010cc4c:	00800044 	movi	r2,1
1010cc50:	f800283a 	ret
1010cc54:	30d2b03a 	or	r9,r6,r3
1010cc58:	483fea26 	beq	r9,zero,1010cc04 <__alt_data_end+0xfffecc04>
1010cc5c:	00800084 	movi	r2,2
1010cc60:	f800283a 	ret
1010cc64:	39c03fcc 	andi	r7,r7,255
1010cc68:	39400726 	beq	r7,r5,1010cc88 <__ledf2+0xbc>
1010cc6c:	2800081e 	bne	r5,zero,1010cc90 <__ledf2+0xc4>
1010cc70:	00800044 	movi	r2,1
1010cc74:	f800283a 	ret
1010cc78:	2292b03a 	or	r9,r4,r10
1010cc7c:	483fdf26 	beq	r9,zero,1010cbfc <__alt_data_end+0xfffecbfc>
1010cc80:	00800084 	movi	r2,2
1010cc84:	f800283a 	ret
1010cc88:	4080030e 	bge	r8,r2,1010cc98 <__ledf2+0xcc>
1010cc8c:	383fef26 	beq	r7,zero,1010cc4c <__alt_data_end+0xfffecc4c>
1010cc90:	00bfffc4 	movi	r2,-1
1010cc94:	f800283a 	ret
1010cc98:	123feb16 	blt	r2,r8,1010cc48 <__alt_data_end+0xfffecc48>
1010cc9c:	1abff336 	bltu	r3,r10,1010cc6c <__alt_data_end+0xfffecc6c>
1010cca0:	50c00326 	beq	r10,r3,1010ccb0 <__ledf2+0xe4>
1010cca4:	50c0042e 	bgeu	r10,r3,1010ccb8 <__ledf2+0xec>
1010cca8:	283fe81e 	bne	r5,zero,1010cc4c <__alt_data_end+0xfffecc4c>
1010ccac:	003ff806 	br	1010cc90 <__alt_data_end+0xfffecc90>
1010ccb0:	313fee36 	bltu	r6,r4,1010cc6c <__alt_data_end+0xfffecc6c>
1010ccb4:	21bffc36 	bltu	r4,r6,1010cca8 <__alt_data_end+0xfffecca8>
1010ccb8:	0005883a 	mov	r2,zero
1010ccbc:	f800283a 	ret

1010ccc0 <__muldf3>:
1010ccc0:	defff304 	addi	sp,sp,-52
1010ccc4:	2804d53a 	srli	r2,r5,20
1010ccc8:	dd800915 	stw	r22,36(sp)
1010cccc:	282cd7fa 	srli	r22,r5,31
1010ccd0:	dc000315 	stw	r16,12(sp)
1010ccd4:	04000434 	movhi	r16,16
1010ccd8:	dd400815 	stw	r21,32(sp)
1010ccdc:	dc800515 	stw	r18,20(sp)
1010cce0:	843fffc4 	addi	r16,r16,-1
1010cce4:	dfc00c15 	stw	ra,48(sp)
1010cce8:	df000b15 	stw	fp,44(sp)
1010ccec:	ddc00a15 	stw	r23,40(sp)
1010ccf0:	dd000715 	stw	r20,28(sp)
1010ccf4:	dcc00615 	stw	r19,24(sp)
1010ccf8:	dc400415 	stw	r17,16(sp)
1010ccfc:	1481ffcc 	andi	r18,r2,2047
1010cd00:	2c20703a 	and	r16,r5,r16
1010cd04:	b02b883a 	mov	r21,r22
1010cd08:	b2403fcc 	andi	r9,r22,255
1010cd0c:	90006026 	beq	r18,zero,1010ce90 <__muldf3+0x1d0>
1010cd10:	0081ffc4 	movi	r2,2047
1010cd14:	2029883a 	mov	r20,r4
1010cd18:	90803626 	beq	r18,r2,1010cdf4 <__muldf3+0x134>
1010cd1c:	80800434 	orhi	r2,r16,16
1010cd20:	100490fa 	slli	r2,r2,3
1010cd24:	2020d77a 	srli	r16,r4,29
1010cd28:	202890fa 	slli	r20,r4,3
1010cd2c:	94bf0044 	addi	r18,r18,-1023
1010cd30:	80a0b03a 	or	r16,r16,r2
1010cd34:	0027883a 	mov	r19,zero
1010cd38:	0039883a 	mov	fp,zero
1010cd3c:	3804d53a 	srli	r2,r7,20
1010cd40:	382ed7fa 	srli	r23,r7,31
1010cd44:	04400434 	movhi	r17,16
1010cd48:	8c7fffc4 	addi	r17,r17,-1
1010cd4c:	1081ffcc 	andi	r2,r2,2047
1010cd50:	3011883a 	mov	r8,r6
1010cd54:	3c62703a 	and	r17,r7,r17
1010cd58:	ba803fcc 	andi	r10,r23,255
1010cd5c:	10006d26 	beq	r2,zero,1010cf14 <__muldf3+0x254>
1010cd60:	00c1ffc4 	movi	r3,2047
1010cd64:	10c06526 	beq	r2,r3,1010cefc <__muldf3+0x23c>
1010cd68:	88c00434 	orhi	r3,r17,16
1010cd6c:	180690fa 	slli	r3,r3,3
1010cd70:	3022d77a 	srli	r17,r6,29
1010cd74:	301090fa 	slli	r8,r6,3
1010cd78:	10bf0044 	addi	r2,r2,-1023
1010cd7c:	88e2b03a 	or	r17,r17,r3
1010cd80:	000b883a 	mov	r5,zero
1010cd84:	9085883a 	add	r2,r18,r2
1010cd88:	2cc8b03a 	or	r4,r5,r19
1010cd8c:	00c003c4 	movi	r3,15
1010cd90:	bdacf03a 	xor	r22,r23,r22
1010cd94:	12c00044 	addi	r11,r2,1
1010cd98:	19009936 	bltu	r3,r4,1010d000 <__muldf3+0x340>
1010cd9c:	200890ba 	slli	r4,r4,2
1010cda0:	00c40474 	movhi	r3,4113
1010cda4:	18f36d04 	addi	r3,r3,-12876
1010cda8:	20c9883a 	add	r4,r4,r3
1010cdac:	20c00017 	ldw	r3,0(r4)
1010cdb0:	1800683a 	jmp	r3
1010cdb4:	1010d000 	call	11010d00 <__alt_data_end+0xef0d00>
1010cdb8:	1010ce14 	ori	zero,r2,17208
1010cdbc:	1010ce14 	ori	zero,r2,17208
1010cdc0:	1010ce10 	cmplti	zero,r2,17208
1010cdc4:	1010cfdc 	xori	zero,r2,17215
1010cdc8:	1010cfdc 	xori	zero,r2,17215
1010cdcc:	1010cfc4 	addi	zero,r2,17215
1010cdd0:	1010ce10 	cmplti	zero,r2,17208
1010cdd4:	1010cfdc 	xori	zero,r2,17215
1010cdd8:	1010cfc4 	addi	zero,r2,17215
1010cddc:	1010cfdc 	xori	zero,r2,17215
1010cde0:	1010ce10 	cmplti	zero,r2,17208
1010cde4:	1010cfec 	andhi	zero,r2,17215
1010cde8:	1010cfec 	andhi	zero,r2,17215
1010cdec:	1010cfec 	andhi	zero,r2,17215
1010cdf0:	1010d208 	cmpgei	zero,r2,17224
1010cdf4:	2404b03a 	or	r2,r4,r16
1010cdf8:	10006f1e 	bne	r2,zero,1010cfb8 <__muldf3+0x2f8>
1010cdfc:	04c00204 	movi	r19,8
1010ce00:	0021883a 	mov	r16,zero
1010ce04:	0029883a 	mov	r20,zero
1010ce08:	07000084 	movi	fp,2
1010ce0c:	003fcb06 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010ce10:	502d883a 	mov	r22,r10
1010ce14:	00800084 	movi	r2,2
1010ce18:	28805726 	beq	r5,r2,1010cf78 <__muldf3+0x2b8>
1010ce1c:	008000c4 	movi	r2,3
1010ce20:	28816626 	beq	r5,r2,1010d3bc <__muldf3+0x6fc>
1010ce24:	00800044 	movi	r2,1
1010ce28:	2881411e 	bne	r5,r2,1010d330 <__muldf3+0x670>
1010ce2c:	b02b883a 	mov	r21,r22
1010ce30:	0005883a 	mov	r2,zero
1010ce34:	000b883a 	mov	r5,zero
1010ce38:	0029883a 	mov	r20,zero
1010ce3c:	1004953a 	slli	r2,r2,20
1010ce40:	a8c03fcc 	andi	r3,r21,255
1010ce44:	04400434 	movhi	r17,16
1010ce48:	8c7fffc4 	addi	r17,r17,-1
1010ce4c:	180697fa 	slli	r3,r3,31
1010ce50:	2c4a703a 	and	r5,r5,r17
1010ce54:	288ab03a 	or	r5,r5,r2
1010ce58:	28c6b03a 	or	r3,r5,r3
1010ce5c:	a005883a 	mov	r2,r20
1010ce60:	dfc00c17 	ldw	ra,48(sp)
1010ce64:	df000b17 	ldw	fp,44(sp)
1010ce68:	ddc00a17 	ldw	r23,40(sp)
1010ce6c:	dd800917 	ldw	r22,36(sp)
1010ce70:	dd400817 	ldw	r21,32(sp)
1010ce74:	dd000717 	ldw	r20,28(sp)
1010ce78:	dcc00617 	ldw	r19,24(sp)
1010ce7c:	dc800517 	ldw	r18,20(sp)
1010ce80:	dc400417 	ldw	r17,16(sp)
1010ce84:	dc000317 	ldw	r16,12(sp)
1010ce88:	dec00d04 	addi	sp,sp,52
1010ce8c:	f800283a 	ret
1010ce90:	2404b03a 	or	r2,r4,r16
1010ce94:	2027883a 	mov	r19,r4
1010ce98:	10004226 	beq	r2,zero,1010cfa4 <__muldf3+0x2e4>
1010ce9c:	8000fc26 	beq	r16,zero,1010d290 <__muldf3+0x5d0>
1010cea0:	8009883a 	mov	r4,r16
1010cea4:	d9800215 	stw	r6,8(sp)
1010cea8:	d9c00015 	stw	r7,0(sp)
1010ceac:	da400115 	stw	r9,4(sp)
1010ceb0:	010ded80 	call	1010ded8 <__clzsi2>
1010ceb4:	d9800217 	ldw	r6,8(sp)
1010ceb8:	d9c00017 	ldw	r7,0(sp)
1010cebc:	da400117 	ldw	r9,4(sp)
1010cec0:	113ffd44 	addi	r4,r2,-11
1010cec4:	00c00704 	movi	r3,28
1010cec8:	1900ed16 	blt	r3,r4,1010d280 <__muldf3+0x5c0>
1010cecc:	00c00744 	movi	r3,29
1010ced0:	147ffe04 	addi	r17,r2,-8
1010ced4:	1907c83a 	sub	r3,r3,r4
1010ced8:	8460983a 	sll	r16,r16,r17
1010cedc:	98c6d83a 	srl	r3,r19,r3
1010cee0:	9c68983a 	sll	r20,r19,r17
1010cee4:	1c20b03a 	or	r16,r3,r16
1010cee8:	1080fcc4 	addi	r2,r2,1011
1010ceec:	00a5c83a 	sub	r18,zero,r2
1010cef0:	0027883a 	mov	r19,zero
1010cef4:	0039883a 	mov	fp,zero
1010cef8:	003f9006 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010cefc:	3446b03a 	or	r3,r6,r17
1010cf00:	1800261e 	bne	r3,zero,1010cf9c <__muldf3+0x2dc>
1010cf04:	0023883a 	mov	r17,zero
1010cf08:	0011883a 	mov	r8,zero
1010cf0c:	01400084 	movi	r5,2
1010cf10:	003f9c06 	br	1010cd84 <__alt_data_end+0xfffecd84>
1010cf14:	3446b03a 	or	r3,r6,r17
1010cf18:	18001c26 	beq	r3,zero,1010cf8c <__muldf3+0x2cc>
1010cf1c:	8800ce26 	beq	r17,zero,1010d258 <__muldf3+0x598>
1010cf20:	8809883a 	mov	r4,r17
1010cf24:	d9800215 	stw	r6,8(sp)
1010cf28:	da400115 	stw	r9,4(sp)
1010cf2c:	da800015 	stw	r10,0(sp)
1010cf30:	010ded80 	call	1010ded8 <__clzsi2>
1010cf34:	d9800217 	ldw	r6,8(sp)
1010cf38:	da400117 	ldw	r9,4(sp)
1010cf3c:	da800017 	ldw	r10,0(sp)
1010cf40:	113ffd44 	addi	r4,r2,-11
1010cf44:	00c00704 	movi	r3,28
1010cf48:	1900bf16 	blt	r3,r4,1010d248 <__muldf3+0x588>
1010cf4c:	00c00744 	movi	r3,29
1010cf50:	123ffe04 	addi	r8,r2,-8
1010cf54:	1907c83a 	sub	r3,r3,r4
1010cf58:	8a22983a 	sll	r17,r17,r8
1010cf5c:	30c6d83a 	srl	r3,r6,r3
1010cf60:	3210983a 	sll	r8,r6,r8
1010cf64:	1c62b03a 	or	r17,r3,r17
1010cf68:	1080fcc4 	addi	r2,r2,1011
1010cf6c:	0085c83a 	sub	r2,zero,r2
1010cf70:	000b883a 	mov	r5,zero
1010cf74:	003f8306 	br	1010cd84 <__alt_data_end+0xfffecd84>
1010cf78:	b02b883a 	mov	r21,r22
1010cf7c:	0081ffc4 	movi	r2,2047
1010cf80:	000b883a 	mov	r5,zero
1010cf84:	0029883a 	mov	r20,zero
1010cf88:	003fac06 	br	1010ce3c <__alt_data_end+0xfffece3c>
1010cf8c:	0023883a 	mov	r17,zero
1010cf90:	0011883a 	mov	r8,zero
1010cf94:	01400044 	movi	r5,1
1010cf98:	003f7a06 	br	1010cd84 <__alt_data_end+0xfffecd84>
1010cf9c:	014000c4 	movi	r5,3
1010cfa0:	003f7806 	br	1010cd84 <__alt_data_end+0xfffecd84>
1010cfa4:	04c00104 	movi	r19,4
1010cfa8:	0021883a 	mov	r16,zero
1010cfac:	0029883a 	mov	r20,zero
1010cfb0:	07000044 	movi	fp,1
1010cfb4:	003f6106 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010cfb8:	04c00304 	movi	r19,12
1010cfbc:	070000c4 	movi	fp,3
1010cfc0:	003f5e06 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010cfc4:	01400434 	movhi	r5,16
1010cfc8:	002b883a 	mov	r21,zero
1010cfcc:	297fffc4 	addi	r5,r5,-1
1010cfd0:	053fffc4 	movi	r20,-1
1010cfd4:	0081ffc4 	movi	r2,2047
1010cfd8:	003f9806 	br	1010ce3c <__alt_data_end+0xfffece3c>
1010cfdc:	8023883a 	mov	r17,r16
1010cfe0:	a011883a 	mov	r8,r20
1010cfe4:	e00b883a 	mov	r5,fp
1010cfe8:	003f8a06 	br	1010ce14 <__alt_data_end+0xfffece14>
1010cfec:	8023883a 	mov	r17,r16
1010cff0:	a011883a 	mov	r8,r20
1010cff4:	482d883a 	mov	r22,r9
1010cff8:	e00b883a 	mov	r5,fp
1010cffc:	003f8506 	br	1010ce14 <__alt_data_end+0xfffece14>
1010d000:	a00ad43a 	srli	r5,r20,16
1010d004:	401ad43a 	srli	r13,r8,16
1010d008:	a53fffcc 	andi	r20,r20,65535
1010d00c:	423fffcc 	andi	r8,r8,65535
1010d010:	4519383a 	mul	r12,r8,r20
1010d014:	4147383a 	mul	r3,r8,r5
1010d018:	6d09383a 	mul	r4,r13,r20
1010d01c:	600cd43a 	srli	r6,r12,16
1010d020:	2b5d383a 	mul	r14,r5,r13
1010d024:	20c9883a 	add	r4,r4,r3
1010d028:	310d883a 	add	r6,r6,r4
1010d02c:	30c0022e 	bgeu	r6,r3,1010d038 <__muldf3+0x378>
1010d030:	00c00074 	movhi	r3,1
1010d034:	70dd883a 	add	r14,r14,r3
1010d038:	8826d43a 	srli	r19,r17,16
1010d03c:	8bffffcc 	andi	r15,r17,65535
1010d040:	7d23383a 	mul	r17,r15,r20
1010d044:	7949383a 	mul	r4,r15,r5
1010d048:	9d29383a 	mul	r20,r19,r20
1010d04c:	8814d43a 	srli	r10,r17,16
1010d050:	3012943a 	slli	r9,r6,16
1010d054:	a129883a 	add	r20,r20,r4
1010d058:	633fffcc 	andi	r12,r12,65535
1010d05c:	5515883a 	add	r10,r10,r20
1010d060:	3006d43a 	srli	r3,r6,16
1010d064:	4b13883a 	add	r9,r9,r12
1010d068:	2ccb383a 	mul	r5,r5,r19
1010d06c:	5100022e 	bgeu	r10,r4,1010d078 <__muldf3+0x3b8>
1010d070:	01000074 	movhi	r4,1
1010d074:	290b883a 	add	r5,r5,r4
1010d078:	802ad43a 	srli	r21,r16,16
1010d07c:	843fffcc 	andi	r16,r16,65535
1010d080:	440d383a 	mul	r6,r8,r16
1010d084:	4565383a 	mul	r18,r8,r21
1010d088:	8349383a 	mul	r4,r16,r13
1010d08c:	500e943a 	slli	r7,r10,16
1010d090:	3010d43a 	srli	r8,r6,16
1010d094:	5028d43a 	srli	r20,r10,16
1010d098:	2489883a 	add	r4,r4,r18
1010d09c:	8abfffcc 	andi	r10,r17,65535
1010d0a0:	3a95883a 	add	r10,r7,r10
1010d0a4:	4119883a 	add	r12,r8,r4
1010d0a8:	a169883a 	add	r20,r20,r5
1010d0ac:	1a87883a 	add	r3,r3,r10
1010d0b0:	6d5b383a 	mul	r13,r13,r21
1010d0b4:	6480022e 	bgeu	r12,r18,1010d0c0 <__muldf3+0x400>
1010d0b8:	01000074 	movhi	r4,1
1010d0bc:	691b883a 	add	r13,r13,r4
1010d0c0:	7c25383a 	mul	r18,r15,r16
1010d0c4:	7d4b383a 	mul	r5,r15,r21
1010d0c8:	84cf383a 	mul	r7,r16,r19
1010d0cc:	901ed43a 	srli	r15,r18,16
1010d0d0:	6008d43a 	srli	r4,r12,16
1010d0d4:	6010943a 	slli	r8,r12,16
1010d0d8:	394f883a 	add	r7,r7,r5
1010d0dc:	333fffcc 	andi	r12,r6,65535
1010d0e0:	79df883a 	add	r15,r15,r7
1010d0e4:	235b883a 	add	r13,r4,r13
1010d0e8:	9d63383a 	mul	r17,r19,r21
1010d0ec:	4309883a 	add	r4,r8,r12
1010d0f0:	7940022e 	bgeu	r15,r5,1010d0fc <__muldf3+0x43c>
1010d0f4:	01400074 	movhi	r5,1
1010d0f8:	8963883a 	add	r17,r17,r5
1010d0fc:	780a943a 	slli	r5,r15,16
1010d100:	91bfffcc 	andi	r6,r18,65535
1010d104:	70c7883a 	add	r3,r14,r3
1010d108:	298d883a 	add	r6,r5,r6
1010d10c:	1a8f803a 	cmpltu	r7,r3,r10
1010d110:	350b883a 	add	r5,r6,r20
1010d114:	20c7883a 	add	r3,r4,r3
1010d118:	3955883a 	add	r10,r7,r5
1010d11c:	1909803a 	cmpltu	r4,r3,r4
1010d120:	6a91883a 	add	r8,r13,r10
1010d124:	780cd43a 	srli	r6,r15,16
1010d128:	2219883a 	add	r12,r4,r8
1010d12c:	2d0b803a 	cmpltu	r5,r5,r20
1010d130:	51cf803a 	cmpltu	r7,r10,r7
1010d134:	29ceb03a 	or	r7,r5,r7
1010d138:	4351803a 	cmpltu	r8,r8,r13
1010d13c:	610b803a 	cmpltu	r5,r12,r4
1010d140:	4148b03a 	or	r4,r8,r5
1010d144:	398f883a 	add	r7,r7,r6
1010d148:	3909883a 	add	r4,r7,r4
1010d14c:	1810927a 	slli	r8,r3,9
1010d150:	2449883a 	add	r4,r4,r17
1010d154:	2008927a 	slli	r4,r4,9
1010d158:	6022d5fa 	srli	r17,r12,23
1010d15c:	1806d5fa 	srli	r3,r3,23
1010d160:	4252b03a 	or	r9,r8,r9
1010d164:	600a927a 	slli	r5,r12,9
1010d168:	4810c03a 	cmpne	r8,r9,zero
1010d16c:	2462b03a 	or	r17,r4,r17
1010d170:	40c6b03a 	or	r3,r8,r3
1010d174:	8900402c 	andhi	r4,r17,256
1010d178:	1950b03a 	or	r8,r3,r5
1010d17c:	20000726 	beq	r4,zero,1010d19c <__muldf3+0x4dc>
1010d180:	4006d07a 	srli	r3,r8,1
1010d184:	880497fa 	slli	r2,r17,31
1010d188:	4200004c 	andi	r8,r8,1
1010d18c:	8822d07a 	srli	r17,r17,1
1010d190:	1a10b03a 	or	r8,r3,r8
1010d194:	1210b03a 	or	r8,r2,r8
1010d198:	5805883a 	mov	r2,r11
1010d19c:	1140ffc4 	addi	r5,r2,1023
1010d1a0:	0140440e 	bge	zero,r5,1010d2b4 <__muldf3+0x5f4>
1010d1a4:	40c001cc 	andi	r3,r8,7
1010d1a8:	18000726 	beq	r3,zero,1010d1c8 <__muldf3+0x508>
1010d1ac:	40c003cc 	andi	r3,r8,15
1010d1b0:	01000104 	movi	r4,4
1010d1b4:	19000426 	beq	r3,r4,1010d1c8 <__muldf3+0x508>
1010d1b8:	4107883a 	add	r3,r8,r4
1010d1bc:	1a11803a 	cmpltu	r8,r3,r8
1010d1c0:	8a23883a 	add	r17,r17,r8
1010d1c4:	1811883a 	mov	r8,r3
1010d1c8:	88c0402c 	andhi	r3,r17,256
1010d1cc:	18000426 	beq	r3,zero,1010d1e0 <__muldf3+0x520>
1010d1d0:	11410004 	addi	r5,r2,1024
1010d1d4:	00bfc034 	movhi	r2,65280
1010d1d8:	10bfffc4 	addi	r2,r2,-1
1010d1dc:	88a2703a 	and	r17,r17,r2
1010d1e0:	0081ff84 	movi	r2,2046
1010d1e4:	117f6416 	blt	r2,r5,1010cf78 <__alt_data_end+0xfffecf78>
1010d1e8:	8828977a 	slli	r20,r17,29
1010d1ec:	4010d0fa 	srli	r8,r8,3
1010d1f0:	8822927a 	slli	r17,r17,9
1010d1f4:	2881ffcc 	andi	r2,r5,2047
1010d1f8:	a228b03a 	or	r20,r20,r8
1010d1fc:	880ad33a 	srli	r5,r17,12
1010d200:	b02b883a 	mov	r21,r22
1010d204:	003f0d06 	br	1010ce3c <__alt_data_end+0xfffece3c>
1010d208:	8080022c 	andhi	r2,r16,8
1010d20c:	10000926 	beq	r2,zero,1010d234 <__muldf3+0x574>
1010d210:	8880022c 	andhi	r2,r17,8
1010d214:	1000071e 	bne	r2,zero,1010d234 <__muldf3+0x574>
1010d218:	00800434 	movhi	r2,16
1010d21c:	89400234 	orhi	r5,r17,8
1010d220:	10bfffc4 	addi	r2,r2,-1
1010d224:	b82b883a 	mov	r21,r23
1010d228:	288a703a 	and	r5,r5,r2
1010d22c:	4029883a 	mov	r20,r8
1010d230:	003f6806 	br	1010cfd4 <__alt_data_end+0xfffecfd4>
1010d234:	00800434 	movhi	r2,16
1010d238:	81400234 	orhi	r5,r16,8
1010d23c:	10bfffc4 	addi	r2,r2,-1
1010d240:	288a703a 	and	r5,r5,r2
1010d244:	003f6306 	br	1010cfd4 <__alt_data_end+0xfffecfd4>
1010d248:	147ff604 	addi	r17,r2,-40
1010d24c:	3462983a 	sll	r17,r6,r17
1010d250:	0011883a 	mov	r8,zero
1010d254:	003f4406 	br	1010cf68 <__alt_data_end+0xfffecf68>
1010d258:	3009883a 	mov	r4,r6
1010d25c:	d9800215 	stw	r6,8(sp)
1010d260:	da400115 	stw	r9,4(sp)
1010d264:	da800015 	stw	r10,0(sp)
1010d268:	010ded80 	call	1010ded8 <__clzsi2>
1010d26c:	10800804 	addi	r2,r2,32
1010d270:	da800017 	ldw	r10,0(sp)
1010d274:	da400117 	ldw	r9,4(sp)
1010d278:	d9800217 	ldw	r6,8(sp)
1010d27c:	003f3006 	br	1010cf40 <__alt_data_end+0xfffecf40>
1010d280:	143ff604 	addi	r16,r2,-40
1010d284:	9c20983a 	sll	r16,r19,r16
1010d288:	0029883a 	mov	r20,zero
1010d28c:	003f1606 	br	1010cee8 <__alt_data_end+0xfffecee8>
1010d290:	d9800215 	stw	r6,8(sp)
1010d294:	d9c00015 	stw	r7,0(sp)
1010d298:	da400115 	stw	r9,4(sp)
1010d29c:	010ded80 	call	1010ded8 <__clzsi2>
1010d2a0:	10800804 	addi	r2,r2,32
1010d2a4:	da400117 	ldw	r9,4(sp)
1010d2a8:	d9c00017 	ldw	r7,0(sp)
1010d2ac:	d9800217 	ldw	r6,8(sp)
1010d2b0:	003f0306 	br	1010cec0 <__alt_data_end+0xfffecec0>
1010d2b4:	00c00044 	movi	r3,1
1010d2b8:	1947c83a 	sub	r3,r3,r5
1010d2bc:	00800e04 	movi	r2,56
1010d2c0:	10feda16 	blt	r2,r3,1010ce2c <__alt_data_end+0xfffece2c>
1010d2c4:	008007c4 	movi	r2,31
1010d2c8:	10c01b16 	blt	r2,r3,1010d338 <__muldf3+0x678>
1010d2cc:	00800804 	movi	r2,32
1010d2d0:	10c5c83a 	sub	r2,r2,r3
1010d2d4:	888a983a 	sll	r5,r17,r2
1010d2d8:	40c8d83a 	srl	r4,r8,r3
1010d2dc:	4084983a 	sll	r2,r8,r2
1010d2e0:	88e2d83a 	srl	r17,r17,r3
1010d2e4:	2906b03a 	or	r3,r5,r4
1010d2e8:	1004c03a 	cmpne	r2,r2,zero
1010d2ec:	1886b03a 	or	r3,r3,r2
1010d2f0:	188001cc 	andi	r2,r3,7
1010d2f4:	10000726 	beq	r2,zero,1010d314 <__muldf3+0x654>
1010d2f8:	188003cc 	andi	r2,r3,15
1010d2fc:	01000104 	movi	r4,4
1010d300:	11000426 	beq	r2,r4,1010d314 <__muldf3+0x654>
1010d304:	1805883a 	mov	r2,r3
1010d308:	10c00104 	addi	r3,r2,4
1010d30c:	1885803a 	cmpltu	r2,r3,r2
1010d310:	88a3883a 	add	r17,r17,r2
1010d314:	8880202c 	andhi	r2,r17,128
1010d318:	10001c26 	beq	r2,zero,1010d38c <__muldf3+0x6cc>
1010d31c:	b02b883a 	mov	r21,r22
1010d320:	00800044 	movi	r2,1
1010d324:	000b883a 	mov	r5,zero
1010d328:	0029883a 	mov	r20,zero
1010d32c:	003ec306 	br	1010ce3c <__alt_data_end+0xfffece3c>
1010d330:	5805883a 	mov	r2,r11
1010d334:	003f9906 	br	1010d19c <__alt_data_end+0xfffed19c>
1010d338:	00bff844 	movi	r2,-31
1010d33c:	1145c83a 	sub	r2,r2,r5
1010d340:	8888d83a 	srl	r4,r17,r2
1010d344:	00800804 	movi	r2,32
1010d348:	18801a26 	beq	r3,r2,1010d3b4 <__muldf3+0x6f4>
1010d34c:	00801004 	movi	r2,64
1010d350:	10c5c83a 	sub	r2,r2,r3
1010d354:	8884983a 	sll	r2,r17,r2
1010d358:	1204b03a 	or	r2,r2,r8
1010d35c:	1004c03a 	cmpne	r2,r2,zero
1010d360:	2084b03a 	or	r2,r4,r2
1010d364:	144001cc 	andi	r17,r2,7
1010d368:	88000d1e 	bne	r17,zero,1010d3a0 <__muldf3+0x6e0>
1010d36c:	000b883a 	mov	r5,zero
1010d370:	1028d0fa 	srli	r20,r2,3
1010d374:	b02b883a 	mov	r21,r22
1010d378:	0005883a 	mov	r2,zero
1010d37c:	a468b03a 	or	r20,r20,r17
1010d380:	003eae06 	br	1010ce3c <__alt_data_end+0xfffece3c>
1010d384:	1007883a 	mov	r3,r2
1010d388:	0023883a 	mov	r17,zero
1010d38c:	880a927a 	slli	r5,r17,9
1010d390:	1805883a 	mov	r2,r3
1010d394:	8822977a 	slli	r17,r17,29
1010d398:	280ad33a 	srli	r5,r5,12
1010d39c:	003ff406 	br	1010d370 <__alt_data_end+0xfffed370>
1010d3a0:	10c003cc 	andi	r3,r2,15
1010d3a4:	01000104 	movi	r4,4
1010d3a8:	193ff626 	beq	r3,r4,1010d384 <__alt_data_end+0xfffed384>
1010d3ac:	0023883a 	mov	r17,zero
1010d3b0:	003fd506 	br	1010d308 <__alt_data_end+0xfffed308>
1010d3b4:	0005883a 	mov	r2,zero
1010d3b8:	003fe706 	br	1010d358 <__alt_data_end+0xfffed358>
1010d3bc:	00800434 	movhi	r2,16
1010d3c0:	89400234 	orhi	r5,r17,8
1010d3c4:	10bfffc4 	addi	r2,r2,-1
1010d3c8:	b02b883a 	mov	r21,r22
1010d3cc:	288a703a 	and	r5,r5,r2
1010d3d0:	4029883a 	mov	r20,r8
1010d3d4:	003eff06 	br	1010cfd4 <__alt_data_end+0xfffecfd4>

1010d3d8 <__subdf3>:
1010d3d8:	02000434 	movhi	r8,16
1010d3dc:	423fffc4 	addi	r8,r8,-1
1010d3e0:	defffb04 	addi	sp,sp,-20
1010d3e4:	2a14703a 	and	r10,r5,r8
1010d3e8:	3812d53a 	srli	r9,r7,20
1010d3ec:	3a10703a 	and	r8,r7,r8
1010d3f0:	2006d77a 	srli	r3,r4,29
1010d3f4:	3004d77a 	srli	r2,r6,29
1010d3f8:	dc000015 	stw	r16,0(sp)
1010d3fc:	501490fa 	slli	r10,r10,3
1010d400:	2820d53a 	srli	r16,r5,20
1010d404:	401090fa 	slli	r8,r8,3
1010d408:	dc800215 	stw	r18,8(sp)
1010d40c:	dc400115 	stw	r17,4(sp)
1010d410:	dfc00415 	stw	ra,16(sp)
1010d414:	202290fa 	slli	r17,r4,3
1010d418:	dcc00315 	stw	r19,12(sp)
1010d41c:	4a41ffcc 	andi	r9,r9,2047
1010d420:	0101ffc4 	movi	r4,2047
1010d424:	2824d7fa 	srli	r18,r5,31
1010d428:	8401ffcc 	andi	r16,r16,2047
1010d42c:	50c6b03a 	or	r3,r10,r3
1010d430:	380ed7fa 	srli	r7,r7,31
1010d434:	408ab03a 	or	r5,r8,r2
1010d438:	300c90fa 	slli	r6,r6,3
1010d43c:	49009626 	beq	r9,r4,1010d698 <__subdf3+0x2c0>
1010d440:	39c0005c 	xori	r7,r7,1
1010d444:	8245c83a 	sub	r2,r16,r9
1010d448:	3c807426 	beq	r7,r18,1010d61c <__subdf3+0x244>
1010d44c:	0080af0e 	bge	zero,r2,1010d70c <__subdf3+0x334>
1010d450:	48002a1e 	bne	r9,zero,1010d4fc <__subdf3+0x124>
1010d454:	2988b03a 	or	r4,r5,r6
1010d458:	20009a1e 	bne	r4,zero,1010d6c4 <__subdf3+0x2ec>
1010d45c:	888001cc 	andi	r2,r17,7
1010d460:	10000726 	beq	r2,zero,1010d480 <__subdf3+0xa8>
1010d464:	888003cc 	andi	r2,r17,15
1010d468:	01000104 	movi	r4,4
1010d46c:	11000426 	beq	r2,r4,1010d480 <__subdf3+0xa8>
1010d470:	890b883a 	add	r5,r17,r4
1010d474:	2c63803a 	cmpltu	r17,r5,r17
1010d478:	1c47883a 	add	r3,r3,r17
1010d47c:	2823883a 	mov	r17,r5
1010d480:	1880202c 	andhi	r2,r3,128
1010d484:	10005926 	beq	r2,zero,1010d5ec <__subdf3+0x214>
1010d488:	84000044 	addi	r16,r16,1
1010d48c:	0081ffc4 	movi	r2,2047
1010d490:	8080be26 	beq	r16,r2,1010d78c <__subdf3+0x3b4>
1010d494:	017fe034 	movhi	r5,65408
1010d498:	297fffc4 	addi	r5,r5,-1
1010d49c:	1946703a 	and	r3,r3,r5
1010d4a0:	1804977a 	slli	r2,r3,29
1010d4a4:	1806927a 	slli	r3,r3,9
1010d4a8:	8822d0fa 	srli	r17,r17,3
1010d4ac:	8401ffcc 	andi	r16,r16,2047
1010d4b0:	180ad33a 	srli	r5,r3,12
1010d4b4:	9100004c 	andi	r4,r18,1
1010d4b8:	1444b03a 	or	r2,r2,r17
1010d4bc:	80c1ffcc 	andi	r3,r16,2047
1010d4c0:	1820953a 	slli	r16,r3,20
1010d4c4:	20c03fcc 	andi	r3,r4,255
1010d4c8:	180897fa 	slli	r4,r3,31
1010d4cc:	00c00434 	movhi	r3,16
1010d4d0:	18ffffc4 	addi	r3,r3,-1
1010d4d4:	28c6703a 	and	r3,r5,r3
1010d4d8:	1c06b03a 	or	r3,r3,r16
1010d4dc:	1906b03a 	or	r3,r3,r4
1010d4e0:	dfc00417 	ldw	ra,16(sp)
1010d4e4:	dcc00317 	ldw	r19,12(sp)
1010d4e8:	dc800217 	ldw	r18,8(sp)
1010d4ec:	dc400117 	ldw	r17,4(sp)
1010d4f0:	dc000017 	ldw	r16,0(sp)
1010d4f4:	dec00504 	addi	sp,sp,20
1010d4f8:	f800283a 	ret
1010d4fc:	0101ffc4 	movi	r4,2047
1010d500:	813fd626 	beq	r16,r4,1010d45c <__alt_data_end+0xfffed45c>
1010d504:	29402034 	orhi	r5,r5,128
1010d508:	01000e04 	movi	r4,56
1010d50c:	2080a316 	blt	r4,r2,1010d79c <__subdf3+0x3c4>
1010d510:	010007c4 	movi	r4,31
1010d514:	2080c616 	blt	r4,r2,1010d830 <__subdf3+0x458>
1010d518:	01000804 	movi	r4,32
1010d51c:	2089c83a 	sub	r4,r4,r2
1010d520:	2910983a 	sll	r8,r5,r4
1010d524:	308ed83a 	srl	r7,r6,r2
1010d528:	3108983a 	sll	r4,r6,r4
1010d52c:	2884d83a 	srl	r2,r5,r2
1010d530:	41ccb03a 	or	r6,r8,r7
1010d534:	2008c03a 	cmpne	r4,r4,zero
1010d538:	310cb03a 	or	r6,r6,r4
1010d53c:	898dc83a 	sub	r6,r17,r6
1010d540:	89a3803a 	cmpltu	r17,r17,r6
1010d544:	1887c83a 	sub	r3,r3,r2
1010d548:	1c47c83a 	sub	r3,r3,r17
1010d54c:	3023883a 	mov	r17,r6
1010d550:	1880202c 	andhi	r2,r3,128
1010d554:	10002326 	beq	r2,zero,1010d5e4 <__subdf3+0x20c>
1010d558:	04c02034 	movhi	r19,128
1010d55c:	9cffffc4 	addi	r19,r19,-1
1010d560:	1ce6703a 	and	r19,r3,r19
1010d564:	98007a26 	beq	r19,zero,1010d750 <__subdf3+0x378>
1010d568:	9809883a 	mov	r4,r19
1010d56c:	010ded80 	call	1010ded8 <__clzsi2>
1010d570:	113ffe04 	addi	r4,r2,-8
1010d574:	00c007c4 	movi	r3,31
1010d578:	19007b16 	blt	r3,r4,1010d768 <__subdf3+0x390>
1010d57c:	00800804 	movi	r2,32
1010d580:	1105c83a 	sub	r2,r2,r4
1010d584:	8884d83a 	srl	r2,r17,r2
1010d588:	9906983a 	sll	r3,r19,r4
1010d58c:	8922983a 	sll	r17,r17,r4
1010d590:	10c4b03a 	or	r2,r2,r3
1010d594:	24007816 	blt	r4,r16,1010d778 <__subdf3+0x3a0>
1010d598:	2421c83a 	sub	r16,r4,r16
1010d59c:	80c00044 	addi	r3,r16,1
1010d5a0:	010007c4 	movi	r4,31
1010d5a4:	20c09516 	blt	r4,r3,1010d7fc <__subdf3+0x424>
1010d5a8:	01400804 	movi	r5,32
1010d5ac:	28cbc83a 	sub	r5,r5,r3
1010d5b0:	88c8d83a 	srl	r4,r17,r3
1010d5b4:	8962983a 	sll	r17,r17,r5
1010d5b8:	114a983a 	sll	r5,r2,r5
1010d5bc:	10c6d83a 	srl	r3,r2,r3
1010d5c0:	8804c03a 	cmpne	r2,r17,zero
1010d5c4:	290ab03a 	or	r5,r5,r4
1010d5c8:	28a2b03a 	or	r17,r5,r2
1010d5cc:	0021883a 	mov	r16,zero
1010d5d0:	003fa206 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d5d4:	2090b03a 	or	r8,r4,r2
1010d5d8:	40018e26 	beq	r8,zero,1010dc14 <__subdf3+0x83c>
1010d5dc:	1007883a 	mov	r3,r2
1010d5e0:	2023883a 	mov	r17,r4
1010d5e4:	888001cc 	andi	r2,r17,7
1010d5e8:	103f9e1e 	bne	r2,zero,1010d464 <__alt_data_end+0xfffed464>
1010d5ec:	1804977a 	slli	r2,r3,29
1010d5f0:	8822d0fa 	srli	r17,r17,3
1010d5f4:	1810d0fa 	srli	r8,r3,3
1010d5f8:	9100004c 	andi	r4,r18,1
1010d5fc:	1444b03a 	or	r2,r2,r17
1010d600:	00c1ffc4 	movi	r3,2047
1010d604:	80c02826 	beq	r16,r3,1010d6a8 <__subdf3+0x2d0>
1010d608:	01400434 	movhi	r5,16
1010d60c:	297fffc4 	addi	r5,r5,-1
1010d610:	80e0703a 	and	r16,r16,r3
1010d614:	414a703a 	and	r5,r8,r5
1010d618:	003fa806 	br	1010d4bc <__alt_data_end+0xfffed4bc>
1010d61c:	0080630e 	bge	zero,r2,1010d7ac <__subdf3+0x3d4>
1010d620:	48003026 	beq	r9,zero,1010d6e4 <__subdf3+0x30c>
1010d624:	0101ffc4 	movi	r4,2047
1010d628:	813f8c26 	beq	r16,r4,1010d45c <__alt_data_end+0xfffed45c>
1010d62c:	29402034 	orhi	r5,r5,128
1010d630:	01000e04 	movi	r4,56
1010d634:	2080a90e 	bge	r4,r2,1010d8dc <__subdf3+0x504>
1010d638:	298cb03a 	or	r6,r5,r6
1010d63c:	3012c03a 	cmpne	r9,r6,zero
1010d640:	0005883a 	mov	r2,zero
1010d644:	4c53883a 	add	r9,r9,r17
1010d648:	4c63803a 	cmpltu	r17,r9,r17
1010d64c:	10c7883a 	add	r3,r2,r3
1010d650:	88c7883a 	add	r3,r17,r3
1010d654:	4823883a 	mov	r17,r9
1010d658:	1880202c 	andhi	r2,r3,128
1010d65c:	1000d026 	beq	r2,zero,1010d9a0 <__subdf3+0x5c8>
1010d660:	84000044 	addi	r16,r16,1
1010d664:	0081ffc4 	movi	r2,2047
1010d668:	8080fe26 	beq	r16,r2,1010da64 <__subdf3+0x68c>
1010d66c:	00bfe034 	movhi	r2,65408
1010d670:	10bfffc4 	addi	r2,r2,-1
1010d674:	1886703a 	and	r3,r3,r2
1010d678:	880ad07a 	srli	r5,r17,1
1010d67c:	180497fa 	slli	r2,r3,31
1010d680:	8900004c 	andi	r4,r17,1
1010d684:	2922b03a 	or	r17,r5,r4
1010d688:	1806d07a 	srli	r3,r3,1
1010d68c:	1462b03a 	or	r17,r2,r17
1010d690:	3825883a 	mov	r18,r7
1010d694:	003f7106 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d698:	2984b03a 	or	r2,r5,r6
1010d69c:	103f6826 	beq	r2,zero,1010d440 <__alt_data_end+0xfffed440>
1010d6a0:	39c03fcc 	andi	r7,r7,255
1010d6a4:	003f6706 	br	1010d444 <__alt_data_end+0xfffed444>
1010d6a8:	4086b03a 	or	r3,r8,r2
1010d6ac:	18015226 	beq	r3,zero,1010dbf8 <__subdf3+0x820>
1010d6b0:	00c00434 	movhi	r3,16
1010d6b4:	41400234 	orhi	r5,r8,8
1010d6b8:	18ffffc4 	addi	r3,r3,-1
1010d6bc:	28ca703a 	and	r5,r5,r3
1010d6c0:	003f7e06 	br	1010d4bc <__alt_data_end+0xfffed4bc>
1010d6c4:	10bfffc4 	addi	r2,r2,-1
1010d6c8:	1000491e 	bne	r2,zero,1010d7f0 <__subdf3+0x418>
1010d6cc:	898fc83a 	sub	r7,r17,r6
1010d6d0:	89e3803a 	cmpltu	r17,r17,r7
1010d6d4:	1947c83a 	sub	r3,r3,r5
1010d6d8:	1c47c83a 	sub	r3,r3,r17
1010d6dc:	3823883a 	mov	r17,r7
1010d6e0:	003f9b06 	br	1010d550 <__alt_data_end+0xfffed550>
1010d6e4:	2988b03a 	or	r4,r5,r6
1010d6e8:	203f5c26 	beq	r4,zero,1010d45c <__alt_data_end+0xfffed45c>
1010d6ec:	10bfffc4 	addi	r2,r2,-1
1010d6f0:	1000931e 	bne	r2,zero,1010d940 <__subdf3+0x568>
1010d6f4:	898d883a 	add	r6,r17,r6
1010d6f8:	3463803a 	cmpltu	r17,r6,r17
1010d6fc:	1947883a 	add	r3,r3,r5
1010d700:	88c7883a 	add	r3,r17,r3
1010d704:	3023883a 	mov	r17,r6
1010d708:	003fd306 	br	1010d658 <__alt_data_end+0xfffed658>
1010d70c:	1000541e 	bne	r2,zero,1010d860 <__subdf3+0x488>
1010d710:	80800044 	addi	r2,r16,1
1010d714:	1081ffcc 	andi	r2,r2,2047
1010d718:	01000044 	movi	r4,1
1010d71c:	2080a20e 	bge	r4,r2,1010d9a8 <__subdf3+0x5d0>
1010d720:	8989c83a 	sub	r4,r17,r6
1010d724:	8905803a 	cmpltu	r2,r17,r4
1010d728:	1967c83a 	sub	r19,r3,r5
1010d72c:	98a7c83a 	sub	r19,r19,r2
1010d730:	9880202c 	andhi	r2,r19,128
1010d734:	10006326 	beq	r2,zero,1010d8c4 <__subdf3+0x4ec>
1010d738:	3463c83a 	sub	r17,r6,r17
1010d73c:	28c7c83a 	sub	r3,r5,r3
1010d740:	344d803a 	cmpltu	r6,r6,r17
1010d744:	19a7c83a 	sub	r19,r3,r6
1010d748:	3825883a 	mov	r18,r7
1010d74c:	983f861e 	bne	r19,zero,1010d568 <__alt_data_end+0xfffed568>
1010d750:	8809883a 	mov	r4,r17
1010d754:	010ded80 	call	1010ded8 <__clzsi2>
1010d758:	10800804 	addi	r2,r2,32
1010d75c:	113ffe04 	addi	r4,r2,-8
1010d760:	00c007c4 	movi	r3,31
1010d764:	193f850e 	bge	r3,r4,1010d57c <__alt_data_end+0xfffed57c>
1010d768:	10bff604 	addi	r2,r2,-40
1010d76c:	8884983a 	sll	r2,r17,r2
1010d770:	0023883a 	mov	r17,zero
1010d774:	243f880e 	bge	r4,r16,1010d598 <__alt_data_end+0xfffed598>
1010d778:	00ffe034 	movhi	r3,65408
1010d77c:	18ffffc4 	addi	r3,r3,-1
1010d780:	8121c83a 	sub	r16,r16,r4
1010d784:	10c6703a 	and	r3,r2,r3
1010d788:	003f3406 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d78c:	9100004c 	andi	r4,r18,1
1010d790:	000b883a 	mov	r5,zero
1010d794:	0005883a 	mov	r2,zero
1010d798:	003f4806 	br	1010d4bc <__alt_data_end+0xfffed4bc>
1010d79c:	298cb03a 	or	r6,r5,r6
1010d7a0:	300cc03a 	cmpne	r6,r6,zero
1010d7a4:	0005883a 	mov	r2,zero
1010d7a8:	003f6406 	br	1010d53c <__alt_data_end+0xfffed53c>
1010d7ac:	10009a1e 	bne	r2,zero,1010da18 <__subdf3+0x640>
1010d7b0:	82400044 	addi	r9,r16,1
1010d7b4:	4881ffcc 	andi	r2,r9,2047
1010d7b8:	02800044 	movi	r10,1
1010d7bc:	5080670e 	bge	r10,r2,1010d95c <__subdf3+0x584>
1010d7c0:	0081ffc4 	movi	r2,2047
1010d7c4:	4880af26 	beq	r9,r2,1010da84 <__subdf3+0x6ac>
1010d7c8:	898d883a 	add	r6,r17,r6
1010d7cc:	1945883a 	add	r2,r3,r5
1010d7d0:	3447803a 	cmpltu	r3,r6,r17
1010d7d4:	1887883a 	add	r3,r3,r2
1010d7d8:	182297fa 	slli	r17,r3,31
1010d7dc:	300cd07a 	srli	r6,r6,1
1010d7e0:	1806d07a 	srli	r3,r3,1
1010d7e4:	4821883a 	mov	r16,r9
1010d7e8:	89a2b03a 	or	r17,r17,r6
1010d7ec:	003f1b06 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d7f0:	0101ffc4 	movi	r4,2047
1010d7f4:	813f441e 	bne	r16,r4,1010d508 <__alt_data_end+0xfffed508>
1010d7f8:	003f1806 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d7fc:	843ff844 	addi	r16,r16,-31
1010d800:	01400804 	movi	r5,32
1010d804:	1408d83a 	srl	r4,r2,r16
1010d808:	19405026 	beq	r3,r5,1010d94c <__subdf3+0x574>
1010d80c:	01401004 	movi	r5,64
1010d810:	28c7c83a 	sub	r3,r5,r3
1010d814:	10c4983a 	sll	r2,r2,r3
1010d818:	88a2b03a 	or	r17,r17,r2
1010d81c:	8822c03a 	cmpne	r17,r17,zero
1010d820:	2462b03a 	or	r17,r4,r17
1010d824:	0007883a 	mov	r3,zero
1010d828:	0021883a 	mov	r16,zero
1010d82c:	003f6d06 	br	1010d5e4 <__alt_data_end+0xfffed5e4>
1010d830:	11fff804 	addi	r7,r2,-32
1010d834:	01000804 	movi	r4,32
1010d838:	29ced83a 	srl	r7,r5,r7
1010d83c:	11004526 	beq	r2,r4,1010d954 <__subdf3+0x57c>
1010d840:	01001004 	movi	r4,64
1010d844:	2089c83a 	sub	r4,r4,r2
1010d848:	2904983a 	sll	r2,r5,r4
1010d84c:	118cb03a 	or	r6,r2,r6
1010d850:	300cc03a 	cmpne	r6,r6,zero
1010d854:	398cb03a 	or	r6,r7,r6
1010d858:	0005883a 	mov	r2,zero
1010d85c:	003f3706 	br	1010d53c <__alt_data_end+0xfffed53c>
1010d860:	80002a26 	beq	r16,zero,1010d90c <__subdf3+0x534>
1010d864:	0101ffc4 	movi	r4,2047
1010d868:	49006626 	beq	r9,r4,1010da04 <__subdf3+0x62c>
1010d86c:	0085c83a 	sub	r2,zero,r2
1010d870:	18c02034 	orhi	r3,r3,128
1010d874:	01000e04 	movi	r4,56
1010d878:	20807e16 	blt	r4,r2,1010da74 <__subdf3+0x69c>
1010d87c:	010007c4 	movi	r4,31
1010d880:	2080e716 	blt	r4,r2,1010dc20 <__subdf3+0x848>
1010d884:	01000804 	movi	r4,32
1010d888:	2089c83a 	sub	r4,r4,r2
1010d88c:	1914983a 	sll	r10,r3,r4
1010d890:	8890d83a 	srl	r8,r17,r2
1010d894:	8908983a 	sll	r4,r17,r4
1010d898:	1884d83a 	srl	r2,r3,r2
1010d89c:	5222b03a 	or	r17,r10,r8
1010d8a0:	2006c03a 	cmpne	r3,r4,zero
1010d8a4:	88e2b03a 	or	r17,r17,r3
1010d8a8:	3463c83a 	sub	r17,r6,r17
1010d8ac:	2885c83a 	sub	r2,r5,r2
1010d8b0:	344d803a 	cmpltu	r6,r6,r17
1010d8b4:	1187c83a 	sub	r3,r2,r6
1010d8b8:	4821883a 	mov	r16,r9
1010d8bc:	3825883a 	mov	r18,r7
1010d8c0:	003f2306 	br	1010d550 <__alt_data_end+0xfffed550>
1010d8c4:	24d0b03a 	or	r8,r4,r19
1010d8c8:	40001b1e 	bne	r8,zero,1010d938 <__subdf3+0x560>
1010d8cc:	0005883a 	mov	r2,zero
1010d8d0:	0009883a 	mov	r4,zero
1010d8d4:	0021883a 	mov	r16,zero
1010d8d8:	003f4906 	br	1010d600 <__alt_data_end+0xfffed600>
1010d8dc:	010007c4 	movi	r4,31
1010d8e0:	20803a16 	blt	r4,r2,1010d9cc <__subdf3+0x5f4>
1010d8e4:	01000804 	movi	r4,32
1010d8e8:	2089c83a 	sub	r4,r4,r2
1010d8ec:	2912983a 	sll	r9,r5,r4
1010d8f0:	3090d83a 	srl	r8,r6,r2
1010d8f4:	3108983a 	sll	r4,r6,r4
1010d8f8:	2884d83a 	srl	r2,r5,r2
1010d8fc:	4a12b03a 	or	r9,r9,r8
1010d900:	2008c03a 	cmpne	r4,r4,zero
1010d904:	4912b03a 	or	r9,r9,r4
1010d908:	003f4e06 	br	1010d644 <__alt_data_end+0xfffed644>
1010d90c:	1c48b03a 	or	r4,r3,r17
1010d910:	20003c26 	beq	r4,zero,1010da04 <__subdf3+0x62c>
1010d914:	0084303a 	nor	r2,zero,r2
1010d918:	1000381e 	bne	r2,zero,1010d9fc <__subdf3+0x624>
1010d91c:	3463c83a 	sub	r17,r6,r17
1010d920:	28c5c83a 	sub	r2,r5,r3
1010d924:	344d803a 	cmpltu	r6,r6,r17
1010d928:	1187c83a 	sub	r3,r2,r6
1010d92c:	4821883a 	mov	r16,r9
1010d930:	3825883a 	mov	r18,r7
1010d934:	003f0606 	br	1010d550 <__alt_data_end+0xfffed550>
1010d938:	2023883a 	mov	r17,r4
1010d93c:	003f0906 	br	1010d564 <__alt_data_end+0xfffed564>
1010d940:	0101ffc4 	movi	r4,2047
1010d944:	813f3a1e 	bne	r16,r4,1010d630 <__alt_data_end+0xfffed630>
1010d948:	003ec406 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d94c:	0005883a 	mov	r2,zero
1010d950:	003fb106 	br	1010d818 <__alt_data_end+0xfffed818>
1010d954:	0005883a 	mov	r2,zero
1010d958:	003fbc06 	br	1010d84c <__alt_data_end+0xfffed84c>
1010d95c:	1c44b03a 	or	r2,r3,r17
1010d960:	80008e1e 	bne	r16,zero,1010db9c <__subdf3+0x7c4>
1010d964:	1000c826 	beq	r2,zero,1010dc88 <__subdf3+0x8b0>
1010d968:	2984b03a 	or	r2,r5,r6
1010d96c:	103ebb26 	beq	r2,zero,1010d45c <__alt_data_end+0xfffed45c>
1010d970:	8989883a 	add	r4,r17,r6
1010d974:	1945883a 	add	r2,r3,r5
1010d978:	2447803a 	cmpltu	r3,r4,r17
1010d97c:	1887883a 	add	r3,r3,r2
1010d980:	1880202c 	andhi	r2,r3,128
1010d984:	2023883a 	mov	r17,r4
1010d988:	103f1626 	beq	r2,zero,1010d5e4 <__alt_data_end+0xfffed5e4>
1010d98c:	00bfe034 	movhi	r2,65408
1010d990:	10bfffc4 	addi	r2,r2,-1
1010d994:	5021883a 	mov	r16,r10
1010d998:	1886703a 	and	r3,r3,r2
1010d99c:	003eaf06 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d9a0:	3825883a 	mov	r18,r7
1010d9a4:	003f0f06 	br	1010d5e4 <__alt_data_end+0xfffed5e4>
1010d9a8:	1c44b03a 	or	r2,r3,r17
1010d9ac:	8000251e 	bne	r16,zero,1010da44 <__subdf3+0x66c>
1010d9b0:	1000661e 	bne	r2,zero,1010db4c <__subdf3+0x774>
1010d9b4:	2990b03a 	or	r8,r5,r6
1010d9b8:	40009626 	beq	r8,zero,1010dc14 <__subdf3+0x83c>
1010d9bc:	2807883a 	mov	r3,r5
1010d9c0:	3023883a 	mov	r17,r6
1010d9c4:	3825883a 	mov	r18,r7
1010d9c8:	003ea406 	br	1010d45c <__alt_data_end+0xfffed45c>
1010d9cc:	127ff804 	addi	r9,r2,-32
1010d9d0:	01000804 	movi	r4,32
1010d9d4:	2a52d83a 	srl	r9,r5,r9
1010d9d8:	11008c26 	beq	r2,r4,1010dc0c <__subdf3+0x834>
1010d9dc:	01001004 	movi	r4,64
1010d9e0:	2085c83a 	sub	r2,r4,r2
1010d9e4:	2884983a 	sll	r2,r5,r2
1010d9e8:	118cb03a 	or	r6,r2,r6
1010d9ec:	300cc03a 	cmpne	r6,r6,zero
1010d9f0:	4992b03a 	or	r9,r9,r6
1010d9f4:	0005883a 	mov	r2,zero
1010d9f8:	003f1206 	br	1010d644 <__alt_data_end+0xfffed644>
1010d9fc:	0101ffc4 	movi	r4,2047
1010da00:	493f9c1e 	bne	r9,r4,1010d874 <__alt_data_end+0xfffed874>
1010da04:	2807883a 	mov	r3,r5
1010da08:	3023883a 	mov	r17,r6
1010da0c:	4821883a 	mov	r16,r9
1010da10:	3825883a 	mov	r18,r7
1010da14:	003e9106 	br	1010d45c <__alt_data_end+0xfffed45c>
1010da18:	80001f1e 	bne	r16,zero,1010da98 <__subdf3+0x6c0>
1010da1c:	1c48b03a 	or	r4,r3,r17
1010da20:	20005a26 	beq	r4,zero,1010db8c <__subdf3+0x7b4>
1010da24:	0084303a 	nor	r2,zero,r2
1010da28:	1000561e 	bne	r2,zero,1010db84 <__subdf3+0x7ac>
1010da2c:	89a3883a 	add	r17,r17,r6
1010da30:	1945883a 	add	r2,r3,r5
1010da34:	898d803a 	cmpltu	r6,r17,r6
1010da38:	3087883a 	add	r3,r6,r2
1010da3c:	4821883a 	mov	r16,r9
1010da40:	003f0506 	br	1010d658 <__alt_data_end+0xfffed658>
1010da44:	10002b1e 	bne	r2,zero,1010daf4 <__subdf3+0x71c>
1010da48:	2984b03a 	or	r2,r5,r6
1010da4c:	10008026 	beq	r2,zero,1010dc50 <__subdf3+0x878>
1010da50:	2807883a 	mov	r3,r5
1010da54:	3023883a 	mov	r17,r6
1010da58:	3825883a 	mov	r18,r7
1010da5c:	0401ffc4 	movi	r16,2047
1010da60:	003e7e06 	br	1010d45c <__alt_data_end+0xfffed45c>
1010da64:	3809883a 	mov	r4,r7
1010da68:	0011883a 	mov	r8,zero
1010da6c:	0005883a 	mov	r2,zero
1010da70:	003ee306 	br	1010d600 <__alt_data_end+0xfffed600>
1010da74:	1c62b03a 	or	r17,r3,r17
1010da78:	8822c03a 	cmpne	r17,r17,zero
1010da7c:	0005883a 	mov	r2,zero
1010da80:	003f8906 	br	1010d8a8 <__alt_data_end+0xfffed8a8>
1010da84:	3809883a 	mov	r4,r7
1010da88:	4821883a 	mov	r16,r9
1010da8c:	0011883a 	mov	r8,zero
1010da90:	0005883a 	mov	r2,zero
1010da94:	003eda06 	br	1010d600 <__alt_data_end+0xfffed600>
1010da98:	0101ffc4 	movi	r4,2047
1010da9c:	49003b26 	beq	r9,r4,1010db8c <__subdf3+0x7b4>
1010daa0:	0085c83a 	sub	r2,zero,r2
1010daa4:	18c02034 	orhi	r3,r3,128
1010daa8:	01000e04 	movi	r4,56
1010daac:	20806e16 	blt	r4,r2,1010dc68 <__subdf3+0x890>
1010dab0:	010007c4 	movi	r4,31
1010dab4:	20807716 	blt	r4,r2,1010dc94 <__subdf3+0x8bc>
1010dab8:	01000804 	movi	r4,32
1010dabc:	2089c83a 	sub	r4,r4,r2
1010dac0:	1914983a 	sll	r10,r3,r4
1010dac4:	8890d83a 	srl	r8,r17,r2
1010dac8:	8908983a 	sll	r4,r17,r4
1010dacc:	1884d83a 	srl	r2,r3,r2
1010dad0:	5222b03a 	or	r17,r10,r8
1010dad4:	2006c03a 	cmpne	r3,r4,zero
1010dad8:	88e2b03a 	or	r17,r17,r3
1010dadc:	89a3883a 	add	r17,r17,r6
1010dae0:	1145883a 	add	r2,r2,r5
1010dae4:	898d803a 	cmpltu	r6,r17,r6
1010dae8:	3087883a 	add	r3,r6,r2
1010daec:	4821883a 	mov	r16,r9
1010daf0:	003ed906 	br	1010d658 <__alt_data_end+0xfffed658>
1010daf4:	2984b03a 	or	r2,r5,r6
1010daf8:	10004226 	beq	r2,zero,1010dc04 <__subdf3+0x82c>
1010dafc:	1808d0fa 	srli	r4,r3,3
1010db00:	8822d0fa 	srli	r17,r17,3
1010db04:	1806977a 	slli	r3,r3,29
1010db08:	2080022c 	andhi	r2,r4,8
1010db0c:	1c62b03a 	or	r17,r3,r17
1010db10:	10000826 	beq	r2,zero,1010db34 <__subdf3+0x75c>
1010db14:	2812d0fa 	srli	r9,r5,3
1010db18:	4880022c 	andhi	r2,r9,8
1010db1c:	1000051e 	bne	r2,zero,1010db34 <__subdf3+0x75c>
1010db20:	300cd0fa 	srli	r6,r6,3
1010db24:	2804977a 	slli	r2,r5,29
1010db28:	4809883a 	mov	r4,r9
1010db2c:	3825883a 	mov	r18,r7
1010db30:	11a2b03a 	or	r17,r2,r6
1010db34:	8806d77a 	srli	r3,r17,29
1010db38:	200890fa 	slli	r4,r4,3
1010db3c:	882290fa 	slli	r17,r17,3
1010db40:	0401ffc4 	movi	r16,2047
1010db44:	1906b03a 	or	r3,r3,r4
1010db48:	003e4406 	br	1010d45c <__alt_data_end+0xfffed45c>
1010db4c:	2984b03a 	or	r2,r5,r6
1010db50:	103e4226 	beq	r2,zero,1010d45c <__alt_data_end+0xfffed45c>
1010db54:	8989c83a 	sub	r4,r17,r6
1010db58:	8911803a 	cmpltu	r8,r17,r4
1010db5c:	1945c83a 	sub	r2,r3,r5
1010db60:	1205c83a 	sub	r2,r2,r8
1010db64:	1200202c 	andhi	r8,r2,128
1010db68:	403e9a26 	beq	r8,zero,1010d5d4 <__alt_data_end+0xfffed5d4>
1010db6c:	3463c83a 	sub	r17,r6,r17
1010db70:	28c5c83a 	sub	r2,r5,r3
1010db74:	344d803a 	cmpltu	r6,r6,r17
1010db78:	1187c83a 	sub	r3,r2,r6
1010db7c:	3825883a 	mov	r18,r7
1010db80:	003e3606 	br	1010d45c <__alt_data_end+0xfffed45c>
1010db84:	0101ffc4 	movi	r4,2047
1010db88:	493fc71e 	bne	r9,r4,1010daa8 <__alt_data_end+0xfffedaa8>
1010db8c:	2807883a 	mov	r3,r5
1010db90:	3023883a 	mov	r17,r6
1010db94:	4821883a 	mov	r16,r9
1010db98:	003e3006 	br	1010d45c <__alt_data_end+0xfffed45c>
1010db9c:	10003626 	beq	r2,zero,1010dc78 <__subdf3+0x8a0>
1010dba0:	2984b03a 	or	r2,r5,r6
1010dba4:	10001726 	beq	r2,zero,1010dc04 <__subdf3+0x82c>
1010dba8:	1808d0fa 	srli	r4,r3,3
1010dbac:	8822d0fa 	srli	r17,r17,3
1010dbb0:	1806977a 	slli	r3,r3,29
1010dbb4:	2080022c 	andhi	r2,r4,8
1010dbb8:	1c62b03a 	or	r17,r3,r17
1010dbbc:	10000726 	beq	r2,zero,1010dbdc <__subdf3+0x804>
1010dbc0:	2812d0fa 	srli	r9,r5,3
1010dbc4:	4880022c 	andhi	r2,r9,8
1010dbc8:	1000041e 	bne	r2,zero,1010dbdc <__subdf3+0x804>
1010dbcc:	300cd0fa 	srli	r6,r6,3
1010dbd0:	2804977a 	slli	r2,r5,29
1010dbd4:	4809883a 	mov	r4,r9
1010dbd8:	11a2b03a 	or	r17,r2,r6
1010dbdc:	8806d77a 	srli	r3,r17,29
1010dbe0:	200890fa 	slli	r4,r4,3
1010dbe4:	882290fa 	slli	r17,r17,3
1010dbe8:	3825883a 	mov	r18,r7
1010dbec:	1906b03a 	or	r3,r3,r4
1010dbf0:	0401ffc4 	movi	r16,2047
1010dbf4:	003e1906 	br	1010d45c <__alt_data_end+0xfffed45c>
1010dbf8:	000b883a 	mov	r5,zero
1010dbfc:	0005883a 	mov	r2,zero
1010dc00:	003e2e06 	br	1010d4bc <__alt_data_end+0xfffed4bc>
1010dc04:	0401ffc4 	movi	r16,2047
1010dc08:	003e1406 	br	1010d45c <__alt_data_end+0xfffed45c>
1010dc0c:	0005883a 	mov	r2,zero
1010dc10:	003f7506 	br	1010d9e8 <__alt_data_end+0xfffed9e8>
1010dc14:	0005883a 	mov	r2,zero
1010dc18:	0009883a 	mov	r4,zero
1010dc1c:	003e7806 	br	1010d600 <__alt_data_end+0xfffed600>
1010dc20:	123ff804 	addi	r8,r2,-32
1010dc24:	01000804 	movi	r4,32
1010dc28:	1a10d83a 	srl	r8,r3,r8
1010dc2c:	11002526 	beq	r2,r4,1010dcc4 <__subdf3+0x8ec>
1010dc30:	01001004 	movi	r4,64
1010dc34:	2085c83a 	sub	r2,r4,r2
1010dc38:	1884983a 	sll	r2,r3,r2
1010dc3c:	1444b03a 	or	r2,r2,r17
1010dc40:	1004c03a 	cmpne	r2,r2,zero
1010dc44:	40a2b03a 	or	r17,r8,r2
1010dc48:	0005883a 	mov	r2,zero
1010dc4c:	003f1606 	br	1010d8a8 <__alt_data_end+0xfffed8a8>
1010dc50:	02000434 	movhi	r8,16
1010dc54:	0009883a 	mov	r4,zero
1010dc58:	423fffc4 	addi	r8,r8,-1
1010dc5c:	00bfffc4 	movi	r2,-1
1010dc60:	0401ffc4 	movi	r16,2047
1010dc64:	003e6606 	br	1010d600 <__alt_data_end+0xfffed600>
1010dc68:	1c62b03a 	or	r17,r3,r17
1010dc6c:	8822c03a 	cmpne	r17,r17,zero
1010dc70:	0005883a 	mov	r2,zero
1010dc74:	003f9906 	br	1010dadc <__alt_data_end+0xfffedadc>
1010dc78:	2807883a 	mov	r3,r5
1010dc7c:	3023883a 	mov	r17,r6
1010dc80:	0401ffc4 	movi	r16,2047
1010dc84:	003df506 	br	1010d45c <__alt_data_end+0xfffed45c>
1010dc88:	2807883a 	mov	r3,r5
1010dc8c:	3023883a 	mov	r17,r6
1010dc90:	003df206 	br	1010d45c <__alt_data_end+0xfffed45c>
1010dc94:	123ff804 	addi	r8,r2,-32
1010dc98:	01000804 	movi	r4,32
1010dc9c:	1a10d83a 	srl	r8,r3,r8
1010dca0:	11000a26 	beq	r2,r4,1010dccc <__subdf3+0x8f4>
1010dca4:	01001004 	movi	r4,64
1010dca8:	2085c83a 	sub	r2,r4,r2
1010dcac:	1884983a 	sll	r2,r3,r2
1010dcb0:	1444b03a 	or	r2,r2,r17
1010dcb4:	1004c03a 	cmpne	r2,r2,zero
1010dcb8:	40a2b03a 	or	r17,r8,r2
1010dcbc:	0005883a 	mov	r2,zero
1010dcc0:	003f8606 	br	1010dadc <__alt_data_end+0xfffedadc>
1010dcc4:	0005883a 	mov	r2,zero
1010dcc8:	003fdc06 	br	1010dc3c <__alt_data_end+0xfffedc3c>
1010dccc:	0005883a 	mov	r2,zero
1010dcd0:	003ff706 	br	1010dcb0 <__alt_data_end+0xfffedcb0>

1010dcd4 <__fixdfsi>:
1010dcd4:	280cd53a 	srli	r6,r5,20
1010dcd8:	00c00434 	movhi	r3,16
1010dcdc:	18ffffc4 	addi	r3,r3,-1
1010dce0:	3181ffcc 	andi	r6,r6,2047
1010dce4:	01c0ff84 	movi	r7,1022
1010dce8:	28c6703a 	and	r3,r5,r3
1010dcec:	280ad7fa 	srli	r5,r5,31
1010dcf0:	3980120e 	bge	r7,r6,1010dd3c <__fixdfsi+0x68>
1010dcf4:	00810744 	movi	r2,1053
1010dcf8:	11800c16 	blt	r2,r6,1010dd2c <__fixdfsi+0x58>
1010dcfc:	00810cc4 	movi	r2,1075
1010dd00:	1185c83a 	sub	r2,r2,r6
1010dd04:	01c007c4 	movi	r7,31
1010dd08:	18c00434 	orhi	r3,r3,16
1010dd0c:	38800d16 	blt	r7,r2,1010dd44 <__fixdfsi+0x70>
1010dd10:	31befb44 	addi	r6,r6,-1043
1010dd14:	2084d83a 	srl	r2,r4,r2
1010dd18:	1986983a 	sll	r3,r3,r6
1010dd1c:	1884b03a 	or	r2,r3,r2
1010dd20:	28000726 	beq	r5,zero,1010dd40 <__fixdfsi+0x6c>
1010dd24:	0085c83a 	sub	r2,zero,r2
1010dd28:	f800283a 	ret
1010dd2c:	00a00034 	movhi	r2,32768
1010dd30:	10bfffc4 	addi	r2,r2,-1
1010dd34:	2885883a 	add	r2,r5,r2
1010dd38:	f800283a 	ret
1010dd3c:	0005883a 	mov	r2,zero
1010dd40:	f800283a 	ret
1010dd44:	008104c4 	movi	r2,1043
1010dd48:	1185c83a 	sub	r2,r2,r6
1010dd4c:	1884d83a 	srl	r2,r3,r2
1010dd50:	003ff306 	br	1010dd20 <__alt_data_end+0xfffedd20>

1010dd54 <__floatsidf>:
1010dd54:	defffd04 	addi	sp,sp,-12
1010dd58:	dfc00215 	stw	ra,8(sp)
1010dd5c:	dc400115 	stw	r17,4(sp)
1010dd60:	dc000015 	stw	r16,0(sp)
1010dd64:	20002b26 	beq	r4,zero,1010de14 <__floatsidf+0xc0>
1010dd68:	2023883a 	mov	r17,r4
1010dd6c:	2020d7fa 	srli	r16,r4,31
1010dd70:	20002d16 	blt	r4,zero,1010de28 <__floatsidf+0xd4>
1010dd74:	8809883a 	mov	r4,r17
1010dd78:	010ded80 	call	1010ded8 <__clzsi2>
1010dd7c:	01410784 	movi	r5,1054
1010dd80:	288bc83a 	sub	r5,r5,r2
1010dd84:	01010cc4 	movi	r4,1075
1010dd88:	2149c83a 	sub	r4,r4,r5
1010dd8c:	00c007c4 	movi	r3,31
1010dd90:	1900160e 	bge	r3,r4,1010ddec <__floatsidf+0x98>
1010dd94:	00c104c4 	movi	r3,1043
1010dd98:	1947c83a 	sub	r3,r3,r5
1010dd9c:	88c6983a 	sll	r3,r17,r3
1010dda0:	00800434 	movhi	r2,16
1010dda4:	10bfffc4 	addi	r2,r2,-1
1010dda8:	1886703a 	and	r3,r3,r2
1010ddac:	2941ffcc 	andi	r5,r5,2047
1010ddb0:	800d883a 	mov	r6,r16
1010ddb4:	0005883a 	mov	r2,zero
1010ddb8:	280a953a 	slli	r5,r5,20
1010ddbc:	31803fcc 	andi	r6,r6,255
1010ddc0:	01000434 	movhi	r4,16
1010ddc4:	300c97fa 	slli	r6,r6,31
1010ddc8:	213fffc4 	addi	r4,r4,-1
1010ddcc:	1906703a 	and	r3,r3,r4
1010ddd0:	1946b03a 	or	r3,r3,r5
1010ddd4:	1986b03a 	or	r3,r3,r6
1010ddd8:	dfc00217 	ldw	ra,8(sp)
1010dddc:	dc400117 	ldw	r17,4(sp)
1010dde0:	dc000017 	ldw	r16,0(sp)
1010dde4:	dec00304 	addi	sp,sp,12
1010dde8:	f800283a 	ret
1010ddec:	00c002c4 	movi	r3,11
1010ddf0:	1887c83a 	sub	r3,r3,r2
1010ddf4:	88c6d83a 	srl	r3,r17,r3
1010ddf8:	8904983a 	sll	r2,r17,r4
1010ddfc:	01000434 	movhi	r4,16
1010de00:	213fffc4 	addi	r4,r4,-1
1010de04:	2941ffcc 	andi	r5,r5,2047
1010de08:	1906703a 	and	r3,r3,r4
1010de0c:	800d883a 	mov	r6,r16
1010de10:	003fe906 	br	1010ddb8 <__alt_data_end+0xfffeddb8>
1010de14:	000d883a 	mov	r6,zero
1010de18:	000b883a 	mov	r5,zero
1010de1c:	0007883a 	mov	r3,zero
1010de20:	0005883a 	mov	r2,zero
1010de24:	003fe406 	br	1010ddb8 <__alt_data_end+0xfffeddb8>
1010de28:	0123c83a 	sub	r17,zero,r4
1010de2c:	003fd106 	br	1010dd74 <__alt_data_end+0xfffedd74>

1010de30 <__floatunsidf>:
1010de30:	defffe04 	addi	sp,sp,-8
1010de34:	dc000015 	stw	r16,0(sp)
1010de38:	dfc00115 	stw	ra,4(sp)
1010de3c:	2021883a 	mov	r16,r4
1010de40:	20002226 	beq	r4,zero,1010decc <__floatunsidf+0x9c>
1010de44:	010ded80 	call	1010ded8 <__clzsi2>
1010de48:	01010784 	movi	r4,1054
1010de4c:	2089c83a 	sub	r4,r4,r2
1010de50:	01810cc4 	movi	r6,1075
1010de54:	310dc83a 	sub	r6,r6,r4
1010de58:	00c007c4 	movi	r3,31
1010de5c:	1980120e 	bge	r3,r6,1010dea8 <__floatunsidf+0x78>
1010de60:	00c104c4 	movi	r3,1043
1010de64:	1907c83a 	sub	r3,r3,r4
1010de68:	80ca983a 	sll	r5,r16,r3
1010de6c:	00800434 	movhi	r2,16
1010de70:	10bfffc4 	addi	r2,r2,-1
1010de74:	2101ffcc 	andi	r4,r4,2047
1010de78:	0021883a 	mov	r16,zero
1010de7c:	288a703a 	and	r5,r5,r2
1010de80:	2008953a 	slli	r4,r4,20
1010de84:	00c00434 	movhi	r3,16
1010de88:	18ffffc4 	addi	r3,r3,-1
1010de8c:	28c6703a 	and	r3,r5,r3
1010de90:	8005883a 	mov	r2,r16
1010de94:	1906b03a 	or	r3,r3,r4
1010de98:	dfc00117 	ldw	ra,4(sp)
1010de9c:	dc000017 	ldw	r16,0(sp)
1010dea0:	dec00204 	addi	sp,sp,8
1010dea4:	f800283a 	ret
1010dea8:	00c002c4 	movi	r3,11
1010deac:	188bc83a 	sub	r5,r3,r2
1010deb0:	814ad83a 	srl	r5,r16,r5
1010deb4:	00c00434 	movhi	r3,16
1010deb8:	18ffffc4 	addi	r3,r3,-1
1010debc:	81a0983a 	sll	r16,r16,r6
1010dec0:	2101ffcc 	andi	r4,r4,2047
1010dec4:	28ca703a 	and	r5,r5,r3
1010dec8:	003fed06 	br	1010de80 <__alt_data_end+0xfffede80>
1010decc:	0009883a 	mov	r4,zero
1010ded0:	000b883a 	mov	r5,zero
1010ded4:	003fea06 	br	1010de80 <__alt_data_end+0xfffede80>

1010ded8 <__clzsi2>:
1010ded8:	00bfffd4 	movui	r2,65535
1010dedc:	11000536 	bltu	r2,r4,1010def4 <__clzsi2+0x1c>
1010dee0:	00803fc4 	movi	r2,255
1010dee4:	11000f36 	bltu	r2,r4,1010df24 <__clzsi2+0x4c>
1010dee8:	00800804 	movi	r2,32
1010deec:	0007883a 	mov	r3,zero
1010def0:	00000506 	br	1010df08 <__clzsi2+0x30>
1010def4:	00804034 	movhi	r2,256
1010def8:	10bfffc4 	addi	r2,r2,-1
1010defc:	11000c2e 	bgeu	r2,r4,1010df30 <__clzsi2+0x58>
1010df00:	00800204 	movi	r2,8
1010df04:	00c00604 	movi	r3,24
1010df08:	20c8d83a 	srl	r4,r4,r3
1010df0c:	00c40474 	movhi	r3,4113
1010df10:	18c34904 	addi	r3,r3,3364
1010df14:	1909883a 	add	r4,r3,r4
1010df18:	20c00003 	ldbu	r3,0(r4)
1010df1c:	10c5c83a 	sub	r2,r2,r3
1010df20:	f800283a 	ret
1010df24:	00800604 	movi	r2,24
1010df28:	00c00204 	movi	r3,8
1010df2c:	003ff606 	br	1010df08 <__alt_data_end+0xfffedf08>
1010df30:	00800404 	movi	r2,16
1010df34:	1007883a 	mov	r3,r2
1010df38:	003ff306 	br	1010df08 <__alt_data_end+0xfffedf08>

1010df3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010df3c:	defffe04 	addi	sp,sp,-8
1010df40:	dfc00115 	stw	ra,4(sp)
1010df44:	df000015 	stw	fp,0(sp)
1010df48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010df4c:	d0a00b17 	ldw	r2,-32724(gp)
1010df50:	10000326 	beq	r2,zero,1010df60 <alt_get_errno+0x24>
1010df54:	d0a00b17 	ldw	r2,-32724(gp)
1010df58:	103ee83a 	callr	r2
1010df5c:	00000106 	br	1010df64 <alt_get_errno+0x28>
1010df60:	d0a6f904 	addi	r2,gp,-25628
}
1010df64:	e037883a 	mov	sp,fp
1010df68:	dfc00117 	ldw	ra,4(sp)
1010df6c:	df000017 	ldw	fp,0(sp)
1010df70:	dec00204 	addi	sp,sp,8
1010df74:	f800283a 	ret

1010df78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010df78:	defffb04 	addi	sp,sp,-20
1010df7c:	dfc00415 	stw	ra,16(sp)
1010df80:	df000315 	stw	fp,12(sp)
1010df84:	df000304 	addi	fp,sp,12
1010df88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010df8c:	e0bfff17 	ldw	r2,-4(fp)
1010df90:	10000616 	blt	r2,zero,1010dfac <close+0x34>
1010df94:	e0bfff17 	ldw	r2,-4(fp)
1010df98:	10c00324 	muli	r3,r2,12
1010df9c:	00840474 	movhi	r2,4113
1010dfa0:	1085cc04 	addi	r2,r2,5936
1010dfa4:	1885883a 	add	r2,r3,r2
1010dfa8:	00000106 	br	1010dfb0 <close+0x38>
1010dfac:	0005883a 	mov	r2,zero
1010dfb0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010dfb4:	e0bffd17 	ldw	r2,-12(fp)
1010dfb8:	10001926 	beq	r2,zero,1010e020 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010dfbc:	e0bffd17 	ldw	r2,-12(fp)
1010dfc0:	10800017 	ldw	r2,0(r2)
1010dfc4:	10800417 	ldw	r2,16(r2)
1010dfc8:	10000626 	beq	r2,zero,1010dfe4 <close+0x6c>
1010dfcc:	e0bffd17 	ldw	r2,-12(fp)
1010dfd0:	10800017 	ldw	r2,0(r2)
1010dfd4:	10800417 	ldw	r2,16(r2)
1010dfd8:	e13ffd17 	ldw	r4,-12(fp)
1010dfdc:	103ee83a 	callr	r2
1010dfe0:	00000106 	br	1010dfe8 <close+0x70>
1010dfe4:	0005883a 	mov	r2,zero
1010dfe8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010dfec:	e13fff17 	ldw	r4,-4(fp)
1010dff0:	010e88c0 	call	1010e88c <alt_release_fd>
    if (rval < 0)
1010dff4:	e0bffe17 	ldw	r2,-8(fp)
1010dff8:	1000070e 	bge	r2,zero,1010e018 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010dffc:	010df3c0 	call	1010df3c <alt_get_errno>
1010e000:	1007883a 	mov	r3,r2
1010e004:	e0bffe17 	ldw	r2,-8(fp)
1010e008:	0085c83a 	sub	r2,zero,r2
1010e00c:	18800015 	stw	r2,0(r3)
      return -1;
1010e010:	00bfffc4 	movi	r2,-1
1010e014:	00000706 	br	1010e034 <close+0xbc>
    }
    return 0;
1010e018:	0005883a 	mov	r2,zero
1010e01c:	00000506 	br	1010e034 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e020:	010df3c0 	call	1010df3c <alt_get_errno>
1010e024:	1007883a 	mov	r3,r2
1010e028:	00801444 	movi	r2,81
1010e02c:	18800015 	stw	r2,0(r3)
    return -1;
1010e030:	00bfffc4 	movi	r2,-1
  }
}
1010e034:	e037883a 	mov	sp,fp
1010e038:	dfc00117 	ldw	ra,4(sp)
1010e03c:	df000017 	ldw	fp,0(sp)
1010e040:	dec00204 	addi	sp,sp,8
1010e044:	f800283a 	ret

1010e048 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e048:	defffc04 	addi	sp,sp,-16
1010e04c:	df000315 	stw	fp,12(sp)
1010e050:	df000304 	addi	fp,sp,12
1010e054:	e13ffd15 	stw	r4,-12(fp)
1010e058:	e17ffe15 	stw	r5,-8(fp)
1010e05c:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e060:	e0bfff17 	ldw	r2,-4(fp)
}
1010e064:	e037883a 	mov	sp,fp
1010e068:	df000017 	ldw	fp,0(sp)
1010e06c:	dec00104 	addi	sp,sp,4
1010e070:	f800283a 	ret

1010e074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e074:	defffe04 	addi	sp,sp,-8
1010e078:	dfc00115 	stw	ra,4(sp)
1010e07c:	df000015 	stw	fp,0(sp)
1010e080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e084:	d0a00b17 	ldw	r2,-32724(gp)
1010e088:	10000326 	beq	r2,zero,1010e098 <alt_get_errno+0x24>
1010e08c:	d0a00b17 	ldw	r2,-32724(gp)
1010e090:	103ee83a 	callr	r2
1010e094:	00000106 	br	1010e09c <alt_get_errno+0x28>
1010e098:	d0a6f904 	addi	r2,gp,-25628
}
1010e09c:	e037883a 	mov	sp,fp
1010e0a0:	dfc00117 	ldw	ra,4(sp)
1010e0a4:	df000017 	ldw	fp,0(sp)
1010e0a8:	dec00204 	addi	sp,sp,8
1010e0ac:	f800283a 	ret

1010e0b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e0b0:	defffb04 	addi	sp,sp,-20
1010e0b4:	dfc00415 	stw	ra,16(sp)
1010e0b8:	df000315 	stw	fp,12(sp)
1010e0bc:	df000304 	addi	fp,sp,12
1010e0c0:	e13ffe15 	stw	r4,-8(fp)
1010e0c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e0c8:	e0bffe17 	ldw	r2,-8(fp)
1010e0cc:	10000616 	blt	r2,zero,1010e0e8 <fstat+0x38>
1010e0d0:	e0bffe17 	ldw	r2,-8(fp)
1010e0d4:	10c00324 	muli	r3,r2,12
1010e0d8:	00840474 	movhi	r2,4113
1010e0dc:	1085cc04 	addi	r2,r2,5936
1010e0e0:	1885883a 	add	r2,r3,r2
1010e0e4:	00000106 	br	1010e0ec <fstat+0x3c>
1010e0e8:	0005883a 	mov	r2,zero
1010e0ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e0f0:	e0bffd17 	ldw	r2,-12(fp)
1010e0f4:	10001026 	beq	r2,zero,1010e138 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e0f8:	e0bffd17 	ldw	r2,-12(fp)
1010e0fc:	10800017 	ldw	r2,0(r2)
1010e100:	10800817 	ldw	r2,32(r2)
1010e104:	10000726 	beq	r2,zero,1010e124 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e108:	e0bffd17 	ldw	r2,-12(fp)
1010e10c:	10800017 	ldw	r2,0(r2)
1010e110:	10800817 	ldw	r2,32(r2)
1010e114:	e17fff17 	ldw	r5,-4(fp)
1010e118:	e13ffd17 	ldw	r4,-12(fp)
1010e11c:	103ee83a 	callr	r2
1010e120:	00000a06 	br	1010e14c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e124:	e0bfff17 	ldw	r2,-4(fp)
1010e128:	00c80004 	movi	r3,8192
1010e12c:	10c00115 	stw	r3,4(r2)
      return 0;
1010e130:	0005883a 	mov	r2,zero
1010e134:	00000506 	br	1010e14c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e138:	010e0740 	call	1010e074 <alt_get_errno>
1010e13c:	1007883a 	mov	r3,r2
1010e140:	00801444 	movi	r2,81
1010e144:	18800015 	stw	r2,0(r3)
    return -1;
1010e148:	00bfffc4 	movi	r2,-1
  }
}
1010e14c:	e037883a 	mov	sp,fp
1010e150:	dfc00117 	ldw	ra,4(sp)
1010e154:	df000017 	ldw	fp,0(sp)
1010e158:	dec00204 	addi	sp,sp,8
1010e15c:	f800283a 	ret

1010e160 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e160:	defffe04 	addi	sp,sp,-8
1010e164:	dfc00115 	stw	ra,4(sp)
1010e168:	df000015 	stw	fp,0(sp)
1010e16c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e170:	d0a00b17 	ldw	r2,-32724(gp)
1010e174:	10000326 	beq	r2,zero,1010e184 <alt_get_errno+0x24>
1010e178:	d0a00b17 	ldw	r2,-32724(gp)
1010e17c:	103ee83a 	callr	r2
1010e180:	00000106 	br	1010e188 <alt_get_errno+0x28>
1010e184:	d0a6f904 	addi	r2,gp,-25628
}
1010e188:	e037883a 	mov	sp,fp
1010e18c:	dfc00117 	ldw	ra,4(sp)
1010e190:	df000017 	ldw	fp,0(sp)
1010e194:	dec00204 	addi	sp,sp,8
1010e198:	f800283a 	ret

1010e19c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010e19c:	deffed04 	addi	sp,sp,-76
1010e1a0:	dfc01215 	stw	ra,72(sp)
1010e1a4:	df001115 	stw	fp,68(sp)
1010e1a8:	df001104 	addi	fp,sp,68
1010e1ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e1b0:	e0bfff17 	ldw	r2,-4(fp)
1010e1b4:	10000616 	blt	r2,zero,1010e1d0 <isatty+0x34>
1010e1b8:	e0bfff17 	ldw	r2,-4(fp)
1010e1bc:	10c00324 	muli	r3,r2,12
1010e1c0:	00840474 	movhi	r2,4113
1010e1c4:	1085cc04 	addi	r2,r2,5936
1010e1c8:	1885883a 	add	r2,r3,r2
1010e1cc:	00000106 	br	1010e1d4 <isatty+0x38>
1010e1d0:	0005883a 	mov	r2,zero
1010e1d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010e1d8:	e0bfef17 	ldw	r2,-68(fp)
1010e1dc:	10000e26 	beq	r2,zero,1010e218 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010e1e0:	e0bfef17 	ldw	r2,-68(fp)
1010e1e4:	10800017 	ldw	r2,0(r2)
1010e1e8:	10800817 	ldw	r2,32(r2)
1010e1ec:	1000021e 	bne	r2,zero,1010e1f8 <isatty+0x5c>
    {
      return 1;
1010e1f0:	00800044 	movi	r2,1
1010e1f4:	00000d06 	br	1010e22c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010e1f8:	e0bff004 	addi	r2,fp,-64
1010e1fc:	100b883a 	mov	r5,r2
1010e200:	e13fff17 	ldw	r4,-4(fp)
1010e204:	010e0b00 	call	1010e0b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010e208:	e0bff117 	ldw	r2,-60(fp)
1010e20c:	10880020 	cmpeqi	r2,r2,8192
1010e210:	10803fcc 	andi	r2,r2,255
1010e214:	00000506 	br	1010e22c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e218:	010e1600 	call	1010e160 <alt_get_errno>
1010e21c:	1007883a 	mov	r3,r2
1010e220:	00801444 	movi	r2,81
1010e224:	18800015 	stw	r2,0(r3)
    return 0;
1010e228:	0005883a 	mov	r2,zero
  }
}
1010e22c:	e037883a 	mov	sp,fp
1010e230:	dfc00117 	ldw	ra,4(sp)
1010e234:	df000017 	ldw	fp,0(sp)
1010e238:	dec00204 	addi	sp,sp,8
1010e23c:	f800283a 	ret

1010e240 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010e240:	defffc04 	addi	sp,sp,-16
1010e244:	df000315 	stw	fp,12(sp)
1010e248:	df000304 	addi	fp,sp,12
1010e24c:	e13ffd15 	stw	r4,-12(fp)
1010e250:	e17ffe15 	stw	r5,-8(fp)
1010e254:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010e258:	e0fffe17 	ldw	r3,-8(fp)
1010e25c:	e0bffd17 	ldw	r2,-12(fp)
1010e260:	18800c26 	beq	r3,r2,1010e294 <alt_load_section+0x54>
  {
    while( to != end )
1010e264:	00000806 	br	1010e288 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010e268:	e0bffe17 	ldw	r2,-8(fp)
1010e26c:	10c00104 	addi	r3,r2,4
1010e270:	e0fffe15 	stw	r3,-8(fp)
1010e274:	e0fffd17 	ldw	r3,-12(fp)
1010e278:	19000104 	addi	r4,r3,4
1010e27c:	e13ffd15 	stw	r4,-12(fp)
1010e280:	18c00017 	ldw	r3,0(r3)
1010e284:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010e288:	e0fffe17 	ldw	r3,-8(fp)
1010e28c:	e0bfff17 	ldw	r2,-4(fp)
1010e290:	18bff51e 	bne	r3,r2,1010e268 <__alt_data_end+0xfffee268>
    {
      *to++ = *from++;
    }
  }
}
1010e294:	0001883a 	nop
1010e298:	e037883a 	mov	sp,fp
1010e29c:	df000017 	ldw	fp,0(sp)
1010e2a0:	dec00104 	addi	sp,sp,4
1010e2a4:	f800283a 	ret

1010e2a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010e2a8:	defffe04 	addi	sp,sp,-8
1010e2ac:	dfc00115 	stw	ra,4(sp)
1010e2b0:	df000015 	stw	fp,0(sp)
1010e2b4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010e2b8:	01840474 	movhi	r6,4113
1010e2bc:	318a7004 	addi	r6,r6,10688
1010e2c0:	01440474 	movhi	r5,4113
1010e2c4:	29439904 	addi	r5,r5,3684
1010e2c8:	01040474 	movhi	r4,4113
1010e2cc:	210a7004 	addi	r4,r4,10688
1010e2d0:	010e2400 	call	1010e240 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010e2d4:	01840434 	movhi	r6,4112
1010e2d8:	31809104 	addi	r6,r6,580
1010e2dc:	01440434 	movhi	r5,4112
1010e2e0:	29400804 	addi	r5,r5,32
1010e2e4:	01040434 	movhi	r4,4112
1010e2e8:	21000804 	addi	r4,r4,32
1010e2ec:	010e2400 	call	1010e240 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010e2f0:	01840474 	movhi	r6,4113
1010e2f4:	31839904 	addi	r6,r6,3684
1010e2f8:	01440474 	movhi	r5,4113
1010e2fc:	2942bb04 	addi	r5,r5,2796
1010e300:	01040474 	movhi	r4,4113
1010e304:	2102bb04 	addi	r4,r4,2796
1010e308:	010e2400 	call	1010e240 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010e30c:	010fbac0 	call	1010fbac <alt_dcache_flush_all>
  alt_icache_flush_all();
1010e310:	01100500 	call	10110050 <alt_icache_flush_all>
}
1010e314:	0001883a 	nop
1010e318:	e037883a 	mov	sp,fp
1010e31c:	dfc00117 	ldw	ra,4(sp)
1010e320:	df000017 	ldw	fp,0(sp)
1010e324:	dec00204 	addi	sp,sp,8
1010e328:	f800283a 	ret

1010e32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e32c:	defffe04 	addi	sp,sp,-8
1010e330:	dfc00115 	stw	ra,4(sp)
1010e334:	df000015 	stw	fp,0(sp)
1010e338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e33c:	d0a00b17 	ldw	r2,-32724(gp)
1010e340:	10000326 	beq	r2,zero,1010e350 <alt_get_errno+0x24>
1010e344:	d0a00b17 	ldw	r2,-32724(gp)
1010e348:	103ee83a 	callr	r2
1010e34c:	00000106 	br	1010e354 <alt_get_errno+0x28>
1010e350:	d0a6f904 	addi	r2,gp,-25628
}
1010e354:	e037883a 	mov	sp,fp
1010e358:	dfc00117 	ldw	ra,4(sp)
1010e35c:	df000017 	ldw	fp,0(sp)
1010e360:	dec00204 	addi	sp,sp,8
1010e364:	f800283a 	ret

1010e368 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010e368:	defff904 	addi	sp,sp,-28
1010e36c:	dfc00615 	stw	ra,24(sp)
1010e370:	df000515 	stw	fp,20(sp)
1010e374:	df000504 	addi	fp,sp,20
1010e378:	e13ffd15 	stw	r4,-12(fp)
1010e37c:	e17ffe15 	stw	r5,-8(fp)
1010e380:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010e384:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e388:	e0bffd17 	ldw	r2,-12(fp)
1010e38c:	10000616 	blt	r2,zero,1010e3a8 <lseek+0x40>
1010e390:	e0bffd17 	ldw	r2,-12(fp)
1010e394:	10c00324 	muli	r3,r2,12
1010e398:	00840474 	movhi	r2,4113
1010e39c:	1085cc04 	addi	r2,r2,5936
1010e3a0:	1885883a 	add	r2,r3,r2
1010e3a4:	00000106 	br	1010e3ac <lseek+0x44>
1010e3a8:	0005883a 	mov	r2,zero
1010e3ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010e3b0:	e0bffc17 	ldw	r2,-16(fp)
1010e3b4:	10001026 	beq	r2,zero,1010e3f8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010e3b8:	e0bffc17 	ldw	r2,-16(fp)
1010e3bc:	10800017 	ldw	r2,0(r2)
1010e3c0:	10800717 	ldw	r2,28(r2)
1010e3c4:	10000926 	beq	r2,zero,1010e3ec <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010e3c8:	e0bffc17 	ldw	r2,-16(fp)
1010e3cc:	10800017 	ldw	r2,0(r2)
1010e3d0:	10800717 	ldw	r2,28(r2)
1010e3d4:	e1bfff17 	ldw	r6,-4(fp)
1010e3d8:	e17ffe17 	ldw	r5,-8(fp)
1010e3dc:	e13ffc17 	ldw	r4,-16(fp)
1010e3e0:	103ee83a 	callr	r2
1010e3e4:	e0bffb15 	stw	r2,-20(fp)
1010e3e8:	00000506 	br	1010e400 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010e3ec:	00bfde84 	movi	r2,-134
1010e3f0:	e0bffb15 	stw	r2,-20(fp)
1010e3f4:	00000206 	br	1010e400 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010e3f8:	00bfebc4 	movi	r2,-81
1010e3fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010e400:	e0bffb17 	ldw	r2,-20(fp)
1010e404:	1000070e 	bge	r2,zero,1010e424 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010e408:	010e32c0 	call	1010e32c <alt_get_errno>
1010e40c:	1007883a 	mov	r3,r2
1010e410:	e0bffb17 	ldw	r2,-20(fp)
1010e414:	0085c83a 	sub	r2,zero,r2
1010e418:	18800015 	stw	r2,0(r3)
    rc = -1;
1010e41c:	00bfffc4 	movi	r2,-1
1010e420:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010e424:	e0bffb17 	ldw	r2,-20(fp)
}
1010e428:	e037883a 	mov	sp,fp
1010e42c:	dfc00117 	ldw	ra,4(sp)
1010e430:	df000017 	ldw	fp,0(sp)
1010e434:	dec00204 	addi	sp,sp,8
1010e438:	f800283a 	ret

1010e43c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010e43c:	defffd04 	addi	sp,sp,-12
1010e440:	dfc00215 	stw	ra,8(sp)
1010e444:	df000115 	stw	fp,4(sp)
1010e448:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010e44c:	0009883a 	mov	r4,zero
1010e450:	010eb080 	call	1010eb08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010e454:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010e458:	010eb400 	call	1010eb40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010e45c:	01840474 	movhi	r6,4113
1010e460:	31838c04 	addi	r6,r6,3632
1010e464:	01440474 	movhi	r5,4113
1010e468:	29438c04 	addi	r5,r5,3632
1010e46c:	01040474 	movhi	r4,4113
1010e470:	21038c04 	addi	r4,r4,3632
1010e474:	01103e80 	call	101103e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010e478:	010fcd40 	call	1010fcd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010e47c:	01040474 	movhi	r4,4113
1010e480:	213f4d04 	addi	r4,r4,-716
1010e484:	01107580 	call	10110758 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010e488:	d0a70017 	ldw	r2,-25600(gp)
1010e48c:	d0e70117 	ldw	r3,-25596(gp)
1010e490:	d1270217 	ldw	r4,-25592(gp)
1010e494:	200d883a 	mov	r6,r4
1010e498:	180b883a 	mov	r5,r3
1010e49c:	1009883a 	mov	r4,r2
1010e4a0:	0100bc80 	call	10100bc8 <main>
1010e4a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010e4a8:	01000044 	movi	r4,1
1010e4ac:	010df780 	call	1010df78 <close>
  exit (result);
1010e4b0:	e13fff17 	ldw	r4,-4(fp)
1010e4b4:	011076c0 	call	1011076c <exit>

1010e4b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010e4b8:	defffe04 	addi	sp,sp,-8
1010e4bc:	df000115 	stw	fp,4(sp)
1010e4c0:	df000104 	addi	fp,sp,4
1010e4c4:	e13fff15 	stw	r4,-4(fp)
}
1010e4c8:	0001883a 	nop
1010e4cc:	e037883a 	mov	sp,fp
1010e4d0:	df000017 	ldw	fp,0(sp)
1010e4d4:	dec00104 	addi	sp,sp,4
1010e4d8:	f800283a 	ret

1010e4dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010e4dc:	defffe04 	addi	sp,sp,-8
1010e4e0:	df000115 	stw	fp,4(sp)
1010e4e4:	df000104 	addi	fp,sp,4
1010e4e8:	e13fff15 	stw	r4,-4(fp)
}
1010e4ec:	0001883a 	nop
1010e4f0:	e037883a 	mov	sp,fp
1010e4f4:	df000017 	ldw	fp,0(sp)
1010e4f8:	dec00104 	addi	sp,sp,4
1010e4fc:	f800283a 	ret

1010e500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e500:	defffe04 	addi	sp,sp,-8
1010e504:	dfc00115 	stw	ra,4(sp)
1010e508:	df000015 	stw	fp,0(sp)
1010e50c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e510:	d0a00b17 	ldw	r2,-32724(gp)
1010e514:	10000326 	beq	r2,zero,1010e524 <alt_get_errno+0x24>
1010e518:	d0a00b17 	ldw	r2,-32724(gp)
1010e51c:	103ee83a 	callr	r2
1010e520:	00000106 	br	1010e528 <alt_get_errno+0x28>
1010e524:	d0a6f904 	addi	r2,gp,-25628
}
1010e528:	e037883a 	mov	sp,fp
1010e52c:	dfc00117 	ldw	ra,4(sp)
1010e530:	df000017 	ldw	fp,0(sp)
1010e534:	dec00204 	addi	sp,sp,8
1010e538:	f800283a 	ret

1010e53c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010e53c:	defffd04 	addi	sp,sp,-12
1010e540:	df000215 	stw	fp,8(sp)
1010e544:	df000204 	addi	fp,sp,8
1010e548:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010e54c:	e0bfff17 	ldw	r2,-4(fp)
1010e550:	10800217 	ldw	r2,8(r2)
1010e554:	10d00034 	orhi	r3,r2,16384
1010e558:	e0bfff17 	ldw	r2,-4(fp)
1010e55c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010e560:	e03ffe15 	stw	zero,-8(fp)
1010e564:	00001d06 	br	1010e5dc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010e568:	00840474 	movhi	r2,4113
1010e56c:	1085cc04 	addi	r2,r2,5936
1010e570:	e0fffe17 	ldw	r3,-8(fp)
1010e574:	18c00324 	muli	r3,r3,12
1010e578:	10c5883a 	add	r2,r2,r3
1010e57c:	10c00017 	ldw	r3,0(r2)
1010e580:	e0bfff17 	ldw	r2,-4(fp)
1010e584:	10800017 	ldw	r2,0(r2)
1010e588:	1880111e 	bne	r3,r2,1010e5d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010e58c:	00840474 	movhi	r2,4113
1010e590:	1085cc04 	addi	r2,r2,5936
1010e594:	e0fffe17 	ldw	r3,-8(fp)
1010e598:	18c00324 	muli	r3,r3,12
1010e59c:	10c5883a 	add	r2,r2,r3
1010e5a0:	10800204 	addi	r2,r2,8
1010e5a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010e5a8:	1000090e 	bge	r2,zero,1010e5d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010e5ac:	e0bffe17 	ldw	r2,-8(fp)
1010e5b0:	10c00324 	muli	r3,r2,12
1010e5b4:	00840474 	movhi	r2,4113
1010e5b8:	1085cc04 	addi	r2,r2,5936
1010e5bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010e5c0:	e0bfff17 	ldw	r2,-4(fp)
1010e5c4:	18800226 	beq	r3,r2,1010e5d0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010e5c8:	00bffcc4 	movi	r2,-13
1010e5cc:	00000806 	br	1010e5f0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010e5d0:	e0bffe17 	ldw	r2,-8(fp)
1010e5d4:	10800044 	addi	r2,r2,1
1010e5d8:	e0bffe15 	stw	r2,-8(fp)
1010e5dc:	d0a00a17 	ldw	r2,-32728(gp)
1010e5e0:	1007883a 	mov	r3,r2
1010e5e4:	e0bffe17 	ldw	r2,-8(fp)
1010e5e8:	18bfdf2e 	bgeu	r3,r2,1010e568 <__alt_data_end+0xfffee568>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010e5ec:	0005883a 	mov	r2,zero
}
1010e5f0:	e037883a 	mov	sp,fp
1010e5f4:	df000017 	ldw	fp,0(sp)
1010e5f8:	dec00104 	addi	sp,sp,4
1010e5fc:	f800283a 	ret

1010e600 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010e600:	defff604 	addi	sp,sp,-40
1010e604:	dfc00915 	stw	ra,36(sp)
1010e608:	df000815 	stw	fp,32(sp)
1010e60c:	df000804 	addi	fp,sp,32
1010e610:	e13ffd15 	stw	r4,-12(fp)
1010e614:	e17ffe15 	stw	r5,-8(fp)
1010e618:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010e61c:	00bfffc4 	movi	r2,-1
1010e620:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010e624:	00bffb44 	movi	r2,-19
1010e628:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010e62c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010e630:	d1600804 	addi	r5,gp,-32736
1010e634:	e13ffd17 	ldw	r4,-12(fp)
1010e638:	010fd940 	call	1010fd94 <alt_find_dev>
1010e63c:	e0bff815 	stw	r2,-32(fp)
1010e640:	e0bff817 	ldw	r2,-32(fp)
1010e644:	1000051e 	bne	r2,zero,1010e65c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010e648:	e13ffd17 	ldw	r4,-12(fp)
1010e64c:	010fe240 	call	1010fe24 <alt_find_file>
1010e650:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010e654:	00800044 	movi	r2,1
1010e658:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010e65c:	e0bff817 	ldw	r2,-32(fp)
1010e660:	10002926 	beq	r2,zero,1010e708 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010e664:	e13ff817 	ldw	r4,-32(fp)
1010e668:	010ffac0 	call	1010ffac <alt_get_fd>
1010e66c:	e0bff915 	stw	r2,-28(fp)
1010e670:	e0bff917 	ldw	r2,-28(fp)
1010e674:	1000030e 	bge	r2,zero,1010e684 <open+0x84>
    {
      status = index;
1010e678:	e0bff917 	ldw	r2,-28(fp)
1010e67c:	e0bffa15 	stw	r2,-24(fp)
1010e680:	00002306 	br	1010e710 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1010e684:	e0bff917 	ldw	r2,-28(fp)
1010e688:	10c00324 	muli	r3,r2,12
1010e68c:	00840474 	movhi	r2,4113
1010e690:	1085cc04 	addi	r2,r2,5936
1010e694:	1885883a 	add	r2,r3,r2
1010e698:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010e69c:	e0fffe17 	ldw	r3,-8(fp)
1010e6a0:	00900034 	movhi	r2,16384
1010e6a4:	10bfffc4 	addi	r2,r2,-1
1010e6a8:	1886703a 	and	r3,r3,r2
1010e6ac:	e0bffc17 	ldw	r2,-16(fp)
1010e6b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010e6b4:	e0bffb17 	ldw	r2,-20(fp)
1010e6b8:	1000051e 	bne	r2,zero,1010e6d0 <open+0xd0>
1010e6bc:	e13ffc17 	ldw	r4,-16(fp)
1010e6c0:	010e53c0 	call	1010e53c <alt_file_locked>
1010e6c4:	e0bffa15 	stw	r2,-24(fp)
1010e6c8:	e0bffa17 	ldw	r2,-24(fp)
1010e6cc:	10001016 	blt	r2,zero,1010e710 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010e6d0:	e0bff817 	ldw	r2,-32(fp)
1010e6d4:	10800317 	ldw	r2,12(r2)
1010e6d8:	10000826 	beq	r2,zero,1010e6fc <open+0xfc>
1010e6dc:	e0bff817 	ldw	r2,-32(fp)
1010e6e0:	10800317 	ldw	r2,12(r2)
1010e6e4:	e1ffff17 	ldw	r7,-4(fp)
1010e6e8:	e1bffe17 	ldw	r6,-8(fp)
1010e6ec:	e17ffd17 	ldw	r5,-12(fp)
1010e6f0:	e13ffc17 	ldw	r4,-16(fp)
1010e6f4:	103ee83a 	callr	r2
1010e6f8:	00000106 	br	1010e700 <open+0x100>
1010e6fc:	0005883a 	mov	r2,zero
1010e700:	e0bffa15 	stw	r2,-24(fp)
1010e704:	00000206 	br	1010e710 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010e708:	00bffb44 	movi	r2,-19
1010e70c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010e710:	e0bffa17 	ldw	r2,-24(fp)
1010e714:	1000090e 	bge	r2,zero,1010e73c <open+0x13c>
  {
    alt_release_fd (index);  
1010e718:	e13ff917 	ldw	r4,-28(fp)
1010e71c:	010e88c0 	call	1010e88c <alt_release_fd>
    ALT_ERRNO = -status;
1010e720:	010e5000 	call	1010e500 <alt_get_errno>
1010e724:	1007883a 	mov	r3,r2
1010e728:	e0bffa17 	ldw	r2,-24(fp)
1010e72c:	0085c83a 	sub	r2,zero,r2
1010e730:	18800015 	stw	r2,0(r3)
    return -1;
1010e734:	00bfffc4 	movi	r2,-1
1010e738:	00000106 	br	1010e740 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010e73c:	e0bff917 	ldw	r2,-28(fp)
}
1010e740:	e037883a 	mov	sp,fp
1010e744:	dfc00117 	ldw	ra,4(sp)
1010e748:	df000017 	ldw	fp,0(sp)
1010e74c:	dec00204 	addi	sp,sp,8
1010e750:	f800283a 	ret

1010e754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e754:	defffe04 	addi	sp,sp,-8
1010e758:	dfc00115 	stw	ra,4(sp)
1010e75c:	df000015 	stw	fp,0(sp)
1010e760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e764:	d0a00b17 	ldw	r2,-32724(gp)
1010e768:	10000326 	beq	r2,zero,1010e778 <alt_get_errno+0x24>
1010e76c:	d0a00b17 	ldw	r2,-32724(gp)
1010e770:	103ee83a 	callr	r2
1010e774:	00000106 	br	1010e77c <alt_get_errno+0x28>
1010e778:	d0a6f904 	addi	r2,gp,-25628
}
1010e77c:	e037883a 	mov	sp,fp
1010e780:	dfc00117 	ldw	ra,4(sp)
1010e784:	df000017 	ldw	fp,0(sp)
1010e788:	dec00204 	addi	sp,sp,8
1010e78c:	f800283a 	ret

1010e790 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010e790:	defff904 	addi	sp,sp,-28
1010e794:	dfc00615 	stw	ra,24(sp)
1010e798:	df000515 	stw	fp,20(sp)
1010e79c:	df000504 	addi	fp,sp,20
1010e7a0:	e13ffd15 	stw	r4,-12(fp)
1010e7a4:	e17ffe15 	stw	r5,-8(fp)
1010e7a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e7ac:	e0bffd17 	ldw	r2,-12(fp)
1010e7b0:	10000616 	blt	r2,zero,1010e7cc <read+0x3c>
1010e7b4:	e0bffd17 	ldw	r2,-12(fp)
1010e7b8:	10c00324 	muli	r3,r2,12
1010e7bc:	00840474 	movhi	r2,4113
1010e7c0:	1085cc04 	addi	r2,r2,5936
1010e7c4:	1885883a 	add	r2,r3,r2
1010e7c8:	00000106 	br	1010e7d0 <read+0x40>
1010e7cc:	0005883a 	mov	r2,zero
1010e7d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010e7d4:	e0bffb17 	ldw	r2,-20(fp)
1010e7d8:	10002226 	beq	r2,zero,1010e864 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010e7dc:	e0bffb17 	ldw	r2,-20(fp)
1010e7e0:	10800217 	ldw	r2,8(r2)
1010e7e4:	108000cc 	andi	r2,r2,3
1010e7e8:	10800060 	cmpeqi	r2,r2,1
1010e7ec:	1000181e 	bne	r2,zero,1010e850 <read+0xc0>
        (fd->dev->read))
1010e7f0:	e0bffb17 	ldw	r2,-20(fp)
1010e7f4:	10800017 	ldw	r2,0(r2)
1010e7f8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010e7fc:	10001426 	beq	r2,zero,1010e850 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010e800:	e0bffb17 	ldw	r2,-20(fp)
1010e804:	10800017 	ldw	r2,0(r2)
1010e808:	10800517 	ldw	r2,20(r2)
1010e80c:	e0ffff17 	ldw	r3,-4(fp)
1010e810:	180d883a 	mov	r6,r3
1010e814:	e17ffe17 	ldw	r5,-8(fp)
1010e818:	e13ffb17 	ldw	r4,-20(fp)
1010e81c:	103ee83a 	callr	r2
1010e820:	e0bffc15 	stw	r2,-16(fp)
1010e824:	e0bffc17 	ldw	r2,-16(fp)
1010e828:	1000070e 	bge	r2,zero,1010e848 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010e82c:	010e7540 	call	1010e754 <alt_get_errno>
1010e830:	1007883a 	mov	r3,r2
1010e834:	e0bffc17 	ldw	r2,-16(fp)
1010e838:	0085c83a 	sub	r2,zero,r2
1010e83c:	18800015 	stw	r2,0(r3)
          return -1;
1010e840:	00bfffc4 	movi	r2,-1
1010e844:	00000c06 	br	1010e878 <read+0xe8>
        }
        return rval;
1010e848:	e0bffc17 	ldw	r2,-16(fp)
1010e84c:	00000a06 	br	1010e878 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010e850:	010e7540 	call	1010e754 <alt_get_errno>
1010e854:	1007883a 	mov	r3,r2
1010e858:	00800344 	movi	r2,13
1010e85c:	18800015 	stw	r2,0(r3)
1010e860:	00000406 	br	1010e874 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010e864:	010e7540 	call	1010e754 <alt_get_errno>
1010e868:	1007883a 	mov	r3,r2
1010e86c:	00801444 	movi	r2,81
1010e870:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010e874:	00bfffc4 	movi	r2,-1
}
1010e878:	e037883a 	mov	sp,fp
1010e87c:	dfc00117 	ldw	ra,4(sp)
1010e880:	df000017 	ldw	fp,0(sp)
1010e884:	dec00204 	addi	sp,sp,8
1010e888:	f800283a 	ret

1010e88c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010e88c:	defffe04 	addi	sp,sp,-8
1010e890:	df000115 	stw	fp,4(sp)
1010e894:	df000104 	addi	fp,sp,4
1010e898:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010e89c:	e0bfff17 	ldw	r2,-4(fp)
1010e8a0:	108000d0 	cmplti	r2,r2,3
1010e8a4:	10000d1e 	bne	r2,zero,1010e8dc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010e8a8:	00840474 	movhi	r2,4113
1010e8ac:	1085cc04 	addi	r2,r2,5936
1010e8b0:	e0ffff17 	ldw	r3,-4(fp)
1010e8b4:	18c00324 	muli	r3,r3,12
1010e8b8:	10c5883a 	add	r2,r2,r3
1010e8bc:	10800204 	addi	r2,r2,8
1010e8c0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010e8c4:	00840474 	movhi	r2,4113
1010e8c8:	1085cc04 	addi	r2,r2,5936
1010e8cc:	e0ffff17 	ldw	r3,-4(fp)
1010e8d0:	18c00324 	muli	r3,r3,12
1010e8d4:	10c5883a 	add	r2,r2,r3
1010e8d8:	10000015 	stw	zero,0(r2)
  }
}
1010e8dc:	0001883a 	nop
1010e8e0:	e037883a 	mov	sp,fp
1010e8e4:	df000017 	ldw	fp,0(sp)
1010e8e8:	dec00104 	addi	sp,sp,4
1010e8ec:	f800283a 	ret

1010e8f0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010e8f0:	defff904 	addi	sp,sp,-28
1010e8f4:	df000615 	stw	fp,24(sp)
1010e8f8:	df000604 	addi	fp,sp,24
1010e8fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010e900:	0005303a 	rdctl	r2,status
1010e904:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010e908:	e0fffe17 	ldw	r3,-8(fp)
1010e90c:	00bfff84 	movi	r2,-2
1010e910:	1884703a 	and	r2,r3,r2
1010e914:	1001703a 	wrctl	status,r2
  
  return context;
1010e918:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010e91c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010e920:	d0a00c17 	ldw	r2,-32720(gp)
1010e924:	10c000c4 	addi	r3,r2,3
1010e928:	00bfff04 	movi	r2,-4
1010e92c:	1884703a 	and	r2,r3,r2
1010e930:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010e934:	d0e00c17 	ldw	r3,-32720(gp)
1010e938:	e0bfff17 	ldw	r2,-4(fp)
1010e93c:	1887883a 	add	r3,r3,r2
1010e940:	008404b4 	movhi	r2,4114
1010e944:	10800004 	addi	r2,r2,0
1010e948:	10c0062e 	bgeu	r2,r3,1010e964 <sbrk+0x74>
1010e94c:	e0bffb17 	ldw	r2,-20(fp)
1010e950:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010e954:	e0bffa17 	ldw	r2,-24(fp)
1010e958:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010e95c:	00bfffc4 	movi	r2,-1
1010e960:	00000b06 	br	1010e990 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010e964:	d0a00c17 	ldw	r2,-32720(gp)
1010e968:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010e96c:	d0e00c17 	ldw	r3,-32720(gp)
1010e970:	e0bfff17 	ldw	r2,-4(fp)
1010e974:	1885883a 	add	r2,r3,r2
1010e978:	d0a00c15 	stw	r2,-32720(gp)
1010e97c:	e0bffb17 	ldw	r2,-20(fp)
1010e980:	e0bffc15 	stw	r2,-16(fp)
1010e984:	e0bffc17 	ldw	r2,-16(fp)
1010e988:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010e98c:	e0bffd17 	ldw	r2,-12(fp)
} 
1010e990:	e037883a 	mov	sp,fp
1010e994:	df000017 	ldw	fp,0(sp)
1010e998:	dec00104 	addi	sp,sp,4
1010e99c:	f800283a 	ret

1010e9a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e9a0:	defffe04 	addi	sp,sp,-8
1010e9a4:	dfc00115 	stw	ra,4(sp)
1010e9a8:	df000015 	stw	fp,0(sp)
1010e9ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e9b0:	d0a00b17 	ldw	r2,-32724(gp)
1010e9b4:	10000326 	beq	r2,zero,1010e9c4 <alt_get_errno+0x24>
1010e9b8:	d0a00b17 	ldw	r2,-32724(gp)
1010e9bc:	103ee83a 	callr	r2
1010e9c0:	00000106 	br	1010e9c8 <alt_get_errno+0x28>
1010e9c4:	d0a6f904 	addi	r2,gp,-25628
}
1010e9c8:	e037883a 	mov	sp,fp
1010e9cc:	dfc00117 	ldw	ra,4(sp)
1010e9d0:	df000017 	ldw	fp,0(sp)
1010e9d4:	dec00204 	addi	sp,sp,8
1010e9d8:	f800283a 	ret

1010e9dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010e9dc:	defff904 	addi	sp,sp,-28
1010e9e0:	dfc00615 	stw	ra,24(sp)
1010e9e4:	df000515 	stw	fp,20(sp)
1010e9e8:	df000504 	addi	fp,sp,20
1010e9ec:	e13ffd15 	stw	r4,-12(fp)
1010e9f0:	e17ffe15 	stw	r5,-8(fp)
1010e9f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e9f8:	e0bffd17 	ldw	r2,-12(fp)
1010e9fc:	10000616 	blt	r2,zero,1010ea18 <write+0x3c>
1010ea00:	e0bffd17 	ldw	r2,-12(fp)
1010ea04:	10c00324 	muli	r3,r2,12
1010ea08:	00840474 	movhi	r2,4113
1010ea0c:	1085cc04 	addi	r2,r2,5936
1010ea10:	1885883a 	add	r2,r3,r2
1010ea14:	00000106 	br	1010ea1c <write+0x40>
1010ea18:	0005883a 	mov	r2,zero
1010ea1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ea20:	e0bffb17 	ldw	r2,-20(fp)
1010ea24:	10002126 	beq	r2,zero,1010eaac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010ea28:	e0bffb17 	ldw	r2,-20(fp)
1010ea2c:	10800217 	ldw	r2,8(r2)
1010ea30:	108000cc 	andi	r2,r2,3
1010ea34:	10001826 	beq	r2,zero,1010ea98 <write+0xbc>
1010ea38:	e0bffb17 	ldw	r2,-20(fp)
1010ea3c:	10800017 	ldw	r2,0(r2)
1010ea40:	10800617 	ldw	r2,24(r2)
1010ea44:	10001426 	beq	r2,zero,1010ea98 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010ea48:	e0bffb17 	ldw	r2,-20(fp)
1010ea4c:	10800017 	ldw	r2,0(r2)
1010ea50:	10800617 	ldw	r2,24(r2)
1010ea54:	e0ffff17 	ldw	r3,-4(fp)
1010ea58:	180d883a 	mov	r6,r3
1010ea5c:	e17ffe17 	ldw	r5,-8(fp)
1010ea60:	e13ffb17 	ldw	r4,-20(fp)
1010ea64:	103ee83a 	callr	r2
1010ea68:	e0bffc15 	stw	r2,-16(fp)
1010ea6c:	e0bffc17 	ldw	r2,-16(fp)
1010ea70:	1000070e 	bge	r2,zero,1010ea90 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010ea74:	010e9a00 	call	1010e9a0 <alt_get_errno>
1010ea78:	1007883a 	mov	r3,r2
1010ea7c:	e0bffc17 	ldw	r2,-16(fp)
1010ea80:	0085c83a 	sub	r2,zero,r2
1010ea84:	18800015 	stw	r2,0(r3)
        return -1;
1010ea88:	00bfffc4 	movi	r2,-1
1010ea8c:	00000c06 	br	1010eac0 <write+0xe4>
      }
      return rval;
1010ea90:	e0bffc17 	ldw	r2,-16(fp)
1010ea94:	00000a06 	br	1010eac0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010ea98:	010e9a00 	call	1010e9a0 <alt_get_errno>
1010ea9c:	1007883a 	mov	r3,r2
1010eaa0:	00800344 	movi	r2,13
1010eaa4:	18800015 	stw	r2,0(r3)
1010eaa8:	00000406 	br	1010eabc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010eaac:	010e9a00 	call	1010e9a0 <alt_get_errno>
1010eab0:	1007883a 	mov	r3,r2
1010eab4:	00801444 	movi	r2,81
1010eab8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010eabc:	00bfffc4 	movi	r2,-1
}
1010eac0:	e037883a 	mov	sp,fp
1010eac4:	dfc00117 	ldw	ra,4(sp)
1010eac8:	df000017 	ldw	fp,0(sp)
1010eacc:	dec00204 	addi	sp,sp,8
1010ead0:	f800283a 	ret

1010ead4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010ead4:	defffd04 	addi	sp,sp,-12
1010ead8:	dfc00215 	stw	ra,8(sp)
1010eadc:	df000115 	stw	fp,4(sp)
1010eae0:	df000104 	addi	fp,sp,4
1010eae4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010eae8:	d1600804 	addi	r5,gp,-32736
1010eaec:	e13fff17 	ldw	r4,-4(fp)
1010eaf0:	010fc300 	call	1010fc30 <alt_dev_llist_insert>
}
1010eaf4:	e037883a 	mov	sp,fp
1010eaf8:	dfc00117 	ldw	ra,4(sp)
1010eafc:	df000017 	ldw	fp,0(sp)
1010eb00:	dec00204 	addi	sp,sp,8
1010eb04:	f800283a 	ret

1010eb08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010eb08:	defffd04 	addi	sp,sp,-12
1010eb0c:	dfc00215 	stw	ra,8(sp)
1010eb10:	df000115 	stw	fp,4(sp)
1010eb14:	df000104 	addi	fp,sp,4
1010eb18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010eb1c:	01106080 	call	10110608 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010eb20:	00800044 	movi	r2,1
1010eb24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010eb28:	0001883a 	nop
1010eb2c:	e037883a 	mov	sp,fp
1010eb30:	dfc00117 	ldw	ra,4(sp)
1010eb34:	df000017 	ldw	fp,0(sp)
1010eb38:	dec00204 	addi	sp,sp,8
1010eb3c:	f800283a 	ret

1010eb40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010eb40:	defffe04 	addi	sp,sp,-8
1010eb44:	dfc00115 	stw	ra,4(sp)
1010eb48:	df000015 	stw	fp,0(sp)
1010eb4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010eb50:	01800044 	movi	r6,1
1010eb54:	000b883a 	mov	r5,zero
1010eb58:	01040474 	movhi	r4,4113
1010eb5c:	21063604 	addi	r4,r4,6360
1010eb60:	010ecf80 	call	1010ecf8 <altera_avalon_jtag_uart_init>
1010eb64:	01040474 	movhi	r4,4113
1010eb68:	21062c04 	addi	r4,r4,6320
1010eb6c:	010ead40 	call	1010ead4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010eb70:	01040474 	movhi	r4,4113
1010eb74:	210a4404 	addi	r4,r4,10512
1010eb78:	010ff2c0 	call	1010ff2c <alt_fs_reg>
}
1010eb7c:	0001883a 	nop
1010eb80:	e037883a 	mov	sp,fp
1010eb84:	dfc00117 	ldw	ra,4(sp)
1010eb88:	df000017 	ldw	fp,0(sp)
1010eb8c:	dec00204 	addi	sp,sp,8
1010eb90:	f800283a 	ret

1010eb94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010eb94:	defffa04 	addi	sp,sp,-24
1010eb98:	dfc00515 	stw	ra,20(sp)
1010eb9c:	df000415 	stw	fp,16(sp)
1010eba0:	df000404 	addi	fp,sp,16
1010eba4:	e13ffd15 	stw	r4,-12(fp)
1010eba8:	e17ffe15 	stw	r5,-8(fp)
1010ebac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010ebb0:	e0bffd17 	ldw	r2,-12(fp)
1010ebb4:	10800017 	ldw	r2,0(r2)
1010ebb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010ebbc:	e0bffc17 	ldw	r2,-16(fp)
1010ebc0:	10c00a04 	addi	r3,r2,40
1010ebc4:	e0bffd17 	ldw	r2,-12(fp)
1010ebc8:	10800217 	ldw	r2,8(r2)
1010ebcc:	100f883a 	mov	r7,r2
1010ebd0:	e1bfff17 	ldw	r6,-4(fp)
1010ebd4:	e17ffe17 	ldw	r5,-8(fp)
1010ebd8:	1809883a 	mov	r4,r3
1010ebdc:	010f1bc0 	call	1010f1bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010ebe0:	e037883a 	mov	sp,fp
1010ebe4:	dfc00117 	ldw	ra,4(sp)
1010ebe8:	df000017 	ldw	fp,0(sp)
1010ebec:	dec00204 	addi	sp,sp,8
1010ebf0:	f800283a 	ret

1010ebf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010ebf4:	defffa04 	addi	sp,sp,-24
1010ebf8:	dfc00515 	stw	ra,20(sp)
1010ebfc:	df000415 	stw	fp,16(sp)
1010ec00:	df000404 	addi	fp,sp,16
1010ec04:	e13ffd15 	stw	r4,-12(fp)
1010ec08:	e17ffe15 	stw	r5,-8(fp)
1010ec0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010ec10:	e0bffd17 	ldw	r2,-12(fp)
1010ec14:	10800017 	ldw	r2,0(r2)
1010ec18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010ec1c:	e0bffc17 	ldw	r2,-16(fp)
1010ec20:	10c00a04 	addi	r3,r2,40
1010ec24:	e0bffd17 	ldw	r2,-12(fp)
1010ec28:	10800217 	ldw	r2,8(r2)
1010ec2c:	100f883a 	mov	r7,r2
1010ec30:	e1bfff17 	ldw	r6,-4(fp)
1010ec34:	e17ffe17 	ldw	r5,-8(fp)
1010ec38:	1809883a 	mov	r4,r3
1010ec3c:	010f3d80 	call	1010f3d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010ec40:	e037883a 	mov	sp,fp
1010ec44:	dfc00117 	ldw	ra,4(sp)
1010ec48:	df000017 	ldw	fp,0(sp)
1010ec4c:	dec00204 	addi	sp,sp,8
1010ec50:	f800283a 	ret

1010ec54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010ec54:	defffc04 	addi	sp,sp,-16
1010ec58:	dfc00315 	stw	ra,12(sp)
1010ec5c:	df000215 	stw	fp,8(sp)
1010ec60:	df000204 	addi	fp,sp,8
1010ec64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010ec68:	e0bfff17 	ldw	r2,-4(fp)
1010ec6c:	10800017 	ldw	r2,0(r2)
1010ec70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010ec74:	e0bffe17 	ldw	r2,-8(fp)
1010ec78:	10c00a04 	addi	r3,r2,40
1010ec7c:	e0bfff17 	ldw	r2,-4(fp)
1010ec80:	10800217 	ldw	r2,8(r2)
1010ec84:	100b883a 	mov	r5,r2
1010ec88:	1809883a 	mov	r4,r3
1010ec8c:	010f0640 	call	1010f064 <altera_avalon_jtag_uart_close>
}
1010ec90:	e037883a 	mov	sp,fp
1010ec94:	dfc00117 	ldw	ra,4(sp)
1010ec98:	df000017 	ldw	fp,0(sp)
1010ec9c:	dec00204 	addi	sp,sp,8
1010eca0:	f800283a 	ret

1010eca4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010eca4:	defffa04 	addi	sp,sp,-24
1010eca8:	dfc00515 	stw	ra,20(sp)
1010ecac:	df000415 	stw	fp,16(sp)
1010ecb0:	df000404 	addi	fp,sp,16
1010ecb4:	e13ffd15 	stw	r4,-12(fp)
1010ecb8:	e17ffe15 	stw	r5,-8(fp)
1010ecbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010ecc0:	e0bffd17 	ldw	r2,-12(fp)
1010ecc4:	10800017 	ldw	r2,0(r2)
1010ecc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010eccc:	e0bffc17 	ldw	r2,-16(fp)
1010ecd0:	10800a04 	addi	r2,r2,40
1010ecd4:	e1bfff17 	ldw	r6,-4(fp)
1010ecd8:	e17ffe17 	ldw	r5,-8(fp)
1010ecdc:	1009883a 	mov	r4,r2
1010ece0:	010f0cc0 	call	1010f0cc <altera_avalon_jtag_uart_ioctl>
}
1010ece4:	e037883a 	mov	sp,fp
1010ece8:	dfc00117 	ldw	ra,4(sp)
1010ecec:	df000017 	ldw	fp,0(sp)
1010ecf0:	dec00204 	addi	sp,sp,8
1010ecf4:	f800283a 	ret

1010ecf8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010ecf8:	defffa04 	addi	sp,sp,-24
1010ecfc:	dfc00515 	stw	ra,20(sp)
1010ed00:	df000415 	stw	fp,16(sp)
1010ed04:	df000404 	addi	fp,sp,16
1010ed08:	e13ffd15 	stw	r4,-12(fp)
1010ed0c:	e17ffe15 	stw	r5,-8(fp)
1010ed10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010ed14:	e0bffd17 	ldw	r2,-12(fp)
1010ed18:	00c00044 	movi	r3,1
1010ed1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010ed20:	e0bffd17 	ldw	r2,-12(fp)
1010ed24:	10800017 	ldw	r2,0(r2)
1010ed28:	10800104 	addi	r2,r2,4
1010ed2c:	1007883a 	mov	r3,r2
1010ed30:	e0bffd17 	ldw	r2,-12(fp)
1010ed34:	10800817 	ldw	r2,32(r2)
1010ed38:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010ed3c:	e0bffe17 	ldw	r2,-8(fp)
1010ed40:	e0ffff17 	ldw	r3,-4(fp)
1010ed44:	d8000015 	stw	zero,0(sp)
1010ed48:	e1fffd17 	ldw	r7,-12(fp)
1010ed4c:	01840474 	movhi	r6,4113
1010ed50:	31bb6e04 	addi	r6,r6,-4680
1010ed54:	180b883a 	mov	r5,r3
1010ed58:	1009883a 	mov	r4,r2
1010ed5c:	01100840 	call	10110084 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010ed60:	e0bffd17 	ldw	r2,-12(fp)
1010ed64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010ed68:	e0bffd17 	ldw	r2,-12(fp)
1010ed6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010ed70:	d0e70417 	ldw	r3,-25584(gp)
1010ed74:	e1fffd17 	ldw	r7,-12(fp)
1010ed78:	01840474 	movhi	r6,4113
1010ed7c:	31bbf104 	addi	r6,r6,-4156
1010ed80:	180b883a 	mov	r5,r3
1010ed84:	1009883a 	mov	r4,r2
1010ed88:	010fa800 	call	1010fa80 <alt_alarm_start>
1010ed8c:	1000040e 	bge	r2,zero,1010eda0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010ed90:	e0fffd17 	ldw	r3,-12(fp)
1010ed94:	00a00034 	movhi	r2,32768
1010ed98:	10bfffc4 	addi	r2,r2,-1
1010ed9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010eda0:	0001883a 	nop
1010eda4:	e037883a 	mov	sp,fp
1010eda8:	dfc00117 	ldw	ra,4(sp)
1010edac:	df000017 	ldw	fp,0(sp)
1010edb0:	dec00204 	addi	sp,sp,8
1010edb4:	f800283a 	ret

1010edb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010edb8:	defff804 	addi	sp,sp,-32
1010edbc:	df000715 	stw	fp,28(sp)
1010edc0:	df000704 	addi	fp,sp,28
1010edc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010edc8:	e0bfff17 	ldw	r2,-4(fp)
1010edcc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010edd0:	e0bffb17 	ldw	r2,-20(fp)
1010edd4:	10800017 	ldw	r2,0(r2)
1010edd8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010eddc:	e0bffc17 	ldw	r2,-16(fp)
1010ede0:	10800104 	addi	r2,r2,4
1010ede4:	10800037 	ldwio	r2,0(r2)
1010ede8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010edec:	e0bffd17 	ldw	r2,-12(fp)
1010edf0:	1080c00c 	andi	r2,r2,768
1010edf4:	10006d26 	beq	r2,zero,1010efac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010edf8:	e0bffd17 	ldw	r2,-12(fp)
1010edfc:	1080400c 	andi	r2,r2,256
1010ee00:	10003526 	beq	r2,zero,1010eed8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010ee04:	00800074 	movhi	r2,1
1010ee08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010ee0c:	e0bffb17 	ldw	r2,-20(fp)
1010ee10:	10800a17 	ldw	r2,40(r2)
1010ee14:	10800044 	addi	r2,r2,1
1010ee18:	1081ffcc 	andi	r2,r2,2047
1010ee1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010ee20:	e0bffb17 	ldw	r2,-20(fp)
1010ee24:	10c00b17 	ldw	r3,44(r2)
1010ee28:	e0bffe17 	ldw	r2,-8(fp)
1010ee2c:	18801526 	beq	r3,r2,1010ee84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010ee30:	e0bffc17 	ldw	r2,-16(fp)
1010ee34:	10800037 	ldwio	r2,0(r2)
1010ee38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010ee3c:	e0bff917 	ldw	r2,-28(fp)
1010ee40:	10a0000c 	andi	r2,r2,32768
1010ee44:	10001126 	beq	r2,zero,1010ee8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010ee48:	e0bffb17 	ldw	r2,-20(fp)
1010ee4c:	10800a17 	ldw	r2,40(r2)
1010ee50:	e0fff917 	ldw	r3,-28(fp)
1010ee54:	1809883a 	mov	r4,r3
1010ee58:	e0fffb17 	ldw	r3,-20(fp)
1010ee5c:	1885883a 	add	r2,r3,r2
1010ee60:	10800e04 	addi	r2,r2,56
1010ee64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010ee68:	e0bffb17 	ldw	r2,-20(fp)
1010ee6c:	10800a17 	ldw	r2,40(r2)
1010ee70:	10800044 	addi	r2,r2,1
1010ee74:	10c1ffcc 	andi	r3,r2,2047
1010ee78:	e0bffb17 	ldw	r2,-20(fp)
1010ee7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010ee80:	003fe206 	br	1010ee0c <__alt_data_end+0xfffeee0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010ee84:	0001883a 	nop
1010ee88:	00000106 	br	1010ee90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010ee8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010ee90:	e0bff917 	ldw	r2,-28(fp)
1010ee94:	10bfffec 	andhi	r2,r2,65535
1010ee98:	10000f26 	beq	r2,zero,1010eed8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010ee9c:	e0bffb17 	ldw	r2,-20(fp)
1010eea0:	10c00817 	ldw	r3,32(r2)
1010eea4:	00bfff84 	movi	r2,-2
1010eea8:	1886703a 	and	r3,r3,r2
1010eeac:	e0bffb17 	ldw	r2,-20(fp)
1010eeb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010eeb4:	e0bffc17 	ldw	r2,-16(fp)
1010eeb8:	10800104 	addi	r2,r2,4
1010eebc:	1007883a 	mov	r3,r2
1010eec0:	e0bffb17 	ldw	r2,-20(fp)
1010eec4:	10800817 	ldw	r2,32(r2)
1010eec8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010eecc:	e0bffc17 	ldw	r2,-16(fp)
1010eed0:	10800104 	addi	r2,r2,4
1010eed4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010eed8:	e0bffd17 	ldw	r2,-12(fp)
1010eedc:	1080800c 	andi	r2,r2,512
1010eee0:	103fbe26 	beq	r2,zero,1010eddc <__alt_data_end+0xfffeeddc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010eee4:	e0bffd17 	ldw	r2,-12(fp)
1010eee8:	1004d43a 	srli	r2,r2,16
1010eeec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010eef0:	00001406 	br	1010ef44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010eef4:	e0bffc17 	ldw	r2,-16(fp)
1010eef8:	e0fffb17 	ldw	r3,-20(fp)
1010eefc:	18c00d17 	ldw	r3,52(r3)
1010ef00:	e13ffb17 	ldw	r4,-20(fp)
1010ef04:	20c7883a 	add	r3,r4,r3
1010ef08:	18c20e04 	addi	r3,r3,2104
1010ef0c:	18c00003 	ldbu	r3,0(r3)
1010ef10:	18c03fcc 	andi	r3,r3,255
1010ef14:	18c0201c 	xori	r3,r3,128
1010ef18:	18ffe004 	addi	r3,r3,-128
1010ef1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010ef20:	e0bffb17 	ldw	r2,-20(fp)
1010ef24:	10800d17 	ldw	r2,52(r2)
1010ef28:	10800044 	addi	r2,r2,1
1010ef2c:	10c1ffcc 	andi	r3,r2,2047
1010ef30:	e0bffb17 	ldw	r2,-20(fp)
1010ef34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010ef38:	e0bffa17 	ldw	r2,-24(fp)
1010ef3c:	10bfffc4 	addi	r2,r2,-1
1010ef40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010ef44:	e0bffa17 	ldw	r2,-24(fp)
1010ef48:	10000526 	beq	r2,zero,1010ef60 <altera_avalon_jtag_uart_irq+0x1a8>
1010ef4c:	e0bffb17 	ldw	r2,-20(fp)
1010ef50:	10c00d17 	ldw	r3,52(r2)
1010ef54:	e0bffb17 	ldw	r2,-20(fp)
1010ef58:	10800c17 	ldw	r2,48(r2)
1010ef5c:	18bfe51e 	bne	r3,r2,1010eef4 <__alt_data_end+0xfffeeef4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010ef60:	e0bffa17 	ldw	r2,-24(fp)
1010ef64:	103f9d26 	beq	r2,zero,1010eddc <__alt_data_end+0xfffeeddc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010ef68:	e0bffb17 	ldw	r2,-20(fp)
1010ef6c:	10c00817 	ldw	r3,32(r2)
1010ef70:	00bfff44 	movi	r2,-3
1010ef74:	1886703a 	and	r3,r3,r2
1010ef78:	e0bffb17 	ldw	r2,-20(fp)
1010ef7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010ef80:	e0bffb17 	ldw	r2,-20(fp)
1010ef84:	10800017 	ldw	r2,0(r2)
1010ef88:	10800104 	addi	r2,r2,4
1010ef8c:	1007883a 	mov	r3,r2
1010ef90:	e0bffb17 	ldw	r2,-20(fp)
1010ef94:	10800817 	ldw	r2,32(r2)
1010ef98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010ef9c:	e0bffc17 	ldw	r2,-16(fp)
1010efa0:	10800104 	addi	r2,r2,4
1010efa4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010efa8:	003f8c06 	br	1010eddc <__alt_data_end+0xfffeeddc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010efac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010efb0:	0001883a 	nop
1010efb4:	e037883a 	mov	sp,fp
1010efb8:	df000017 	ldw	fp,0(sp)
1010efbc:	dec00104 	addi	sp,sp,4
1010efc0:	f800283a 	ret

1010efc4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010efc4:	defff804 	addi	sp,sp,-32
1010efc8:	df000715 	stw	fp,28(sp)
1010efcc:	df000704 	addi	fp,sp,28
1010efd0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010efd4:	e0bffb17 	ldw	r2,-20(fp)
1010efd8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010efdc:	e0bff917 	ldw	r2,-28(fp)
1010efe0:	10800017 	ldw	r2,0(r2)
1010efe4:	10800104 	addi	r2,r2,4
1010efe8:	10800037 	ldwio	r2,0(r2)
1010efec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010eff0:	e0bffa17 	ldw	r2,-24(fp)
1010eff4:	1081000c 	andi	r2,r2,1024
1010eff8:	10000b26 	beq	r2,zero,1010f028 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010effc:	e0bff917 	ldw	r2,-28(fp)
1010f000:	10800017 	ldw	r2,0(r2)
1010f004:	10800104 	addi	r2,r2,4
1010f008:	1007883a 	mov	r3,r2
1010f00c:	e0bff917 	ldw	r2,-28(fp)
1010f010:	10800817 	ldw	r2,32(r2)
1010f014:	10810014 	ori	r2,r2,1024
1010f018:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f01c:	e0bff917 	ldw	r2,-28(fp)
1010f020:	10000915 	stw	zero,36(r2)
1010f024:	00000a06 	br	1010f050 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f028:	e0bff917 	ldw	r2,-28(fp)
1010f02c:	10c00917 	ldw	r3,36(r2)
1010f030:	00a00034 	movhi	r2,32768
1010f034:	10bfff04 	addi	r2,r2,-4
1010f038:	10c00536 	bltu	r2,r3,1010f050 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f03c:	e0bff917 	ldw	r2,-28(fp)
1010f040:	10800917 	ldw	r2,36(r2)
1010f044:	10c00044 	addi	r3,r2,1
1010f048:	e0bff917 	ldw	r2,-28(fp)
1010f04c:	10c00915 	stw	r3,36(r2)
1010f050:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f054:	e037883a 	mov	sp,fp
1010f058:	df000017 	ldw	fp,0(sp)
1010f05c:	dec00104 	addi	sp,sp,4
1010f060:	f800283a 	ret

1010f064 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f064:	defffd04 	addi	sp,sp,-12
1010f068:	df000215 	stw	fp,8(sp)
1010f06c:	df000204 	addi	fp,sp,8
1010f070:	e13ffe15 	stw	r4,-8(fp)
1010f074:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f078:	00000506 	br	1010f090 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f07c:	e0bfff17 	ldw	r2,-4(fp)
1010f080:	1090000c 	andi	r2,r2,16384
1010f084:	10000226 	beq	r2,zero,1010f090 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f088:	00bffd44 	movi	r2,-11
1010f08c:	00000b06 	br	1010f0bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f090:	e0bffe17 	ldw	r2,-8(fp)
1010f094:	10c00d17 	ldw	r3,52(r2)
1010f098:	e0bffe17 	ldw	r2,-8(fp)
1010f09c:	10800c17 	ldw	r2,48(r2)
1010f0a0:	18800526 	beq	r3,r2,1010f0b8 <altera_avalon_jtag_uart_close+0x54>
1010f0a4:	e0bffe17 	ldw	r2,-8(fp)
1010f0a8:	10c00917 	ldw	r3,36(r2)
1010f0ac:	e0bffe17 	ldw	r2,-8(fp)
1010f0b0:	10800117 	ldw	r2,4(r2)
1010f0b4:	18bff136 	bltu	r3,r2,1010f07c <__alt_data_end+0xfffef07c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f0b8:	0005883a 	mov	r2,zero
}
1010f0bc:	e037883a 	mov	sp,fp
1010f0c0:	df000017 	ldw	fp,0(sp)
1010f0c4:	dec00104 	addi	sp,sp,4
1010f0c8:	f800283a 	ret

1010f0cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f0cc:	defffa04 	addi	sp,sp,-24
1010f0d0:	df000515 	stw	fp,20(sp)
1010f0d4:	df000504 	addi	fp,sp,20
1010f0d8:	e13ffd15 	stw	r4,-12(fp)
1010f0dc:	e17ffe15 	stw	r5,-8(fp)
1010f0e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010f0e4:	00bff9c4 	movi	r2,-25
1010f0e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010f0ec:	e0bffe17 	ldw	r2,-8(fp)
1010f0f0:	10da8060 	cmpeqi	r3,r2,27137
1010f0f4:	1800031e 	bne	r3,zero,1010f104 <altera_avalon_jtag_uart_ioctl+0x38>
1010f0f8:	109a80a0 	cmpeqi	r2,r2,27138
1010f0fc:	1000181e 	bne	r2,zero,1010f160 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010f100:	00002906 	br	1010f1a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010f104:	e0bffd17 	ldw	r2,-12(fp)
1010f108:	10c00117 	ldw	r3,4(r2)
1010f10c:	00a00034 	movhi	r2,32768
1010f110:	10bfffc4 	addi	r2,r2,-1
1010f114:	18802126 	beq	r3,r2,1010f19c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010f118:	e0bfff17 	ldw	r2,-4(fp)
1010f11c:	10800017 	ldw	r2,0(r2)
1010f120:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010f124:	e0bffc17 	ldw	r2,-16(fp)
1010f128:	10800090 	cmplti	r2,r2,2
1010f12c:	1000061e 	bne	r2,zero,1010f148 <altera_avalon_jtag_uart_ioctl+0x7c>
1010f130:	e0fffc17 	ldw	r3,-16(fp)
1010f134:	00a00034 	movhi	r2,32768
1010f138:	10bfffc4 	addi	r2,r2,-1
1010f13c:	18800226 	beq	r3,r2,1010f148 <altera_avalon_jtag_uart_ioctl+0x7c>
1010f140:	e0bffc17 	ldw	r2,-16(fp)
1010f144:	00000206 	br	1010f150 <altera_avalon_jtag_uart_ioctl+0x84>
1010f148:	00a00034 	movhi	r2,32768
1010f14c:	10bfff84 	addi	r2,r2,-2
1010f150:	e0fffd17 	ldw	r3,-12(fp)
1010f154:	18800115 	stw	r2,4(r3)
      rc = 0;
1010f158:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f15c:	00000f06 	br	1010f19c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010f160:	e0bffd17 	ldw	r2,-12(fp)
1010f164:	10c00117 	ldw	r3,4(r2)
1010f168:	00a00034 	movhi	r2,32768
1010f16c:	10bfffc4 	addi	r2,r2,-1
1010f170:	18800c26 	beq	r3,r2,1010f1a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010f174:	e0bffd17 	ldw	r2,-12(fp)
1010f178:	10c00917 	ldw	r3,36(r2)
1010f17c:	e0bffd17 	ldw	r2,-12(fp)
1010f180:	10800117 	ldw	r2,4(r2)
1010f184:	1885803a 	cmpltu	r2,r3,r2
1010f188:	10c03fcc 	andi	r3,r2,255
1010f18c:	e0bfff17 	ldw	r2,-4(fp)
1010f190:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010f194:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f198:	00000206 	br	1010f1a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010f19c:	0001883a 	nop
1010f1a0:	00000106 	br	1010f1a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010f1a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010f1a8:	e0bffb17 	ldw	r2,-20(fp)
}
1010f1ac:	e037883a 	mov	sp,fp
1010f1b0:	df000017 	ldw	fp,0(sp)
1010f1b4:	dec00104 	addi	sp,sp,4
1010f1b8:	f800283a 	ret

1010f1bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010f1bc:	defff304 	addi	sp,sp,-52
1010f1c0:	dfc00c15 	stw	ra,48(sp)
1010f1c4:	df000b15 	stw	fp,44(sp)
1010f1c8:	df000b04 	addi	fp,sp,44
1010f1cc:	e13ffc15 	stw	r4,-16(fp)
1010f1d0:	e17ffd15 	stw	r5,-12(fp)
1010f1d4:	e1bffe15 	stw	r6,-8(fp)
1010f1d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010f1dc:	e0bffd17 	ldw	r2,-12(fp)
1010f1e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f1e4:	00004706 	br	1010f304 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010f1e8:	e0bffc17 	ldw	r2,-16(fp)
1010f1ec:	10800a17 	ldw	r2,40(r2)
1010f1f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010f1f4:	e0bffc17 	ldw	r2,-16(fp)
1010f1f8:	10800b17 	ldw	r2,44(r2)
1010f1fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010f200:	e0fff717 	ldw	r3,-36(fp)
1010f204:	e0bff817 	ldw	r2,-32(fp)
1010f208:	18800536 	bltu	r3,r2,1010f220 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010f20c:	e0fff717 	ldw	r3,-36(fp)
1010f210:	e0bff817 	ldw	r2,-32(fp)
1010f214:	1885c83a 	sub	r2,r3,r2
1010f218:	e0bff615 	stw	r2,-40(fp)
1010f21c:	00000406 	br	1010f230 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010f220:	00c20004 	movi	r3,2048
1010f224:	e0bff817 	ldw	r2,-32(fp)
1010f228:	1885c83a 	sub	r2,r3,r2
1010f22c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f230:	e0bff617 	ldw	r2,-40(fp)
1010f234:	10001e26 	beq	r2,zero,1010f2b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010f238:	e0fffe17 	ldw	r3,-8(fp)
1010f23c:	e0bff617 	ldw	r2,-40(fp)
1010f240:	1880022e 	bgeu	r3,r2,1010f24c <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010f244:	e0bffe17 	ldw	r2,-8(fp)
1010f248:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010f24c:	e0bffc17 	ldw	r2,-16(fp)
1010f250:	10c00e04 	addi	r3,r2,56
1010f254:	e0bff817 	ldw	r2,-32(fp)
1010f258:	1885883a 	add	r2,r3,r2
1010f25c:	e1bff617 	ldw	r6,-40(fp)
1010f260:	100b883a 	mov	r5,r2
1010f264:	e13ff517 	ldw	r4,-44(fp)
1010f268:	01070100 	call	10107010 <memcpy>
      ptr   += n;
1010f26c:	e0fff517 	ldw	r3,-44(fp)
1010f270:	e0bff617 	ldw	r2,-40(fp)
1010f274:	1885883a 	add	r2,r3,r2
1010f278:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010f27c:	e0fffe17 	ldw	r3,-8(fp)
1010f280:	e0bff617 	ldw	r2,-40(fp)
1010f284:	1885c83a 	sub	r2,r3,r2
1010f288:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f28c:	e0fff817 	ldw	r3,-32(fp)
1010f290:	e0bff617 	ldw	r2,-40(fp)
1010f294:	1885883a 	add	r2,r3,r2
1010f298:	10c1ffcc 	andi	r3,r2,2047
1010f29c:	e0bffc17 	ldw	r2,-16(fp)
1010f2a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010f2a4:	e0bffe17 	ldw	r2,-8(fp)
1010f2a8:	00bfcf16 	blt	zero,r2,1010f1e8 <__alt_data_end+0xfffef1e8>
1010f2ac:	00000106 	br	1010f2b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010f2b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010f2b4:	e0fff517 	ldw	r3,-44(fp)
1010f2b8:	e0bffd17 	ldw	r2,-12(fp)
1010f2bc:	1880141e 	bne	r3,r2,1010f310 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010f2c0:	e0bfff17 	ldw	r2,-4(fp)
1010f2c4:	1090000c 	andi	r2,r2,16384
1010f2c8:	1000131e 	bne	r2,zero,1010f318 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010f2cc:	0001883a 	nop
1010f2d0:	e0bffc17 	ldw	r2,-16(fp)
1010f2d4:	10c00a17 	ldw	r3,40(r2)
1010f2d8:	e0bff717 	ldw	r2,-36(fp)
1010f2dc:	1880051e 	bne	r3,r2,1010f2f4 <altera_avalon_jtag_uart_read+0x138>
1010f2e0:	e0bffc17 	ldw	r2,-16(fp)
1010f2e4:	10c00917 	ldw	r3,36(r2)
1010f2e8:	e0bffc17 	ldw	r2,-16(fp)
1010f2ec:	10800117 	ldw	r2,4(r2)
1010f2f0:	18bff736 	bltu	r3,r2,1010f2d0 <__alt_data_end+0xfffef2d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010f2f4:	e0bffc17 	ldw	r2,-16(fp)
1010f2f8:	10c00a17 	ldw	r3,40(r2)
1010f2fc:	e0bff717 	ldw	r2,-36(fp)
1010f300:	18800726 	beq	r3,r2,1010f320 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f304:	e0bffe17 	ldw	r2,-8(fp)
1010f308:	00bfb716 	blt	zero,r2,1010f1e8 <__alt_data_end+0xfffef1e8>
1010f30c:	00000506 	br	1010f324 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010f310:	0001883a 	nop
1010f314:	00000306 	br	1010f324 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010f318:	0001883a 	nop
1010f31c:	00000106 	br	1010f324 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010f320:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010f324:	e0fff517 	ldw	r3,-44(fp)
1010f328:	e0bffd17 	ldw	r2,-12(fp)
1010f32c:	18801826 	beq	r3,r2,1010f390 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f330:	0005303a 	rdctl	r2,status
1010f334:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f338:	e0fffb17 	ldw	r3,-20(fp)
1010f33c:	00bfff84 	movi	r2,-2
1010f340:	1884703a 	and	r2,r3,r2
1010f344:	1001703a 	wrctl	status,r2
  
  return context;
1010f348:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010f34c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f350:	e0bffc17 	ldw	r2,-16(fp)
1010f354:	10800817 	ldw	r2,32(r2)
1010f358:	10c00054 	ori	r3,r2,1
1010f35c:	e0bffc17 	ldw	r2,-16(fp)
1010f360:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f364:	e0bffc17 	ldw	r2,-16(fp)
1010f368:	10800017 	ldw	r2,0(r2)
1010f36c:	10800104 	addi	r2,r2,4
1010f370:	1007883a 	mov	r3,r2
1010f374:	e0bffc17 	ldw	r2,-16(fp)
1010f378:	10800817 	ldw	r2,32(r2)
1010f37c:	18800035 	stwio	r2,0(r3)
1010f380:	e0bffa17 	ldw	r2,-24(fp)
1010f384:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f388:	e0bff917 	ldw	r2,-28(fp)
1010f38c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010f390:	e0fff517 	ldw	r3,-44(fp)
1010f394:	e0bffd17 	ldw	r2,-12(fp)
1010f398:	18800426 	beq	r3,r2,1010f3ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010f39c:	e0fff517 	ldw	r3,-44(fp)
1010f3a0:	e0bffd17 	ldw	r2,-12(fp)
1010f3a4:	1885c83a 	sub	r2,r3,r2
1010f3a8:	00000606 	br	1010f3c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010f3ac:	e0bfff17 	ldw	r2,-4(fp)
1010f3b0:	1090000c 	andi	r2,r2,16384
1010f3b4:	10000226 	beq	r2,zero,1010f3c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010f3b8:	00bffd44 	movi	r2,-11
1010f3bc:	00000106 	br	1010f3c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010f3c0:	00bffec4 	movi	r2,-5
}
1010f3c4:	e037883a 	mov	sp,fp
1010f3c8:	dfc00117 	ldw	ra,4(sp)
1010f3cc:	df000017 	ldw	fp,0(sp)
1010f3d0:	dec00204 	addi	sp,sp,8
1010f3d4:	f800283a 	ret

1010f3d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010f3d8:	defff304 	addi	sp,sp,-52
1010f3dc:	dfc00c15 	stw	ra,48(sp)
1010f3e0:	df000b15 	stw	fp,44(sp)
1010f3e4:	df000b04 	addi	fp,sp,44
1010f3e8:	e13ffc15 	stw	r4,-16(fp)
1010f3ec:	e17ffd15 	stw	r5,-12(fp)
1010f3f0:	e1bffe15 	stw	r6,-8(fp)
1010f3f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010f3f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010f3fc:	e0bffd17 	ldw	r2,-12(fp)
1010f400:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f404:	00003706 	br	1010f4e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010f408:	e0bffc17 	ldw	r2,-16(fp)
1010f40c:	10800c17 	ldw	r2,48(r2)
1010f410:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010f414:	e0bffc17 	ldw	r2,-16(fp)
1010f418:	10800d17 	ldw	r2,52(r2)
1010f41c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010f420:	e0fff917 	ldw	r3,-28(fp)
1010f424:	e0bff517 	ldw	r2,-44(fp)
1010f428:	1880062e 	bgeu	r3,r2,1010f444 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010f42c:	e0fff517 	ldw	r3,-44(fp)
1010f430:	e0bff917 	ldw	r2,-28(fp)
1010f434:	1885c83a 	sub	r2,r3,r2
1010f438:	10bfffc4 	addi	r2,r2,-1
1010f43c:	e0bff615 	stw	r2,-40(fp)
1010f440:	00000b06 	br	1010f470 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010f444:	e0bff517 	ldw	r2,-44(fp)
1010f448:	10000526 	beq	r2,zero,1010f460 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010f44c:	00c20004 	movi	r3,2048
1010f450:	e0bff917 	ldw	r2,-28(fp)
1010f454:	1885c83a 	sub	r2,r3,r2
1010f458:	e0bff615 	stw	r2,-40(fp)
1010f45c:	00000406 	br	1010f470 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010f460:	00c1ffc4 	movi	r3,2047
1010f464:	e0bff917 	ldw	r2,-28(fp)
1010f468:	1885c83a 	sub	r2,r3,r2
1010f46c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f470:	e0bff617 	ldw	r2,-40(fp)
1010f474:	10001e26 	beq	r2,zero,1010f4f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010f478:	e0fffe17 	ldw	r3,-8(fp)
1010f47c:	e0bff617 	ldw	r2,-40(fp)
1010f480:	1880022e 	bgeu	r3,r2,1010f48c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010f484:	e0bffe17 	ldw	r2,-8(fp)
1010f488:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010f48c:	e0bffc17 	ldw	r2,-16(fp)
1010f490:	10c20e04 	addi	r3,r2,2104
1010f494:	e0bff917 	ldw	r2,-28(fp)
1010f498:	1885883a 	add	r2,r3,r2
1010f49c:	e1bff617 	ldw	r6,-40(fp)
1010f4a0:	e17ffd17 	ldw	r5,-12(fp)
1010f4a4:	1009883a 	mov	r4,r2
1010f4a8:	01070100 	call	10107010 <memcpy>
      ptr   += n;
1010f4ac:	e0fffd17 	ldw	r3,-12(fp)
1010f4b0:	e0bff617 	ldw	r2,-40(fp)
1010f4b4:	1885883a 	add	r2,r3,r2
1010f4b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010f4bc:	e0fffe17 	ldw	r3,-8(fp)
1010f4c0:	e0bff617 	ldw	r2,-40(fp)
1010f4c4:	1885c83a 	sub	r2,r3,r2
1010f4c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f4cc:	e0fff917 	ldw	r3,-28(fp)
1010f4d0:	e0bff617 	ldw	r2,-40(fp)
1010f4d4:	1885883a 	add	r2,r3,r2
1010f4d8:	10c1ffcc 	andi	r3,r2,2047
1010f4dc:	e0bffc17 	ldw	r2,-16(fp)
1010f4e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f4e4:	e0bffe17 	ldw	r2,-8(fp)
1010f4e8:	00bfc716 	blt	zero,r2,1010f408 <__alt_data_end+0xfffef408>
1010f4ec:	00000106 	br	1010f4f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010f4f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f4f4:	0005303a 	rdctl	r2,status
1010f4f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f4fc:	e0fffb17 	ldw	r3,-20(fp)
1010f500:	00bfff84 	movi	r2,-2
1010f504:	1884703a 	and	r2,r3,r2
1010f508:	1001703a 	wrctl	status,r2
  
  return context;
1010f50c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010f510:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f514:	e0bffc17 	ldw	r2,-16(fp)
1010f518:	10800817 	ldw	r2,32(r2)
1010f51c:	10c00094 	ori	r3,r2,2
1010f520:	e0bffc17 	ldw	r2,-16(fp)
1010f524:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f528:	e0bffc17 	ldw	r2,-16(fp)
1010f52c:	10800017 	ldw	r2,0(r2)
1010f530:	10800104 	addi	r2,r2,4
1010f534:	1007883a 	mov	r3,r2
1010f538:	e0bffc17 	ldw	r2,-16(fp)
1010f53c:	10800817 	ldw	r2,32(r2)
1010f540:	18800035 	stwio	r2,0(r3)
1010f544:	e0bffa17 	ldw	r2,-24(fp)
1010f548:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f54c:	e0bff817 	ldw	r2,-32(fp)
1010f550:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010f554:	e0bffe17 	ldw	r2,-8(fp)
1010f558:	0080100e 	bge	zero,r2,1010f59c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010f55c:	e0bfff17 	ldw	r2,-4(fp)
1010f560:	1090000c 	andi	r2,r2,16384
1010f564:	1000101e 	bne	r2,zero,1010f5a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010f568:	0001883a 	nop
1010f56c:	e0bffc17 	ldw	r2,-16(fp)
1010f570:	10c00d17 	ldw	r3,52(r2)
1010f574:	e0bff517 	ldw	r2,-44(fp)
1010f578:	1880051e 	bne	r3,r2,1010f590 <altera_avalon_jtag_uart_write+0x1b8>
1010f57c:	e0bffc17 	ldw	r2,-16(fp)
1010f580:	10c00917 	ldw	r3,36(r2)
1010f584:	e0bffc17 	ldw	r2,-16(fp)
1010f588:	10800117 	ldw	r2,4(r2)
1010f58c:	18bff736 	bltu	r3,r2,1010f56c <__alt_data_end+0xfffef56c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010f590:	e0bffc17 	ldw	r2,-16(fp)
1010f594:	10800917 	ldw	r2,36(r2)
1010f598:	1000051e 	bne	r2,zero,1010f5b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010f59c:	e0bffe17 	ldw	r2,-8(fp)
1010f5a0:	00bfd016 	blt	zero,r2,1010f4e4 <__alt_data_end+0xfffef4e4>
1010f5a4:	00000306 	br	1010f5b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010f5a8:	0001883a 	nop
1010f5ac:	00000106 	br	1010f5b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010f5b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010f5b4:	e0fffd17 	ldw	r3,-12(fp)
1010f5b8:	e0bff717 	ldw	r2,-36(fp)
1010f5bc:	18800426 	beq	r3,r2,1010f5d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010f5c0:	e0fffd17 	ldw	r3,-12(fp)
1010f5c4:	e0bff717 	ldw	r2,-36(fp)
1010f5c8:	1885c83a 	sub	r2,r3,r2
1010f5cc:	00000606 	br	1010f5e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010f5d0:	e0bfff17 	ldw	r2,-4(fp)
1010f5d4:	1090000c 	andi	r2,r2,16384
1010f5d8:	10000226 	beq	r2,zero,1010f5e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010f5dc:	00bffd44 	movi	r2,-11
1010f5e0:	00000106 	br	1010f5e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010f5e4:	00bffec4 	movi	r2,-5
}
1010f5e8:	e037883a 	mov	sp,fp
1010f5ec:	dfc00117 	ldw	ra,4(sp)
1010f5f0:	df000017 	ldw	fp,0(sp)
1010f5f4:	dec00204 	addi	sp,sp,8
1010f5f8:	f800283a 	ret

1010f5fc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010f5fc:	defff404 	addi	sp,sp,-48
1010f600:	df000b15 	stw	fp,44(sp)
1010f604:	df000b04 	addi	fp,sp,44
1010f608:	e13ffc15 	stw	r4,-16(fp)
1010f60c:	e17ffd15 	stw	r5,-12(fp)
1010f610:	e1bffe15 	stw	r6,-8(fp)
1010f614:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010f618:	e0bffc17 	ldw	r2,-16(fp)
1010f61c:	10800017 	ldw	r2,0(r2)
1010f620:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010f624:	e0bff517 	ldw	r2,-44(fp)
1010f628:	10800217 	ldw	r2,8(r2)
1010f62c:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010f630:	e0bff617 	ldw	r2,-40(fp)
1010f634:	10bfffc4 	addi	r2,r2,-1
1010f638:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010f63c:	e0bffb17 	ldw	r2,-20(fp)
1010f640:	10800044 	addi	r2,r2,1
1010f644:	e0bffb15 	stw	r2,-20(fp)
1010f648:	e0bffb17 	ldw	r2,-20(fp)
1010f64c:	10800003 	ldbu	r2,0(r2)
1010f650:	10803fcc 	andi	r2,r2,255
1010f654:	1080201c 	xori	r2,r2,128
1010f658:	10bfe004 	addi	r2,r2,-128
1010f65c:	103ff71e 	bne	r2,zero,1010f63c <__alt_data_end+0xfffef63c>
    ;

  return ptr - string;
1010f660:	e0fffb17 	ldw	r3,-20(fp)
1010f664:	e0bff617 	ldw	r2,-40(fp)
1010f668:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010f66c:	10800044 	addi	r2,r2,1
1010f670:	1007883a 	mov	r3,r2
1010f674:	e0bffd17 	ldw	r2,-12(fp)
1010f678:	10c5883a 	add	r2,r2,r3
1010f67c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010f680:	d0a00d04 	addi	r2,gp,-32716
1010f684:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010f688:	e0bffd17 	ldw	r2,-12(fp)
1010f68c:	1009883a 	mov	r4,r2
  r5 = flags;
1010f690:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010f694:	e1bfff17 	ldw	r6,-4(fp)
1010f698:	e0bffd17 	ldw	r2,-12(fp)
1010f69c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010f6a0:	e0bff917 	ldw	r2,-28(fp)
1010f6a4:	10bfffc4 	addi	r2,r2,-1
1010f6a8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010f6ac:	e0bffa17 	ldw	r2,-24(fp)
1010f6b0:	10800044 	addi	r2,r2,1
1010f6b4:	e0bffa15 	stw	r2,-24(fp)
1010f6b8:	e0bffa17 	ldw	r2,-24(fp)
1010f6bc:	10800003 	ldbu	r2,0(r2)
1010f6c0:	10803fcc 	andi	r2,r2,255
1010f6c4:	1080201c 	xori	r2,r2,128
1010f6c8:	10bfe004 	addi	r2,r2,-128
1010f6cc:	103ff71e 	bne	r2,zero,1010f6ac <__alt_data_end+0xfffef6ac>
    ;

  return ptr - string;
1010f6d0:	e1fffa17 	ldw	r7,-24(fp)
1010f6d4:	e0bff917 	ldw	r2,-28(fp)
1010f6d8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010f6dc:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1010f6e0:	003da07a 	break	1

  handle = (void *)r2;
1010f6e4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1010f6e8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010f6ec:	e0bff817 	ldw	r2,-32(fp)
1010f6f0:	1000031e 	bne	r2,zero,1010f700 <alt_hostfs_open+0x104>
    fd->priv = handle;
1010f6f4:	e0bffc17 	ldw	r2,-16(fp)
1010f6f8:	e0fff717 	ldw	r3,-36(fp)
1010f6fc:	10c00115 	stw	r3,4(r2)

  return -error;
1010f700:	e0bff817 	ldw	r2,-32(fp)
1010f704:	0085c83a 	sub	r2,zero,r2
}
1010f708:	e037883a 	mov	sp,fp
1010f70c:	df000017 	ldw	fp,0(sp)
1010f710:	dec00104 	addi	sp,sp,4
1010f714:	f800283a 	ret

1010f718 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1010f718:	defffd04 	addi	sp,sp,-12
1010f71c:	df000215 	stw	fp,8(sp)
1010f720:	df000204 	addi	fp,sp,8
1010f724:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1010f728:	d0a01004 	addi	r2,gp,-32704
1010f72c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f730:	e0bfff17 	ldw	r2,-4(fp)
1010f734:	10800117 	ldw	r2,4(r2)
1010f738:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1010f73c:	003da07a 	break	1

  error = r3;
1010f740:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1010f744:	e0bffe17 	ldw	r2,-8(fp)
1010f748:	0085c83a 	sub	r2,zero,r2
}
1010f74c:	e037883a 	mov	sp,fp
1010f750:	df000017 	ldw	fp,0(sp)
1010f754:	dec00104 	addi	sp,sp,4
1010f758:	f800283a 	ret

1010f75c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1010f75c:	defffa04 	addi	sp,sp,-24
1010f760:	df000515 	stw	fp,20(sp)
1010f764:	df000504 	addi	fp,sp,20
1010f768:	e13ffd15 	stw	r4,-12(fp)
1010f76c:	e17ffe15 	stw	r5,-8(fp)
1010f770:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1010f774:	d0a01304 	addi	r2,gp,-32692
1010f778:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f77c:	e0bffd17 	ldw	r2,-12(fp)
1010f780:	10800117 	ldw	r2,4(r2)
1010f784:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010f788:	e0bffe17 	ldw	r2,-8(fp)
1010f78c:	100b883a 	mov	r5,r2
  r6 = len;
1010f790:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f794:	003da07a 	break	1

  rc = r2;
1010f798:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f79c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f7a0:	e0bffc17 	ldw	r2,-16(fp)
1010f7a4:	10000326 	beq	r2,zero,1010f7b4 <alt_hostfs_read+0x58>
1010f7a8:	e0bffc17 	ldw	r2,-16(fp)
1010f7ac:	0085c83a 	sub	r2,zero,r2
1010f7b0:	00000106 	br	1010f7b8 <alt_hostfs_read+0x5c>
1010f7b4:	e0bffb17 	ldw	r2,-20(fp)
}
1010f7b8:	e037883a 	mov	sp,fp
1010f7bc:	df000017 	ldw	fp,0(sp)
1010f7c0:	dec00104 	addi	sp,sp,4
1010f7c4:	f800283a 	ret

1010f7c8 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1010f7c8:	defffa04 	addi	sp,sp,-24
1010f7cc:	df000515 	stw	fp,20(sp)
1010f7d0:	df000504 	addi	fp,sp,20
1010f7d4:	e13ffd15 	stw	r4,-12(fp)
1010f7d8:	e17ffe15 	stw	r5,-8(fp)
1010f7dc:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010f7e0:	d0a01604 	addi	r2,gp,-32680
1010f7e4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f7e8:	e0bffd17 	ldw	r2,-12(fp)
1010f7ec:	10800117 	ldw	r2,4(r2)
1010f7f0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010f7f4:	e0bffe17 	ldw	r2,-8(fp)
1010f7f8:	100b883a 	mov	r5,r2
  r6 = len;
1010f7fc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f800:	003da07a 	break	1

  rc = r2;
1010f804:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f808:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f80c:	e0bffc17 	ldw	r2,-16(fp)
1010f810:	10000326 	beq	r2,zero,1010f820 <alt_hostfs_write+0x58>
1010f814:	e0bffc17 	ldw	r2,-16(fp)
1010f818:	0085c83a 	sub	r2,zero,r2
1010f81c:	00000106 	br	1010f824 <alt_hostfs_write+0x5c>
1010f820:	e0bffb17 	ldw	r2,-20(fp)
}
1010f824:	e037883a 	mov	sp,fp
1010f828:	df000017 	ldw	fp,0(sp)
1010f82c:	dec00104 	addi	sp,sp,4
1010f830:	f800283a 	ret

1010f834 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1010f834:	defffa04 	addi	sp,sp,-24
1010f838:	df000515 	stw	fp,20(sp)
1010f83c:	df000504 	addi	fp,sp,20
1010f840:	e13ffd15 	stw	r4,-12(fp)
1010f844:	e17ffe15 	stw	r5,-8(fp)
1010f848:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010f84c:	d0a01904 	addi	r2,gp,-32668
1010f850:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f854:	e0bffd17 	ldw	r2,-12(fp)
1010f858:	10800117 	ldw	r2,4(r2)
1010f85c:	1009883a 	mov	r4,r2
  r5 = ptr;
1010f860:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1010f864:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f868:	003da07a 	break	1

  rc = r2;
1010f86c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f870:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f874:	e0bffc17 	ldw	r2,-16(fp)
1010f878:	10000326 	beq	r2,zero,1010f888 <alt_hostfs_seek+0x54>
1010f87c:	e0bffc17 	ldw	r2,-16(fp)
1010f880:	0085c83a 	sub	r2,zero,r2
1010f884:	00000106 	br	1010f88c <alt_hostfs_seek+0x58>
1010f888:	e0bffb17 	ldw	r2,-20(fp)
}
1010f88c:	e037883a 	mov	sp,fp
1010f890:	df000017 	ldw	fp,0(sp)
1010f894:	dec00104 	addi	sp,sp,4
1010f898:	f800283a 	ret

1010f89c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010f89c:	deffe904 	addi	sp,sp,-92
1010f8a0:	df001615 	stw	fp,88(sp)
1010f8a4:	df001604 	addi	fp,sp,88
1010f8a8:	e13ffe15 	stw	r4,-8(fp)
1010f8ac:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1010f8b0:	d0a01c04 	addi	r2,gp,-32656
1010f8b4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f8b8:	e0bffe17 	ldw	r2,-8(fp)
1010f8bc:	10800117 	ldw	r2,4(r2)
1010f8c0:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1010f8c4:	e0bfee04 	addi	r2,fp,-72
1010f8c8:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010f8cc:	003da07a 	break	1

  rc = r2;
1010f8d0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1010f8d4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1010f8d8:	e0bfec17 	ldw	r2,-80(fp)
1010f8dc:	1000621e 	bne	r2,zero,1010fa68 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1010f8e0:	e0bfee04 	addi	r2,fp,-72
1010f8e4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1010f8e8:	e0bfea17 	ldw	r2,-88(fp)
1010f8ec:	10801004 	addi	r2,r2,64
1010f8f0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010f8f4:	00001606 	br	1010f950 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f8f8:	e0bfea17 	ldw	r2,-88(fp)
1010f8fc:	10800017 	ldw	r2,0(r2)
1010f900:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1010f904:	e0bfea17 	ldw	r2,-88(fp)
1010f908:	10800017 	ldw	r2,0(r2)
1010f90c:	10803fec 	andhi	r2,r2,255
1010f910:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f914:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010f918:	e0bfea17 	ldw	r2,-88(fp)
1010f91c:	10800017 	ldw	r2,0(r2)
1010f920:	10bfc00c 	andi	r2,r2,65280
1010f924:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1010f928:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010f92c:	e0bfea17 	ldw	r2,-88(fp)
1010f930:	10800017 	ldw	r2,0(r2)
1010f934:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010f938:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f93c:	e0bfea17 	ldw	r2,-88(fp)
1010f940:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1010f944:	e0bfea17 	ldw	r2,-88(fp)
1010f948:	10800104 	addi	r2,r2,4
1010f94c:	e0bfea15 	stw	r2,-88(fp)
1010f950:	e0ffea17 	ldw	r3,-88(fp)
1010f954:	e0bfed17 	ldw	r2,-76(fp)
1010f958:	18bfe736 	bltu	r3,r2,1010f8f8 <__alt_data_end+0xfffef8f8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010f95c:	e0bfff17 	ldw	r2,-4(fp)
1010f960:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1010f964:	e0bfea17 	ldw	r2,-88(fp)
1010f968:	10800f04 	addi	r2,r2,60
1010f96c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010f970:	00000506 	br	1010f988 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1010f974:	e0bfea17 	ldw	r2,-88(fp)
1010f978:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010f97c:	e0bfea17 	ldw	r2,-88(fp)
1010f980:	10800104 	addi	r2,r2,4
1010f984:	e0bfea15 	stw	r2,-88(fp)
1010f988:	e0ffea17 	ldw	r3,-88(fp)
1010f98c:	e0bfed17 	ldw	r2,-76(fp)
1010f990:	18bff836 	bltu	r3,r2,1010f974 <__alt_data_end+0xfffef974>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1010f994:	e0bfee17 	ldw	r2,-72(fp)
1010f998:	1007883a 	mov	r3,r2
1010f99c:	e0bfff17 	ldw	r2,-4(fp)
1010f9a0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1010f9a4:	e0bfef17 	ldw	r2,-68(fp)
1010f9a8:	1007883a 	mov	r3,r2
1010f9ac:	e0bfff17 	ldw	r2,-4(fp)
1010f9b0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1010f9b4:	e0fff017 	ldw	r3,-64(fp)
1010f9b8:	e0bfff17 	ldw	r2,-4(fp)
1010f9bc:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
1010f9c0:	e0bff117 	ldw	r2,-60(fp)
1010f9c4:	1007883a 	mov	r3,r2
1010f9c8:	e0bfff17 	ldw	r2,-4(fp)
1010f9cc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1010f9d0:	e0bff217 	ldw	r2,-56(fp)
1010f9d4:	1007883a 	mov	r3,r2
1010f9d8:	e0bfff17 	ldw	r2,-4(fp)
1010f9dc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1010f9e0:	e0bff317 	ldw	r2,-52(fp)
1010f9e4:	1007883a 	mov	r3,r2
1010f9e8:	e0bfff17 	ldw	r2,-4(fp)
1010f9ec:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1010f9f0:	e0bff417 	ldw	r2,-48(fp)
1010f9f4:	1007883a 	mov	r3,r2
1010f9f8:	e0bfff17 	ldw	r2,-4(fp)
1010f9fc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010fa00:	e0bff617 	ldw	r2,-40(fp)
1010fa04:	1007883a 	mov	r3,r2
1010fa08:	e0bfff17 	ldw	r2,-4(fp)
1010fa0c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010fa10:	e0bffb17 	ldw	r2,-20(fp)
1010fa14:	1007883a 	mov	r3,r2
1010fa18:	e0bfff17 	ldw	r2,-4(fp)
1010fa1c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010fa20:	e0bffc17 	ldw	r2,-16(fp)
1010fa24:	1007883a 	mov	r3,r2
1010fa28:	e0bfff17 	ldw	r2,-4(fp)
1010fa2c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010fa30:	e0bffd17 	ldw	r2,-12(fp)
1010fa34:	1007883a 	mov	r3,r2
1010fa38:	e0bfff17 	ldw	r2,-4(fp)
1010fa3c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010fa40:	e0bff817 	ldw	r2,-32(fp)
1010fa44:	1007883a 	mov	r3,r2
1010fa48:	e0bfff17 	ldw	r2,-4(fp)
1010fa4c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010fa50:	e0bffa17 	ldw	r2,-24(fp)
1010fa54:	1007883a 	mov	r3,r2
1010fa58:	e0bfff17 	ldw	r2,-4(fp)
1010fa5c:	10c00c15 	stw	r3,48(r2)

    return rc;
1010fa60:	e0bfeb17 	ldw	r2,-84(fp)
1010fa64:	00000206 	br	1010fa70 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1010fa68:	e0bfec17 	ldw	r2,-80(fp)
1010fa6c:	0085c83a 	sub	r2,zero,r2
}
1010fa70:	e037883a 	mov	sp,fp
1010fa74:	df000017 	ldw	fp,0(sp)
1010fa78:	dec00104 	addi	sp,sp,4
1010fa7c:	f800283a 	ret

1010fa80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010fa80:	defff504 	addi	sp,sp,-44
1010fa84:	df000a15 	stw	fp,40(sp)
1010fa88:	df000a04 	addi	fp,sp,40
1010fa8c:	e13ffc15 	stw	r4,-16(fp)
1010fa90:	e17ffd15 	stw	r5,-12(fp)
1010fa94:	e1bffe15 	stw	r6,-8(fp)
1010fa98:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010fa9c:	e03ff615 	stw	zero,-40(fp)
1010faa0:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
1010faa4:	10003c26 	beq	r2,zero,1010fb98 <alt_alarm_start+0x118>
  {
    if (alarm)
1010faa8:	e0bffc17 	ldw	r2,-16(fp)
1010faac:	10003826 	beq	r2,zero,1010fb90 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010fab0:	e0bffc17 	ldw	r2,-16(fp)
1010fab4:	e0fffe17 	ldw	r3,-8(fp)
1010fab8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010fabc:	e0bffc17 	ldw	r2,-16(fp)
1010fac0:	e0ffff17 	ldw	r3,-4(fp)
1010fac4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fac8:	0005303a 	rdctl	r2,status
1010facc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fad0:	e0fff917 	ldw	r3,-28(fp)
1010fad4:	00bfff84 	movi	r2,-2
1010fad8:	1884703a 	and	r2,r3,r2
1010fadc:	1001703a 	wrctl	status,r2
  
  return context;
1010fae0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010fae4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010fae8:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
1010faec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010faf0:	e0fffd17 	ldw	r3,-12(fp)
1010faf4:	e0bff617 	ldw	r2,-40(fp)
1010faf8:	1885883a 	add	r2,r3,r2
1010fafc:	10c00044 	addi	r3,r2,1
1010fb00:	e0bffc17 	ldw	r2,-16(fp)
1010fb04:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010fb08:	e0bffc17 	ldw	r2,-16(fp)
1010fb0c:	10c00217 	ldw	r3,8(r2)
1010fb10:	e0bff617 	ldw	r2,-40(fp)
1010fb14:	1880042e 	bgeu	r3,r2,1010fb28 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1010fb18:	e0bffc17 	ldw	r2,-16(fp)
1010fb1c:	00c00044 	movi	r3,1
1010fb20:	10c00405 	stb	r3,16(r2)
1010fb24:	00000206 	br	1010fb30 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1010fb28:	e0bffc17 	ldw	r2,-16(fp)
1010fb2c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010fb30:	e0bffc17 	ldw	r2,-16(fp)
1010fb34:	d0e02004 	addi	r3,gp,-32640
1010fb38:	e0fffa15 	stw	r3,-24(fp)
1010fb3c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010fb40:	e0bffb17 	ldw	r2,-20(fp)
1010fb44:	e0fffa17 	ldw	r3,-24(fp)
1010fb48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010fb4c:	e0bffa17 	ldw	r2,-24(fp)
1010fb50:	10c00017 	ldw	r3,0(r2)
1010fb54:	e0bffb17 	ldw	r2,-20(fp)
1010fb58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010fb5c:	e0bffa17 	ldw	r2,-24(fp)
1010fb60:	10800017 	ldw	r2,0(r2)
1010fb64:	e0fffb17 	ldw	r3,-20(fp)
1010fb68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010fb6c:	e0bffa17 	ldw	r2,-24(fp)
1010fb70:	e0fffb17 	ldw	r3,-20(fp)
1010fb74:	10c00015 	stw	r3,0(r2)
1010fb78:	e0bff817 	ldw	r2,-32(fp)
1010fb7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fb80:	e0bff717 	ldw	r2,-36(fp)
1010fb84:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1010fb88:	0005883a 	mov	r2,zero
1010fb8c:	00000306 	br	1010fb9c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1010fb90:	00bffa84 	movi	r2,-22
1010fb94:	00000106 	br	1010fb9c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1010fb98:	00bfde84 	movi	r2,-134
  }
}
1010fb9c:	e037883a 	mov	sp,fp
1010fba0:	df000017 	ldw	fp,0(sp)
1010fba4:	dec00104 	addi	sp,sp,4
1010fba8:	f800283a 	ret

1010fbac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1010fbac:	defffe04 	addi	sp,sp,-8
1010fbb0:	df000115 	stw	fp,4(sp)
1010fbb4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010fbb8:	e03fff15 	stw	zero,-4(fp)
1010fbbc:	00000506 	br	1010fbd4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
1010fbc0:	e0bfff17 	ldw	r2,-4(fp)
1010fbc4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
1010fbc8:	e0bfff17 	ldw	r2,-4(fp)
1010fbcc:	10800804 	addi	r2,r2,32
1010fbd0:	e0bfff15 	stw	r2,-4(fp)
1010fbd4:	e0bfff17 	ldw	r2,-4(fp)
1010fbd8:	10820030 	cmpltui	r2,r2,2048
1010fbdc:	103ff81e 	bne	r2,zero,1010fbc0 <__alt_data_end+0xfffefbc0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1010fbe0:	0001883a 	nop
1010fbe4:	e037883a 	mov	sp,fp
1010fbe8:	df000017 	ldw	fp,0(sp)
1010fbec:	dec00104 	addi	sp,sp,4
1010fbf0:	f800283a 	ret

1010fbf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fbf4:	defffe04 	addi	sp,sp,-8
1010fbf8:	dfc00115 	stw	ra,4(sp)
1010fbfc:	df000015 	stw	fp,0(sp)
1010fc00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fc04:	d0a00b17 	ldw	r2,-32724(gp)
1010fc08:	10000326 	beq	r2,zero,1010fc18 <alt_get_errno+0x24>
1010fc0c:	d0a00b17 	ldw	r2,-32724(gp)
1010fc10:	103ee83a 	callr	r2
1010fc14:	00000106 	br	1010fc1c <alt_get_errno+0x28>
1010fc18:	d0a6f904 	addi	r2,gp,-25628
}
1010fc1c:	e037883a 	mov	sp,fp
1010fc20:	dfc00117 	ldw	ra,4(sp)
1010fc24:	df000017 	ldw	fp,0(sp)
1010fc28:	dec00204 	addi	sp,sp,8
1010fc2c:	f800283a 	ret

1010fc30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010fc30:	defffa04 	addi	sp,sp,-24
1010fc34:	dfc00515 	stw	ra,20(sp)
1010fc38:	df000415 	stw	fp,16(sp)
1010fc3c:	df000404 	addi	fp,sp,16
1010fc40:	e13ffe15 	stw	r4,-8(fp)
1010fc44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1010fc48:	e0bffe17 	ldw	r2,-8(fp)
1010fc4c:	10000326 	beq	r2,zero,1010fc5c <alt_dev_llist_insert+0x2c>
1010fc50:	e0bffe17 	ldw	r2,-8(fp)
1010fc54:	10800217 	ldw	r2,8(r2)
1010fc58:	1000061e 	bne	r2,zero,1010fc74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1010fc5c:	010fbf40 	call	1010fbf4 <alt_get_errno>
1010fc60:	1007883a 	mov	r3,r2
1010fc64:	00800584 	movi	r2,22
1010fc68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1010fc6c:	00bffa84 	movi	r2,-22
1010fc70:	00001306 	br	1010fcc0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1010fc74:	e0bffe17 	ldw	r2,-8(fp)
1010fc78:	e0ffff17 	ldw	r3,-4(fp)
1010fc7c:	e0fffc15 	stw	r3,-16(fp)
1010fc80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010fc84:	e0bffd17 	ldw	r2,-12(fp)
1010fc88:	e0fffc17 	ldw	r3,-16(fp)
1010fc8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010fc90:	e0bffc17 	ldw	r2,-16(fp)
1010fc94:	10c00017 	ldw	r3,0(r2)
1010fc98:	e0bffd17 	ldw	r2,-12(fp)
1010fc9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010fca0:	e0bffc17 	ldw	r2,-16(fp)
1010fca4:	10800017 	ldw	r2,0(r2)
1010fca8:	e0fffd17 	ldw	r3,-12(fp)
1010fcac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010fcb0:	e0bffc17 	ldw	r2,-16(fp)
1010fcb4:	e0fffd17 	ldw	r3,-12(fp)
1010fcb8:	10c00015 	stw	r3,0(r2)

  return 0;  
1010fcbc:	0005883a 	mov	r2,zero
}
1010fcc0:	e037883a 	mov	sp,fp
1010fcc4:	dfc00117 	ldw	ra,4(sp)
1010fcc8:	df000017 	ldw	fp,0(sp)
1010fccc:	dec00204 	addi	sp,sp,8
1010fcd0:	f800283a 	ret

1010fcd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010fcd4:	defffd04 	addi	sp,sp,-12
1010fcd8:	dfc00215 	stw	ra,8(sp)
1010fcdc:	df000115 	stw	fp,4(sp)
1010fce0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010fce4:	00840474 	movhi	r2,4113
1010fce8:	1082ba04 	addi	r2,r2,2792
1010fcec:	e0bfff15 	stw	r2,-4(fp)
1010fcf0:	00000606 	br	1010fd0c <_do_ctors+0x38>
        (*ctor) (); 
1010fcf4:	e0bfff17 	ldw	r2,-4(fp)
1010fcf8:	10800017 	ldw	r2,0(r2)
1010fcfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010fd00:	e0bfff17 	ldw	r2,-4(fp)
1010fd04:	10bfff04 	addi	r2,r2,-4
1010fd08:	e0bfff15 	stw	r2,-4(fp)
1010fd0c:	e0ffff17 	ldw	r3,-4(fp)
1010fd10:	00840474 	movhi	r2,4113
1010fd14:	1082bb04 	addi	r2,r2,2796
1010fd18:	18bff62e 	bgeu	r3,r2,1010fcf4 <__alt_data_end+0xfffefcf4>
        (*ctor) (); 
}
1010fd1c:	0001883a 	nop
1010fd20:	e037883a 	mov	sp,fp
1010fd24:	dfc00117 	ldw	ra,4(sp)
1010fd28:	df000017 	ldw	fp,0(sp)
1010fd2c:	dec00204 	addi	sp,sp,8
1010fd30:	f800283a 	ret

1010fd34 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010fd34:	defffd04 	addi	sp,sp,-12
1010fd38:	dfc00215 	stw	ra,8(sp)
1010fd3c:	df000115 	stw	fp,4(sp)
1010fd40:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010fd44:	00840474 	movhi	r2,4113
1010fd48:	1082ba04 	addi	r2,r2,2792
1010fd4c:	e0bfff15 	stw	r2,-4(fp)
1010fd50:	00000606 	br	1010fd6c <_do_dtors+0x38>
        (*dtor) (); 
1010fd54:	e0bfff17 	ldw	r2,-4(fp)
1010fd58:	10800017 	ldw	r2,0(r2)
1010fd5c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010fd60:	e0bfff17 	ldw	r2,-4(fp)
1010fd64:	10bfff04 	addi	r2,r2,-4
1010fd68:	e0bfff15 	stw	r2,-4(fp)
1010fd6c:	e0ffff17 	ldw	r3,-4(fp)
1010fd70:	00840474 	movhi	r2,4113
1010fd74:	1082bb04 	addi	r2,r2,2796
1010fd78:	18bff62e 	bgeu	r3,r2,1010fd54 <__alt_data_end+0xfffefd54>
        (*dtor) (); 
}
1010fd7c:	0001883a 	nop
1010fd80:	e037883a 	mov	sp,fp
1010fd84:	dfc00117 	ldw	ra,4(sp)
1010fd88:	df000017 	ldw	fp,0(sp)
1010fd8c:	dec00204 	addi	sp,sp,8
1010fd90:	f800283a 	ret

1010fd94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1010fd94:	defffa04 	addi	sp,sp,-24
1010fd98:	dfc00515 	stw	ra,20(sp)
1010fd9c:	df000415 	stw	fp,16(sp)
1010fda0:	df000404 	addi	fp,sp,16
1010fda4:	e13ffe15 	stw	r4,-8(fp)
1010fda8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1010fdac:	e0bfff17 	ldw	r2,-4(fp)
1010fdb0:	10800017 	ldw	r2,0(r2)
1010fdb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1010fdb8:	e13ffe17 	ldw	r4,-8(fp)
1010fdbc:	01083040 	call	10108304 <strlen>
1010fdc0:	10800044 	addi	r2,r2,1
1010fdc4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010fdc8:	00000d06 	br	1010fe00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1010fdcc:	e0bffc17 	ldw	r2,-16(fp)
1010fdd0:	10800217 	ldw	r2,8(r2)
1010fdd4:	e0fffd17 	ldw	r3,-12(fp)
1010fdd8:	180d883a 	mov	r6,r3
1010fddc:	e17ffe17 	ldw	r5,-8(fp)
1010fde0:	1009883a 	mov	r4,r2
1010fde4:	01107a40 	call	101107a4 <memcmp>
1010fde8:	1000021e 	bne	r2,zero,1010fdf4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1010fdec:	e0bffc17 	ldw	r2,-16(fp)
1010fdf0:	00000706 	br	1010fe10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1010fdf4:	e0bffc17 	ldw	r2,-16(fp)
1010fdf8:	10800017 	ldw	r2,0(r2)
1010fdfc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010fe00:	e0fffc17 	ldw	r3,-16(fp)
1010fe04:	e0bfff17 	ldw	r2,-4(fp)
1010fe08:	18bff01e 	bne	r3,r2,1010fdcc <__alt_data_end+0xfffefdcc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1010fe0c:	0005883a 	mov	r2,zero
}
1010fe10:	e037883a 	mov	sp,fp
1010fe14:	dfc00117 	ldw	ra,4(sp)
1010fe18:	df000017 	ldw	fp,0(sp)
1010fe1c:	dec00204 	addi	sp,sp,8
1010fe20:	f800283a 	ret

1010fe24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1010fe24:	defffb04 	addi	sp,sp,-20
1010fe28:	dfc00415 	stw	ra,16(sp)
1010fe2c:	df000315 	stw	fp,12(sp)
1010fe30:	df000304 	addi	fp,sp,12
1010fe34:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1010fe38:	d0a00617 	ldw	r2,-32744(gp)
1010fe3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010fe40:	00003106 	br	1010ff08 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1010fe44:	e0bffd17 	ldw	r2,-12(fp)
1010fe48:	10800217 	ldw	r2,8(r2)
1010fe4c:	1009883a 	mov	r4,r2
1010fe50:	01083040 	call	10108304 <strlen>
1010fe54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1010fe58:	e0bffd17 	ldw	r2,-12(fp)
1010fe5c:	10c00217 	ldw	r3,8(r2)
1010fe60:	e0bffe17 	ldw	r2,-8(fp)
1010fe64:	10bfffc4 	addi	r2,r2,-1
1010fe68:	1885883a 	add	r2,r3,r2
1010fe6c:	10800003 	ldbu	r2,0(r2)
1010fe70:	10803fcc 	andi	r2,r2,255
1010fe74:	1080201c 	xori	r2,r2,128
1010fe78:	10bfe004 	addi	r2,r2,-128
1010fe7c:	10800bd8 	cmpnei	r2,r2,47
1010fe80:	1000031e 	bne	r2,zero,1010fe90 <alt_find_file+0x6c>
    {
      len -= 1;
1010fe84:	e0bffe17 	ldw	r2,-8(fp)
1010fe88:	10bfffc4 	addi	r2,r2,-1
1010fe8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1010fe90:	e0bffe17 	ldw	r2,-8(fp)
1010fe94:	e0ffff17 	ldw	r3,-4(fp)
1010fe98:	1885883a 	add	r2,r3,r2
1010fe9c:	10800003 	ldbu	r2,0(r2)
1010fea0:	10803fcc 	andi	r2,r2,255
1010fea4:	1080201c 	xori	r2,r2,128
1010fea8:	10bfe004 	addi	r2,r2,-128
1010feac:	10800be0 	cmpeqi	r2,r2,47
1010feb0:	1000081e 	bne	r2,zero,1010fed4 <alt_find_file+0xb0>
1010feb4:	e0bffe17 	ldw	r2,-8(fp)
1010feb8:	e0ffff17 	ldw	r3,-4(fp)
1010febc:	1885883a 	add	r2,r3,r2
1010fec0:	10800003 	ldbu	r2,0(r2)
1010fec4:	10803fcc 	andi	r2,r2,255
1010fec8:	1080201c 	xori	r2,r2,128
1010fecc:	10bfe004 	addi	r2,r2,-128
1010fed0:	10000a1e 	bne	r2,zero,1010fefc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1010fed4:	e0bffd17 	ldw	r2,-12(fp)
1010fed8:	10800217 	ldw	r2,8(r2)
1010fedc:	e0fffe17 	ldw	r3,-8(fp)
1010fee0:	180d883a 	mov	r6,r3
1010fee4:	e17fff17 	ldw	r5,-4(fp)
1010fee8:	1009883a 	mov	r4,r2
1010feec:	01107a40 	call	101107a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1010fef0:	1000021e 	bne	r2,zero,1010fefc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1010fef4:	e0bffd17 	ldw	r2,-12(fp)
1010fef8:	00000706 	br	1010ff18 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1010fefc:	e0bffd17 	ldw	r2,-12(fp)
1010ff00:	10800017 	ldw	r2,0(r2)
1010ff04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010ff08:	e0fffd17 	ldw	r3,-12(fp)
1010ff0c:	d0a00604 	addi	r2,gp,-32744
1010ff10:	18bfcc1e 	bne	r3,r2,1010fe44 <__alt_data_end+0xfffefe44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1010ff14:	0005883a 	mov	r2,zero
}
1010ff18:	e037883a 	mov	sp,fp
1010ff1c:	dfc00117 	ldw	ra,4(sp)
1010ff20:	df000017 	ldw	fp,0(sp)
1010ff24:	dec00204 	addi	sp,sp,8
1010ff28:	f800283a 	ret

1010ff2c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1010ff2c:	defffc04 	addi	sp,sp,-16
1010ff30:	df000315 	stw	fp,12(sp)
1010ff34:	df000304 	addi	fp,sp,12
1010ff38:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1010ff3c:	e0bfff17 	ldw	r2,-4(fp)
1010ff40:	10800217 	ldw	r2,8(r2)
1010ff44:	1000021e 	bne	r2,zero,1010ff50 <alt_fs_reg+0x24>
  {
    return -ENODEV;
1010ff48:	00bffb44 	movi	r2,-19
1010ff4c:	00001306 	br	1010ff9c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
1010ff50:	e0bfff17 	ldw	r2,-4(fp)
1010ff54:	d0e00604 	addi	r3,gp,-32744
1010ff58:	e0fffd15 	stw	r3,-12(fp)
1010ff5c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010ff60:	e0bffe17 	ldw	r2,-8(fp)
1010ff64:	e0fffd17 	ldw	r3,-12(fp)
1010ff68:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010ff6c:	e0bffd17 	ldw	r2,-12(fp)
1010ff70:	10c00017 	ldw	r3,0(r2)
1010ff74:	e0bffe17 	ldw	r2,-8(fp)
1010ff78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010ff7c:	e0bffd17 	ldw	r2,-12(fp)
1010ff80:	10800017 	ldw	r2,0(r2)
1010ff84:	e0fffe17 	ldw	r3,-8(fp)
1010ff88:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010ff8c:	e0bffd17 	ldw	r2,-12(fp)
1010ff90:	e0fffe17 	ldw	r3,-8(fp)
1010ff94:	10c00015 	stw	r3,0(r2)

  return 0;
1010ff98:	0005883a 	mov	r2,zero
} 
1010ff9c:	e037883a 	mov	sp,fp
1010ffa0:	df000017 	ldw	fp,0(sp)
1010ffa4:	dec00104 	addi	sp,sp,4
1010ffa8:	f800283a 	ret

1010ffac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1010ffac:	defffc04 	addi	sp,sp,-16
1010ffb0:	df000315 	stw	fp,12(sp)
1010ffb4:	df000304 	addi	fp,sp,12
1010ffb8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
1010ffbc:	00bffa04 	movi	r2,-24
1010ffc0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1010ffc4:	e03ffd15 	stw	zero,-12(fp)
1010ffc8:	00001906 	br	10110030 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
1010ffcc:	00840474 	movhi	r2,4113
1010ffd0:	1085cc04 	addi	r2,r2,5936
1010ffd4:	e0fffd17 	ldw	r3,-12(fp)
1010ffd8:	18c00324 	muli	r3,r3,12
1010ffdc:	10c5883a 	add	r2,r2,r3
1010ffe0:	10800017 	ldw	r2,0(r2)
1010ffe4:	10000f1e 	bne	r2,zero,10110024 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
1010ffe8:	00840474 	movhi	r2,4113
1010ffec:	1085cc04 	addi	r2,r2,5936
1010fff0:	e0fffd17 	ldw	r3,-12(fp)
1010fff4:	18c00324 	muli	r3,r3,12
1010fff8:	10c5883a 	add	r2,r2,r3
1010fffc:	e0ffff17 	ldw	r3,-4(fp)
10110000:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110004:	d0e00a17 	ldw	r3,-32728(gp)
10110008:	e0bffd17 	ldw	r2,-12(fp)
1011000c:	1880020e 	bge	r3,r2,10110018 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10110010:	e0bffd17 	ldw	r2,-12(fp)
10110014:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10110018:	e0bffd17 	ldw	r2,-12(fp)
1011001c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110020:	00000606 	br	1011003c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110024:	e0bffd17 	ldw	r2,-12(fp)
10110028:	10800044 	addi	r2,r2,1
1011002c:	e0bffd15 	stw	r2,-12(fp)
10110030:	e0bffd17 	ldw	r2,-12(fp)
10110034:	10800810 	cmplti	r2,r2,32
10110038:	103fe41e 	bne	r2,zero,1010ffcc <__alt_data_end+0xfffeffcc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1011003c:	e0bffe17 	ldw	r2,-8(fp)
}
10110040:	e037883a 	mov	sp,fp
10110044:	df000017 	ldw	fp,0(sp)
10110048:	dec00104 	addi	sp,sp,4
1011004c:	f800283a 	ret

10110050 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10110050:	defffe04 	addi	sp,sp,-8
10110054:	dfc00115 	stw	ra,4(sp)
10110058:	df000015 	stw	fp,0(sp)
1011005c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10110060:	01440004 	movi	r5,4096
10110064:	0009883a 	mov	r4,zero
10110068:	011062c0 	call	1011062c <alt_icache_flush>
#endif
}
1011006c:	0001883a 	nop
10110070:	e037883a 	mov	sp,fp
10110074:	dfc00117 	ldw	ra,4(sp)
10110078:	df000017 	ldw	fp,0(sp)
1011007c:	dec00204 	addi	sp,sp,8
10110080:	f800283a 	ret

10110084 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110084:	defff904 	addi	sp,sp,-28
10110088:	dfc00615 	stw	ra,24(sp)
1011008c:	df000515 	stw	fp,20(sp)
10110090:	df000504 	addi	fp,sp,20
10110094:	e13ffc15 	stw	r4,-16(fp)
10110098:	e17ffd15 	stw	r5,-12(fp)
1011009c:	e1bffe15 	stw	r6,-8(fp)
101100a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
101100a4:	e0800217 	ldw	r2,8(fp)
101100a8:	d8800015 	stw	r2,0(sp)
101100ac:	e1ffff17 	ldw	r7,-4(fp)
101100b0:	e1bffe17 	ldw	r6,-8(fp)
101100b4:	e17ffd17 	ldw	r5,-12(fp)
101100b8:	e13ffc17 	ldw	r4,-16(fp)
101100bc:	01102340 	call	10110234 <alt_iic_isr_register>
}  
101100c0:	e037883a 	mov	sp,fp
101100c4:	dfc00117 	ldw	ra,4(sp)
101100c8:	df000017 	ldw	fp,0(sp)
101100cc:	dec00204 	addi	sp,sp,8
101100d0:	f800283a 	ret

101100d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101100d4:	defff904 	addi	sp,sp,-28
101100d8:	df000615 	stw	fp,24(sp)
101100dc:	df000604 	addi	fp,sp,24
101100e0:	e13ffe15 	stw	r4,-8(fp)
101100e4:	e17fff15 	stw	r5,-4(fp)
101100e8:	e0bfff17 	ldw	r2,-4(fp)
101100ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101100f0:	0005303a 	rdctl	r2,status
101100f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101100f8:	e0fffb17 	ldw	r3,-20(fp)
101100fc:	00bfff84 	movi	r2,-2
10110100:	1884703a 	and	r2,r3,r2
10110104:	1001703a 	wrctl	status,r2
  
  return context;
10110108:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1011010c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10110110:	00c00044 	movi	r3,1
10110114:	e0bffa17 	ldw	r2,-24(fp)
10110118:	1884983a 	sll	r2,r3,r2
1011011c:	1007883a 	mov	r3,r2
10110120:	d0a70317 	ldw	r2,-25588(gp)
10110124:	1884b03a 	or	r2,r3,r2
10110128:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1011012c:	d0a70317 	ldw	r2,-25588(gp)
10110130:	100170fa 	wrctl	ienable,r2
10110134:	e0bffc17 	ldw	r2,-16(fp)
10110138:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1011013c:	e0bffd17 	ldw	r2,-12(fp)
10110140:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110144:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10110148:	0001883a 	nop
}
1011014c:	e037883a 	mov	sp,fp
10110150:	df000017 	ldw	fp,0(sp)
10110154:	dec00104 	addi	sp,sp,4
10110158:	f800283a 	ret

1011015c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1011015c:	defff904 	addi	sp,sp,-28
10110160:	df000615 	stw	fp,24(sp)
10110164:	df000604 	addi	fp,sp,24
10110168:	e13ffe15 	stw	r4,-8(fp)
1011016c:	e17fff15 	stw	r5,-4(fp)
10110170:	e0bfff17 	ldw	r2,-4(fp)
10110174:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110178:	0005303a 	rdctl	r2,status
1011017c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110180:	e0fffb17 	ldw	r3,-20(fp)
10110184:	00bfff84 	movi	r2,-2
10110188:	1884703a 	and	r2,r3,r2
1011018c:	1001703a 	wrctl	status,r2
  
  return context;
10110190:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110194:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10110198:	00c00044 	movi	r3,1
1011019c:	e0bffa17 	ldw	r2,-24(fp)
101101a0:	1884983a 	sll	r2,r3,r2
101101a4:	0084303a 	nor	r2,zero,r2
101101a8:	1007883a 	mov	r3,r2
101101ac:	d0a70317 	ldw	r2,-25588(gp)
101101b0:	1884703a 	and	r2,r3,r2
101101b4:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101101b8:	d0a70317 	ldw	r2,-25588(gp)
101101bc:	100170fa 	wrctl	ienable,r2
101101c0:	e0bffc17 	ldw	r2,-16(fp)
101101c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101101c8:	e0bffd17 	ldw	r2,-12(fp)
101101cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101101d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101101d4:	0001883a 	nop
}
101101d8:	e037883a 	mov	sp,fp
101101dc:	df000017 	ldw	fp,0(sp)
101101e0:	dec00104 	addi	sp,sp,4
101101e4:	f800283a 	ret

101101e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101101e8:	defffc04 	addi	sp,sp,-16
101101ec:	df000315 	stw	fp,12(sp)
101101f0:	df000304 	addi	fp,sp,12
101101f4:	e13ffe15 	stw	r4,-8(fp)
101101f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101101fc:	000530fa 	rdctl	r2,ienable
10110200:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10110204:	00c00044 	movi	r3,1
10110208:	e0bfff17 	ldw	r2,-4(fp)
1011020c:	1884983a 	sll	r2,r3,r2
10110210:	1007883a 	mov	r3,r2
10110214:	e0bffd17 	ldw	r2,-12(fp)
10110218:	1884703a 	and	r2,r3,r2
1011021c:	1004c03a 	cmpne	r2,r2,zero
10110220:	10803fcc 	andi	r2,r2,255
}
10110224:	e037883a 	mov	sp,fp
10110228:	df000017 	ldw	fp,0(sp)
1011022c:	dec00104 	addi	sp,sp,4
10110230:	f800283a 	ret

10110234 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110234:	defff504 	addi	sp,sp,-44
10110238:	dfc00a15 	stw	ra,40(sp)
1011023c:	df000915 	stw	fp,36(sp)
10110240:	df000904 	addi	fp,sp,36
10110244:	e13ffc15 	stw	r4,-16(fp)
10110248:	e17ffd15 	stw	r5,-12(fp)
1011024c:	e1bffe15 	stw	r6,-8(fp)
10110250:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110254:	00bffa84 	movi	r2,-22
10110258:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1011025c:	e0bffd17 	ldw	r2,-12(fp)
10110260:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110264:	e0bff817 	ldw	r2,-32(fp)
10110268:	10800808 	cmpgei	r2,r2,32
1011026c:	1000271e 	bne	r2,zero,1011030c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110270:	0005303a 	rdctl	r2,status
10110274:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110278:	e0fffb17 	ldw	r3,-20(fp)
1011027c:	00bfff84 	movi	r2,-2
10110280:	1884703a 	and	r2,r3,r2
10110284:	1001703a 	wrctl	status,r2
  
  return context;
10110288:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1011028c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10110290:	00840474 	movhi	r2,4113
10110294:	10915f04 	addi	r2,r2,17788
10110298:	e0fff817 	ldw	r3,-32(fp)
1011029c:	180690fa 	slli	r3,r3,3
101102a0:	10c5883a 	add	r2,r2,r3
101102a4:	e0fffe17 	ldw	r3,-8(fp)
101102a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
101102ac:	00840474 	movhi	r2,4113
101102b0:	10915f04 	addi	r2,r2,17788
101102b4:	e0fff817 	ldw	r3,-32(fp)
101102b8:	180690fa 	slli	r3,r3,3
101102bc:	10c5883a 	add	r2,r2,r3
101102c0:	10800104 	addi	r2,r2,4
101102c4:	e0ffff17 	ldw	r3,-4(fp)
101102c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101102cc:	e0bffe17 	ldw	r2,-8(fp)
101102d0:	10000526 	beq	r2,zero,101102e8 <alt_iic_isr_register+0xb4>
101102d4:	e0bff817 	ldw	r2,-32(fp)
101102d8:	100b883a 	mov	r5,r2
101102dc:	e13ffc17 	ldw	r4,-16(fp)
101102e0:	01100d40 	call	101100d4 <alt_ic_irq_enable>
101102e4:	00000406 	br	101102f8 <alt_iic_isr_register+0xc4>
101102e8:	e0bff817 	ldw	r2,-32(fp)
101102ec:	100b883a 	mov	r5,r2
101102f0:	e13ffc17 	ldw	r4,-16(fp)
101102f4:	011015c0 	call	1011015c <alt_ic_irq_disable>
101102f8:	e0bff715 	stw	r2,-36(fp)
101102fc:	e0bffa17 	ldw	r2,-24(fp)
10110300:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110304:	e0bff917 	ldw	r2,-28(fp)
10110308:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1011030c:	e0bff717 	ldw	r2,-36(fp)
}
10110310:	e037883a 	mov	sp,fp
10110314:	dfc00117 	ldw	ra,4(sp)
10110318:	df000017 	ldw	fp,0(sp)
1011031c:	dec00204 	addi	sp,sp,8
10110320:	f800283a 	ret

10110324 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110324:	defff904 	addi	sp,sp,-28
10110328:	dfc00615 	stw	ra,24(sp)
1011032c:	df000515 	stw	fp,20(sp)
10110330:	df000504 	addi	fp,sp,20
10110334:	e13ffc15 	stw	r4,-16(fp)
10110338:	e17ffd15 	stw	r5,-12(fp)
1011033c:	e1bffe15 	stw	r6,-8(fp)
10110340:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110344:	e1bfff17 	ldw	r6,-4(fp)
10110348:	e17ffe17 	ldw	r5,-8(fp)
1011034c:	e13ffd17 	ldw	r4,-12(fp)
10110350:	010e6000 	call	1010e600 <open>
10110354:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110358:	e0bffb17 	ldw	r2,-20(fp)
1011035c:	10001c16 	blt	r2,zero,101103d0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10110360:	00840474 	movhi	r2,4113
10110364:	1085cc04 	addi	r2,r2,5936
10110368:	e0fffb17 	ldw	r3,-20(fp)
1011036c:	18c00324 	muli	r3,r3,12
10110370:	10c5883a 	add	r2,r2,r3
10110374:	10c00017 	ldw	r3,0(r2)
10110378:	e0bffc17 	ldw	r2,-16(fp)
1011037c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10110380:	00840474 	movhi	r2,4113
10110384:	1085cc04 	addi	r2,r2,5936
10110388:	e0fffb17 	ldw	r3,-20(fp)
1011038c:	18c00324 	muli	r3,r3,12
10110390:	10c5883a 	add	r2,r2,r3
10110394:	10800104 	addi	r2,r2,4
10110398:	10c00017 	ldw	r3,0(r2)
1011039c:	e0bffc17 	ldw	r2,-16(fp)
101103a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
101103a4:	00840474 	movhi	r2,4113
101103a8:	1085cc04 	addi	r2,r2,5936
101103ac:	e0fffb17 	ldw	r3,-20(fp)
101103b0:	18c00324 	muli	r3,r3,12
101103b4:	10c5883a 	add	r2,r2,r3
101103b8:	10800204 	addi	r2,r2,8
101103bc:	10c00017 	ldw	r3,0(r2)
101103c0:	e0bffc17 	ldw	r2,-16(fp)
101103c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101103c8:	e13ffb17 	ldw	r4,-20(fp)
101103cc:	010e88c0 	call	1010e88c <alt_release_fd>
  }
} 
101103d0:	0001883a 	nop
101103d4:	e037883a 	mov	sp,fp
101103d8:	dfc00117 	ldw	ra,4(sp)
101103dc:	df000017 	ldw	fp,0(sp)
101103e0:	dec00204 	addi	sp,sp,8
101103e4:	f800283a 	ret

101103e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101103e8:	defffb04 	addi	sp,sp,-20
101103ec:	dfc00415 	stw	ra,16(sp)
101103f0:	df000315 	stw	fp,12(sp)
101103f4:	df000304 	addi	fp,sp,12
101103f8:	e13ffd15 	stw	r4,-12(fp)
101103fc:	e17ffe15 	stw	r5,-8(fp)
10110400:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10110404:	01c07fc4 	movi	r7,511
10110408:	01800044 	movi	r6,1
1011040c:	e17ffd17 	ldw	r5,-12(fp)
10110410:	01040474 	movhi	r4,4113
10110414:	2105cf04 	addi	r4,r4,5948
10110418:	01103240 	call	10110324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1011041c:	01c07fc4 	movi	r7,511
10110420:	000d883a 	mov	r6,zero
10110424:	e17ffe17 	ldw	r5,-8(fp)
10110428:	01040474 	movhi	r4,4113
1011042c:	2105cc04 	addi	r4,r4,5936
10110430:	01103240 	call	10110324 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110434:	01c07fc4 	movi	r7,511
10110438:	01800044 	movi	r6,1
1011043c:	e17fff17 	ldw	r5,-4(fp)
10110440:	01040474 	movhi	r4,4113
10110444:	2105d204 	addi	r4,r4,5960
10110448:	01103240 	call	10110324 <alt_open_fd>
}  
1011044c:	0001883a 	nop
10110450:	e037883a 	mov	sp,fp
10110454:	dfc00117 	ldw	ra,4(sp)
10110458:	df000017 	ldw	fp,0(sp)
1011045c:	dec00204 	addi	sp,sp,8
10110460:	f800283a 	ret

10110464 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110464:	defffa04 	addi	sp,sp,-24
10110468:	df000515 	stw	fp,20(sp)
1011046c:	df000504 	addi	fp,sp,20
10110470:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110474:	0005303a 	rdctl	r2,status
10110478:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011047c:	e0fffc17 	ldw	r3,-16(fp)
10110480:	00bfff84 	movi	r2,-2
10110484:	1884703a 	and	r2,r3,r2
10110488:	1001703a 	wrctl	status,r2
  
  return context;
1011048c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10110490:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110494:	e0bfff17 	ldw	r2,-4(fp)
10110498:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1011049c:	e0bffd17 	ldw	r2,-12(fp)
101104a0:	10800017 	ldw	r2,0(r2)
101104a4:	e0fffd17 	ldw	r3,-12(fp)
101104a8:	18c00117 	ldw	r3,4(r3)
101104ac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101104b0:	e0bffd17 	ldw	r2,-12(fp)
101104b4:	10800117 	ldw	r2,4(r2)
101104b8:	e0fffd17 	ldw	r3,-12(fp)
101104bc:	18c00017 	ldw	r3,0(r3)
101104c0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101104c4:	e0bffd17 	ldw	r2,-12(fp)
101104c8:	e0fffd17 	ldw	r3,-12(fp)
101104cc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101104d0:	e0bffd17 	ldw	r2,-12(fp)
101104d4:	e0fffd17 	ldw	r3,-12(fp)
101104d8:	10c00015 	stw	r3,0(r2)
101104dc:	e0bffb17 	ldw	r2,-20(fp)
101104e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101104e4:	e0bffe17 	ldw	r2,-8(fp)
101104e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
101104ec:	0001883a 	nop
101104f0:	e037883a 	mov	sp,fp
101104f4:	df000017 	ldw	fp,0(sp)
101104f8:	dec00104 	addi	sp,sp,4
101104fc:	f800283a 	ret

10110500 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10110500:	defffb04 	addi	sp,sp,-20
10110504:	dfc00415 	stw	ra,16(sp)
10110508:	df000315 	stw	fp,12(sp)
1011050c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10110510:	d0a02017 	ldw	r2,-32640(gp)
10110514:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10110518:	d0a70517 	ldw	r2,-25580(gp)
1011051c:	10800044 	addi	r2,r2,1
10110520:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110524:	00002e06 	br	101105e0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10110528:	e0bffd17 	ldw	r2,-12(fp)
1011052c:	10800017 	ldw	r2,0(r2)
10110530:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10110534:	e0bffd17 	ldw	r2,-12(fp)
10110538:	10800403 	ldbu	r2,16(r2)
1011053c:	10803fcc 	andi	r2,r2,255
10110540:	10000426 	beq	r2,zero,10110554 <alt_tick+0x54>
10110544:	d0a70517 	ldw	r2,-25580(gp)
10110548:	1000021e 	bne	r2,zero,10110554 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1011054c:	e0bffd17 	ldw	r2,-12(fp)
10110550:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10110554:	e0bffd17 	ldw	r2,-12(fp)
10110558:	10800217 	ldw	r2,8(r2)
1011055c:	d0e70517 	ldw	r3,-25580(gp)
10110560:	18801d36 	bltu	r3,r2,101105d8 <alt_tick+0xd8>
10110564:	e0bffd17 	ldw	r2,-12(fp)
10110568:	10800403 	ldbu	r2,16(r2)
1011056c:	10803fcc 	andi	r2,r2,255
10110570:	1000191e 	bne	r2,zero,101105d8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10110574:	e0bffd17 	ldw	r2,-12(fp)
10110578:	10800317 	ldw	r2,12(r2)
1011057c:	e0fffd17 	ldw	r3,-12(fp)
10110580:	18c00517 	ldw	r3,20(r3)
10110584:	1809883a 	mov	r4,r3
10110588:	103ee83a 	callr	r2
1011058c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10110590:	e0bfff17 	ldw	r2,-4(fp)
10110594:	1000031e 	bne	r2,zero,101105a4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10110598:	e13ffd17 	ldw	r4,-12(fp)
1011059c:	01104640 	call	10110464 <alt_alarm_stop>
101105a0:	00000d06 	br	101105d8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101105a4:	e0bffd17 	ldw	r2,-12(fp)
101105a8:	10c00217 	ldw	r3,8(r2)
101105ac:	e0bfff17 	ldw	r2,-4(fp)
101105b0:	1887883a 	add	r3,r3,r2
101105b4:	e0bffd17 	ldw	r2,-12(fp)
101105b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101105bc:	e0bffd17 	ldw	r2,-12(fp)
101105c0:	10c00217 	ldw	r3,8(r2)
101105c4:	d0a70517 	ldw	r2,-25580(gp)
101105c8:	1880032e 	bgeu	r3,r2,101105d8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
101105cc:	e0bffd17 	ldw	r2,-12(fp)
101105d0:	00c00044 	movi	r3,1
101105d4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
101105d8:	e0bffe17 	ldw	r2,-8(fp)
101105dc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
101105e0:	e0fffd17 	ldw	r3,-12(fp)
101105e4:	d0a02004 	addi	r2,gp,-32640
101105e8:	18bfcf1e 	bne	r3,r2,10110528 <__alt_data_end+0xffff0528>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
101105ec:	0001883a 	nop
}
101105f0:	0001883a 	nop
101105f4:	e037883a 	mov	sp,fp
101105f8:	dfc00117 	ldw	ra,4(sp)
101105fc:	df000017 	ldw	fp,0(sp)
10110600:	dec00204 	addi	sp,sp,8
10110604:	f800283a 	ret

10110608 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10110608:	deffff04 	addi	sp,sp,-4
1011060c:	df000015 	stw	fp,0(sp)
10110610:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10110614:	000170fa 	wrctl	ienable,zero
}
10110618:	0001883a 	nop
1011061c:	e037883a 	mov	sp,fp
10110620:	df000017 	ldw	fp,0(sp)
10110624:	dec00104 	addi	sp,sp,4
10110628:	f800283a 	ret

1011062c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1011062c:	defffb04 	addi	sp,sp,-20
10110630:	df000415 	stw	fp,16(sp)
10110634:	df000404 	addi	fp,sp,16
10110638:	e13ffe15 	stw	r4,-8(fp)
1011063c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10110640:	e0bfff17 	ldw	r2,-4(fp)
10110644:	10840070 	cmpltui	r2,r2,4097
10110648:	1000021e 	bne	r2,zero,10110654 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1011064c:	00840004 	movi	r2,4096
10110650:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10110654:	e0fffe17 	ldw	r3,-8(fp)
10110658:	e0bfff17 	ldw	r2,-4(fp)
1011065c:	1885883a 	add	r2,r3,r2
10110660:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110664:	e0bffe17 	ldw	r2,-8(fp)
10110668:	e0bffc15 	stw	r2,-16(fp)
1011066c:	00000506 	br	10110684 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10110670:	e0bffc17 	ldw	r2,-16(fp)
10110674:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110678:	e0bffc17 	ldw	r2,-16(fp)
1011067c:	10800804 	addi	r2,r2,32
10110680:	e0bffc15 	stw	r2,-16(fp)
10110684:	e0fffc17 	ldw	r3,-16(fp)
10110688:	e0bffd17 	ldw	r2,-12(fp)
1011068c:	18bff836 	bltu	r3,r2,10110670 <__alt_data_end+0xffff0670>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10110690:	e0bffe17 	ldw	r2,-8(fp)
10110694:	108007cc 	andi	r2,r2,31
10110698:	10000226 	beq	r2,zero,101106a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1011069c:	e0bffc17 	ldw	r2,-16(fp)
101106a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
101106a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
101106a8:	0001883a 	nop
101106ac:	e037883a 	mov	sp,fp
101106b0:	df000017 	ldw	fp,0(sp)
101106b4:	dec00104 	addi	sp,sp,4
101106b8:	f800283a 	ret

101106bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101106bc:	defffe04 	addi	sp,sp,-8
101106c0:	df000115 	stw	fp,4(sp)
101106c4:	df000104 	addi	fp,sp,4
101106c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
101106cc:	e0bfff17 	ldw	r2,-4(fp)
101106d0:	10bffe84 	addi	r2,r2,-6
101106d4:	10c00428 	cmpgeui	r3,r2,16
101106d8:	18001a1e 	bne	r3,zero,10110744 <alt_exception_cause_generated_bad_addr+0x88>
101106dc:	100690ba 	slli	r3,r2,2
101106e0:	00840474 	movhi	r2,4113
101106e4:	1081bd04 	addi	r2,r2,1780
101106e8:	1885883a 	add	r2,r3,r2
101106ec:	10800017 	ldw	r2,0(r2)
101106f0:	1000683a 	jmp	r2
101106f4:	10110734 	orhi	zero,r2,17436
101106f8:	10110734 	orhi	zero,r2,17436
101106fc:	10110744 	addi	zero,r2,17437
10110700:	10110744 	addi	zero,r2,17437
10110704:	10110744 	addi	zero,r2,17437
10110708:	10110734 	orhi	zero,r2,17436
1011070c:	1011073c 	xorhi	zero,r2,17436
10110710:	10110744 	addi	zero,r2,17437
10110714:	10110734 	orhi	zero,r2,17436
10110718:	10110734 	orhi	zero,r2,17436
1011071c:	10110744 	addi	zero,r2,17437
10110720:	10110734 	orhi	zero,r2,17436
10110724:	1011073c 	xorhi	zero,r2,17436
10110728:	10110744 	addi	zero,r2,17437
1011072c:	10110744 	addi	zero,r2,17437
10110730:	10110734 	orhi	zero,r2,17436
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110734:	00800044 	movi	r2,1
10110738:	00000306 	br	10110748 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1011073c:	0005883a 	mov	r2,zero
10110740:	00000106 	br	10110748 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110744:	0005883a 	mov	r2,zero
  }
}
10110748:	e037883a 	mov	sp,fp
1011074c:	df000017 	ldw	fp,0(sp)
10110750:	dec00104 	addi	sp,sp,4
10110754:	f800283a 	ret

10110758 <atexit>:
10110758:	200b883a 	mov	r5,r4
1011075c:	000f883a 	mov	r7,zero
10110760:	000d883a 	mov	r6,zero
10110764:	0009883a 	mov	r4,zero
10110768:	01108201 	jmpi	10110820 <__register_exitproc>

1011076c <exit>:
1011076c:	defffe04 	addi	sp,sp,-8
10110770:	000b883a 	mov	r5,zero
10110774:	dc000015 	stw	r16,0(sp)
10110778:	dfc00115 	stw	ra,4(sp)
1011077c:	2021883a 	mov	r16,r4
10110780:	01109380 	call	10110938 <__call_exitprocs>
10110784:	00840474 	movhi	r2,4113
10110788:	108a4e04 	addi	r2,r2,10552
1011078c:	11000017 	ldw	r4,0(r2)
10110790:	20800f17 	ldw	r2,60(r4)
10110794:	10000126 	beq	r2,zero,1011079c <exit+0x30>
10110798:	103ee83a 	callr	r2
1011079c:	8009883a 	mov	r4,r16
101107a0:	0110ab80 	call	10110ab8 <_exit>

101107a4 <memcmp>:
101107a4:	01c000c4 	movi	r7,3
101107a8:	3980192e 	bgeu	r7,r6,10110810 <memcmp+0x6c>
101107ac:	2144b03a 	or	r2,r4,r5
101107b0:	11c4703a 	and	r2,r2,r7
101107b4:	10000f26 	beq	r2,zero,101107f4 <memcmp+0x50>
101107b8:	20800003 	ldbu	r2,0(r4)
101107bc:	28c00003 	ldbu	r3,0(r5)
101107c0:	10c0151e 	bne	r2,r3,10110818 <memcmp+0x74>
101107c4:	31bfff84 	addi	r6,r6,-2
101107c8:	01ffffc4 	movi	r7,-1
101107cc:	00000406 	br	101107e0 <memcmp+0x3c>
101107d0:	20800003 	ldbu	r2,0(r4)
101107d4:	28c00003 	ldbu	r3,0(r5)
101107d8:	31bfffc4 	addi	r6,r6,-1
101107dc:	10c00e1e 	bne	r2,r3,10110818 <memcmp+0x74>
101107e0:	21000044 	addi	r4,r4,1
101107e4:	29400044 	addi	r5,r5,1
101107e8:	31fff91e 	bne	r6,r7,101107d0 <__alt_data_end+0xffff07d0>
101107ec:	0005883a 	mov	r2,zero
101107f0:	f800283a 	ret
101107f4:	20c00017 	ldw	r3,0(r4)
101107f8:	28800017 	ldw	r2,0(r5)
101107fc:	18bfee1e 	bne	r3,r2,101107b8 <__alt_data_end+0xffff07b8>
10110800:	31bfff04 	addi	r6,r6,-4
10110804:	21000104 	addi	r4,r4,4
10110808:	29400104 	addi	r5,r5,4
1011080c:	39bff936 	bltu	r7,r6,101107f4 <__alt_data_end+0xffff07f4>
10110810:	303fe91e 	bne	r6,zero,101107b8 <__alt_data_end+0xffff07b8>
10110814:	003ff506 	br	101107ec <__alt_data_end+0xffff07ec>
10110818:	10c5c83a 	sub	r2,r2,r3
1011081c:	f800283a 	ret

10110820 <__register_exitproc>:
10110820:	defffa04 	addi	sp,sp,-24
10110824:	dc000315 	stw	r16,12(sp)
10110828:	04040474 	movhi	r16,4113
1011082c:	840a4e04 	addi	r16,r16,10552
10110830:	80c00017 	ldw	r3,0(r16)
10110834:	dc400415 	stw	r17,16(sp)
10110838:	dfc00515 	stw	ra,20(sp)
1011083c:	18805217 	ldw	r2,328(r3)
10110840:	2023883a 	mov	r17,r4
10110844:	10003726 	beq	r2,zero,10110924 <__register_exitproc+0x104>
10110848:	10c00117 	ldw	r3,4(r2)
1011084c:	010007c4 	movi	r4,31
10110850:	20c00e16 	blt	r4,r3,1011088c <__register_exitproc+0x6c>
10110854:	1a000044 	addi	r8,r3,1
10110858:	8800221e 	bne	r17,zero,101108e4 <__register_exitproc+0xc4>
1011085c:	18c00084 	addi	r3,r3,2
10110860:	18c7883a 	add	r3,r3,r3
10110864:	18c7883a 	add	r3,r3,r3
10110868:	12000115 	stw	r8,4(r2)
1011086c:	10c7883a 	add	r3,r2,r3
10110870:	19400015 	stw	r5,0(r3)
10110874:	0005883a 	mov	r2,zero
10110878:	dfc00517 	ldw	ra,20(sp)
1011087c:	dc400417 	ldw	r17,16(sp)
10110880:	dc000317 	ldw	r16,12(sp)
10110884:	dec00604 	addi	sp,sp,24
10110888:	f800283a 	ret
1011088c:	00800034 	movhi	r2,0
10110890:	10800004 	addi	r2,r2,0
10110894:	10002626 	beq	r2,zero,10110930 <__register_exitproc+0x110>
10110898:	01006404 	movi	r4,400
1011089c:	d9400015 	stw	r5,0(sp)
101108a0:	d9800115 	stw	r6,4(sp)
101108a4:	d9c00215 	stw	r7,8(sp)
101108a8:	00000000 	call	10000000 <__reset-0x100000>
101108ac:	d9400017 	ldw	r5,0(sp)
101108b0:	d9800117 	ldw	r6,4(sp)
101108b4:	d9c00217 	ldw	r7,8(sp)
101108b8:	10001d26 	beq	r2,zero,10110930 <__register_exitproc+0x110>
101108bc:	81000017 	ldw	r4,0(r16)
101108c0:	10000115 	stw	zero,4(r2)
101108c4:	02000044 	movi	r8,1
101108c8:	22405217 	ldw	r9,328(r4)
101108cc:	0007883a 	mov	r3,zero
101108d0:	12400015 	stw	r9,0(r2)
101108d4:	20805215 	stw	r2,328(r4)
101108d8:	10006215 	stw	zero,392(r2)
101108dc:	10006315 	stw	zero,396(r2)
101108e0:	883fde26 	beq	r17,zero,1011085c <__alt_data_end+0xffff085c>
101108e4:	18c9883a 	add	r4,r3,r3
101108e8:	2109883a 	add	r4,r4,r4
101108ec:	1109883a 	add	r4,r2,r4
101108f0:	21802215 	stw	r6,136(r4)
101108f4:	01800044 	movi	r6,1
101108f8:	12406217 	ldw	r9,392(r2)
101108fc:	30cc983a 	sll	r6,r6,r3
10110900:	4992b03a 	or	r9,r9,r6
10110904:	12406215 	stw	r9,392(r2)
10110908:	21c04215 	stw	r7,264(r4)
1011090c:	01000084 	movi	r4,2
10110910:	893fd21e 	bne	r17,r4,1011085c <__alt_data_end+0xffff085c>
10110914:	11006317 	ldw	r4,396(r2)
10110918:	218cb03a 	or	r6,r4,r6
1011091c:	11806315 	stw	r6,396(r2)
10110920:	003fce06 	br	1011085c <__alt_data_end+0xffff085c>
10110924:	18805304 	addi	r2,r3,332
10110928:	18805215 	stw	r2,328(r3)
1011092c:	003fc606 	br	10110848 <__alt_data_end+0xffff0848>
10110930:	00bfffc4 	movi	r2,-1
10110934:	003fd006 	br	10110878 <__alt_data_end+0xffff0878>

10110938 <__call_exitprocs>:
10110938:	defff504 	addi	sp,sp,-44
1011093c:	df000915 	stw	fp,36(sp)
10110940:	dd400615 	stw	r21,24(sp)
10110944:	dc800315 	stw	r18,12(sp)
10110948:	dfc00a15 	stw	ra,40(sp)
1011094c:	ddc00815 	stw	r23,32(sp)
10110950:	dd800715 	stw	r22,28(sp)
10110954:	dd000515 	stw	r20,20(sp)
10110958:	dcc00415 	stw	r19,16(sp)
1011095c:	dc400215 	stw	r17,8(sp)
10110960:	dc000115 	stw	r16,4(sp)
10110964:	d9000015 	stw	r4,0(sp)
10110968:	2839883a 	mov	fp,r5
1011096c:	04800044 	movi	r18,1
10110970:	057fffc4 	movi	r21,-1
10110974:	00840474 	movhi	r2,4113
10110978:	108a4e04 	addi	r2,r2,10552
1011097c:	12000017 	ldw	r8,0(r2)
10110980:	45005217 	ldw	r20,328(r8)
10110984:	44c05204 	addi	r19,r8,328
10110988:	a0001c26 	beq	r20,zero,101109fc <__call_exitprocs+0xc4>
1011098c:	a0800117 	ldw	r2,4(r20)
10110990:	15ffffc4 	addi	r23,r2,-1
10110994:	b8000d16 	blt	r23,zero,101109cc <__call_exitprocs+0x94>
10110998:	14000044 	addi	r16,r2,1
1011099c:	8421883a 	add	r16,r16,r16
101109a0:	8421883a 	add	r16,r16,r16
101109a4:	84402004 	addi	r17,r16,128
101109a8:	a463883a 	add	r17,r20,r17
101109ac:	a421883a 	add	r16,r20,r16
101109b0:	e0001e26 	beq	fp,zero,10110a2c <__call_exitprocs+0xf4>
101109b4:	80804017 	ldw	r2,256(r16)
101109b8:	e0801c26 	beq	fp,r2,10110a2c <__call_exitprocs+0xf4>
101109bc:	bdffffc4 	addi	r23,r23,-1
101109c0:	843fff04 	addi	r16,r16,-4
101109c4:	8c7fff04 	addi	r17,r17,-4
101109c8:	bd7ff91e 	bne	r23,r21,101109b0 <__alt_data_end+0xffff09b0>
101109cc:	00800034 	movhi	r2,0
101109d0:	10800004 	addi	r2,r2,0
101109d4:	10000926 	beq	r2,zero,101109fc <__call_exitprocs+0xc4>
101109d8:	a0800117 	ldw	r2,4(r20)
101109dc:	1000301e 	bne	r2,zero,10110aa0 <__call_exitprocs+0x168>
101109e0:	a0800017 	ldw	r2,0(r20)
101109e4:	10003226 	beq	r2,zero,10110ab0 <__call_exitprocs+0x178>
101109e8:	a009883a 	mov	r4,r20
101109ec:	98800015 	stw	r2,0(r19)
101109f0:	00000000 	call	10000000 <__reset-0x100000>
101109f4:	9d000017 	ldw	r20,0(r19)
101109f8:	a03fe41e 	bne	r20,zero,1011098c <__alt_data_end+0xffff098c>
101109fc:	dfc00a17 	ldw	ra,40(sp)
10110a00:	df000917 	ldw	fp,36(sp)
10110a04:	ddc00817 	ldw	r23,32(sp)
10110a08:	dd800717 	ldw	r22,28(sp)
10110a0c:	dd400617 	ldw	r21,24(sp)
10110a10:	dd000517 	ldw	r20,20(sp)
10110a14:	dcc00417 	ldw	r19,16(sp)
10110a18:	dc800317 	ldw	r18,12(sp)
10110a1c:	dc400217 	ldw	r17,8(sp)
10110a20:	dc000117 	ldw	r16,4(sp)
10110a24:	dec00b04 	addi	sp,sp,44
10110a28:	f800283a 	ret
10110a2c:	a0800117 	ldw	r2,4(r20)
10110a30:	80c00017 	ldw	r3,0(r16)
10110a34:	10bfffc4 	addi	r2,r2,-1
10110a38:	15c01426 	beq	r2,r23,10110a8c <__call_exitprocs+0x154>
10110a3c:	80000015 	stw	zero,0(r16)
10110a40:	183fde26 	beq	r3,zero,101109bc <__alt_data_end+0xffff09bc>
10110a44:	95c8983a 	sll	r4,r18,r23
10110a48:	a0806217 	ldw	r2,392(r20)
10110a4c:	a5800117 	ldw	r22,4(r20)
10110a50:	2084703a 	and	r2,r4,r2
10110a54:	10000b26 	beq	r2,zero,10110a84 <__call_exitprocs+0x14c>
10110a58:	a0806317 	ldw	r2,396(r20)
10110a5c:	2088703a 	and	r4,r4,r2
10110a60:	20000c1e 	bne	r4,zero,10110a94 <__call_exitprocs+0x15c>
10110a64:	89400017 	ldw	r5,0(r17)
10110a68:	d9000017 	ldw	r4,0(sp)
10110a6c:	183ee83a 	callr	r3
10110a70:	a0800117 	ldw	r2,4(r20)
10110a74:	15bfbf1e 	bne	r2,r22,10110974 <__alt_data_end+0xffff0974>
10110a78:	98800017 	ldw	r2,0(r19)
10110a7c:	153fcf26 	beq	r2,r20,101109bc <__alt_data_end+0xffff09bc>
10110a80:	003fbc06 	br	10110974 <__alt_data_end+0xffff0974>
10110a84:	183ee83a 	callr	r3
10110a88:	003ff906 	br	10110a70 <__alt_data_end+0xffff0a70>
10110a8c:	a5c00115 	stw	r23,4(r20)
10110a90:	003feb06 	br	10110a40 <__alt_data_end+0xffff0a40>
10110a94:	89000017 	ldw	r4,0(r17)
10110a98:	183ee83a 	callr	r3
10110a9c:	003ff406 	br	10110a70 <__alt_data_end+0xffff0a70>
10110aa0:	a0800017 	ldw	r2,0(r20)
10110aa4:	a027883a 	mov	r19,r20
10110aa8:	1029883a 	mov	r20,r2
10110aac:	003fb606 	br	10110988 <__alt_data_end+0xffff0988>
10110ab0:	0005883a 	mov	r2,zero
10110ab4:	003ffb06 	br	10110aa4 <__alt_data_end+0xffff0aa4>

10110ab8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10110ab8:	defffd04 	addi	sp,sp,-12
10110abc:	df000215 	stw	fp,8(sp)
10110ac0:	df000204 	addi	fp,sp,8
10110ac4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10110ac8:	0001883a 	nop
10110acc:	e0bfff17 	ldw	r2,-4(fp)
10110ad0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10110ad4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10110ad8:	10000226 	beq	r2,zero,10110ae4 <_exit+0x2c>
    ALT_SIM_FAIL();
10110adc:	002af070 	cmpltui	zero,zero,43969
10110ae0:	00000106 	br	10110ae8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10110ae4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10110ae8:	003fff06 	br	10110ae8 <__alt_data_end+0xffff0ae8>
