
camera_project.elf:     file format elf32-littlenios2
camera_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00012b28 memsz 0x00012b28 flags r-x
    LOAD off    0x00013b48 vaddr 0x10112b48 paddr 0x101146a4 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00016200 vaddr 0x10116200 paddr 0x10116200 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012538  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003cc  1011277c  1011277c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10112b48  101146a4  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10116200  10116200  00016200  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10116360  10116360  000156a4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000156a4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001178  00000000  00000000  000156c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002becf  00000000  00000000  00016840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000afc1  00000000  00000000  0004270f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000db8e  00000000  00000000  0004d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002ac0  00000000  00000000  0005b260  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004122  00000000  00000000  0005dd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001890b  00000000  00000000  00061e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0007a750  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a30  00000000  00000000  0007a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007fd0a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007fd0d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007fd19  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007fd1a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007fd1b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007fd26  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007fd31  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0007fd3c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000072  00000000  00000000  0007fd46  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  0007fdb8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0028d7d6  00000000  00000000  00085727  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
1011277c l    d  .rodata	00000000 .rodata
10112b48 l    d  .rwdata	00000000 .rwdata
10116200 l    d  .bss	00000000 .bss
10116360 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/hugom/OneDrive/Documents/Cours/Embedded_sys/Lab4/lab_4_project_template/lab_4_project_template/sw/nios/camera_project_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 LCD_control.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100abc l     F .text	0000003c max
10100af8 l     F .text	000000c8 write_frame_width_reg
101010d0 l     F .text	00000034 is_idle
10100bc0 l     F .text	000000cc write_frame_height_reg
10100c8c l     F .text	000000cc write_frame_frame_blank_reg
10100d58 l     F .text	000000c8 write_frame_line_blank_reg
10100e20 l     F .text	000000cc write_line_line_blank_reg
10100eec l     F .text	000000c8 write_line_frame_blank_reg
10100fb4 l     F .text	0000002c read_frame_width_reg
10100fe0 l     F .text	00000030 read_frame_height_reg
10101010 l     F .text	00000030 read_frame_frame_blank_reg
10101040 l     F .text	00000030 read_frame_line_blank_reg
10101070 l     F .text	00000030 read_line_line_blank_reg
101010a0 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 i2c.c
10101370 l     F .text	00000034 i2c_usleep
101013a4 l     F .text	00000044 wait_end_of_transfer
101013e8 l     F .text	00000070 set_data_control
10101458 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 i2c_m.c
00000000 l    df *ABS*	00000000 main_with_cmos_generator.c
00000000 l    df *ABS*	00000000 main_with_real_camera.c
00000000 l    df *ABS*	00000000 memory_access.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10102aa8 l     F .text	00000008 __fp_unlock
10102abc l     F .text	0000019c __sinit.part.1
10102c58 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10112b48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
101049d0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10112886 l     O .rodata	00000010 zeroes.4404
10106ffc l     F .text	000000bc __sbprintf
10112896 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10107418 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10113394 l     O .rwdata	00000020 lc_ctype_charset
10113374 l     O .rwdata	00000020 lc_message_charset
101133b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
101128c4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1010ae30 l     F .text	000000fc __sprint_r.part.0
101129f8 l     O .rodata	00000010 blanks.4348
101129e8 l     O .rodata	00000010 zeroes.4349
1010c3bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010fa44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010fb50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010fb7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010fc68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010fd48 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010fe34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
10110008 l     F .text	0000003c alt_get_errno
10110044 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1011025c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1011464c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
101104d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1011060c l     F .text	00000034 alt_dev_reg
10113594 l     O .rwdata	00001060 jtag_uart_0
101145f4 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
101108f0 l     F .text	0000020c altera_avalon_jtag_uart_irq
10110afc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10114650 l     O .rwdata	00000009 hcinfo.2538
1011465c l     O .rwdata	0000000a hcinfo.2551
10114668 l     O .rwdata	00000009 hcinfo.2560
10114674 l     O .rwdata	0000000a hcinfo.2573
10114680 l     O .rwdata	0000000a hcinfo.2586
1011468c l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10111884 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10111fb4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10116234 g     O .bss	00000004 alt_instruction_exception_handler
1010a5a4 g     F .text	00000074 _mprec_log10
1010a690 g     F .text	0000008c __any_on
10109208 g     F .text	00000054 _isatty_r
101128d0 g     O .rodata	00000028 __mprec_tinytens
1010ff44 g     F .text	0000007c alt_main
101048fc g     F .text	000000c0 _puts_r
10116260 g     O .bss	00000100 alt_irq
10109338 g     F .text	00000060 _lseek_r
101146a4 g       *ABS*	00000000 __flash_rwdata_start
10108ca0 g     F .text	000000ac __sflags
1010e570 g     F .text	00000088 .hidden __eqdf2
10116360 g       *ABS*	00000000 __alt_heap_start
10104758 g     F .text	0000003c printf
1010c744 g     F .text	0000009c _wcrtomb_r
10104cec g     F .text	0000005c __sseek
10102df8 g     F .text	00000010 __sinit
101070b8 g     F .text	00000140 __swbuf_r
1010925c g     F .text	0000007c _setlocale_r
10102c60 g     F .text	00000068 __sfmoreglue
1010ffe4 g     F .text	00000024 __malloc_unlock
10111134 g     F .text	0000011c alt_hostfs_open
10101ca4 g     F .text	000004d0 configure_camera
101095c4 g     F .text	0000015c memmove
10102de0 g     F .text	00000018 _cleanup
10109720 g     F .text	000000a8 _Balloc
1010e5f8 g     F .text	000000dc .hidden __gtdf2
10112298 g     F .text	00000024 altera_nios2_gen2_irq_init
101015cc g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10102174 g     F .text	00000124 main0
10100020 g       *ABS*	00000000 __flash_exceptions_start
101038f4 g     F .text	0000005c _fstat_r
10116200 g     O .bss	00000004 errno
10104c68 g     F .text	00000008 __seofread
10116220 g     O .bss	00000004 alt_argv
1011c61c g       *ABS*	00000000 _gp
101104a8 g     F .text	00000030 usleep
10113414 g     O .rwdata	00000180 alt_fd_list
1011136c g     F .text	00000068 alt_hostfs_seek
10111a24 g     F .text	00000090 alt_find_dev
1010947c g     F .text	00000148 memcpy
10102ab0 g     F .text	0000000c _cleanup_r
1010f85c g     F .text	000000dc .hidden __floatsidf
10101840 g     F .text	00000194 i2c_write_array
10111bbc g     F .text	00000080 alt_fs_reg
10112078 g     F .text	0000007c alt_io_redirect
1010e6d4 g     F .text	000000f4 .hidden __ltdf2
1011277c g       *ABS*	00000000 __DTOR_END__
101049bc g     F .text	00000014 puts
1011234c g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010ace0 g     F .text	00000074 __fpclassifyd
1010a500 g     F .text	000000a4 __ratio
1010c3a0 g     F .text	0000001c __vfiprintf_internal
10110cf4 g     F .text	0000021c altera_avalon_jtag_uart_read
10104728 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101011f8 g     F .text	00000108 cmos_sensor_output_generator_configure
10102640 g     F .text	00000064 .hidden __udivsi3
1010fca4 g     F .text	000000a4 isatty
10112920 g     O .rodata	000000c8 __mprec_tens
10100a38 g     F .text	00000084 start_cmos
101092d8 g     F .text	0000000c __locale_charset
101122bc g     F .text	00000090 alt_icache_flush
1011620c g     O .bss	00000004 __malloc_top_pad
1011462c g     O .rwdata	00000004 __mb_cur_max
10109308 g     F .text	0000000c _localeconv_r
10109b2c g     F .text	0000003c __i2b
10108d4c g     F .text	000004bc __sfvwrite_r
10104bc0 g     F .text	00000054 _sbrk_r
10111294 g     F .text	0000006c alt_hostfs_read
1010a71c g     F .text	00000060 _read_r
101023b4 g     F .text	00000194 read_memory
10114644 g     O .rwdata	00000004 alt_max_fd
101026fc g     F .text	000000f0 _fclose_r
10102a78 g     F .text	00000030 fflush
10116208 g     O .bss	00000004 __malloc_max_sbrked_mem
101002e0 g     F .text	00000758 LCD_init
1010d3dc g     F .text	000008ac .hidden __adddf3
1010a2a8 g     F .text	0000010c __b2d
1010cea4 g     F .text	00000538 .hidden __umoddi3
1010fe70 g     F .text	000000d4 lseek
1011461c g     O .rwdata	00000004 _global_impure_ptr
1010a77c g     F .text	00000564 _realloc_r
10116360 g       *ABS*	00000000 __bss_end
10111ec4 g     F .text	000000f0 alt_iic_isr_register
10112190 g     F .text	00000108 alt_tick
1010c92c g     F .text	00000578 .hidden __udivdi3
1010c6a0 g     F .text	00000024 _fputwc_r
101128f8 g     O .rodata	00000028 __mprec_bigtens
10109910 g     F .text	00000104 __s2b
1010f938 g     F .text	000000a8 .hidden __floatunsidf
10109fe8 g     F .text	00000060 __mcmp
10102e18 g     F .text	00000018 __fp_lock_all
10111e78 g     F .text	0000004c alt_ic_irq_enabled
101120f4 g     F .text	0000009c alt_alarm_stop
10101338 g     F .text	00000038 cmos_sensor_output_generator_stop
10116228 g     O .bss	00000004 alt_irq_active
10103494 g     F .text	00000444 _fseeko_r
10111250 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
101133ec g     O .rwdata	00000028 alt_dev_null
1011183c g     F .text	00000048 alt_dcache_flush_all
10109a14 g     F .text	00000068 __hi0bits
1010f7dc g     F .text	00000080 .hidden __fixdfsi
10101300 g     F .text	00000038 cmos_sensor_output_generator_start
101146a4 g       *ABS*	00000000 __ram_rwdata_end
1011463c g     O .rwdata	00000008 alt_dev_list
10102fa0 g     F .text	00000044 _fputc_r
10110514 g     F .text	000000f8 write
10104794 g     F .text	000000a0 _putc_r
10112b48 g       *ABS*	00000000 __ram_rodata_end
1010fbb8 g     F .text	000000b0 fstat
10102f7c g     F .text	00000024 fprintf
101014bc g     F .text	0000002c i2c_inst
1010e6d4 g     F .text	000000f4 .hidden __ledf2
10109d60 g     F .text	00000140 __pow5mult
1010af44 g     F .text	0000145c ___vfiprintf_internal_r
10116218 g     O .bss	00000004 __nlocale_changed
101026a4 g     F .text	00000058 .hidden __umodsi3
10116360 g       *ABS*	00000000 end
101038d8 g     F .text	0000001c fseeko
10103478 g     F .text	0000001c fseek
10110830 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
1011277c g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010f9e0 g     F .text	00000064 .hidden __clzsi2
10110f10 g     F .text	00000224 altera_avalon_jtag_uart_write
10102e08 g     F .text	00000004 __sfp_lock_acquire
10109398 g     F .text	000000e4 memchr
10104de8 g     F .text	000021f8 ___vfprintf_internal_r
10103164 g     F .text	00000310 _free_r
10101104 g     F .text	00000078 cmos_sensor_output_generator_inst
101092e4 g     F .text	00000010 __locale_mb_cur_max
101125c8 g     F .text	00000180 __call_exitprocs
10116214 g     O .bss	00000004 __mlocale_changed
10114624 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
1011622c g     O .bss	00000004 _alt_tick_rate
10109ea0 g     F .text	00000148 __lshift
10116230 g     O .bss	00000004 _alt_nticks
10110298 g     F .text	000000fc read
10110678 g     F .text	00000054 alt_sys_init
101046c8 g     F .text	00000060 _open_r
1010154c g     F .text	00000080 i2c_configure
101124b0 g     F .text	00000118 __register_exitproc
10109b68 g     F .text	000001f8 __multiply
10110b9c g     F .text	00000068 altera_avalon_jtag_uart_close
10112b48 g       *ABS*	00000000 __ram_rwdata_start
1011277c g       *ABS*	00000000 __ram_rodata_start
10116238 g     O .bss	00000028 __malloc_current_mallinfo
1010a3b4 g     F .text	0000014c __d2b
101106cc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10111c3c g     F .text	000000a4 alt_get_fd
101116e4 g     F .text	00000158 alt_busy_sleep
101073c4 g     F .text	00000054 _close_r
10112434 g     F .text	0000007c memcmp
1011078c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10116360 g       *ABS*	00000000 __alt_stack_base
101107dc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10103ad8 g     F .text	000000cc _fwrite_r
10107270 g     F .text	00000154 __swsetup_r
1010dc88 g     F .text	000008e8 .hidden __divdf3
10102cc8 g     F .text	00000118 __sfp
1010a618 g     F .text	00000078 __copybits
10112f6c g     O .rwdata	00000408 __malloc_av_
10102e14 g     F .text	00000004 __sinit_lock_release
1010e7c8 g     F .text	00000718 .hidden __muldf3
10104c14 g     F .text	00000054 __sread
10111ab4 g     F .text	00000108 alt_find_file
101118c0 g     F .text	000000a4 alt_dev_llist_insert
10101b7c g     F .text	00000088 trdb_d5m_write
1010ffc0 g     F .text	00000024 __malloc_lock
10102f54 g     F .text	00000028 _fprintf_r
101103f8 g     F .text	000000b0 sbrk
10102a1c g     F .text	0000005c _fflush_r
1010c478 g     F .text	000000c4 _calloc_r
10102f3c g     F .text	00000018 fopen
10116200 g       *ABS*	00000000 __bss_start
101045a0 g     F .text	00000128 memset
10102298 g     F .text	0000011c main
10116224 g     O .bss	00000004 alt_envp
10116204 g     O .bss	00000004 __malloc_max_total_mem
1011072c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101016f8 g     F .text	00000148 i2c_read
101071f8 g     F .text	00000018 __swbuf
10104d48 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
101027ec g     F .text	00000014 fclose
10107618 g     F .text	00001688 _dtoa_r
10103d94 g     F .text	0000080c _malloc_r
1010c8a0 g     F .text	00000030 __ascii_wctomb
10114648 g     O .rwdata	00000004 alt_errno
10103950 g     F .text	000000c4 _fwalk
10104834 g     F .text	000000c8 putc
10102548 g     F .text	00000084 .hidden __divsi3
10100290 g     F .text	00000050 Delay_Ms
10103040 g     F .text	00000124 _malloc_trim_r
1011277c g       *ABS*	00000000 __CTOR_END__
1010ad54 g     F .text	000000dc strcmp
1011277c g       *ABS*	00000000 __flash_rodata_start
1011277c g       *ABS*	00000000 __DTOR_LIST__
1010e570 g     F .text	00000088 .hidden __nedf2
10110640 g     F .text	00000038 alt_irq_init
10110394 g     F .text	00000064 alt_release_fd
10112a08 g     O .rodata	00000100 .hidden __clz_tab
10116210 g     O .bss	00000004 _PathLocale
101123e8 g     F .text	00000014 atexit
10107210 g     F .text	00000060 _write_r
10109314 g     F .text	00000018 setlocale
10114620 g     O .rwdata	00000004 _impure_ptr
1011621c g     O .bss	00000004 alt_argc
10102800 g     F .text	0000021c __sflush_r
101119c4 g     F .text	00000060 _do_dtors
10109300 g     F .text	00000008 __locale_cjk_lang
10103474 g     F .text	00000004 _fseek_r
101014e8 g     F .text	00000064 i2c_init
101049ec g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
1010a244 g     F .text	00000064 __ulp
10102e30 g     F .text	00000018 __fp_unlock_all
10102fe4 g     F .text	0000005c fputc
10114634 g     O .rwdata	00000008 alt_fs_list
10111300 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
1010932c g     F .text	0000000c localeconv
10111d14 g     F .text	00000050 alt_ic_isr_register
10103ba4 g     F .text	00000034 fwrite
101146a4 g       *ABS*	00000000 _edata
10116360 g       *ABS*	00000000 _end
1010c53c g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
1010117c g     F .text	0000007c cmos_sensor_output_generator_init
10110c04 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10101c04 g     F .text	000000a0 trdb_d5m_read
10111dec g     F .text	0000008c alt_ic_irq_disable
10104c70 g     F .text	0000007c __swrite
10114628 g     O .rwdata	00000004 __malloc_trim_threshold
101092f4 g     F .text	0000000c __locale_msgcharset
101123fc g     F .text	00000038 exit
10103a14 g     F .text	000000c4 _fwalk_reent
1010a048 g     F .text	000001fc __mdiff
101025cc g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10102e0c g     F .text	00000004 __sfp_lock_release
10102e48 g     F .text	000000f4 _fopen_r
10112748 g     F .text	00000034 _exit
101115b8 g     F .text	0000012c alt_alarm_start
10103bd8 g     F .text	000001bc __smakebuf_r
101019d4 g     F .text	000001a8 i2c_read_array
10104d50 g     F .text	00000098 strlen
10110108 g     F .text	00000154 open
1010e5f8 g     F .text	000000dc .hidden __gedf2
10114630 g     O .rwdata	00000004 __wctomb
1010af2c g     F .text	00000018 __sprint_r
10111ce0 g     F .text	00000034 alt_icache_flush_all
10114698 g     O .rwdata	00000004 alt_priority_mask
10111d64 g     F .text	00000088 alt_ic_irq_enable
10106fe0 g     F .text	0000001c __vfprintf_internal
1010c8d0 g     F .text	0000005c _wctomb_r
1010eee0 g     F .text	000008fc .hidden __subdf3
10109a7c g     F .text	000000b0 __lo0bits
1011469c g     O .rwdata	00000008 alt_alarm_list
10111964 g     F .text	00000060 _do_ctors
1010c7e0 g     F .text	000000c0 wcrtomb
1010fa80 g     F .text	000000d0 close
1010fdb0 g     F .text	00000084 alt_load
1010c6c4 g     F .text	00000080 fputwc
10102e10 g     F .text	00000004 __sinit_lock_acquire
101097f0 g     F .text	00000120 __multadd
101097c8 g     F .text	00000028 _Bfree
101113d4 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10989804 	addi	r2,r2,25184
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10989804 	addi	r2,r2,25184
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6b18714 	ori	gp,gp,50716
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10988014 	ori	r2,r2,25088

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d8d814 	ori	r3,r3,25440

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010fdb00 	call	1010fdb0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010ff440 	call	1010ff44 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <Delay_Ms>:
#define LCD_WR_DATA(value)	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, 0b0000, value)

#define CLK_frequ		50000	//50 MHz/1000

void Delay_Ms(alt_u16 count_ms)
{
10100290:	defffd04 	addi	sp,sp,-12
10100294:	dfc00215 	stw	ra,8(sp)
10100298:	df000115 	stw	fp,4(sp)
1010029c:	df000104 	addi	fp,sp,4
101002a0:	2005883a 	mov	r2,r4
101002a4:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
101002a8:	00000206 	br	101002b4 <Delay_Ms+0x24>
    {
        usleep(1000);
101002ac:	0100fa04 	movi	r4,1000
101002b0:	01104a80 	call	101104a8 <usleep>

#define CLK_frequ		50000	//50 MHz/1000

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
101002b4:	e0bfff0b 	ldhu	r2,-4(fp)
101002b8:	10ffffc4 	addi	r3,r2,-1
101002bc:	e0ffff0d 	sth	r3,-4(fp)
101002c0:	10bfffcc 	andi	r2,r2,65535
101002c4:	103ff91e 	bne	r2,zero,101002ac <__alt_data_end+0xfffe02ac>
    {
        usleep(1000);
    }
}
101002c8:	0001883a 	nop
101002cc:	e037883a 	mov	sp,fp
101002d0:	dfc00117 	ldw	ra,4(sp)
101002d4:	df000017 	ldw	fp,0(sp)
101002d8:	dec00204 	addi	sp,sp,8
101002dc:	f800283a 	ret

101002e0 <LCD_init>:
			__asm__("nop");
	}

}
*/
void LCD_init() {
101002e0:	defffe04 	addi	sp,sp,-8
101002e4:	dfc00115 	stw	ra,4(sp)
101002e8:	df000015 	stw	fp,0(sp)
101002ec:	d839883a 	mov	fp,sp

	alt_u16 data1, datat2;
	alt_u16 data3, data4;

	Set_LCD_RST;
101002f0:	00c00044 	movi	r3,1
101002f4:	00840034 	movhi	r2,4096
101002f8:	10821304 	addi	r2,r2,2124
101002fc:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
10100300:	01000044 	movi	r4,1
10100304:	01002900 	call	10100290 <Delay_Ms>
	Clr_LCD_RST;
10100308:	0007883a 	mov	r3,zero
1010030c:	00840034 	movhi	r2,4096
10100310:	10821304 	addi	r2,r2,2124
10100314:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);
10100318:	01000284 	movi	r4,10
1010031c:	01002900 	call	10100290 <Delay_Ms>
	Set_LCD_RST;
10100320:	00c00044 	movi	r3,1
10100324:	00840034 	movhi	r2,4096
10100328:	10821304 	addi	r2,r2,2124
1010032c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);
10100330:	01001e04 	movi	r4,120
10100334:	01002900 	call	10100290 <Delay_Ms>

	LCD_WR_REG(0x00000011);	//Exit sleep
10100338:	00c00444 	movi	r3,17
1010033c:	00840034 	movhi	r2,4096
10100340:	10821004 	addi	r2,r2,2112
10100344:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000CF); 		//Power Control B
10100348:	00c033c4 	movi	r3,207
1010034c:	00840034 	movhi	r2,4096
10100350:	10821004 	addi	r2,r2,2112
10100354:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010000); // Always 0x00
10100358:	00c00074 	movhi	r3,1
1010035c:	00840034 	movhi	r2,4096
10100360:	10821004 	addi	r2,r2,2112
10100364:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010081); //
10100368:	00c00074 	movhi	r3,1
1010036c:	18c02044 	addi	r3,r3,129
10100370:	00840034 	movhi	r2,4096
10100374:	10821004 	addi	r2,r2,2112
10100378:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X000100c0);
1010037c:	00c00074 	movhi	r3,1
10100380:	18c03004 	addi	r3,r3,192
10100384:	00840034 	movhi	r2,4096
10100388:	10821004 	addi	r2,r2,2112
1010038c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000ED); // Power on sequence control
10100390:	00c03b44 	movi	r3,237
10100394:	00840034 	movhi	r2,4096
10100398:	10821004 	addi	r2,r2,2112
1010039c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010064); // Soft Start Keep 1 frame
101003a0:	00c00074 	movhi	r3,1
101003a4:	18c01904 	addi	r3,r3,100
101003a8:	00840034 	movhi	r2,4096
101003ac:	10821004 	addi	r2,r2,2112
101003b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00010003); //
101003b4:	00c00074 	movhi	r3,1
101003b8:	18c000c4 	addi	r3,r3,3
101003bc:	00840034 	movhi	r2,4096
101003c0:	10821004 	addi	r2,r2,2112
101003c4:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00010012);
101003c8:	00c00074 	movhi	r3,1
101003cc:	18c00484 	addi	r3,r3,18
101003d0:	00840034 	movhi	r2,4096
101003d4:	10821004 	addi	r2,r2,2112
101003d8:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00010081);
101003dc:	00c00074 	movhi	r3,1
101003e0:	18c02044 	addi	r3,r3,129
101003e4:	00840034 	movhi	r2,4096
101003e8:	10821004 	addi	r2,r2,2112
101003ec:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x000000E8); // Driver timing control A
101003f0:	00c03a04 	movi	r3,232
101003f4:	00840034 	movhi	r2,4096
101003f8:	10821004 	addi	r2,r2,2112
101003fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010085);
10100400:	00c00074 	movhi	r3,1
10100404:	18c02144 	addi	r3,r3,133
10100408:	00840034 	movhi	r2,4096
1010040c:	10821004 	addi	r2,r2,2112
10100410:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
10100414:	00c00074 	movhi	r3,1
10100418:	18c00044 	addi	r3,r3,1
1010041c:	00840034 	movhi	r2,4096
10100420:	10821004 	addi	r2,r2,2112
10100424:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010798);
10100428:	00c00074 	movhi	r3,1
1010042c:	18c1e604 	addi	r3,r3,1944
10100430:	00840034 	movhi	r2,4096
10100434:	10821004 	addi	r2,r2,2112
10100438:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000CB); // Power control A
1010043c:	00c032c4 	movi	r3,203
10100440:	00840034 	movhi	r2,4096
10100444:	10821004 	addi	r2,r2,2112
10100448:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010039);
1010044c:	00c00074 	movhi	r3,1
10100450:	18c00e44 	addi	r3,r3,57
10100454:	00840034 	movhi	r2,4096
10100458:	10821004 	addi	r2,r2,2112
1010045c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001002C);
10100460:	00c00074 	movhi	r3,1
10100464:	18c00b04 	addi	r3,r3,44
10100468:	00840034 	movhi	r2,4096
1010046c:	10821004 	addi	r2,r2,2112
10100470:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100474:	00c00074 	movhi	r3,1
10100478:	00840034 	movhi	r2,4096
1010047c:	10821004 	addi	r2,r2,2112
10100480:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010034);
10100484:	00c00074 	movhi	r3,1
10100488:	18c00d04 	addi	r3,r3,52
1010048c:	00840034 	movhi	r2,4096
10100490:	10821004 	addi	r2,r2,2112
10100494:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010002);
10100498:	00c00074 	movhi	r3,1
1010049c:	18c00084 	addi	r3,r3,2
101004a0:	00840034 	movhi	r2,4096
101004a4:	10821004 	addi	r2,r2,2112
101004a8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F7); // Pump ratio control
101004ac:	00c03dc4 	movi	r3,247
101004b0:	00840034 	movhi	r2,4096
101004b4:	10821004 	addi	r2,r2,2112
101004b8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010020);
101004bc:	00c00074 	movhi	r3,1
101004c0:	18c00804 	addi	r3,r3,32
101004c4:	00840034 	movhi	r2,4096
101004c8:	10821004 	addi	r2,r2,2112
101004cc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000EA); // Driver timing control B
101004d0:	00c03a84 	movi	r3,234
101004d4:	00840034 	movhi	r2,4096
101004d8:	10821004 	addi	r2,r2,2112
101004dc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101004e0:	00c00074 	movhi	r3,1
101004e4:	00840034 	movhi	r2,4096
101004e8:	10821004 	addi	r2,r2,2112
101004ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101004f0:	00c00074 	movhi	r3,1
101004f4:	00840034 	movhi	r2,4096
101004f8:	10821004 	addi	r2,r2,2112
101004fc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B1); // Frame Control (In Normal Mode)
10100500:	00c02c44 	movi	r3,177
10100504:	00840034 	movhi	r2,4096
10100508:	10821004 	addi	r2,r2,2112
1010050c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100510:	00c00074 	movhi	r3,1
10100514:	00840034 	movhi	r2,4096
10100518:	10821004 	addi	r2,r2,2112
1010051c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001001b);
10100520:	00c00074 	movhi	r3,1
10100524:	18c006c4 	addi	r3,r3,27
10100528:	00840034 	movhi	r2,4096
1010052c:	10821004 	addi	r2,r2,2112
10100530:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000B6); // Display Function Control
10100534:	00c02d84 	movi	r3,182
10100538:	00840034 	movhi	r2,4096
1010053c:	10821004 	addi	r2,r2,2112
10100540:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000A);
10100544:	00c00074 	movhi	r3,1
10100548:	18c00284 	addi	r3,r3,10
1010054c:	00840034 	movhi	r2,4096
10100550:	10821004 	addi	r2,r2,2112
10100554:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100A2);
10100558:	00c00074 	movhi	r3,1
1010055c:	18c02884 	addi	r3,r3,162
10100560:	00840034 	movhi	r2,4096
10100564:	10821004 	addi	r2,r2,2112
10100568:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C0); //Power control 1
1010056c:	00c03004 	movi	r3,192
10100570:	00840034 	movhi	r2,4096
10100574:	10821004 	addi	r2,r2,2112
10100578:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010005); //VRH[5:0]
1010057c:	00c00074 	movhi	r3,1
10100580:	18c00144 	addi	r3,r3,5
10100584:	00840034 	movhi	r2,4096
10100588:	10821004 	addi	r2,r2,2112
1010058c:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x000000C1); //Power control 2
10100590:	00c03044 	movi	r3,193
10100594:	00840034 	movhi	r2,4096
10100598:	10821004 	addi	r2,r2,2112
1010059c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010011); //SAP[2:0];BT[3:0]
101005a0:	00c00074 	movhi	r3,1
101005a4:	18c00444 	addi	r3,r3,17
101005a8:	00840034 	movhi	r2,4096
101005ac:	10821004 	addi	r2,r2,2112
101005b0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C5); //VCM control 1
101005b4:	00c03144 	movi	r3,197
101005b8:	00840034 	movhi	r2,4096
101005bc:	10821004 	addi	r2,r2,2112
101005c0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010045); //3F
101005c4:	00c00074 	movhi	r3,1
101005c8:	18c01144 	addi	r3,r3,69
101005cc:	00840034 	movhi	r2,4096
101005d0:	10821004 	addi	r2,r2,2112
101005d4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010045); //3
101005d8:	00c00074 	movhi	r3,1
101005dc:	18c01144 	addi	r3,r3,69
101005e0:	00840034 	movhi	r2,4096
101005e4:	10821004 	addi	r2,r2,2112
101005e8:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000C7); //VCM control 2
101005ec:	00c031c4 	movi	r3,199
101005f0:	00840034 	movhi	r2,4096
101005f4:	10821004 	addi	r2,r2,2112
101005f8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100a2);
101005fc:	00c00074 	movhi	r3,1
10100600:	18c02884 	addi	r3,r3,162
10100604:	00840034 	movhi	r2,4096
10100608:	10821004 	addi	r2,r2,2112
1010060c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000036); // Memory Access Control
10100610:	00c00d84 	movi	r3,54
10100614:	00840034 	movhi	r2,4096
10100618:	10821004 	addi	r2,r2,2112
1010061c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);// BGR order
10100620:	00c00074 	movhi	r3,1
10100624:	18c00204 	addi	r3,r3,8
10100628:	00840034 	movhi	r2,4096
1010062c:	10821004 	addi	r2,r2,2112
10100630:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000F2); // Enable 3G
10100634:	00c03c84 	movi	r3,242
10100638:	00840034 	movhi	r2,4096
1010063c:	10821004 	addi	r2,r2,2112
10100640:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000); // 3Gamma Function Disable
10100644:	00c00074 	movhi	r3,1
10100648:	00840034 	movhi	r2,4096
1010064c:	10821004 	addi	r2,r2,2112
10100650:	10c00035 	stwio	r3,0(r2)

	  LCD_WR_REG(0x00000026); // Gamma Set
10100654:	00c00984 	movi	r3,38
10100658:	00840034 	movhi	r2,4096
1010065c:	10821004 	addi	r2,r2,2112
10100660:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001); // Gamma curve selected
10100664:	00c00074 	movhi	r3,1
10100668:	18c00044 	addi	r3,r3,1
1010066c:	00840034 	movhi	r2,4096
10100670:	10821004 	addi	r2,r2,2112
10100674:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E0); // Positive Gamma Correction, Set Gamma
10100678:	00c03804 	movi	r3,224
1010067c:	00840034 	movhi	r2,4096
10100680:	10821004 	addi	r2,r2,2112
10100684:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000F);
10100688:	00c00074 	movhi	r3,1
1010068c:	18c003c4 	addi	r3,r3,15
10100690:	00840034 	movhi	r2,4096
10100694:	10821004 	addi	r2,r2,2112
10100698:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010026);
1010069c:	00c00074 	movhi	r3,1
101006a0:	18c00984 	addi	r3,r3,38
101006a4:	00840034 	movhi	r2,4096
101006a8:	10821004 	addi	r2,r2,2112
101006ac:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010024);
101006b0:	00c00074 	movhi	r3,1
101006b4:	18c00904 	addi	r3,r3,36
101006b8:	00840034 	movhi	r2,4096
101006bc:	10821004 	addi	r2,r2,2112
101006c0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000b);
101006c4:	00c00074 	movhi	r3,1
101006c8:	18c002c4 	addi	r3,r3,11
101006cc:	00840034 	movhi	r2,4096
101006d0:	10821004 	addi	r2,r2,2112
101006d4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000E);
101006d8:	00c00074 	movhi	r3,1
101006dc:	18c00384 	addi	r3,r3,14
101006e0:	00840034 	movhi	r2,4096
101006e4:	10821004 	addi	r2,r2,2112
101006e8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);
101006ec:	00c00074 	movhi	r3,1
101006f0:	18c00204 	addi	r3,r3,8
101006f4:	00840034 	movhi	r2,4096
101006f8:	10821004 	addi	r2,r2,2112
101006fc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001004b);
10100700:	00c00074 	movhi	r3,1
10100704:	18c012c4 	addi	r3,r3,75
10100708:	00840034 	movhi	r2,4096
1010070c:	10821004 	addi	r2,r2,2112
10100710:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100a8);
10100714:	00c00074 	movhi	r3,1
10100718:	18c02a04 	addi	r3,r3,168
1010071c:	00840034 	movhi	r2,4096
10100720:	10821004 	addi	r2,r2,2112
10100724:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001003b);
10100728:	00c00074 	movhi	r3,1
1010072c:	18c00ec4 	addi	r3,r3,59
10100730:	00840034 	movhi	r2,4096
10100734:	10821004 	addi	r2,r2,2112
10100738:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000a);
1010073c:	00c00074 	movhi	r3,1
10100740:	18c00284 	addi	r3,r3,10
10100744:	00840034 	movhi	r2,4096
10100748:	10821004 	addi	r2,r2,2112
1010074c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010014);
10100750:	00c00074 	movhi	r3,1
10100754:	18c00504 	addi	r3,r3,20
10100758:	00840034 	movhi	r2,4096
1010075c:	10821004 	addi	r2,r2,2112
10100760:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010006);
10100764:	00c00074 	movhi	r3,1
10100768:	18c00184 	addi	r3,r3,6
1010076c:	00840034 	movhi	r2,4096
10100770:	10821004 	addi	r2,r2,2112
10100774:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010010);
10100778:	00c00074 	movhi	r3,1
1010077c:	18c00404 	addi	r3,r3,16
10100780:	00840034 	movhi	r2,4096
10100784:	10821004 	addi	r2,r2,2112
10100788:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010009);
1010078c:	00c00074 	movhi	r3,1
10100790:	18c00244 	addi	r3,r3,9
10100794:	00840034 	movhi	r2,4096
10100798:	10821004 	addi	r2,r2,2112
1010079c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101007a0:	00c00074 	movhi	r3,1
101007a4:	00840034 	movhi	r2,4096
101007a8:	10821004 	addi	r2,r2,2112
101007ac:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000E1); //Negative Gamma Correction, Set Gamma
101007b0:	00c03844 	movi	r3,225
101007b4:	00840034 	movhi	r2,4096
101007b8:	10821004 	addi	r2,r2,2112
101007bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101007c0:	00c00074 	movhi	r3,1
101007c4:	00840034 	movhi	r2,4096
101007c8:	10821004 	addi	r2,r2,2112
101007cc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001001c);
101007d0:	00c00074 	movhi	r3,1
101007d4:	18c00704 	addi	r3,r3,28
101007d8:	00840034 	movhi	r2,4096
101007dc:	10821004 	addi	r2,r2,2112
101007e0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010020);
101007e4:	00c00074 	movhi	r3,1
101007e8:	18c00804 	addi	r3,r3,32
101007ec:	00840034 	movhi	r2,4096
101007f0:	10821004 	addi	r2,r2,2112
101007f4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010004);
101007f8:	00c00074 	movhi	r3,1
101007fc:	18c00104 	addi	r3,r3,4
10100800:	00840034 	movhi	r2,4096
10100804:	10821004 	addi	r2,r2,2112
10100808:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010010);
1010080c:	00c00074 	movhi	r3,1
10100810:	18c00404 	addi	r3,r3,16
10100814:	00840034 	movhi	r2,4096
10100818:	10821004 	addi	r2,r2,2112
1010081c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010008);
10100820:	00c00074 	movhi	r3,1
10100824:	18c00204 	addi	r3,r3,8
10100828:	00840034 	movhi	r2,4096
1010082c:	10821004 	addi	r2,r2,2112
10100830:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010034);
10100834:	00c00074 	movhi	r3,1
10100838:	18c00d04 	addi	r3,r3,52
1010083c:	00840034 	movhi	r2,4096
10100840:	10821004 	addi	r2,r2,2112
10100844:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010047);
10100848:	00c00074 	movhi	r3,1
1010084c:	18c011c4 	addi	r3,r3,71
10100850:	00840034 	movhi	r2,4096
10100854:	10821004 	addi	r2,r2,2112
10100858:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010044);
1010085c:	00c00074 	movhi	r3,1
10100860:	18c01104 	addi	r3,r3,68
10100864:	00840034 	movhi	r2,4096
10100868:	10821004 	addi	r2,r2,2112
1010086c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010005);
10100870:	00c00074 	movhi	r3,1
10100874:	18c00144 	addi	r3,r3,5
10100878:	00840034 	movhi	r2,4096
1010087c:	10821004 	addi	r2,r2,2112
10100880:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000b);
10100884:	00c00074 	movhi	r3,1
10100888:	18c002c4 	addi	r3,r3,11
1010088c:	00840034 	movhi	r2,4096
10100890:	10821004 	addi	r2,r2,2112
10100894:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010009);
10100898:	00c00074 	movhi	r3,1
1010089c:	18c00244 	addi	r3,r3,9
101008a0:	00840034 	movhi	r2,4096
101008a4:	10821004 	addi	r2,r2,2112
101008a8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001002f);
101008ac:	00c00074 	movhi	r3,1
101008b0:	18c00bc4 	addi	r3,r3,47
101008b4:	00840034 	movhi	r2,4096
101008b8:	10821004 	addi	r2,r2,2112
101008bc:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010036);
101008c0:	00c00074 	movhi	r3,1
101008c4:	18c00d84 	addi	r3,r3,54
101008c8:	00840034 	movhi	r2,4096
101008cc:	10821004 	addi	r2,r2,2112
101008d0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001000f);
101008d4:	00c00074 	movhi	r3,1
101008d8:	18c003c4 	addi	r3,r3,15
101008dc:	00840034 	movhi	r2,4096
101008e0:	10821004 	addi	r2,r2,2112
101008e4:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002A); // Column Address Set
101008e8:	00c00a84 	movi	r3,42
101008ec:	00840034 	movhi	r2,4096
101008f0:	10821004 	addi	r2,r2,2112
101008f4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101008f8:	00c00074 	movhi	r3,1
101008fc:	00840034 	movhi	r2,4096
10100900:	10821004 	addi	r2,r2,2112
10100904:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100908:	00c00074 	movhi	r3,1
1010090c:	00840034 	movhi	r2,4096
10100910:	10821004 	addi	r2,r2,2112
10100914:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
10100918:	00c00074 	movhi	r3,1
1010091c:	00840034 	movhi	r2,4096
10100920:	10821004 	addi	r2,r2,2112
10100924:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x000100ef);
10100928:	00c00074 	movhi	r3,1
1010092c:	18c03bc4 	addi	r3,r3,239
10100930:	00840034 	movhi	r2,4096
10100934:	10821004 	addi	r2,r2,2112
10100938:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000002B); // Page Address Set
1010093c:	00c00ac4 	movi	r3,43
10100940:	00840034 	movhi	r2,4096
10100944:	10821004 	addi	r2,r2,2112
10100948:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
1010094c:	00c00074 	movhi	r3,1
10100950:	00840034 	movhi	r2,4096
10100954:	10821004 	addi	r2,r2,2112
10100958:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
1010095c:	00c00074 	movhi	r3,1
10100960:	00840034 	movhi	r2,4096
10100964:	10821004 	addi	r2,r2,2112
10100968:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
1010096c:	00c00074 	movhi	r3,1
10100970:	18c00044 	addi	r3,r3,1
10100974:	00840034 	movhi	r2,4096
10100978:	10821004 	addi	r2,r2,2112
1010097c:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x0001003f);
10100980:	00c00074 	movhi	r3,1
10100984:	18c00fc4 	addi	r3,r3,63
10100988:	00840034 	movhi	r2,4096
1010098c:	10821004 	addi	r2,r2,2112
10100990:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x0000003A); // COLMOD: Pixel Format Set
10100994:	00c00e84 	movi	r3,58
10100998:	00840034 	movhi	r2,4096
1010099c:	10821004 	addi	r2,r2,2112
101009a0:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010055);
101009a4:	00c00074 	movhi	r3,1
101009a8:	18c01544 	addi	r3,r3,85
101009ac:	00840034 	movhi	r2,4096
101009b0:	10821004 	addi	r2,r2,2112
101009b4:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x000000f6); // Interface Control
101009b8:	00c03d84 	movi	r3,246
101009bc:	00840034 	movhi	r2,4096
101009c0:	10821004 	addi	r2,r2,2112
101009c4:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010001);
101009c8:	00c00074 	movhi	r3,1
101009cc:	18c00044 	addi	r3,r3,1
101009d0:	00840034 	movhi	r2,4096
101009d4:	10821004 	addi	r2,r2,2112
101009d8:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010030);
101009dc:	00c00074 	movhi	r3,1
101009e0:	18c00c04 	addi	r3,r3,48
101009e4:	00840034 	movhi	r2,4096
101009e8:	10821004 	addi	r2,r2,2112
101009ec:	10c00035 	stwio	r3,0(r2)
	 	LCD_WR_DATA(0x00010000);
101009f0:	00c00074 	movhi	r3,1
101009f4:	00840034 	movhi	r2,4096
101009f8:	10821004 	addi	r2,r2,2112
101009fc:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00000029); //display on
10100a00:	00c00a44 	movi	r3,41
10100a04:	00840034 	movhi	r2,4096
10100a08:	10821004 	addi	r2,r2,2112
10100a0c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x0000002c); // 0x2C
10100a10:	00c00b04 	movi	r3,44
10100a14:	00840034 	movhi	r2,4096
10100a18:	10821004 	addi	r2,r2,2112
10100a1c:	10c00035 	stwio	r3,0(r2)

}
10100a20:	0001883a 	nop
10100a24:	e037883a 	mov	sp,fp
10100a28:	dfc00117 	ldw	ra,4(sp)
10100a2c:	df000017 	ldw	fp,0(sp)
10100a30:	dec00204 	addi	sp,sp,8
10100a34:	f800283a 	ret

10100a38 <start_cmos>:
#include "cmos_sensor_output_generator/cmos_sensor_output_generator.h"
#include "cmos_sensor_output_generator/cmos_sensor_output_generator_regs.h"

#include "cmos_sensor_output_generator.h"

int start_cmos(void) {
10100a38:	defff704 	addi	sp,sp,-36
10100a3c:	dfc00815 	stw	ra,32(sp)
10100a40:	df000715 	stw	fp,28(sp)
10100a44:	df000704 	addi	fp,sp,28
    cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100a48:	00807804 	movi	r2,480
10100a4c:	d8800015 	stw	r2,0(sp)
10100a50:	01c0a004 	movi	r7,640
10100a54:	01800304 	movi	r6,12
10100a58:	01440034 	movhi	r5,4096
10100a5c:	29420804 	addi	r5,r5,2080
10100a60:	e13ffc04 	addi	r4,fp,-16
10100a64:	01011040 	call	10101104 <cmos_sensor_output_generator_inst>
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
    cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100a68:	e13ffc04 	addi	r4,fp,-16
10100a6c:	010117c0 	call	1010117c <cmos_sensor_output_generator_init>

    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100a70:	e13ffc04 	addi	r4,fp,-16
10100a74:	01013380 	call	10101338 <cmos_sensor_output_generator_stop>

    cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100a78:	d8000215 	stw	zero,8(sp)
10100a7c:	00800044 	movi	r2,1
10100a80:	d8800115 	stw	r2,4(sp)
10100a84:	d8000015 	stw	zero,0(sp)
10100a88:	01c00044 	movi	r7,1
10100a8c:	0180a004 	movi	r6,640
10100a90:	01407804 	movi	r5,480
10100a94:	e13ffc04 	addi	r4,fp,-16
10100a98:	01011f80 	call	101011f8 <cmos_sensor_output_generator_configure>
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

    cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100a9c:	e13ffc04 	addi	r4,fp,-16
10100aa0:	01013000 	call	10101300 <cmos_sensor_output_generator_start>

    return EXIT_SUCCESS;
10100aa4:	0005883a 	mov	r2,zero
}
10100aa8:	e037883a 	mov	sp,fp
10100aac:	dfc00117 	ldw	ra,4(sp)
10100ab0:	df000017 	ldw	fp,0(sp)
10100ab4:	dec00204 	addi	sp,sp,8
10100ab8:	f800283a 	ret

10100abc <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100abc:	defffd04 	addi	sp,sp,-12
10100ac0:	df000215 	stw	fp,8(sp)
10100ac4:	df000204 	addi	fp,sp,8
10100ac8:	e13ffe15 	stw	r4,-8(fp)
10100acc:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
10100ad0:	e0bffe17 	ldw	r2,-8(fp)
10100ad4:	e0ffff17 	ldw	r3,-4(fp)
10100ad8:	1880022e 	bgeu	r3,r2,10100ae4 <max+0x28>
        return a;
10100adc:	e0bffe17 	ldw	r2,-8(fp)
10100ae0:	00000106 	br	10100ae8 <max+0x2c>
    } else {
        return b;
10100ae4:	e0bfff17 	ldw	r2,-4(fp)
    }
}
10100ae8:	e037883a 	mov	sp,fp
10100aec:	df000017 	ldw	fp,0(sp)
10100af0:	dec00104 	addi	sp,sp,4
10100af4:	f800283a 	ret

10100af8 <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
10100af8:	defffa04 	addi	sp,sp,-24
10100afc:	dfc00515 	stw	ra,20(sp)
10100b00:	df000415 	stw	fp,16(sp)
10100b04:	df000404 	addi	fp,sp,16
10100b08:	e13ffe15 	stw	r4,-8(fp)
10100b0c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100b10:	e0bffe17 	ldw	r2,-8(fp)
10100b14:	10c00217 	ldw	r3,8(r2)
10100b18:	e0bffe17 	ldw	r2,-8(fp)
10100b1c:	10800317 	ldw	r2,12(r2)
10100b20:	100b883a 	mov	r5,r2
10100b24:	1809883a 	mov	r4,r3
10100b28:	0100abc0 	call	10100abc <max>
10100b2c:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100b30:	e0bfff17 	ldw	r2,-4(fp)
10100b34:	1004c03a 	cmpne	r2,r2,zero
10100b38:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100b3c:	e0bfff17 	ldw	r2,-4(fp)
10100b40:	e0fffc17 	ldw	r3,-16(fp)
10100b44:	1885403a 	cmpgeu	r2,r3,r2
10100b48:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100b4c:	e0bffd03 	ldbu	r2,-12(fp)
10100b50:	10000826 	beq	r2,zero,10100b74 <write_frame_width_reg+0x7c>
10100b54:	e0bffd43 	ldbu	r2,-11(fp)
10100b58:	10000626 	beq	r2,zero,10100b74 <write_frame_width_reg+0x7c>
10100b5c:	e13ffe17 	ldw	r4,-8(fp)
10100b60:	01010d00 	call	101010d0 <is_idle>
10100b64:	10803fcc 	andi	r2,r2,255
10100b68:	10000226 	beq	r2,zero,10100b74 <write_frame_width_reg+0x7c>
10100b6c:	00800044 	movi	r2,1
10100b70:	00000106 	br	10100b78 <write_frame_width_reg+0x80>
10100b74:	0005883a 	mov	r2,zero
10100b78:	e0bffd85 	stb	r2,-10(fp)
10100b7c:	e0bffd83 	ldbu	r2,-10(fp)
10100b80:	1080004c 	andi	r2,r2,1
10100b84:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100b88:	e0bffd83 	ldbu	r2,-10(fp)
10100b8c:	10000626 	beq	r2,zero,10100ba8 <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100b90:	e0bffe17 	ldw	r2,-8(fp)
10100b94:	10800017 	ldw	r2,0(r2)
10100b98:	e0ffff17 	ldw	r3,-4(fp)
10100b9c:	10c00035 	stwio	r3,0(r2)
        return true;
10100ba0:	00800044 	movi	r2,1
10100ba4:	00000106 	br	10100bac <write_frame_width_reg+0xb4>
    } else {
        return false;
10100ba8:	0005883a 	mov	r2,zero
    }
}
10100bac:	e037883a 	mov	sp,fp
10100bb0:	dfc00117 	ldw	ra,4(sp)
10100bb4:	df000017 	ldw	fp,0(sp)
10100bb8:	dec00204 	addi	sp,sp,8
10100bbc:	f800283a 	ret

10100bc0 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100bc0:	defffa04 	addi	sp,sp,-24
10100bc4:	dfc00515 	stw	ra,20(sp)
10100bc8:	df000415 	stw	fp,16(sp)
10100bcc:	df000404 	addi	fp,sp,16
10100bd0:	e13ffe15 	stw	r4,-8(fp)
10100bd4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100bd8:	e0bffe17 	ldw	r2,-8(fp)
10100bdc:	10c00217 	ldw	r3,8(r2)
10100be0:	e0bffe17 	ldw	r2,-8(fp)
10100be4:	10800317 	ldw	r2,12(r2)
10100be8:	100b883a 	mov	r5,r2
10100bec:	1809883a 	mov	r4,r3
10100bf0:	0100abc0 	call	10100abc <max>
10100bf4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
10100bf8:	e0bfff17 	ldw	r2,-4(fp)
10100bfc:	1004c03a 	cmpne	r2,r2,zero
10100c00:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
10100c04:	e0bfff17 	ldw	r2,-4(fp)
10100c08:	e0fffc17 	ldw	r3,-16(fp)
10100c0c:	1885403a 	cmpgeu	r2,r3,r2
10100c10:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100c14:	e0bffd03 	ldbu	r2,-12(fp)
10100c18:	10000826 	beq	r2,zero,10100c3c <write_frame_height_reg+0x7c>
10100c1c:	e0bffd43 	ldbu	r2,-11(fp)
10100c20:	10000626 	beq	r2,zero,10100c3c <write_frame_height_reg+0x7c>
10100c24:	e13ffe17 	ldw	r4,-8(fp)
10100c28:	01010d00 	call	101010d0 <is_idle>
10100c2c:	10803fcc 	andi	r2,r2,255
10100c30:	10000226 	beq	r2,zero,10100c3c <write_frame_height_reg+0x7c>
10100c34:	00800044 	movi	r2,1
10100c38:	00000106 	br	10100c40 <write_frame_height_reg+0x80>
10100c3c:	0005883a 	mov	r2,zero
10100c40:	e0bffd85 	stb	r2,-10(fp)
10100c44:	e0bffd83 	ldbu	r2,-10(fp)
10100c48:	1080004c 	andi	r2,r2,1
10100c4c:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100c50:	e0bffd83 	ldbu	r2,-10(fp)
10100c54:	10000726 	beq	r2,zero,10100c74 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
10100c58:	e0bffe17 	ldw	r2,-8(fp)
10100c5c:	10800017 	ldw	r2,0(r2)
10100c60:	10800104 	addi	r2,r2,4
10100c64:	e0ffff17 	ldw	r3,-4(fp)
10100c68:	10c00035 	stwio	r3,0(r2)
        return true;
10100c6c:	00800044 	movi	r2,1
10100c70:	00000106 	br	10100c78 <write_frame_height_reg+0xb8>
    } else {
        return false;
10100c74:	0005883a 	mov	r2,zero
    }
}
10100c78:	e037883a 	mov	sp,fp
10100c7c:	dfc00117 	ldw	ra,4(sp)
10100c80:	df000017 	ldw	fp,0(sp)
10100c84:	dec00204 	addi	sp,sp,8
10100c88:	f800283a 	ret

10100c8c <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100c8c:	defffa04 	addi	sp,sp,-24
10100c90:	dfc00515 	stw	ra,20(sp)
10100c94:	df000415 	stw	fp,16(sp)
10100c98:	df000404 	addi	fp,sp,16
10100c9c:	e13ffe15 	stw	r4,-8(fp)
10100ca0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100ca4:	e0bffe17 	ldw	r2,-8(fp)
10100ca8:	10c00217 	ldw	r3,8(r2)
10100cac:	e0bffe17 	ldw	r2,-8(fp)
10100cb0:	10800317 	ldw	r2,12(r2)
10100cb4:	100b883a 	mov	r5,r2
10100cb8:	1809883a 	mov	r4,r3
10100cbc:	0100abc0 	call	10100abc <max>
10100cc0:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100cc4:	e0bfff17 	ldw	r2,-4(fp)
10100cc8:	1004c03a 	cmpne	r2,r2,zero
10100ccc:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
10100cd0:	e0bfff17 	ldw	r2,-4(fp)
10100cd4:	e0fffc17 	ldw	r3,-16(fp)
10100cd8:	1885403a 	cmpgeu	r2,r3,r2
10100cdc:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100ce0:	e0bffd03 	ldbu	r2,-12(fp)
10100ce4:	10000826 	beq	r2,zero,10100d08 <write_frame_frame_blank_reg+0x7c>
10100ce8:	e0bffd43 	ldbu	r2,-11(fp)
10100cec:	10000626 	beq	r2,zero,10100d08 <write_frame_frame_blank_reg+0x7c>
10100cf0:	e13ffe17 	ldw	r4,-8(fp)
10100cf4:	01010d00 	call	101010d0 <is_idle>
10100cf8:	10803fcc 	andi	r2,r2,255
10100cfc:	10000226 	beq	r2,zero,10100d08 <write_frame_frame_blank_reg+0x7c>
10100d00:	00800044 	movi	r2,1
10100d04:	00000106 	br	10100d0c <write_frame_frame_blank_reg+0x80>
10100d08:	0005883a 	mov	r2,zero
10100d0c:	e0bffd85 	stb	r2,-10(fp)
10100d10:	e0bffd83 	ldbu	r2,-10(fp)
10100d14:	1080004c 	andi	r2,r2,1
10100d18:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100d1c:	e0bffd83 	ldbu	r2,-10(fp)
10100d20:	10000726 	beq	r2,zero,10100d40 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
10100d24:	e0bffe17 	ldw	r2,-8(fp)
10100d28:	10800017 	ldw	r2,0(r2)
10100d2c:	10800204 	addi	r2,r2,8
10100d30:	e0ffff17 	ldw	r3,-4(fp)
10100d34:	10c00035 	stwio	r3,0(r2)
        return true;
10100d38:	00800044 	movi	r2,1
10100d3c:	00000106 	br	10100d44 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100d40:	0005883a 	mov	r2,zero
    }
}
10100d44:	e037883a 	mov	sp,fp
10100d48:	dfc00117 	ldw	ra,4(sp)
10100d4c:	df000017 	ldw	fp,0(sp)
10100d50:	dec00204 	addi	sp,sp,8
10100d54:	f800283a 	ret

10100d58 <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
10100d58:	defffa04 	addi	sp,sp,-24
10100d5c:	dfc00515 	stw	ra,20(sp)
10100d60:	df000415 	stw	fp,16(sp)
10100d64:	df000404 	addi	fp,sp,16
10100d68:	e13ffe15 	stw	r4,-8(fp)
10100d6c:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100d70:	e0bffe17 	ldw	r2,-8(fp)
10100d74:	10c00217 	ldw	r3,8(r2)
10100d78:	e0bffe17 	ldw	r2,-8(fp)
10100d7c:	10800317 	ldw	r2,12(r2)
10100d80:	100b883a 	mov	r5,r2
10100d84:	1809883a 	mov	r4,r3
10100d88:	0100abc0 	call	10100abc <max>
10100d8c:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100d90:	00800044 	movi	r2,1
10100d94:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
10100d98:	e0bfff17 	ldw	r2,-4(fp)
10100d9c:	e0fffc17 	ldw	r3,-16(fp)
10100da0:	1885403a 	cmpgeu	r2,r3,r2
10100da4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100da8:	e0bffd03 	ldbu	r2,-12(fp)
10100dac:	10000826 	beq	r2,zero,10100dd0 <write_frame_line_blank_reg+0x78>
10100db0:	e0bffd43 	ldbu	r2,-11(fp)
10100db4:	10000626 	beq	r2,zero,10100dd0 <write_frame_line_blank_reg+0x78>
10100db8:	e13ffe17 	ldw	r4,-8(fp)
10100dbc:	01010d00 	call	101010d0 <is_idle>
10100dc0:	10803fcc 	andi	r2,r2,255
10100dc4:	10000226 	beq	r2,zero,10100dd0 <write_frame_line_blank_reg+0x78>
10100dc8:	00800044 	movi	r2,1
10100dcc:	00000106 	br	10100dd4 <write_frame_line_blank_reg+0x7c>
10100dd0:	0005883a 	mov	r2,zero
10100dd4:	e0bffd85 	stb	r2,-10(fp)
10100dd8:	e0bffd83 	ldbu	r2,-10(fp)
10100ddc:	1080004c 	andi	r2,r2,1
10100de0:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100de4:	e0bffd83 	ldbu	r2,-10(fp)
10100de8:	10000726 	beq	r2,zero,10100e08 <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
10100dec:	e0bffe17 	ldw	r2,-8(fp)
10100df0:	10800017 	ldw	r2,0(r2)
10100df4:	10800304 	addi	r2,r2,12
10100df8:	e0ffff17 	ldw	r3,-4(fp)
10100dfc:	10c00035 	stwio	r3,0(r2)
        return true;
10100e00:	00800044 	movi	r2,1
10100e04:	00000106 	br	10100e0c <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
10100e08:	0005883a 	mov	r2,zero
    }
}
10100e0c:	e037883a 	mov	sp,fp
10100e10:	dfc00117 	ldw	ra,4(sp)
10100e14:	df000017 	ldw	fp,0(sp)
10100e18:	dec00204 	addi	sp,sp,8
10100e1c:	f800283a 	ret

10100e20 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
10100e20:	defffa04 	addi	sp,sp,-24
10100e24:	dfc00515 	stw	ra,20(sp)
10100e28:	df000415 	stw	fp,16(sp)
10100e2c:	df000404 	addi	fp,sp,16
10100e30:	e13ffe15 	stw	r4,-8(fp)
10100e34:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100e38:	e0bffe17 	ldw	r2,-8(fp)
10100e3c:	10c00217 	ldw	r3,8(r2)
10100e40:	e0bffe17 	ldw	r2,-8(fp)
10100e44:	10800317 	ldw	r2,12(r2)
10100e48:	100b883a 	mov	r5,r2
10100e4c:	1809883a 	mov	r4,r3
10100e50:	0100abc0 	call	10100abc <max>
10100e54:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
10100e58:	e0bfff17 	ldw	r2,-4(fp)
10100e5c:	1004c03a 	cmpne	r2,r2,zero
10100e60:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
10100e64:	e0bfff17 	ldw	r2,-4(fp)
10100e68:	e0fffc17 	ldw	r3,-16(fp)
10100e6c:	1885403a 	cmpgeu	r2,r3,r2
10100e70:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100e74:	e0bffd03 	ldbu	r2,-12(fp)
10100e78:	10000826 	beq	r2,zero,10100e9c <write_line_line_blank_reg+0x7c>
10100e7c:	e0bffd43 	ldbu	r2,-11(fp)
10100e80:	10000626 	beq	r2,zero,10100e9c <write_line_line_blank_reg+0x7c>
10100e84:	e13ffe17 	ldw	r4,-8(fp)
10100e88:	01010d00 	call	101010d0 <is_idle>
10100e8c:	10803fcc 	andi	r2,r2,255
10100e90:	10000226 	beq	r2,zero,10100e9c <write_line_line_blank_reg+0x7c>
10100e94:	00800044 	movi	r2,1
10100e98:	00000106 	br	10100ea0 <write_line_line_blank_reg+0x80>
10100e9c:	0005883a 	mov	r2,zero
10100ea0:	e0bffd85 	stb	r2,-10(fp)
10100ea4:	e0bffd83 	ldbu	r2,-10(fp)
10100ea8:	1080004c 	andi	r2,r2,1
10100eac:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100eb0:	e0bffd83 	ldbu	r2,-10(fp)
10100eb4:	10000726 	beq	r2,zero,10100ed4 <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
10100eb8:	e0bffe17 	ldw	r2,-8(fp)
10100ebc:	10800017 	ldw	r2,0(r2)
10100ec0:	10800404 	addi	r2,r2,16
10100ec4:	e0ffff17 	ldw	r3,-4(fp)
10100ec8:	10c00035 	stwio	r3,0(r2)
        return true;
10100ecc:	00800044 	movi	r2,1
10100ed0:	00000106 	br	10100ed8 <write_line_line_blank_reg+0xb8>
    } else {
        return false;
10100ed4:	0005883a 	mov	r2,zero
    }
}
10100ed8:	e037883a 	mov	sp,fp
10100edc:	dfc00117 	ldw	ra,4(sp)
10100ee0:	df000017 	ldw	fp,0(sp)
10100ee4:	dec00204 	addi	sp,sp,8
10100ee8:	f800283a 	ret

10100eec <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
10100eec:	defffa04 	addi	sp,sp,-24
10100ef0:	dfc00515 	stw	ra,20(sp)
10100ef4:	df000415 	stw	fp,16(sp)
10100ef8:	df000404 	addi	fp,sp,16
10100efc:	e13ffe15 	stw	r4,-8(fp)
10100f00:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100f04:	e0bffe17 	ldw	r2,-8(fp)
10100f08:	10c00217 	ldw	r3,8(r2)
10100f0c:	e0bffe17 	ldw	r2,-8(fp)
10100f10:	10800317 	ldw	r2,12(r2)
10100f14:	100b883a 	mov	r5,r2
10100f18:	1809883a 	mov	r4,r3
10100f1c:	0100abc0 	call	10100abc <max>
10100f20:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
10100f24:	00800044 	movi	r2,1
10100f28:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100f2c:	e0bfff17 	ldw	r2,-4(fp)
10100f30:	e0fffc17 	ldw	r3,-16(fp)
10100f34:	1885403a 	cmpgeu	r2,r3,r2
10100f38:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100f3c:	e0bffd03 	ldbu	r2,-12(fp)
10100f40:	10000826 	beq	r2,zero,10100f64 <write_line_frame_blank_reg+0x78>
10100f44:	e0bffd43 	ldbu	r2,-11(fp)
10100f48:	10000626 	beq	r2,zero,10100f64 <write_line_frame_blank_reg+0x78>
10100f4c:	e13ffe17 	ldw	r4,-8(fp)
10100f50:	01010d00 	call	101010d0 <is_idle>
10100f54:	10803fcc 	andi	r2,r2,255
10100f58:	10000226 	beq	r2,zero,10100f64 <write_line_frame_blank_reg+0x78>
10100f5c:	00800044 	movi	r2,1
10100f60:	00000106 	br	10100f68 <write_line_frame_blank_reg+0x7c>
10100f64:	0005883a 	mov	r2,zero
10100f68:	e0bffd85 	stb	r2,-10(fp)
10100f6c:	e0bffd83 	ldbu	r2,-10(fp)
10100f70:	1080004c 	andi	r2,r2,1
10100f74:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100f78:	e0bffd83 	ldbu	r2,-10(fp)
10100f7c:	10000726 	beq	r2,zero,10100f9c <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
10100f80:	e0bffe17 	ldw	r2,-8(fp)
10100f84:	10800017 	ldw	r2,0(r2)
10100f88:	10800504 	addi	r2,r2,20
10100f8c:	e0ffff17 	ldw	r3,-4(fp)
10100f90:	10c00035 	stwio	r3,0(r2)
        return true;
10100f94:	00800044 	movi	r2,1
10100f98:	00000106 	br	10100fa0 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
10100f9c:	0005883a 	mov	r2,zero
    }
}
10100fa0:	e037883a 	mov	sp,fp
10100fa4:	dfc00117 	ldw	ra,4(sp)
10100fa8:	df000017 	ldw	fp,0(sp)
10100fac:	dec00204 	addi	sp,sp,8
10100fb0:	f800283a 	ret

10100fb4 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100fb4:	defffe04 	addi	sp,sp,-8
10100fb8:	df000115 	stw	fp,4(sp)
10100fbc:	df000104 	addi	fp,sp,4
10100fc0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
10100fc4:	e0bfff17 	ldw	r2,-4(fp)
10100fc8:	10800017 	ldw	r2,0(r2)
10100fcc:	10800037 	ldwio	r2,0(r2)
}
10100fd0:	e037883a 	mov	sp,fp
10100fd4:	df000017 	ldw	fp,0(sp)
10100fd8:	dec00104 	addi	sp,sp,4
10100fdc:	f800283a 	ret

10100fe0 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
10100fe0:	defffe04 	addi	sp,sp,-8
10100fe4:	df000115 	stw	fp,4(sp)
10100fe8:	df000104 	addi	fp,sp,4
10100fec:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
10100ff0:	e0bfff17 	ldw	r2,-4(fp)
10100ff4:	10800017 	ldw	r2,0(r2)
10100ff8:	10800104 	addi	r2,r2,4
10100ffc:	10800037 	ldwio	r2,0(r2)
}
10101000:	e037883a 	mov	sp,fp
10101004:	df000017 	ldw	fp,0(sp)
10101008:	dec00104 	addi	sp,sp,4
1010100c:	f800283a 	ret

10101010 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10101010:	defffe04 	addi	sp,sp,-8
10101014:	df000115 	stw	fp,4(sp)
10101018:	df000104 	addi	fp,sp,4
1010101c:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
10101020:	e0bfff17 	ldw	r2,-4(fp)
10101024:	10800017 	ldw	r2,0(r2)
10101028:	10800204 	addi	r2,r2,8
1010102c:	10800037 	ldwio	r2,0(r2)
}
10101030:	e037883a 	mov	sp,fp
10101034:	df000017 	ldw	fp,0(sp)
10101038:	dec00104 	addi	sp,sp,4
1010103c:	f800283a 	ret

10101040 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10101040:	defffe04 	addi	sp,sp,-8
10101044:	df000115 	stw	fp,4(sp)
10101048:	df000104 	addi	fp,sp,4
1010104c:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
10101050:	e0bfff17 	ldw	r2,-4(fp)
10101054:	10800017 	ldw	r2,0(r2)
10101058:	10800304 	addi	r2,r2,12
1010105c:	10800037 	ldwio	r2,0(r2)
}
10101060:	e037883a 	mov	sp,fp
10101064:	df000017 	ldw	fp,0(sp)
10101068:	dec00104 	addi	sp,sp,4
1010106c:	f800283a 	ret

10101070 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10101070:	defffe04 	addi	sp,sp,-8
10101074:	df000115 	stw	fp,4(sp)
10101078:	df000104 	addi	fp,sp,4
1010107c:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
10101080:	e0bfff17 	ldw	r2,-4(fp)
10101084:	10800017 	ldw	r2,0(r2)
10101088:	10800404 	addi	r2,r2,16
1010108c:	10800037 	ldwio	r2,0(r2)
}
10101090:	e037883a 	mov	sp,fp
10101094:	df000017 	ldw	fp,0(sp)
10101098:	dec00104 	addi	sp,sp,4
1010109c:	f800283a 	ret

101010a0 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101010a0:	defffe04 	addi	sp,sp,-8
101010a4:	df000115 	stw	fp,4(sp)
101010a8:	df000104 	addi	fp,sp,4
101010ac:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
101010b0:	e0bfff17 	ldw	r2,-4(fp)
101010b4:	10800017 	ldw	r2,0(r2)
101010b8:	10800504 	addi	r2,r2,20
101010bc:	10800037 	ldwio	r2,0(r2)
}
101010c0:	e037883a 	mov	sp,fp
101010c4:	df000017 	ldw	fp,0(sp)
101010c8:	dec00104 	addi	sp,sp,4
101010cc:	f800283a 	ret

101010d0 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101010d0:	defffe04 	addi	sp,sp,-8
101010d4:	df000115 	stw	fp,4(sp)
101010d8:	df000104 	addi	fp,sp,4
101010dc:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101010e0:	e0bfff17 	ldw	r2,-4(fp)
101010e4:	10800017 	ldw	r2,0(r2)
101010e8:	10800704 	addi	r2,r2,28
101010ec:	10800037 	ldwio	r2,0(r2)
101010f0:	10800060 	cmpeqi	r2,r2,1
}
101010f4:	e037883a 	mov	sp,fp
101010f8:	df000017 	ldw	fp,0(sp)
101010fc:	dec00104 	addi	sp,sp,4
10101100:	f800283a 	ret

10101104 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
10101104:	defff704 	addi	sp,sp,-36
10101108:	df000815 	stw	fp,32(sp)
1010110c:	df000804 	addi	fp,sp,32
10101110:	e13ffc15 	stw	r4,-16(fp)
10101114:	e17ffd15 	stw	r5,-12(fp)
10101118:	3005883a 	mov	r2,r6
1010111c:	e1ffff15 	stw	r7,-4(fp)
10101120:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
10101124:	e0bffd17 	ldw	r2,-12(fp)
10101128:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
1010112c:	e0bffe03 	ldbu	r2,-8(fp)
10101130:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10101134:	e0bfff17 	ldw	r2,-4(fp)
10101138:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
1010113c:	e0800117 	ldw	r2,4(fp)
10101140:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10101144:	e0bffc17 	ldw	r2,-16(fp)
10101148:	e0fff817 	ldw	r3,-32(fp)
1010114c:	10c00015 	stw	r3,0(r2)
10101150:	e0fff917 	ldw	r3,-28(fp)
10101154:	10c00115 	stw	r3,4(r2)
10101158:	e0fffa17 	ldw	r3,-24(fp)
1010115c:	10c00215 	stw	r3,8(r2)
10101160:	e0fffb17 	ldw	r3,-20(fp)
10101164:	10c00315 	stw	r3,12(r2)
}
10101168:	e0bffc17 	ldw	r2,-16(fp)
1010116c:	e037883a 	mov	sp,fp
10101170:	df000017 	ldw	fp,0(sp)
10101174:	dec00104 	addi	sp,sp,4
10101178:	f800283a 	ret

1010117c <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
1010117c:	defffd04 	addi	sp,sp,-12
10101180:	dfc00215 	stw	ra,8(sp)
10101184:	df000115 	stw	fp,4(sp)
10101188:	df000104 	addi	fp,sp,4
1010118c:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
10101190:	e13fff17 	ldw	r4,-4(fp)
10101194:	01013380 	call	10101338 <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
10101198:	01400044 	movi	r5,1
1010119c:	e13fff17 	ldw	r4,-4(fp)
101011a0:	0100af80 	call	10100af8 <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
101011a4:	01400044 	movi	r5,1
101011a8:	e13fff17 	ldw	r4,-4(fp)
101011ac:	0100bc00 	call	10100bc0 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
101011b0:	01400044 	movi	r5,1
101011b4:	e13fff17 	ldw	r4,-4(fp)
101011b8:	0100c8c0 	call	10100c8c <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
101011bc:	000b883a 	mov	r5,zero
101011c0:	e13fff17 	ldw	r4,-4(fp)
101011c4:	0100d580 	call	10100d58 <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
101011c8:	01400044 	movi	r5,1
101011cc:	e13fff17 	ldw	r4,-4(fp)
101011d0:	0100e200 	call	10100e20 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101011d4:	000b883a 	mov	r5,zero
101011d8:	e13fff17 	ldw	r4,-4(fp)
101011dc:	0100eec0 	call	10100eec <write_line_frame_blank_reg>
}
101011e0:	0001883a 	nop
101011e4:	e037883a 	mov	sp,fp
101011e8:	dfc00117 	ldw	ra,4(sp)
101011ec:	df000017 	ldw	fp,0(sp)
101011f0:	dec00204 	addi	sp,sp,8
101011f4:	f800283a 	ret

101011f8 <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101011f8:	defff904 	addi	sp,sp,-28
101011fc:	dfc00615 	stw	ra,24(sp)
10101200:	df000515 	stw	fp,20(sp)
10101204:	df000504 	addi	fp,sp,20
10101208:	e13ffc15 	stw	r4,-16(fp)
1010120c:	e17ffd15 	stw	r5,-12(fp)
10101210:	e1bffe15 	stw	r6,-8(fp)
10101214:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
10101218:	00800044 	movi	r2,1
1010121c:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
10101220:	e13ffc17 	ldw	r4,-16(fp)
10101224:	01013380 	call	10101338 <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
10101228:	e17ffd17 	ldw	r5,-12(fp)
1010122c:	e13ffc17 	ldw	r4,-16(fp)
10101230:	0100af80 	call	10100af8 <write_frame_width_reg>
10101234:	e0fffb03 	ldbu	r3,-20(fp)
10101238:	10803fcc 	andi	r2,r2,255
1010123c:	1884703a 	and	r2,r3,r2
10101240:	1004c03a 	cmpne	r2,r2,zero
10101244:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10101248:	e17ffe17 	ldw	r5,-8(fp)
1010124c:	e13ffc17 	ldw	r4,-16(fp)
10101250:	0100bc00 	call	10100bc0 <write_frame_height_reg>
10101254:	e0fffb03 	ldbu	r3,-20(fp)
10101258:	10803fcc 	andi	r2,r2,255
1010125c:	1884703a 	and	r2,r3,r2
10101260:	1004c03a 	cmpne	r2,r2,zero
10101264:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10101268:	e17fff17 	ldw	r5,-4(fp)
1010126c:	e13ffc17 	ldw	r4,-16(fp)
10101270:	0100c8c0 	call	10100c8c <write_frame_frame_blank_reg>
10101274:	e0fffb03 	ldbu	r3,-20(fp)
10101278:	10803fcc 	andi	r2,r2,255
1010127c:	1884703a 	and	r2,r3,r2
10101280:	1004c03a 	cmpne	r2,r2,zero
10101284:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10101288:	e1400217 	ldw	r5,8(fp)
1010128c:	e13ffc17 	ldw	r4,-16(fp)
10101290:	0100d580 	call	10100d58 <write_frame_line_blank_reg>
10101294:	e0fffb03 	ldbu	r3,-20(fp)
10101298:	10803fcc 	andi	r2,r2,255
1010129c:	1884703a 	and	r2,r3,r2
101012a0:	1004c03a 	cmpne	r2,r2,zero
101012a4:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
101012a8:	e1400317 	ldw	r5,12(fp)
101012ac:	e13ffc17 	ldw	r4,-16(fp)
101012b0:	0100e200 	call	10100e20 <write_line_line_blank_reg>
101012b4:	e0fffb03 	ldbu	r3,-20(fp)
101012b8:	10803fcc 	andi	r2,r2,255
101012bc:	1884703a 	and	r2,r3,r2
101012c0:	1004c03a 	cmpne	r2,r2,zero
101012c4:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
101012c8:	e1400417 	ldw	r5,16(fp)
101012cc:	e13ffc17 	ldw	r4,-16(fp)
101012d0:	0100eec0 	call	10100eec <write_line_frame_blank_reg>
101012d4:	e0fffb03 	ldbu	r3,-20(fp)
101012d8:	10803fcc 	andi	r2,r2,255
101012dc:	1884703a 	and	r2,r3,r2
101012e0:	1004c03a 	cmpne	r2,r2,zero
101012e4:	e0bffb05 	stb	r2,-20(fp)

    return success;
101012e8:	e0bffb03 	ldbu	r2,-20(fp)
}
101012ec:	e037883a 	mov	sp,fp
101012f0:	dfc00117 	ldw	ra,4(sp)
101012f4:	df000017 	ldw	fp,0(sp)
101012f8:	dec00204 	addi	sp,sp,8
101012fc:	f800283a 	ret

10101300 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10101300:	defffe04 	addi	sp,sp,-8
10101304:	df000115 	stw	fp,4(sp)
10101308:	df000104 	addi	fp,sp,4
1010130c:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10101310:	e0bfff17 	ldw	r2,-4(fp)
10101314:	10800017 	ldw	r2,0(r2)
10101318:	10800604 	addi	r2,r2,24
1010131c:	00c00044 	movi	r3,1
10101320:	10c00035 	stwio	r3,0(r2)
}
10101324:	0001883a 	nop
10101328:	e037883a 	mov	sp,fp
1010132c:	df000017 	ldw	fp,0(sp)
10101330:	dec00104 	addi	sp,sp,4
10101334:	f800283a 	ret

10101338 <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10101338:	defffe04 	addi	sp,sp,-8
1010133c:	df000115 	stw	fp,4(sp)
10101340:	df000104 	addi	fp,sp,4
10101344:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10101348:	e0bfff17 	ldw	r2,-4(fp)
1010134c:	10800017 	ldw	r2,0(r2)
10101350:	10800604 	addi	r2,r2,24
10101354:	0007883a 	mov	r3,zero
10101358:	10c00035 	stwio	r3,0(r2)
}
1010135c:	0001883a 	nop
10101360:	e037883a 	mov	sp,fp
10101364:	df000017 	ldw	fp,0(sp)
10101368:	dec00104 	addi	sp,sp,4
1010136c:	f800283a 	ret

10101370 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
10101370:	defffd04 	addi	sp,sp,-12
10101374:	dfc00215 	stw	ra,8(sp)
10101378:	df000115 	stw	fp,4(sp)
1010137c:	df000104 	addi	fp,sp,4
10101380:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10101384:	e13fff17 	ldw	r4,-4(fp)
10101388:	01104a80 	call	101104a8 <usleep>
#endif
}
1010138c:	0001883a 	nop
10101390:	e037883a 	mov	sp,fp
10101394:	dfc00117 	ldw	ra,4(sp)
10101398:	df000017 	ldw	fp,0(sp)
1010139c:	dec00204 	addi	sp,sp,8
101013a0:	f800283a 	ret

101013a4 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
101013a4:	defffe04 	addi	sp,sp,-8
101013a8:	df000115 	stw	fp,4(sp)
101013ac:	df000104 	addi	fp,sp,4
101013b0:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
101013b4:	0001883a 	nop
101013b8:	e0bfff17 	ldw	r2,-4(fp)
101013bc:	10800017 	ldw	r2,0(r2)
101013c0:	10800084 	addi	r2,r2,2
101013c4:	10800023 	ldbuio	r2,0(r2)
101013c8:	10803fcc 	andi	r2,r2,255
101013cc:	1080020c 	andi	r2,r2,8
101013d0:	103ff91e 	bne	r2,zero,101013b8 <__alt_data_end+0xfffe13b8>
}
101013d4:	0001883a 	nop
101013d8:	e037883a 	mov	sp,fp
101013dc:	df000017 	ldw	fp,0(sp)
101013e0:	dec00104 	addi	sp,sp,4
101013e4:	f800283a 	ret

101013e8 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
101013e8:	defffb04 	addi	sp,sp,-20
101013ec:	dfc00415 	stw	ra,16(sp)
101013f0:	df000315 	stw	fp,12(sp)
101013f4:	df000304 	addi	fp,sp,12
101013f8:	e13ffd15 	stw	r4,-12(fp)
101013fc:	2807883a 	mov	r3,r5
10101400:	3005883a 	mov	r2,r6
10101404:	e0fffe05 	stb	r3,-8(fp)
10101408:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
1010140c:	e13ffd17 	ldw	r4,-12(fp)
10101410:	01013a40 	call	101013a4 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
10101414:	e0bffd17 	ldw	r2,-12(fp)
10101418:	10800017 	ldw	r2,0(r2)
1010141c:	e0fffe03 	ldbu	r3,-8(fp)
10101420:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10101424:	e0bffd17 	ldw	r2,-12(fp)
10101428:	10800017 	ldw	r2,0(r2)
1010142c:	10800044 	addi	r2,r2,1
10101430:	e0ffff03 	ldbu	r3,-4(fp)
10101434:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10101438:	e13ffd17 	ldw	r4,-12(fp)
1010143c:	01013a40 	call	101013a4 <wait_end_of_transfer>
}
10101440:	0001883a 	nop
10101444:	e037883a 	mov	sp,fp
10101448:	dfc00117 	ldw	ra,4(sp)
1010144c:	df000017 	ldw	fp,0(sp)
10101450:	dec00204 	addi	sp,sp,8
10101454:	f800283a 	ret

10101458 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10101458:	defffc04 	addi	sp,sp,-16
1010145c:	dfc00315 	stw	ra,12(sp)
10101460:	df000215 	stw	fp,8(sp)
10101464:	df000204 	addi	fp,sp,8
10101468:	e13ffe15 	stw	r4,-8(fp)
1010146c:	2805883a 	mov	r2,r5
10101470:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10101474:	e13ffe17 	ldw	r4,-8(fp)
10101478:	01013a40 	call	101013a4 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
1010147c:	e0bffe17 	ldw	r2,-8(fp)
10101480:	10800017 	ldw	r2,0(r2)
10101484:	10800044 	addi	r2,r2,1
10101488:	e0ffff03 	ldbu	r3,-4(fp)
1010148c:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10101490:	e13ffe17 	ldw	r4,-8(fp)
10101494:	01013a40 	call	101013a4 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10101498:	e0bffe17 	ldw	r2,-8(fp)
1010149c:	10800017 	ldw	r2,0(r2)
101014a0:	10800023 	ldbuio	r2,0(r2)
101014a4:	10803fcc 	andi	r2,r2,255
}
101014a8:	e037883a 	mov	sp,fp
101014ac:	dfc00117 	ldw	ra,4(sp)
101014b0:	df000017 	ldw	fp,0(sp)
101014b4:	dec00204 	addi	sp,sp,8
101014b8:	f800283a 	ret

101014bc <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
101014bc:	defffd04 	addi	sp,sp,-12
101014c0:	df000215 	stw	fp,8(sp)
101014c4:	df000204 	addi	fp,sp,8
101014c8:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
101014cc:	e0bfff17 	ldw	r2,-4(fp)
101014d0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
101014d4:	e0bffe17 	ldw	r2,-8(fp)
}
101014d8:	e037883a 	mov	sp,fp
101014dc:	df000017 	ldw	fp,0(sp)
101014e0:	dec00104 	addi	sp,sp,4
101014e4:	f800283a 	ret

101014e8 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
101014e8:	defffb04 	addi	sp,sp,-20
101014ec:	dfc00415 	stw	ra,16(sp)
101014f0:	df000315 	stw	fp,12(sp)
101014f4:	dc000215 	stw	r16,8(sp)
101014f8:	df000304 	addi	fp,sp,12
101014fc:	e13ffd15 	stw	r4,-12(fp)
10101500:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10101504:	e0bffd17 	ldw	r2,-12(fp)
10101508:	10800017 	ldw	r2,0(r2)
1010150c:	140000c4 	addi	r16,r2,3
10101510:	e0bffe17 	ldw	r2,-8(fp)
10101514:	014001b4 	movhi	r5,6
10101518:	2946a004 	addi	r5,r5,6784
1010151c:	1009883a 	mov	r4,r2
10101520:	01026400 	call	10102640 <__udivsi3>
10101524:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10101528:	0104e204 	movi	r4,5000
1010152c:	01013700 	call	10101370 <i2c_usleep>
}
10101530:	0001883a 	nop
10101534:	e6ffff04 	addi	sp,fp,-4
10101538:	dfc00217 	ldw	ra,8(sp)
1010153c:	df000117 	ldw	fp,4(sp)
10101540:	dc000017 	ldw	r16,0(sp)
10101544:	dec00304 	addi	sp,sp,12
10101548:	f800283a 	ret

1010154c <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
1010154c:	defffc04 	addi	sp,sp,-16
10101550:	df000315 	stw	fp,12(sp)
10101554:	df000304 	addi	fp,sp,12
10101558:	e13ffe15 	stw	r4,-8(fp)
1010155c:	2805883a 	mov	r2,r5
10101560:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10101564:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10101568:	e0bfff03 	ldbu	r2,-4(fp)
1010156c:	10000426 	beq	r2,zero,10101580 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10101570:	e0bffd17 	ldw	r2,-12(fp)
10101574:	10800814 	ori	r2,r2,32
10101578:	e0bffd15 	stw	r2,-12(fp)
1010157c:	00000406 	br	10101590 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10101580:	e0fffd17 	ldw	r3,-12(fp)
10101584:	00bff7c4 	movi	r2,-33
10101588:	1884703a 	and	r2,r3,r2
1010158c:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101590:	e0bffe17 	ldw	r2,-8(fp)
10101594:	10800017 	ldw	r2,0(r2)
10101598:	10800044 	addi	r2,r2,1
1010159c:	00c00084 	movi	r3,2
101015a0:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
101015a4:	e0bffe17 	ldw	r2,-8(fp)
101015a8:	10800017 	ldw	r2,0(r2)
101015ac:	10800044 	addi	r2,r2,1
101015b0:	e0fffd17 	ldw	r3,-12(fp)
101015b4:	10c00025 	stbio	r3,0(r2)
}
101015b8:	0001883a 	nop
101015bc:	e037883a 	mov	sp,fp
101015c0:	df000017 	ldw	fp,0(sp)
101015c4:	dec00104 	addi	sp,sp,4
101015c8:	f800283a 	ret

101015cc <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
101015cc:	defffa04 	addi	sp,sp,-24
101015d0:	dfc00515 	stw	ra,20(sp)
101015d4:	df000415 	stw	fp,16(sp)
101015d8:	df000404 	addi	fp,sp,16
101015dc:	e13ffc15 	stw	r4,-16(fp)
101015e0:	2809883a 	mov	r4,r5
101015e4:	3007883a 	mov	r3,r6
101015e8:	3805883a 	mov	r2,r7
101015ec:	e13ffd05 	stb	r4,-12(fp)
101015f0:	e0fffe05 	stb	r3,-8(fp)
101015f4:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101015f8:	e0bffd03 	ldbu	r2,-12(fp)
101015fc:	10803f8c 	andi	r2,r2,254
10101600:	01800504 	movi	r6,20
10101604:	100b883a 	mov	r5,r2
10101608:	e13ffc17 	ldw	r4,-16(fp)
1010160c:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101610:	e0bffc17 	ldw	r2,-16(fp)
10101614:	10800017 	ldw	r2,0(r2)
10101618:	10800084 	addi	r2,r2,2
1010161c:	10800023 	ldbuio	r2,0(r2)
10101620:	10803fcc 	andi	r2,r2,255
10101624:	1080004c 	andi	r2,r2,1
10101628:	10000726 	beq	r2,zero,10101648 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010162c:	e0bffc17 	ldw	r2,-16(fp)
10101630:	10800017 	ldw	r2,0(r2)
10101634:	10800044 	addi	r2,r2,1
10101638:	00c00084 	movi	r3,2
1010163c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101640:	00800044 	movi	r2,1
10101644:	00002706 	br	101016e4 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101648:	e0bffe03 	ldbu	r2,-8(fp)
1010164c:	01800404 	movi	r6,16
10101650:	100b883a 	mov	r5,r2
10101654:	e13ffc17 	ldw	r4,-16(fp)
10101658:	01013e80 	call	101013e8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010165c:	e0bffc17 	ldw	r2,-16(fp)
10101660:	10800017 	ldw	r2,0(r2)
10101664:	10800084 	addi	r2,r2,2
10101668:	10800023 	ldbuio	r2,0(r2)
1010166c:	10803fcc 	andi	r2,r2,255
10101670:	1080004c 	andi	r2,r2,1
10101674:	10000726 	beq	r2,zero,10101694 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101678:	e0bffc17 	ldw	r2,-16(fp)
1010167c:	10800017 	ldw	r2,0(r2)
10101680:	10800044 	addi	r2,r2,1
10101684:	00c00084 	movi	r3,2
10101688:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
1010168c:	00800084 	movi	r2,2
10101690:	00001406 	br	101016e4 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101694:	e0bfff03 	ldbu	r2,-4(fp)
10101698:	01800484 	movi	r6,18
1010169c:	100b883a 	mov	r5,r2
101016a0:	e13ffc17 	ldw	r4,-16(fp)
101016a4:	01013e80 	call	101013e8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101016a8:	e0bffc17 	ldw	r2,-16(fp)
101016ac:	10800017 	ldw	r2,0(r2)
101016b0:	10800084 	addi	r2,r2,2
101016b4:	10800023 	ldbuio	r2,0(r2)
101016b8:	10803fcc 	andi	r2,r2,255
101016bc:	1080004c 	andi	r2,r2,1
101016c0:	10000726 	beq	r2,zero,101016e0 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101016c4:	e0bffc17 	ldw	r2,-16(fp)
101016c8:	10800017 	ldw	r2,0(r2)
101016cc:	10800044 	addi	r2,r2,1
101016d0:	00c00084 	movi	r3,2
101016d4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101016d8:	00800084 	movi	r2,2
101016dc:	00000106 	br	101016e4 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
101016e0:	0005883a 	mov	r2,zero
}
101016e4:	e037883a 	mov	sp,fp
101016e8:	dfc00117 	ldw	ra,4(sp)
101016ec:	df000017 	ldw	fp,0(sp)
101016f0:	dec00204 	addi	sp,sp,8
101016f4:	f800283a 	ret

101016f8 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
101016f8:	defffa04 	addi	sp,sp,-24
101016fc:	dfc00515 	stw	ra,20(sp)
10101700:	df000415 	stw	fp,16(sp)
10101704:	df000404 	addi	fp,sp,16
10101708:	e13ffc15 	stw	r4,-16(fp)
1010170c:	2807883a 	mov	r3,r5
10101710:	3005883a 	mov	r2,r6
10101714:	e1ffff15 	stw	r7,-4(fp)
10101718:	e0fffd05 	stb	r3,-12(fp)
1010171c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101720:	e0bffd03 	ldbu	r2,-12(fp)
10101724:	10803f8c 	andi	r2,r2,254
10101728:	01800504 	movi	r6,20
1010172c:	100b883a 	mov	r5,r2
10101730:	e13ffc17 	ldw	r4,-16(fp)
10101734:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101738:	e0bffc17 	ldw	r2,-16(fp)
1010173c:	10800017 	ldw	r2,0(r2)
10101740:	10800084 	addi	r2,r2,2
10101744:	10800023 	ldbuio	r2,0(r2)
10101748:	10803fcc 	andi	r2,r2,255
1010174c:	1080004c 	andi	r2,r2,1
10101750:	10000726 	beq	r2,zero,10101770 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101754:	e0bffc17 	ldw	r2,-16(fp)
10101758:	10800017 	ldw	r2,0(r2)
1010175c:	10800044 	addi	r2,r2,1
10101760:	00c00084 	movi	r3,2
10101764:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101768:	00800044 	movi	r2,1
1010176c:	00002f06 	br	1010182c <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101770:	e0bffe03 	ldbu	r2,-8(fp)
10101774:	01800404 	movi	r6,16
10101778:	100b883a 	mov	r5,r2
1010177c:	e13ffc17 	ldw	r4,-16(fp)
10101780:	01013e80 	call	101013e8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101784:	e0bffc17 	ldw	r2,-16(fp)
10101788:	10800017 	ldw	r2,0(r2)
1010178c:	10800084 	addi	r2,r2,2
10101790:	10800023 	ldbuio	r2,0(r2)
10101794:	10803fcc 	andi	r2,r2,255
10101798:	1080004c 	andi	r2,r2,1
1010179c:	10000726 	beq	r2,zero,101017bc <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101017a0:	e0bffc17 	ldw	r2,-16(fp)
101017a4:	10800017 	ldw	r2,0(r2)
101017a8:	10800044 	addi	r2,r2,1
101017ac:	00c00084 	movi	r3,2
101017b0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101017b4:	00800084 	movi	r2,2
101017b8:	00001c06 	br	1010182c <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101017bc:	e0bffd03 	ldbu	r2,-12(fp)
101017c0:	10800054 	ori	r2,r2,1
101017c4:	10803fcc 	andi	r2,r2,255
101017c8:	01800504 	movi	r6,20
101017cc:	100b883a 	mov	r5,r2
101017d0:	e13ffc17 	ldw	r4,-16(fp)
101017d4:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101017d8:	e0bffc17 	ldw	r2,-16(fp)
101017dc:	10800017 	ldw	r2,0(r2)
101017e0:	10800084 	addi	r2,r2,2
101017e4:	10800023 	ldbuio	r2,0(r2)
101017e8:	10803fcc 	andi	r2,r2,255
101017ec:	1080004c 	andi	r2,r2,1
101017f0:	10000726 	beq	r2,zero,10101810 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101017f4:	e0bffc17 	ldw	r2,-16(fp)
101017f8:	10800017 	ldw	r2,0(r2)
101017fc:	10800044 	addi	r2,r2,1
10101800:	00c00084 	movi	r3,2
10101804:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101808:	00800044 	movi	r2,1
1010180c:	00000706 	br	1010182c <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101810:	014002c4 	movi	r5,11
10101814:	e13ffc17 	ldw	r4,-16(fp)
10101818:	01014580 	call	10101458 <get_data_set_control>
1010181c:	1007883a 	mov	r3,r2
10101820:	e0bfff17 	ldw	r2,-4(fp)
10101824:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10101828:	0005883a 	mov	r2,zero
}
1010182c:	e037883a 	mov	sp,fp
10101830:	dfc00117 	ldw	ra,4(sp)
10101834:	df000017 	ldw	fp,0(sp)
10101838:	dec00204 	addi	sp,sp,8
1010183c:	f800283a 	ret

10101840 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10101840:	defff904 	addi	sp,sp,-28
10101844:	dfc00615 	stw	ra,24(sp)
10101848:	df000515 	stw	fp,20(sp)
1010184c:	df000504 	addi	fp,sp,20
10101850:	e13ffc15 	stw	r4,-16(fp)
10101854:	2807883a 	mov	r3,r5
10101858:	3005883a 	mov	r2,r6
1010185c:	e1ffff15 	stw	r7,-4(fp)
10101860:	e0fffd05 	stb	r3,-12(fp)
10101864:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101868:	e0bffd03 	ldbu	r2,-12(fp)
1010186c:	10803f8c 	andi	r2,r2,254
10101870:	01800504 	movi	r6,20
10101874:	100b883a 	mov	r5,r2
10101878:	e13ffc17 	ldw	r4,-16(fp)
1010187c:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101880:	e0bffc17 	ldw	r2,-16(fp)
10101884:	10800017 	ldw	r2,0(r2)
10101888:	10800084 	addi	r2,r2,2
1010188c:	10800023 	ldbuio	r2,0(r2)
10101890:	10803fcc 	andi	r2,r2,255
10101894:	1080004c 	andi	r2,r2,1
10101898:	10000726 	beq	r2,zero,101018b8 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010189c:	e0bffc17 	ldw	r2,-16(fp)
101018a0:	10800017 	ldw	r2,0(r2)
101018a4:	10800044 	addi	r2,r2,1
101018a8:	00c00084 	movi	r3,2
101018ac:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101018b0:	00800044 	movi	r2,1
101018b4:	00004206 	br	101019c0 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
101018b8:	e0bffe03 	ldbu	r2,-8(fp)
101018bc:	01800404 	movi	r6,16
101018c0:	100b883a 	mov	r5,r2
101018c4:	e13ffc17 	ldw	r4,-16(fp)
101018c8:	01013e80 	call	101013e8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101018cc:	e0bffc17 	ldw	r2,-16(fp)
101018d0:	10800017 	ldw	r2,0(r2)
101018d4:	10800084 	addi	r2,r2,2
101018d8:	10800023 	ldbuio	r2,0(r2)
101018dc:	10803fcc 	andi	r2,r2,255
101018e0:	1080004c 	andi	r2,r2,1
101018e4:	10000726 	beq	r2,zero,10101904 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101018e8:	e0bffc17 	ldw	r2,-16(fp)
101018ec:	10800017 	ldw	r2,0(r2)
101018f0:	10800044 	addi	r2,r2,1
101018f4:	00c00084 	movi	r3,2
101018f8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101018fc:	00800084 	movi	r2,2
10101900:	00002f06 	br	101019c0 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10101904:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10101908:	e03ffb15 	stw	zero,-20(fp)
1010190c:	00002806 	br	101019b0 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
10101910:	e0800217 	ldw	r2,8(fp)
10101914:	10bfffc4 	addi	r2,r2,-1
10101918:	e0fffb17 	ldw	r3,-20(fp)
1010191c:	18800a2e 	bgeu	r3,r2,10101948 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10101920:	e0ffff17 	ldw	r3,-4(fp)
10101924:	e0bffb17 	ldw	r2,-20(fp)
10101928:	1885883a 	add	r2,r3,r2
1010192c:	10800003 	ldbu	r2,0(r2)
10101930:	10803fcc 	andi	r2,r2,255
10101934:	01800404 	movi	r6,16
10101938:	100b883a 	mov	r5,r2
1010193c:	e13ffc17 	ldw	r4,-16(fp)
10101940:	01013e80 	call	101013e8 <set_data_control>
10101944:	00000906 	br	1010196c <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101948:	e0ffff17 	ldw	r3,-4(fp)
1010194c:	e0bffb17 	ldw	r2,-20(fp)
10101950:	1885883a 	add	r2,r3,r2
10101954:	10800003 	ldbu	r2,0(r2)
10101958:	10803fcc 	andi	r2,r2,255
1010195c:	01800484 	movi	r6,18
10101960:	100b883a 	mov	r5,r2
10101964:	e13ffc17 	ldw	r4,-16(fp)
10101968:	01013e80 	call	101013e8 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010196c:	e0bffc17 	ldw	r2,-16(fp)
10101970:	10800017 	ldw	r2,0(r2)
10101974:	10800084 	addi	r2,r2,2
10101978:	10800023 	ldbuio	r2,0(r2)
1010197c:	10803fcc 	andi	r2,r2,255
10101980:	1080004c 	andi	r2,r2,1
10101984:	10000726 	beq	r2,zero,101019a4 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101988:	e0bffc17 	ldw	r2,-16(fp)
1010198c:	10800017 	ldw	r2,0(r2)
10101990:	10800044 	addi	r2,r2,1
10101994:	00c00084 	movi	r3,2
10101998:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
1010199c:	00800084 	movi	r2,2
101019a0:	00000706 	br	101019c0 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
101019a4:	e0bffb17 	ldw	r2,-20(fp)
101019a8:	10800044 	addi	r2,r2,1
101019ac:	e0bffb15 	stw	r2,-20(fp)
101019b0:	e0fffb17 	ldw	r3,-20(fp)
101019b4:	e0800217 	ldw	r2,8(fp)
101019b8:	18bfd536 	bltu	r3,r2,10101910 <__alt_data_end+0xfffe1910>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
101019bc:	0005883a 	mov	r2,zero
}
101019c0:	e037883a 	mov	sp,fp
101019c4:	dfc00117 	ldw	ra,4(sp)
101019c8:	df000017 	ldw	fp,0(sp)
101019cc:	dec00204 	addi	sp,sp,8
101019d0:	f800283a 	ret

101019d4 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
101019d4:	defff804 	addi	sp,sp,-32
101019d8:	dfc00715 	stw	ra,28(sp)
101019dc:	df000615 	stw	fp,24(sp)
101019e0:	dc000515 	stw	r16,20(sp)
101019e4:	df000604 	addi	fp,sp,24
101019e8:	e13ffb15 	stw	r4,-20(fp)
101019ec:	2807883a 	mov	r3,r5
101019f0:	3005883a 	mov	r2,r6
101019f4:	e1fffe15 	stw	r7,-8(fp)
101019f8:	e0fffc05 	stb	r3,-16(fp)
101019fc:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101a00:	e0bffc03 	ldbu	r2,-16(fp)
10101a04:	10803f8c 	andi	r2,r2,254
10101a08:	01800504 	movi	r6,20
10101a0c:	100b883a 	mov	r5,r2
10101a10:	e13ffb17 	ldw	r4,-20(fp)
10101a14:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101a18:	e0bffb17 	ldw	r2,-20(fp)
10101a1c:	10800017 	ldw	r2,0(r2)
10101a20:	10800084 	addi	r2,r2,2
10101a24:	10800023 	ldbuio	r2,0(r2)
10101a28:	10803fcc 	andi	r2,r2,255
10101a2c:	1080004c 	andi	r2,r2,1
10101a30:	10000726 	beq	r2,zero,10101a50 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101a34:	e0bffb17 	ldw	r2,-20(fp)
10101a38:	10800017 	ldw	r2,0(r2)
10101a3c:	10800044 	addi	r2,r2,1
10101a40:	00c00084 	movi	r3,2
10101a44:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101a48:	00800044 	movi	r2,1
10101a4c:	00004506 	br	10101b64 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101a50:	e0bffd03 	ldbu	r2,-12(fp)
10101a54:	01800404 	movi	r6,16
10101a58:	100b883a 	mov	r5,r2
10101a5c:	e13ffb17 	ldw	r4,-20(fp)
10101a60:	01013e80 	call	101013e8 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101a64:	e0bffb17 	ldw	r2,-20(fp)
10101a68:	10800017 	ldw	r2,0(r2)
10101a6c:	10800084 	addi	r2,r2,2
10101a70:	10800023 	ldbuio	r2,0(r2)
10101a74:	10803fcc 	andi	r2,r2,255
10101a78:	1080004c 	andi	r2,r2,1
10101a7c:	10000726 	beq	r2,zero,10101a9c <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101a80:	e0bffb17 	ldw	r2,-20(fp)
10101a84:	10800017 	ldw	r2,0(r2)
10101a88:	10800044 	addi	r2,r2,1
10101a8c:	00c00084 	movi	r3,2
10101a90:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101a94:	00800084 	movi	r2,2
10101a98:	00003206 	br	10101b64 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101a9c:	e0bffc03 	ldbu	r2,-16(fp)
10101aa0:	10800054 	ori	r2,r2,1
10101aa4:	10803fcc 	andi	r2,r2,255
10101aa8:	01800504 	movi	r6,20
10101aac:	100b883a 	mov	r5,r2
10101ab0:	e13ffb17 	ldw	r4,-20(fp)
10101ab4:	01013e80 	call	101013e8 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101ab8:	e0bffb17 	ldw	r2,-20(fp)
10101abc:	10800017 	ldw	r2,0(r2)
10101ac0:	10800084 	addi	r2,r2,2
10101ac4:	10800023 	ldbuio	r2,0(r2)
10101ac8:	10803fcc 	andi	r2,r2,255
10101acc:	1080004c 	andi	r2,r2,1
10101ad0:	10000726 	beq	r2,zero,10101af0 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101ad4:	e0bffb17 	ldw	r2,-20(fp)
10101ad8:	10800017 	ldw	r2,0(r2)
10101adc:	10800044 	addi	r2,r2,1
10101ae0:	00c00084 	movi	r3,2
10101ae4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101ae8:	00800044 	movi	r2,1
10101aec:	00001d06 	br	10101b64 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10101af0:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10101af4:	e03ffa15 	stw	zero,-24(fp)
10101af8:	00001606 	br	10101b54 <i2c_read_array+0x180>
        if (i < size - 1) {
10101afc:	e0800217 	ldw	r2,8(fp)
10101b00:	10bfffc4 	addi	r2,r2,-1
10101b04:	e0fffa17 	ldw	r3,-24(fp)
10101b08:	1880082e 	bgeu	r3,r2,10101b2c <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
10101b0c:	e0fffe17 	ldw	r3,-8(fp)
10101b10:	e0bffa17 	ldw	r2,-24(fp)
10101b14:	18a1883a 	add	r16,r3,r2
10101b18:	01400204 	movi	r5,8
10101b1c:	e13ffb17 	ldw	r4,-20(fp)
10101b20:	01014580 	call	10101458 <get_data_set_control>
10101b24:	80800005 	stb	r2,0(r16)
10101b28:	00000706 	br	10101b48 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101b2c:	e0fffe17 	ldw	r3,-8(fp)
10101b30:	e0bffa17 	ldw	r2,-24(fp)
10101b34:	18a1883a 	add	r16,r3,r2
10101b38:	014002c4 	movi	r5,11
10101b3c:	e13ffb17 	ldw	r4,-20(fp)
10101b40:	01014580 	call	10101458 <get_data_set_control>
10101b44:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101b48:	e0bffa17 	ldw	r2,-24(fp)
10101b4c:	10800044 	addi	r2,r2,1
10101b50:	e0bffa15 	stw	r2,-24(fp)
10101b54:	e0fffa17 	ldw	r3,-24(fp)
10101b58:	e0800217 	ldw	r2,8(fp)
10101b5c:	18bfe736 	bltu	r3,r2,10101afc <__alt_data_end+0xfffe1afc>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10101b60:	0005883a 	mov	r2,zero
}
10101b64:	e6ffff04 	addi	sp,fp,-4
10101b68:	dfc00217 	ldw	ra,8(sp)
10101b6c:	df000117 	ldw	fp,4(sp)
10101b70:	dc000017 	ldw	r16,0(sp)
10101b74:	dec00304 	addi	sp,sp,12
10101b78:	f800283a 	ret

10101b7c <trdb_d5m_write>:
#include <stdint.h>
#include <stdlib.h>

#include "i2c/i2c.h"

bool trdb_d5m_write(i2c_dev *i2c, uint8_t register_offset, uint16_t data) {
10101b7c:	defff804 	addi	sp,sp,-32
10101b80:	dfc00715 	stw	ra,28(sp)
10101b84:	df000615 	stw	fp,24(sp)
10101b88:	df000604 	addi	fp,sp,24
10101b8c:	e13ffd15 	stw	r4,-12(fp)
10101b90:	2807883a 	mov	r3,r5
10101b94:	3005883a 	mov	r2,r6
10101b98:	e0fffe05 	stb	r3,-8(fp)
10101b9c:	e0bfff0d 	sth	r2,-4(fp)
    uint8_t byte_data[2] = {(data >> 8) & 0xff, data & 0xff};
10101ba0:	e0bfff0b 	ldhu	r2,-4(fp)
10101ba4:	1004d23a 	srli	r2,r2,8
10101ba8:	e0bffc05 	stb	r2,-16(fp)
10101bac:	e0bfff0b 	ldhu	r2,-4(fp)
10101bb0:	e0bffc45 	stb	r2,-15(fp)

    int success = i2c_write_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10101bb4:	e0fffe03 	ldbu	r3,-8(fp)
10101bb8:	e13ffc04 	addi	r4,fp,-16
10101bbc:	00800084 	movi	r2,2
10101bc0:	d8800015 	stw	r2,0(sp)
10101bc4:	200f883a 	mov	r7,r4
10101bc8:	180d883a 	mov	r6,r3
10101bcc:	01402e84 	movi	r5,186
10101bd0:	e13ffd17 	ldw	r4,-12(fp)
10101bd4:	01018400 	call	10101840 <i2c_write_array>
10101bd8:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10101bdc:	e0bffb17 	ldw	r2,-20(fp)
10101be0:	10000226 	beq	r2,zero,10101bec <trdb_d5m_write+0x70>
        return false;
10101be4:	0005883a 	mov	r2,zero
10101be8:	00000106 	br	10101bf0 <trdb_d5m_write+0x74>
    } else {
        return true;
10101bec:	00800044 	movi	r2,1
    }
}
10101bf0:	e037883a 	mov	sp,fp
10101bf4:	dfc00117 	ldw	ra,4(sp)
10101bf8:	df000017 	ldw	fp,0(sp)
10101bfc:	dec00204 	addi	sp,sp,8
10101c00:	f800283a 	ret

10101c04 <trdb_d5m_read>:

bool trdb_d5m_read(i2c_dev *i2c, uint8_t register_offset, uint16_t *data) {
10101c04:	defff804 	addi	sp,sp,-32
10101c08:	dfc00715 	stw	ra,28(sp)
10101c0c:	df000615 	stw	fp,24(sp)
10101c10:	df000604 	addi	fp,sp,24
10101c14:	e13ffd15 	stw	r4,-12(fp)
10101c18:	2805883a 	mov	r2,r5
10101c1c:	e1bfff15 	stw	r6,-4(fp)
10101c20:	e0bffe05 	stb	r2,-8(fp)
    uint8_t byte_data[2] = {0, 0};
10101c24:	e03ffc05 	stb	zero,-16(fp)
10101c28:	e03ffc45 	stb	zero,-15(fp)

    int success = i2c_read_array(i2c, TRDB_D5M_I2C_ADDRESS, register_offset, byte_data, sizeof(byte_data));
10101c2c:	e0fffe03 	ldbu	r3,-8(fp)
10101c30:	e13ffc04 	addi	r4,fp,-16
10101c34:	00800084 	movi	r2,2
10101c38:	d8800015 	stw	r2,0(sp)
10101c3c:	200f883a 	mov	r7,r4
10101c40:	180d883a 	mov	r6,r3
10101c44:	01402e84 	movi	r5,186
10101c48:	e13ffd17 	ldw	r4,-12(fp)
10101c4c:	01019d40 	call	101019d4 <i2c_read_array>
10101c50:	e0bffb15 	stw	r2,-20(fp)

    if (success != I2C_SUCCESS) {
10101c54:	e0bffb17 	ldw	r2,-20(fp)
10101c58:	10000226 	beq	r2,zero,10101c64 <trdb_d5m_read+0x60>
        return false;
10101c5c:	0005883a 	mov	r2,zero
10101c60:	00000b06 	br	10101c90 <trdb_d5m_read+0x8c>
    } else {
        *data = ((uint16_t) byte_data[0] << 8) + byte_data[1];
10101c64:	e0bffc03 	ldbu	r2,-16(fp)
10101c68:	10803fcc 	andi	r2,r2,255
10101c6c:	1004923a 	slli	r2,r2,8
10101c70:	1007883a 	mov	r3,r2
10101c74:	e0bffc43 	ldbu	r2,-15(fp)
10101c78:	10803fcc 	andi	r2,r2,255
10101c7c:	1885883a 	add	r2,r3,r2
10101c80:	1007883a 	mov	r3,r2
10101c84:	e0bfff17 	ldw	r2,-4(fp)
10101c88:	10c0000d 	sth	r3,0(r2)
        return true;
10101c8c:	00800044 	movi	r2,1
    }
}
10101c90:	e037883a 	mov	sp,fp
10101c94:	dfc00117 	ldw	ra,4(sp)
10101c98:	df000017 	ldw	fp,0(sp)
10101c9c:	dec00204 	addi	sp,sp,8
10101ca0:	f800283a 	ret

10101ca4 <configure_camera>:

int configure_camera(void) {
10101ca4:	defffb04 	addi	sp,sp,-20
10101ca8:	dfc00415 	stw	ra,16(sp)
10101cac:	df000315 	stw	fp,12(sp)
10101cb0:	df000304 	addi	fp,sp,12
    i2c_dev i2c = i2c_inst((void *) TRDB_D5M_0_I2C_0_BASE);
10101cb4:	01040034 	movhi	r4,4096
10101cb8:	21020204 	addi	r4,r4,2056
10101cbc:	01014bc0 	call	101014bc <i2c_inst>
10101cc0:	e0bffe15 	stw	r2,-8(fp)
    i2c_init(&i2c, I2C_FREQ);
10101cc4:	e0bffe04 	addi	r2,fp,-8
10101cc8:	0140bef4 	movhi	r5,763
10101ccc:	297c2004 	addi	r5,r5,-3968
10101cd0:	1009883a 	mov	r4,r2
10101cd4:	01014e80 	call	101014e8 <i2c_init>

    bool success = true;
10101cd8:	00800044 	movi	r2,1
10101cdc:	e0bffd05 	stb	r2,-12(fp)
    uint16_t writedata = 0;
10101ce0:	e03ffd8d 	sth	zero,-10(fp)

    //Makes correct values available at rising edge of PIXCLK
	writedata = 1 << 15;
10101ce4:	00a00004 	movi	r2,-32768
10101ce8:	e0bffd8d 	sth	r2,-10(fp)
	success &= trdb_d5m_write(&i2c, 0x00A, writedata);
10101cec:	e0fffd8b 	ldhu	r3,-10(fp)
10101cf0:	e0bffe04 	addi	r2,fp,-8
10101cf4:	180d883a 	mov	r6,r3
10101cf8:	01400284 	movi	r5,10
10101cfc:	1009883a 	mov	r4,r2
10101d00:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101d04:	e0fffd03 	ldbu	r3,-12(fp)
10101d08:	10803fcc 	andi	r2,r2,255
10101d0c:	1884703a 	and	r2,r3,r2
10101d10:	1004c03a 	cmpne	r2,r2,zero
10101d14:	e0bffd05 	stb	r2,-12(fp)
	//Sets row size
	writedata = 1919;
10101d18:	0081dfc4 	movi	r2,1919
10101d1c:	e0bffd8d 	sth	r2,-10(fp)
	//writedata = 479;
	success &= trdb_d5m_write(&i2c, 0x003, writedata);
10101d20:	e0fffd8b 	ldhu	r3,-10(fp)
10101d24:	e0bffe04 	addi	r2,fp,-8
10101d28:	180d883a 	mov	r6,r3
10101d2c:	014000c4 	movi	r5,3
10101d30:	1009883a 	mov	r4,r2
10101d34:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101d38:	e0fffd03 	ldbu	r3,-12(fp)
10101d3c:	10803fcc 	andi	r2,r2,255
10101d40:	1884703a 	and	r2,r3,r2
10101d44:	1004c03a 	cmpne	r2,r2,zero
10101d48:	e0bffd05 	stb	r2,-12(fp)
	//Sets column size
	writedata = 2559;
10101d4c:	00827fc4 	movi	r2,2559
10101d50:	e0bffd8d 	sth	r2,-10(fp)
	//writedata = 639;
	success &= trdb_d5m_write(&i2c, 0x004, writedata);
10101d54:	e0fffd8b 	ldhu	r3,-10(fp)
10101d58:	e0bffe04 	addi	r2,fp,-8
10101d5c:	180d883a 	mov	r6,r3
10101d60:	01400104 	movi	r5,4
10101d64:	1009883a 	mov	r4,r2
10101d68:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101d6c:	e0fffd03 	ldbu	r3,-12(fp)
10101d70:	10803fcc 	andi	r2,r2,255
10101d74:	1884703a 	and	r2,r3,r2
10101d78:	1004c03a 	cmpne	r2,r2,zero
10101d7c:	e0bffd05 	stb	r2,-12(fp)
	//Sets binning and skipping to 3 for rows and columns
	writedata = 0b110011;
10101d80:	00800cc4 	movi	r2,51
10101d84:	e0bffd8d 	sth	r2,-10(fp)
	//writedata = 0;
	success &= trdb_d5m_write(&i2c, 0x022, writedata);
10101d88:	e0fffd8b 	ldhu	r3,-10(fp)
10101d8c:	e0bffe04 	addi	r2,fp,-8
10101d90:	180d883a 	mov	r6,r3
10101d94:	01400884 	movi	r5,34
10101d98:	1009883a 	mov	r4,r2
10101d9c:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101da0:	e0fffd03 	ldbu	r3,-12(fp)
10101da4:	10803fcc 	andi	r2,r2,255
10101da8:	1884703a 	and	r2,r3,r2
10101dac:	1004c03a 	cmpne	r2,r2,zero
10101db0:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_write(&i2c, 0x023, writedata);
10101db4:	e0fffd8b 	ldhu	r3,-10(fp)
10101db8:	e0bffe04 	addi	r2,fp,-8
10101dbc:	180d883a 	mov	r6,r3
10101dc0:	014008c4 	movi	r5,35
10101dc4:	1009883a 	mov	r4,r2
10101dc8:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101dcc:	e0fffd03 	ldbu	r3,-12(fp)
10101dd0:	10803fcc 	andi	r2,r2,255
10101dd4:	1884703a 	and	r2,r3,r2
10101dd8:	1004c03a 	cmpne	r2,r2,zero
10101ddc:	e0bffd05 	stb	r2,-12(fp)
	//Sets Horizontal Blank
	writedata = 906u;
10101de0:	0080e284 	movi	r2,906
10101de4:	e0bffd8d 	sth	r2,-10(fp)
	success &= trdb_d5m_write(&i2c, 0x005, writedata);
10101de8:	e0fffd8b 	ldhu	r3,-10(fp)
10101dec:	e0bffe04 	addi	r2,fp,-8
10101df0:	180d883a 	mov	r6,r3
10101df4:	01400144 	movi	r5,5
10101df8:	1009883a 	mov	r4,r2
10101dfc:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101e00:	e0fffd03 	ldbu	r3,-12(fp)
10101e04:	10803fcc 	andi	r2,r2,255
10101e08:	1884703a 	and	r2,r3,r2
10101e0c:	1004c03a 	cmpne	r2,r2,zero
10101e10:	e0bffd05 	stb	r2,-12(fp)

	//Test part
    success &= trdb_d5m_write(&i2c, 0x0A0, 1);		// Vertical Monochrome bars
10101e14:	e0bffe04 	addi	r2,fp,-8
10101e18:	01800044 	movi	r6,1
10101e1c:	01402804 	movi	r5,160
10101e20:	1009883a 	mov	r4,r2
10101e24:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101e28:	e0fffd03 	ldbu	r3,-12(fp)
10101e2c:	10803fcc 	andi	r2,r2,255
10101e30:	1884703a 	and	r2,r3,r2
10101e34:	1004c03a 	cmpne	r2,r2,zero
10101e38:	e0bffd05 	stb	r2,-12(fp)
    success &= trdb_d5m_write(&i2c, 0x0A1, 0);		// Green
10101e3c:	e0bffe04 	addi	r2,fp,-8
10101e40:	000d883a 	mov	r6,zero
10101e44:	01402844 	movi	r5,161
10101e48:	1009883a 	mov	r4,r2
10101e4c:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101e50:	e0fffd03 	ldbu	r3,-12(fp)
10101e54:	10803fcc 	andi	r2,r2,255
10101e58:	1884703a 	and	r2,r3,r2
10101e5c:	1004c03a 	cmpne	r2,r2,zero
10101e60:	e0bffd05 	stb	r2,-12(fp)
    success &= trdb_d5m_write(&i2c, 0x0A2, 0);		// Red
10101e64:	e0bffe04 	addi	r2,fp,-8
10101e68:	000d883a 	mov	r6,zero
10101e6c:	01402884 	movi	r5,162
10101e70:	1009883a 	mov	r4,r2
10101e74:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101e78:	e0fffd03 	ldbu	r3,-12(fp)
10101e7c:	10803fcc 	andi	r2,r2,255
10101e80:	1884703a 	and	r2,r3,r2
10101e84:	1004c03a 	cmpne	r2,r2,zero
10101e88:	e0bffd05 	stb	r2,-12(fp)
    success &= trdb_d5m_write(&i2c, 0x0A3, 0);		// Blue
10101e8c:	e0bffe04 	addi	r2,fp,-8
10101e90:	000d883a 	mov	r6,zero
10101e94:	014028c4 	movi	r5,163
10101e98:	1009883a 	mov	r4,r2
10101e9c:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101ea0:	e0fffd03 	ldbu	r3,-12(fp)
10101ea4:	10803fcc 	andi	r2,r2,255
10101ea8:	1884703a 	and	r2,r3,r2
10101eac:	1004c03a 	cmpne	r2,r2,zero
10101eb0:	e0bffd05 	stb	r2,-12(fp)
    success &= trdb_d5m_write(&i2c, 0x0A4, 0);		// bar width
10101eb4:	e0bffe04 	addi	r2,fp,-8
10101eb8:	000d883a 	mov	r6,zero
10101ebc:	01402904 	movi	r5,164
10101ec0:	1009883a 	mov	r4,r2
10101ec4:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101ec8:	e0fffd03 	ldbu	r3,-12(fp)
10101ecc:	10803fcc 	andi	r2,r2,255
10101ed0:	1884703a 	and	r2,r3,r2
10101ed4:	1004c03a 	cmpne	r2,r2,zero
10101ed8:	e0bffd05 	stb	r2,-12(fp)
    success &= trdb_d5m_write(&i2c, 0x062, 0<<1);	//Disable BLC
10101edc:	e0bffe04 	addi	r2,fp,-8
10101ee0:	000d883a 	mov	r6,zero
10101ee4:	01401884 	movi	r5,98
10101ee8:	1009883a 	mov	r4,r2
10101eec:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101ef0:	e0fffd03 	ldbu	r3,-12(fp)
10101ef4:	10803fcc 	andi	r2,r2,255
10101ef8:	1884703a 	and	r2,r3,r2
10101efc:	1004c03a 	cmpne	r2,r2,zero
10101f00:	e0bffd05 	stb	r2,-12(fp)

    //Restart a new frame
    writedata = 1;
10101f04:	00800044 	movi	r2,1
10101f08:	e0bffd8d 	sth	r2,-10(fp)
    success &= trdb_d5m_write(&i2c, 0x00B, writedata);
10101f0c:	e0fffd8b 	ldhu	r3,-10(fp)
10101f10:	e0bffe04 	addi	r2,fp,-8
10101f14:	180d883a 	mov	r6,r3
10101f18:	014002c4 	movi	r5,11
10101f1c:	1009883a 	mov	r4,r2
10101f20:	0101b7c0 	call	10101b7c <trdb_d5m_write>
10101f24:	e0fffd03 	ldbu	r3,-12(fp)
10101f28:	10803fcc 	andi	r2,r2,255
10101f2c:	1884703a 	and	r2,r3,r2
10101f30:	1004c03a 	cmpne	r2,r2,zero
10101f34:	e0bffd05 	stb	r2,-12(fp)

    /* read from registers, put data in readdata */
	uint16_t readdata = 0;
10101f38:	e03fff0d 	sth	zero,-4(fp)
	success &= trdb_d5m_read(&i2c, 0x03, &readdata);
10101f3c:	e0ffff04 	addi	r3,fp,-4
10101f40:	e0bffe04 	addi	r2,fp,-8
10101f44:	180d883a 	mov	r6,r3
10101f48:	014000c4 	movi	r5,3
10101f4c:	1009883a 	mov	r4,r2
10101f50:	0101c040 	call	10101c04 <trdb_d5m_read>
10101f54:	e0fffd03 	ldbu	r3,-12(fp)
10101f58:	10803fcc 	andi	r2,r2,255
10101f5c:	1884703a 	and	r2,r3,r2
10101f60:	1004c03a 	cmpne	r2,r2,zero
10101f64:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x04, &readdata);
10101f68:	e0ffff04 	addi	r3,fp,-4
10101f6c:	e0bffe04 	addi	r2,fp,-8
10101f70:	180d883a 	mov	r6,r3
10101f74:	01400104 	movi	r5,4
10101f78:	1009883a 	mov	r4,r2
10101f7c:	0101c040 	call	10101c04 <trdb_d5m_read>
10101f80:	e0fffd03 	ldbu	r3,-12(fp)
10101f84:	10803fcc 	andi	r2,r2,255
10101f88:	1884703a 	and	r2,r3,r2
10101f8c:	1004c03a 	cmpne	r2,r2,zero
10101f90:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x22, &readdata);
10101f94:	e0ffff04 	addi	r3,fp,-4
10101f98:	e0bffe04 	addi	r2,fp,-8
10101f9c:	180d883a 	mov	r6,r3
10101fa0:	01400884 	movi	r5,34
10101fa4:	1009883a 	mov	r4,r2
10101fa8:	0101c040 	call	10101c04 <trdb_d5m_read>
10101fac:	e0fffd03 	ldbu	r3,-12(fp)
10101fb0:	10803fcc 	andi	r2,r2,255
10101fb4:	1884703a 	and	r2,r3,r2
10101fb8:	1004c03a 	cmpne	r2,r2,zero
10101fbc:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x23, &readdata);
10101fc0:	e0ffff04 	addi	r3,fp,-4
10101fc4:	e0bffe04 	addi	r2,fp,-8
10101fc8:	180d883a 	mov	r6,r3
10101fcc:	014008c4 	movi	r5,35
10101fd0:	1009883a 	mov	r4,r2
10101fd4:	0101c040 	call	10101c04 <trdb_d5m_read>
10101fd8:	e0fffd03 	ldbu	r3,-12(fp)
10101fdc:	10803fcc 	andi	r2,r2,255
10101fe0:	1884703a 	and	r2,r3,r2
10101fe4:	1004c03a 	cmpne	r2,r2,zero
10101fe8:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x00A, &readdata);
10101fec:	e0ffff04 	addi	r3,fp,-4
10101ff0:	e0bffe04 	addi	r2,fp,-8
10101ff4:	180d883a 	mov	r6,r3
10101ff8:	01400284 	movi	r5,10
10101ffc:	1009883a 	mov	r4,r2
10102000:	0101c040 	call	10101c04 <trdb_d5m_read>
10102004:	e0fffd03 	ldbu	r3,-12(fp)
10102008:	10803fcc 	andi	r2,r2,255
1010200c:	1884703a 	and	r2,r3,r2
10102010:	1004c03a 	cmpne	r2,r2,zero
10102014:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x005, &readdata);
10102018:	e0ffff04 	addi	r3,fp,-4
1010201c:	e0bffe04 	addi	r2,fp,-8
10102020:	180d883a 	mov	r6,r3
10102024:	01400144 	movi	r5,5
10102028:	1009883a 	mov	r4,r2
1010202c:	0101c040 	call	10101c04 <trdb_d5m_read>
10102030:	e0fffd03 	ldbu	r3,-12(fp)
10102034:	10803fcc 	andi	r2,r2,255
10102038:	1884703a 	and	r2,r3,r2
1010203c:	1004c03a 	cmpne	r2,r2,zero
10102040:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x0A0, &readdata);
10102044:	e0ffff04 	addi	r3,fp,-4
10102048:	e0bffe04 	addi	r2,fp,-8
1010204c:	180d883a 	mov	r6,r3
10102050:	01402804 	movi	r5,160
10102054:	1009883a 	mov	r4,r2
10102058:	0101c040 	call	10101c04 <trdb_d5m_read>
1010205c:	e0fffd03 	ldbu	r3,-12(fp)
10102060:	10803fcc 	andi	r2,r2,255
10102064:	1884703a 	and	r2,r3,r2
10102068:	1004c03a 	cmpne	r2,r2,zero
1010206c:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x0A1, &readdata);
10102070:	e0ffff04 	addi	r3,fp,-4
10102074:	e0bffe04 	addi	r2,fp,-8
10102078:	180d883a 	mov	r6,r3
1010207c:	01402844 	movi	r5,161
10102080:	1009883a 	mov	r4,r2
10102084:	0101c040 	call	10101c04 <trdb_d5m_read>
10102088:	e0fffd03 	ldbu	r3,-12(fp)
1010208c:	10803fcc 	andi	r2,r2,255
10102090:	1884703a 	and	r2,r3,r2
10102094:	1004c03a 	cmpne	r2,r2,zero
10102098:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x0A2, &readdata);
1010209c:	e0ffff04 	addi	r3,fp,-4
101020a0:	e0bffe04 	addi	r2,fp,-8
101020a4:	180d883a 	mov	r6,r3
101020a8:	01402884 	movi	r5,162
101020ac:	1009883a 	mov	r4,r2
101020b0:	0101c040 	call	10101c04 <trdb_d5m_read>
101020b4:	e0fffd03 	ldbu	r3,-12(fp)
101020b8:	10803fcc 	andi	r2,r2,255
101020bc:	1884703a 	and	r2,r3,r2
101020c0:	1004c03a 	cmpne	r2,r2,zero
101020c4:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x0A3, &readdata);
101020c8:	e0ffff04 	addi	r3,fp,-4
101020cc:	e0bffe04 	addi	r2,fp,-8
101020d0:	180d883a 	mov	r6,r3
101020d4:	014028c4 	movi	r5,163
101020d8:	1009883a 	mov	r4,r2
101020dc:	0101c040 	call	10101c04 <trdb_d5m_read>
101020e0:	e0fffd03 	ldbu	r3,-12(fp)
101020e4:	10803fcc 	andi	r2,r2,255
101020e8:	1884703a 	and	r2,r3,r2
101020ec:	1004c03a 	cmpne	r2,r2,zero
101020f0:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x0A4, &readdata);
101020f4:	e0ffff04 	addi	r3,fp,-4
101020f8:	e0bffe04 	addi	r2,fp,-8
101020fc:	180d883a 	mov	r6,r3
10102100:	01402904 	movi	r5,164
10102104:	1009883a 	mov	r4,r2
10102108:	0101c040 	call	10101c04 <trdb_d5m_read>
1010210c:	e0fffd03 	ldbu	r3,-12(fp)
10102110:	10803fcc 	andi	r2,r2,255
10102114:	1884703a 	and	r2,r3,r2
10102118:	1004c03a 	cmpne	r2,r2,zero
1010211c:	e0bffd05 	stb	r2,-12(fp)
	success &= trdb_d5m_read(&i2c, 0x062, &readdata);
10102120:	e0ffff04 	addi	r3,fp,-4
10102124:	e0bffe04 	addi	r2,fp,-8
10102128:	180d883a 	mov	r6,r3
1010212c:	01401884 	movi	r5,98
10102130:	1009883a 	mov	r4,r2
10102134:	0101c040 	call	10101c04 <trdb_d5m_read>
10102138:	e0fffd03 	ldbu	r3,-12(fp)
1010213c:	10803fcc 	andi	r2,r2,255
10102140:	1884703a 	and	r2,r3,r2
10102144:	1004c03a 	cmpne	r2,r2,zero
10102148:	e0bffd05 	stb	r2,-12(fp)


    if (success) {
1010214c:	e0bffd03 	ldbu	r2,-12(fp)
10102150:	10000226 	beq	r2,zero,1010215c <configure_camera+0x4b8>
        return EXIT_SUCCESS;
10102154:	0005883a 	mov	r2,zero
10102158:	00000106 	br	10102160 <configure_camera+0x4bc>
    } else {
        return EXIT_FAILURE;
1010215c:	00800044 	movi	r2,1
    }
}
10102160:	e037883a 	mov	sp,fp
10102164:	dfc00117 	ldw	ra,4(sp)
10102168:	df000017 	ldw	fp,0(sp)
1010216c:	dec00204 	addi	sp,sp,8
10102170:	f800283a 	ret

10102174 <main0>:
#define IREGENABLE 2
#define IREGBURST 3
#define IREGLIGHT 4
#define CAMERA_CTRL_BASE (0x10000840)

int main0(void) {
10102174:	defffd04 	addi	sp,sp,-12
10102178:	dfc00215 	stw	ra,8(sp)
1010217c:	df000115 	stw	fp,4(sp)
10102180:	df000104 	addi	fp,sp,4

	//Starts the cmos_output_generator
	start_cmos();
10102184:	0100a380 	call	10100a38 <start_cmos>

	//Writes in Camera_Ctrl registers
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGADR * 4, HPS_0_BRIDGES_BASE_1);		// sets the start address of the frame in memory
10102188:	0007883a 	mov	r3,zero
1010218c:	00840034 	movhi	r2,4096
10102190:	10821004 	addi	r2,r2,2112
10102194:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGBURST * 4, 16);						// sets the length of the burst to transfer in words of 32 bits
10102198:	00c00404 	movi	r3,16
1010219c:	00840034 	movhi	r2,4096
101021a0:	10821304 	addi	r2,r2,2124
101021a4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLENGTH * 4, 38400);					// sets the length of one frame in memory in number of 32 bit words
101021a8:	00e58014 	movui	r3,38400
101021ac:	00840034 	movhi	r2,4096
101021b0:	10821104 	addi	r2,r2,2116
101021b4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLIGHT * 4, 0);						// sets the lighting conditions of the camera
101021b8:	0007883a 	mov	r3,zero
101021bc:	00840034 	movhi	r2,4096
101021c0:	10821404 	addi	r2,r2,2128
101021c4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);						// sets the state of the camera interface to enable
101021c8:	00c00044 	movi	r3,1
101021cc:	00840034 	movhi	r2,4096
101021d0:	10821204 	addi	r2,r2,2120
101021d4:	10c00035 	stwio	r3,0(r2)

	volatile unsigned int read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
101021d8:	00840034 	movhi	r2,4096
101021dc:	10821204 	addi	r2,r2,2120
101021e0:	10800037 	ldwio	r2,0(r2)
101021e4:	e0bfff15 	stw	r2,-4(fp)

	// Waits that the first frame is written in memory
	while(read_enable == 1){
101021e8:	00000406 	br	101021fc <main0+0x88>
		read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
101021ec:	00840034 	movhi	r2,4096
101021f0:	10821204 	addi	r2,r2,2120
101021f4:	10800037 	ldwio	r2,0(r2)
101021f8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);						// sets the state of the camera interface to enable

	volatile unsigned int read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);

	// Waits that the first frame is written in memory
	while(read_enable == 1){
101021fc:	e0bfff17 	ldw	r2,-4(fp)
10102200:	10800060 	cmpeqi	r2,r2,1
10102204:	103ff91e 	bne	r2,zero,101021ec <__alt_data_end+0xfffe21ec>
		read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
	}

	//Reads the first frame in memory
	read_memory(HPS_0_BRIDGES_BASE_1, "/mnt/host/image_1_cmos.ppm");
10102208:	01440474 	movhi	r5,4113
1010220c:	2949df04 	addi	r5,r5,10108
10102210:	0009883a 	mov	r4,zero
10102214:	01023b40 	call	101023b4 <read_memory>

	//Changes the start address for the next frame and enables camera acquisition again
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGADR * 4, HPS_0_BRIDGES_BASE_2);
10102218:	00c007f4 	movhi	r3,31
1010221c:	18e12004 	addi	r3,r3,-31616
10102220:	00840034 	movhi	r2,4096
10102224:	10821004 	addi	r2,r2,2112
10102228:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);
1010222c:	00c00044 	movi	r3,1
10102230:	00840034 	movhi	r2,4096
10102234:	10821204 	addi	r2,r2,2120
10102238:	10c00035 	stwio	r3,0(r2)

	read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
1010223c:	00840034 	movhi	r2,4096
10102240:	10821204 	addi	r2,r2,2120
10102244:	10800037 	ldwio	r2,0(r2)
10102248:	e0bfff15 	stw	r2,-4(fp)

	// Waits that the second frame is written in memory
	while(read_enable == 1){
1010224c:	00000406 	br	10102260 <main0+0xec>
			read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
10102250:	00840034 	movhi	r2,4096
10102254:	10821204 	addi	r2,r2,2120
10102258:	10800037 	ldwio	r2,0(r2)
1010225c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);

	read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);

	// Waits that the second frame is written in memory
	while(read_enable == 1){
10102260:	e0bfff17 	ldw	r2,-4(fp)
10102264:	10800060 	cmpeqi	r2,r2,1
10102268:	103ff91e 	bne	r2,zero,10102250 <__alt_data_end+0xfffe2250>
			read_enable = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
	}

	//Reads the second frame in memory
	read_memory(HPS_0_BRIDGES_BASE_2, "/mnt/host/image_2_cmos.ppm");
1010226c:	01440474 	movhi	r5,4113
10102270:	2949e604 	addi	r5,r5,10136
10102274:	010007f4 	movhi	r4,31
10102278:	21212004 	addi	r4,r4,-31616
1010227c:	01023b40 	call	101023b4 <read_memory>

	return EXIT_SUCCESS;
10102280:	0005883a 	mov	r2,zero
}
10102284:	e037883a 	mov	sp,fp
10102288:	dfc00117 	ldw	ra,4(sp)
1010228c:	df000017 	ldw	fp,0(sp)
10102290:	dec00204 	addi	sp,sp,8
10102294:	f800283a 	ret

10102298 <main>:
#define COMMAND_REG 	0b00
#define IMAGE_READ_REG 	0b1000
#define DISPLAY_COMMAND 0x0000002C
#define NOP_COMMAND		0x00000000

int main(void) {
10102298:	defff804 	addi	sp,sp,-32
1010229c:	dfc00715 	stw	ra,28(sp)
101022a0:	df000615 	stw	fp,24(sp)
101022a4:	df000604 	addi	fp,sp,24

	//initialize the LCD
	LCD_init();
101022a8:	01002e00 	call	101002e0 <LCD_init>

	//Configures the camera
	configure_camera();
101022ac:	0101ca40 	call	10101ca4 <configure_camera>

	//Writes in Camera_Ctrl registers
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGADR * 4, HPS_0_BRIDGES_BASE_1);		// sets the start address of the frame in memory
101022b0:	0007883a 	mov	r3,zero
101022b4:	00840034 	movhi	r2,4096
101022b8:	10821004 	addi	r2,r2,2112
101022bc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGBURST * 4, 1);						// sets the length of the burst to transfer in words of 32 bits
101022c0:	00c00044 	movi	r3,1
101022c4:	00840034 	movhi	r2,4096
101022c8:	10821304 	addi	r2,r2,2124
101022cc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLENGTH * 4, 38400);					// sets the length of one frame in memory in number of 32 bit words
101022d0:	00e58014 	movui	r3,38400
101022d4:	00840034 	movhi	r2,4096
101022d8:	10821104 	addi	r2,r2,2116
101022dc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGLIGHT * 4, 1);						// sets the lighting conditions of the camera
101022e0:	00c00044 	movi	r3,1
101022e4:	00840034 	movhi	r2,4096
101022e8:	10821404 	addi	r2,r2,2128
101022ec:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);						// sets the state of the camera interface to enable
101022f0:	00c00044 	movi	r3,1
101022f4:	00840034 	movhi	r2,4096
101022f8:	10821204 	addi	r2,r2,2120
101022fc:	10c00035 	stwio	r3,0(r2)

	IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG, 0);
10102300:	0007883a 	mov	r3,zero
10102304:	00840034 	movhi	r2,4096
10102308:	10821204 	addi	r2,r2,2120
1010230c:	10c00035 	stwio	r3,0(r2)

	volatile unsigned int enable_camera = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
10102310:	00840034 	movhi	r2,4096
10102314:	10821204 	addi	r2,r2,2120
10102318:	10800037 	ldwio	r2,0(r2)
1010231c:	e0bffa15 	stw	r2,-24(fp)

	//tells the LCD to display the written image
	//IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, ADDRESS_REG, HPS_0_BRIDGES_BASE_1);
	//IOWR_32DIRECT(LCD_CONTROLLER_0_BASE, COMMAND_REG, DISPLAY_COMMAND);
	volatile unsigned int image_read_lcd = IORD_32DIRECT(LCD_CONTROLLER_0_BASE, IMAGE_READ_REG);
10102320:	00840034 	movhi	r2,4096
10102324:	10821204 	addi	r2,r2,2120
10102328:	10800037 	ldwio	r2,0(r2)
1010232c:	e0bffb15 	stw	r2,-20(fp)

	volatile unsigned int img_1_written = 1;
10102330:	00800044 	movi	r2,1
10102334:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int img_2_written = 0;
10102338:	e03ffd15 	stw	zero,-12(fp)
	volatile unsigned int img_1_read = 1;
1010233c:	00800044 	movi	r2,1
10102340:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int img_2_read = 0;
10102344:	e03fff15 	stw	zero,-4(fp)
				}
			}
		}
	}*/

	while(enable_camera == 1){
10102348:	00000406 	br	1010235c <main+0xc4>
		enable_camera = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
1010234c:	00840034 	movhi	r2,4096
10102350:	10821204 	addi	r2,r2,2120
10102354:	10800037 	ldwio	r2,0(r2)
10102358:	e0bffa15 	stw	r2,-24(fp)
				}
			}
		}
	}*/

	while(enable_camera == 1){
1010235c:	e0bffa17 	ldw	r2,-24(fp)
10102360:	10800060 	cmpeqi	r2,r2,1
10102364:	103ff91e 	bne	r2,zero,1010234c <__alt_data_end+0xfffe234c>
		enable_camera = IORD_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4);
	}

	//Reads the first frame in memory
	read_memory(HPS_0_BRIDGES_BASE_1, "/mnt/host/image_1_camera.ppm");
10102368:	01440474 	movhi	r5,4113
1010236c:	2949ed04 	addi	r5,r5,10164
10102370:	0009883a 	mov	r4,zero
10102374:	01023b40 	call	101023b4 <read_memory>

	//Changes the start address for the next frame and enables camera acquisition again
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGADR * 4, HPS_0_BRIDGES_BASE_2);
10102378:	00c007f4 	movhi	r3,31
1010237c:	18e12004 	addi	r3,r3,-31616
10102380:	00840034 	movhi	r2,4096
10102384:	10821004 	addi	r2,r2,2112
10102388:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CAMERA_CTRL_BASE, IREGENABLE * 4, 1);
1010238c:	00c00044 	movi	r3,1
10102390:	00840034 	movhi	r2,4096
10102394:	10821204 	addi	r2,r2,2120
10102398:	10c00035 	stwio	r3,0(r2)
	}

	//Reads the second frame in memory
	read_memory(HPS_0_BRIDGES_BASE_2, "/mnt/host/image_2_camera.ppm");
	*/
	return EXIT_SUCCESS;
1010239c:	0005883a 	mov	r2,zero
}
101023a0:	e037883a 	mov	sp,fp
101023a4:	dfc00117 	ldw	ra,4(sp)
101023a8:	df000017 	ldw	fp,0(sp)
101023ac:	dec00204 	addi	sp,sp,8
101023b0:	f800283a 	ret

101023b4 <read_memory>:
#include "io.h"
#include "system.h"

#include "memory_access.h"

int read_memory(uint32_t base_address_memory, char* filename) {
101023b4:	defff604 	addi	sp,sp,-40
101023b8:	dfc00915 	stw	ra,36(sp)
101023bc:	df000815 	stw	fp,32(sp)
101023c0:	df000804 	addi	fp,sp,32
101023c4:	e13ffe15 	stw	r4,-8(fp)
101023c8:	e17fff15 	stw	r5,-4(fp)

    FILE *foutput = fopen(filename, "w");
101023cc:	01440474 	movhi	r5,4113
101023d0:	2949f504 	addi	r5,r5,10196
101023d4:	e13fff17 	ldw	r4,-4(fp)
101023d8:	0102f3c0 	call	10102f3c <fopen>
101023dc:	e0bffa15 	stw	r2,-24(fp)
    if (!foutput) {
101023e0:	e0bffa17 	ldw	r2,-24(fp)
101023e4:	1000061e 	bne	r2,zero,10102400 <read_memory+0x4c>
     printf("Error: could not open \"%s\" for writing\n", filename);
101023e8:	e17fff17 	ldw	r5,-4(fp)
101023ec:	01040474 	movhi	r4,4113
101023f0:	2109f604 	addi	r4,r4,10200
101023f4:	01047580 	call	10104758 <printf>
     return false;
101023f8:	0005883a 	mov	r2,zero
101023fc:	00004d06 	br	10102534 <read_memory+0x180>
    }

    printf("Begin writing file \n");
10102400:	01040474 	movhi	r4,4113
10102404:	210a0004 	addi	r4,r4,10240
10102408:	01049bc0 	call	101049bc <puts>

	fprintf(foutput,"P3\n320 240\n31\n");
1010240c:	e1fffa17 	ldw	r7,-24(fp)
10102410:	01800384 	movi	r6,14
10102414:	01400044 	movi	r5,1
10102418:	01040474 	movhi	r4,4113
1010241c:	210a0504 	addi	r4,r4,10260
10102420:	0103ba40 	call	10103ba4 <fwrite>

    for (int j = 0; j < 240; j += 1) {
10102424:	e03ff815 	stw	zero,-32(fp)
10102428:	00003906 	br	10102510 <read_memory+0x15c>
    	for (int i = 0; i < 320; i += 1) {
1010242c:	e03ff915 	stw	zero,-28(fp)
10102430:	00002e06 	br	101024ec <read_memory+0x138>
    		uint32_t addr = base_address_memory + sizeof(uint16_t) * (i + j * 320);
10102434:	e0bff817 	ldw	r2,-32(fp)
10102438:	10c05024 	muli	r3,r2,320
1010243c:	e0bff917 	ldw	r2,-28(fp)
10102440:	1885883a 	add	r2,r3,r2
10102444:	1085883a 	add	r2,r2,r2
10102448:	1007883a 	mov	r3,r2
1010244c:	e0bffe17 	ldw	r2,-8(fp)
10102450:	1885883a 	add	r2,r3,r2
10102454:	e0bffb15 	stw	r2,-20(fp)

    		//Reads the 16 bit RGB pixel at addr in memory
			uint16_t readdata = IORD_16DIRECT(addr, 0);
10102458:	e0bffb17 	ldw	r2,-20(fp)
1010245c:	1080002b 	ldhuio	r2,0(r2)
10102460:	10bfffcc 	andi	r2,r2,65535
10102464:	e0bffc0d 	sth	r2,-16(fp)
			uint16_t R = readdata & 31;					//Red Pixel
10102468:	e0bffc0b 	ldhu	r2,-16(fp)
1010246c:	108007cc 	andi	r2,r2,31
10102470:	e0bffc8d 	sth	r2,-14(fp)
			uint16_t G = (readdata & 2016) >> 5;		//Green Pixel
10102474:	e0bffc0b 	ldhu	r2,-16(fp)
10102478:	1081f80c 	andi	r2,r2,2016
1010247c:	1005d17a 	srai	r2,r2,5
10102480:	e0bffd0d 	sth	r2,-12(fp)
			uint16_t B = (readdata & 63488) >> 11;		//Blue Pixel
10102484:	e0bffc0b 	ldhu	r2,-16(fp)
10102488:	1004d2fa 	srli	r2,r2,11
1010248c:	e0bffd8d 	sth	r2,-10(fp)
			fprintf(foutput,"%" PRIu16 " ", R);
10102490:	e0bffc8b 	ldhu	r2,-14(fp)
10102494:	100d883a 	mov	r6,r2
10102498:	01440474 	movhi	r5,4113
1010249c:	294a0904 	addi	r5,r5,10276
101024a0:	e13ffa17 	ldw	r4,-24(fp)
101024a4:	0102f7c0 	call	10102f7c <fprintf>
			fprintf(foutput,"%" PRIu16 " ", G/2);		//We only keep 5 bits in the ppm file
101024a8:	e0bffd0b 	ldhu	r2,-12(fp)
101024ac:	1004d07a 	srli	r2,r2,1
101024b0:	10bfffcc 	andi	r2,r2,65535
101024b4:	100d883a 	mov	r6,r2
101024b8:	01440474 	movhi	r5,4113
101024bc:	294a0904 	addi	r5,r5,10276
101024c0:	e13ffa17 	ldw	r4,-24(fp)
101024c4:	0102f7c0 	call	10102f7c <fprintf>
			fprintf(foutput,"%" PRIu16 " ", B);
101024c8:	e0bffd8b 	ldhu	r2,-10(fp)
101024cc:	100d883a 	mov	r6,r2
101024d0:	01440474 	movhi	r5,4113
101024d4:	294a0904 	addi	r5,r5,10276
101024d8:	e13ffa17 	ldw	r4,-24(fp)
101024dc:	0102f7c0 	call	10102f7c <fprintf>
    printf("Begin writing file \n");

	fprintf(foutput,"P3\n320 240\n31\n");

    for (int j = 0; j < 240; j += 1) {
    	for (int i = 0; i < 320; i += 1) {
101024e0:	e0bff917 	ldw	r2,-28(fp)
101024e4:	10800044 	addi	r2,r2,1
101024e8:	e0bff915 	stw	r2,-28(fp)
101024ec:	e0bff917 	ldw	r2,-28(fp)
101024f0:	10805010 	cmplti	r2,r2,320
101024f4:	103fcf1e 	bne	r2,zero,10102434 <__alt_data_end+0xfffe2434>
			uint16_t B = (readdata & 63488) >> 11;		//Blue Pixel
			fprintf(foutput,"%" PRIu16 " ", R);
			fprintf(foutput,"%" PRIu16 " ", G/2);		//We only keep 5 bits in the ppm file
			fprintf(foutput,"%" PRIu16 " ", B);
    	}
    	fprintf(foutput,"\n");
101024f8:	e17ffa17 	ldw	r5,-24(fp)
101024fc:	01000284 	movi	r4,10
10102500:	0102fe40 	call	10102fe4 <fputc>

    printf("Begin writing file \n");

	fprintf(foutput,"P3\n320 240\n31\n");

    for (int j = 0; j < 240; j += 1) {
10102504:	e0bff817 	ldw	r2,-32(fp)
10102508:	10800044 	addi	r2,r2,1
1010250c:	e0bff815 	stw	r2,-32(fp)
10102510:	e0bff817 	ldw	r2,-32(fp)
10102514:	10803c10 	cmplti	r2,r2,240
10102518:	103fc41e 	bne	r2,zero,1010242c <__alt_data_end+0xfffe242c>
			fprintf(foutput,"%" PRIu16 " ", B);
    	}
    	fprintf(foutput,"\n");
    }

    printf("End writing file \n\n");
1010251c:	01040474 	movhi	r4,4113
10102520:	210a0a04 	addi	r4,r4,10280
10102524:	01049bc0 	call	101049bc <puts>
    fclose(foutput);
10102528:	e13ffa17 	ldw	r4,-24(fp)
1010252c:	01027ec0 	call	101027ec <fclose>

    return EXIT_SUCCESS;
10102530:	0005883a 	mov	r2,zero
}
10102534:	e037883a 	mov	sp,fp
10102538:	dfc00117 	ldw	ra,4(sp)
1010253c:	df000017 	ldw	fp,0(sp)
10102540:	dec00204 	addi	sp,sp,8
10102544:	f800283a 	ret

10102548 <__divsi3>:
10102548:	20001b16 	blt	r4,zero,101025b8 <__divsi3+0x70>
1010254c:	000f883a 	mov	r7,zero
10102550:	28001616 	blt	r5,zero,101025ac <__divsi3+0x64>
10102554:	200d883a 	mov	r6,r4
10102558:	29001a2e 	bgeu	r5,r4,101025c4 <__divsi3+0x7c>
1010255c:	00800804 	movi	r2,32
10102560:	00c00044 	movi	r3,1
10102564:	00000106 	br	1010256c <__divsi3+0x24>
10102568:	10000d26 	beq	r2,zero,101025a0 <__divsi3+0x58>
1010256c:	294b883a 	add	r5,r5,r5
10102570:	10bfffc4 	addi	r2,r2,-1
10102574:	18c7883a 	add	r3,r3,r3
10102578:	293ffb36 	bltu	r5,r4,10102568 <__alt_data_end+0xfffe2568>
1010257c:	0005883a 	mov	r2,zero
10102580:	18000726 	beq	r3,zero,101025a0 <__divsi3+0x58>
10102584:	0005883a 	mov	r2,zero
10102588:	31400236 	bltu	r6,r5,10102594 <__divsi3+0x4c>
1010258c:	314dc83a 	sub	r6,r6,r5
10102590:	10c4b03a 	or	r2,r2,r3
10102594:	1806d07a 	srli	r3,r3,1
10102598:	280ad07a 	srli	r5,r5,1
1010259c:	183ffa1e 	bne	r3,zero,10102588 <__alt_data_end+0xfffe2588>
101025a0:	38000126 	beq	r7,zero,101025a8 <__divsi3+0x60>
101025a4:	0085c83a 	sub	r2,zero,r2
101025a8:	f800283a 	ret
101025ac:	014bc83a 	sub	r5,zero,r5
101025b0:	39c0005c 	xori	r7,r7,1
101025b4:	003fe706 	br	10102554 <__alt_data_end+0xfffe2554>
101025b8:	0109c83a 	sub	r4,zero,r4
101025bc:	01c00044 	movi	r7,1
101025c0:	003fe306 	br	10102550 <__alt_data_end+0xfffe2550>
101025c4:	00c00044 	movi	r3,1
101025c8:	003fee06 	br	10102584 <__alt_data_end+0xfffe2584>

101025cc <__modsi3>:
101025cc:	20001716 	blt	r4,zero,1010262c <__modsi3+0x60>
101025d0:	000f883a 	mov	r7,zero
101025d4:	2005883a 	mov	r2,r4
101025d8:	28001216 	blt	r5,zero,10102624 <__modsi3+0x58>
101025dc:	2900162e 	bgeu	r5,r4,10102638 <__modsi3+0x6c>
101025e0:	01800804 	movi	r6,32
101025e4:	00c00044 	movi	r3,1
101025e8:	00000106 	br	101025f0 <__modsi3+0x24>
101025ec:	30000a26 	beq	r6,zero,10102618 <__modsi3+0x4c>
101025f0:	294b883a 	add	r5,r5,r5
101025f4:	31bfffc4 	addi	r6,r6,-1
101025f8:	18c7883a 	add	r3,r3,r3
101025fc:	293ffb36 	bltu	r5,r4,101025ec <__alt_data_end+0xfffe25ec>
10102600:	18000526 	beq	r3,zero,10102618 <__modsi3+0x4c>
10102604:	1806d07a 	srli	r3,r3,1
10102608:	11400136 	bltu	r2,r5,10102610 <__modsi3+0x44>
1010260c:	1145c83a 	sub	r2,r2,r5
10102610:	280ad07a 	srli	r5,r5,1
10102614:	183ffb1e 	bne	r3,zero,10102604 <__alt_data_end+0xfffe2604>
10102618:	38000126 	beq	r7,zero,10102620 <__modsi3+0x54>
1010261c:	0085c83a 	sub	r2,zero,r2
10102620:	f800283a 	ret
10102624:	014bc83a 	sub	r5,zero,r5
10102628:	003fec06 	br	101025dc <__alt_data_end+0xfffe25dc>
1010262c:	0109c83a 	sub	r4,zero,r4
10102630:	01c00044 	movi	r7,1
10102634:	003fe706 	br	101025d4 <__alt_data_end+0xfffe25d4>
10102638:	00c00044 	movi	r3,1
1010263c:	003ff106 	br	10102604 <__alt_data_end+0xfffe2604>

10102640 <__udivsi3>:
10102640:	200d883a 	mov	r6,r4
10102644:	2900152e 	bgeu	r5,r4,1010269c <__udivsi3+0x5c>
10102648:	28001416 	blt	r5,zero,1010269c <__udivsi3+0x5c>
1010264c:	00800804 	movi	r2,32
10102650:	00c00044 	movi	r3,1
10102654:	00000206 	br	10102660 <__udivsi3+0x20>
10102658:	10000e26 	beq	r2,zero,10102694 <__udivsi3+0x54>
1010265c:	28000516 	blt	r5,zero,10102674 <__udivsi3+0x34>
10102660:	294b883a 	add	r5,r5,r5
10102664:	10bfffc4 	addi	r2,r2,-1
10102668:	18c7883a 	add	r3,r3,r3
1010266c:	293ffa36 	bltu	r5,r4,10102658 <__alt_data_end+0xfffe2658>
10102670:	18000826 	beq	r3,zero,10102694 <__udivsi3+0x54>
10102674:	0005883a 	mov	r2,zero
10102678:	31400236 	bltu	r6,r5,10102684 <__udivsi3+0x44>
1010267c:	314dc83a 	sub	r6,r6,r5
10102680:	10c4b03a 	or	r2,r2,r3
10102684:	1806d07a 	srli	r3,r3,1
10102688:	280ad07a 	srli	r5,r5,1
1010268c:	183ffa1e 	bne	r3,zero,10102678 <__alt_data_end+0xfffe2678>
10102690:	f800283a 	ret
10102694:	0005883a 	mov	r2,zero
10102698:	f800283a 	ret
1010269c:	00c00044 	movi	r3,1
101026a0:	003ff406 	br	10102674 <__alt_data_end+0xfffe2674>

101026a4 <__umodsi3>:
101026a4:	2005883a 	mov	r2,r4
101026a8:	2900122e 	bgeu	r5,r4,101026f4 <__umodsi3+0x50>
101026ac:	28001116 	blt	r5,zero,101026f4 <__umodsi3+0x50>
101026b0:	01800804 	movi	r6,32
101026b4:	00c00044 	movi	r3,1
101026b8:	00000206 	br	101026c4 <__umodsi3+0x20>
101026bc:	30000c26 	beq	r6,zero,101026f0 <__umodsi3+0x4c>
101026c0:	28000516 	blt	r5,zero,101026d8 <__umodsi3+0x34>
101026c4:	294b883a 	add	r5,r5,r5
101026c8:	31bfffc4 	addi	r6,r6,-1
101026cc:	18c7883a 	add	r3,r3,r3
101026d0:	293ffa36 	bltu	r5,r4,101026bc <__alt_data_end+0xfffe26bc>
101026d4:	18000626 	beq	r3,zero,101026f0 <__umodsi3+0x4c>
101026d8:	1806d07a 	srli	r3,r3,1
101026dc:	11400136 	bltu	r2,r5,101026e4 <__umodsi3+0x40>
101026e0:	1145c83a 	sub	r2,r2,r5
101026e4:	280ad07a 	srli	r5,r5,1
101026e8:	183ffb1e 	bne	r3,zero,101026d8 <__alt_data_end+0xfffe26d8>
101026ec:	f800283a 	ret
101026f0:	f800283a 	ret
101026f4:	00c00044 	movi	r3,1
101026f8:	003ff706 	br	101026d8 <__alt_data_end+0xfffe26d8>

101026fc <_fclose_r>:
101026fc:	28003926 	beq	r5,zero,101027e4 <_fclose_r+0xe8>
10102700:	defffc04 	addi	sp,sp,-16
10102704:	dc400115 	stw	r17,4(sp)
10102708:	dc000015 	stw	r16,0(sp)
1010270c:	dfc00315 	stw	ra,12(sp)
10102710:	dc800215 	stw	r18,8(sp)
10102714:	2023883a 	mov	r17,r4
10102718:	2821883a 	mov	r16,r5
1010271c:	20000226 	beq	r4,zero,10102728 <_fclose_r+0x2c>
10102720:	20800e17 	ldw	r2,56(r4)
10102724:	10002726 	beq	r2,zero,101027c4 <_fclose_r+0xc8>
10102728:	8080030f 	ldh	r2,12(r16)
1010272c:	1000071e 	bne	r2,zero,1010274c <_fclose_r+0x50>
10102730:	0005883a 	mov	r2,zero
10102734:	dfc00317 	ldw	ra,12(sp)
10102738:	dc800217 	ldw	r18,8(sp)
1010273c:	dc400117 	ldw	r17,4(sp)
10102740:	dc000017 	ldw	r16,0(sp)
10102744:	dec00404 	addi	sp,sp,16
10102748:	f800283a 	ret
1010274c:	800b883a 	mov	r5,r16
10102750:	8809883a 	mov	r4,r17
10102754:	01028000 	call	10102800 <__sflush_r>
10102758:	1025883a 	mov	r18,r2
1010275c:	80800b17 	ldw	r2,44(r16)
10102760:	10000426 	beq	r2,zero,10102774 <_fclose_r+0x78>
10102764:	81400717 	ldw	r5,28(r16)
10102768:	8809883a 	mov	r4,r17
1010276c:	103ee83a 	callr	r2
10102770:	10001616 	blt	r2,zero,101027cc <_fclose_r+0xd0>
10102774:	8080030b 	ldhu	r2,12(r16)
10102778:	1080200c 	andi	r2,r2,128
1010277c:	1000151e 	bne	r2,zero,101027d4 <_fclose_r+0xd8>
10102780:	81400c17 	ldw	r5,48(r16)
10102784:	28000526 	beq	r5,zero,1010279c <_fclose_r+0xa0>
10102788:	80801004 	addi	r2,r16,64
1010278c:	28800226 	beq	r5,r2,10102798 <_fclose_r+0x9c>
10102790:	8809883a 	mov	r4,r17
10102794:	01031640 	call	10103164 <_free_r>
10102798:	80000c15 	stw	zero,48(r16)
1010279c:	81401117 	ldw	r5,68(r16)
101027a0:	28000326 	beq	r5,zero,101027b0 <_fclose_r+0xb4>
101027a4:	8809883a 	mov	r4,r17
101027a8:	01031640 	call	10103164 <_free_r>
101027ac:	80001115 	stw	zero,68(r16)
101027b0:	0102e080 	call	10102e08 <__sfp_lock_acquire>
101027b4:	8000030d 	sth	zero,12(r16)
101027b8:	0102e0c0 	call	10102e0c <__sfp_lock_release>
101027bc:	9005883a 	mov	r2,r18
101027c0:	003fdc06 	br	10102734 <__alt_data_end+0xfffe2734>
101027c4:	0102df80 	call	10102df8 <__sinit>
101027c8:	003fd706 	br	10102728 <__alt_data_end+0xfffe2728>
101027cc:	04bfffc4 	movi	r18,-1
101027d0:	003fe806 	br	10102774 <__alt_data_end+0xfffe2774>
101027d4:	81400417 	ldw	r5,16(r16)
101027d8:	8809883a 	mov	r4,r17
101027dc:	01031640 	call	10103164 <_free_r>
101027e0:	003fe706 	br	10102780 <__alt_data_end+0xfffe2780>
101027e4:	0005883a 	mov	r2,zero
101027e8:	f800283a 	ret

101027ec <fclose>:
101027ec:	00840474 	movhi	r2,4113
101027f0:	10918804 	addi	r2,r2,17952
101027f4:	200b883a 	mov	r5,r4
101027f8:	11000017 	ldw	r4,0(r2)
101027fc:	01026fc1 	jmpi	101026fc <_fclose_r>

10102800 <__sflush_r>:
10102800:	2880030b 	ldhu	r2,12(r5)
10102804:	defffb04 	addi	sp,sp,-20
10102808:	dcc00315 	stw	r19,12(sp)
1010280c:	dc400115 	stw	r17,4(sp)
10102810:	dfc00415 	stw	ra,16(sp)
10102814:	dc800215 	stw	r18,8(sp)
10102818:	dc000015 	stw	r16,0(sp)
1010281c:	10c0020c 	andi	r3,r2,8
10102820:	2823883a 	mov	r17,r5
10102824:	2027883a 	mov	r19,r4
10102828:	1800311e 	bne	r3,zero,101028f0 <__sflush_r+0xf0>
1010282c:	28c00117 	ldw	r3,4(r5)
10102830:	10820014 	ori	r2,r2,2048
10102834:	2880030d 	sth	r2,12(r5)
10102838:	00c04b0e 	bge	zero,r3,10102968 <__sflush_r+0x168>
1010283c:	8a000a17 	ldw	r8,40(r17)
10102840:	40002326 	beq	r8,zero,101028d0 <__sflush_r+0xd0>
10102844:	9c000017 	ldw	r16,0(r19)
10102848:	10c4000c 	andi	r3,r2,4096
1010284c:	98000015 	stw	zero,0(r19)
10102850:	18004826 	beq	r3,zero,10102974 <__sflush_r+0x174>
10102854:	89801417 	ldw	r6,80(r17)
10102858:	10c0010c 	andi	r3,r2,4
1010285c:	18000626 	beq	r3,zero,10102878 <__sflush_r+0x78>
10102860:	88c00117 	ldw	r3,4(r17)
10102864:	88800c17 	ldw	r2,48(r17)
10102868:	30cdc83a 	sub	r6,r6,r3
1010286c:	10000226 	beq	r2,zero,10102878 <__sflush_r+0x78>
10102870:	88800f17 	ldw	r2,60(r17)
10102874:	308dc83a 	sub	r6,r6,r2
10102878:	89400717 	ldw	r5,28(r17)
1010287c:	000f883a 	mov	r7,zero
10102880:	9809883a 	mov	r4,r19
10102884:	403ee83a 	callr	r8
10102888:	00ffffc4 	movi	r3,-1
1010288c:	10c04426 	beq	r2,r3,101029a0 <__sflush_r+0x1a0>
10102890:	88c0030b 	ldhu	r3,12(r17)
10102894:	89000417 	ldw	r4,16(r17)
10102898:	88000115 	stw	zero,4(r17)
1010289c:	197dffcc 	andi	r5,r3,63487
101028a0:	8940030d 	sth	r5,12(r17)
101028a4:	89000015 	stw	r4,0(r17)
101028a8:	18c4000c 	andi	r3,r3,4096
101028ac:	18002c1e 	bne	r3,zero,10102960 <__sflush_r+0x160>
101028b0:	89400c17 	ldw	r5,48(r17)
101028b4:	9c000015 	stw	r16,0(r19)
101028b8:	28000526 	beq	r5,zero,101028d0 <__sflush_r+0xd0>
101028bc:	88801004 	addi	r2,r17,64
101028c0:	28800226 	beq	r5,r2,101028cc <__sflush_r+0xcc>
101028c4:	9809883a 	mov	r4,r19
101028c8:	01031640 	call	10103164 <_free_r>
101028cc:	88000c15 	stw	zero,48(r17)
101028d0:	0005883a 	mov	r2,zero
101028d4:	dfc00417 	ldw	ra,16(sp)
101028d8:	dcc00317 	ldw	r19,12(sp)
101028dc:	dc800217 	ldw	r18,8(sp)
101028e0:	dc400117 	ldw	r17,4(sp)
101028e4:	dc000017 	ldw	r16,0(sp)
101028e8:	dec00504 	addi	sp,sp,20
101028ec:	f800283a 	ret
101028f0:	2c800417 	ldw	r18,16(r5)
101028f4:	903ff626 	beq	r18,zero,101028d0 <__alt_data_end+0xfffe28d0>
101028f8:	2c000017 	ldw	r16,0(r5)
101028fc:	108000cc 	andi	r2,r2,3
10102900:	2c800015 	stw	r18,0(r5)
10102904:	84a1c83a 	sub	r16,r16,r18
10102908:	1000131e 	bne	r2,zero,10102958 <__sflush_r+0x158>
1010290c:	28800517 	ldw	r2,20(r5)
10102910:	88800215 	stw	r2,8(r17)
10102914:	04000316 	blt	zero,r16,10102924 <__sflush_r+0x124>
10102918:	003fed06 	br	101028d0 <__alt_data_end+0xfffe28d0>
1010291c:	90a5883a 	add	r18,r18,r2
10102920:	043feb0e 	bge	zero,r16,101028d0 <__alt_data_end+0xfffe28d0>
10102924:	88800917 	ldw	r2,36(r17)
10102928:	89400717 	ldw	r5,28(r17)
1010292c:	800f883a 	mov	r7,r16
10102930:	900d883a 	mov	r6,r18
10102934:	9809883a 	mov	r4,r19
10102938:	103ee83a 	callr	r2
1010293c:	80a1c83a 	sub	r16,r16,r2
10102940:	00bff616 	blt	zero,r2,1010291c <__alt_data_end+0xfffe291c>
10102944:	88c0030b 	ldhu	r3,12(r17)
10102948:	00bfffc4 	movi	r2,-1
1010294c:	18c01014 	ori	r3,r3,64
10102950:	88c0030d 	sth	r3,12(r17)
10102954:	003fdf06 	br	101028d4 <__alt_data_end+0xfffe28d4>
10102958:	0005883a 	mov	r2,zero
1010295c:	003fec06 	br	10102910 <__alt_data_end+0xfffe2910>
10102960:	88801415 	stw	r2,80(r17)
10102964:	003fd206 	br	101028b0 <__alt_data_end+0xfffe28b0>
10102968:	28c00f17 	ldw	r3,60(r5)
1010296c:	00ffb316 	blt	zero,r3,1010283c <__alt_data_end+0xfffe283c>
10102970:	003fd706 	br	101028d0 <__alt_data_end+0xfffe28d0>
10102974:	89400717 	ldw	r5,28(r17)
10102978:	000d883a 	mov	r6,zero
1010297c:	01c00044 	movi	r7,1
10102980:	9809883a 	mov	r4,r19
10102984:	403ee83a 	callr	r8
10102988:	100d883a 	mov	r6,r2
1010298c:	00bfffc4 	movi	r2,-1
10102990:	30801426 	beq	r6,r2,101029e4 <__sflush_r+0x1e4>
10102994:	8880030b 	ldhu	r2,12(r17)
10102998:	8a000a17 	ldw	r8,40(r17)
1010299c:	003fae06 	br	10102858 <__alt_data_end+0xfffe2858>
101029a0:	98c00017 	ldw	r3,0(r19)
101029a4:	183fba26 	beq	r3,zero,10102890 <__alt_data_end+0xfffe2890>
101029a8:	01000744 	movi	r4,29
101029ac:	19000626 	beq	r3,r4,101029c8 <__sflush_r+0x1c8>
101029b0:	01000584 	movi	r4,22
101029b4:	19000426 	beq	r3,r4,101029c8 <__sflush_r+0x1c8>
101029b8:	88c0030b 	ldhu	r3,12(r17)
101029bc:	18c01014 	ori	r3,r3,64
101029c0:	88c0030d 	sth	r3,12(r17)
101029c4:	003fc306 	br	101028d4 <__alt_data_end+0xfffe28d4>
101029c8:	8880030b 	ldhu	r2,12(r17)
101029cc:	88c00417 	ldw	r3,16(r17)
101029d0:	88000115 	stw	zero,4(r17)
101029d4:	10bdffcc 	andi	r2,r2,63487
101029d8:	8880030d 	sth	r2,12(r17)
101029dc:	88c00015 	stw	r3,0(r17)
101029e0:	003fb306 	br	101028b0 <__alt_data_end+0xfffe28b0>
101029e4:	98800017 	ldw	r2,0(r19)
101029e8:	103fea26 	beq	r2,zero,10102994 <__alt_data_end+0xfffe2994>
101029ec:	00c00744 	movi	r3,29
101029f0:	10c00226 	beq	r2,r3,101029fc <__sflush_r+0x1fc>
101029f4:	00c00584 	movi	r3,22
101029f8:	10c0031e 	bne	r2,r3,10102a08 <__sflush_r+0x208>
101029fc:	9c000015 	stw	r16,0(r19)
10102a00:	0005883a 	mov	r2,zero
10102a04:	003fb306 	br	101028d4 <__alt_data_end+0xfffe28d4>
10102a08:	88c0030b 	ldhu	r3,12(r17)
10102a0c:	3005883a 	mov	r2,r6
10102a10:	18c01014 	ori	r3,r3,64
10102a14:	88c0030d 	sth	r3,12(r17)
10102a18:	003fae06 	br	101028d4 <__alt_data_end+0xfffe28d4>

10102a1c <_fflush_r>:
10102a1c:	defffd04 	addi	sp,sp,-12
10102a20:	dc000115 	stw	r16,4(sp)
10102a24:	dfc00215 	stw	ra,8(sp)
10102a28:	2021883a 	mov	r16,r4
10102a2c:	20000226 	beq	r4,zero,10102a38 <_fflush_r+0x1c>
10102a30:	20800e17 	ldw	r2,56(r4)
10102a34:	10000c26 	beq	r2,zero,10102a68 <_fflush_r+0x4c>
10102a38:	2880030f 	ldh	r2,12(r5)
10102a3c:	1000051e 	bne	r2,zero,10102a54 <_fflush_r+0x38>
10102a40:	0005883a 	mov	r2,zero
10102a44:	dfc00217 	ldw	ra,8(sp)
10102a48:	dc000117 	ldw	r16,4(sp)
10102a4c:	dec00304 	addi	sp,sp,12
10102a50:	f800283a 	ret
10102a54:	8009883a 	mov	r4,r16
10102a58:	dfc00217 	ldw	ra,8(sp)
10102a5c:	dc000117 	ldw	r16,4(sp)
10102a60:	dec00304 	addi	sp,sp,12
10102a64:	01028001 	jmpi	10102800 <__sflush_r>
10102a68:	d9400015 	stw	r5,0(sp)
10102a6c:	0102df80 	call	10102df8 <__sinit>
10102a70:	d9400017 	ldw	r5,0(sp)
10102a74:	003ff006 	br	10102a38 <__alt_data_end+0xfffe2a38>

10102a78 <fflush>:
10102a78:	20000526 	beq	r4,zero,10102a90 <fflush+0x18>
10102a7c:	00840474 	movhi	r2,4113
10102a80:	10918804 	addi	r2,r2,17952
10102a84:	200b883a 	mov	r5,r4
10102a88:	11000017 	ldw	r4,0(r2)
10102a8c:	0102a1c1 	jmpi	10102a1c <_fflush_r>
10102a90:	00840474 	movhi	r2,4113
10102a94:	10918704 	addi	r2,r2,17948
10102a98:	11000017 	ldw	r4,0(r2)
10102a9c:	01440434 	movhi	r5,4112
10102aa0:	294a8704 	addi	r5,r5,10780
10102aa4:	0103a141 	jmpi	10103a14 <_fwalk_reent>

10102aa8 <__fp_unlock>:
10102aa8:	0005883a 	mov	r2,zero
10102aac:	f800283a 	ret

10102ab0 <_cleanup_r>:
10102ab0:	01440434 	movhi	r5,4112
10102ab4:	2949bf04 	addi	r5,r5,9980
10102ab8:	0103a141 	jmpi	10103a14 <_fwalk_reent>

10102abc <__sinit.part.1>:
10102abc:	defff704 	addi	sp,sp,-36
10102ac0:	00c40434 	movhi	r3,4112
10102ac4:	dfc00815 	stw	ra,32(sp)
10102ac8:	ddc00715 	stw	r23,28(sp)
10102acc:	dd800615 	stw	r22,24(sp)
10102ad0:	dd400515 	stw	r21,20(sp)
10102ad4:	dd000415 	stw	r20,16(sp)
10102ad8:	dcc00315 	stw	r19,12(sp)
10102adc:	dc800215 	stw	r18,8(sp)
10102ae0:	dc400115 	stw	r17,4(sp)
10102ae4:	dc000015 	stw	r16,0(sp)
10102ae8:	18caac04 	addi	r3,r3,10928
10102aec:	24000117 	ldw	r16,4(r4)
10102af0:	20c00f15 	stw	r3,60(r4)
10102af4:	2080bb04 	addi	r2,r4,748
10102af8:	00c000c4 	movi	r3,3
10102afc:	20c0b915 	stw	r3,740(r4)
10102b00:	2080ba15 	stw	r2,744(r4)
10102b04:	2000b815 	stw	zero,736(r4)
10102b08:	05c00204 	movi	r23,8
10102b0c:	00800104 	movi	r2,4
10102b10:	2025883a 	mov	r18,r4
10102b14:	b80d883a 	mov	r6,r23
10102b18:	81001704 	addi	r4,r16,92
10102b1c:	000b883a 	mov	r5,zero
10102b20:	80000015 	stw	zero,0(r16)
10102b24:	80000115 	stw	zero,4(r16)
10102b28:	80000215 	stw	zero,8(r16)
10102b2c:	8080030d 	sth	r2,12(r16)
10102b30:	80001915 	stw	zero,100(r16)
10102b34:	8000038d 	sth	zero,14(r16)
10102b38:	80000415 	stw	zero,16(r16)
10102b3c:	80000515 	stw	zero,20(r16)
10102b40:	80000615 	stw	zero,24(r16)
10102b44:	01045a00 	call	101045a0 <memset>
10102b48:	05840434 	movhi	r22,4112
10102b4c:	94400217 	ldw	r17,8(r18)
10102b50:	05440434 	movhi	r21,4112
10102b54:	05040434 	movhi	r20,4112
10102b58:	04c40434 	movhi	r19,4112
10102b5c:	b5930504 	addi	r22,r22,19476
10102b60:	ad531c04 	addi	r21,r21,19568
10102b64:	a5133b04 	addi	r20,r20,19692
10102b68:	9cd35204 	addi	r19,r19,19784
10102b6c:	85800815 	stw	r22,32(r16)
10102b70:	85400915 	stw	r21,36(r16)
10102b74:	85000a15 	stw	r20,40(r16)
10102b78:	84c00b15 	stw	r19,44(r16)
10102b7c:	84000715 	stw	r16,28(r16)
10102b80:	00800284 	movi	r2,10
10102b84:	8880030d 	sth	r2,12(r17)
10102b88:	00800044 	movi	r2,1
10102b8c:	b80d883a 	mov	r6,r23
10102b90:	89001704 	addi	r4,r17,92
10102b94:	000b883a 	mov	r5,zero
10102b98:	88000015 	stw	zero,0(r17)
10102b9c:	88000115 	stw	zero,4(r17)
10102ba0:	88000215 	stw	zero,8(r17)
10102ba4:	88001915 	stw	zero,100(r17)
10102ba8:	8880038d 	sth	r2,14(r17)
10102bac:	88000415 	stw	zero,16(r17)
10102bb0:	88000515 	stw	zero,20(r17)
10102bb4:	88000615 	stw	zero,24(r17)
10102bb8:	01045a00 	call	101045a0 <memset>
10102bbc:	94000317 	ldw	r16,12(r18)
10102bc0:	00800484 	movi	r2,18
10102bc4:	8c400715 	stw	r17,28(r17)
10102bc8:	8d800815 	stw	r22,32(r17)
10102bcc:	8d400915 	stw	r21,36(r17)
10102bd0:	8d000a15 	stw	r20,40(r17)
10102bd4:	8cc00b15 	stw	r19,44(r17)
10102bd8:	8080030d 	sth	r2,12(r16)
10102bdc:	00800084 	movi	r2,2
10102be0:	80000015 	stw	zero,0(r16)
10102be4:	80000115 	stw	zero,4(r16)
10102be8:	80000215 	stw	zero,8(r16)
10102bec:	80001915 	stw	zero,100(r16)
10102bf0:	8080038d 	sth	r2,14(r16)
10102bf4:	80000415 	stw	zero,16(r16)
10102bf8:	80000515 	stw	zero,20(r16)
10102bfc:	80000615 	stw	zero,24(r16)
10102c00:	b80d883a 	mov	r6,r23
10102c04:	000b883a 	mov	r5,zero
10102c08:	81001704 	addi	r4,r16,92
10102c0c:	01045a00 	call	101045a0 <memset>
10102c10:	00800044 	movi	r2,1
10102c14:	84000715 	stw	r16,28(r16)
10102c18:	85800815 	stw	r22,32(r16)
10102c1c:	85400915 	stw	r21,36(r16)
10102c20:	85000a15 	stw	r20,40(r16)
10102c24:	84c00b15 	stw	r19,44(r16)
10102c28:	90800e15 	stw	r2,56(r18)
10102c2c:	dfc00817 	ldw	ra,32(sp)
10102c30:	ddc00717 	ldw	r23,28(sp)
10102c34:	dd800617 	ldw	r22,24(sp)
10102c38:	dd400517 	ldw	r21,20(sp)
10102c3c:	dd000417 	ldw	r20,16(sp)
10102c40:	dcc00317 	ldw	r19,12(sp)
10102c44:	dc800217 	ldw	r18,8(sp)
10102c48:	dc400117 	ldw	r17,4(sp)
10102c4c:	dc000017 	ldw	r16,0(sp)
10102c50:	dec00904 	addi	sp,sp,36
10102c54:	f800283a 	ret

10102c58 <__fp_lock>:
10102c58:	0005883a 	mov	r2,zero
10102c5c:	f800283a 	ret

10102c60 <__sfmoreglue>:
10102c60:	defffc04 	addi	sp,sp,-16
10102c64:	dc400115 	stw	r17,4(sp)
10102c68:	2c7fffc4 	addi	r17,r5,-1
10102c6c:	8c401a24 	muli	r17,r17,104
10102c70:	dc800215 	stw	r18,8(sp)
10102c74:	2825883a 	mov	r18,r5
10102c78:	89401d04 	addi	r5,r17,116
10102c7c:	dc000015 	stw	r16,0(sp)
10102c80:	dfc00315 	stw	ra,12(sp)
10102c84:	0103d940 	call	10103d94 <_malloc_r>
10102c88:	1021883a 	mov	r16,r2
10102c8c:	10000726 	beq	r2,zero,10102cac <__sfmoreglue+0x4c>
10102c90:	11000304 	addi	r4,r2,12
10102c94:	10000015 	stw	zero,0(r2)
10102c98:	14800115 	stw	r18,4(r2)
10102c9c:	11000215 	stw	r4,8(r2)
10102ca0:	89801a04 	addi	r6,r17,104
10102ca4:	000b883a 	mov	r5,zero
10102ca8:	01045a00 	call	101045a0 <memset>
10102cac:	8005883a 	mov	r2,r16
10102cb0:	dfc00317 	ldw	ra,12(sp)
10102cb4:	dc800217 	ldw	r18,8(sp)
10102cb8:	dc400117 	ldw	r17,4(sp)
10102cbc:	dc000017 	ldw	r16,0(sp)
10102cc0:	dec00404 	addi	sp,sp,16
10102cc4:	f800283a 	ret

10102cc8 <__sfp>:
10102cc8:	defffb04 	addi	sp,sp,-20
10102ccc:	dc000015 	stw	r16,0(sp)
10102cd0:	04040474 	movhi	r16,4113
10102cd4:	84118704 	addi	r16,r16,17948
10102cd8:	dcc00315 	stw	r19,12(sp)
10102cdc:	2027883a 	mov	r19,r4
10102ce0:	81000017 	ldw	r4,0(r16)
10102ce4:	dfc00415 	stw	ra,16(sp)
10102ce8:	dc800215 	stw	r18,8(sp)
10102cec:	20800e17 	ldw	r2,56(r4)
10102cf0:	dc400115 	stw	r17,4(sp)
10102cf4:	1000021e 	bne	r2,zero,10102d00 <__sfp+0x38>
10102cf8:	0102abc0 	call	10102abc <__sinit.part.1>
10102cfc:	81000017 	ldw	r4,0(r16)
10102d00:	2480b804 	addi	r18,r4,736
10102d04:	047fffc4 	movi	r17,-1
10102d08:	91000117 	ldw	r4,4(r18)
10102d0c:	94000217 	ldw	r16,8(r18)
10102d10:	213fffc4 	addi	r4,r4,-1
10102d14:	20000a16 	blt	r4,zero,10102d40 <__sfp+0x78>
10102d18:	8080030f 	ldh	r2,12(r16)
10102d1c:	10000c26 	beq	r2,zero,10102d50 <__sfp+0x88>
10102d20:	80c01d04 	addi	r3,r16,116
10102d24:	00000206 	br	10102d30 <__sfp+0x68>
10102d28:	18bfe60f 	ldh	r2,-104(r3)
10102d2c:	10000826 	beq	r2,zero,10102d50 <__sfp+0x88>
10102d30:	213fffc4 	addi	r4,r4,-1
10102d34:	1c3ffd04 	addi	r16,r3,-12
10102d38:	18c01a04 	addi	r3,r3,104
10102d3c:	247ffa1e 	bne	r4,r17,10102d28 <__alt_data_end+0xfffe2d28>
10102d40:	90800017 	ldw	r2,0(r18)
10102d44:	10001d26 	beq	r2,zero,10102dbc <__sfp+0xf4>
10102d48:	1025883a 	mov	r18,r2
10102d4c:	003fee06 	br	10102d08 <__alt_data_end+0xfffe2d08>
10102d50:	00bfffc4 	movi	r2,-1
10102d54:	8080038d 	sth	r2,14(r16)
10102d58:	00800044 	movi	r2,1
10102d5c:	8080030d 	sth	r2,12(r16)
10102d60:	80001915 	stw	zero,100(r16)
10102d64:	80000015 	stw	zero,0(r16)
10102d68:	80000215 	stw	zero,8(r16)
10102d6c:	80000115 	stw	zero,4(r16)
10102d70:	80000415 	stw	zero,16(r16)
10102d74:	80000515 	stw	zero,20(r16)
10102d78:	80000615 	stw	zero,24(r16)
10102d7c:	01800204 	movi	r6,8
10102d80:	000b883a 	mov	r5,zero
10102d84:	81001704 	addi	r4,r16,92
10102d88:	01045a00 	call	101045a0 <memset>
10102d8c:	8005883a 	mov	r2,r16
10102d90:	80000c15 	stw	zero,48(r16)
10102d94:	80000d15 	stw	zero,52(r16)
10102d98:	80001115 	stw	zero,68(r16)
10102d9c:	80001215 	stw	zero,72(r16)
10102da0:	dfc00417 	ldw	ra,16(sp)
10102da4:	dcc00317 	ldw	r19,12(sp)
10102da8:	dc800217 	ldw	r18,8(sp)
10102dac:	dc400117 	ldw	r17,4(sp)
10102db0:	dc000017 	ldw	r16,0(sp)
10102db4:	dec00504 	addi	sp,sp,20
10102db8:	f800283a 	ret
10102dbc:	01400104 	movi	r5,4
10102dc0:	9809883a 	mov	r4,r19
10102dc4:	0102c600 	call	10102c60 <__sfmoreglue>
10102dc8:	90800015 	stw	r2,0(r18)
10102dcc:	103fde1e 	bne	r2,zero,10102d48 <__alt_data_end+0xfffe2d48>
10102dd0:	00800304 	movi	r2,12
10102dd4:	98800015 	stw	r2,0(r19)
10102dd8:	0005883a 	mov	r2,zero
10102ddc:	003ff006 	br	10102da0 <__alt_data_end+0xfffe2da0>

10102de0 <_cleanup>:
10102de0:	00840474 	movhi	r2,4113
10102de4:	10918704 	addi	r2,r2,17948
10102de8:	11000017 	ldw	r4,0(r2)
10102dec:	01440434 	movhi	r5,4112
10102df0:	2949bf04 	addi	r5,r5,9980
10102df4:	0103a141 	jmpi	10103a14 <_fwalk_reent>

10102df8 <__sinit>:
10102df8:	20800e17 	ldw	r2,56(r4)
10102dfc:	10000126 	beq	r2,zero,10102e04 <__sinit+0xc>
10102e00:	f800283a 	ret
10102e04:	0102abc1 	jmpi	10102abc <__sinit.part.1>

10102e08 <__sfp_lock_acquire>:
10102e08:	f800283a 	ret

10102e0c <__sfp_lock_release>:
10102e0c:	f800283a 	ret

10102e10 <__sinit_lock_acquire>:
10102e10:	f800283a 	ret

10102e14 <__sinit_lock_release>:
10102e14:	f800283a 	ret

10102e18 <__fp_lock_all>:
10102e18:	00840474 	movhi	r2,4113
10102e1c:	10918804 	addi	r2,r2,17952
10102e20:	11000017 	ldw	r4,0(r2)
10102e24:	01440434 	movhi	r5,4112
10102e28:	294b1604 	addi	r5,r5,11352
10102e2c:	01039501 	jmpi	10103950 <_fwalk>

10102e30 <__fp_unlock_all>:
10102e30:	00840474 	movhi	r2,4113
10102e34:	10918804 	addi	r2,r2,17952
10102e38:	11000017 	ldw	r4,0(r2)
10102e3c:	01440434 	movhi	r5,4112
10102e40:	294aaa04 	addi	r5,r5,10920
10102e44:	01039501 	jmpi	10103950 <_fwalk>

10102e48 <_fopen_r>:
10102e48:	defffa04 	addi	sp,sp,-24
10102e4c:	3005883a 	mov	r2,r6
10102e50:	dcc00415 	stw	r19,16(sp)
10102e54:	d80d883a 	mov	r6,sp
10102e58:	2827883a 	mov	r19,r5
10102e5c:	100b883a 	mov	r5,r2
10102e60:	dc800315 	stw	r18,12(sp)
10102e64:	dfc00515 	stw	ra,20(sp)
10102e68:	dc400215 	stw	r17,8(sp)
10102e6c:	dc000115 	stw	r16,4(sp)
10102e70:	2025883a 	mov	r18,r4
10102e74:	0108ca00 	call	10108ca0 <__sflags>
10102e78:	10002726 	beq	r2,zero,10102f18 <_fopen_r+0xd0>
10102e7c:	9009883a 	mov	r4,r18
10102e80:	1023883a 	mov	r17,r2
10102e84:	0102cc80 	call	10102cc8 <__sfp>
10102e88:	1021883a 	mov	r16,r2
10102e8c:	10002226 	beq	r2,zero,10102f18 <_fopen_r+0xd0>
10102e90:	d9800017 	ldw	r6,0(sp)
10102e94:	01c06d84 	movi	r7,438
10102e98:	980b883a 	mov	r5,r19
10102e9c:	9009883a 	mov	r4,r18
10102ea0:	01046c80 	call	101046c8 <_open_r>
10102ea4:	10001916 	blt	r2,zero,10102f0c <_fopen_r+0xc4>
10102ea8:	8080038d 	sth	r2,14(r16)
10102eac:	00840434 	movhi	r2,4112
10102eb0:	10930504 	addi	r2,r2,19476
10102eb4:	80800815 	stw	r2,32(r16)
10102eb8:	00840434 	movhi	r2,4112
10102ebc:	10931c04 	addi	r2,r2,19568
10102ec0:	80800915 	stw	r2,36(r16)
10102ec4:	00840434 	movhi	r2,4112
10102ec8:	10933b04 	addi	r2,r2,19692
10102ecc:	80800a15 	stw	r2,40(r16)
10102ed0:	00840434 	movhi	r2,4112
10102ed4:	10935204 	addi	r2,r2,19784
10102ed8:	8440030d 	sth	r17,12(r16)
10102edc:	84000715 	stw	r16,28(r16)
10102ee0:	80800b15 	stw	r2,44(r16)
10102ee4:	8c40400c 	andi	r17,r17,256
10102ee8:	88000d1e 	bne	r17,zero,10102f20 <_fopen_r+0xd8>
10102eec:	8005883a 	mov	r2,r16
10102ef0:	dfc00517 	ldw	ra,20(sp)
10102ef4:	dcc00417 	ldw	r19,16(sp)
10102ef8:	dc800317 	ldw	r18,12(sp)
10102efc:	dc400217 	ldw	r17,8(sp)
10102f00:	dc000117 	ldw	r16,4(sp)
10102f04:	dec00604 	addi	sp,sp,24
10102f08:	f800283a 	ret
10102f0c:	0102e080 	call	10102e08 <__sfp_lock_acquire>
10102f10:	8000030d 	sth	zero,12(r16)
10102f14:	0102e0c0 	call	10102e0c <__sfp_lock_release>
10102f18:	0005883a 	mov	r2,zero
10102f1c:	003ff406 	br	10102ef0 <__alt_data_end+0xfffe2ef0>
10102f20:	01c00084 	movi	r7,2
10102f24:	000d883a 	mov	r6,zero
10102f28:	800b883a 	mov	r5,r16
10102f2c:	9009883a 	mov	r4,r18
10102f30:	01034740 	call	10103474 <_fseek_r>
10102f34:	8005883a 	mov	r2,r16
10102f38:	003fed06 	br	10102ef0 <__alt_data_end+0xfffe2ef0>

10102f3c <fopen>:
10102f3c:	00840474 	movhi	r2,4113
10102f40:	10918804 	addi	r2,r2,17952
10102f44:	280d883a 	mov	r6,r5
10102f48:	200b883a 	mov	r5,r4
10102f4c:	11000017 	ldw	r4,0(r2)
10102f50:	0102e481 	jmpi	10102e48 <_fopen_r>

10102f54 <_fprintf_r>:
10102f54:	defffe04 	addi	sp,sp,-8
10102f58:	2809883a 	mov	r4,r5
10102f5c:	300b883a 	mov	r5,r6
10102f60:	dfc00015 	stw	ra,0(sp)
10102f64:	d9c00115 	stw	r7,4(sp)
10102f68:	d9800104 	addi	r6,sp,4
10102f6c:	0106fe00 	call	10106fe0 <__vfprintf_internal>
10102f70:	dfc00017 	ldw	ra,0(sp)
10102f74:	dec00204 	addi	sp,sp,8
10102f78:	f800283a 	ret

10102f7c <fprintf>:
10102f7c:	defffd04 	addi	sp,sp,-12
10102f80:	dfc00015 	stw	ra,0(sp)
10102f84:	d9800115 	stw	r6,4(sp)
10102f88:	d9c00215 	stw	r7,8(sp)
10102f8c:	d9800104 	addi	r6,sp,4
10102f90:	0106fe00 	call	10106fe0 <__vfprintf_internal>
10102f94:	dfc00017 	ldw	ra,0(sp)
10102f98:	dec00304 	addi	sp,sp,12
10102f9c:	f800283a 	ret

10102fa0 <_fputc_r>:
10102fa0:	defffc04 	addi	sp,sp,-16
10102fa4:	dc000215 	stw	r16,8(sp)
10102fa8:	dfc00315 	stw	ra,12(sp)
10102fac:	2021883a 	mov	r16,r4
10102fb0:	20000726 	beq	r4,zero,10102fd0 <_fputc_r+0x30>
10102fb4:	20800e17 	ldw	r2,56(r4)
10102fb8:	1000051e 	bne	r2,zero,10102fd0 <_fputc_r+0x30>
10102fbc:	d9400015 	stw	r5,0(sp)
10102fc0:	d9800115 	stw	r6,4(sp)
10102fc4:	0102df80 	call	10102df8 <__sinit>
10102fc8:	d9800117 	ldw	r6,4(sp)
10102fcc:	d9400017 	ldw	r5,0(sp)
10102fd0:	8009883a 	mov	r4,r16
10102fd4:	dfc00317 	ldw	ra,12(sp)
10102fd8:	dc000217 	ldw	r16,8(sp)
10102fdc:	dec00404 	addi	sp,sp,16
10102fe0:	01047941 	jmpi	10104794 <_putc_r>

10102fe4 <fputc>:
10102fe4:	00840474 	movhi	r2,4113
10102fe8:	defffc04 	addi	sp,sp,-16
10102fec:	10918804 	addi	r2,r2,17952
10102ff0:	dc000115 	stw	r16,4(sp)
10102ff4:	14000017 	ldw	r16,0(r2)
10102ff8:	dc400215 	stw	r17,8(sp)
10102ffc:	dfc00315 	stw	ra,12(sp)
10103000:	2023883a 	mov	r17,r4
10103004:	80000626 	beq	r16,zero,10103020 <fputc+0x3c>
10103008:	80800e17 	ldw	r2,56(r16)
1010300c:	1000041e 	bne	r2,zero,10103020 <fputc+0x3c>
10103010:	8009883a 	mov	r4,r16
10103014:	d9400015 	stw	r5,0(sp)
10103018:	0102df80 	call	10102df8 <__sinit>
1010301c:	d9400017 	ldw	r5,0(sp)
10103020:	280d883a 	mov	r6,r5
10103024:	8009883a 	mov	r4,r16
10103028:	880b883a 	mov	r5,r17
1010302c:	dfc00317 	ldw	ra,12(sp)
10103030:	dc400217 	ldw	r17,8(sp)
10103034:	dc000117 	ldw	r16,4(sp)
10103038:	dec00404 	addi	sp,sp,16
1010303c:	01047941 	jmpi	10104794 <_putc_r>

10103040 <_malloc_trim_r>:
10103040:	defffb04 	addi	sp,sp,-20
10103044:	dcc00315 	stw	r19,12(sp)
10103048:	04c40474 	movhi	r19,4113
1010304c:	dc800215 	stw	r18,8(sp)
10103050:	dc400115 	stw	r17,4(sp)
10103054:	dc000015 	stw	r16,0(sp)
10103058:	dfc00415 	stw	ra,16(sp)
1010305c:	2821883a 	mov	r16,r5
10103060:	9ccbdb04 	addi	r19,r19,12140
10103064:	2025883a 	mov	r18,r4
10103068:	010ffc00 	call	1010ffc0 <__malloc_lock>
1010306c:	98800217 	ldw	r2,8(r19)
10103070:	14400117 	ldw	r17,4(r2)
10103074:	00bfff04 	movi	r2,-4
10103078:	88a2703a 	and	r17,r17,r2
1010307c:	8c21c83a 	sub	r16,r17,r16
10103080:	8403fbc4 	addi	r16,r16,4079
10103084:	8020d33a 	srli	r16,r16,12
10103088:	0083ffc4 	movi	r2,4095
1010308c:	843fffc4 	addi	r16,r16,-1
10103090:	8020933a 	slli	r16,r16,12
10103094:	1400060e 	bge	r2,r16,101030b0 <_malloc_trim_r+0x70>
10103098:	000b883a 	mov	r5,zero
1010309c:	9009883a 	mov	r4,r18
101030a0:	0104bc00 	call	10104bc0 <_sbrk_r>
101030a4:	98c00217 	ldw	r3,8(r19)
101030a8:	1c47883a 	add	r3,r3,r17
101030ac:	10c00a26 	beq	r2,r3,101030d8 <_malloc_trim_r+0x98>
101030b0:	9009883a 	mov	r4,r18
101030b4:	010ffe40 	call	1010ffe4 <__malloc_unlock>
101030b8:	0005883a 	mov	r2,zero
101030bc:	dfc00417 	ldw	ra,16(sp)
101030c0:	dcc00317 	ldw	r19,12(sp)
101030c4:	dc800217 	ldw	r18,8(sp)
101030c8:	dc400117 	ldw	r17,4(sp)
101030cc:	dc000017 	ldw	r16,0(sp)
101030d0:	dec00504 	addi	sp,sp,20
101030d4:	f800283a 	ret
101030d8:	040bc83a 	sub	r5,zero,r16
101030dc:	9009883a 	mov	r4,r18
101030e0:	0104bc00 	call	10104bc0 <_sbrk_r>
101030e4:	00ffffc4 	movi	r3,-1
101030e8:	10c00d26 	beq	r2,r3,10103120 <_malloc_trim_r+0xe0>
101030ec:	00c40474 	movhi	r3,4113
101030f0:	18d88e04 	addi	r3,r3,25144
101030f4:	18800017 	ldw	r2,0(r3)
101030f8:	99000217 	ldw	r4,8(r19)
101030fc:	8c23c83a 	sub	r17,r17,r16
10103100:	8c400054 	ori	r17,r17,1
10103104:	1421c83a 	sub	r16,r2,r16
10103108:	24400115 	stw	r17,4(r4)
1010310c:	9009883a 	mov	r4,r18
10103110:	1c000015 	stw	r16,0(r3)
10103114:	010ffe40 	call	1010ffe4 <__malloc_unlock>
10103118:	00800044 	movi	r2,1
1010311c:	003fe706 	br	101030bc <__alt_data_end+0xfffe30bc>
10103120:	000b883a 	mov	r5,zero
10103124:	9009883a 	mov	r4,r18
10103128:	0104bc00 	call	10104bc0 <_sbrk_r>
1010312c:	99000217 	ldw	r4,8(r19)
10103130:	014003c4 	movi	r5,15
10103134:	1107c83a 	sub	r3,r2,r4
10103138:	28ffdd0e 	bge	r5,r3,101030b0 <__alt_data_end+0xfffe30b0>
1010313c:	01440474 	movhi	r5,4113
10103140:	29518904 	addi	r5,r5,17956
10103144:	29400017 	ldw	r5,0(r5)
10103148:	18c00054 	ori	r3,r3,1
1010314c:	20c00115 	stw	r3,4(r4)
10103150:	00c40474 	movhi	r3,4113
10103154:	1145c83a 	sub	r2,r2,r5
10103158:	18d88e04 	addi	r3,r3,25144
1010315c:	18800015 	stw	r2,0(r3)
10103160:	003fd306 	br	101030b0 <__alt_data_end+0xfffe30b0>

10103164 <_free_r>:
10103164:	28004126 	beq	r5,zero,1010326c <_free_r+0x108>
10103168:	defffd04 	addi	sp,sp,-12
1010316c:	dc400115 	stw	r17,4(sp)
10103170:	dc000015 	stw	r16,0(sp)
10103174:	2023883a 	mov	r17,r4
10103178:	2821883a 	mov	r16,r5
1010317c:	dfc00215 	stw	ra,8(sp)
10103180:	010ffc00 	call	1010ffc0 <__malloc_lock>
10103184:	81ffff17 	ldw	r7,-4(r16)
10103188:	00bfff84 	movi	r2,-2
1010318c:	01040474 	movhi	r4,4113
10103190:	81bffe04 	addi	r6,r16,-8
10103194:	3884703a 	and	r2,r7,r2
10103198:	210bdb04 	addi	r4,r4,12140
1010319c:	308b883a 	add	r5,r6,r2
101031a0:	2a400117 	ldw	r9,4(r5)
101031a4:	22000217 	ldw	r8,8(r4)
101031a8:	00ffff04 	movi	r3,-4
101031ac:	48c6703a 	and	r3,r9,r3
101031b0:	2a005726 	beq	r5,r8,10103310 <_free_r+0x1ac>
101031b4:	28c00115 	stw	r3,4(r5)
101031b8:	39c0004c 	andi	r7,r7,1
101031bc:	3800091e 	bne	r7,zero,101031e4 <_free_r+0x80>
101031c0:	823ffe17 	ldw	r8,-8(r16)
101031c4:	22400204 	addi	r9,r4,8
101031c8:	320dc83a 	sub	r6,r6,r8
101031cc:	31c00217 	ldw	r7,8(r6)
101031d0:	1205883a 	add	r2,r2,r8
101031d4:	3a406526 	beq	r7,r9,1010336c <_free_r+0x208>
101031d8:	32000317 	ldw	r8,12(r6)
101031dc:	3a000315 	stw	r8,12(r7)
101031e0:	41c00215 	stw	r7,8(r8)
101031e4:	28cf883a 	add	r7,r5,r3
101031e8:	39c00117 	ldw	r7,4(r7)
101031ec:	39c0004c 	andi	r7,r7,1
101031f0:	38003a26 	beq	r7,zero,101032dc <_free_r+0x178>
101031f4:	10c00054 	ori	r3,r2,1
101031f8:	30c00115 	stw	r3,4(r6)
101031fc:	3087883a 	add	r3,r6,r2
10103200:	18800015 	stw	r2,0(r3)
10103204:	00c07fc4 	movi	r3,511
10103208:	18801936 	bltu	r3,r2,10103270 <_free_r+0x10c>
1010320c:	1004d0fa 	srli	r2,r2,3
10103210:	01c00044 	movi	r7,1
10103214:	21400117 	ldw	r5,4(r4)
10103218:	10c00044 	addi	r3,r2,1
1010321c:	18c7883a 	add	r3,r3,r3
10103220:	1005d0ba 	srai	r2,r2,2
10103224:	18c7883a 	add	r3,r3,r3
10103228:	18c7883a 	add	r3,r3,r3
1010322c:	1907883a 	add	r3,r3,r4
10103230:	3884983a 	sll	r2,r7,r2
10103234:	19c00017 	ldw	r7,0(r3)
10103238:	1a3ffe04 	addi	r8,r3,-8
1010323c:	1144b03a 	or	r2,r2,r5
10103240:	32000315 	stw	r8,12(r6)
10103244:	31c00215 	stw	r7,8(r6)
10103248:	20800115 	stw	r2,4(r4)
1010324c:	19800015 	stw	r6,0(r3)
10103250:	39800315 	stw	r6,12(r7)
10103254:	8809883a 	mov	r4,r17
10103258:	dfc00217 	ldw	ra,8(sp)
1010325c:	dc400117 	ldw	r17,4(sp)
10103260:	dc000017 	ldw	r16,0(sp)
10103264:	dec00304 	addi	sp,sp,12
10103268:	010ffe41 	jmpi	1010ffe4 <__malloc_unlock>
1010326c:	f800283a 	ret
10103270:	100ad27a 	srli	r5,r2,9
10103274:	00c00104 	movi	r3,4
10103278:	19404a36 	bltu	r3,r5,101033a4 <_free_r+0x240>
1010327c:	100ad1ba 	srli	r5,r2,6
10103280:	28c00e44 	addi	r3,r5,57
10103284:	18c7883a 	add	r3,r3,r3
10103288:	29400e04 	addi	r5,r5,56
1010328c:	18c7883a 	add	r3,r3,r3
10103290:	18c7883a 	add	r3,r3,r3
10103294:	1909883a 	add	r4,r3,r4
10103298:	20c00017 	ldw	r3,0(r4)
1010329c:	01c40474 	movhi	r7,4113
101032a0:	213ffe04 	addi	r4,r4,-8
101032a4:	39cbdb04 	addi	r7,r7,12140
101032a8:	20c04426 	beq	r4,r3,101033bc <_free_r+0x258>
101032ac:	01ffff04 	movi	r7,-4
101032b0:	19400117 	ldw	r5,4(r3)
101032b4:	29ca703a 	and	r5,r5,r7
101032b8:	1140022e 	bgeu	r2,r5,101032c4 <_free_r+0x160>
101032bc:	18c00217 	ldw	r3,8(r3)
101032c0:	20fffb1e 	bne	r4,r3,101032b0 <__alt_data_end+0xfffe32b0>
101032c4:	19000317 	ldw	r4,12(r3)
101032c8:	31000315 	stw	r4,12(r6)
101032cc:	30c00215 	stw	r3,8(r6)
101032d0:	21800215 	stw	r6,8(r4)
101032d4:	19800315 	stw	r6,12(r3)
101032d8:	003fde06 	br	10103254 <__alt_data_end+0xfffe3254>
101032dc:	29c00217 	ldw	r7,8(r5)
101032e0:	10c5883a 	add	r2,r2,r3
101032e4:	00c40474 	movhi	r3,4113
101032e8:	18cbdd04 	addi	r3,r3,12148
101032ec:	38c03b26 	beq	r7,r3,101033dc <_free_r+0x278>
101032f0:	2a000317 	ldw	r8,12(r5)
101032f4:	11400054 	ori	r5,r2,1
101032f8:	3087883a 	add	r3,r6,r2
101032fc:	3a000315 	stw	r8,12(r7)
10103300:	41c00215 	stw	r7,8(r8)
10103304:	31400115 	stw	r5,4(r6)
10103308:	18800015 	stw	r2,0(r3)
1010330c:	003fbd06 	br	10103204 <__alt_data_end+0xfffe3204>
10103310:	39c0004c 	andi	r7,r7,1
10103314:	10c5883a 	add	r2,r2,r3
10103318:	3800071e 	bne	r7,zero,10103338 <_free_r+0x1d4>
1010331c:	81fffe17 	ldw	r7,-8(r16)
10103320:	31cdc83a 	sub	r6,r6,r7
10103324:	30c00317 	ldw	r3,12(r6)
10103328:	31400217 	ldw	r5,8(r6)
1010332c:	11c5883a 	add	r2,r2,r7
10103330:	28c00315 	stw	r3,12(r5)
10103334:	19400215 	stw	r5,8(r3)
10103338:	10c00054 	ori	r3,r2,1
1010333c:	30c00115 	stw	r3,4(r6)
10103340:	00c40474 	movhi	r3,4113
10103344:	18d18a04 	addi	r3,r3,17960
10103348:	18c00017 	ldw	r3,0(r3)
1010334c:	21800215 	stw	r6,8(r4)
10103350:	10ffc036 	bltu	r2,r3,10103254 <__alt_data_end+0xfffe3254>
10103354:	00840474 	movhi	r2,4113
10103358:	10988304 	addi	r2,r2,25100
1010335c:	11400017 	ldw	r5,0(r2)
10103360:	8809883a 	mov	r4,r17
10103364:	01030400 	call	10103040 <_malloc_trim_r>
10103368:	003fba06 	br	10103254 <__alt_data_end+0xfffe3254>
1010336c:	28c9883a 	add	r4,r5,r3
10103370:	21000117 	ldw	r4,4(r4)
10103374:	2100004c 	andi	r4,r4,1
10103378:	2000391e 	bne	r4,zero,10103460 <_free_r+0x2fc>
1010337c:	29c00217 	ldw	r7,8(r5)
10103380:	29000317 	ldw	r4,12(r5)
10103384:	1885883a 	add	r2,r3,r2
10103388:	10c00054 	ori	r3,r2,1
1010338c:	39000315 	stw	r4,12(r7)
10103390:	21c00215 	stw	r7,8(r4)
10103394:	30c00115 	stw	r3,4(r6)
10103398:	308d883a 	add	r6,r6,r2
1010339c:	30800015 	stw	r2,0(r6)
101033a0:	003fac06 	br	10103254 <__alt_data_end+0xfffe3254>
101033a4:	00c00504 	movi	r3,20
101033a8:	19401536 	bltu	r3,r5,10103400 <_free_r+0x29c>
101033ac:	28c01704 	addi	r3,r5,92
101033b0:	18c7883a 	add	r3,r3,r3
101033b4:	294016c4 	addi	r5,r5,91
101033b8:	003fb406 	br	1010328c <__alt_data_end+0xfffe328c>
101033bc:	280bd0ba 	srai	r5,r5,2
101033c0:	00c00044 	movi	r3,1
101033c4:	38800117 	ldw	r2,4(r7)
101033c8:	194a983a 	sll	r5,r3,r5
101033cc:	2007883a 	mov	r3,r4
101033d0:	2884b03a 	or	r2,r5,r2
101033d4:	38800115 	stw	r2,4(r7)
101033d8:	003fbb06 	br	101032c8 <__alt_data_end+0xfffe32c8>
101033dc:	21800515 	stw	r6,20(r4)
101033e0:	21800415 	stw	r6,16(r4)
101033e4:	10c00054 	ori	r3,r2,1
101033e8:	31c00315 	stw	r7,12(r6)
101033ec:	31c00215 	stw	r7,8(r6)
101033f0:	30c00115 	stw	r3,4(r6)
101033f4:	308d883a 	add	r6,r6,r2
101033f8:	30800015 	stw	r2,0(r6)
101033fc:	003f9506 	br	10103254 <__alt_data_end+0xfffe3254>
10103400:	00c01504 	movi	r3,84
10103404:	19400536 	bltu	r3,r5,1010341c <_free_r+0x2b8>
10103408:	100ad33a 	srli	r5,r2,12
1010340c:	28c01bc4 	addi	r3,r5,111
10103410:	18c7883a 	add	r3,r3,r3
10103414:	29401b84 	addi	r5,r5,110
10103418:	003f9c06 	br	1010328c <__alt_data_end+0xfffe328c>
1010341c:	00c05504 	movi	r3,340
10103420:	19400536 	bltu	r3,r5,10103438 <_free_r+0x2d4>
10103424:	100ad3fa 	srli	r5,r2,15
10103428:	28c01e04 	addi	r3,r5,120
1010342c:	18c7883a 	add	r3,r3,r3
10103430:	29401dc4 	addi	r5,r5,119
10103434:	003f9506 	br	1010328c <__alt_data_end+0xfffe328c>
10103438:	00c15504 	movi	r3,1364
1010343c:	19400536 	bltu	r3,r5,10103454 <_free_r+0x2f0>
10103440:	100ad4ba 	srli	r5,r2,18
10103444:	28c01f44 	addi	r3,r5,125
10103448:	18c7883a 	add	r3,r3,r3
1010344c:	29401f04 	addi	r5,r5,124
10103450:	003f8e06 	br	1010328c <__alt_data_end+0xfffe328c>
10103454:	00c03f84 	movi	r3,254
10103458:	01401f84 	movi	r5,126
1010345c:	003f8b06 	br	1010328c <__alt_data_end+0xfffe328c>
10103460:	10c00054 	ori	r3,r2,1
10103464:	30c00115 	stw	r3,4(r6)
10103468:	308d883a 	add	r6,r6,r2
1010346c:	30800015 	stw	r2,0(r6)
10103470:	003f7806 	br	10103254 <__alt_data_end+0xfffe3254>

10103474 <_fseek_r>:
10103474:	01034941 	jmpi	10103494 <_fseeko_r>

10103478 <fseek>:
10103478:	00840474 	movhi	r2,4113
1010347c:	10918804 	addi	r2,r2,17952
10103480:	300f883a 	mov	r7,r6
10103484:	280d883a 	mov	r6,r5
10103488:	200b883a 	mov	r5,r4
1010348c:	11000017 	ldw	r4,0(r2)
10103490:	01034941 	jmpi	10103494 <_fseeko_r>

10103494 <_fseeko_r>:
10103494:	deffe804 	addi	sp,sp,-96
10103498:	dd401415 	stw	r21,80(sp)
1010349c:	dc801115 	stw	r18,68(sp)
101034a0:	dc401015 	stw	r17,64(sp)
101034a4:	dc000f15 	stw	r16,60(sp)
101034a8:	dfc01715 	stw	ra,92(sp)
101034ac:	ddc01615 	stw	r23,88(sp)
101034b0:	dd801515 	stw	r22,84(sp)
101034b4:	dd001315 	stw	r20,76(sp)
101034b8:	dcc01215 	stw	r19,72(sp)
101034bc:	2023883a 	mov	r17,r4
101034c0:	2821883a 	mov	r16,r5
101034c4:	302b883a 	mov	r21,r6
101034c8:	3825883a 	mov	r18,r7
101034cc:	20000226 	beq	r4,zero,101034d8 <_fseeko_r+0x44>
101034d0:	20800e17 	ldw	r2,56(r4)
101034d4:	10005a26 	beq	r2,zero,10103640 <_fseeko_r+0x1ac>
101034d8:	8080030b 	ldhu	r2,12(r16)
101034dc:	00c04204 	movi	r3,264
101034e0:	1080420c 	andi	r2,r2,264
101034e4:	10c05b26 	beq	r2,r3,10103654 <_fseeko_r+0x1c0>
101034e8:	85000a17 	ldw	r20,40(r16)
101034ec:	a000f626 	beq	r20,zero,101038c8 <_fseeko_r+0x434>
101034f0:	00800044 	movi	r2,1
101034f4:	90803e26 	beq	r18,r2,101035f0 <_fseeko_r+0x15c>
101034f8:	00800084 	movi	r2,2
101034fc:	90801026 	beq	r18,r2,10103540 <_fseeko_r+0xac>
10103500:	90000f26 	beq	r18,zero,10103540 <_fseeko_r+0xac>
10103504:	00800584 	movi	r2,22
10103508:	88800015 	stw	r2,0(r17)
1010350c:	04ffffc4 	movi	r19,-1
10103510:	9805883a 	mov	r2,r19
10103514:	dfc01717 	ldw	ra,92(sp)
10103518:	ddc01617 	ldw	r23,88(sp)
1010351c:	dd801517 	ldw	r22,84(sp)
10103520:	dd401417 	ldw	r21,80(sp)
10103524:	dd001317 	ldw	r20,76(sp)
10103528:	dcc01217 	ldw	r19,72(sp)
1010352c:	dc801117 	ldw	r18,68(sp)
10103530:	dc401017 	ldw	r17,64(sp)
10103534:	dc000f17 	ldw	r16,60(sp)
10103538:	dec01804 	addi	sp,sp,96
1010353c:	f800283a 	ret
10103540:	80800417 	ldw	r2,16(r16)
10103544:	002f883a 	mov	r23,zero
10103548:	0027883a 	mov	r19,zero
1010354c:	1000cb26 	beq	r2,zero,1010387c <_fseeko_r+0x3e8>
10103550:	8080030b 	ldhu	r2,12(r16)
10103554:	10c2068c 	andi	r3,r2,2074
10103558:	1800071e 	bne	r3,zero,10103578 <_fseeko_r+0xe4>
1010355c:	10c1000c 	andi	r3,r2,1024
10103560:	1800451e 	bne	r3,zero,10103678 <_fseeko_r+0x1e4>
10103564:	00c40434 	movhi	r3,4112
10103568:	18d33b04 	addi	r3,r3,19692
1010356c:	a0c0b726 	beq	r20,r3,1010384c <_fseeko_r+0x3b8>
10103570:	10820014 	ori	r2,r2,2048
10103574:	8080030d 	sth	r2,12(r16)
10103578:	800b883a 	mov	r5,r16
1010357c:	8809883a 	mov	r4,r17
10103580:	0102a1c0 	call	10102a1c <_fflush_r>
10103584:	1027883a 	mov	r19,r2
10103588:	103fe01e 	bne	r2,zero,1010350c <__alt_data_end+0xfffe350c>
1010358c:	81400717 	ldw	r5,28(r16)
10103590:	900f883a 	mov	r7,r18
10103594:	a80d883a 	mov	r6,r21
10103598:	8809883a 	mov	r4,r17
1010359c:	a03ee83a 	callr	r20
101035a0:	00ffffc4 	movi	r3,-1
101035a4:	10ffd926 	beq	r2,r3,1010350c <__alt_data_end+0xfffe350c>
101035a8:	81400c17 	ldw	r5,48(r16)
101035ac:	28000526 	beq	r5,zero,101035c4 <_fseeko_r+0x130>
101035b0:	80801004 	addi	r2,r16,64
101035b4:	28800226 	beq	r5,r2,101035c0 <_fseeko_r+0x12c>
101035b8:	8809883a 	mov	r4,r17
101035bc:	01031640 	call	10103164 <_free_r>
101035c0:	80000c15 	stw	zero,48(r16)
101035c4:	8080030b 	ldhu	r2,12(r16)
101035c8:	80c00417 	ldw	r3,16(r16)
101035cc:	80000115 	stw	zero,4(r16)
101035d0:	10bdf7cc 	andi	r2,r2,63455
101035d4:	80c00015 	stw	r3,0(r16)
101035d8:	8080030d 	sth	r2,12(r16)
101035dc:	01800204 	movi	r6,8
101035e0:	000b883a 	mov	r5,zero
101035e4:	81001704 	addi	r4,r16,92
101035e8:	01045a00 	call	101045a0 <memset>
101035ec:	003fc806 	br	10103510 <__alt_data_end+0xfffe3510>
101035f0:	800b883a 	mov	r5,r16
101035f4:	8809883a 	mov	r4,r17
101035f8:	0102a1c0 	call	10102a1c <_fflush_r>
101035fc:	8080030b 	ldhu	r2,12(r16)
10103600:	10c4000c 	andi	r3,r2,4096
10103604:	18008726 	beq	r3,zero,10103824 <_fseeko_r+0x390>
10103608:	84c01417 	ldw	r19,80(r16)
1010360c:	10c0010c 	andi	r3,r2,4
10103610:	1800431e 	bne	r3,zero,10103720 <_fseeko_r+0x28c>
10103614:	1080020c 	andi	r2,r2,8
10103618:	10008026 	beq	r2,zero,1010381c <_fseeko_r+0x388>
1010361c:	80c00017 	ldw	r3,0(r16)
10103620:	80800417 	ldw	r2,16(r16)
10103624:	18000226 	beq	r3,zero,10103630 <_fseeko_r+0x19c>
10103628:	1887c83a 	sub	r3,r3,r2
1010362c:	98e7883a 	add	r19,r19,r3
10103630:	aceb883a 	add	r21,r21,r19
10103634:	05c00044 	movi	r23,1
10103638:	0025883a 	mov	r18,zero
1010363c:	003fc306 	br	1010354c <__alt_data_end+0xfffe354c>
10103640:	0102df80 	call	10102df8 <__sinit>
10103644:	8080030b 	ldhu	r2,12(r16)
10103648:	00c04204 	movi	r3,264
1010364c:	1080420c 	andi	r2,r2,264
10103650:	10ffa51e 	bne	r2,r3,101034e8 <__alt_data_end+0xfffe34e8>
10103654:	800b883a 	mov	r5,r16
10103658:	8809883a 	mov	r4,r17
1010365c:	0102a1c0 	call	10102a1c <_fflush_r>
10103660:	003fa106 	br	101034e8 <__alt_data_end+0xfffe34e8>
10103664:	8080030b 	ldhu	r2,12(r16)
10103668:	00c10004 	movi	r3,1024
1010366c:	80c01315 	stw	r3,76(r16)
10103670:	10c4b03a 	or	r2,r2,r3
10103674:	8080030d 	sth	r2,12(r16)
10103678:	9000311e 	bne	r18,zero,10103740 <_fseeko_r+0x2ac>
1010367c:	a82d883a 	mov	r22,r21
10103680:	b800371e 	bne	r23,zero,10103760 <_fseeko_r+0x2cc>
10103684:	8080030b 	ldhu	r2,12(r16)
10103688:	1084000c 	andi	r2,r2,4096
1010368c:	10007f26 	beq	r2,zero,1010388c <_fseeko_r+0x3f8>
10103690:	80801417 	ldw	r2,80(r16)
10103694:	81800117 	ldw	r6,4(r16)
10103698:	81400c17 	ldw	r5,48(r16)
1010369c:	11a7c83a 	sub	r19,r2,r6
101036a0:	28008226 	beq	r5,zero,101038ac <_fseeko_r+0x418>
101036a4:	81c00f17 	ldw	r7,60(r16)
101036a8:	99e7c83a 	sub	r19,r19,r7
101036ac:	81000e17 	ldw	r4,56(r16)
101036b0:	80800417 	ldw	r2,16(r16)
101036b4:	99a7883a 	add	r19,r19,r6
101036b8:	2087c83a 	sub	r3,r4,r2
101036bc:	98e7c83a 	sub	r19,r19,r3
101036c0:	38c7883a 	add	r3,r7,r3
101036c4:	b4c02b16 	blt	r22,r19,10103774 <_fseeko_r+0x2e0>
101036c8:	98c9883a 	add	r4,r19,r3
101036cc:	b100292e 	bgeu	r22,r4,10103774 <_fseeko_r+0x2e0>
101036d0:	b4e7c83a 	sub	r19,r22,r19
101036d4:	14c5883a 	add	r2,r2,r19
101036d8:	1ce7c83a 	sub	r19,r3,r19
101036dc:	80800015 	stw	r2,0(r16)
101036e0:	84c00115 	stw	r19,4(r16)
101036e4:	28000526 	beq	r5,zero,101036fc <_fseeko_r+0x268>
101036e8:	80801004 	addi	r2,r16,64
101036ec:	28800226 	beq	r5,r2,101036f8 <_fseeko_r+0x264>
101036f0:	8809883a 	mov	r4,r17
101036f4:	01031640 	call	10103164 <_free_r>
101036f8:	80000c15 	stw	zero,48(r16)
101036fc:	8080030b 	ldhu	r2,12(r16)
10103700:	01800204 	movi	r6,8
10103704:	000b883a 	mov	r5,zero
10103708:	10bff7cc 	andi	r2,r2,65503
1010370c:	8080030d 	sth	r2,12(r16)
10103710:	81001704 	addi	r4,r16,92
10103714:	01045a00 	call	101045a0 <memset>
10103718:	0027883a 	mov	r19,zero
1010371c:	003f7c06 	br	10103510 <__alt_data_end+0xfffe3510>
10103720:	80c00117 	ldw	r3,4(r16)
10103724:	80800c17 	ldw	r2,48(r16)
10103728:	98e7c83a 	sub	r19,r19,r3
1010372c:	10003b26 	beq	r2,zero,1010381c <_fseeko_r+0x388>
10103730:	80c00f17 	ldw	r3,60(r16)
10103734:	80800417 	ldw	r2,16(r16)
10103738:	98e7c83a 	sub	r19,r19,r3
1010373c:	003fbc06 	br	10103630 <__alt_data_end+0xfffe3630>
10103740:	8140038f 	ldh	r5,14(r16)
10103744:	d80d883a 	mov	r6,sp
10103748:	8809883a 	mov	r4,r17
1010374c:	01038f40 	call	101038f4 <_fstat_r>
10103750:	103f891e 	bne	r2,zero,10103578 <__alt_data_end+0xfffe3578>
10103754:	dd800417 	ldw	r22,16(sp)
10103758:	adad883a 	add	r22,r21,r22
1010375c:	b83fc926 	beq	r23,zero,10103684 <__alt_data_end+0xfffe3684>
10103760:	81400c17 	ldw	r5,48(r16)
10103764:	81800117 	ldw	r6,4(r16)
10103768:	28005026 	beq	r5,zero,101038ac <_fseeko_r+0x418>
1010376c:	81c00f17 	ldw	r7,60(r16)
10103770:	003fce06 	br	101036ac <__alt_data_end+0xfffe36ac>
10103774:	84c01317 	ldw	r19,76(r16)
10103778:	81400717 	ldw	r5,28(r16)
1010377c:	000f883a 	mov	r7,zero
10103780:	04e7c83a 	sub	r19,zero,r19
10103784:	9da6703a 	and	r19,r19,r22
10103788:	980d883a 	mov	r6,r19
1010378c:	8809883a 	mov	r4,r17
10103790:	a03ee83a 	callr	r20
10103794:	00ffffc4 	movi	r3,-1
10103798:	10ff7726 	beq	r2,r3,10103578 <__alt_data_end+0xfffe3578>
1010379c:	80800417 	ldw	r2,16(r16)
101037a0:	81400c17 	ldw	r5,48(r16)
101037a4:	80000115 	stw	zero,4(r16)
101037a8:	80800015 	stw	r2,0(r16)
101037ac:	28000526 	beq	r5,zero,101037c4 <_fseeko_r+0x330>
101037b0:	80801004 	addi	r2,r16,64
101037b4:	28800226 	beq	r5,r2,101037c0 <_fseeko_r+0x32c>
101037b8:	8809883a 	mov	r4,r17
101037bc:	01031640 	call	10103164 <_free_r>
101037c0:	80000c15 	stw	zero,48(r16)
101037c4:	8080030b 	ldhu	r2,12(r16)
101037c8:	b4e7c83a 	sub	r19,r22,r19
101037cc:	10bff7cc 	andi	r2,r2,65503
101037d0:	8080030d 	sth	r2,12(r16)
101037d4:	98000b26 	beq	r19,zero,10103804 <_fseeko_r+0x370>
101037d8:	800b883a 	mov	r5,r16
101037dc:	8809883a 	mov	r4,r17
101037e0:	01049ec0 	call	101049ec <__srefill_r>
101037e4:	103f641e 	bne	r2,zero,10103578 <__alt_data_end+0xfffe3578>
101037e8:	80800117 	ldw	r2,4(r16)
101037ec:	14ff6236 	bltu	r2,r19,10103578 <__alt_data_end+0xfffe3578>
101037f0:	80c00017 	ldw	r3,0(r16)
101037f4:	14c5c83a 	sub	r2,r2,r19
101037f8:	80800115 	stw	r2,4(r16)
101037fc:	1ce7883a 	add	r19,r3,r19
10103800:	84c00015 	stw	r19,0(r16)
10103804:	01800204 	movi	r6,8
10103808:	000b883a 	mov	r5,zero
1010380c:	81001704 	addi	r4,r16,92
10103810:	01045a00 	call	101045a0 <memset>
10103814:	0027883a 	mov	r19,zero
10103818:	003f3d06 	br	10103510 <__alt_data_end+0xfffe3510>
1010381c:	80800417 	ldw	r2,16(r16)
10103820:	003f8306 	br	10103630 <__alt_data_end+0xfffe3630>
10103824:	81400717 	ldw	r5,28(r16)
10103828:	900f883a 	mov	r7,r18
1010382c:	000d883a 	mov	r6,zero
10103830:	8809883a 	mov	r4,r17
10103834:	a03ee83a 	callr	r20
10103838:	1027883a 	mov	r19,r2
1010383c:	00bfffc4 	movi	r2,-1
10103840:	98bf3226 	beq	r19,r2,1010350c <__alt_data_end+0xfffe350c>
10103844:	8080030b 	ldhu	r2,12(r16)
10103848:	003f7006 	br	1010360c <__alt_data_end+0xfffe360c>
1010384c:	8140038f 	ldh	r5,14(r16)
10103850:	283f4716 	blt	r5,zero,10103570 <__alt_data_end+0xfffe3570>
10103854:	d80d883a 	mov	r6,sp
10103858:	8809883a 	mov	r4,r17
1010385c:	01038f40 	call	101038f4 <_fstat_r>
10103860:	1000041e 	bne	r2,zero,10103874 <_fseeko_r+0x3e0>
10103864:	d8800117 	ldw	r2,4(sp)
10103868:	00e00014 	movui	r3,32768
1010386c:	10bc000c 	andi	r2,r2,61440
10103870:	10ff7c26 	beq	r2,r3,10103664 <__alt_data_end+0xfffe3664>
10103874:	8080030b 	ldhu	r2,12(r16)
10103878:	003f3d06 	br	10103570 <__alt_data_end+0xfffe3570>
1010387c:	800b883a 	mov	r5,r16
10103880:	8809883a 	mov	r4,r17
10103884:	0103bd80 	call	10103bd8 <__smakebuf_r>
10103888:	003f3106 	br	10103550 <__alt_data_end+0xfffe3550>
1010388c:	81400717 	ldw	r5,28(r16)
10103890:	01c00044 	movi	r7,1
10103894:	000d883a 	mov	r6,zero
10103898:	8809883a 	mov	r4,r17
1010389c:	a03ee83a 	callr	r20
101038a0:	00ffffc4 	movi	r3,-1
101038a4:	10ff7b1e 	bne	r2,r3,10103694 <__alt_data_end+0xfffe3694>
101038a8:	003f3306 	br	10103578 <__alt_data_end+0xfffe3578>
101038ac:	80c00017 	ldw	r3,0(r16)
101038b0:	80800417 	ldw	r2,16(r16)
101038b4:	000b883a 	mov	r5,zero
101038b8:	1887c83a 	sub	r3,r3,r2
101038bc:	98e7c83a 	sub	r19,r19,r3
101038c0:	30c7883a 	add	r3,r6,r3
101038c4:	003f7f06 	br	101036c4 <__alt_data_end+0xfffe36c4>
101038c8:	00800744 	movi	r2,29
101038cc:	88800015 	stw	r2,0(r17)
101038d0:	04ffffc4 	movi	r19,-1
101038d4:	003f0e06 	br	10103510 <__alt_data_end+0xfffe3510>

101038d8 <fseeko>:
101038d8:	00840474 	movhi	r2,4113
101038dc:	10918804 	addi	r2,r2,17952
101038e0:	300f883a 	mov	r7,r6
101038e4:	280d883a 	mov	r6,r5
101038e8:	200b883a 	mov	r5,r4
101038ec:	11000017 	ldw	r4,0(r2)
101038f0:	01034941 	jmpi	10103494 <_fseeko_r>

101038f4 <_fstat_r>:
101038f4:	defffd04 	addi	sp,sp,-12
101038f8:	2805883a 	mov	r2,r5
101038fc:	dc000015 	stw	r16,0(sp)
10103900:	04040474 	movhi	r16,4113
10103904:	dc400115 	stw	r17,4(sp)
10103908:	84188004 	addi	r16,r16,25088
1010390c:	2023883a 	mov	r17,r4
10103910:	300b883a 	mov	r5,r6
10103914:	1009883a 	mov	r4,r2
10103918:	dfc00215 	stw	ra,8(sp)
1010391c:	80000015 	stw	zero,0(r16)
10103920:	010fbb80 	call	1010fbb8 <fstat>
10103924:	00ffffc4 	movi	r3,-1
10103928:	10c00526 	beq	r2,r3,10103940 <_fstat_r+0x4c>
1010392c:	dfc00217 	ldw	ra,8(sp)
10103930:	dc400117 	ldw	r17,4(sp)
10103934:	dc000017 	ldw	r16,0(sp)
10103938:	dec00304 	addi	sp,sp,12
1010393c:	f800283a 	ret
10103940:	80c00017 	ldw	r3,0(r16)
10103944:	183ff926 	beq	r3,zero,1010392c <__alt_data_end+0xfffe392c>
10103948:	88c00015 	stw	r3,0(r17)
1010394c:	003ff706 	br	1010392c <__alt_data_end+0xfffe392c>

10103950 <_fwalk>:
10103950:	defff704 	addi	sp,sp,-36
10103954:	dd000415 	stw	r20,16(sp)
10103958:	dfc00815 	stw	ra,32(sp)
1010395c:	ddc00715 	stw	r23,28(sp)
10103960:	dd800615 	stw	r22,24(sp)
10103964:	dd400515 	stw	r21,20(sp)
10103968:	dcc00315 	stw	r19,12(sp)
1010396c:	dc800215 	stw	r18,8(sp)
10103970:	dc400115 	stw	r17,4(sp)
10103974:	dc000015 	stw	r16,0(sp)
10103978:	2500b804 	addi	r20,r4,736
1010397c:	a0002326 	beq	r20,zero,10103a0c <_fwalk+0xbc>
10103980:	282b883a 	mov	r21,r5
10103984:	002f883a 	mov	r23,zero
10103988:	05800044 	movi	r22,1
1010398c:	04ffffc4 	movi	r19,-1
10103990:	a4400117 	ldw	r17,4(r20)
10103994:	a4800217 	ldw	r18,8(r20)
10103998:	8c7fffc4 	addi	r17,r17,-1
1010399c:	88000d16 	blt	r17,zero,101039d4 <_fwalk+0x84>
101039a0:	94000304 	addi	r16,r18,12
101039a4:	94800384 	addi	r18,r18,14
101039a8:	8080000b 	ldhu	r2,0(r16)
101039ac:	8c7fffc4 	addi	r17,r17,-1
101039b0:	813ffd04 	addi	r4,r16,-12
101039b4:	b080042e 	bgeu	r22,r2,101039c8 <_fwalk+0x78>
101039b8:	9080000f 	ldh	r2,0(r18)
101039bc:	14c00226 	beq	r2,r19,101039c8 <_fwalk+0x78>
101039c0:	a83ee83a 	callr	r21
101039c4:	b8aeb03a 	or	r23,r23,r2
101039c8:	84001a04 	addi	r16,r16,104
101039cc:	94801a04 	addi	r18,r18,104
101039d0:	8cfff51e 	bne	r17,r19,101039a8 <__alt_data_end+0xfffe39a8>
101039d4:	a5000017 	ldw	r20,0(r20)
101039d8:	a03fed1e 	bne	r20,zero,10103990 <__alt_data_end+0xfffe3990>
101039dc:	b805883a 	mov	r2,r23
101039e0:	dfc00817 	ldw	ra,32(sp)
101039e4:	ddc00717 	ldw	r23,28(sp)
101039e8:	dd800617 	ldw	r22,24(sp)
101039ec:	dd400517 	ldw	r21,20(sp)
101039f0:	dd000417 	ldw	r20,16(sp)
101039f4:	dcc00317 	ldw	r19,12(sp)
101039f8:	dc800217 	ldw	r18,8(sp)
101039fc:	dc400117 	ldw	r17,4(sp)
10103a00:	dc000017 	ldw	r16,0(sp)
10103a04:	dec00904 	addi	sp,sp,36
10103a08:	f800283a 	ret
10103a0c:	002f883a 	mov	r23,zero
10103a10:	003ff206 	br	101039dc <__alt_data_end+0xfffe39dc>

10103a14 <_fwalk_reent>:
10103a14:	defff704 	addi	sp,sp,-36
10103a18:	dd000415 	stw	r20,16(sp)
10103a1c:	dfc00815 	stw	ra,32(sp)
10103a20:	ddc00715 	stw	r23,28(sp)
10103a24:	dd800615 	stw	r22,24(sp)
10103a28:	dd400515 	stw	r21,20(sp)
10103a2c:	dcc00315 	stw	r19,12(sp)
10103a30:	dc800215 	stw	r18,8(sp)
10103a34:	dc400115 	stw	r17,4(sp)
10103a38:	dc000015 	stw	r16,0(sp)
10103a3c:	2500b804 	addi	r20,r4,736
10103a40:	a0002326 	beq	r20,zero,10103ad0 <_fwalk_reent+0xbc>
10103a44:	282b883a 	mov	r21,r5
10103a48:	2027883a 	mov	r19,r4
10103a4c:	002f883a 	mov	r23,zero
10103a50:	05800044 	movi	r22,1
10103a54:	04bfffc4 	movi	r18,-1
10103a58:	a4400117 	ldw	r17,4(r20)
10103a5c:	a4000217 	ldw	r16,8(r20)
10103a60:	8c7fffc4 	addi	r17,r17,-1
10103a64:	88000c16 	blt	r17,zero,10103a98 <_fwalk_reent+0x84>
10103a68:	84000304 	addi	r16,r16,12
10103a6c:	8080000b 	ldhu	r2,0(r16)
10103a70:	8c7fffc4 	addi	r17,r17,-1
10103a74:	817ffd04 	addi	r5,r16,-12
10103a78:	b080052e 	bgeu	r22,r2,10103a90 <_fwalk_reent+0x7c>
10103a7c:	8080008f 	ldh	r2,2(r16)
10103a80:	9809883a 	mov	r4,r19
10103a84:	14800226 	beq	r2,r18,10103a90 <_fwalk_reent+0x7c>
10103a88:	a83ee83a 	callr	r21
10103a8c:	b8aeb03a 	or	r23,r23,r2
10103a90:	84001a04 	addi	r16,r16,104
10103a94:	8cbff51e 	bne	r17,r18,10103a6c <__alt_data_end+0xfffe3a6c>
10103a98:	a5000017 	ldw	r20,0(r20)
10103a9c:	a03fee1e 	bne	r20,zero,10103a58 <__alt_data_end+0xfffe3a58>
10103aa0:	b805883a 	mov	r2,r23
10103aa4:	dfc00817 	ldw	ra,32(sp)
10103aa8:	ddc00717 	ldw	r23,28(sp)
10103aac:	dd800617 	ldw	r22,24(sp)
10103ab0:	dd400517 	ldw	r21,20(sp)
10103ab4:	dd000417 	ldw	r20,16(sp)
10103ab8:	dcc00317 	ldw	r19,12(sp)
10103abc:	dc800217 	ldw	r18,8(sp)
10103ac0:	dc400117 	ldw	r17,4(sp)
10103ac4:	dc000017 	ldw	r16,0(sp)
10103ac8:	dec00904 	addi	sp,sp,36
10103acc:	f800283a 	ret
10103ad0:	002f883a 	mov	r23,zero
10103ad4:	003ff206 	br	10103aa0 <__alt_data_end+0xfffe3aa0>

10103ad8 <_fwrite_r>:
10103ad8:	defff504 	addi	sp,sp,-44
10103adc:	dc800815 	stw	r18,32(sp)
10103ae0:	39a5383a 	mul	r18,r7,r6
10103ae4:	d8800304 	addi	r2,sp,12
10103ae8:	d8800015 	stw	r2,0(sp)
10103aec:	00800044 	movi	r2,1
10103af0:	dcc00915 	stw	r19,36(sp)
10103af4:	dc400715 	stw	r17,28(sp)
10103af8:	dc000615 	stw	r16,24(sp)
10103afc:	d9400315 	stw	r5,12(sp)
10103b00:	dfc00a15 	stw	ra,40(sp)
10103b04:	dc800415 	stw	r18,16(sp)
10103b08:	dc800215 	stw	r18,8(sp)
10103b0c:	d8800115 	stw	r2,4(sp)
10103b10:	3027883a 	mov	r19,r6
10103b14:	3821883a 	mov	r16,r7
10103b18:	2023883a 	mov	r17,r4
10103b1c:	d9400b17 	ldw	r5,44(sp)
10103b20:	20000226 	beq	r4,zero,10103b2c <_fwrite_r+0x54>
10103b24:	20800e17 	ldw	r2,56(r4)
10103b28:	10001a26 	beq	r2,zero,10103b94 <_fwrite_r+0xbc>
10103b2c:	2880030b 	ldhu	r2,12(r5)
10103b30:	10c8000c 	andi	r3,r2,8192
10103b34:	1800061e 	bne	r3,zero,10103b50 <_fwrite_r+0x78>
10103b38:	29001917 	ldw	r4,100(r5)
10103b3c:	00f7ffc4 	movi	r3,-8193
10103b40:	10880014 	ori	r2,r2,8192
10103b44:	20c6703a 	and	r3,r4,r3
10103b48:	2880030d 	sth	r2,12(r5)
10103b4c:	28c01915 	stw	r3,100(r5)
10103b50:	d80d883a 	mov	r6,sp
10103b54:	8809883a 	mov	r4,r17
10103b58:	0108d4c0 	call	10108d4c <__sfvwrite_r>
10103b5c:	10000b26 	beq	r2,zero,10103b8c <_fwrite_r+0xb4>
10103b60:	d9000217 	ldw	r4,8(sp)
10103b64:	980b883a 	mov	r5,r19
10103b68:	9109c83a 	sub	r4,r18,r4
10103b6c:	01026400 	call	10102640 <__udivsi3>
10103b70:	dfc00a17 	ldw	ra,40(sp)
10103b74:	dcc00917 	ldw	r19,36(sp)
10103b78:	dc800817 	ldw	r18,32(sp)
10103b7c:	dc400717 	ldw	r17,28(sp)
10103b80:	dc000617 	ldw	r16,24(sp)
10103b84:	dec00b04 	addi	sp,sp,44
10103b88:	f800283a 	ret
10103b8c:	8005883a 	mov	r2,r16
10103b90:	003ff706 	br	10103b70 <__alt_data_end+0xfffe3b70>
10103b94:	d9400515 	stw	r5,20(sp)
10103b98:	0102df80 	call	10102df8 <__sinit>
10103b9c:	d9400517 	ldw	r5,20(sp)
10103ba0:	003fe206 	br	10103b2c <__alt_data_end+0xfffe3b2c>

10103ba4 <fwrite>:
10103ba4:	defffe04 	addi	sp,sp,-8
10103ba8:	00840474 	movhi	r2,4113
10103bac:	d9c00015 	stw	r7,0(sp)
10103bb0:	10918804 	addi	r2,r2,17952
10103bb4:	300f883a 	mov	r7,r6
10103bb8:	280d883a 	mov	r6,r5
10103bbc:	200b883a 	mov	r5,r4
10103bc0:	11000017 	ldw	r4,0(r2)
10103bc4:	dfc00115 	stw	ra,4(sp)
10103bc8:	0103ad80 	call	10103ad8 <_fwrite_r>
10103bcc:	dfc00117 	ldw	ra,4(sp)
10103bd0:	dec00204 	addi	sp,sp,8
10103bd4:	f800283a 	ret

10103bd8 <__smakebuf_r>:
10103bd8:	2880030b 	ldhu	r2,12(r5)
10103bdc:	10c0008c 	andi	r3,r2,2
10103be0:	1800411e 	bne	r3,zero,10103ce8 <__smakebuf_r+0x110>
10103be4:	deffec04 	addi	sp,sp,-80
10103be8:	dc000f15 	stw	r16,60(sp)
10103bec:	2821883a 	mov	r16,r5
10103bf0:	2940038f 	ldh	r5,14(r5)
10103bf4:	dc401015 	stw	r17,64(sp)
10103bf8:	dfc01315 	stw	ra,76(sp)
10103bfc:	dcc01215 	stw	r19,72(sp)
10103c00:	dc801115 	stw	r18,68(sp)
10103c04:	2023883a 	mov	r17,r4
10103c08:	28001c16 	blt	r5,zero,10103c7c <__smakebuf_r+0xa4>
10103c0c:	d80d883a 	mov	r6,sp
10103c10:	01038f40 	call	101038f4 <_fstat_r>
10103c14:	10001816 	blt	r2,zero,10103c78 <__smakebuf_r+0xa0>
10103c18:	d8800117 	ldw	r2,4(sp)
10103c1c:	00e00014 	movui	r3,32768
10103c20:	10bc000c 	andi	r2,r2,61440
10103c24:	14c80020 	cmpeqi	r19,r2,8192
10103c28:	10c03726 	beq	r2,r3,10103d08 <__smakebuf_r+0x130>
10103c2c:	80c0030b 	ldhu	r3,12(r16)
10103c30:	18c20014 	ori	r3,r3,2048
10103c34:	80c0030d 	sth	r3,12(r16)
10103c38:	00c80004 	movi	r3,8192
10103c3c:	10c0521e 	bne	r2,r3,10103d88 <__smakebuf_r+0x1b0>
10103c40:	8140038f 	ldh	r5,14(r16)
10103c44:	8809883a 	mov	r4,r17
10103c48:	01092080 	call	10109208 <_isatty_r>
10103c4c:	10004c26 	beq	r2,zero,10103d80 <__smakebuf_r+0x1a8>
10103c50:	8080030b 	ldhu	r2,12(r16)
10103c54:	80c010c4 	addi	r3,r16,67
10103c58:	80c00015 	stw	r3,0(r16)
10103c5c:	10800054 	ori	r2,r2,1
10103c60:	8080030d 	sth	r2,12(r16)
10103c64:	00800044 	movi	r2,1
10103c68:	80c00415 	stw	r3,16(r16)
10103c6c:	80800515 	stw	r2,20(r16)
10103c70:	04810004 	movi	r18,1024
10103c74:	00000706 	br	10103c94 <__smakebuf_r+0xbc>
10103c78:	8080030b 	ldhu	r2,12(r16)
10103c7c:	10c0200c 	andi	r3,r2,128
10103c80:	18001f1e 	bne	r3,zero,10103d00 <__smakebuf_r+0x128>
10103c84:	04810004 	movi	r18,1024
10103c88:	10820014 	ori	r2,r2,2048
10103c8c:	8080030d 	sth	r2,12(r16)
10103c90:	0027883a 	mov	r19,zero
10103c94:	900b883a 	mov	r5,r18
10103c98:	8809883a 	mov	r4,r17
10103c9c:	0103d940 	call	10103d94 <_malloc_r>
10103ca0:	10002c26 	beq	r2,zero,10103d54 <__smakebuf_r+0x17c>
10103ca4:	80c0030b 	ldhu	r3,12(r16)
10103ca8:	01040434 	movhi	r4,4112
10103cac:	210aac04 	addi	r4,r4,10928
10103cb0:	89000f15 	stw	r4,60(r17)
10103cb4:	18c02014 	ori	r3,r3,128
10103cb8:	80c0030d 	sth	r3,12(r16)
10103cbc:	80800015 	stw	r2,0(r16)
10103cc0:	80800415 	stw	r2,16(r16)
10103cc4:	84800515 	stw	r18,20(r16)
10103cc8:	98001a1e 	bne	r19,zero,10103d34 <__smakebuf_r+0x15c>
10103ccc:	dfc01317 	ldw	ra,76(sp)
10103cd0:	dcc01217 	ldw	r19,72(sp)
10103cd4:	dc801117 	ldw	r18,68(sp)
10103cd8:	dc401017 	ldw	r17,64(sp)
10103cdc:	dc000f17 	ldw	r16,60(sp)
10103ce0:	dec01404 	addi	sp,sp,80
10103ce4:	f800283a 	ret
10103ce8:	288010c4 	addi	r2,r5,67
10103cec:	28800015 	stw	r2,0(r5)
10103cf0:	28800415 	stw	r2,16(r5)
10103cf4:	00800044 	movi	r2,1
10103cf8:	28800515 	stw	r2,20(r5)
10103cfc:	f800283a 	ret
10103d00:	04801004 	movi	r18,64
10103d04:	003fe006 	br	10103c88 <__alt_data_end+0xfffe3c88>
10103d08:	81000a17 	ldw	r4,40(r16)
10103d0c:	00c40434 	movhi	r3,4112
10103d10:	18d33b04 	addi	r3,r3,19692
10103d14:	20ffc51e 	bne	r4,r3,10103c2c <__alt_data_end+0xfffe3c2c>
10103d18:	8080030b 	ldhu	r2,12(r16)
10103d1c:	04810004 	movi	r18,1024
10103d20:	84801315 	stw	r18,76(r16)
10103d24:	1484b03a 	or	r2,r2,r18
10103d28:	8080030d 	sth	r2,12(r16)
10103d2c:	0027883a 	mov	r19,zero
10103d30:	003fd806 	br	10103c94 <__alt_data_end+0xfffe3c94>
10103d34:	8140038f 	ldh	r5,14(r16)
10103d38:	8809883a 	mov	r4,r17
10103d3c:	01092080 	call	10109208 <_isatty_r>
10103d40:	103fe226 	beq	r2,zero,10103ccc <__alt_data_end+0xfffe3ccc>
10103d44:	8080030b 	ldhu	r2,12(r16)
10103d48:	10800054 	ori	r2,r2,1
10103d4c:	8080030d 	sth	r2,12(r16)
10103d50:	003fde06 	br	10103ccc <__alt_data_end+0xfffe3ccc>
10103d54:	8080030b 	ldhu	r2,12(r16)
10103d58:	10c0800c 	andi	r3,r2,512
10103d5c:	183fdb1e 	bne	r3,zero,10103ccc <__alt_data_end+0xfffe3ccc>
10103d60:	10800094 	ori	r2,r2,2
10103d64:	80c010c4 	addi	r3,r16,67
10103d68:	8080030d 	sth	r2,12(r16)
10103d6c:	00800044 	movi	r2,1
10103d70:	80c00015 	stw	r3,0(r16)
10103d74:	80c00415 	stw	r3,16(r16)
10103d78:	80800515 	stw	r2,20(r16)
10103d7c:	003fd306 	br	10103ccc <__alt_data_end+0xfffe3ccc>
10103d80:	04810004 	movi	r18,1024
10103d84:	003fc306 	br	10103c94 <__alt_data_end+0xfffe3c94>
10103d88:	0027883a 	mov	r19,zero
10103d8c:	04810004 	movi	r18,1024
10103d90:	003fc006 	br	10103c94 <__alt_data_end+0xfffe3c94>

10103d94 <_malloc_r>:
10103d94:	defff504 	addi	sp,sp,-44
10103d98:	dc800315 	stw	r18,12(sp)
10103d9c:	dfc00a15 	stw	ra,40(sp)
10103da0:	df000915 	stw	fp,36(sp)
10103da4:	ddc00815 	stw	r23,32(sp)
10103da8:	dd800715 	stw	r22,28(sp)
10103dac:	dd400615 	stw	r21,24(sp)
10103db0:	dd000515 	stw	r20,20(sp)
10103db4:	dcc00415 	stw	r19,16(sp)
10103db8:	dc400215 	stw	r17,8(sp)
10103dbc:	dc000115 	stw	r16,4(sp)
10103dc0:	288002c4 	addi	r2,r5,11
10103dc4:	00c00584 	movi	r3,22
10103dc8:	2025883a 	mov	r18,r4
10103dcc:	18807f2e 	bgeu	r3,r2,10103fcc <_malloc_r+0x238>
10103dd0:	047ffe04 	movi	r17,-8
10103dd4:	1462703a 	and	r17,r2,r17
10103dd8:	8800a316 	blt	r17,zero,10104068 <_malloc_r+0x2d4>
10103ddc:	8940a236 	bltu	r17,r5,10104068 <_malloc_r+0x2d4>
10103de0:	010ffc00 	call	1010ffc0 <__malloc_lock>
10103de4:	00807dc4 	movi	r2,503
10103de8:	1441e92e 	bgeu	r2,r17,10104590 <_malloc_r+0x7fc>
10103dec:	8804d27a 	srli	r2,r17,9
10103df0:	1000a126 	beq	r2,zero,10104078 <_malloc_r+0x2e4>
10103df4:	00c00104 	movi	r3,4
10103df8:	18811e36 	bltu	r3,r2,10104274 <_malloc_r+0x4e0>
10103dfc:	8804d1ba 	srli	r2,r17,6
10103e00:	12000e44 	addi	r8,r2,57
10103e04:	11c00e04 	addi	r7,r2,56
10103e08:	4209883a 	add	r4,r8,r8
10103e0c:	04c40474 	movhi	r19,4113
10103e10:	2109883a 	add	r4,r4,r4
10103e14:	9ccbdb04 	addi	r19,r19,12140
10103e18:	2109883a 	add	r4,r4,r4
10103e1c:	9909883a 	add	r4,r19,r4
10103e20:	24000117 	ldw	r16,4(r4)
10103e24:	213ffe04 	addi	r4,r4,-8
10103e28:	24009726 	beq	r4,r16,10104088 <_malloc_r+0x2f4>
10103e2c:	80800117 	ldw	r2,4(r16)
10103e30:	01bfff04 	movi	r6,-4
10103e34:	014003c4 	movi	r5,15
10103e38:	1184703a 	and	r2,r2,r6
10103e3c:	1447c83a 	sub	r3,r2,r17
10103e40:	28c00716 	blt	r5,r3,10103e60 <_malloc_r+0xcc>
10103e44:	1800920e 	bge	r3,zero,10104090 <_malloc_r+0x2fc>
10103e48:	84000317 	ldw	r16,12(r16)
10103e4c:	24008e26 	beq	r4,r16,10104088 <_malloc_r+0x2f4>
10103e50:	80800117 	ldw	r2,4(r16)
10103e54:	1184703a 	and	r2,r2,r6
10103e58:	1447c83a 	sub	r3,r2,r17
10103e5c:	28fff90e 	bge	r5,r3,10103e44 <__alt_data_end+0xfffe3e44>
10103e60:	3809883a 	mov	r4,r7
10103e64:	01840474 	movhi	r6,4113
10103e68:	9c000417 	ldw	r16,16(r19)
10103e6c:	318bdb04 	addi	r6,r6,12140
10103e70:	32000204 	addi	r8,r6,8
10103e74:	82013426 	beq	r16,r8,10104348 <_malloc_r+0x5b4>
10103e78:	80c00117 	ldw	r3,4(r16)
10103e7c:	00bfff04 	movi	r2,-4
10103e80:	188e703a 	and	r7,r3,r2
10103e84:	3c45c83a 	sub	r2,r7,r17
10103e88:	00c003c4 	movi	r3,15
10103e8c:	18811f16 	blt	r3,r2,1010430c <_malloc_r+0x578>
10103e90:	32000515 	stw	r8,20(r6)
10103e94:	32000415 	stw	r8,16(r6)
10103e98:	10007f0e 	bge	r2,zero,10104098 <_malloc_r+0x304>
10103e9c:	00807fc4 	movi	r2,511
10103ea0:	11c0fd36 	bltu	r2,r7,10104298 <_malloc_r+0x504>
10103ea4:	3806d0fa 	srli	r3,r7,3
10103ea8:	01c00044 	movi	r7,1
10103eac:	30800117 	ldw	r2,4(r6)
10103eb0:	19400044 	addi	r5,r3,1
10103eb4:	294b883a 	add	r5,r5,r5
10103eb8:	1807d0ba 	srai	r3,r3,2
10103ebc:	294b883a 	add	r5,r5,r5
10103ec0:	294b883a 	add	r5,r5,r5
10103ec4:	298b883a 	add	r5,r5,r6
10103ec8:	38c6983a 	sll	r3,r7,r3
10103ecc:	29c00017 	ldw	r7,0(r5)
10103ed0:	2a7ffe04 	addi	r9,r5,-8
10103ed4:	1886b03a 	or	r3,r3,r2
10103ed8:	82400315 	stw	r9,12(r16)
10103edc:	81c00215 	stw	r7,8(r16)
10103ee0:	30c00115 	stw	r3,4(r6)
10103ee4:	2c000015 	stw	r16,0(r5)
10103ee8:	3c000315 	stw	r16,12(r7)
10103eec:	2005d0ba 	srai	r2,r4,2
10103ef0:	01400044 	movi	r5,1
10103ef4:	288a983a 	sll	r5,r5,r2
10103ef8:	19406f36 	bltu	r3,r5,101040b8 <_malloc_r+0x324>
10103efc:	28c4703a 	and	r2,r5,r3
10103f00:	10000a1e 	bne	r2,zero,10103f2c <_malloc_r+0x198>
10103f04:	00bfff04 	movi	r2,-4
10103f08:	294b883a 	add	r5,r5,r5
10103f0c:	2088703a 	and	r4,r4,r2
10103f10:	28c4703a 	and	r2,r5,r3
10103f14:	21000104 	addi	r4,r4,4
10103f18:	1000041e 	bne	r2,zero,10103f2c <_malloc_r+0x198>
10103f1c:	294b883a 	add	r5,r5,r5
10103f20:	28c4703a 	and	r2,r5,r3
10103f24:	21000104 	addi	r4,r4,4
10103f28:	103ffc26 	beq	r2,zero,10103f1c <__alt_data_end+0xfffe3f1c>
10103f2c:	02bfff04 	movi	r10,-4
10103f30:	024003c4 	movi	r9,15
10103f34:	21800044 	addi	r6,r4,1
10103f38:	318d883a 	add	r6,r6,r6
10103f3c:	318d883a 	add	r6,r6,r6
10103f40:	318d883a 	add	r6,r6,r6
10103f44:	998d883a 	add	r6,r19,r6
10103f48:	333ffe04 	addi	r12,r6,-8
10103f4c:	2017883a 	mov	r11,r4
10103f50:	31800104 	addi	r6,r6,4
10103f54:	34000017 	ldw	r16,0(r6)
10103f58:	31fffd04 	addi	r7,r6,-12
10103f5c:	81c0041e 	bne	r16,r7,10103f70 <_malloc_r+0x1dc>
10103f60:	0000fb06 	br	10104350 <_malloc_r+0x5bc>
10103f64:	1801030e 	bge	r3,zero,10104374 <_malloc_r+0x5e0>
10103f68:	84000317 	ldw	r16,12(r16)
10103f6c:	81c0f826 	beq	r16,r7,10104350 <_malloc_r+0x5bc>
10103f70:	80800117 	ldw	r2,4(r16)
10103f74:	1284703a 	and	r2,r2,r10
10103f78:	1447c83a 	sub	r3,r2,r17
10103f7c:	48fff90e 	bge	r9,r3,10103f64 <__alt_data_end+0xfffe3f64>
10103f80:	80800317 	ldw	r2,12(r16)
10103f84:	81000217 	ldw	r4,8(r16)
10103f88:	89400054 	ori	r5,r17,1
10103f8c:	81400115 	stw	r5,4(r16)
10103f90:	20800315 	stw	r2,12(r4)
10103f94:	11000215 	stw	r4,8(r2)
10103f98:	8463883a 	add	r17,r16,r17
10103f9c:	9c400515 	stw	r17,20(r19)
10103fa0:	9c400415 	stw	r17,16(r19)
10103fa4:	18800054 	ori	r2,r3,1
10103fa8:	88800115 	stw	r2,4(r17)
10103fac:	8a000315 	stw	r8,12(r17)
10103fb0:	8a000215 	stw	r8,8(r17)
10103fb4:	88e3883a 	add	r17,r17,r3
10103fb8:	88c00015 	stw	r3,0(r17)
10103fbc:	9009883a 	mov	r4,r18
10103fc0:	010ffe40 	call	1010ffe4 <__malloc_unlock>
10103fc4:	80800204 	addi	r2,r16,8
10103fc8:	00001b06 	br	10104038 <_malloc_r+0x2a4>
10103fcc:	04400404 	movi	r17,16
10103fd0:	89402536 	bltu	r17,r5,10104068 <_malloc_r+0x2d4>
10103fd4:	010ffc00 	call	1010ffc0 <__malloc_lock>
10103fd8:	00800184 	movi	r2,6
10103fdc:	01000084 	movi	r4,2
10103fe0:	04c40474 	movhi	r19,4113
10103fe4:	1085883a 	add	r2,r2,r2
10103fe8:	9ccbdb04 	addi	r19,r19,12140
10103fec:	1085883a 	add	r2,r2,r2
10103ff0:	9885883a 	add	r2,r19,r2
10103ff4:	14000117 	ldw	r16,4(r2)
10103ff8:	10fffe04 	addi	r3,r2,-8
10103ffc:	80c0d926 	beq	r16,r3,10104364 <_malloc_r+0x5d0>
10104000:	80c00117 	ldw	r3,4(r16)
10104004:	81000317 	ldw	r4,12(r16)
10104008:	00bfff04 	movi	r2,-4
1010400c:	1884703a 	and	r2,r3,r2
10104010:	81400217 	ldw	r5,8(r16)
10104014:	8085883a 	add	r2,r16,r2
10104018:	10c00117 	ldw	r3,4(r2)
1010401c:	29000315 	stw	r4,12(r5)
10104020:	21400215 	stw	r5,8(r4)
10104024:	18c00054 	ori	r3,r3,1
10104028:	10c00115 	stw	r3,4(r2)
1010402c:	9009883a 	mov	r4,r18
10104030:	010ffe40 	call	1010ffe4 <__malloc_unlock>
10104034:	80800204 	addi	r2,r16,8
10104038:	dfc00a17 	ldw	ra,40(sp)
1010403c:	df000917 	ldw	fp,36(sp)
10104040:	ddc00817 	ldw	r23,32(sp)
10104044:	dd800717 	ldw	r22,28(sp)
10104048:	dd400617 	ldw	r21,24(sp)
1010404c:	dd000517 	ldw	r20,20(sp)
10104050:	dcc00417 	ldw	r19,16(sp)
10104054:	dc800317 	ldw	r18,12(sp)
10104058:	dc400217 	ldw	r17,8(sp)
1010405c:	dc000117 	ldw	r16,4(sp)
10104060:	dec00b04 	addi	sp,sp,44
10104064:	f800283a 	ret
10104068:	00800304 	movi	r2,12
1010406c:	90800015 	stw	r2,0(r18)
10104070:	0005883a 	mov	r2,zero
10104074:	003ff006 	br	10104038 <__alt_data_end+0xfffe4038>
10104078:	01002004 	movi	r4,128
1010407c:	02001004 	movi	r8,64
10104080:	01c00fc4 	movi	r7,63
10104084:	003f6106 	br	10103e0c <__alt_data_end+0xfffe3e0c>
10104088:	4009883a 	mov	r4,r8
1010408c:	003f7506 	br	10103e64 <__alt_data_end+0xfffe3e64>
10104090:	81000317 	ldw	r4,12(r16)
10104094:	003fde06 	br	10104010 <__alt_data_end+0xfffe4010>
10104098:	81c5883a 	add	r2,r16,r7
1010409c:	11400117 	ldw	r5,4(r2)
101040a0:	9009883a 	mov	r4,r18
101040a4:	29400054 	ori	r5,r5,1
101040a8:	11400115 	stw	r5,4(r2)
101040ac:	010ffe40 	call	1010ffe4 <__malloc_unlock>
101040b0:	80800204 	addi	r2,r16,8
101040b4:	003fe006 	br	10104038 <__alt_data_end+0xfffe4038>
101040b8:	9c000217 	ldw	r16,8(r19)
101040bc:	00bfff04 	movi	r2,-4
101040c0:	85800117 	ldw	r22,4(r16)
101040c4:	b0ac703a 	and	r22,r22,r2
101040c8:	b4400336 	bltu	r22,r17,101040d8 <_malloc_r+0x344>
101040cc:	b445c83a 	sub	r2,r22,r17
101040d0:	00c003c4 	movi	r3,15
101040d4:	18805d16 	blt	r3,r2,1010424c <_malloc_r+0x4b8>
101040d8:	05c40474 	movhi	r23,4113
101040dc:	00840474 	movhi	r2,4113
101040e0:	10988304 	addi	r2,r2,25100
101040e4:	bdd18904 	addi	r23,r23,17956
101040e8:	15400017 	ldw	r21,0(r2)
101040ec:	b8c00017 	ldw	r3,0(r23)
101040f0:	00bfffc4 	movi	r2,-1
101040f4:	858d883a 	add	r6,r16,r22
101040f8:	8d6b883a 	add	r21,r17,r21
101040fc:	1880ea26 	beq	r3,r2,101044a8 <_malloc_r+0x714>
10104100:	ad4403c4 	addi	r21,r21,4111
10104104:	00bc0004 	movi	r2,-4096
10104108:	a8aa703a 	and	r21,r21,r2
1010410c:	a80b883a 	mov	r5,r21
10104110:	9009883a 	mov	r4,r18
10104114:	d9800015 	stw	r6,0(sp)
10104118:	0104bc00 	call	10104bc0 <_sbrk_r>
1010411c:	1029883a 	mov	r20,r2
10104120:	00bfffc4 	movi	r2,-1
10104124:	d9800017 	ldw	r6,0(sp)
10104128:	a080e826 	beq	r20,r2,101044cc <_malloc_r+0x738>
1010412c:	a180a636 	bltu	r20,r6,101043c8 <_malloc_r+0x634>
10104130:	07040474 	movhi	fp,4113
10104134:	e7188e04 	addi	fp,fp,25144
10104138:	e0800017 	ldw	r2,0(fp)
1010413c:	a887883a 	add	r3,r21,r2
10104140:	e0c00015 	stw	r3,0(fp)
10104144:	3500e626 	beq	r6,r20,101044e0 <_malloc_r+0x74c>
10104148:	b9000017 	ldw	r4,0(r23)
1010414c:	00bfffc4 	movi	r2,-1
10104150:	2080ee26 	beq	r4,r2,1010450c <_malloc_r+0x778>
10104154:	a185c83a 	sub	r2,r20,r6
10104158:	10c5883a 	add	r2,r2,r3
1010415c:	e0800015 	stw	r2,0(fp)
10104160:	a0c001cc 	andi	r3,r20,7
10104164:	1800bc26 	beq	r3,zero,10104458 <_malloc_r+0x6c4>
10104168:	a0e9c83a 	sub	r20,r20,r3
1010416c:	00840204 	movi	r2,4104
10104170:	a5000204 	addi	r20,r20,8
10104174:	10c7c83a 	sub	r3,r2,r3
10104178:	a545883a 	add	r2,r20,r21
1010417c:	1083ffcc 	andi	r2,r2,4095
10104180:	18abc83a 	sub	r21,r3,r2
10104184:	a80b883a 	mov	r5,r21
10104188:	9009883a 	mov	r4,r18
1010418c:	0104bc00 	call	10104bc0 <_sbrk_r>
10104190:	00ffffc4 	movi	r3,-1
10104194:	10c0e126 	beq	r2,r3,1010451c <_malloc_r+0x788>
10104198:	1505c83a 	sub	r2,r2,r20
1010419c:	1545883a 	add	r2,r2,r21
101041a0:	10800054 	ori	r2,r2,1
101041a4:	e0c00017 	ldw	r3,0(fp)
101041a8:	9d000215 	stw	r20,8(r19)
101041ac:	a0800115 	stw	r2,4(r20)
101041b0:	a8c7883a 	add	r3,r21,r3
101041b4:	e0c00015 	stw	r3,0(fp)
101041b8:	84c00e26 	beq	r16,r19,101041f4 <_malloc_r+0x460>
101041bc:	018003c4 	movi	r6,15
101041c0:	3580a72e 	bgeu	r6,r22,10104460 <_malloc_r+0x6cc>
101041c4:	81400117 	ldw	r5,4(r16)
101041c8:	013ffe04 	movi	r4,-8
101041cc:	b0bffd04 	addi	r2,r22,-12
101041d0:	1104703a 	and	r2,r2,r4
101041d4:	2900004c 	andi	r4,r5,1
101041d8:	2088b03a 	or	r4,r4,r2
101041dc:	81000115 	stw	r4,4(r16)
101041e0:	01400144 	movi	r5,5
101041e4:	8089883a 	add	r4,r16,r2
101041e8:	21400115 	stw	r5,4(r4)
101041ec:	21400215 	stw	r5,8(r4)
101041f0:	3080cd36 	bltu	r6,r2,10104528 <_malloc_r+0x794>
101041f4:	00840474 	movhi	r2,4113
101041f8:	10988204 	addi	r2,r2,25096
101041fc:	11000017 	ldw	r4,0(r2)
10104200:	20c0012e 	bgeu	r4,r3,10104208 <_malloc_r+0x474>
10104204:	10c00015 	stw	r3,0(r2)
10104208:	00840474 	movhi	r2,4113
1010420c:	10988104 	addi	r2,r2,25092
10104210:	11000017 	ldw	r4,0(r2)
10104214:	9c000217 	ldw	r16,8(r19)
10104218:	20c0012e 	bgeu	r4,r3,10104220 <_malloc_r+0x48c>
1010421c:	10c00015 	stw	r3,0(r2)
10104220:	80c00117 	ldw	r3,4(r16)
10104224:	00bfff04 	movi	r2,-4
10104228:	1886703a 	and	r3,r3,r2
1010422c:	1c45c83a 	sub	r2,r3,r17
10104230:	1c400236 	bltu	r3,r17,1010423c <_malloc_r+0x4a8>
10104234:	00c003c4 	movi	r3,15
10104238:	18800416 	blt	r3,r2,1010424c <_malloc_r+0x4b8>
1010423c:	9009883a 	mov	r4,r18
10104240:	010ffe40 	call	1010ffe4 <__malloc_unlock>
10104244:	0005883a 	mov	r2,zero
10104248:	003f7b06 	br	10104038 <__alt_data_end+0xfffe4038>
1010424c:	88c00054 	ori	r3,r17,1
10104250:	80c00115 	stw	r3,4(r16)
10104254:	8463883a 	add	r17,r16,r17
10104258:	10800054 	ori	r2,r2,1
1010425c:	9c400215 	stw	r17,8(r19)
10104260:	88800115 	stw	r2,4(r17)
10104264:	9009883a 	mov	r4,r18
10104268:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010426c:	80800204 	addi	r2,r16,8
10104270:	003f7106 	br	10104038 <__alt_data_end+0xfffe4038>
10104274:	00c00504 	movi	r3,20
10104278:	18804a2e 	bgeu	r3,r2,101043a4 <_malloc_r+0x610>
1010427c:	00c01504 	movi	r3,84
10104280:	18806e36 	bltu	r3,r2,1010443c <_malloc_r+0x6a8>
10104284:	8804d33a 	srli	r2,r17,12
10104288:	12001bc4 	addi	r8,r2,111
1010428c:	11c01b84 	addi	r7,r2,110
10104290:	4209883a 	add	r4,r8,r8
10104294:	003edd06 	br	10103e0c <__alt_data_end+0xfffe3e0c>
10104298:	3804d27a 	srli	r2,r7,9
1010429c:	00c00104 	movi	r3,4
101042a0:	1880442e 	bgeu	r3,r2,101043b4 <_malloc_r+0x620>
101042a4:	00c00504 	movi	r3,20
101042a8:	18808136 	bltu	r3,r2,101044b0 <_malloc_r+0x71c>
101042ac:	11401704 	addi	r5,r2,92
101042b0:	10c016c4 	addi	r3,r2,91
101042b4:	294b883a 	add	r5,r5,r5
101042b8:	294b883a 	add	r5,r5,r5
101042bc:	294b883a 	add	r5,r5,r5
101042c0:	994b883a 	add	r5,r19,r5
101042c4:	28800017 	ldw	r2,0(r5)
101042c8:	01840474 	movhi	r6,4113
101042cc:	297ffe04 	addi	r5,r5,-8
101042d0:	318bdb04 	addi	r6,r6,12140
101042d4:	28806526 	beq	r5,r2,1010446c <_malloc_r+0x6d8>
101042d8:	01bfff04 	movi	r6,-4
101042dc:	10c00117 	ldw	r3,4(r2)
101042e0:	1986703a 	and	r3,r3,r6
101042e4:	38c0022e 	bgeu	r7,r3,101042f0 <_malloc_r+0x55c>
101042e8:	10800217 	ldw	r2,8(r2)
101042ec:	28bffb1e 	bne	r5,r2,101042dc <__alt_data_end+0xfffe42dc>
101042f0:	11400317 	ldw	r5,12(r2)
101042f4:	98c00117 	ldw	r3,4(r19)
101042f8:	81400315 	stw	r5,12(r16)
101042fc:	80800215 	stw	r2,8(r16)
10104300:	2c000215 	stw	r16,8(r5)
10104304:	14000315 	stw	r16,12(r2)
10104308:	003ef806 	br	10103eec <__alt_data_end+0xfffe3eec>
1010430c:	88c00054 	ori	r3,r17,1
10104310:	80c00115 	stw	r3,4(r16)
10104314:	8463883a 	add	r17,r16,r17
10104318:	34400515 	stw	r17,20(r6)
1010431c:	34400415 	stw	r17,16(r6)
10104320:	10c00054 	ori	r3,r2,1
10104324:	8a000315 	stw	r8,12(r17)
10104328:	8a000215 	stw	r8,8(r17)
1010432c:	88c00115 	stw	r3,4(r17)
10104330:	88a3883a 	add	r17,r17,r2
10104334:	88800015 	stw	r2,0(r17)
10104338:	9009883a 	mov	r4,r18
1010433c:	010ffe40 	call	1010ffe4 <__malloc_unlock>
10104340:	80800204 	addi	r2,r16,8
10104344:	003f3c06 	br	10104038 <__alt_data_end+0xfffe4038>
10104348:	30c00117 	ldw	r3,4(r6)
1010434c:	003ee706 	br	10103eec <__alt_data_end+0xfffe3eec>
10104350:	5ac00044 	addi	r11,r11,1
10104354:	588000cc 	andi	r2,r11,3
10104358:	31800204 	addi	r6,r6,8
1010435c:	103efd1e 	bne	r2,zero,10103f54 <__alt_data_end+0xfffe3f54>
10104360:	00002406 	br	101043f4 <_malloc_r+0x660>
10104364:	14000317 	ldw	r16,12(r2)
10104368:	143f251e 	bne	r2,r16,10104000 <__alt_data_end+0xfffe4000>
1010436c:	21000084 	addi	r4,r4,2
10104370:	003ebc06 	br	10103e64 <__alt_data_end+0xfffe3e64>
10104374:	8085883a 	add	r2,r16,r2
10104378:	10c00117 	ldw	r3,4(r2)
1010437c:	81000317 	ldw	r4,12(r16)
10104380:	81400217 	ldw	r5,8(r16)
10104384:	18c00054 	ori	r3,r3,1
10104388:	10c00115 	stw	r3,4(r2)
1010438c:	29000315 	stw	r4,12(r5)
10104390:	21400215 	stw	r5,8(r4)
10104394:	9009883a 	mov	r4,r18
10104398:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010439c:	80800204 	addi	r2,r16,8
101043a0:	003f2506 	br	10104038 <__alt_data_end+0xfffe4038>
101043a4:	12001704 	addi	r8,r2,92
101043a8:	11c016c4 	addi	r7,r2,91
101043ac:	4209883a 	add	r4,r8,r8
101043b0:	003e9606 	br	10103e0c <__alt_data_end+0xfffe3e0c>
101043b4:	3804d1ba 	srli	r2,r7,6
101043b8:	11400e44 	addi	r5,r2,57
101043bc:	10c00e04 	addi	r3,r2,56
101043c0:	294b883a 	add	r5,r5,r5
101043c4:	003fbc06 	br	101042b8 <__alt_data_end+0xfffe42b8>
101043c8:	84ff5926 	beq	r16,r19,10104130 <__alt_data_end+0xfffe4130>
101043cc:	00840474 	movhi	r2,4113
101043d0:	108bdb04 	addi	r2,r2,12140
101043d4:	14000217 	ldw	r16,8(r2)
101043d8:	00bfff04 	movi	r2,-4
101043dc:	80c00117 	ldw	r3,4(r16)
101043e0:	1886703a 	and	r3,r3,r2
101043e4:	003f9106 	br	1010422c <__alt_data_end+0xfffe422c>
101043e8:	60800217 	ldw	r2,8(r12)
101043ec:	213fffc4 	addi	r4,r4,-1
101043f0:	1300651e 	bne	r2,r12,10104588 <_malloc_r+0x7f4>
101043f4:	208000cc 	andi	r2,r4,3
101043f8:	633ffe04 	addi	r12,r12,-8
101043fc:	103ffa1e 	bne	r2,zero,101043e8 <__alt_data_end+0xfffe43e8>
10104400:	98800117 	ldw	r2,4(r19)
10104404:	0146303a 	nor	r3,zero,r5
10104408:	1884703a 	and	r2,r3,r2
1010440c:	98800115 	stw	r2,4(r19)
10104410:	294b883a 	add	r5,r5,r5
10104414:	117f2836 	bltu	r2,r5,101040b8 <__alt_data_end+0xfffe40b8>
10104418:	283f2726 	beq	r5,zero,101040b8 <__alt_data_end+0xfffe40b8>
1010441c:	2886703a 	and	r3,r5,r2
10104420:	5809883a 	mov	r4,r11
10104424:	183ec31e 	bne	r3,zero,10103f34 <__alt_data_end+0xfffe3f34>
10104428:	294b883a 	add	r5,r5,r5
1010442c:	2886703a 	and	r3,r5,r2
10104430:	21000104 	addi	r4,r4,4
10104434:	183ffc26 	beq	r3,zero,10104428 <__alt_data_end+0xfffe4428>
10104438:	003ebe06 	br	10103f34 <__alt_data_end+0xfffe3f34>
1010443c:	00c05504 	movi	r3,340
10104440:	18801236 	bltu	r3,r2,1010448c <_malloc_r+0x6f8>
10104444:	8804d3fa 	srli	r2,r17,15
10104448:	12001e04 	addi	r8,r2,120
1010444c:	11c01dc4 	addi	r7,r2,119
10104450:	4209883a 	add	r4,r8,r8
10104454:	003e6d06 	br	10103e0c <__alt_data_end+0xfffe3e0c>
10104458:	00c40004 	movi	r3,4096
1010445c:	003f4606 	br	10104178 <__alt_data_end+0xfffe4178>
10104460:	00800044 	movi	r2,1
10104464:	a0800115 	stw	r2,4(r20)
10104468:	003f7406 	br	1010423c <__alt_data_end+0xfffe423c>
1010446c:	1805d0ba 	srai	r2,r3,2
10104470:	01c00044 	movi	r7,1
10104474:	30c00117 	ldw	r3,4(r6)
10104478:	388e983a 	sll	r7,r7,r2
1010447c:	2805883a 	mov	r2,r5
10104480:	38c6b03a 	or	r3,r7,r3
10104484:	30c00115 	stw	r3,4(r6)
10104488:	003f9b06 	br	101042f8 <__alt_data_end+0xfffe42f8>
1010448c:	00c15504 	movi	r3,1364
10104490:	18801a36 	bltu	r3,r2,101044fc <_malloc_r+0x768>
10104494:	8804d4ba 	srli	r2,r17,18
10104498:	12001f44 	addi	r8,r2,125
1010449c:	11c01f04 	addi	r7,r2,124
101044a0:	4209883a 	add	r4,r8,r8
101044a4:	003e5906 	br	10103e0c <__alt_data_end+0xfffe3e0c>
101044a8:	ad400404 	addi	r21,r21,16
101044ac:	003f1706 	br	1010410c <__alt_data_end+0xfffe410c>
101044b0:	00c01504 	movi	r3,84
101044b4:	18802336 	bltu	r3,r2,10104544 <_malloc_r+0x7b0>
101044b8:	3804d33a 	srli	r2,r7,12
101044bc:	11401bc4 	addi	r5,r2,111
101044c0:	10c01b84 	addi	r3,r2,110
101044c4:	294b883a 	add	r5,r5,r5
101044c8:	003f7b06 	br	101042b8 <__alt_data_end+0xfffe42b8>
101044cc:	9c000217 	ldw	r16,8(r19)
101044d0:	00bfff04 	movi	r2,-4
101044d4:	80c00117 	ldw	r3,4(r16)
101044d8:	1886703a 	and	r3,r3,r2
101044dc:	003f5306 	br	1010422c <__alt_data_end+0xfffe422c>
101044e0:	3083ffcc 	andi	r2,r6,4095
101044e4:	103f181e 	bne	r2,zero,10104148 <__alt_data_end+0xfffe4148>
101044e8:	99000217 	ldw	r4,8(r19)
101044ec:	b545883a 	add	r2,r22,r21
101044f0:	10800054 	ori	r2,r2,1
101044f4:	20800115 	stw	r2,4(r4)
101044f8:	003f3e06 	br	101041f4 <__alt_data_end+0xfffe41f4>
101044fc:	01003f84 	movi	r4,254
10104500:	02001fc4 	movi	r8,127
10104504:	01c01f84 	movi	r7,126
10104508:	003e4006 	br	10103e0c <__alt_data_end+0xfffe3e0c>
1010450c:	00840474 	movhi	r2,4113
10104510:	10918904 	addi	r2,r2,17956
10104514:	15000015 	stw	r20,0(r2)
10104518:	003f1106 	br	10104160 <__alt_data_end+0xfffe4160>
1010451c:	00800044 	movi	r2,1
10104520:	002b883a 	mov	r21,zero
10104524:	003f1f06 	br	101041a4 <__alt_data_end+0xfffe41a4>
10104528:	81400204 	addi	r5,r16,8
1010452c:	9009883a 	mov	r4,r18
10104530:	01031640 	call	10103164 <_free_r>
10104534:	00840474 	movhi	r2,4113
10104538:	10988e04 	addi	r2,r2,25144
1010453c:	10c00017 	ldw	r3,0(r2)
10104540:	003f2c06 	br	101041f4 <__alt_data_end+0xfffe41f4>
10104544:	00c05504 	movi	r3,340
10104548:	18800536 	bltu	r3,r2,10104560 <_malloc_r+0x7cc>
1010454c:	3804d3fa 	srli	r2,r7,15
10104550:	11401e04 	addi	r5,r2,120
10104554:	10c01dc4 	addi	r3,r2,119
10104558:	294b883a 	add	r5,r5,r5
1010455c:	003f5606 	br	101042b8 <__alt_data_end+0xfffe42b8>
10104560:	00c15504 	movi	r3,1364
10104564:	18800536 	bltu	r3,r2,1010457c <_malloc_r+0x7e8>
10104568:	3804d4ba 	srli	r2,r7,18
1010456c:	11401f44 	addi	r5,r2,125
10104570:	10c01f04 	addi	r3,r2,124
10104574:	294b883a 	add	r5,r5,r5
10104578:	003f4f06 	br	101042b8 <__alt_data_end+0xfffe42b8>
1010457c:	01403f84 	movi	r5,254
10104580:	00c01f84 	movi	r3,126
10104584:	003f4c06 	br	101042b8 <__alt_data_end+0xfffe42b8>
10104588:	98800117 	ldw	r2,4(r19)
1010458c:	003fa006 	br	10104410 <__alt_data_end+0xfffe4410>
10104590:	8808d0fa 	srli	r4,r17,3
10104594:	20800044 	addi	r2,r4,1
10104598:	1085883a 	add	r2,r2,r2
1010459c:	003e9006 	br	10103fe0 <__alt_data_end+0xfffe3fe0>

101045a0 <memset>:
101045a0:	20c000cc 	andi	r3,r4,3
101045a4:	2005883a 	mov	r2,r4
101045a8:	18004426 	beq	r3,zero,101046bc <memset+0x11c>
101045ac:	31ffffc4 	addi	r7,r6,-1
101045b0:	30004026 	beq	r6,zero,101046b4 <memset+0x114>
101045b4:	2813883a 	mov	r9,r5
101045b8:	200d883a 	mov	r6,r4
101045bc:	2007883a 	mov	r3,r4
101045c0:	00000406 	br	101045d4 <memset+0x34>
101045c4:	3a3fffc4 	addi	r8,r7,-1
101045c8:	31800044 	addi	r6,r6,1
101045cc:	38003926 	beq	r7,zero,101046b4 <memset+0x114>
101045d0:	400f883a 	mov	r7,r8
101045d4:	18c00044 	addi	r3,r3,1
101045d8:	32400005 	stb	r9,0(r6)
101045dc:	1a0000cc 	andi	r8,r3,3
101045e0:	403ff81e 	bne	r8,zero,101045c4 <__alt_data_end+0xfffe45c4>
101045e4:	010000c4 	movi	r4,3
101045e8:	21c02d2e 	bgeu	r4,r7,101046a0 <memset+0x100>
101045ec:	29003fcc 	andi	r4,r5,255
101045f0:	200c923a 	slli	r6,r4,8
101045f4:	3108b03a 	or	r4,r6,r4
101045f8:	200c943a 	slli	r6,r4,16
101045fc:	218cb03a 	or	r6,r4,r6
10104600:	010003c4 	movi	r4,15
10104604:	21c0182e 	bgeu	r4,r7,10104668 <memset+0xc8>
10104608:	3b3ffc04 	addi	r12,r7,-16
1010460c:	6018d13a 	srli	r12,r12,4
10104610:	1a000104 	addi	r8,r3,4
10104614:	1ac00204 	addi	r11,r3,8
10104618:	6008913a 	slli	r4,r12,4
1010461c:	1a800304 	addi	r10,r3,12
10104620:	1813883a 	mov	r9,r3
10104624:	21000504 	addi	r4,r4,20
10104628:	1909883a 	add	r4,r3,r4
1010462c:	49800015 	stw	r6,0(r9)
10104630:	41800015 	stw	r6,0(r8)
10104634:	59800015 	stw	r6,0(r11)
10104638:	51800015 	stw	r6,0(r10)
1010463c:	42000404 	addi	r8,r8,16
10104640:	4a400404 	addi	r9,r9,16
10104644:	5ac00404 	addi	r11,r11,16
10104648:	52800404 	addi	r10,r10,16
1010464c:	413ff71e 	bne	r8,r4,1010462c <__alt_data_end+0xfffe462c>
10104650:	63000044 	addi	r12,r12,1
10104654:	6018913a 	slli	r12,r12,4
10104658:	39c003cc 	andi	r7,r7,15
1010465c:	010000c4 	movi	r4,3
10104660:	1b07883a 	add	r3,r3,r12
10104664:	21c00e2e 	bgeu	r4,r7,101046a0 <memset+0x100>
10104668:	1813883a 	mov	r9,r3
1010466c:	3811883a 	mov	r8,r7
10104670:	010000c4 	movi	r4,3
10104674:	49800015 	stw	r6,0(r9)
10104678:	423fff04 	addi	r8,r8,-4
1010467c:	4a400104 	addi	r9,r9,4
10104680:	223ffc36 	bltu	r4,r8,10104674 <__alt_data_end+0xfffe4674>
10104684:	393fff04 	addi	r4,r7,-4
10104688:	2008d0ba 	srli	r4,r4,2
1010468c:	39c000cc 	andi	r7,r7,3
10104690:	21000044 	addi	r4,r4,1
10104694:	2109883a 	add	r4,r4,r4
10104698:	2109883a 	add	r4,r4,r4
1010469c:	1907883a 	add	r3,r3,r4
101046a0:	38000526 	beq	r7,zero,101046b8 <memset+0x118>
101046a4:	19cf883a 	add	r7,r3,r7
101046a8:	19400005 	stb	r5,0(r3)
101046ac:	18c00044 	addi	r3,r3,1
101046b0:	38fffd1e 	bne	r7,r3,101046a8 <__alt_data_end+0xfffe46a8>
101046b4:	f800283a 	ret
101046b8:	f800283a 	ret
101046bc:	2007883a 	mov	r3,r4
101046c0:	300f883a 	mov	r7,r6
101046c4:	003fc706 	br	101045e4 <__alt_data_end+0xfffe45e4>

101046c8 <_open_r>:
101046c8:	defffd04 	addi	sp,sp,-12
101046cc:	2805883a 	mov	r2,r5
101046d0:	dc000015 	stw	r16,0(sp)
101046d4:	04040474 	movhi	r16,4113
101046d8:	dc400115 	stw	r17,4(sp)
101046dc:	300b883a 	mov	r5,r6
101046e0:	84188004 	addi	r16,r16,25088
101046e4:	2023883a 	mov	r17,r4
101046e8:	380d883a 	mov	r6,r7
101046ec:	1009883a 	mov	r4,r2
101046f0:	dfc00215 	stw	ra,8(sp)
101046f4:	80000015 	stw	zero,0(r16)
101046f8:	01101080 	call	10110108 <open>
101046fc:	00ffffc4 	movi	r3,-1
10104700:	10c00526 	beq	r2,r3,10104718 <_open_r+0x50>
10104704:	dfc00217 	ldw	ra,8(sp)
10104708:	dc400117 	ldw	r17,4(sp)
1010470c:	dc000017 	ldw	r16,0(sp)
10104710:	dec00304 	addi	sp,sp,12
10104714:	f800283a 	ret
10104718:	80c00017 	ldw	r3,0(r16)
1010471c:	183ff926 	beq	r3,zero,10104704 <__alt_data_end+0xfffe4704>
10104720:	88c00015 	stw	r3,0(r17)
10104724:	003ff706 	br	10104704 <__alt_data_end+0xfffe4704>

10104728 <_printf_r>:
10104728:	defffd04 	addi	sp,sp,-12
1010472c:	2805883a 	mov	r2,r5
10104730:	dfc00015 	stw	ra,0(sp)
10104734:	d9800115 	stw	r6,4(sp)
10104738:	d9c00215 	stw	r7,8(sp)
1010473c:	21400217 	ldw	r5,8(r4)
10104740:	d9c00104 	addi	r7,sp,4
10104744:	100d883a 	mov	r6,r2
10104748:	0104de80 	call	10104de8 <___vfprintf_internal_r>
1010474c:	dfc00017 	ldw	ra,0(sp)
10104750:	dec00304 	addi	sp,sp,12
10104754:	f800283a 	ret

10104758 <printf>:
10104758:	defffc04 	addi	sp,sp,-16
1010475c:	dfc00015 	stw	ra,0(sp)
10104760:	d9400115 	stw	r5,4(sp)
10104764:	d9800215 	stw	r6,8(sp)
10104768:	d9c00315 	stw	r7,12(sp)
1010476c:	00840474 	movhi	r2,4113
10104770:	10918804 	addi	r2,r2,17952
10104774:	10800017 	ldw	r2,0(r2)
10104778:	200b883a 	mov	r5,r4
1010477c:	d9800104 	addi	r6,sp,4
10104780:	11000217 	ldw	r4,8(r2)
10104784:	0106fe00 	call	10106fe0 <__vfprintf_internal>
10104788:	dfc00017 	ldw	ra,0(sp)
1010478c:	dec00404 	addi	sp,sp,16
10104790:	f800283a 	ret

10104794 <_putc_r>:
10104794:	defffc04 	addi	sp,sp,-16
10104798:	dc000215 	stw	r16,8(sp)
1010479c:	dfc00315 	stw	ra,12(sp)
101047a0:	2021883a 	mov	r16,r4
101047a4:	20000226 	beq	r4,zero,101047b0 <_putc_r+0x1c>
101047a8:	20800e17 	ldw	r2,56(r4)
101047ac:	10001b26 	beq	r2,zero,1010481c <_putc_r+0x88>
101047b0:	30800217 	ldw	r2,8(r6)
101047b4:	10bfffc4 	addi	r2,r2,-1
101047b8:	30800215 	stw	r2,8(r6)
101047bc:	10000a16 	blt	r2,zero,101047e8 <_putc_r+0x54>
101047c0:	30800017 	ldw	r2,0(r6)
101047c4:	11400005 	stb	r5,0(r2)
101047c8:	30800017 	ldw	r2,0(r6)
101047cc:	10c00044 	addi	r3,r2,1
101047d0:	30c00015 	stw	r3,0(r6)
101047d4:	10800003 	ldbu	r2,0(r2)
101047d8:	dfc00317 	ldw	ra,12(sp)
101047dc:	dc000217 	ldw	r16,8(sp)
101047e0:	dec00404 	addi	sp,sp,16
101047e4:	f800283a 	ret
101047e8:	30c00617 	ldw	r3,24(r6)
101047ec:	10c00616 	blt	r2,r3,10104808 <_putc_r+0x74>
101047f0:	30800017 	ldw	r2,0(r6)
101047f4:	00c00284 	movi	r3,10
101047f8:	11400005 	stb	r5,0(r2)
101047fc:	30800017 	ldw	r2,0(r6)
10104800:	11400003 	ldbu	r5,0(r2)
10104804:	28fff11e 	bne	r5,r3,101047cc <__alt_data_end+0xfffe47cc>
10104808:	8009883a 	mov	r4,r16
1010480c:	dfc00317 	ldw	ra,12(sp)
10104810:	dc000217 	ldw	r16,8(sp)
10104814:	dec00404 	addi	sp,sp,16
10104818:	01070b81 	jmpi	101070b8 <__swbuf_r>
1010481c:	d9400015 	stw	r5,0(sp)
10104820:	d9800115 	stw	r6,4(sp)
10104824:	0102df80 	call	10102df8 <__sinit>
10104828:	d9800117 	ldw	r6,4(sp)
1010482c:	d9400017 	ldw	r5,0(sp)
10104830:	003fdf06 	br	101047b0 <__alt_data_end+0xfffe47b0>

10104834 <putc>:
10104834:	00840474 	movhi	r2,4113
10104838:	defffc04 	addi	sp,sp,-16
1010483c:	10918804 	addi	r2,r2,17952
10104840:	dc000115 	stw	r16,4(sp)
10104844:	14000017 	ldw	r16,0(r2)
10104848:	dc400215 	stw	r17,8(sp)
1010484c:	dfc00315 	stw	ra,12(sp)
10104850:	2023883a 	mov	r17,r4
10104854:	80000226 	beq	r16,zero,10104860 <putc+0x2c>
10104858:	80800e17 	ldw	r2,56(r16)
1010485c:	10001a26 	beq	r2,zero,101048c8 <putc+0x94>
10104860:	28800217 	ldw	r2,8(r5)
10104864:	10bfffc4 	addi	r2,r2,-1
10104868:	28800215 	stw	r2,8(r5)
1010486c:	10000b16 	blt	r2,zero,1010489c <putc+0x68>
10104870:	28800017 	ldw	r2,0(r5)
10104874:	14400005 	stb	r17,0(r2)
10104878:	28800017 	ldw	r2,0(r5)
1010487c:	10c00044 	addi	r3,r2,1
10104880:	28c00015 	stw	r3,0(r5)
10104884:	10800003 	ldbu	r2,0(r2)
10104888:	dfc00317 	ldw	ra,12(sp)
1010488c:	dc400217 	ldw	r17,8(sp)
10104890:	dc000117 	ldw	r16,4(sp)
10104894:	dec00404 	addi	sp,sp,16
10104898:	f800283a 	ret
1010489c:	28c00617 	ldw	r3,24(r5)
101048a0:	10c00e16 	blt	r2,r3,101048dc <putc+0xa8>
101048a4:	28800017 	ldw	r2,0(r5)
101048a8:	01000284 	movi	r4,10
101048ac:	14400005 	stb	r17,0(r2)
101048b0:	28800017 	ldw	r2,0(r5)
101048b4:	10c00003 	ldbu	r3,0(r2)
101048b8:	193ff01e 	bne	r3,r4,1010487c <__alt_data_end+0xfffe487c>
101048bc:	280d883a 	mov	r6,r5
101048c0:	180b883a 	mov	r5,r3
101048c4:	00000706 	br	101048e4 <putc+0xb0>
101048c8:	8009883a 	mov	r4,r16
101048cc:	d9400015 	stw	r5,0(sp)
101048d0:	0102df80 	call	10102df8 <__sinit>
101048d4:	d9400017 	ldw	r5,0(sp)
101048d8:	003fe106 	br	10104860 <__alt_data_end+0xfffe4860>
101048dc:	280d883a 	mov	r6,r5
101048e0:	880b883a 	mov	r5,r17
101048e4:	8009883a 	mov	r4,r16
101048e8:	dfc00317 	ldw	ra,12(sp)
101048ec:	dc400217 	ldw	r17,8(sp)
101048f0:	dc000117 	ldw	r16,4(sp)
101048f4:	dec00404 	addi	sp,sp,16
101048f8:	01070b81 	jmpi	101070b8 <__swbuf_r>

101048fc <_puts_r>:
101048fc:	defff604 	addi	sp,sp,-40
10104900:	dc000715 	stw	r16,28(sp)
10104904:	2021883a 	mov	r16,r4
10104908:	2809883a 	mov	r4,r5
1010490c:	dc400815 	stw	r17,32(sp)
10104910:	dfc00915 	stw	ra,36(sp)
10104914:	2823883a 	mov	r17,r5
10104918:	0104d500 	call	10104d50 <strlen>
1010491c:	10c00044 	addi	r3,r2,1
10104920:	d8800115 	stw	r2,4(sp)
10104924:	00840474 	movhi	r2,4113
10104928:	108a1004 	addi	r2,r2,10304
1010492c:	d8800215 	stw	r2,8(sp)
10104930:	00800044 	movi	r2,1
10104934:	d8800315 	stw	r2,12(sp)
10104938:	00800084 	movi	r2,2
1010493c:	dc400015 	stw	r17,0(sp)
10104940:	d8c00615 	stw	r3,24(sp)
10104944:	dec00415 	stw	sp,16(sp)
10104948:	d8800515 	stw	r2,20(sp)
1010494c:	80000226 	beq	r16,zero,10104958 <_puts_r+0x5c>
10104950:	80800e17 	ldw	r2,56(r16)
10104954:	10001426 	beq	r2,zero,101049a8 <_puts_r+0xac>
10104958:	81400217 	ldw	r5,8(r16)
1010495c:	2880030b 	ldhu	r2,12(r5)
10104960:	10c8000c 	andi	r3,r2,8192
10104964:	1800061e 	bne	r3,zero,10104980 <_puts_r+0x84>
10104968:	29001917 	ldw	r4,100(r5)
1010496c:	00f7ffc4 	movi	r3,-8193
10104970:	10880014 	ori	r2,r2,8192
10104974:	20c6703a 	and	r3,r4,r3
10104978:	2880030d 	sth	r2,12(r5)
1010497c:	28c01915 	stw	r3,100(r5)
10104980:	d9800404 	addi	r6,sp,16
10104984:	8009883a 	mov	r4,r16
10104988:	0108d4c0 	call	10108d4c <__sfvwrite_r>
1010498c:	1000091e 	bne	r2,zero,101049b4 <_puts_r+0xb8>
10104990:	00800284 	movi	r2,10
10104994:	dfc00917 	ldw	ra,36(sp)
10104998:	dc400817 	ldw	r17,32(sp)
1010499c:	dc000717 	ldw	r16,28(sp)
101049a0:	dec00a04 	addi	sp,sp,40
101049a4:	f800283a 	ret
101049a8:	8009883a 	mov	r4,r16
101049ac:	0102df80 	call	10102df8 <__sinit>
101049b0:	003fe906 	br	10104958 <__alt_data_end+0xfffe4958>
101049b4:	00bfffc4 	movi	r2,-1
101049b8:	003ff606 	br	10104994 <__alt_data_end+0xfffe4994>

101049bc <puts>:
101049bc:	00840474 	movhi	r2,4113
101049c0:	10918804 	addi	r2,r2,17952
101049c4:	200b883a 	mov	r5,r4
101049c8:	11000017 	ldw	r4,0(r2)
101049cc:	01048fc1 	jmpi	101048fc <_puts_r>

101049d0 <lflush>:
101049d0:	2080030b 	ldhu	r2,12(r4)
101049d4:	00c00244 	movi	r3,9
101049d8:	1080024c 	andi	r2,r2,9
101049dc:	10c00226 	beq	r2,r3,101049e8 <lflush+0x18>
101049e0:	0005883a 	mov	r2,zero
101049e4:	f800283a 	ret
101049e8:	0102a781 	jmpi	10102a78 <fflush>

101049ec <__srefill_r>:
101049ec:	defffc04 	addi	sp,sp,-16
101049f0:	dc400115 	stw	r17,4(sp)
101049f4:	dc000015 	stw	r16,0(sp)
101049f8:	dfc00315 	stw	ra,12(sp)
101049fc:	dc800215 	stw	r18,8(sp)
10104a00:	2023883a 	mov	r17,r4
10104a04:	2821883a 	mov	r16,r5
10104a08:	20000226 	beq	r4,zero,10104a14 <__srefill_r+0x28>
10104a0c:	20800e17 	ldw	r2,56(r4)
10104a10:	10003c26 	beq	r2,zero,10104b04 <__srefill_r+0x118>
10104a14:	80c0030b 	ldhu	r3,12(r16)
10104a18:	1908000c 	andi	r4,r3,8192
10104a1c:	1805883a 	mov	r2,r3
10104a20:	2000071e 	bne	r4,zero,10104a40 <__srefill_r+0x54>
10104a24:	81001917 	ldw	r4,100(r16)
10104a28:	18880014 	ori	r2,r3,8192
10104a2c:	00f7ffc4 	movi	r3,-8193
10104a30:	20c8703a 	and	r4,r4,r3
10104a34:	8080030d 	sth	r2,12(r16)
10104a38:	1007883a 	mov	r3,r2
10104a3c:	81001915 	stw	r4,100(r16)
10104a40:	80000115 	stw	zero,4(r16)
10104a44:	1100080c 	andi	r4,r2,32
10104a48:	2000571e 	bne	r4,zero,10104ba8 <__srefill_r+0x1bc>
10104a4c:	1100010c 	andi	r4,r2,4
10104a50:	20001f26 	beq	r4,zero,10104ad0 <__srefill_r+0xe4>
10104a54:	81400c17 	ldw	r5,48(r16)
10104a58:	28000826 	beq	r5,zero,10104a7c <__srefill_r+0x90>
10104a5c:	80801004 	addi	r2,r16,64
10104a60:	28800226 	beq	r5,r2,10104a6c <__srefill_r+0x80>
10104a64:	8809883a 	mov	r4,r17
10104a68:	01031640 	call	10103164 <_free_r>
10104a6c:	80800f17 	ldw	r2,60(r16)
10104a70:	80000c15 	stw	zero,48(r16)
10104a74:	80800115 	stw	r2,4(r16)
10104a78:	1000391e 	bne	r2,zero,10104b60 <__srefill_r+0x174>
10104a7c:	80800417 	ldw	r2,16(r16)
10104a80:	10004b26 	beq	r2,zero,10104bb0 <__srefill_r+0x1c4>
10104a84:	8480030b 	ldhu	r18,12(r16)
10104a88:	908000cc 	andi	r2,r18,3
10104a8c:	10001f1e 	bne	r2,zero,10104b0c <__srefill_r+0x120>
10104a90:	81800417 	ldw	r6,16(r16)
10104a94:	80800817 	ldw	r2,32(r16)
10104a98:	81c00517 	ldw	r7,20(r16)
10104a9c:	81400717 	ldw	r5,28(r16)
10104aa0:	81800015 	stw	r6,0(r16)
10104aa4:	8809883a 	mov	r4,r17
10104aa8:	103ee83a 	callr	r2
10104aac:	80800115 	stw	r2,4(r16)
10104ab0:	00800e0e 	bge	zero,r2,10104aec <__srefill_r+0x100>
10104ab4:	0005883a 	mov	r2,zero
10104ab8:	dfc00317 	ldw	ra,12(sp)
10104abc:	dc800217 	ldw	r18,8(sp)
10104ac0:	dc400117 	ldw	r17,4(sp)
10104ac4:	dc000017 	ldw	r16,0(sp)
10104ac8:	dec00404 	addi	sp,sp,16
10104acc:	f800283a 	ret
10104ad0:	1100040c 	andi	r4,r2,16
10104ad4:	20003026 	beq	r4,zero,10104b98 <__srefill_r+0x1ac>
10104ad8:	1080020c 	andi	r2,r2,8
10104adc:	1000241e 	bne	r2,zero,10104b70 <__srefill_r+0x184>
10104ae0:	18c00114 	ori	r3,r3,4
10104ae4:	80c0030d 	sth	r3,12(r16)
10104ae8:	003fe406 	br	10104a7c <__alt_data_end+0xfffe4a7c>
10104aec:	80c0030b 	ldhu	r3,12(r16)
10104af0:	1000161e 	bne	r2,zero,10104b4c <__srefill_r+0x160>
10104af4:	18c00814 	ori	r3,r3,32
10104af8:	00bfffc4 	movi	r2,-1
10104afc:	80c0030d 	sth	r3,12(r16)
10104b00:	003fed06 	br	10104ab8 <__alt_data_end+0xfffe4ab8>
10104b04:	0102df80 	call	10102df8 <__sinit>
10104b08:	003fc206 	br	10104a14 <__alt_data_end+0xfffe4a14>
10104b0c:	00840474 	movhi	r2,4113
10104b10:	10918704 	addi	r2,r2,17948
10104b14:	11000017 	ldw	r4,0(r2)
10104b18:	01440434 	movhi	r5,4112
10104b1c:	00800044 	movi	r2,1
10104b20:	29527404 	addi	r5,r5,18896
10104b24:	8080030d 	sth	r2,12(r16)
10104b28:	01039500 	call	10103950 <_fwalk>
10104b2c:	00800244 	movi	r2,9
10104b30:	8480030d 	sth	r18,12(r16)
10104b34:	9480024c 	andi	r18,r18,9
10104b38:	90bfd51e 	bne	r18,r2,10104a90 <__alt_data_end+0xfffe4a90>
10104b3c:	800b883a 	mov	r5,r16
10104b40:	8809883a 	mov	r4,r17
10104b44:	01028000 	call	10102800 <__sflush_r>
10104b48:	003fd106 	br	10104a90 <__alt_data_end+0xfffe4a90>
10104b4c:	18c01014 	ori	r3,r3,64
10104b50:	80000115 	stw	zero,4(r16)
10104b54:	00bfffc4 	movi	r2,-1
10104b58:	80c0030d 	sth	r3,12(r16)
10104b5c:	003fd606 	br	10104ab8 <__alt_data_end+0xfffe4ab8>
10104b60:	80c00e17 	ldw	r3,56(r16)
10104b64:	0005883a 	mov	r2,zero
10104b68:	80c00015 	stw	r3,0(r16)
10104b6c:	003fd206 	br	10104ab8 <__alt_data_end+0xfffe4ab8>
10104b70:	800b883a 	mov	r5,r16
10104b74:	8809883a 	mov	r4,r17
10104b78:	0102a1c0 	call	10102a1c <_fflush_r>
10104b7c:	10000a1e 	bne	r2,zero,10104ba8 <__srefill_r+0x1bc>
10104b80:	8080030b 	ldhu	r2,12(r16)
10104b84:	00fffdc4 	movi	r3,-9
10104b88:	80000215 	stw	zero,8(r16)
10104b8c:	1886703a 	and	r3,r3,r2
10104b90:	80000615 	stw	zero,24(r16)
10104b94:	003fd206 	br	10104ae0 <__alt_data_end+0xfffe4ae0>
10104b98:	00800244 	movi	r2,9
10104b9c:	88800015 	stw	r2,0(r17)
10104ba0:	18c01014 	ori	r3,r3,64
10104ba4:	80c0030d 	sth	r3,12(r16)
10104ba8:	00bfffc4 	movi	r2,-1
10104bac:	003fc206 	br	10104ab8 <__alt_data_end+0xfffe4ab8>
10104bb0:	800b883a 	mov	r5,r16
10104bb4:	8809883a 	mov	r4,r17
10104bb8:	0103bd80 	call	10103bd8 <__smakebuf_r>
10104bbc:	003fb106 	br	10104a84 <__alt_data_end+0xfffe4a84>

10104bc0 <_sbrk_r>:
10104bc0:	defffd04 	addi	sp,sp,-12
10104bc4:	dc000015 	stw	r16,0(sp)
10104bc8:	04040474 	movhi	r16,4113
10104bcc:	dc400115 	stw	r17,4(sp)
10104bd0:	84188004 	addi	r16,r16,25088
10104bd4:	2023883a 	mov	r17,r4
10104bd8:	2809883a 	mov	r4,r5
10104bdc:	dfc00215 	stw	ra,8(sp)
10104be0:	80000015 	stw	zero,0(r16)
10104be4:	01103f80 	call	101103f8 <sbrk>
10104be8:	00ffffc4 	movi	r3,-1
10104bec:	10c00526 	beq	r2,r3,10104c04 <_sbrk_r+0x44>
10104bf0:	dfc00217 	ldw	ra,8(sp)
10104bf4:	dc400117 	ldw	r17,4(sp)
10104bf8:	dc000017 	ldw	r16,0(sp)
10104bfc:	dec00304 	addi	sp,sp,12
10104c00:	f800283a 	ret
10104c04:	80c00017 	ldw	r3,0(r16)
10104c08:	183ff926 	beq	r3,zero,10104bf0 <__alt_data_end+0xfffe4bf0>
10104c0c:	88c00015 	stw	r3,0(r17)
10104c10:	003ff706 	br	10104bf0 <__alt_data_end+0xfffe4bf0>

10104c14 <__sread>:
10104c14:	defffe04 	addi	sp,sp,-8
10104c18:	dc000015 	stw	r16,0(sp)
10104c1c:	2821883a 	mov	r16,r5
10104c20:	2940038f 	ldh	r5,14(r5)
10104c24:	dfc00115 	stw	ra,4(sp)
10104c28:	010a71c0 	call	1010a71c <_read_r>
10104c2c:	10000716 	blt	r2,zero,10104c4c <__sread+0x38>
10104c30:	80c01417 	ldw	r3,80(r16)
10104c34:	1887883a 	add	r3,r3,r2
10104c38:	80c01415 	stw	r3,80(r16)
10104c3c:	dfc00117 	ldw	ra,4(sp)
10104c40:	dc000017 	ldw	r16,0(sp)
10104c44:	dec00204 	addi	sp,sp,8
10104c48:	f800283a 	ret
10104c4c:	80c0030b 	ldhu	r3,12(r16)
10104c50:	18fbffcc 	andi	r3,r3,61439
10104c54:	80c0030d 	sth	r3,12(r16)
10104c58:	dfc00117 	ldw	ra,4(sp)
10104c5c:	dc000017 	ldw	r16,0(sp)
10104c60:	dec00204 	addi	sp,sp,8
10104c64:	f800283a 	ret

10104c68 <__seofread>:
10104c68:	0005883a 	mov	r2,zero
10104c6c:	f800283a 	ret

10104c70 <__swrite>:
10104c70:	2880030b 	ldhu	r2,12(r5)
10104c74:	defffb04 	addi	sp,sp,-20
10104c78:	dcc00315 	stw	r19,12(sp)
10104c7c:	dc800215 	stw	r18,8(sp)
10104c80:	dc400115 	stw	r17,4(sp)
10104c84:	dc000015 	stw	r16,0(sp)
10104c88:	dfc00415 	stw	ra,16(sp)
10104c8c:	10c0400c 	andi	r3,r2,256
10104c90:	2821883a 	mov	r16,r5
10104c94:	2023883a 	mov	r17,r4
10104c98:	3025883a 	mov	r18,r6
10104c9c:	3827883a 	mov	r19,r7
10104ca0:	18000526 	beq	r3,zero,10104cb8 <__swrite+0x48>
10104ca4:	2940038f 	ldh	r5,14(r5)
10104ca8:	01c00084 	movi	r7,2
10104cac:	000d883a 	mov	r6,zero
10104cb0:	01093380 	call	10109338 <_lseek_r>
10104cb4:	8080030b 	ldhu	r2,12(r16)
10104cb8:	8140038f 	ldh	r5,14(r16)
10104cbc:	10bbffcc 	andi	r2,r2,61439
10104cc0:	980f883a 	mov	r7,r19
10104cc4:	900d883a 	mov	r6,r18
10104cc8:	8809883a 	mov	r4,r17
10104ccc:	8080030d 	sth	r2,12(r16)
10104cd0:	dfc00417 	ldw	ra,16(sp)
10104cd4:	dcc00317 	ldw	r19,12(sp)
10104cd8:	dc800217 	ldw	r18,8(sp)
10104cdc:	dc400117 	ldw	r17,4(sp)
10104ce0:	dc000017 	ldw	r16,0(sp)
10104ce4:	dec00504 	addi	sp,sp,20
10104ce8:	01072101 	jmpi	10107210 <_write_r>

10104cec <__sseek>:
10104cec:	defffe04 	addi	sp,sp,-8
10104cf0:	dc000015 	stw	r16,0(sp)
10104cf4:	2821883a 	mov	r16,r5
10104cf8:	2940038f 	ldh	r5,14(r5)
10104cfc:	dfc00115 	stw	ra,4(sp)
10104d00:	01093380 	call	10109338 <_lseek_r>
10104d04:	00ffffc4 	movi	r3,-1
10104d08:	10c00826 	beq	r2,r3,10104d2c <__sseek+0x40>
10104d0c:	80c0030b 	ldhu	r3,12(r16)
10104d10:	80801415 	stw	r2,80(r16)
10104d14:	18c40014 	ori	r3,r3,4096
10104d18:	80c0030d 	sth	r3,12(r16)
10104d1c:	dfc00117 	ldw	ra,4(sp)
10104d20:	dc000017 	ldw	r16,0(sp)
10104d24:	dec00204 	addi	sp,sp,8
10104d28:	f800283a 	ret
10104d2c:	80c0030b 	ldhu	r3,12(r16)
10104d30:	18fbffcc 	andi	r3,r3,61439
10104d34:	80c0030d 	sth	r3,12(r16)
10104d38:	dfc00117 	ldw	ra,4(sp)
10104d3c:	dc000017 	ldw	r16,0(sp)
10104d40:	dec00204 	addi	sp,sp,8
10104d44:	f800283a 	ret

10104d48 <__sclose>:
10104d48:	2940038f 	ldh	r5,14(r5)
10104d4c:	01073c41 	jmpi	101073c4 <_close_r>

10104d50 <strlen>:
10104d50:	208000cc 	andi	r2,r4,3
10104d54:	10002026 	beq	r2,zero,10104dd8 <strlen+0x88>
10104d58:	20800007 	ldb	r2,0(r4)
10104d5c:	10002026 	beq	r2,zero,10104de0 <strlen+0x90>
10104d60:	2005883a 	mov	r2,r4
10104d64:	00000206 	br	10104d70 <strlen+0x20>
10104d68:	10c00007 	ldb	r3,0(r2)
10104d6c:	18001826 	beq	r3,zero,10104dd0 <strlen+0x80>
10104d70:	10800044 	addi	r2,r2,1
10104d74:	10c000cc 	andi	r3,r2,3
10104d78:	183ffb1e 	bne	r3,zero,10104d68 <__alt_data_end+0xfffe4d68>
10104d7c:	10c00017 	ldw	r3,0(r2)
10104d80:	01ffbff4 	movhi	r7,65279
10104d84:	39ffbfc4 	addi	r7,r7,-257
10104d88:	00ca303a 	nor	r5,zero,r3
10104d8c:	01a02074 	movhi	r6,32897
10104d90:	19c7883a 	add	r3,r3,r7
10104d94:	31a02004 	addi	r6,r6,-32640
10104d98:	1946703a 	and	r3,r3,r5
10104d9c:	1986703a 	and	r3,r3,r6
10104da0:	1800091e 	bne	r3,zero,10104dc8 <strlen+0x78>
10104da4:	10800104 	addi	r2,r2,4
10104da8:	10c00017 	ldw	r3,0(r2)
10104dac:	19cb883a 	add	r5,r3,r7
10104db0:	00c6303a 	nor	r3,zero,r3
10104db4:	28c6703a 	and	r3,r5,r3
10104db8:	1986703a 	and	r3,r3,r6
10104dbc:	183ff926 	beq	r3,zero,10104da4 <__alt_data_end+0xfffe4da4>
10104dc0:	00000106 	br	10104dc8 <strlen+0x78>
10104dc4:	10800044 	addi	r2,r2,1
10104dc8:	10c00007 	ldb	r3,0(r2)
10104dcc:	183ffd1e 	bne	r3,zero,10104dc4 <__alt_data_end+0xfffe4dc4>
10104dd0:	1105c83a 	sub	r2,r2,r4
10104dd4:	f800283a 	ret
10104dd8:	2005883a 	mov	r2,r4
10104ddc:	003fe706 	br	10104d7c <__alt_data_end+0xfffe4d7c>
10104de0:	0005883a 	mov	r2,zero
10104de4:	f800283a 	ret

10104de8 <___vfprintf_internal_r>:
10104de8:	deffb804 	addi	sp,sp,-288
10104dec:	dfc04715 	stw	ra,284(sp)
10104df0:	ddc04515 	stw	r23,276(sp)
10104df4:	dd404315 	stw	r21,268(sp)
10104df8:	d9002c15 	stw	r4,176(sp)
10104dfc:	282f883a 	mov	r23,r5
10104e00:	302b883a 	mov	r21,r6
10104e04:	d9c02d15 	stw	r7,180(sp)
10104e08:	df004615 	stw	fp,280(sp)
10104e0c:	dd804415 	stw	r22,272(sp)
10104e10:	dd004215 	stw	r20,264(sp)
10104e14:	dcc04115 	stw	r19,260(sp)
10104e18:	dc804015 	stw	r18,256(sp)
10104e1c:	dc403f15 	stw	r17,252(sp)
10104e20:	dc003e15 	stw	r16,248(sp)
10104e24:	01093080 	call	10109308 <_localeconv_r>
10104e28:	10800017 	ldw	r2,0(r2)
10104e2c:	1009883a 	mov	r4,r2
10104e30:	d8803415 	stw	r2,208(sp)
10104e34:	0104d500 	call	10104d50 <strlen>
10104e38:	d8803715 	stw	r2,220(sp)
10104e3c:	d8802c17 	ldw	r2,176(sp)
10104e40:	10000226 	beq	r2,zero,10104e4c <___vfprintf_internal_r+0x64>
10104e44:	10800e17 	ldw	r2,56(r2)
10104e48:	1000f926 	beq	r2,zero,10105230 <___vfprintf_internal_r+0x448>
10104e4c:	b880030b 	ldhu	r2,12(r23)
10104e50:	10c8000c 	andi	r3,r2,8192
10104e54:	1800061e 	bne	r3,zero,10104e70 <___vfprintf_internal_r+0x88>
10104e58:	b9001917 	ldw	r4,100(r23)
10104e5c:	00f7ffc4 	movi	r3,-8193
10104e60:	10880014 	ori	r2,r2,8192
10104e64:	20c6703a 	and	r3,r4,r3
10104e68:	b880030d 	sth	r2,12(r23)
10104e6c:	b8c01915 	stw	r3,100(r23)
10104e70:	10c0020c 	andi	r3,r2,8
10104e74:	1800c126 	beq	r3,zero,1010517c <___vfprintf_internal_r+0x394>
10104e78:	b8c00417 	ldw	r3,16(r23)
10104e7c:	1800bf26 	beq	r3,zero,1010517c <___vfprintf_internal_r+0x394>
10104e80:	1080068c 	andi	r2,r2,26
10104e84:	00c00284 	movi	r3,10
10104e88:	10c0c426 	beq	r2,r3,1010519c <___vfprintf_internal_r+0x3b4>
10104e8c:	d8c00404 	addi	r3,sp,16
10104e90:	05040474 	movhi	r20,4113
10104e94:	d9001e04 	addi	r4,sp,120
10104e98:	a50a2184 	addi	r20,r20,10374
10104e9c:	d8c01e15 	stw	r3,120(sp)
10104ea0:	d8002015 	stw	zero,128(sp)
10104ea4:	d8001f15 	stw	zero,124(sp)
10104ea8:	d8003315 	stw	zero,204(sp)
10104eac:	d8003615 	stw	zero,216(sp)
10104eb0:	d8003815 	stw	zero,224(sp)
10104eb4:	1811883a 	mov	r8,r3
10104eb8:	d8003915 	stw	zero,228(sp)
10104ebc:	d8003a15 	stw	zero,232(sp)
10104ec0:	d8002f15 	stw	zero,188(sp)
10104ec4:	d9002815 	stw	r4,160(sp)
10104ec8:	a8800007 	ldb	r2,0(r21)
10104ecc:	10027b26 	beq	r2,zero,101058bc <___vfprintf_internal_r+0xad4>
10104ed0:	00c00944 	movi	r3,37
10104ed4:	a821883a 	mov	r16,r21
10104ed8:	10c0021e 	bne	r2,r3,10104ee4 <___vfprintf_internal_r+0xfc>
10104edc:	00001406 	br	10104f30 <___vfprintf_internal_r+0x148>
10104ee0:	10c00326 	beq	r2,r3,10104ef0 <___vfprintf_internal_r+0x108>
10104ee4:	84000044 	addi	r16,r16,1
10104ee8:	80800007 	ldb	r2,0(r16)
10104eec:	103ffc1e 	bne	r2,zero,10104ee0 <__alt_data_end+0xfffe4ee0>
10104ef0:	8563c83a 	sub	r17,r16,r21
10104ef4:	88000e26 	beq	r17,zero,10104f30 <___vfprintf_internal_r+0x148>
10104ef8:	d8c02017 	ldw	r3,128(sp)
10104efc:	d8801f17 	ldw	r2,124(sp)
10104f00:	45400015 	stw	r21,0(r8)
10104f04:	1c47883a 	add	r3,r3,r17
10104f08:	10800044 	addi	r2,r2,1
10104f0c:	d8c02015 	stw	r3,128(sp)
10104f10:	44400115 	stw	r17,4(r8)
10104f14:	d8801f15 	stw	r2,124(sp)
10104f18:	00c001c4 	movi	r3,7
10104f1c:	1880a716 	blt	r3,r2,101051bc <___vfprintf_internal_r+0x3d4>
10104f20:	42000204 	addi	r8,r8,8
10104f24:	d9402f17 	ldw	r5,188(sp)
10104f28:	2c4b883a 	add	r5,r5,r17
10104f2c:	d9402f15 	stw	r5,188(sp)
10104f30:	80800007 	ldb	r2,0(r16)
10104f34:	1000a826 	beq	r2,zero,101051d8 <___vfprintf_internal_r+0x3f0>
10104f38:	84400047 	ldb	r17,1(r16)
10104f3c:	00bfffc4 	movi	r2,-1
10104f40:	85400044 	addi	r21,r16,1
10104f44:	d8002785 	stb	zero,158(sp)
10104f48:	0007883a 	mov	r3,zero
10104f4c:	000f883a 	mov	r7,zero
10104f50:	d8802915 	stw	r2,164(sp)
10104f54:	d8003115 	stw	zero,196(sp)
10104f58:	0025883a 	mov	r18,zero
10104f5c:	01401604 	movi	r5,88
10104f60:	01800244 	movi	r6,9
10104f64:	02800a84 	movi	r10,42
10104f68:	02401b04 	movi	r9,108
10104f6c:	ad400044 	addi	r21,r21,1
10104f70:	88bff804 	addi	r2,r17,-32
10104f74:	28830436 	bltu	r5,r2,10105b88 <___vfprintf_internal_r+0xda0>
10104f78:	100490ba 	slli	r2,r2,2
10104f7c:	01040434 	movhi	r4,4112
10104f80:	2113e404 	addi	r4,r4,20368
10104f84:	1105883a 	add	r2,r2,r4
10104f88:	10800017 	ldw	r2,0(r2)
10104f8c:	1000683a 	jmp	r2
10104f90:	10105aa8 	cmpgeui	zero,r2,16746
10104f94:	10105b88 	cmpgei	zero,r2,16750
10104f98:	10105b88 	cmpgei	zero,r2,16750
10104f9c:	10105ac8 	cmpgei	zero,r2,16747
10104fa0:	10105b88 	cmpgei	zero,r2,16750
10104fa4:	10105b88 	cmpgei	zero,r2,16750
10104fa8:	10105b88 	cmpgei	zero,r2,16750
10104fac:	10105b88 	cmpgei	zero,r2,16750
10104fb0:	10105b88 	cmpgei	zero,r2,16750
10104fb4:	10105b88 	cmpgei	zero,r2,16750
10104fb8:	1010523c 	xorhi	zero,r2,16712
10104fbc:	101059e4 	muli	zero,r2,16743
10104fc0:	10105b88 	cmpgei	zero,r2,16750
10104fc4:	10105104 	addi	zero,r2,16708
10104fc8:	10105264 	muli	zero,r2,16713
10104fcc:	10105b88 	cmpgei	zero,r2,16750
10104fd0:	101052a4 	muli	zero,r2,16714
10104fd4:	101052b0 	cmpltui	zero,r2,16714
10104fd8:	101052b0 	cmpltui	zero,r2,16714
10104fdc:	101052b0 	cmpltui	zero,r2,16714
10104fe0:	101052b0 	cmpltui	zero,r2,16714
10104fe4:	101052b0 	cmpltui	zero,r2,16714
10104fe8:	101052b0 	cmpltui	zero,r2,16714
10104fec:	101052b0 	cmpltui	zero,r2,16714
10104ff0:	101052b0 	cmpltui	zero,r2,16714
10104ff4:	101052b0 	cmpltui	zero,r2,16714
10104ff8:	10105b88 	cmpgei	zero,r2,16750
10104ffc:	10105b88 	cmpgei	zero,r2,16750
10105000:	10105b88 	cmpgei	zero,r2,16750
10105004:	10105b88 	cmpgei	zero,r2,16750
10105008:	10105b88 	cmpgei	zero,r2,16750
1010500c:	10105b88 	cmpgei	zero,r2,16750
10105010:	10105b88 	cmpgei	zero,r2,16750
10105014:	10105b88 	cmpgei	zero,r2,16750
10105018:	10105b88 	cmpgei	zero,r2,16750
1010501c:	10105b88 	cmpgei	zero,r2,16750
10105020:	101052e4 	muli	zero,r2,16715
10105024:	101053a0 	cmpeqi	zero,r2,16718
10105028:	10105b88 	cmpgei	zero,r2,16750
1010502c:	101053a0 	cmpeqi	zero,r2,16718
10105030:	10105b88 	cmpgei	zero,r2,16750
10105034:	10105b88 	cmpgei	zero,r2,16750
10105038:	10105b88 	cmpgei	zero,r2,16750
1010503c:	10105b88 	cmpgei	zero,r2,16750
10105040:	10105440 	call	11010544 <__alt_data_end+0xef0544>
10105044:	10105b88 	cmpgei	zero,r2,16750
10105048:	10105b88 	cmpgei	zero,r2,16750
1010504c:	1010544c 	andi	zero,r2,16721
10105050:	10105b88 	cmpgei	zero,r2,16750
10105054:	10105b88 	cmpgei	zero,r2,16750
10105058:	10105b88 	cmpgei	zero,r2,16750
1010505c:	10105b88 	cmpgei	zero,r2,16750
10105060:	10105b88 	cmpgei	zero,r2,16750
10105064:	101058c4 	addi	zero,r2,16739
10105068:	10105b88 	cmpgei	zero,r2,16750
1010506c:	10105b88 	cmpgei	zero,r2,16750
10105070:	10105924 	muli	zero,r2,16740
10105074:	10105b88 	cmpgei	zero,r2,16750
10105078:	10105b88 	cmpgei	zero,r2,16750
1010507c:	10105b88 	cmpgei	zero,r2,16750
10105080:	10105b88 	cmpgei	zero,r2,16750
10105084:	10105b88 	cmpgei	zero,r2,16750
10105088:	10105b88 	cmpgei	zero,r2,16750
1010508c:	10105b88 	cmpgei	zero,r2,16750
10105090:	10105b88 	cmpgei	zero,r2,16750
10105094:	10105b88 	cmpgei	zero,r2,16750
10105098:	10105b88 	cmpgei	zero,r2,16750
1010509c:	10105b34 	orhi	zero,r2,16748
101050a0:	10105ad4 	ori	zero,r2,16747
101050a4:	101053a0 	cmpeqi	zero,r2,16718
101050a8:	101053a0 	cmpeqi	zero,r2,16718
101050ac:	101053a0 	cmpeqi	zero,r2,16718
101050b0:	10105ae4 	muli	zero,r2,16747
101050b4:	10105ad4 	ori	zero,r2,16747
101050b8:	10105b88 	cmpgei	zero,r2,16750
101050bc:	10105b88 	cmpgei	zero,r2,16750
101050c0:	10105af0 	cmpltui	zero,r2,16747
101050c4:	10105b88 	cmpgei	zero,r2,16750
101050c8:	10105b00 	call	110105b0 <__alt_data_end+0xef05b0>
101050cc:	101059d4 	ori	zero,r2,16743
101050d0:	10105110 	cmplti	zero,r2,16708
101050d4:	101059f4 	orhi	zero,r2,16743
101050d8:	10105b88 	cmpgei	zero,r2,16750
101050dc:	10105a00 	call	110105a0 <__alt_data_end+0xef05a0>
101050e0:	10105b88 	cmpgei	zero,r2,16750
101050e4:	10105a5c 	xori	zero,r2,16745
101050e8:	10105b88 	cmpgei	zero,r2,16750
101050ec:	10105b88 	cmpgei	zero,r2,16750
101050f0:	10105a6c 	andhi	zero,r2,16745
101050f4:	d9003117 	ldw	r4,196(sp)
101050f8:	d8802d15 	stw	r2,180(sp)
101050fc:	0109c83a 	sub	r4,zero,r4
10105100:	d9003115 	stw	r4,196(sp)
10105104:	94800114 	ori	r18,r18,4
10105108:	ac400007 	ldb	r17,0(r21)
1010510c:	003f9706 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105110:	00800c04 	movi	r2,48
10105114:	d9002d17 	ldw	r4,180(sp)
10105118:	d9402917 	ldw	r5,164(sp)
1010511c:	d8802705 	stb	r2,156(sp)
10105120:	00801e04 	movi	r2,120
10105124:	d8802745 	stb	r2,157(sp)
10105128:	d8002785 	stb	zero,158(sp)
1010512c:	20c00104 	addi	r3,r4,4
10105130:	24c00017 	ldw	r19,0(r4)
10105134:	002d883a 	mov	r22,zero
10105138:	90800094 	ori	r2,r18,2
1010513c:	28029a16 	blt	r5,zero,10105ba8 <___vfprintf_internal_r+0xdc0>
10105140:	00bfdfc4 	movi	r2,-129
10105144:	90a4703a 	and	r18,r18,r2
10105148:	d8c02d15 	stw	r3,180(sp)
1010514c:	94800094 	ori	r18,r18,2
10105150:	9802871e 	bne	r19,zero,10105b70 <___vfprintf_internal_r+0xd88>
10105154:	00840474 	movhi	r2,4113
10105158:	108a1a04 	addi	r2,r2,10344
1010515c:	d8803915 	stw	r2,228(sp)
10105160:	04401e04 	movi	r17,120
10105164:	d8802917 	ldw	r2,164(sp)
10105168:	0039883a 	mov	fp,zero
1010516c:	1001e926 	beq	r2,zero,10105914 <___vfprintf_internal_r+0xb2c>
10105170:	0027883a 	mov	r19,zero
10105174:	002d883a 	mov	r22,zero
10105178:	00020506 	br	10105990 <___vfprintf_internal_r+0xba8>
1010517c:	d9002c17 	ldw	r4,176(sp)
10105180:	b80b883a 	mov	r5,r23
10105184:	01072700 	call	10107270 <__swsetup_r>
10105188:	1005ac1e 	bne	r2,zero,1010683c <___vfprintf_internal_r+0x1a54>
1010518c:	b880030b 	ldhu	r2,12(r23)
10105190:	00c00284 	movi	r3,10
10105194:	1080068c 	andi	r2,r2,26
10105198:	10ff3c1e 	bne	r2,r3,10104e8c <__alt_data_end+0xfffe4e8c>
1010519c:	b880038f 	ldh	r2,14(r23)
101051a0:	103f3a16 	blt	r2,zero,10104e8c <__alt_data_end+0xfffe4e8c>
101051a4:	d9c02d17 	ldw	r7,180(sp)
101051a8:	d9002c17 	ldw	r4,176(sp)
101051ac:	a80d883a 	mov	r6,r21
101051b0:	b80b883a 	mov	r5,r23
101051b4:	0106ffc0 	call	10106ffc <__sbprintf>
101051b8:	00001106 	br	10105200 <___vfprintf_internal_r+0x418>
101051bc:	d9002c17 	ldw	r4,176(sp)
101051c0:	d9801e04 	addi	r6,sp,120
101051c4:	b80b883a 	mov	r5,r23
101051c8:	010af2c0 	call	1010af2c <__sprint_r>
101051cc:	1000081e 	bne	r2,zero,101051f0 <___vfprintf_internal_r+0x408>
101051d0:	da000404 	addi	r8,sp,16
101051d4:	003f5306 	br	10104f24 <__alt_data_end+0xfffe4f24>
101051d8:	d8802017 	ldw	r2,128(sp)
101051dc:	10000426 	beq	r2,zero,101051f0 <___vfprintf_internal_r+0x408>
101051e0:	d9002c17 	ldw	r4,176(sp)
101051e4:	d9801e04 	addi	r6,sp,120
101051e8:	b80b883a 	mov	r5,r23
101051ec:	010af2c0 	call	1010af2c <__sprint_r>
101051f0:	b880030b 	ldhu	r2,12(r23)
101051f4:	1080100c 	andi	r2,r2,64
101051f8:	1005901e 	bne	r2,zero,1010683c <___vfprintf_internal_r+0x1a54>
101051fc:	d8802f17 	ldw	r2,188(sp)
10105200:	dfc04717 	ldw	ra,284(sp)
10105204:	df004617 	ldw	fp,280(sp)
10105208:	ddc04517 	ldw	r23,276(sp)
1010520c:	dd804417 	ldw	r22,272(sp)
10105210:	dd404317 	ldw	r21,268(sp)
10105214:	dd004217 	ldw	r20,264(sp)
10105218:	dcc04117 	ldw	r19,260(sp)
1010521c:	dc804017 	ldw	r18,256(sp)
10105220:	dc403f17 	ldw	r17,252(sp)
10105224:	dc003e17 	ldw	r16,248(sp)
10105228:	dec04804 	addi	sp,sp,288
1010522c:	f800283a 	ret
10105230:	d9002c17 	ldw	r4,176(sp)
10105234:	0102df80 	call	10102df8 <__sinit>
10105238:	003f0406 	br	10104e4c <__alt_data_end+0xfffe4e4c>
1010523c:	d8802d17 	ldw	r2,180(sp)
10105240:	d9002d17 	ldw	r4,180(sp)
10105244:	10800017 	ldw	r2,0(r2)
10105248:	d8803115 	stw	r2,196(sp)
1010524c:	20800104 	addi	r2,r4,4
10105250:	d9003117 	ldw	r4,196(sp)
10105254:	203fa716 	blt	r4,zero,101050f4 <__alt_data_end+0xfffe50f4>
10105258:	d8802d15 	stw	r2,180(sp)
1010525c:	ac400007 	ldb	r17,0(r21)
10105260:	003f4206 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105264:	ac400007 	ldb	r17,0(r21)
10105268:	aac00044 	addi	r11,r21,1
1010526c:	8a872826 	beq	r17,r10,10106f10 <___vfprintf_internal_r+0x2128>
10105270:	88bff404 	addi	r2,r17,-48
10105274:	0009883a 	mov	r4,zero
10105278:	30867d36 	bltu	r6,r2,10106c70 <___vfprintf_internal_r+0x1e88>
1010527c:	5c400007 	ldb	r17,0(r11)
10105280:	210002a4 	muli	r4,r4,10
10105284:	5d400044 	addi	r21,r11,1
10105288:	a817883a 	mov	r11,r21
1010528c:	2089883a 	add	r4,r4,r2
10105290:	88bff404 	addi	r2,r17,-48
10105294:	30bff92e 	bgeu	r6,r2,1010527c <__alt_data_end+0xfffe527c>
10105298:	2005c916 	blt	r4,zero,101069c0 <___vfprintf_internal_r+0x1bd8>
1010529c:	d9002915 	stw	r4,164(sp)
101052a0:	003f3306 	br	10104f70 <__alt_data_end+0xfffe4f70>
101052a4:	94802014 	ori	r18,r18,128
101052a8:	ac400007 	ldb	r17,0(r21)
101052ac:	003f2f06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
101052b0:	a809883a 	mov	r4,r21
101052b4:	d8003115 	stw	zero,196(sp)
101052b8:	88bff404 	addi	r2,r17,-48
101052bc:	0017883a 	mov	r11,zero
101052c0:	24400007 	ldb	r17,0(r4)
101052c4:	5ac002a4 	muli	r11,r11,10
101052c8:	ad400044 	addi	r21,r21,1
101052cc:	a809883a 	mov	r4,r21
101052d0:	12d7883a 	add	r11,r2,r11
101052d4:	88bff404 	addi	r2,r17,-48
101052d8:	30bff92e 	bgeu	r6,r2,101052c0 <__alt_data_end+0xfffe52c0>
101052dc:	dac03115 	stw	r11,196(sp)
101052e0:	003f2306 	br	10104f70 <__alt_data_end+0xfffe4f70>
101052e4:	18c03fcc 	andi	r3,r3,255
101052e8:	18072b1e 	bne	r3,zero,10106f98 <___vfprintf_internal_r+0x21b0>
101052ec:	94800414 	ori	r18,r18,16
101052f0:	9080080c 	andi	r2,r18,32
101052f4:	10037b26 	beq	r2,zero,101060e4 <___vfprintf_internal_r+0x12fc>
101052f8:	d9402d17 	ldw	r5,180(sp)
101052fc:	28800117 	ldw	r2,4(r5)
10105300:	2cc00017 	ldw	r19,0(r5)
10105304:	29400204 	addi	r5,r5,8
10105308:	d9402d15 	stw	r5,180(sp)
1010530c:	102d883a 	mov	r22,r2
10105310:	10044b16 	blt	r2,zero,10106440 <___vfprintf_internal_r+0x1658>
10105314:	d9402917 	ldw	r5,164(sp)
10105318:	df002783 	ldbu	fp,158(sp)
1010531c:	2803bc16 	blt	r5,zero,10106210 <___vfprintf_internal_r+0x1428>
10105320:	00ffdfc4 	movi	r3,-129
10105324:	9d84b03a 	or	r2,r19,r22
10105328:	90e4703a 	and	r18,r18,r3
1010532c:	10017726 	beq	r2,zero,1010590c <___vfprintf_internal_r+0xb24>
10105330:	b0038326 	beq	r22,zero,10106140 <___vfprintf_internal_r+0x1358>
10105334:	dc402a15 	stw	r17,168(sp)
10105338:	dc001e04 	addi	r16,sp,120
1010533c:	b023883a 	mov	r17,r22
10105340:	402d883a 	mov	r22,r8
10105344:	9809883a 	mov	r4,r19
10105348:	880b883a 	mov	r5,r17
1010534c:	01800284 	movi	r6,10
10105350:	000f883a 	mov	r7,zero
10105354:	010cea40 	call	1010cea4 <__umoddi3>
10105358:	10800c04 	addi	r2,r2,48
1010535c:	843fffc4 	addi	r16,r16,-1
10105360:	9809883a 	mov	r4,r19
10105364:	880b883a 	mov	r5,r17
10105368:	80800005 	stb	r2,0(r16)
1010536c:	01800284 	movi	r6,10
10105370:	000f883a 	mov	r7,zero
10105374:	010c92c0 	call	1010c92c <__udivdi3>
10105378:	1027883a 	mov	r19,r2
1010537c:	10c4b03a 	or	r2,r2,r3
10105380:	1823883a 	mov	r17,r3
10105384:	103fef1e 	bne	r2,zero,10105344 <__alt_data_end+0xfffe5344>
10105388:	d8c02817 	ldw	r3,160(sp)
1010538c:	dc402a17 	ldw	r17,168(sp)
10105390:	b011883a 	mov	r8,r22
10105394:	1c07c83a 	sub	r3,r3,r16
10105398:	d8c02e15 	stw	r3,184(sp)
1010539c:	00005906 	br	10105504 <___vfprintf_internal_r+0x71c>
101053a0:	18c03fcc 	andi	r3,r3,255
101053a4:	1806fa1e 	bne	r3,zero,10106f90 <___vfprintf_internal_r+0x21a8>
101053a8:	9080020c 	andi	r2,r18,8
101053ac:	10048a26 	beq	r2,zero,101065d8 <___vfprintf_internal_r+0x17f0>
101053b0:	d8c02d17 	ldw	r3,180(sp)
101053b4:	d9002d17 	ldw	r4,180(sp)
101053b8:	d9402d17 	ldw	r5,180(sp)
101053bc:	18c00017 	ldw	r3,0(r3)
101053c0:	21000117 	ldw	r4,4(r4)
101053c4:	29400204 	addi	r5,r5,8
101053c8:	d8c03615 	stw	r3,216(sp)
101053cc:	d9003815 	stw	r4,224(sp)
101053d0:	d9402d15 	stw	r5,180(sp)
101053d4:	d9003617 	ldw	r4,216(sp)
101053d8:	d9403817 	ldw	r5,224(sp)
101053dc:	da003d15 	stw	r8,244(sp)
101053e0:	04000044 	movi	r16,1
101053e4:	010ace00 	call	1010ace0 <__fpclassifyd>
101053e8:	da003d17 	ldw	r8,244(sp)
101053ec:	14041f1e 	bne	r2,r16,1010646c <___vfprintf_internal_r+0x1684>
101053f0:	d9003617 	ldw	r4,216(sp)
101053f4:	d9403817 	ldw	r5,224(sp)
101053f8:	000d883a 	mov	r6,zero
101053fc:	000f883a 	mov	r7,zero
10105400:	010e6d40 	call	1010e6d4 <__ledf2>
10105404:	da003d17 	ldw	r8,244(sp)
10105408:	1005be16 	blt	r2,zero,10106b04 <___vfprintf_internal_r+0x1d1c>
1010540c:	df002783 	ldbu	fp,158(sp)
10105410:	008011c4 	movi	r2,71
10105414:	1445330e 	bge	r2,r17,101068e4 <___vfprintf_internal_r+0x1afc>
10105418:	04040474 	movhi	r16,4113
1010541c:	840a1204 	addi	r16,r16,10312
10105420:	00c000c4 	movi	r3,3
10105424:	00bfdfc4 	movi	r2,-129
10105428:	d8c02a15 	stw	r3,168(sp)
1010542c:	90a4703a 	and	r18,r18,r2
10105430:	d8c02e15 	stw	r3,184(sp)
10105434:	d8002915 	stw	zero,164(sp)
10105438:	d8003215 	stw	zero,200(sp)
1010543c:	00003706 	br	1010551c <___vfprintf_internal_r+0x734>
10105440:	94800214 	ori	r18,r18,8
10105444:	ac400007 	ldb	r17,0(r21)
10105448:	003ec806 	br	10104f6c <__alt_data_end+0xfffe4f6c>
1010544c:	18c03fcc 	andi	r3,r3,255
10105450:	1806db1e 	bne	r3,zero,10106fc0 <___vfprintf_internal_r+0x21d8>
10105454:	94800414 	ori	r18,r18,16
10105458:	9080080c 	andi	r2,r18,32
1010545c:	1002d826 	beq	r2,zero,10105fc0 <___vfprintf_internal_r+0x11d8>
10105460:	d9402d17 	ldw	r5,180(sp)
10105464:	d8c02917 	ldw	r3,164(sp)
10105468:	d8002785 	stb	zero,158(sp)
1010546c:	28800204 	addi	r2,r5,8
10105470:	2cc00017 	ldw	r19,0(r5)
10105474:	2d800117 	ldw	r22,4(r5)
10105478:	18048f16 	blt	r3,zero,101066b8 <___vfprintf_internal_r+0x18d0>
1010547c:	013fdfc4 	movi	r4,-129
10105480:	9d86b03a 	or	r3,r19,r22
10105484:	d8802d15 	stw	r2,180(sp)
10105488:	9124703a 	and	r18,r18,r4
1010548c:	1802d91e 	bne	r3,zero,10105ff4 <___vfprintf_internal_r+0x120c>
10105490:	d8c02917 	ldw	r3,164(sp)
10105494:	0039883a 	mov	fp,zero
10105498:	1805c326 	beq	r3,zero,10106ba8 <___vfprintf_internal_r+0x1dc0>
1010549c:	0027883a 	mov	r19,zero
101054a0:	002d883a 	mov	r22,zero
101054a4:	dc001e04 	addi	r16,sp,120
101054a8:	9806d0fa 	srli	r3,r19,3
101054ac:	b008977a 	slli	r4,r22,29
101054b0:	b02cd0fa 	srli	r22,r22,3
101054b4:	9cc001cc 	andi	r19,r19,7
101054b8:	98800c04 	addi	r2,r19,48
101054bc:	843fffc4 	addi	r16,r16,-1
101054c0:	20e6b03a 	or	r19,r4,r3
101054c4:	80800005 	stb	r2,0(r16)
101054c8:	9d86b03a 	or	r3,r19,r22
101054cc:	183ff61e 	bne	r3,zero,101054a8 <__alt_data_end+0xfffe54a8>
101054d0:	90c0004c 	andi	r3,r18,1
101054d4:	18013b26 	beq	r3,zero,101059c4 <___vfprintf_internal_r+0xbdc>
101054d8:	10803fcc 	andi	r2,r2,255
101054dc:	1080201c 	xori	r2,r2,128
101054e0:	10bfe004 	addi	r2,r2,-128
101054e4:	00c00c04 	movi	r3,48
101054e8:	10c13626 	beq	r2,r3,101059c4 <___vfprintf_internal_r+0xbdc>
101054ec:	80ffffc5 	stb	r3,-1(r16)
101054f0:	d8c02817 	ldw	r3,160(sp)
101054f4:	80bfffc4 	addi	r2,r16,-1
101054f8:	1021883a 	mov	r16,r2
101054fc:	1887c83a 	sub	r3,r3,r2
10105500:	d8c02e15 	stw	r3,184(sp)
10105504:	d8802e17 	ldw	r2,184(sp)
10105508:	d9002917 	ldw	r4,164(sp)
1010550c:	1100010e 	bge	r2,r4,10105514 <___vfprintf_internal_r+0x72c>
10105510:	2005883a 	mov	r2,r4
10105514:	d8802a15 	stw	r2,168(sp)
10105518:	d8003215 	stw	zero,200(sp)
1010551c:	e7003fcc 	andi	fp,fp,255
10105520:	e700201c 	xori	fp,fp,128
10105524:	e73fe004 	addi	fp,fp,-128
10105528:	e0000326 	beq	fp,zero,10105538 <___vfprintf_internal_r+0x750>
1010552c:	d8c02a17 	ldw	r3,168(sp)
10105530:	18c00044 	addi	r3,r3,1
10105534:	d8c02a15 	stw	r3,168(sp)
10105538:	90c0008c 	andi	r3,r18,2
1010553c:	d8c02b15 	stw	r3,172(sp)
10105540:	18000326 	beq	r3,zero,10105550 <___vfprintf_internal_r+0x768>
10105544:	d8c02a17 	ldw	r3,168(sp)
10105548:	18c00084 	addi	r3,r3,2
1010554c:	d8c02a15 	stw	r3,168(sp)
10105550:	90c0210c 	andi	r3,r18,132
10105554:	d8c03015 	stw	r3,192(sp)
10105558:	1801a31e 	bne	r3,zero,10105be8 <___vfprintf_internal_r+0xe00>
1010555c:	d9003117 	ldw	r4,196(sp)
10105560:	d8c02a17 	ldw	r3,168(sp)
10105564:	20e7c83a 	sub	r19,r4,r3
10105568:	04c19f0e 	bge	zero,r19,10105be8 <___vfprintf_internal_r+0xe00>
1010556c:	02400404 	movi	r9,16
10105570:	d8c02017 	ldw	r3,128(sp)
10105574:	d8801f17 	ldw	r2,124(sp)
10105578:	4cc50d0e 	bge	r9,r19,101069b0 <___vfprintf_internal_r+0x1bc8>
1010557c:	01440474 	movhi	r5,4113
10105580:	294a2584 	addi	r5,r5,10390
10105584:	dc403b15 	stw	r17,236(sp)
10105588:	d9403515 	stw	r5,212(sp)
1010558c:	9823883a 	mov	r17,r19
10105590:	482d883a 	mov	r22,r9
10105594:	9027883a 	mov	r19,r18
10105598:	070001c4 	movi	fp,7
1010559c:	8025883a 	mov	r18,r16
101055a0:	dc002c17 	ldw	r16,176(sp)
101055a4:	00000306 	br	101055b4 <___vfprintf_internal_r+0x7cc>
101055a8:	8c7ffc04 	addi	r17,r17,-16
101055ac:	42000204 	addi	r8,r8,8
101055b0:	b440130e 	bge	r22,r17,10105600 <___vfprintf_internal_r+0x818>
101055b4:	01040474 	movhi	r4,4113
101055b8:	18c00404 	addi	r3,r3,16
101055bc:	10800044 	addi	r2,r2,1
101055c0:	210a2584 	addi	r4,r4,10390
101055c4:	41000015 	stw	r4,0(r8)
101055c8:	45800115 	stw	r22,4(r8)
101055cc:	d8c02015 	stw	r3,128(sp)
101055d0:	d8801f15 	stw	r2,124(sp)
101055d4:	e0bff40e 	bge	fp,r2,101055a8 <__alt_data_end+0xfffe55a8>
101055d8:	d9801e04 	addi	r6,sp,120
101055dc:	b80b883a 	mov	r5,r23
101055e0:	8009883a 	mov	r4,r16
101055e4:	010af2c0 	call	1010af2c <__sprint_r>
101055e8:	103f011e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101055ec:	8c7ffc04 	addi	r17,r17,-16
101055f0:	d8c02017 	ldw	r3,128(sp)
101055f4:	d8801f17 	ldw	r2,124(sp)
101055f8:	da000404 	addi	r8,sp,16
101055fc:	b47fed16 	blt	r22,r17,101055b4 <__alt_data_end+0xfffe55b4>
10105600:	9021883a 	mov	r16,r18
10105604:	9825883a 	mov	r18,r19
10105608:	8827883a 	mov	r19,r17
1010560c:	dc403b17 	ldw	r17,236(sp)
10105610:	d9403517 	ldw	r5,212(sp)
10105614:	98c7883a 	add	r3,r19,r3
10105618:	10800044 	addi	r2,r2,1
1010561c:	41400015 	stw	r5,0(r8)
10105620:	44c00115 	stw	r19,4(r8)
10105624:	d8c02015 	stw	r3,128(sp)
10105628:	d8801f15 	stw	r2,124(sp)
1010562c:	010001c4 	movi	r4,7
10105630:	2082a316 	blt	r4,r2,101060c0 <___vfprintf_internal_r+0x12d8>
10105634:	df002787 	ldb	fp,158(sp)
10105638:	42000204 	addi	r8,r8,8
1010563c:	e0000c26 	beq	fp,zero,10105670 <___vfprintf_internal_r+0x888>
10105640:	d8801f17 	ldw	r2,124(sp)
10105644:	d9002784 	addi	r4,sp,158
10105648:	18c00044 	addi	r3,r3,1
1010564c:	10800044 	addi	r2,r2,1
10105650:	41000015 	stw	r4,0(r8)
10105654:	01000044 	movi	r4,1
10105658:	41000115 	stw	r4,4(r8)
1010565c:	d8c02015 	stw	r3,128(sp)
10105660:	d8801f15 	stw	r2,124(sp)
10105664:	010001c4 	movi	r4,7
10105668:	20823c16 	blt	r4,r2,10105f5c <___vfprintf_internal_r+0x1174>
1010566c:	42000204 	addi	r8,r8,8
10105670:	d8802b17 	ldw	r2,172(sp)
10105674:	10000c26 	beq	r2,zero,101056a8 <___vfprintf_internal_r+0x8c0>
10105678:	d8801f17 	ldw	r2,124(sp)
1010567c:	d9002704 	addi	r4,sp,156
10105680:	18c00084 	addi	r3,r3,2
10105684:	10800044 	addi	r2,r2,1
10105688:	41000015 	stw	r4,0(r8)
1010568c:	01000084 	movi	r4,2
10105690:	41000115 	stw	r4,4(r8)
10105694:	d8c02015 	stw	r3,128(sp)
10105698:	d8801f15 	stw	r2,124(sp)
1010569c:	010001c4 	movi	r4,7
101056a0:	20823616 	blt	r4,r2,10105f7c <___vfprintf_internal_r+0x1194>
101056a4:	42000204 	addi	r8,r8,8
101056a8:	d9003017 	ldw	r4,192(sp)
101056ac:	00802004 	movi	r2,128
101056b0:	20819926 	beq	r4,r2,10105d18 <___vfprintf_internal_r+0xf30>
101056b4:	d9402917 	ldw	r5,164(sp)
101056b8:	d8802e17 	ldw	r2,184(sp)
101056bc:	28adc83a 	sub	r22,r5,r2
101056c0:	0580310e 	bge	zero,r22,10105788 <___vfprintf_internal_r+0x9a0>
101056c4:	07000404 	movi	fp,16
101056c8:	d8801f17 	ldw	r2,124(sp)
101056cc:	e584140e 	bge	fp,r22,10106720 <___vfprintf_internal_r+0x1938>
101056d0:	01440474 	movhi	r5,4113
101056d4:	294a2184 	addi	r5,r5,10374
101056d8:	dc402915 	stw	r17,164(sp)
101056dc:	d9402b15 	stw	r5,172(sp)
101056e0:	b023883a 	mov	r17,r22
101056e4:	04c001c4 	movi	r19,7
101056e8:	a82d883a 	mov	r22,r21
101056ec:	902b883a 	mov	r21,r18
101056f0:	8025883a 	mov	r18,r16
101056f4:	dc002c17 	ldw	r16,176(sp)
101056f8:	00000306 	br	10105708 <___vfprintf_internal_r+0x920>
101056fc:	8c7ffc04 	addi	r17,r17,-16
10105700:	42000204 	addi	r8,r8,8
10105704:	e440110e 	bge	fp,r17,1010574c <___vfprintf_internal_r+0x964>
10105708:	18c00404 	addi	r3,r3,16
1010570c:	10800044 	addi	r2,r2,1
10105710:	45000015 	stw	r20,0(r8)
10105714:	47000115 	stw	fp,4(r8)
10105718:	d8c02015 	stw	r3,128(sp)
1010571c:	d8801f15 	stw	r2,124(sp)
10105720:	98bff60e 	bge	r19,r2,101056fc <__alt_data_end+0xfffe56fc>
10105724:	d9801e04 	addi	r6,sp,120
10105728:	b80b883a 	mov	r5,r23
1010572c:	8009883a 	mov	r4,r16
10105730:	010af2c0 	call	1010af2c <__sprint_r>
10105734:	103eae1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105738:	8c7ffc04 	addi	r17,r17,-16
1010573c:	d8c02017 	ldw	r3,128(sp)
10105740:	d8801f17 	ldw	r2,124(sp)
10105744:	da000404 	addi	r8,sp,16
10105748:	e47fef16 	blt	fp,r17,10105708 <__alt_data_end+0xfffe5708>
1010574c:	9021883a 	mov	r16,r18
10105750:	a825883a 	mov	r18,r21
10105754:	b02b883a 	mov	r21,r22
10105758:	882d883a 	mov	r22,r17
1010575c:	dc402917 	ldw	r17,164(sp)
10105760:	d9002b17 	ldw	r4,172(sp)
10105764:	1d87883a 	add	r3,r3,r22
10105768:	10800044 	addi	r2,r2,1
1010576c:	41000015 	stw	r4,0(r8)
10105770:	45800115 	stw	r22,4(r8)
10105774:	d8c02015 	stw	r3,128(sp)
10105778:	d8801f15 	stw	r2,124(sp)
1010577c:	010001c4 	movi	r4,7
10105780:	2081ee16 	blt	r4,r2,10105f3c <___vfprintf_internal_r+0x1154>
10105784:	42000204 	addi	r8,r8,8
10105788:	9080400c 	andi	r2,r18,256
1010578c:	1001181e 	bne	r2,zero,10105bf0 <___vfprintf_internal_r+0xe08>
10105790:	d9402e17 	ldw	r5,184(sp)
10105794:	d8801f17 	ldw	r2,124(sp)
10105798:	44000015 	stw	r16,0(r8)
1010579c:	1947883a 	add	r3,r3,r5
101057a0:	10800044 	addi	r2,r2,1
101057a4:	41400115 	stw	r5,4(r8)
101057a8:	d8c02015 	stw	r3,128(sp)
101057ac:	d8801f15 	stw	r2,124(sp)
101057b0:	010001c4 	movi	r4,7
101057b4:	2081d316 	blt	r4,r2,10105f04 <___vfprintf_internal_r+0x111c>
101057b8:	42000204 	addi	r8,r8,8
101057bc:	9480010c 	andi	r18,r18,4
101057c0:	90003226 	beq	r18,zero,1010588c <___vfprintf_internal_r+0xaa4>
101057c4:	d9403117 	ldw	r5,196(sp)
101057c8:	d8802a17 	ldw	r2,168(sp)
101057cc:	28a1c83a 	sub	r16,r5,r2
101057d0:	04002e0e 	bge	zero,r16,1010588c <___vfprintf_internal_r+0xaa4>
101057d4:	04400404 	movi	r17,16
101057d8:	d8801f17 	ldw	r2,124(sp)
101057dc:	8c04a20e 	bge	r17,r16,10106a68 <___vfprintf_internal_r+0x1c80>
101057e0:	01440474 	movhi	r5,4113
101057e4:	294a2584 	addi	r5,r5,10390
101057e8:	d9403515 	stw	r5,212(sp)
101057ec:	048001c4 	movi	r18,7
101057f0:	dcc02c17 	ldw	r19,176(sp)
101057f4:	00000306 	br	10105804 <___vfprintf_internal_r+0xa1c>
101057f8:	843ffc04 	addi	r16,r16,-16
101057fc:	42000204 	addi	r8,r8,8
10105800:	8c00130e 	bge	r17,r16,10105850 <___vfprintf_internal_r+0xa68>
10105804:	01040474 	movhi	r4,4113
10105808:	18c00404 	addi	r3,r3,16
1010580c:	10800044 	addi	r2,r2,1
10105810:	210a2584 	addi	r4,r4,10390
10105814:	41000015 	stw	r4,0(r8)
10105818:	44400115 	stw	r17,4(r8)
1010581c:	d8c02015 	stw	r3,128(sp)
10105820:	d8801f15 	stw	r2,124(sp)
10105824:	90bff40e 	bge	r18,r2,101057f8 <__alt_data_end+0xfffe57f8>
10105828:	d9801e04 	addi	r6,sp,120
1010582c:	b80b883a 	mov	r5,r23
10105830:	9809883a 	mov	r4,r19
10105834:	010af2c0 	call	1010af2c <__sprint_r>
10105838:	103e6d1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
1010583c:	843ffc04 	addi	r16,r16,-16
10105840:	d8c02017 	ldw	r3,128(sp)
10105844:	d8801f17 	ldw	r2,124(sp)
10105848:	da000404 	addi	r8,sp,16
1010584c:	8c3fed16 	blt	r17,r16,10105804 <__alt_data_end+0xfffe5804>
10105850:	d9403517 	ldw	r5,212(sp)
10105854:	1c07883a 	add	r3,r3,r16
10105858:	10800044 	addi	r2,r2,1
1010585c:	41400015 	stw	r5,0(r8)
10105860:	44000115 	stw	r16,4(r8)
10105864:	d8c02015 	stw	r3,128(sp)
10105868:	d8801f15 	stw	r2,124(sp)
1010586c:	010001c4 	movi	r4,7
10105870:	2080060e 	bge	r4,r2,1010588c <___vfprintf_internal_r+0xaa4>
10105874:	d9002c17 	ldw	r4,176(sp)
10105878:	d9801e04 	addi	r6,sp,120
1010587c:	b80b883a 	mov	r5,r23
10105880:	010af2c0 	call	1010af2c <__sprint_r>
10105884:	103e5a1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105888:	d8c02017 	ldw	r3,128(sp)
1010588c:	d8803117 	ldw	r2,196(sp)
10105890:	d9002a17 	ldw	r4,168(sp)
10105894:	1100010e 	bge	r2,r4,1010589c <___vfprintf_internal_r+0xab4>
10105898:	2005883a 	mov	r2,r4
1010589c:	d9402f17 	ldw	r5,188(sp)
101058a0:	288b883a 	add	r5,r5,r2
101058a4:	d9402f15 	stw	r5,188(sp)
101058a8:	18019e1e 	bne	r3,zero,10105f24 <___vfprintf_internal_r+0x113c>
101058ac:	a8800007 	ldb	r2,0(r21)
101058b0:	d8001f15 	stw	zero,124(sp)
101058b4:	da000404 	addi	r8,sp,16
101058b8:	103d851e 	bne	r2,zero,10104ed0 <__alt_data_end+0xfffe4ed0>
101058bc:	a821883a 	mov	r16,r21
101058c0:	003d9b06 	br	10104f30 <__alt_data_end+0xfffe4f30>
101058c4:	18c03fcc 	andi	r3,r3,255
101058c8:	1805c11e 	bne	r3,zero,10106fd0 <___vfprintf_internal_r+0x21e8>
101058cc:	94800414 	ori	r18,r18,16
101058d0:	9080080c 	andi	r2,r18,32
101058d4:	10020c26 	beq	r2,zero,10106108 <___vfprintf_internal_r+0x1320>
101058d8:	d8802d17 	ldw	r2,180(sp)
101058dc:	d9002917 	ldw	r4,164(sp)
101058e0:	d8002785 	stb	zero,158(sp)
101058e4:	10c00204 	addi	r3,r2,8
101058e8:	14c00017 	ldw	r19,0(r2)
101058ec:	15800117 	ldw	r22,4(r2)
101058f0:	20040f16 	blt	r4,zero,10106930 <___vfprintf_internal_r+0x1b48>
101058f4:	013fdfc4 	movi	r4,-129
101058f8:	9d84b03a 	or	r2,r19,r22
101058fc:	d8c02d15 	stw	r3,180(sp)
10105900:	9124703a 	and	r18,r18,r4
10105904:	0039883a 	mov	fp,zero
10105908:	103e891e 	bne	r2,zero,10105330 <__alt_data_end+0xfffe5330>
1010590c:	d9002917 	ldw	r4,164(sp)
10105910:	2002c11e 	bne	r4,zero,10106418 <___vfprintf_internal_r+0x1630>
10105914:	d8002915 	stw	zero,164(sp)
10105918:	d8002e15 	stw	zero,184(sp)
1010591c:	dc001e04 	addi	r16,sp,120
10105920:	003ef806 	br	10105504 <__alt_data_end+0xfffe5504>
10105924:	18c03fcc 	andi	r3,r3,255
10105928:	18059d1e 	bne	r3,zero,10106fa0 <___vfprintf_internal_r+0x21b8>
1010592c:	01440474 	movhi	r5,4113
10105930:	294a1504 	addi	r5,r5,10324
10105934:	d9403915 	stw	r5,228(sp)
10105938:	9080080c 	andi	r2,r18,32
1010593c:	10005226 	beq	r2,zero,10105a88 <___vfprintf_internal_r+0xca0>
10105940:	d8802d17 	ldw	r2,180(sp)
10105944:	14c00017 	ldw	r19,0(r2)
10105948:	15800117 	ldw	r22,4(r2)
1010594c:	10800204 	addi	r2,r2,8
10105950:	d8802d15 	stw	r2,180(sp)
10105954:	9080004c 	andi	r2,r18,1
10105958:	10019026 	beq	r2,zero,10105f9c <___vfprintf_internal_r+0x11b4>
1010595c:	9d84b03a 	or	r2,r19,r22
10105960:	10036926 	beq	r2,zero,10106708 <___vfprintf_internal_r+0x1920>
10105964:	d8c02917 	ldw	r3,164(sp)
10105968:	00800c04 	movi	r2,48
1010596c:	d8802705 	stb	r2,156(sp)
10105970:	dc402745 	stb	r17,157(sp)
10105974:	d8002785 	stb	zero,158(sp)
10105978:	90800094 	ori	r2,r18,2
1010597c:	18045d16 	blt	r3,zero,10106af4 <___vfprintf_internal_r+0x1d0c>
10105980:	00bfdfc4 	movi	r2,-129
10105984:	90a4703a 	and	r18,r18,r2
10105988:	94800094 	ori	r18,r18,2
1010598c:	0039883a 	mov	fp,zero
10105990:	d9003917 	ldw	r4,228(sp)
10105994:	dc001e04 	addi	r16,sp,120
10105998:	988003cc 	andi	r2,r19,15
1010599c:	b006973a 	slli	r3,r22,28
101059a0:	2085883a 	add	r2,r4,r2
101059a4:	9826d13a 	srli	r19,r19,4
101059a8:	10800003 	ldbu	r2,0(r2)
101059ac:	b02cd13a 	srli	r22,r22,4
101059b0:	843fffc4 	addi	r16,r16,-1
101059b4:	1ce6b03a 	or	r19,r3,r19
101059b8:	80800005 	stb	r2,0(r16)
101059bc:	9d84b03a 	or	r2,r19,r22
101059c0:	103ff51e 	bne	r2,zero,10105998 <__alt_data_end+0xfffe5998>
101059c4:	d8c02817 	ldw	r3,160(sp)
101059c8:	1c07c83a 	sub	r3,r3,r16
101059cc:	d8c02e15 	stw	r3,184(sp)
101059d0:	003ecc06 	br	10105504 <__alt_data_end+0xfffe5504>
101059d4:	18c03fcc 	andi	r3,r3,255
101059d8:	183e9f26 	beq	r3,zero,10105458 <__alt_data_end+0xfffe5458>
101059dc:	d9c02785 	stb	r7,158(sp)
101059e0:	003e9d06 	br	10105458 <__alt_data_end+0xfffe5458>
101059e4:	00c00044 	movi	r3,1
101059e8:	01c00ac4 	movi	r7,43
101059ec:	ac400007 	ldb	r17,0(r21)
101059f0:	003d5e06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
101059f4:	94800814 	ori	r18,r18,32
101059f8:	ac400007 	ldb	r17,0(r21)
101059fc:	003d5b06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105a00:	d8c02d17 	ldw	r3,180(sp)
10105a04:	d8002785 	stb	zero,158(sp)
10105a08:	1c000017 	ldw	r16,0(r3)
10105a0c:	1cc00104 	addi	r19,r3,4
10105a10:	80041926 	beq	r16,zero,10106a78 <___vfprintf_internal_r+0x1c90>
10105a14:	d9002917 	ldw	r4,164(sp)
10105a18:	2003d016 	blt	r4,zero,1010695c <___vfprintf_internal_r+0x1b74>
10105a1c:	200d883a 	mov	r6,r4
10105a20:	000b883a 	mov	r5,zero
10105a24:	8009883a 	mov	r4,r16
10105a28:	da003d15 	stw	r8,244(sp)
10105a2c:	01093980 	call	10109398 <memchr>
10105a30:	da003d17 	ldw	r8,244(sp)
10105a34:	10045426 	beq	r2,zero,10106b88 <___vfprintf_internal_r+0x1da0>
10105a38:	1405c83a 	sub	r2,r2,r16
10105a3c:	d8802e15 	stw	r2,184(sp)
10105a40:	1003cc16 	blt	r2,zero,10106974 <___vfprintf_internal_r+0x1b8c>
10105a44:	df002783 	ldbu	fp,158(sp)
10105a48:	d8802a15 	stw	r2,168(sp)
10105a4c:	dcc02d15 	stw	r19,180(sp)
10105a50:	d8002915 	stw	zero,164(sp)
10105a54:	d8003215 	stw	zero,200(sp)
10105a58:	003eb006 	br	1010551c <__alt_data_end+0xfffe551c>
10105a5c:	18c03fcc 	andi	r3,r3,255
10105a60:	183f9b26 	beq	r3,zero,101058d0 <__alt_data_end+0xfffe58d0>
10105a64:	d9c02785 	stb	r7,158(sp)
10105a68:	003f9906 	br	101058d0 <__alt_data_end+0xfffe58d0>
10105a6c:	18c03fcc 	andi	r3,r3,255
10105a70:	1805551e 	bne	r3,zero,10106fc8 <___vfprintf_internal_r+0x21e0>
10105a74:	01440474 	movhi	r5,4113
10105a78:	294a1a04 	addi	r5,r5,10344
10105a7c:	d9403915 	stw	r5,228(sp)
10105a80:	9080080c 	andi	r2,r18,32
10105a84:	103fae1e 	bne	r2,zero,10105940 <__alt_data_end+0xfffe5940>
10105a88:	9080040c 	andi	r2,r18,16
10105a8c:	1002de26 	beq	r2,zero,10106608 <___vfprintf_internal_r+0x1820>
10105a90:	d8c02d17 	ldw	r3,180(sp)
10105a94:	002d883a 	mov	r22,zero
10105a98:	1cc00017 	ldw	r19,0(r3)
10105a9c:	18c00104 	addi	r3,r3,4
10105aa0:	d8c02d15 	stw	r3,180(sp)
10105aa4:	003fab06 	br	10105954 <__alt_data_end+0xfffe5954>
10105aa8:	38803fcc 	andi	r2,r7,255
10105aac:	1080201c 	xori	r2,r2,128
10105ab0:	10bfe004 	addi	r2,r2,-128
10105ab4:	1002d21e 	bne	r2,zero,10106600 <___vfprintf_internal_r+0x1818>
10105ab8:	00c00044 	movi	r3,1
10105abc:	01c00804 	movi	r7,32
10105ac0:	ac400007 	ldb	r17,0(r21)
10105ac4:	003d2906 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105ac8:	94800054 	ori	r18,r18,1
10105acc:	ac400007 	ldb	r17,0(r21)
10105ad0:	003d2606 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105ad4:	18c03fcc 	andi	r3,r3,255
10105ad8:	183e0526 	beq	r3,zero,101052f0 <__alt_data_end+0xfffe52f0>
10105adc:	d9c02785 	stb	r7,158(sp)
10105ae0:	003e0306 	br	101052f0 <__alt_data_end+0xfffe52f0>
10105ae4:	94801014 	ori	r18,r18,64
10105ae8:	ac400007 	ldb	r17,0(r21)
10105aec:	003d1f06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105af0:	ac400007 	ldb	r17,0(r21)
10105af4:	8a438726 	beq	r17,r9,10106914 <___vfprintf_internal_r+0x1b2c>
10105af8:	94800414 	ori	r18,r18,16
10105afc:	003d1b06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10105b00:	18c03fcc 	andi	r3,r3,255
10105b04:	1805341e 	bne	r3,zero,10106fd8 <___vfprintf_internal_r+0x21f0>
10105b08:	9080080c 	andi	r2,r18,32
10105b0c:	1002cd26 	beq	r2,zero,10106644 <___vfprintf_internal_r+0x185c>
10105b10:	d9402d17 	ldw	r5,180(sp)
10105b14:	d9002f17 	ldw	r4,188(sp)
10105b18:	28800017 	ldw	r2,0(r5)
10105b1c:	2007d7fa 	srai	r3,r4,31
10105b20:	29400104 	addi	r5,r5,4
10105b24:	d9402d15 	stw	r5,180(sp)
10105b28:	11000015 	stw	r4,0(r2)
10105b2c:	10c00115 	stw	r3,4(r2)
10105b30:	003ce506 	br	10104ec8 <__alt_data_end+0xfffe4ec8>
10105b34:	d8c02d17 	ldw	r3,180(sp)
10105b38:	d9002d17 	ldw	r4,180(sp)
10105b3c:	d8002785 	stb	zero,158(sp)
10105b40:	18800017 	ldw	r2,0(r3)
10105b44:	21000104 	addi	r4,r4,4
10105b48:	00c00044 	movi	r3,1
10105b4c:	d8c02a15 	stw	r3,168(sp)
10105b50:	d8801405 	stb	r2,80(sp)
10105b54:	d9002d15 	stw	r4,180(sp)
10105b58:	d8c02e15 	stw	r3,184(sp)
10105b5c:	d8002915 	stw	zero,164(sp)
10105b60:	d8003215 	stw	zero,200(sp)
10105b64:	dc001404 	addi	r16,sp,80
10105b68:	0039883a 	mov	fp,zero
10105b6c:	003e7206 	br	10105538 <__alt_data_end+0xfffe5538>
10105b70:	01040474 	movhi	r4,4113
10105b74:	210a1a04 	addi	r4,r4,10344
10105b78:	0039883a 	mov	fp,zero
10105b7c:	d9003915 	stw	r4,228(sp)
10105b80:	04401e04 	movi	r17,120
10105b84:	003f8206 	br	10105990 <__alt_data_end+0xfffe5990>
10105b88:	18c03fcc 	andi	r3,r3,255
10105b8c:	1805061e 	bne	r3,zero,10106fa8 <___vfprintf_internal_r+0x21c0>
10105b90:	883d9126 	beq	r17,zero,101051d8 <__alt_data_end+0xfffe51d8>
10105b94:	00c00044 	movi	r3,1
10105b98:	d8c02a15 	stw	r3,168(sp)
10105b9c:	dc401405 	stb	r17,80(sp)
10105ba0:	d8002785 	stb	zero,158(sp)
10105ba4:	003fec06 	br	10105b58 <__alt_data_end+0xfffe5b58>
10105ba8:	01440474 	movhi	r5,4113
10105bac:	294a1a04 	addi	r5,r5,10344
10105bb0:	d9403915 	stw	r5,228(sp)
10105bb4:	d8c02d15 	stw	r3,180(sp)
10105bb8:	1025883a 	mov	r18,r2
10105bbc:	04401e04 	movi	r17,120
10105bc0:	9d84b03a 	or	r2,r19,r22
10105bc4:	1000fc1e 	bne	r2,zero,10105fb8 <___vfprintf_internal_r+0x11d0>
10105bc8:	0039883a 	mov	fp,zero
10105bcc:	00800084 	movi	r2,2
10105bd0:	10803fcc 	andi	r2,r2,255
10105bd4:	00c00044 	movi	r3,1
10105bd8:	10c20f26 	beq	r2,r3,10106418 <___vfprintf_internal_r+0x1630>
10105bdc:	00c00084 	movi	r3,2
10105be0:	10fd6326 	beq	r2,r3,10105170 <__alt_data_end+0xfffe5170>
10105be4:	003e2d06 	br	1010549c <__alt_data_end+0xfffe549c>
10105be8:	d8c02017 	ldw	r3,128(sp)
10105bec:	003e9306 	br	1010563c <__alt_data_end+0xfffe563c>
10105bf0:	00801944 	movi	r2,101
10105bf4:	14407e0e 	bge	r2,r17,10105df0 <___vfprintf_internal_r+0x1008>
10105bf8:	d9003617 	ldw	r4,216(sp)
10105bfc:	d9403817 	ldw	r5,224(sp)
10105c00:	000d883a 	mov	r6,zero
10105c04:	000f883a 	mov	r7,zero
10105c08:	d8c03c15 	stw	r3,240(sp)
10105c0c:	da003d15 	stw	r8,244(sp)
10105c10:	010e5700 	call	1010e570 <__eqdf2>
10105c14:	d8c03c17 	ldw	r3,240(sp)
10105c18:	da003d17 	ldw	r8,244(sp)
10105c1c:	1000f71e 	bne	r2,zero,10105ffc <___vfprintf_internal_r+0x1214>
10105c20:	d8801f17 	ldw	r2,124(sp)
10105c24:	01040474 	movhi	r4,4113
10105c28:	210a2104 	addi	r4,r4,10372
10105c2c:	18c00044 	addi	r3,r3,1
10105c30:	10800044 	addi	r2,r2,1
10105c34:	41000015 	stw	r4,0(r8)
10105c38:	01000044 	movi	r4,1
10105c3c:	41000115 	stw	r4,4(r8)
10105c40:	d8c02015 	stw	r3,128(sp)
10105c44:	d8801f15 	stw	r2,124(sp)
10105c48:	010001c4 	movi	r4,7
10105c4c:	2082b816 	blt	r4,r2,10106730 <___vfprintf_internal_r+0x1948>
10105c50:	42000204 	addi	r8,r8,8
10105c54:	d8802617 	ldw	r2,152(sp)
10105c58:	d9403317 	ldw	r5,204(sp)
10105c5c:	11400216 	blt	r2,r5,10105c68 <___vfprintf_internal_r+0xe80>
10105c60:	9080004c 	andi	r2,r18,1
10105c64:	103ed526 	beq	r2,zero,101057bc <__alt_data_end+0xfffe57bc>
10105c68:	d8803717 	ldw	r2,220(sp)
10105c6c:	d9003417 	ldw	r4,208(sp)
10105c70:	d9403717 	ldw	r5,220(sp)
10105c74:	1887883a 	add	r3,r3,r2
10105c78:	d8801f17 	ldw	r2,124(sp)
10105c7c:	41000015 	stw	r4,0(r8)
10105c80:	41400115 	stw	r5,4(r8)
10105c84:	10800044 	addi	r2,r2,1
10105c88:	d8c02015 	stw	r3,128(sp)
10105c8c:	d8801f15 	stw	r2,124(sp)
10105c90:	010001c4 	movi	r4,7
10105c94:	20832916 	blt	r4,r2,1010693c <___vfprintf_internal_r+0x1b54>
10105c98:	42000204 	addi	r8,r8,8
10105c9c:	d8803317 	ldw	r2,204(sp)
10105ca0:	143fffc4 	addi	r16,r2,-1
10105ca4:	043ec50e 	bge	zero,r16,101057bc <__alt_data_end+0xfffe57bc>
10105ca8:	04400404 	movi	r17,16
10105cac:	d8801f17 	ldw	r2,124(sp)
10105cb0:	8c00880e 	bge	r17,r16,10105ed4 <___vfprintf_internal_r+0x10ec>
10105cb4:	01440474 	movhi	r5,4113
10105cb8:	294a2184 	addi	r5,r5,10374
10105cbc:	d9402b15 	stw	r5,172(sp)
10105cc0:	058001c4 	movi	r22,7
10105cc4:	dcc02c17 	ldw	r19,176(sp)
10105cc8:	00000306 	br	10105cd8 <___vfprintf_internal_r+0xef0>
10105ccc:	42000204 	addi	r8,r8,8
10105cd0:	843ffc04 	addi	r16,r16,-16
10105cd4:	8c00820e 	bge	r17,r16,10105ee0 <___vfprintf_internal_r+0x10f8>
10105cd8:	18c00404 	addi	r3,r3,16
10105cdc:	10800044 	addi	r2,r2,1
10105ce0:	45000015 	stw	r20,0(r8)
10105ce4:	44400115 	stw	r17,4(r8)
10105ce8:	d8c02015 	stw	r3,128(sp)
10105cec:	d8801f15 	stw	r2,124(sp)
10105cf0:	b0bff60e 	bge	r22,r2,10105ccc <__alt_data_end+0xfffe5ccc>
10105cf4:	d9801e04 	addi	r6,sp,120
10105cf8:	b80b883a 	mov	r5,r23
10105cfc:	9809883a 	mov	r4,r19
10105d00:	010af2c0 	call	1010af2c <__sprint_r>
10105d04:	103d3a1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105d08:	d8c02017 	ldw	r3,128(sp)
10105d0c:	d8801f17 	ldw	r2,124(sp)
10105d10:	da000404 	addi	r8,sp,16
10105d14:	003fee06 	br	10105cd0 <__alt_data_end+0xfffe5cd0>
10105d18:	d9403117 	ldw	r5,196(sp)
10105d1c:	d8802a17 	ldw	r2,168(sp)
10105d20:	28adc83a 	sub	r22,r5,r2
10105d24:	05be630e 	bge	zero,r22,101056b4 <__alt_data_end+0xfffe56b4>
10105d28:	07000404 	movi	fp,16
10105d2c:	d8801f17 	ldw	r2,124(sp)
10105d30:	e5838f0e 	bge	fp,r22,10106b70 <___vfprintf_internal_r+0x1d88>
10105d34:	01440474 	movhi	r5,4113
10105d38:	294a2184 	addi	r5,r5,10374
10105d3c:	dc403015 	stw	r17,192(sp)
10105d40:	d9402b15 	stw	r5,172(sp)
10105d44:	b023883a 	mov	r17,r22
10105d48:	04c001c4 	movi	r19,7
10105d4c:	a82d883a 	mov	r22,r21
10105d50:	902b883a 	mov	r21,r18
10105d54:	8025883a 	mov	r18,r16
10105d58:	dc002c17 	ldw	r16,176(sp)
10105d5c:	00000306 	br	10105d6c <___vfprintf_internal_r+0xf84>
10105d60:	8c7ffc04 	addi	r17,r17,-16
10105d64:	42000204 	addi	r8,r8,8
10105d68:	e440110e 	bge	fp,r17,10105db0 <___vfprintf_internal_r+0xfc8>
10105d6c:	18c00404 	addi	r3,r3,16
10105d70:	10800044 	addi	r2,r2,1
10105d74:	45000015 	stw	r20,0(r8)
10105d78:	47000115 	stw	fp,4(r8)
10105d7c:	d8c02015 	stw	r3,128(sp)
10105d80:	d8801f15 	stw	r2,124(sp)
10105d84:	98bff60e 	bge	r19,r2,10105d60 <__alt_data_end+0xfffe5d60>
10105d88:	d9801e04 	addi	r6,sp,120
10105d8c:	b80b883a 	mov	r5,r23
10105d90:	8009883a 	mov	r4,r16
10105d94:	010af2c0 	call	1010af2c <__sprint_r>
10105d98:	103d151e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105d9c:	8c7ffc04 	addi	r17,r17,-16
10105da0:	d8c02017 	ldw	r3,128(sp)
10105da4:	d8801f17 	ldw	r2,124(sp)
10105da8:	da000404 	addi	r8,sp,16
10105dac:	e47fef16 	blt	fp,r17,10105d6c <__alt_data_end+0xfffe5d6c>
10105db0:	9021883a 	mov	r16,r18
10105db4:	a825883a 	mov	r18,r21
10105db8:	b02b883a 	mov	r21,r22
10105dbc:	882d883a 	mov	r22,r17
10105dc0:	dc403017 	ldw	r17,192(sp)
10105dc4:	d9002b17 	ldw	r4,172(sp)
10105dc8:	1d87883a 	add	r3,r3,r22
10105dcc:	10800044 	addi	r2,r2,1
10105dd0:	41000015 	stw	r4,0(r8)
10105dd4:	45800115 	stw	r22,4(r8)
10105dd8:	d8c02015 	stw	r3,128(sp)
10105ddc:	d8801f15 	stw	r2,124(sp)
10105de0:	010001c4 	movi	r4,7
10105de4:	20818e16 	blt	r4,r2,10106420 <___vfprintf_internal_r+0x1638>
10105de8:	42000204 	addi	r8,r8,8
10105dec:	003e3106 	br	101056b4 <__alt_data_end+0xfffe56b4>
10105df0:	d9403317 	ldw	r5,204(sp)
10105df4:	00800044 	movi	r2,1
10105df8:	18c00044 	addi	r3,r3,1
10105dfc:	1141530e 	bge	r2,r5,1010634c <___vfprintf_internal_r+0x1564>
10105e00:	dc401f17 	ldw	r17,124(sp)
10105e04:	00800044 	movi	r2,1
10105e08:	40800115 	stw	r2,4(r8)
10105e0c:	8c400044 	addi	r17,r17,1
10105e10:	44000015 	stw	r16,0(r8)
10105e14:	d8c02015 	stw	r3,128(sp)
10105e18:	dc401f15 	stw	r17,124(sp)
10105e1c:	008001c4 	movi	r2,7
10105e20:	14416b16 	blt	r2,r17,101063d0 <___vfprintf_internal_r+0x15e8>
10105e24:	42000204 	addi	r8,r8,8
10105e28:	d8803717 	ldw	r2,220(sp)
10105e2c:	d9003417 	ldw	r4,208(sp)
10105e30:	8c400044 	addi	r17,r17,1
10105e34:	10c7883a 	add	r3,r2,r3
10105e38:	40800115 	stw	r2,4(r8)
10105e3c:	41000015 	stw	r4,0(r8)
10105e40:	d8c02015 	stw	r3,128(sp)
10105e44:	dc401f15 	stw	r17,124(sp)
10105e48:	008001c4 	movi	r2,7
10105e4c:	14416916 	blt	r2,r17,101063f4 <___vfprintf_internal_r+0x160c>
10105e50:	45800204 	addi	r22,r8,8
10105e54:	d9003617 	ldw	r4,216(sp)
10105e58:	d9403817 	ldw	r5,224(sp)
10105e5c:	000d883a 	mov	r6,zero
10105e60:	000f883a 	mov	r7,zero
10105e64:	d8c03c15 	stw	r3,240(sp)
10105e68:	010e5700 	call	1010e570 <__eqdf2>
10105e6c:	d8c03c17 	ldw	r3,240(sp)
10105e70:	1000bc26 	beq	r2,zero,10106164 <___vfprintf_internal_r+0x137c>
10105e74:	d9403317 	ldw	r5,204(sp)
10105e78:	84000044 	addi	r16,r16,1
10105e7c:	8c400044 	addi	r17,r17,1
10105e80:	28bfffc4 	addi	r2,r5,-1
10105e84:	1887883a 	add	r3,r3,r2
10105e88:	b0800115 	stw	r2,4(r22)
10105e8c:	b4000015 	stw	r16,0(r22)
10105e90:	d8c02015 	stw	r3,128(sp)
10105e94:	dc401f15 	stw	r17,124(sp)
10105e98:	008001c4 	movi	r2,7
10105e9c:	14414316 	blt	r2,r17,101063ac <___vfprintf_internal_r+0x15c4>
10105ea0:	b5800204 	addi	r22,r22,8
10105ea4:	d9003a17 	ldw	r4,232(sp)
10105ea8:	df0022c4 	addi	fp,sp,139
10105eac:	8c400044 	addi	r17,r17,1
10105eb0:	20c7883a 	add	r3,r4,r3
10105eb4:	b7000015 	stw	fp,0(r22)
10105eb8:	b1000115 	stw	r4,4(r22)
10105ebc:	d8c02015 	stw	r3,128(sp)
10105ec0:	dc401f15 	stw	r17,124(sp)
10105ec4:	008001c4 	movi	r2,7
10105ec8:	14400e16 	blt	r2,r17,10105f04 <___vfprintf_internal_r+0x111c>
10105ecc:	b2000204 	addi	r8,r22,8
10105ed0:	003e3a06 	br	101057bc <__alt_data_end+0xfffe57bc>
10105ed4:	01040474 	movhi	r4,4113
10105ed8:	210a2184 	addi	r4,r4,10374
10105edc:	d9002b15 	stw	r4,172(sp)
10105ee0:	d9002b17 	ldw	r4,172(sp)
10105ee4:	1c07883a 	add	r3,r3,r16
10105ee8:	44000115 	stw	r16,4(r8)
10105eec:	41000015 	stw	r4,0(r8)
10105ef0:	10800044 	addi	r2,r2,1
10105ef4:	d8c02015 	stw	r3,128(sp)
10105ef8:	d8801f15 	stw	r2,124(sp)
10105efc:	010001c4 	movi	r4,7
10105f00:	20be2d0e 	bge	r4,r2,101057b8 <__alt_data_end+0xfffe57b8>
10105f04:	d9002c17 	ldw	r4,176(sp)
10105f08:	d9801e04 	addi	r6,sp,120
10105f0c:	b80b883a 	mov	r5,r23
10105f10:	010af2c0 	call	1010af2c <__sprint_r>
10105f14:	103cb61e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105f18:	d8c02017 	ldw	r3,128(sp)
10105f1c:	da000404 	addi	r8,sp,16
10105f20:	003e2606 	br	101057bc <__alt_data_end+0xfffe57bc>
10105f24:	d9002c17 	ldw	r4,176(sp)
10105f28:	d9801e04 	addi	r6,sp,120
10105f2c:	b80b883a 	mov	r5,r23
10105f30:	010af2c0 	call	1010af2c <__sprint_r>
10105f34:	103e5d26 	beq	r2,zero,101058ac <__alt_data_end+0xfffe58ac>
10105f38:	003cad06 	br	101051f0 <__alt_data_end+0xfffe51f0>
10105f3c:	d9002c17 	ldw	r4,176(sp)
10105f40:	d9801e04 	addi	r6,sp,120
10105f44:	b80b883a 	mov	r5,r23
10105f48:	010af2c0 	call	1010af2c <__sprint_r>
10105f4c:	103ca81e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105f50:	d8c02017 	ldw	r3,128(sp)
10105f54:	da000404 	addi	r8,sp,16
10105f58:	003e0b06 	br	10105788 <__alt_data_end+0xfffe5788>
10105f5c:	d9002c17 	ldw	r4,176(sp)
10105f60:	d9801e04 	addi	r6,sp,120
10105f64:	b80b883a 	mov	r5,r23
10105f68:	010af2c0 	call	1010af2c <__sprint_r>
10105f6c:	103ca01e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105f70:	d8c02017 	ldw	r3,128(sp)
10105f74:	da000404 	addi	r8,sp,16
10105f78:	003dbd06 	br	10105670 <__alt_data_end+0xfffe5670>
10105f7c:	d9002c17 	ldw	r4,176(sp)
10105f80:	d9801e04 	addi	r6,sp,120
10105f84:	b80b883a 	mov	r5,r23
10105f88:	010af2c0 	call	1010af2c <__sprint_r>
10105f8c:	103c981e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10105f90:	d8c02017 	ldw	r3,128(sp)
10105f94:	da000404 	addi	r8,sp,16
10105f98:	003dc306 	br	101056a8 <__alt_data_end+0xfffe56a8>
10105f9c:	d8802917 	ldw	r2,164(sp)
10105fa0:	d8002785 	stb	zero,158(sp)
10105fa4:	103f0616 	blt	r2,zero,10105bc0 <__alt_data_end+0xfffe5bc0>
10105fa8:	00ffdfc4 	movi	r3,-129
10105fac:	9d84b03a 	or	r2,r19,r22
10105fb0:	90e4703a 	and	r18,r18,r3
10105fb4:	103c6b26 	beq	r2,zero,10105164 <__alt_data_end+0xfffe5164>
10105fb8:	0039883a 	mov	fp,zero
10105fbc:	003e7406 	br	10105990 <__alt_data_end+0xfffe5990>
10105fc0:	9080040c 	andi	r2,r18,16
10105fc4:	1001b326 	beq	r2,zero,10106694 <___vfprintf_internal_r+0x18ac>
10105fc8:	d9002d17 	ldw	r4,180(sp)
10105fcc:	d9402917 	ldw	r5,164(sp)
10105fd0:	d8002785 	stb	zero,158(sp)
10105fd4:	20800104 	addi	r2,r4,4
10105fd8:	24c00017 	ldw	r19,0(r4)
10105fdc:	002d883a 	mov	r22,zero
10105fe0:	2801b516 	blt	r5,zero,101066b8 <___vfprintf_internal_r+0x18d0>
10105fe4:	00ffdfc4 	movi	r3,-129
10105fe8:	d8802d15 	stw	r2,180(sp)
10105fec:	90e4703a 	and	r18,r18,r3
10105ff0:	983d2726 	beq	r19,zero,10105490 <__alt_data_end+0xfffe5490>
10105ff4:	0039883a 	mov	fp,zero
10105ff8:	003d2a06 	br	101054a4 <__alt_data_end+0xfffe54a4>
10105ffc:	dc402617 	ldw	r17,152(sp)
10106000:	0441d30e 	bge	zero,r17,10106750 <___vfprintf_internal_r+0x1968>
10106004:	dc403217 	ldw	r17,200(sp)
10106008:	d8803317 	ldw	r2,204(sp)
1010600c:	1440010e 	bge	r2,r17,10106014 <___vfprintf_internal_r+0x122c>
10106010:	1023883a 	mov	r17,r2
10106014:	04400a0e 	bge	zero,r17,10106040 <___vfprintf_internal_r+0x1258>
10106018:	d8801f17 	ldw	r2,124(sp)
1010601c:	1c47883a 	add	r3,r3,r17
10106020:	44000015 	stw	r16,0(r8)
10106024:	10800044 	addi	r2,r2,1
10106028:	44400115 	stw	r17,4(r8)
1010602c:	d8c02015 	stw	r3,128(sp)
10106030:	d8801f15 	stw	r2,124(sp)
10106034:	010001c4 	movi	r4,7
10106038:	20826516 	blt	r4,r2,101069d0 <___vfprintf_internal_r+0x1be8>
1010603c:	42000204 	addi	r8,r8,8
10106040:	88026116 	blt	r17,zero,101069c8 <___vfprintf_internal_r+0x1be0>
10106044:	d9003217 	ldw	r4,200(sp)
10106048:	2463c83a 	sub	r17,r4,r17
1010604c:	04407b0e 	bge	zero,r17,1010623c <___vfprintf_internal_r+0x1454>
10106050:	05800404 	movi	r22,16
10106054:	d8801f17 	ldw	r2,124(sp)
10106058:	b4419d0e 	bge	r22,r17,101066d0 <___vfprintf_internal_r+0x18e8>
1010605c:	01040474 	movhi	r4,4113
10106060:	210a2184 	addi	r4,r4,10374
10106064:	d9002b15 	stw	r4,172(sp)
10106068:	070001c4 	movi	fp,7
1010606c:	dcc02c17 	ldw	r19,176(sp)
10106070:	00000306 	br	10106080 <___vfprintf_internal_r+0x1298>
10106074:	42000204 	addi	r8,r8,8
10106078:	8c7ffc04 	addi	r17,r17,-16
1010607c:	b441970e 	bge	r22,r17,101066dc <___vfprintf_internal_r+0x18f4>
10106080:	18c00404 	addi	r3,r3,16
10106084:	10800044 	addi	r2,r2,1
10106088:	45000015 	stw	r20,0(r8)
1010608c:	45800115 	stw	r22,4(r8)
10106090:	d8c02015 	stw	r3,128(sp)
10106094:	d8801f15 	stw	r2,124(sp)
10106098:	e0bff60e 	bge	fp,r2,10106074 <__alt_data_end+0xfffe6074>
1010609c:	d9801e04 	addi	r6,sp,120
101060a0:	b80b883a 	mov	r5,r23
101060a4:	9809883a 	mov	r4,r19
101060a8:	010af2c0 	call	1010af2c <__sprint_r>
101060ac:	103c501e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101060b0:	d8c02017 	ldw	r3,128(sp)
101060b4:	d8801f17 	ldw	r2,124(sp)
101060b8:	da000404 	addi	r8,sp,16
101060bc:	003fee06 	br	10106078 <__alt_data_end+0xfffe6078>
101060c0:	d9002c17 	ldw	r4,176(sp)
101060c4:	d9801e04 	addi	r6,sp,120
101060c8:	b80b883a 	mov	r5,r23
101060cc:	010af2c0 	call	1010af2c <__sprint_r>
101060d0:	103c471e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101060d4:	d8c02017 	ldw	r3,128(sp)
101060d8:	df002787 	ldb	fp,158(sp)
101060dc:	da000404 	addi	r8,sp,16
101060e0:	003d5606 	br	1010563c <__alt_data_end+0xfffe563c>
101060e4:	9080040c 	andi	r2,r18,16
101060e8:	10016126 	beq	r2,zero,10106670 <___vfprintf_internal_r+0x1888>
101060ec:	d8802d17 	ldw	r2,180(sp)
101060f0:	14c00017 	ldw	r19,0(r2)
101060f4:	10800104 	addi	r2,r2,4
101060f8:	d8802d15 	stw	r2,180(sp)
101060fc:	982dd7fa 	srai	r22,r19,31
10106100:	b005883a 	mov	r2,r22
10106104:	003c8206 	br	10105310 <__alt_data_end+0xfffe5310>
10106108:	9080040c 	andi	r2,r18,16
1010610c:	10003526 	beq	r2,zero,101061e4 <___vfprintf_internal_r+0x13fc>
10106110:	d9402d17 	ldw	r5,180(sp)
10106114:	d8c02917 	ldw	r3,164(sp)
10106118:	d8002785 	stb	zero,158(sp)
1010611c:	28800104 	addi	r2,r5,4
10106120:	2cc00017 	ldw	r19,0(r5)
10106124:	002d883a 	mov	r22,zero
10106128:	18003716 	blt	r3,zero,10106208 <___vfprintf_internal_r+0x1420>
1010612c:	00ffdfc4 	movi	r3,-129
10106130:	d8802d15 	stw	r2,180(sp)
10106134:	90e4703a 	and	r18,r18,r3
10106138:	0039883a 	mov	fp,zero
1010613c:	983df326 	beq	r19,zero,1010590c <__alt_data_end+0xfffe590c>
10106140:	00800244 	movi	r2,9
10106144:	14fc7b36 	bltu	r2,r19,10105334 <__alt_data_end+0xfffe5334>
10106148:	d8c02817 	ldw	r3,160(sp)
1010614c:	dc001dc4 	addi	r16,sp,119
10106150:	9cc00c04 	addi	r19,r19,48
10106154:	1c07c83a 	sub	r3,r3,r16
10106158:	dcc01dc5 	stb	r19,119(sp)
1010615c:	d8c02e15 	stw	r3,184(sp)
10106160:	003ce806 	br	10105504 <__alt_data_end+0xfffe5504>
10106164:	d8803317 	ldw	r2,204(sp)
10106168:	143fffc4 	addi	r16,r2,-1
1010616c:	043f4d0e 	bge	zero,r16,10105ea4 <__alt_data_end+0xfffe5ea4>
10106170:	07000404 	movi	fp,16
10106174:	e400810e 	bge	fp,r16,1010637c <___vfprintf_internal_r+0x1594>
10106178:	01440474 	movhi	r5,4113
1010617c:	294a2184 	addi	r5,r5,10374
10106180:	d9402b15 	stw	r5,172(sp)
10106184:	01c001c4 	movi	r7,7
10106188:	dcc02c17 	ldw	r19,176(sp)
1010618c:	00000306 	br	1010619c <___vfprintf_internal_r+0x13b4>
10106190:	b5800204 	addi	r22,r22,8
10106194:	843ffc04 	addi	r16,r16,-16
10106198:	e4007b0e 	bge	fp,r16,10106388 <___vfprintf_internal_r+0x15a0>
1010619c:	18c00404 	addi	r3,r3,16
101061a0:	8c400044 	addi	r17,r17,1
101061a4:	b5000015 	stw	r20,0(r22)
101061a8:	b7000115 	stw	fp,4(r22)
101061ac:	d8c02015 	stw	r3,128(sp)
101061b0:	dc401f15 	stw	r17,124(sp)
101061b4:	3c7ff60e 	bge	r7,r17,10106190 <__alt_data_end+0xfffe6190>
101061b8:	d9801e04 	addi	r6,sp,120
101061bc:	b80b883a 	mov	r5,r23
101061c0:	9809883a 	mov	r4,r19
101061c4:	d9c03c15 	stw	r7,240(sp)
101061c8:	010af2c0 	call	1010af2c <__sprint_r>
101061cc:	d9c03c17 	ldw	r7,240(sp)
101061d0:	103c071e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101061d4:	d8c02017 	ldw	r3,128(sp)
101061d8:	dc401f17 	ldw	r17,124(sp)
101061dc:	dd800404 	addi	r22,sp,16
101061e0:	003fec06 	br	10106194 <__alt_data_end+0xfffe6194>
101061e4:	9080100c 	andi	r2,r18,64
101061e8:	d8002785 	stb	zero,158(sp)
101061ec:	10010e26 	beq	r2,zero,10106628 <___vfprintf_internal_r+0x1840>
101061f0:	d9002d17 	ldw	r4,180(sp)
101061f4:	d9402917 	ldw	r5,164(sp)
101061f8:	002d883a 	mov	r22,zero
101061fc:	20800104 	addi	r2,r4,4
10106200:	24c0000b 	ldhu	r19,0(r4)
10106204:	283fc90e 	bge	r5,zero,1010612c <__alt_data_end+0xfffe612c>
10106208:	d8802d15 	stw	r2,180(sp)
1010620c:	0039883a 	mov	fp,zero
10106210:	9d84b03a 	or	r2,r19,r22
10106214:	103c461e 	bne	r2,zero,10105330 <__alt_data_end+0xfffe5330>
10106218:	00800044 	movi	r2,1
1010621c:	003e6c06 	br	10105bd0 <__alt_data_end+0xfffe5bd0>
10106220:	d9002c17 	ldw	r4,176(sp)
10106224:	d9801e04 	addi	r6,sp,120
10106228:	b80b883a 	mov	r5,r23
1010622c:	010af2c0 	call	1010af2c <__sprint_r>
10106230:	103bef1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106234:	d8c02017 	ldw	r3,128(sp)
10106238:	da000404 	addi	r8,sp,16
1010623c:	d9003217 	ldw	r4,200(sp)
10106240:	d8802617 	ldw	r2,152(sp)
10106244:	d9403317 	ldw	r5,204(sp)
10106248:	8123883a 	add	r17,r16,r4
1010624c:	11400216 	blt	r2,r5,10106258 <___vfprintf_internal_r+0x1470>
10106250:	9100004c 	andi	r4,r18,1
10106254:	20000d26 	beq	r4,zero,1010628c <___vfprintf_internal_r+0x14a4>
10106258:	d9003717 	ldw	r4,220(sp)
1010625c:	d9403417 	ldw	r5,208(sp)
10106260:	1907883a 	add	r3,r3,r4
10106264:	d9001f17 	ldw	r4,124(sp)
10106268:	41400015 	stw	r5,0(r8)
1010626c:	d9403717 	ldw	r5,220(sp)
10106270:	21000044 	addi	r4,r4,1
10106274:	d8c02015 	stw	r3,128(sp)
10106278:	41400115 	stw	r5,4(r8)
1010627c:	d9001f15 	stw	r4,124(sp)
10106280:	014001c4 	movi	r5,7
10106284:	2901e816 	blt	r5,r4,10106a28 <___vfprintf_internal_r+0x1c40>
10106288:	42000204 	addi	r8,r8,8
1010628c:	d9003317 	ldw	r4,204(sp)
10106290:	8121883a 	add	r16,r16,r4
10106294:	2085c83a 	sub	r2,r4,r2
10106298:	8461c83a 	sub	r16,r16,r17
1010629c:	1400010e 	bge	r2,r16,101062a4 <___vfprintf_internal_r+0x14bc>
101062a0:	1021883a 	mov	r16,r2
101062a4:	04000a0e 	bge	zero,r16,101062d0 <___vfprintf_internal_r+0x14e8>
101062a8:	d9001f17 	ldw	r4,124(sp)
101062ac:	1c07883a 	add	r3,r3,r16
101062b0:	44400015 	stw	r17,0(r8)
101062b4:	21000044 	addi	r4,r4,1
101062b8:	44000115 	stw	r16,4(r8)
101062bc:	d8c02015 	stw	r3,128(sp)
101062c0:	d9001f15 	stw	r4,124(sp)
101062c4:	014001c4 	movi	r5,7
101062c8:	2901fb16 	blt	r5,r4,10106ab8 <___vfprintf_internal_r+0x1cd0>
101062cc:	42000204 	addi	r8,r8,8
101062d0:	8001f716 	blt	r16,zero,10106ab0 <___vfprintf_internal_r+0x1cc8>
101062d4:	1421c83a 	sub	r16,r2,r16
101062d8:	043d380e 	bge	zero,r16,101057bc <__alt_data_end+0xfffe57bc>
101062dc:	04400404 	movi	r17,16
101062e0:	d8801f17 	ldw	r2,124(sp)
101062e4:	8c3efb0e 	bge	r17,r16,10105ed4 <__alt_data_end+0xfffe5ed4>
101062e8:	01440474 	movhi	r5,4113
101062ec:	294a2184 	addi	r5,r5,10374
101062f0:	d9402b15 	stw	r5,172(sp)
101062f4:	058001c4 	movi	r22,7
101062f8:	dcc02c17 	ldw	r19,176(sp)
101062fc:	00000306 	br	1010630c <___vfprintf_internal_r+0x1524>
10106300:	42000204 	addi	r8,r8,8
10106304:	843ffc04 	addi	r16,r16,-16
10106308:	8c3ef50e 	bge	r17,r16,10105ee0 <__alt_data_end+0xfffe5ee0>
1010630c:	18c00404 	addi	r3,r3,16
10106310:	10800044 	addi	r2,r2,1
10106314:	45000015 	stw	r20,0(r8)
10106318:	44400115 	stw	r17,4(r8)
1010631c:	d8c02015 	stw	r3,128(sp)
10106320:	d8801f15 	stw	r2,124(sp)
10106324:	b0bff60e 	bge	r22,r2,10106300 <__alt_data_end+0xfffe6300>
10106328:	d9801e04 	addi	r6,sp,120
1010632c:	b80b883a 	mov	r5,r23
10106330:	9809883a 	mov	r4,r19
10106334:	010af2c0 	call	1010af2c <__sprint_r>
10106338:	103bad1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
1010633c:	d8c02017 	ldw	r3,128(sp)
10106340:	d8801f17 	ldw	r2,124(sp)
10106344:	da000404 	addi	r8,sp,16
10106348:	003fee06 	br	10106304 <__alt_data_end+0xfffe6304>
1010634c:	9088703a 	and	r4,r18,r2
10106350:	203eab1e 	bne	r4,zero,10105e00 <__alt_data_end+0xfffe5e00>
10106354:	dc401f17 	ldw	r17,124(sp)
10106358:	40800115 	stw	r2,4(r8)
1010635c:	44000015 	stw	r16,0(r8)
10106360:	8c400044 	addi	r17,r17,1
10106364:	d8c02015 	stw	r3,128(sp)
10106368:	dc401f15 	stw	r17,124(sp)
1010636c:	008001c4 	movi	r2,7
10106370:	14400e16 	blt	r2,r17,101063ac <___vfprintf_internal_r+0x15c4>
10106374:	45800204 	addi	r22,r8,8
10106378:	003eca06 	br	10105ea4 <__alt_data_end+0xfffe5ea4>
1010637c:	01040474 	movhi	r4,4113
10106380:	210a2184 	addi	r4,r4,10374
10106384:	d9002b15 	stw	r4,172(sp)
10106388:	d8802b17 	ldw	r2,172(sp)
1010638c:	1c07883a 	add	r3,r3,r16
10106390:	8c400044 	addi	r17,r17,1
10106394:	b0800015 	stw	r2,0(r22)
10106398:	b4000115 	stw	r16,4(r22)
1010639c:	d8c02015 	stw	r3,128(sp)
101063a0:	dc401f15 	stw	r17,124(sp)
101063a4:	008001c4 	movi	r2,7
101063a8:	147ebd0e 	bge	r2,r17,10105ea0 <__alt_data_end+0xfffe5ea0>
101063ac:	d9002c17 	ldw	r4,176(sp)
101063b0:	d9801e04 	addi	r6,sp,120
101063b4:	b80b883a 	mov	r5,r23
101063b8:	010af2c0 	call	1010af2c <__sprint_r>
101063bc:	103b8c1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101063c0:	d8c02017 	ldw	r3,128(sp)
101063c4:	dc401f17 	ldw	r17,124(sp)
101063c8:	dd800404 	addi	r22,sp,16
101063cc:	003eb506 	br	10105ea4 <__alt_data_end+0xfffe5ea4>
101063d0:	d9002c17 	ldw	r4,176(sp)
101063d4:	d9801e04 	addi	r6,sp,120
101063d8:	b80b883a 	mov	r5,r23
101063dc:	010af2c0 	call	1010af2c <__sprint_r>
101063e0:	103b831e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101063e4:	d8c02017 	ldw	r3,128(sp)
101063e8:	dc401f17 	ldw	r17,124(sp)
101063ec:	da000404 	addi	r8,sp,16
101063f0:	003e8d06 	br	10105e28 <__alt_data_end+0xfffe5e28>
101063f4:	d9002c17 	ldw	r4,176(sp)
101063f8:	d9801e04 	addi	r6,sp,120
101063fc:	b80b883a 	mov	r5,r23
10106400:	010af2c0 	call	1010af2c <__sprint_r>
10106404:	103b7a1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106408:	d8c02017 	ldw	r3,128(sp)
1010640c:	dc401f17 	ldw	r17,124(sp)
10106410:	dd800404 	addi	r22,sp,16
10106414:	003e8f06 	br	10105e54 <__alt_data_end+0xfffe5e54>
10106418:	0027883a 	mov	r19,zero
1010641c:	003f4a06 	br	10106148 <__alt_data_end+0xfffe6148>
10106420:	d9002c17 	ldw	r4,176(sp)
10106424:	d9801e04 	addi	r6,sp,120
10106428:	b80b883a 	mov	r5,r23
1010642c:	010af2c0 	call	1010af2c <__sprint_r>
10106430:	103b6f1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106434:	d8c02017 	ldw	r3,128(sp)
10106438:	da000404 	addi	r8,sp,16
1010643c:	003c9d06 	br	101056b4 <__alt_data_end+0xfffe56b4>
10106440:	04e7c83a 	sub	r19,zero,r19
10106444:	9804c03a 	cmpne	r2,r19,zero
10106448:	05adc83a 	sub	r22,zero,r22
1010644c:	b0adc83a 	sub	r22,r22,r2
10106450:	d8802917 	ldw	r2,164(sp)
10106454:	07000b44 	movi	fp,45
10106458:	df002785 	stb	fp,158(sp)
1010645c:	10017b16 	blt	r2,zero,10106a4c <___vfprintf_internal_r+0x1c64>
10106460:	00bfdfc4 	movi	r2,-129
10106464:	90a4703a 	and	r18,r18,r2
10106468:	003bb106 	br	10105330 <__alt_data_end+0xfffe5330>
1010646c:	d9003617 	ldw	r4,216(sp)
10106470:	d9403817 	ldw	r5,224(sp)
10106474:	da003d15 	stw	r8,244(sp)
10106478:	010ace00 	call	1010ace0 <__fpclassifyd>
1010647c:	da003d17 	ldw	r8,244(sp)
10106480:	1000f026 	beq	r2,zero,10106844 <___vfprintf_internal_r+0x1a5c>
10106484:	d9002917 	ldw	r4,164(sp)
10106488:	05bff7c4 	movi	r22,-33
1010648c:	00bfffc4 	movi	r2,-1
10106490:	8dac703a 	and	r22,r17,r22
10106494:	20820026 	beq	r4,r2,10106c98 <___vfprintf_internal_r+0x1eb0>
10106498:	008011c4 	movi	r2,71
1010649c:	b081f726 	beq	r22,r2,10106c7c <___vfprintf_internal_r+0x1e94>
101064a0:	d9003817 	ldw	r4,224(sp)
101064a4:	90c04014 	ori	r3,r18,256
101064a8:	d8c02b15 	stw	r3,172(sp)
101064ac:	20021516 	blt	r4,zero,10106d04 <___vfprintf_internal_r+0x1f1c>
101064b0:	dcc03817 	ldw	r19,224(sp)
101064b4:	d8002a05 	stb	zero,168(sp)
101064b8:	00801984 	movi	r2,102
101064bc:	8881f926 	beq	r17,r2,10106ca4 <___vfprintf_internal_r+0x1ebc>
101064c0:	00801184 	movi	r2,70
101064c4:	88821c26 	beq	r17,r2,10106d38 <___vfprintf_internal_r+0x1f50>
101064c8:	00801144 	movi	r2,69
101064cc:	b081ef26 	beq	r22,r2,10106c8c <___vfprintf_internal_r+0x1ea4>
101064d0:	d8c02917 	ldw	r3,164(sp)
101064d4:	d8802104 	addi	r2,sp,132
101064d8:	d8800315 	stw	r2,12(sp)
101064dc:	d9403617 	ldw	r5,216(sp)
101064e0:	d8802504 	addi	r2,sp,148
101064e4:	d9002c17 	ldw	r4,176(sp)
101064e8:	d8800215 	stw	r2,8(sp)
101064ec:	d8802604 	addi	r2,sp,152
101064f0:	d8c00015 	stw	r3,0(sp)
101064f4:	d8800115 	stw	r2,4(sp)
101064f8:	01c00084 	movi	r7,2
101064fc:	980d883a 	mov	r6,r19
10106500:	d8c03c15 	stw	r3,240(sp)
10106504:	da003d15 	stw	r8,244(sp)
10106508:	01076180 	call	10107618 <_dtoa_r>
1010650c:	1021883a 	mov	r16,r2
10106510:	008019c4 	movi	r2,103
10106514:	d8c03c17 	ldw	r3,240(sp)
10106518:	da003d17 	ldw	r8,244(sp)
1010651c:	88817126 	beq	r17,r2,10106ae4 <___vfprintf_internal_r+0x1cfc>
10106520:	008011c4 	movi	r2,71
10106524:	88829226 	beq	r17,r2,10106f70 <___vfprintf_internal_r+0x2188>
10106528:	80f9883a 	add	fp,r16,r3
1010652c:	d9003617 	ldw	r4,216(sp)
10106530:	000d883a 	mov	r6,zero
10106534:	000f883a 	mov	r7,zero
10106538:	980b883a 	mov	r5,r19
1010653c:	da003d15 	stw	r8,244(sp)
10106540:	010e5700 	call	1010e570 <__eqdf2>
10106544:	da003d17 	ldw	r8,244(sp)
10106548:	10018d26 	beq	r2,zero,10106b80 <___vfprintf_internal_r+0x1d98>
1010654c:	d8802117 	ldw	r2,132(sp)
10106550:	1700062e 	bgeu	r2,fp,1010656c <___vfprintf_internal_r+0x1784>
10106554:	01000c04 	movi	r4,48
10106558:	10c00044 	addi	r3,r2,1
1010655c:	d8c02115 	stw	r3,132(sp)
10106560:	11000005 	stb	r4,0(r2)
10106564:	d8802117 	ldw	r2,132(sp)
10106568:	173ffb36 	bltu	r2,fp,10106558 <__alt_data_end+0xfffe6558>
1010656c:	1405c83a 	sub	r2,r2,r16
10106570:	d8803315 	stw	r2,204(sp)
10106574:	008011c4 	movi	r2,71
10106578:	b0817626 	beq	r22,r2,10106b54 <___vfprintf_internal_r+0x1d6c>
1010657c:	00801944 	movi	r2,101
10106580:	1442810e 	bge	r2,r17,10106f88 <___vfprintf_internal_r+0x21a0>
10106584:	d8c02617 	ldw	r3,152(sp)
10106588:	00801984 	movi	r2,102
1010658c:	d8c03215 	stw	r3,200(sp)
10106590:	8881fe26 	beq	r17,r2,10106d8c <___vfprintf_internal_r+0x1fa4>
10106594:	d8c03217 	ldw	r3,200(sp)
10106598:	d9003317 	ldw	r4,204(sp)
1010659c:	1901dd16 	blt	r3,r4,10106d14 <___vfprintf_internal_r+0x1f2c>
101065a0:	9480004c 	andi	r18,r18,1
101065a4:	90022b1e 	bne	r18,zero,10106e54 <___vfprintf_internal_r+0x206c>
101065a8:	1805883a 	mov	r2,r3
101065ac:	18028016 	blt	r3,zero,10106fb0 <___vfprintf_internal_r+0x21c8>
101065b0:	d8c03217 	ldw	r3,200(sp)
101065b4:	044019c4 	movi	r17,103
101065b8:	d8c02e15 	stw	r3,184(sp)
101065bc:	df002a07 	ldb	fp,168(sp)
101065c0:	e001531e 	bne	fp,zero,10106b10 <___vfprintf_internal_r+0x1d28>
101065c4:	df002783 	ldbu	fp,158(sp)
101065c8:	d8802a15 	stw	r2,168(sp)
101065cc:	dc802b17 	ldw	r18,172(sp)
101065d0:	d8002915 	stw	zero,164(sp)
101065d4:	003bd106 	br	1010551c <__alt_data_end+0xfffe551c>
101065d8:	d8802d17 	ldw	r2,180(sp)
101065dc:	d8c02d17 	ldw	r3,180(sp)
101065e0:	d9002d17 	ldw	r4,180(sp)
101065e4:	10800017 	ldw	r2,0(r2)
101065e8:	18c00117 	ldw	r3,4(r3)
101065ec:	21000204 	addi	r4,r4,8
101065f0:	d8803615 	stw	r2,216(sp)
101065f4:	d8c03815 	stw	r3,224(sp)
101065f8:	d9002d15 	stw	r4,180(sp)
101065fc:	003b7506 	br	101053d4 <__alt_data_end+0xfffe53d4>
10106600:	ac400007 	ldb	r17,0(r21)
10106604:	003a5906 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10106608:	9080100c 	andi	r2,r18,64
1010660c:	1000a826 	beq	r2,zero,101068b0 <___vfprintf_internal_r+0x1ac8>
10106610:	d9002d17 	ldw	r4,180(sp)
10106614:	002d883a 	mov	r22,zero
10106618:	24c0000b 	ldhu	r19,0(r4)
1010661c:	21000104 	addi	r4,r4,4
10106620:	d9002d15 	stw	r4,180(sp)
10106624:	003ccb06 	br	10105954 <__alt_data_end+0xfffe5954>
10106628:	d8c02d17 	ldw	r3,180(sp)
1010662c:	d9002917 	ldw	r4,164(sp)
10106630:	002d883a 	mov	r22,zero
10106634:	18800104 	addi	r2,r3,4
10106638:	1cc00017 	ldw	r19,0(r3)
1010663c:	203ebb0e 	bge	r4,zero,1010612c <__alt_data_end+0xfffe612c>
10106640:	003ef106 	br	10106208 <__alt_data_end+0xfffe6208>
10106644:	9080040c 	andi	r2,r18,16
10106648:	1000921e 	bne	r2,zero,10106894 <___vfprintf_internal_r+0x1aac>
1010664c:	9480100c 	andi	r18,r18,64
10106650:	90013926 	beq	r18,zero,10106b38 <___vfprintf_internal_r+0x1d50>
10106654:	d9002d17 	ldw	r4,180(sp)
10106658:	d9402f17 	ldw	r5,188(sp)
1010665c:	20800017 	ldw	r2,0(r4)
10106660:	21000104 	addi	r4,r4,4
10106664:	d9002d15 	stw	r4,180(sp)
10106668:	1140000d 	sth	r5,0(r2)
1010666c:	003a1606 	br	10104ec8 <__alt_data_end+0xfffe4ec8>
10106670:	9080100c 	andi	r2,r18,64
10106674:	10008026 	beq	r2,zero,10106878 <___vfprintf_internal_r+0x1a90>
10106678:	d8c02d17 	ldw	r3,180(sp)
1010667c:	1cc0000f 	ldh	r19,0(r3)
10106680:	18c00104 	addi	r3,r3,4
10106684:	d8c02d15 	stw	r3,180(sp)
10106688:	982dd7fa 	srai	r22,r19,31
1010668c:	b005883a 	mov	r2,r22
10106690:	003b1f06 	br	10105310 <__alt_data_end+0xfffe5310>
10106694:	9080100c 	andi	r2,r18,64
10106698:	d8002785 	stb	zero,158(sp)
1010669c:	10008a1e 	bne	r2,zero,101068c8 <___vfprintf_internal_r+0x1ae0>
101066a0:	d9402d17 	ldw	r5,180(sp)
101066a4:	d8c02917 	ldw	r3,164(sp)
101066a8:	002d883a 	mov	r22,zero
101066ac:	28800104 	addi	r2,r5,4
101066b0:	2cc00017 	ldw	r19,0(r5)
101066b4:	183e4b0e 	bge	r3,zero,10105fe4 <__alt_data_end+0xfffe5fe4>
101066b8:	9d86b03a 	or	r3,r19,r22
101066bc:	d8802d15 	stw	r2,180(sp)
101066c0:	183e4c1e 	bne	r3,zero,10105ff4 <__alt_data_end+0xfffe5ff4>
101066c4:	0039883a 	mov	fp,zero
101066c8:	0005883a 	mov	r2,zero
101066cc:	003d4006 	br	10105bd0 <__alt_data_end+0xfffe5bd0>
101066d0:	01440474 	movhi	r5,4113
101066d4:	294a2184 	addi	r5,r5,10374
101066d8:	d9402b15 	stw	r5,172(sp)
101066dc:	d9402b17 	ldw	r5,172(sp)
101066e0:	1c47883a 	add	r3,r3,r17
101066e4:	10800044 	addi	r2,r2,1
101066e8:	41400015 	stw	r5,0(r8)
101066ec:	44400115 	stw	r17,4(r8)
101066f0:	d8c02015 	stw	r3,128(sp)
101066f4:	d8801f15 	stw	r2,124(sp)
101066f8:	010001c4 	movi	r4,7
101066fc:	20bec816 	blt	r4,r2,10106220 <__alt_data_end+0xfffe6220>
10106700:	42000204 	addi	r8,r8,8
10106704:	003ecd06 	br	1010623c <__alt_data_end+0xfffe623c>
10106708:	d9002917 	ldw	r4,164(sp)
1010670c:	d8002785 	stb	zero,158(sp)
10106710:	203d2d16 	blt	r4,zero,10105bc8 <__alt_data_end+0xfffe5bc8>
10106714:	00bfdfc4 	movi	r2,-129
10106718:	90a4703a 	and	r18,r18,r2
1010671c:	003a9106 	br	10105164 <__alt_data_end+0xfffe5164>
10106720:	01040474 	movhi	r4,4113
10106724:	210a2184 	addi	r4,r4,10374
10106728:	d9002b15 	stw	r4,172(sp)
1010672c:	003c0c06 	br	10105760 <__alt_data_end+0xfffe5760>
10106730:	d9002c17 	ldw	r4,176(sp)
10106734:	d9801e04 	addi	r6,sp,120
10106738:	b80b883a 	mov	r5,r23
1010673c:	010af2c0 	call	1010af2c <__sprint_r>
10106740:	103aab1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106744:	d8c02017 	ldw	r3,128(sp)
10106748:	da000404 	addi	r8,sp,16
1010674c:	003d4106 	br	10105c54 <__alt_data_end+0xfffe5c54>
10106750:	d8801f17 	ldw	r2,124(sp)
10106754:	01440474 	movhi	r5,4113
10106758:	01000044 	movi	r4,1
1010675c:	18c00044 	addi	r3,r3,1
10106760:	10800044 	addi	r2,r2,1
10106764:	294a2104 	addi	r5,r5,10372
10106768:	41000115 	stw	r4,4(r8)
1010676c:	41400015 	stw	r5,0(r8)
10106770:	d8c02015 	stw	r3,128(sp)
10106774:	d8801f15 	stw	r2,124(sp)
10106778:	010001c4 	movi	r4,7
1010677c:	20805c16 	blt	r4,r2,101068f0 <___vfprintf_internal_r+0x1b08>
10106780:	42000204 	addi	r8,r8,8
10106784:	8800041e 	bne	r17,zero,10106798 <___vfprintf_internal_r+0x19b0>
10106788:	d8803317 	ldw	r2,204(sp)
1010678c:	1000021e 	bne	r2,zero,10106798 <___vfprintf_internal_r+0x19b0>
10106790:	9080004c 	andi	r2,r18,1
10106794:	103c0926 	beq	r2,zero,101057bc <__alt_data_end+0xfffe57bc>
10106798:	d9003717 	ldw	r4,220(sp)
1010679c:	d8801f17 	ldw	r2,124(sp)
101067a0:	d9403417 	ldw	r5,208(sp)
101067a4:	20c7883a 	add	r3,r4,r3
101067a8:	10800044 	addi	r2,r2,1
101067ac:	41000115 	stw	r4,4(r8)
101067b0:	41400015 	stw	r5,0(r8)
101067b4:	d8c02015 	stw	r3,128(sp)
101067b8:	d8801f15 	stw	r2,124(sp)
101067bc:	010001c4 	movi	r4,7
101067c0:	20812116 	blt	r4,r2,10106c48 <___vfprintf_internal_r+0x1e60>
101067c4:	42000204 	addi	r8,r8,8
101067c8:	0463c83a 	sub	r17,zero,r17
101067cc:	0440730e 	bge	zero,r17,1010699c <___vfprintf_internal_r+0x1bb4>
101067d0:	05800404 	movi	r22,16
101067d4:	b440860e 	bge	r22,r17,101069f0 <___vfprintf_internal_r+0x1c08>
101067d8:	01440474 	movhi	r5,4113
101067dc:	294a2184 	addi	r5,r5,10374
101067e0:	d9402b15 	stw	r5,172(sp)
101067e4:	070001c4 	movi	fp,7
101067e8:	dcc02c17 	ldw	r19,176(sp)
101067ec:	00000306 	br	101067fc <___vfprintf_internal_r+0x1a14>
101067f0:	42000204 	addi	r8,r8,8
101067f4:	8c7ffc04 	addi	r17,r17,-16
101067f8:	b440800e 	bge	r22,r17,101069fc <___vfprintf_internal_r+0x1c14>
101067fc:	18c00404 	addi	r3,r3,16
10106800:	10800044 	addi	r2,r2,1
10106804:	45000015 	stw	r20,0(r8)
10106808:	45800115 	stw	r22,4(r8)
1010680c:	d8c02015 	stw	r3,128(sp)
10106810:	d8801f15 	stw	r2,124(sp)
10106814:	e0bff60e 	bge	fp,r2,101067f0 <__alt_data_end+0xfffe67f0>
10106818:	d9801e04 	addi	r6,sp,120
1010681c:	b80b883a 	mov	r5,r23
10106820:	9809883a 	mov	r4,r19
10106824:	010af2c0 	call	1010af2c <__sprint_r>
10106828:	103a711e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
1010682c:	d8c02017 	ldw	r3,128(sp)
10106830:	d8801f17 	ldw	r2,124(sp)
10106834:	da000404 	addi	r8,sp,16
10106838:	003fee06 	br	101067f4 <__alt_data_end+0xfffe67f4>
1010683c:	00bfffc4 	movi	r2,-1
10106840:	003a6f06 	br	10105200 <__alt_data_end+0xfffe5200>
10106844:	008011c4 	movi	r2,71
10106848:	1440b816 	blt	r2,r17,10106b2c <___vfprintf_internal_r+0x1d44>
1010684c:	04040474 	movhi	r16,4113
10106850:	840a1304 	addi	r16,r16,10316
10106854:	00c000c4 	movi	r3,3
10106858:	00bfdfc4 	movi	r2,-129
1010685c:	d8c02a15 	stw	r3,168(sp)
10106860:	90a4703a 	and	r18,r18,r2
10106864:	df002783 	ldbu	fp,158(sp)
10106868:	d8c02e15 	stw	r3,184(sp)
1010686c:	d8002915 	stw	zero,164(sp)
10106870:	d8003215 	stw	zero,200(sp)
10106874:	003b2906 	br	1010551c <__alt_data_end+0xfffe551c>
10106878:	d9002d17 	ldw	r4,180(sp)
1010687c:	24c00017 	ldw	r19,0(r4)
10106880:	21000104 	addi	r4,r4,4
10106884:	d9002d15 	stw	r4,180(sp)
10106888:	982dd7fa 	srai	r22,r19,31
1010688c:	b005883a 	mov	r2,r22
10106890:	003a9f06 	br	10105310 <__alt_data_end+0xfffe5310>
10106894:	d9402d17 	ldw	r5,180(sp)
10106898:	d8c02f17 	ldw	r3,188(sp)
1010689c:	28800017 	ldw	r2,0(r5)
101068a0:	29400104 	addi	r5,r5,4
101068a4:	d9402d15 	stw	r5,180(sp)
101068a8:	10c00015 	stw	r3,0(r2)
101068ac:	00398606 	br	10104ec8 <__alt_data_end+0xfffe4ec8>
101068b0:	d9402d17 	ldw	r5,180(sp)
101068b4:	002d883a 	mov	r22,zero
101068b8:	2cc00017 	ldw	r19,0(r5)
101068bc:	29400104 	addi	r5,r5,4
101068c0:	d9402d15 	stw	r5,180(sp)
101068c4:	003c2306 	br	10105954 <__alt_data_end+0xfffe5954>
101068c8:	d8c02d17 	ldw	r3,180(sp)
101068cc:	d9002917 	ldw	r4,164(sp)
101068d0:	002d883a 	mov	r22,zero
101068d4:	18800104 	addi	r2,r3,4
101068d8:	1cc0000b 	ldhu	r19,0(r3)
101068dc:	203dc10e 	bge	r4,zero,10105fe4 <__alt_data_end+0xfffe5fe4>
101068e0:	003f7506 	br	101066b8 <__alt_data_end+0xfffe66b8>
101068e4:	04040474 	movhi	r16,4113
101068e8:	840a1104 	addi	r16,r16,10308
101068ec:	003acc06 	br	10105420 <__alt_data_end+0xfffe5420>
101068f0:	d9002c17 	ldw	r4,176(sp)
101068f4:	d9801e04 	addi	r6,sp,120
101068f8:	b80b883a 	mov	r5,r23
101068fc:	010af2c0 	call	1010af2c <__sprint_r>
10106900:	103a3b1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106904:	dc402617 	ldw	r17,152(sp)
10106908:	d8c02017 	ldw	r3,128(sp)
1010690c:	da000404 	addi	r8,sp,16
10106910:	003f9c06 	br	10106784 <__alt_data_end+0xfffe6784>
10106914:	ac400043 	ldbu	r17,1(r21)
10106918:	94800814 	ori	r18,r18,32
1010691c:	ad400044 	addi	r21,r21,1
10106920:	8c403fcc 	andi	r17,r17,255
10106924:	8c40201c 	xori	r17,r17,128
10106928:	8c7fe004 	addi	r17,r17,-128
1010692c:	00398f06 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10106930:	d8c02d15 	stw	r3,180(sp)
10106934:	0039883a 	mov	fp,zero
10106938:	003e3506 	br	10106210 <__alt_data_end+0xfffe6210>
1010693c:	d9002c17 	ldw	r4,176(sp)
10106940:	d9801e04 	addi	r6,sp,120
10106944:	b80b883a 	mov	r5,r23
10106948:	010af2c0 	call	1010af2c <__sprint_r>
1010694c:	103a281e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106950:	d8c02017 	ldw	r3,128(sp)
10106954:	da000404 	addi	r8,sp,16
10106958:	003cd006 	br	10105c9c <__alt_data_end+0xfffe5c9c>
1010695c:	8009883a 	mov	r4,r16
10106960:	da003d15 	stw	r8,244(sp)
10106964:	0104d500 	call	10104d50 <strlen>
10106968:	d8802e15 	stw	r2,184(sp)
1010696c:	da003d17 	ldw	r8,244(sp)
10106970:	103c340e 	bge	r2,zero,10105a44 <__alt_data_end+0xfffe5a44>
10106974:	0005883a 	mov	r2,zero
10106978:	003c3206 	br	10105a44 <__alt_data_end+0xfffe5a44>
1010697c:	d9002c17 	ldw	r4,176(sp)
10106980:	d9801e04 	addi	r6,sp,120
10106984:	b80b883a 	mov	r5,r23
10106988:	010af2c0 	call	1010af2c <__sprint_r>
1010698c:	103a181e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106990:	d8c02017 	ldw	r3,128(sp)
10106994:	d8801f17 	ldw	r2,124(sp)
10106998:	da000404 	addi	r8,sp,16
1010699c:	d9403317 	ldw	r5,204(sp)
101069a0:	10800044 	addi	r2,r2,1
101069a4:	44000015 	stw	r16,0(r8)
101069a8:	28c7883a 	add	r3,r5,r3
101069ac:	003b7d06 	br	101057a4 <__alt_data_end+0xfffe57a4>
101069b0:	01040474 	movhi	r4,4113
101069b4:	210a2584 	addi	r4,r4,10390
101069b8:	d9003515 	stw	r4,212(sp)
101069bc:	003b1406 	br	10105610 <__alt_data_end+0xfffe5610>
101069c0:	013fffc4 	movi	r4,-1
101069c4:	003a3506 	br	1010529c <__alt_data_end+0xfffe529c>
101069c8:	0023883a 	mov	r17,zero
101069cc:	003d9d06 	br	10106044 <__alt_data_end+0xfffe6044>
101069d0:	d9002c17 	ldw	r4,176(sp)
101069d4:	d9801e04 	addi	r6,sp,120
101069d8:	b80b883a 	mov	r5,r23
101069dc:	010af2c0 	call	1010af2c <__sprint_r>
101069e0:	103a031e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
101069e4:	d8c02017 	ldw	r3,128(sp)
101069e8:	da000404 	addi	r8,sp,16
101069ec:	003d9406 	br	10106040 <__alt_data_end+0xfffe6040>
101069f0:	01040474 	movhi	r4,4113
101069f4:	210a2184 	addi	r4,r4,10374
101069f8:	d9002b15 	stw	r4,172(sp)
101069fc:	d9002b17 	ldw	r4,172(sp)
10106a00:	1c47883a 	add	r3,r3,r17
10106a04:	10800044 	addi	r2,r2,1
10106a08:	41000015 	stw	r4,0(r8)
10106a0c:	44400115 	stw	r17,4(r8)
10106a10:	d8c02015 	stw	r3,128(sp)
10106a14:	d8801f15 	stw	r2,124(sp)
10106a18:	010001c4 	movi	r4,7
10106a1c:	20bfd716 	blt	r4,r2,1010697c <__alt_data_end+0xfffe697c>
10106a20:	42000204 	addi	r8,r8,8
10106a24:	003fdd06 	br	1010699c <__alt_data_end+0xfffe699c>
10106a28:	d9002c17 	ldw	r4,176(sp)
10106a2c:	d9801e04 	addi	r6,sp,120
10106a30:	b80b883a 	mov	r5,r23
10106a34:	010af2c0 	call	1010af2c <__sprint_r>
10106a38:	1039ed1e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106a3c:	d8802617 	ldw	r2,152(sp)
10106a40:	d8c02017 	ldw	r3,128(sp)
10106a44:	da000404 	addi	r8,sp,16
10106a48:	003e1006 	br	1010628c <__alt_data_end+0xfffe628c>
10106a4c:	00800044 	movi	r2,1
10106a50:	10803fcc 	andi	r2,r2,255
10106a54:	00c00044 	movi	r3,1
10106a58:	10fa3526 	beq	r2,r3,10105330 <__alt_data_end+0xfffe5330>
10106a5c:	00c00084 	movi	r3,2
10106a60:	10fbcb26 	beq	r2,r3,10105990 <__alt_data_end+0xfffe5990>
10106a64:	003a8f06 	br	101054a4 <__alt_data_end+0xfffe54a4>
10106a68:	01040474 	movhi	r4,4113
10106a6c:	210a2584 	addi	r4,r4,10390
10106a70:	d9003515 	stw	r4,212(sp)
10106a74:	003b7606 	br	10105850 <__alt_data_end+0xfffe5850>
10106a78:	d8802917 	ldw	r2,164(sp)
10106a7c:	00c00184 	movi	r3,6
10106a80:	1880012e 	bgeu	r3,r2,10106a88 <___vfprintf_internal_r+0x1ca0>
10106a84:	1805883a 	mov	r2,r3
10106a88:	d8802e15 	stw	r2,184(sp)
10106a8c:	1000ef16 	blt	r2,zero,10106e4c <___vfprintf_internal_r+0x2064>
10106a90:	04040474 	movhi	r16,4113
10106a94:	d8802a15 	stw	r2,168(sp)
10106a98:	dcc02d15 	stw	r19,180(sp)
10106a9c:	d8002915 	stw	zero,164(sp)
10106aa0:	d8003215 	stw	zero,200(sp)
10106aa4:	840a1f04 	addi	r16,r16,10364
10106aa8:	0039883a 	mov	fp,zero
10106aac:	003aa206 	br	10105538 <__alt_data_end+0xfffe5538>
10106ab0:	0021883a 	mov	r16,zero
10106ab4:	003e0706 	br	101062d4 <__alt_data_end+0xfffe62d4>
10106ab8:	d9002c17 	ldw	r4,176(sp)
10106abc:	d9801e04 	addi	r6,sp,120
10106ac0:	b80b883a 	mov	r5,r23
10106ac4:	010af2c0 	call	1010af2c <__sprint_r>
10106ac8:	1039c91e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106acc:	d8802617 	ldw	r2,152(sp)
10106ad0:	d9403317 	ldw	r5,204(sp)
10106ad4:	d8c02017 	ldw	r3,128(sp)
10106ad8:	da000404 	addi	r8,sp,16
10106adc:	2885c83a 	sub	r2,r5,r2
10106ae0:	003dfb06 	br	101062d0 <__alt_data_end+0xfffe62d0>
10106ae4:	9080004c 	andi	r2,r18,1
10106ae8:	103e8f1e 	bne	r2,zero,10106528 <__alt_data_end+0xfffe6528>
10106aec:	d8802117 	ldw	r2,132(sp)
10106af0:	003e9e06 	br	1010656c <__alt_data_end+0xfffe656c>
10106af4:	1025883a 	mov	r18,r2
10106af8:	0039883a 	mov	fp,zero
10106afc:	00800084 	movi	r2,2
10106b00:	003fd306 	br	10106a50 <__alt_data_end+0xfffe6a50>
10106b04:	07000b44 	movi	fp,45
10106b08:	df002785 	stb	fp,158(sp)
10106b0c:	003a4006 	br	10105410 <__alt_data_end+0xfffe5410>
10106b10:	00c00b44 	movi	r3,45
10106b14:	d8c02785 	stb	r3,158(sp)
10106b18:	d8802a15 	stw	r2,168(sp)
10106b1c:	dc802b17 	ldw	r18,172(sp)
10106b20:	d8002915 	stw	zero,164(sp)
10106b24:	07000b44 	movi	fp,45
10106b28:	003a8006 	br	1010552c <__alt_data_end+0xfffe552c>
10106b2c:	04040474 	movhi	r16,4113
10106b30:	840a1404 	addi	r16,r16,10320
10106b34:	003f4706 	br	10106854 <__alt_data_end+0xfffe6854>
10106b38:	d8c02d17 	ldw	r3,180(sp)
10106b3c:	d9002f17 	ldw	r4,188(sp)
10106b40:	18800017 	ldw	r2,0(r3)
10106b44:	18c00104 	addi	r3,r3,4
10106b48:	d8c02d15 	stw	r3,180(sp)
10106b4c:	11000015 	stw	r4,0(r2)
10106b50:	0038dd06 	br	10104ec8 <__alt_data_end+0xfffe4ec8>
10106b54:	dd802617 	ldw	r22,152(sp)
10106b58:	00bfff44 	movi	r2,-3
10106b5c:	b0801c16 	blt	r22,r2,10106bd0 <___vfprintf_internal_r+0x1de8>
10106b60:	d9402917 	ldw	r5,164(sp)
10106b64:	2d801a16 	blt	r5,r22,10106bd0 <___vfprintf_internal_r+0x1de8>
10106b68:	dd803215 	stw	r22,200(sp)
10106b6c:	003e8906 	br	10106594 <__alt_data_end+0xfffe6594>
10106b70:	01040474 	movhi	r4,4113
10106b74:	210a2184 	addi	r4,r4,10374
10106b78:	d9002b15 	stw	r4,172(sp)
10106b7c:	003c9106 	br	10105dc4 <__alt_data_end+0xfffe5dc4>
10106b80:	e005883a 	mov	r2,fp
10106b84:	003e7906 	br	1010656c <__alt_data_end+0xfffe656c>
10106b88:	d9402917 	ldw	r5,164(sp)
10106b8c:	df002783 	ldbu	fp,158(sp)
10106b90:	dcc02d15 	stw	r19,180(sp)
10106b94:	d9402a15 	stw	r5,168(sp)
10106b98:	d9402e15 	stw	r5,184(sp)
10106b9c:	d8002915 	stw	zero,164(sp)
10106ba0:	d8003215 	stw	zero,200(sp)
10106ba4:	003a5d06 	br	1010551c <__alt_data_end+0xfffe551c>
10106ba8:	9080004c 	andi	r2,r18,1
10106bac:	0039883a 	mov	fp,zero
10106bb0:	10000426 	beq	r2,zero,10106bc4 <___vfprintf_internal_r+0x1ddc>
10106bb4:	00800c04 	movi	r2,48
10106bb8:	dc001dc4 	addi	r16,sp,119
10106bbc:	d8801dc5 	stb	r2,119(sp)
10106bc0:	003b8006 	br	101059c4 <__alt_data_end+0xfffe59c4>
10106bc4:	d8002e15 	stw	zero,184(sp)
10106bc8:	dc001e04 	addi	r16,sp,120
10106bcc:	003a4d06 	br	10105504 <__alt_data_end+0xfffe5504>
10106bd0:	8c7fff84 	addi	r17,r17,-2
10106bd4:	b5bfffc4 	addi	r22,r22,-1
10106bd8:	dd802615 	stw	r22,152(sp)
10106bdc:	dc4022c5 	stb	r17,139(sp)
10106be0:	b000bf16 	blt	r22,zero,10106ee0 <___vfprintf_internal_r+0x20f8>
10106be4:	00800ac4 	movi	r2,43
10106be8:	d8802305 	stb	r2,140(sp)
10106bec:	00800244 	movi	r2,9
10106bf0:	15807016 	blt	r2,r22,10106db4 <___vfprintf_internal_r+0x1fcc>
10106bf4:	00800c04 	movi	r2,48
10106bf8:	b5800c04 	addi	r22,r22,48
10106bfc:	d8802345 	stb	r2,141(sp)
10106c00:	dd802385 	stb	r22,142(sp)
10106c04:	d88023c4 	addi	r2,sp,143
10106c08:	df0022c4 	addi	fp,sp,139
10106c0c:	d8c03317 	ldw	r3,204(sp)
10106c10:	1739c83a 	sub	fp,r2,fp
10106c14:	d9003317 	ldw	r4,204(sp)
10106c18:	e0c7883a 	add	r3,fp,r3
10106c1c:	df003a15 	stw	fp,232(sp)
10106c20:	d8c02e15 	stw	r3,184(sp)
10106c24:	00800044 	movi	r2,1
10106c28:	1100b30e 	bge	r2,r4,10106ef8 <___vfprintf_internal_r+0x2110>
10106c2c:	d8c02e17 	ldw	r3,184(sp)
10106c30:	18c00044 	addi	r3,r3,1
10106c34:	d8c02e15 	stw	r3,184(sp)
10106c38:	1805883a 	mov	r2,r3
10106c3c:	1800ac16 	blt	r3,zero,10106ef0 <___vfprintf_internal_r+0x2108>
10106c40:	d8003215 	stw	zero,200(sp)
10106c44:	003e5d06 	br	101065bc <__alt_data_end+0xfffe65bc>
10106c48:	d9002c17 	ldw	r4,176(sp)
10106c4c:	d9801e04 	addi	r6,sp,120
10106c50:	b80b883a 	mov	r5,r23
10106c54:	010af2c0 	call	1010af2c <__sprint_r>
10106c58:	1039651e 	bne	r2,zero,101051f0 <__alt_data_end+0xfffe51f0>
10106c5c:	dc402617 	ldw	r17,152(sp)
10106c60:	d8c02017 	ldw	r3,128(sp)
10106c64:	d8801f17 	ldw	r2,124(sp)
10106c68:	da000404 	addi	r8,sp,16
10106c6c:	003ed606 	br	101067c8 <__alt_data_end+0xfffe67c8>
10106c70:	582b883a 	mov	r21,r11
10106c74:	d8002915 	stw	zero,164(sp)
10106c78:	0038bd06 	br	10104f70 <__alt_data_end+0xfffe4f70>
10106c7c:	d8802917 	ldw	r2,164(sp)
10106c80:	103e071e 	bne	r2,zero,101064a0 <__alt_data_end+0xfffe64a0>
10106c84:	dc002915 	stw	r16,164(sp)
10106c88:	003e0506 	br	101064a0 <__alt_data_end+0xfffe64a0>
10106c8c:	d9002917 	ldw	r4,164(sp)
10106c90:	20c00044 	addi	r3,r4,1
10106c94:	003e0f06 	br	101064d4 <__alt_data_end+0xfffe64d4>
10106c98:	01400184 	movi	r5,6
10106c9c:	d9402915 	stw	r5,164(sp)
10106ca0:	003dff06 	br	101064a0 <__alt_data_end+0xfffe64a0>
10106ca4:	d8802104 	addi	r2,sp,132
10106ca8:	d8800315 	stw	r2,12(sp)
10106cac:	d8802504 	addi	r2,sp,148
10106cb0:	d8800215 	stw	r2,8(sp)
10106cb4:	d8802604 	addi	r2,sp,152
10106cb8:	d8800115 	stw	r2,4(sp)
10106cbc:	d8802917 	ldw	r2,164(sp)
10106cc0:	d9403617 	ldw	r5,216(sp)
10106cc4:	d9002c17 	ldw	r4,176(sp)
10106cc8:	d8800015 	stw	r2,0(sp)
10106ccc:	01c000c4 	movi	r7,3
10106cd0:	980d883a 	mov	r6,r19
10106cd4:	da003d15 	stw	r8,244(sp)
10106cd8:	01076180 	call	10107618 <_dtoa_r>
10106cdc:	d8c02917 	ldw	r3,164(sp)
10106ce0:	da003d17 	ldw	r8,244(sp)
10106ce4:	1021883a 	mov	r16,r2
10106ce8:	10f9883a 	add	fp,r2,r3
10106cec:	81000007 	ldb	r4,0(r16)
10106cf0:	00800c04 	movi	r2,48
10106cf4:	20805e26 	beq	r4,r2,10106e70 <___vfprintf_internal_r+0x2088>
10106cf8:	d8c02617 	ldw	r3,152(sp)
10106cfc:	e0f9883a 	add	fp,fp,r3
10106d00:	003e0a06 	br	1010652c <__alt_data_end+0xfffe652c>
10106d04:	00c00b44 	movi	r3,45
10106d08:	24e0003c 	xorhi	r19,r4,32768
10106d0c:	d8c02a05 	stb	r3,168(sp)
10106d10:	003de906 	br	101064b8 <__alt_data_end+0xfffe64b8>
10106d14:	d8c03217 	ldw	r3,200(sp)
10106d18:	00c07a0e 	bge	zero,r3,10106f04 <___vfprintf_internal_r+0x211c>
10106d1c:	00800044 	movi	r2,1
10106d20:	d9003317 	ldw	r4,204(sp)
10106d24:	1105883a 	add	r2,r2,r4
10106d28:	d8802e15 	stw	r2,184(sp)
10106d2c:	10004e16 	blt	r2,zero,10106e68 <___vfprintf_internal_r+0x2080>
10106d30:	044019c4 	movi	r17,103
10106d34:	003e2106 	br	101065bc <__alt_data_end+0xfffe65bc>
10106d38:	d9002917 	ldw	r4,164(sp)
10106d3c:	d8802104 	addi	r2,sp,132
10106d40:	d8800315 	stw	r2,12(sp)
10106d44:	d9000015 	stw	r4,0(sp)
10106d48:	d8802504 	addi	r2,sp,148
10106d4c:	d9403617 	ldw	r5,216(sp)
10106d50:	d9002c17 	ldw	r4,176(sp)
10106d54:	d8800215 	stw	r2,8(sp)
10106d58:	d8802604 	addi	r2,sp,152
10106d5c:	d8800115 	stw	r2,4(sp)
10106d60:	01c000c4 	movi	r7,3
10106d64:	980d883a 	mov	r6,r19
10106d68:	da003d15 	stw	r8,244(sp)
10106d6c:	01076180 	call	10107618 <_dtoa_r>
10106d70:	d8c02917 	ldw	r3,164(sp)
10106d74:	da003d17 	ldw	r8,244(sp)
10106d78:	1021883a 	mov	r16,r2
10106d7c:	00801184 	movi	r2,70
10106d80:	80f9883a 	add	fp,r16,r3
10106d84:	88bfd926 	beq	r17,r2,10106cec <__alt_data_end+0xfffe6cec>
10106d88:	003de806 	br	1010652c <__alt_data_end+0xfffe652c>
10106d8c:	d9002917 	ldw	r4,164(sp)
10106d90:	00c04d0e 	bge	zero,r3,10106ec8 <___vfprintf_internal_r+0x20e0>
10106d94:	2000441e 	bne	r4,zero,10106ea8 <___vfprintf_internal_r+0x20c0>
10106d98:	9480004c 	andi	r18,r18,1
10106d9c:	9000421e 	bne	r18,zero,10106ea8 <___vfprintf_internal_r+0x20c0>
10106da0:	1805883a 	mov	r2,r3
10106da4:	18007016 	blt	r3,zero,10106f68 <___vfprintf_internal_r+0x2180>
10106da8:	d8c03217 	ldw	r3,200(sp)
10106dac:	d8c02e15 	stw	r3,184(sp)
10106db0:	003e0206 	br	101065bc <__alt_data_end+0xfffe65bc>
10106db4:	df0022c4 	addi	fp,sp,139
10106db8:	dc002915 	stw	r16,164(sp)
10106dbc:	4027883a 	mov	r19,r8
10106dc0:	e021883a 	mov	r16,fp
10106dc4:	b009883a 	mov	r4,r22
10106dc8:	01400284 	movi	r5,10
10106dcc:	01025cc0 	call	101025cc <__modsi3>
10106dd0:	10800c04 	addi	r2,r2,48
10106dd4:	843fffc4 	addi	r16,r16,-1
10106dd8:	b009883a 	mov	r4,r22
10106ddc:	01400284 	movi	r5,10
10106de0:	80800005 	stb	r2,0(r16)
10106de4:	01025480 	call	10102548 <__divsi3>
10106de8:	102d883a 	mov	r22,r2
10106dec:	00800244 	movi	r2,9
10106df0:	15bff416 	blt	r2,r22,10106dc4 <__alt_data_end+0xfffe6dc4>
10106df4:	9811883a 	mov	r8,r19
10106df8:	b0800c04 	addi	r2,r22,48
10106dfc:	8027883a 	mov	r19,r16
10106e00:	997fffc4 	addi	r5,r19,-1
10106e04:	98bfffc5 	stb	r2,-1(r19)
10106e08:	dc002917 	ldw	r16,164(sp)
10106e0c:	2f006a2e 	bgeu	r5,fp,10106fb8 <___vfprintf_internal_r+0x21d0>
10106e10:	d9c02384 	addi	r7,sp,142
10106e14:	3ccfc83a 	sub	r7,r7,r19
10106e18:	d9002344 	addi	r4,sp,141
10106e1c:	e1cf883a 	add	r7,fp,r7
10106e20:	00000106 	br	10106e28 <___vfprintf_internal_r+0x2040>
10106e24:	28800003 	ldbu	r2,0(r5)
10106e28:	20800005 	stb	r2,0(r4)
10106e2c:	21000044 	addi	r4,r4,1
10106e30:	29400044 	addi	r5,r5,1
10106e34:	393ffb1e 	bne	r7,r4,10106e24 <__alt_data_end+0xfffe6e24>
10106e38:	d8802304 	addi	r2,sp,140
10106e3c:	14c5c83a 	sub	r2,r2,r19
10106e40:	d8c02344 	addi	r3,sp,141
10106e44:	1885883a 	add	r2,r3,r2
10106e48:	003f7006 	br	10106c0c <__alt_data_end+0xfffe6c0c>
10106e4c:	0005883a 	mov	r2,zero
10106e50:	003f0f06 	br	10106a90 <__alt_data_end+0xfffe6a90>
10106e54:	d8c03217 	ldw	r3,200(sp)
10106e58:	18c00044 	addi	r3,r3,1
10106e5c:	d8c02e15 	stw	r3,184(sp)
10106e60:	1805883a 	mov	r2,r3
10106e64:	183fb20e 	bge	r3,zero,10106d30 <__alt_data_end+0xfffe6d30>
10106e68:	0005883a 	mov	r2,zero
10106e6c:	003fb006 	br	10106d30 <__alt_data_end+0xfffe6d30>
10106e70:	d9003617 	ldw	r4,216(sp)
10106e74:	000d883a 	mov	r6,zero
10106e78:	000f883a 	mov	r7,zero
10106e7c:	980b883a 	mov	r5,r19
10106e80:	d8c03c15 	stw	r3,240(sp)
10106e84:	da003d15 	stw	r8,244(sp)
10106e88:	010e5700 	call	1010e570 <__eqdf2>
10106e8c:	d8c03c17 	ldw	r3,240(sp)
10106e90:	da003d17 	ldw	r8,244(sp)
10106e94:	103f9826 	beq	r2,zero,10106cf8 <__alt_data_end+0xfffe6cf8>
10106e98:	00800044 	movi	r2,1
10106e9c:	10c7c83a 	sub	r3,r2,r3
10106ea0:	d8c02615 	stw	r3,152(sp)
10106ea4:	003f9506 	br	10106cfc <__alt_data_end+0xfffe6cfc>
10106ea8:	d9002917 	ldw	r4,164(sp)
10106eac:	d8c03217 	ldw	r3,200(sp)
10106eb0:	20800044 	addi	r2,r4,1
10106eb4:	1885883a 	add	r2,r3,r2
10106eb8:	d8802e15 	stw	r2,184(sp)
10106ebc:	103dbf0e 	bge	r2,zero,101065bc <__alt_data_end+0xfffe65bc>
10106ec0:	0005883a 	mov	r2,zero
10106ec4:	003dbd06 	br	101065bc <__alt_data_end+0xfffe65bc>
10106ec8:	2000211e 	bne	r4,zero,10106f50 <___vfprintf_internal_r+0x2168>
10106ecc:	9480004c 	andi	r18,r18,1
10106ed0:	90001f1e 	bne	r18,zero,10106f50 <___vfprintf_internal_r+0x2168>
10106ed4:	00800044 	movi	r2,1
10106ed8:	d8802e15 	stw	r2,184(sp)
10106edc:	003db706 	br	101065bc <__alt_data_end+0xfffe65bc>
10106ee0:	00800b44 	movi	r2,45
10106ee4:	05adc83a 	sub	r22,zero,r22
10106ee8:	d8802305 	stb	r2,140(sp)
10106eec:	003f3f06 	br	10106bec <__alt_data_end+0xfffe6bec>
10106ef0:	0005883a 	mov	r2,zero
10106ef4:	003f5206 	br	10106c40 <__alt_data_end+0xfffe6c40>
10106ef8:	90a4703a 	and	r18,r18,r2
10106efc:	903f4e26 	beq	r18,zero,10106c38 <__alt_data_end+0xfffe6c38>
10106f00:	003f4a06 	br	10106c2c <__alt_data_end+0xfffe6c2c>
10106f04:	00800084 	movi	r2,2
10106f08:	10c5c83a 	sub	r2,r2,r3
10106f0c:	003f8406 	br	10106d20 <__alt_data_end+0xfffe6d20>
10106f10:	d8802d17 	ldw	r2,180(sp)
10106f14:	d9002d17 	ldw	r4,180(sp)
10106f18:	ac400043 	ldbu	r17,1(r21)
10106f1c:	10800017 	ldw	r2,0(r2)
10106f20:	582b883a 	mov	r21,r11
10106f24:	d8802915 	stw	r2,164(sp)
10106f28:	20800104 	addi	r2,r4,4
10106f2c:	d9002917 	ldw	r4,164(sp)
10106f30:	d8802d15 	stw	r2,180(sp)
10106f34:	203e7a0e 	bge	r4,zero,10106920 <__alt_data_end+0xfffe6920>
10106f38:	8c403fcc 	andi	r17,r17,255
10106f3c:	00bfffc4 	movi	r2,-1
10106f40:	8c40201c 	xori	r17,r17,128
10106f44:	d8802915 	stw	r2,164(sp)
10106f48:	8c7fe004 	addi	r17,r17,-128
10106f4c:	00380706 	br	10104f6c <__alt_data_end+0xfffe4f6c>
10106f50:	d8c02917 	ldw	r3,164(sp)
10106f54:	18c00084 	addi	r3,r3,2
10106f58:	d8c02e15 	stw	r3,184(sp)
10106f5c:	1805883a 	mov	r2,r3
10106f60:	183d960e 	bge	r3,zero,101065bc <__alt_data_end+0xfffe65bc>
10106f64:	003fd606 	br	10106ec0 <__alt_data_end+0xfffe6ec0>
10106f68:	0005883a 	mov	r2,zero
10106f6c:	003f8e06 	br	10106da8 <__alt_data_end+0xfffe6da8>
10106f70:	9080004c 	andi	r2,r18,1
10106f74:	103f811e 	bne	r2,zero,10106d7c <__alt_data_end+0xfffe6d7c>
10106f78:	d8802117 	ldw	r2,132(sp)
10106f7c:	1405c83a 	sub	r2,r2,r16
10106f80:	d8803315 	stw	r2,204(sp)
10106f84:	b47ef326 	beq	r22,r17,10106b54 <__alt_data_end+0xfffe6b54>
10106f88:	dd802617 	ldw	r22,152(sp)
10106f8c:	003f1106 	br	10106bd4 <__alt_data_end+0xfffe6bd4>
10106f90:	d9c02785 	stb	r7,158(sp)
10106f94:	00390406 	br	101053a8 <__alt_data_end+0xfffe53a8>
10106f98:	d9c02785 	stb	r7,158(sp)
10106f9c:	0038d306 	br	101052ec <__alt_data_end+0xfffe52ec>
10106fa0:	d9c02785 	stb	r7,158(sp)
10106fa4:	003a6106 	br	1010592c <__alt_data_end+0xfffe592c>
10106fa8:	d9c02785 	stb	r7,158(sp)
10106fac:	003af806 	br	10105b90 <__alt_data_end+0xfffe5b90>
10106fb0:	0005883a 	mov	r2,zero
10106fb4:	003d7e06 	br	101065b0 <__alt_data_end+0xfffe65b0>
10106fb8:	d8802344 	addi	r2,sp,141
10106fbc:	003f1306 	br	10106c0c <__alt_data_end+0xfffe6c0c>
10106fc0:	d9c02785 	stb	r7,158(sp)
10106fc4:	00392306 	br	10105454 <__alt_data_end+0xfffe5454>
10106fc8:	d9c02785 	stb	r7,158(sp)
10106fcc:	003aa906 	br	10105a74 <__alt_data_end+0xfffe5a74>
10106fd0:	d9c02785 	stb	r7,158(sp)
10106fd4:	003a3d06 	br	101058cc <__alt_data_end+0xfffe58cc>
10106fd8:	d9c02785 	stb	r7,158(sp)
10106fdc:	003aca06 	br	10105b08 <__alt_data_end+0xfffe5b08>

10106fe0 <__vfprintf_internal>:
10106fe0:	00840474 	movhi	r2,4113
10106fe4:	10918804 	addi	r2,r2,17952
10106fe8:	300f883a 	mov	r7,r6
10106fec:	280d883a 	mov	r6,r5
10106ff0:	200b883a 	mov	r5,r4
10106ff4:	11000017 	ldw	r4,0(r2)
10106ff8:	0104de81 	jmpi	10104de8 <___vfprintf_internal_r>

10106ffc <__sbprintf>:
10106ffc:	2880030b 	ldhu	r2,12(r5)
10107000:	2ac01917 	ldw	r11,100(r5)
10107004:	2a80038b 	ldhu	r10,14(r5)
10107008:	2a400717 	ldw	r9,28(r5)
1010700c:	2a000917 	ldw	r8,36(r5)
10107010:	defee204 	addi	sp,sp,-1144
10107014:	00c10004 	movi	r3,1024
10107018:	dc011a15 	stw	r16,1128(sp)
1010701c:	10bfff4c 	andi	r2,r2,65533
10107020:	2821883a 	mov	r16,r5
10107024:	d8cb883a 	add	r5,sp,r3
10107028:	dc811c15 	stw	r18,1136(sp)
1010702c:	dc411b15 	stw	r17,1132(sp)
10107030:	dfc11d15 	stw	ra,1140(sp)
10107034:	2025883a 	mov	r18,r4
10107038:	d881030d 	sth	r2,1036(sp)
1010703c:	dac11915 	stw	r11,1124(sp)
10107040:	da81038d 	sth	r10,1038(sp)
10107044:	da410715 	stw	r9,1052(sp)
10107048:	da010915 	stw	r8,1060(sp)
1010704c:	dec10015 	stw	sp,1024(sp)
10107050:	dec10415 	stw	sp,1040(sp)
10107054:	d8c10215 	stw	r3,1032(sp)
10107058:	d8c10515 	stw	r3,1044(sp)
1010705c:	d8010615 	stw	zero,1048(sp)
10107060:	0104de80 	call	10104de8 <___vfprintf_internal_r>
10107064:	1023883a 	mov	r17,r2
10107068:	10000416 	blt	r2,zero,1010707c <__sbprintf+0x80>
1010706c:	d9410004 	addi	r5,sp,1024
10107070:	9009883a 	mov	r4,r18
10107074:	0102a1c0 	call	10102a1c <_fflush_r>
10107078:	10000d1e 	bne	r2,zero,101070b0 <__sbprintf+0xb4>
1010707c:	d881030b 	ldhu	r2,1036(sp)
10107080:	1080100c 	andi	r2,r2,64
10107084:	10000326 	beq	r2,zero,10107094 <__sbprintf+0x98>
10107088:	8080030b 	ldhu	r2,12(r16)
1010708c:	10801014 	ori	r2,r2,64
10107090:	8080030d 	sth	r2,12(r16)
10107094:	8805883a 	mov	r2,r17
10107098:	dfc11d17 	ldw	ra,1140(sp)
1010709c:	dc811c17 	ldw	r18,1136(sp)
101070a0:	dc411b17 	ldw	r17,1132(sp)
101070a4:	dc011a17 	ldw	r16,1128(sp)
101070a8:	dec11e04 	addi	sp,sp,1144
101070ac:	f800283a 	ret
101070b0:	047fffc4 	movi	r17,-1
101070b4:	003ff106 	br	1010707c <__alt_data_end+0xfffe707c>

101070b8 <__swbuf_r>:
101070b8:	defffb04 	addi	sp,sp,-20
101070bc:	dcc00315 	stw	r19,12(sp)
101070c0:	dc800215 	stw	r18,8(sp)
101070c4:	dc000015 	stw	r16,0(sp)
101070c8:	dfc00415 	stw	ra,16(sp)
101070cc:	dc400115 	stw	r17,4(sp)
101070d0:	2025883a 	mov	r18,r4
101070d4:	2827883a 	mov	r19,r5
101070d8:	3021883a 	mov	r16,r6
101070dc:	20000226 	beq	r4,zero,101070e8 <__swbuf_r+0x30>
101070e0:	20800e17 	ldw	r2,56(r4)
101070e4:	10004226 	beq	r2,zero,101071f0 <__swbuf_r+0x138>
101070e8:	80800617 	ldw	r2,24(r16)
101070ec:	8100030b 	ldhu	r4,12(r16)
101070f0:	80800215 	stw	r2,8(r16)
101070f4:	2080020c 	andi	r2,r4,8
101070f8:	10003626 	beq	r2,zero,101071d4 <__swbuf_r+0x11c>
101070fc:	80c00417 	ldw	r3,16(r16)
10107100:	18003426 	beq	r3,zero,101071d4 <__swbuf_r+0x11c>
10107104:	2088000c 	andi	r2,r4,8192
10107108:	9c403fcc 	andi	r17,r19,255
1010710c:	10001a26 	beq	r2,zero,10107178 <__swbuf_r+0xc0>
10107110:	80800017 	ldw	r2,0(r16)
10107114:	81000517 	ldw	r4,20(r16)
10107118:	10c7c83a 	sub	r3,r2,r3
1010711c:	1900200e 	bge	r3,r4,101071a0 <__swbuf_r+0xe8>
10107120:	18c00044 	addi	r3,r3,1
10107124:	81000217 	ldw	r4,8(r16)
10107128:	11400044 	addi	r5,r2,1
1010712c:	81400015 	stw	r5,0(r16)
10107130:	213fffc4 	addi	r4,r4,-1
10107134:	81000215 	stw	r4,8(r16)
10107138:	14c00005 	stb	r19,0(r2)
1010713c:	80800517 	ldw	r2,20(r16)
10107140:	10c01e26 	beq	r2,r3,101071bc <__swbuf_r+0x104>
10107144:	8080030b 	ldhu	r2,12(r16)
10107148:	1080004c 	andi	r2,r2,1
1010714c:	10000226 	beq	r2,zero,10107158 <__swbuf_r+0xa0>
10107150:	00800284 	movi	r2,10
10107154:	88801926 	beq	r17,r2,101071bc <__swbuf_r+0x104>
10107158:	8805883a 	mov	r2,r17
1010715c:	dfc00417 	ldw	ra,16(sp)
10107160:	dcc00317 	ldw	r19,12(sp)
10107164:	dc800217 	ldw	r18,8(sp)
10107168:	dc400117 	ldw	r17,4(sp)
1010716c:	dc000017 	ldw	r16,0(sp)
10107170:	dec00504 	addi	sp,sp,20
10107174:	f800283a 	ret
10107178:	81401917 	ldw	r5,100(r16)
1010717c:	00b7ffc4 	movi	r2,-8193
10107180:	21080014 	ori	r4,r4,8192
10107184:	2884703a 	and	r2,r5,r2
10107188:	80801915 	stw	r2,100(r16)
1010718c:	80800017 	ldw	r2,0(r16)
10107190:	8100030d 	sth	r4,12(r16)
10107194:	81000517 	ldw	r4,20(r16)
10107198:	10c7c83a 	sub	r3,r2,r3
1010719c:	193fe016 	blt	r3,r4,10107120 <__alt_data_end+0xfffe7120>
101071a0:	800b883a 	mov	r5,r16
101071a4:	9009883a 	mov	r4,r18
101071a8:	0102a1c0 	call	10102a1c <_fflush_r>
101071ac:	1000071e 	bne	r2,zero,101071cc <__swbuf_r+0x114>
101071b0:	80800017 	ldw	r2,0(r16)
101071b4:	00c00044 	movi	r3,1
101071b8:	003fda06 	br	10107124 <__alt_data_end+0xfffe7124>
101071bc:	800b883a 	mov	r5,r16
101071c0:	9009883a 	mov	r4,r18
101071c4:	0102a1c0 	call	10102a1c <_fflush_r>
101071c8:	103fe326 	beq	r2,zero,10107158 <__alt_data_end+0xfffe7158>
101071cc:	00bfffc4 	movi	r2,-1
101071d0:	003fe206 	br	1010715c <__alt_data_end+0xfffe715c>
101071d4:	800b883a 	mov	r5,r16
101071d8:	9009883a 	mov	r4,r18
101071dc:	01072700 	call	10107270 <__swsetup_r>
101071e0:	103ffa1e 	bne	r2,zero,101071cc <__alt_data_end+0xfffe71cc>
101071e4:	8100030b 	ldhu	r4,12(r16)
101071e8:	80c00417 	ldw	r3,16(r16)
101071ec:	003fc506 	br	10107104 <__alt_data_end+0xfffe7104>
101071f0:	0102df80 	call	10102df8 <__sinit>
101071f4:	003fbc06 	br	101070e8 <__alt_data_end+0xfffe70e8>

101071f8 <__swbuf>:
101071f8:	00840474 	movhi	r2,4113
101071fc:	10918804 	addi	r2,r2,17952
10107200:	280d883a 	mov	r6,r5
10107204:	200b883a 	mov	r5,r4
10107208:	11000017 	ldw	r4,0(r2)
1010720c:	01070b81 	jmpi	101070b8 <__swbuf_r>

10107210 <_write_r>:
10107210:	defffd04 	addi	sp,sp,-12
10107214:	2805883a 	mov	r2,r5
10107218:	dc000015 	stw	r16,0(sp)
1010721c:	04040474 	movhi	r16,4113
10107220:	dc400115 	stw	r17,4(sp)
10107224:	300b883a 	mov	r5,r6
10107228:	84188004 	addi	r16,r16,25088
1010722c:	2023883a 	mov	r17,r4
10107230:	380d883a 	mov	r6,r7
10107234:	1009883a 	mov	r4,r2
10107238:	dfc00215 	stw	ra,8(sp)
1010723c:	80000015 	stw	zero,0(r16)
10107240:	01105140 	call	10110514 <write>
10107244:	00ffffc4 	movi	r3,-1
10107248:	10c00526 	beq	r2,r3,10107260 <_write_r+0x50>
1010724c:	dfc00217 	ldw	ra,8(sp)
10107250:	dc400117 	ldw	r17,4(sp)
10107254:	dc000017 	ldw	r16,0(sp)
10107258:	dec00304 	addi	sp,sp,12
1010725c:	f800283a 	ret
10107260:	80c00017 	ldw	r3,0(r16)
10107264:	183ff926 	beq	r3,zero,1010724c <__alt_data_end+0xfffe724c>
10107268:	88c00015 	stw	r3,0(r17)
1010726c:	003ff706 	br	1010724c <__alt_data_end+0xfffe724c>

10107270 <__swsetup_r>:
10107270:	00840474 	movhi	r2,4113
10107274:	defffd04 	addi	sp,sp,-12
10107278:	10918804 	addi	r2,r2,17952
1010727c:	dc400115 	stw	r17,4(sp)
10107280:	2023883a 	mov	r17,r4
10107284:	11000017 	ldw	r4,0(r2)
10107288:	dc000015 	stw	r16,0(sp)
1010728c:	dfc00215 	stw	ra,8(sp)
10107290:	2821883a 	mov	r16,r5
10107294:	20000226 	beq	r4,zero,101072a0 <__swsetup_r+0x30>
10107298:	20800e17 	ldw	r2,56(r4)
1010729c:	10003126 	beq	r2,zero,10107364 <__swsetup_r+0xf4>
101072a0:	8080030b 	ldhu	r2,12(r16)
101072a4:	10c0020c 	andi	r3,r2,8
101072a8:	1009883a 	mov	r4,r2
101072ac:	18000f26 	beq	r3,zero,101072ec <__swsetup_r+0x7c>
101072b0:	80c00417 	ldw	r3,16(r16)
101072b4:	18001526 	beq	r3,zero,1010730c <__swsetup_r+0x9c>
101072b8:	1100004c 	andi	r4,r2,1
101072bc:	20001c1e 	bne	r4,zero,10107330 <__swsetup_r+0xc0>
101072c0:	1080008c 	andi	r2,r2,2
101072c4:	1000291e 	bne	r2,zero,1010736c <__swsetup_r+0xfc>
101072c8:	80800517 	ldw	r2,20(r16)
101072cc:	80800215 	stw	r2,8(r16)
101072d0:	18001c26 	beq	r3,zero,10107344 <__swsetup_r+0xd4>
101072d4:	0005883a 	mov	r2,zero
101072d8:	dfc00217 	ldw	ra,8(sp)
101072dc:	dc400117 	ldw	r17,4(sp)
101072e0:	dc000017 	ldw	r16,0(sp)
101072e4:	dec00304 	addi	sp,sp,12
101072e8:	f800283a 	ret
101072ec:	2080040c 	andi	r2,r4,16
101072f0:	10002e26 	beq	r2,zero,101073ac <__swsetup_r+0x13c>
101072f4:	2080010c 	andi	r2,r4,4
101072f8:	10001e1e 	bne	r2,zero,10107374 <__swsetup_r+0x104>
101072fc:	80c00417 	ldw	r3,16(r16)
10107300:	20800214 	ori	r2,r4,8
10107304:	8080030d 	sth	r2,12(r16)
10107308:	183feb1e 	bne	r3,zero,101072b8 <__alt_data_end+0xfffe72b8>
1010730c:	1100a00c 	andi	r4,r2,640
10107310:	01408004 	movi	r5,512
10107314:	217fe826 	beq	r4,r5,101072b8 <__alt_data_end+0xfffe72b8>
10107318:	800b883a 	mov	r5,r16
1010731c:	8809883a 	mov	r4,r17
10107320:	0103bd80 	call	10103bd8 <__smakebuf_r>
10107324:	8080030b 	ldhu	r2,12(r16)
10107328:	80c00417 	ldw	r3,16(r16)
1010732c:	003fe206 	br	101072b8 <__alt_data_end+0xfffe72b8>
10107330:	80800517 	ldw	r2,20(r16)
10107334:	80000215 	stw	zero,8(r16)
10107338:	0085c83a 	sub	r2,zero,r2
1010733c:	80800615 	stw	r2,24(r16)
10107340:	183fe41e 	bne	r3,zero,101072d4 <__alt_data_end+0xfffe72d4>
10107344:	80c0030b 	ldhu	r3,12(r16)
10107348:	0005883a 	mov	r2,zero
1010734c:	1900200c 	andi	r4,r3,128
10107350:	203fe126 	beq	r4,zero,101072d8 <__alt_data_end+0xfffe72d8>
10107354:	18c01014 	ori	r3,r3,64
10107358:	80c0030d 	sth	r3,12(r16)
1010735c:	00bfffc4 	movi	r2,-1
10107360:	003fdd06 	br	101072d8 <__alt_data_end+0xfffe72d8>
10107364:	0102df80 	call	10102df8 <__sinit>
10107368:	003fcd06 	br	101072a0 <__alt_data_end+0xfffe72a0>
1010736c:	0005883a 	mov	r2,zero
10107370:	003fd606 	br	101072cc <__alt_data_end+0xfffe72cc>
10107374:	81400c17 	ldw	r5,48(r16)
10107378:	28000626 	beq	r5,zero,10107394 <__swsetup_r+0x124>
1010737c:	80801004 	addi	r2,r16,64
10107380:	28800326 	beq	r5,r2,10107390 <__swsetup_r+0x120>
10107384:	8809883a 	mov	r4,r17
10107388:	01031640 	call	10103164 <_free_r>
1010738c:	8100030b 	ldhu	r4,12(r16)
10107390:	80000c15 	stw	zero,48(r16)
10107394:	80c00417 	ldw	r3,16(r16)
10107398:	00bff6c4 	movi	r2,-37
1010739c:	1108703a 	and	r4,r2,r4
101073a0:	80000115 	stw	zero,4(r16)
101073a4:	80c00015 	stw	r3,0(r16)
101073a8:	003fd506 	br	10107300 <__alt_data_end+0xfffe7300>
101073ac:	00800244 	movi	r2,9
101073b0:	88800015 	stw	r2,0(r17)
101073b4:	20801014 	ori	r2,r4,64
101073b8:	8080030d 	sth	r2,12(r16)
101073bc:	00bfffc4 	movi	r2,-1
101073c0:	003fc506 	br	101072d8 <__alt_data_end+0xfffe72d8>

101073c4 <_close_r>:
101073c4:	defffd04 	addi	sp,sp,-12
101073c8:	dc000015 	stw	r16,0(sp)
101073cc:	04040474 	movhi	r16,4113
101073d0:	dc400115 	stw	r17,4(sp)
101073d4:	84188004 	addi	r16,r16,25088
101073d8:	2023883a 	mov	r17,r4
101073dc:	2809883a 	mov	r4,r5
101073e0:	dfc00215 	stw	ra,8(sp)
101073e4:	80000015 	stw	zero,0(r16)
101073e8:	010fa800 	call	1010fa80 <close>
101073ec:	00ffffc4 	movi	r3,-1
101073f0:	10c00526 	beq	r2,r3,10107408 <_close_r+0x44>
101073f4:	dfc00217 	ldw	ra,8(sp)
101073f8:	dc400117 	ldw	r17,4(sp)
101073fc:	dc000017 	ldw	r16,0(sp)
10107400:	dec00304 	addi	sp,sp,12
10107404:	f800283a 	ret
10107408:	80c00017 	ldw	r3,0(r16)
1010740c:	183ff926 	beq	r3,zero,101073f4 <__alt_data_end+0xfffe73f4>
10107410:	88c00015 	stw	r3,0(r17)
10107414:	003ff706 	br	101073f4 <__alt_data_end+0xfffe73f4>

10107418 <quorem>:
10107418:	defff704 	addi	sp,sp,-36
1010741c:	dc800215 	stw	r18,8(sp)
10107420:	20800417 	ldw	r2,16(r4)
10107424:	2c800417 	ldw	r18,16(r5)
10107428:	dfc00815 	stw	ra,32(sp)
1010742c:	ddc00715 	stw	r23,28(sp)
10107430:	dd800615 	stw	r22,24(sp)
10107434:	dd400515 	stw	r21,20(sp)
10107438:	dd000415 	stw	r20,16(sp)
1010743c:	dcc00315 	stw	r19,12(sp)
10107440:	dc400115 	stw	r17,4(sp)
10107444:	dc000015 	stw	r16,0(sp)
10107448:	14807116 	blt	r2,r18,10107610 <quorem+0x1f8>
1010744c:	94bfffc4 	addi	r18,r18,-1
10107450:	94ad883a 	add	r22,r18,r18
10107454:	b5ad883a 	add	r22,r22,r22
10107458:	2c400504 	addi	r17,r5,20
1010745c:	8da9883a 	add	r20,r17,r22
10107460:	25400504 	addi	r21,r4,20
10107464:	282f883a 	mov	r23,r5
10107468:	adad883a 	add	r22,r21,r22
1010746c:	a1400017 	ldw	r5,0(r20)
10107470:	2021883a 	mov	r16,r4
10107474:	b1000017 	ldw	r4,0(r22)
10107478:	29400044 	addi	r5,r5,1
1010747c:	01026400 	call	10102640 <__udivsi3>
10107480:	1027883a 	mov	r19,r2
10107484:	10002c26 	beq	r2,zero,10107538 <quorem+0x120>
10107488:	a813883a 	mov	r9,r21
1010748c:	880b883a 	mov	r5,r17
10107490:	0009883a 	mov	r4,zero
10107494:	000d883a 	mov	r6,zero
10107498:	2a000017 	ldw	r8,0(r5)
1010749c:	49c00017 	ldw	r7,0(r9)
101074a0:	29400104 	addi	r5,r5,4
101074a4:	40bfffcc 	andi	r2,r8,65535
101074a8:	14c5383a 	mul	r2,r2,r19
101074ac:	4010d43a 	srli	r8,r8,16
101074b0:	38ffffcc 	andi	r3,r7,65535
101074b4:	1105883a 	add	r2,r2,r4
101074b8:	1008d43a 	srli	r4,r2,16
101074bc:	44d1383a 	mul	r8,r8,r19
101074c0:	198d883a 	add	r6,r3,r6
101074c4:	10ffffcc 	andi	r3,r2,65535
101074c8:	30c7c83a 	sub	r3,r6,r3
101074cc:	380ed43a 	srli	r7,r7,16
101074d0:	4105883a 	add	r2,r8,r4
101074d4:	180dd43a 	srai	r6,r3,16
101074d8:	113fffcc 	andi	r4,r2,65535
101074dc:	390fc83a 	sub	r7,r7,r4
101074e0:	398d883a 	add	r6,r7,r6
101074e4:	300e943a 	slli	r7,r6,16
101074e8:	18ffffcc 	andi	r3,r3,65535
101074ec:	1008d43a 	srli	r4,r2,16
101074f0:	38ceb03a 	or	r7,r7,r3
101074f4:	49c00015 	stw	r7,0(r9)
101074f8:	300dd43a 	srai	r6,r6,16
101074fc:	4a400104 	addi	r9,r9,4
10107500:	a17fe52e 	bgeu	r20,r5,10107498 <__alt_data_end+0xfffe7498>
10107504:	b0800017 	ldw	r2,0(r22)
10107508:	10000b1e 	bne	r2,zero,10107538 <quorem+0x120>
1010750c:	b0bfff04 	addi	r2,r22,-4
10107510:	a880082e 	bgeu	r21,r2,10107534 <quorem+0x11c>
10107514:	b0ffff17 	ldw	r3,-4(r22)
10107518:	18000326 	beq	r3,zero,10107528 <quorem+0x110>
1010751c:	00000506 	br	10107534 <quorem+0x11c>
10107520:	10c00017 	ldw	r3,0(r2)
10107524:	1800031e 	bne	r3,zero,10107534 <quorem+0x11c>
10107528:	10bfff04 	addi	r2,r2,-4
1010752c:	94bfffc4 	addi	r18,r18,-1
10107530:	a8bffb36 	bltu	r21,r2,10107520 <__alt_data_end+0xfffe7520>
10107534:	84800415 	stw	r18,16(r16)
10107538:	b80b883a 	mov	r5,r23
1010753c:	8009883a 	mov	r4,r16
10107540:	0109fe80 	call	10109fe8 <__mcmp>
10107544:	10002616 	blt	r2,zero,101075e0 <quorem+0x1c8>
10107548:	9cc00044 	addi	r19,r19,1
1010754c:	a805883a 	mov	r2,r21
10107550:	000b883a 	mov	r5,zero
10107554:	11000017 	ldw	r4,0(r2)
10107558:	89800017 	ldw	r6,0(r17)
1010755c:	10800104 	addi	r2,r2,4
10107560:	20ffffcc 	andi	r3,r4,65535
10107564:	194b883a 	add	r5,r3,r5
10107568:	30ffffcc 	andi	r3,r6,65535
1010756c:	28c7c83a 	sub	r3,r5,r3
10107570:	300cd43a 	srli	r6,r6,16
10107574:	2008d43a 	srli	r4,r4,16
10107578:	180bd43a 	srai	r5,r3,16
1010757c:	18ffffcc 	andi	r3,r3,65535
10107580:	2189c83a 	sub	r4,r4,r6
10107584:	2149883a 	add	r4,r4,r5
10107588:	200c943a 	slli	r6,r4,16
1010758c:	8c400104 	addi	r17,r17,4
10107590:	200bd43a 	srai	r5,r4,16
10107594:	30c6b03a 	or	r3,r6,r3
10107598:	10ffff15 	stw	r3,-4(r2)
1010759c:	a47fed2e 	bgeu	r20,r17,10107554 <__alt_data_end+0xfffe7554>
101075a0:	9485883a 	add	r2,r18,r18
101075a4:	1085883a 	add	r2,r2,r2
101075a8:	a887883a 	add	r3,r21,r2
101075ac:	18800017 	ldw	r2,0(r3)
101075b0:	10000b1e 	bne	r2,zero,101075e0 <quorem+0x1c8>
101075b4:	18bfff04 	addi	r2,r3,-4
101075b8:	a880082e 	bgeu	r21,r2,101075dc <quorem+0x1c4>
101075bc:	18ffff17 	ldw	r3,-4(r3)
101075c0:	18000326 	beq	r3,zero,101075d0 <quorem+0x1b8>
101075c4:	00000506 	br	101075dc <quorem+0x1c4>
101075c8:	10c00017 	ldw	r3,0(r2)
101075cc:	1800031e 	bne	r3,zero,101075dc <quorem+0x1c4>
101075d0:	10bfff04 	addi	r2,r2,-4
101075d4:	94bfffc4 	addi	r18,r18,-1
101075d8:	a8bffb36 	bltu	r21,r2,101075c8 <__alt_data_end+0xfffe75c8>
101075dc:	84800415 	stw	r18,16(r16)
101075e0:	9805883a 	mov	r2,r19
101075e4:	dfc00817 	ldw	ra,32(sp)
101075e8:	ddc00717 	ldw	r23,28(sp)
101075ec:	dd800617 	ldw	r22,24(sp)
101075f0:	dd400517 	ldw	r21,20(sp)
101075f4:	dd000417 	ldw	r20,16(sp)
101075f8:	dcc00317 	ldw	r19,12(sp)
101075fc:	dc800217 	ldw	r18,8(sp)
10107600:	dc400117 	ldw	r17,4(sp)
10107604:	dc000017 	ldw	r16,0(sp)
10107608:	dec00904 	addi	sp,sp,36
1010760c:	f800283a 	ret
10107610:	0005883a 	mov	r2,zero
10107614:	003ff306 	br	101075e4 <__alt_data_end+0xfffe75e4>

10107618 <_dtoa_r>:
10107618:	20801017 	ldw	r2,64(r4)
1010761c:	deffde04 	addi	sp,sp,-136
10107620:	df002015 	stw	fp,128(sp)
10107624:	dcc01b15 	stw	r19,108(sp)
10107628:	dc801a15 	stw	r18,104(sp)
1010762c:	dc401915 	stw	r17,100(sp)
10107630:	dc001815 	stw	r16,96(sp)
10107634:	dfc02115 	stw	ra,132(sp)
10107638:	ddc01f15 	stw	r23,124(sp)
1010763c:	dd801e15 	stw	r22,120(sp)
10107640:	dd401d15 	stw	r21,116(sp)
10107644:	dd001c15 	stw	r20,112(sp)
10107648:	d9c00315 	stw	r7,12(sp)
1010764c:	2039883a 	mov	fp,r4
10107650:	3023883a 	mov	r17,r6
10107654:	2825883a 	mov	r18,r5
10107658:	dc002417 	ldw	r16,144(sp)
1010765c:	3027883a 	mov	r19,r6
10107660:	10000826 	beq	r2,zero,10107684 <_dtoa_r+0x6c>
10107664:	21801117 	ldw	r6,68(r4)
10107668:	00c00044 	movi	r3,1
1010766c:	100b883a 	mov	r5,r2
10107670:	1986983a 	sll	r3,r3,r6
10107674:	11800115 	stw	r6,4(r2)
10107678:	10c00215 	stw	r3,8(r2)
1010767c:	01097c80 	call	101097c8 <_Bfree>
10107680:	e0001015 	stw	zero,64(fp)
10107684:	88002e16 	blt	r17,zero,10107740 <_dtoa_r+0x128>
10107688:	80000015 	stw	zero,0(r16)
1010768c:	889ffc2c 	andhi	r2,r17,32752
10107690:	00dffc34 	movhi	r3,32752
10107694:	10c01c26 	beq	r2,r3,10107708 <_dtoa_r+0xf0>
10107698:	000d883a 	mov	r6,zero
1010769c:	000f883a 	mov	r7,zero
101076a0:	9009883a 	mov	r4,r18
101076a4:	980b883a 	mov	r5,r19
101076a8:	010e5700 	call	1010e570 <__eqdf2>
101076ac:	10002b1e 	bne	r2,zero,1010775c <_dtoa_r+0x144>
101076b0:	d9c02317 	ldw	r7,140(sp)
101076b4:	00800044 	movi	r2,1
101076b8:	38800015 	stw	r2,0(r7)
101076bc:	d8802517 	ldw	r2,148(sp)
101076c0:	10019e26 	beq	r2,zero,10107d3c <_dtoa_r+0x724>
101076c4:	d8c02517 	ldw	r3,148(sp)
101076c8:	00840474 	movhi	r2,4113
101076cc:	108a2144 	addi	r2,r2,10373
101076d0:	18800015 	stw	r2,0(r3)
101076d4:	10bfffc4 	addi	r2,r2,-1
101076d8:	dfc02117 	ldw	ra,132(sp)
101076dc:	df002017 	ldw	fp,128(sp)
101076e0:	ddc01f17 	ldw	r23,124(sp)
101076e4:	dd801e17 	ldw	r22,120(sp)
101076e8:	dd401d17 	ldw	r21,116(sp)
101076ec:	dd001c17 	ldw	r20,112(sp)
101076f0:	dcc01b17 	ldw	r19,108(sp)
101076f4:	dc801a17 	ldw	r18,104(sp)
101076f8:	dc401917 	ldw	r17,100(sp)
101076fc:	dc001817 	ldw	r16,96(sp)
10107700:	dec02204 	addi	sp,sp,136
10107704:	f800283a 	ret
10107708:	d8c02317 	ldw	r3,140(sp)
1010770c:	0089c3c4 	movi	r2,9999
10107710:	18800015 	stw	r2,0(r3)
10107714:	90017726 	beq	r18,zero,10107cf4 <_dtoa_r+0x6dc>
10107718:	00840474 	movhi	r2,4113
1010771c:	108a2d04 	addi	r2,r2,10420
10107720:	d9002517 	ldw	r4,148(sp)
10107724:	203fec26 	beq	r4,zero,101076d8 <__alt_data_end+0xfffe76d8>
10107728:	10c000c7 	ldb	r3,3(r2)
1010772c:	1801781e 	bne	r3,zero,10107d10 <_dtoa_r+0x6f8>
10107730:	10c000c4 	addi	r3,r2,3
10107734:	d9802517 	ldw	r6,148(sp)
10107738:	30c00015 	stw	r3,0(r6)
1010773c:	003fe606 	br	101076d8 <__alt_data_end+0xfffe76d8>
10107740:	04e00034 	movhi	r19,32768
10107744:	9cffffc4 	addi	r19,r19,-1
10107748:	00800044 	movi	r2,1
1010774c:	8ce6703a 	and	r19,r17,r19
10107750:	80800015 	stw	r2,0(r16)
10107754:	9823883a 	mov	r17,r19
10107758:	003fcc06 	br	1010768c <__alt_data_end+0xfffe768c>
1010775c:	d8800204 	addi	r2,sp,8
10107760:	d8800015 	stw	r2,0(sp)
10107764:	d9c00104 	addi	r7,sp,4
10107768:	900b883a 	mov	r5,r18
1010776c:	980d883a 	mov	r6,r19
10107770:	e009883a 	mov	r4,fp
10107774:	8820d53a 	srli	r16,r17,20
10107778:	010a3b40 	call	1010a3b4 <__d2b>
1010777c:	d8800915 	stw	r2,36(sp)
10107780:	8001651e 	bne	r16,zero,10107d18 <_dtoa_r+0x700>
10107784:	dd800217 	ldw	r22,8(sp)
10107788:	dc000117 	ldw	r16,4(sp)
1010778c:	00800804 	movi	r2,32
10107790:	b421883a 	add	r16,r22,r16
10107794:	80c10c84 	addi	r3,r16,1074
10107798:	10c2d10e 	bge	r2,r3,101082e0 <_dtoa_r+0xcc8>
1010779c:	00801004 	movi	r2,64
101077a0:	81010484 	addi	r4,r16,1042
101077a4:	10c7c83a 	sub	r3,r2,r3
101077a8:	9108d83a 	srl	r4,r18,r4
101077ac:	88e2983a 	sll	r17,r17,r3
101077b0:	2448b03a 	or	r4,r4,r17
101077b4:	010f9380 	call	1010f938 <__floatunsidf>
101077b8:	017f8434 	movhi	r5,65040
101077bc:	01800044 	movi	r6,1
101077c0:	1009883a 	mov	r4,r2
101077c4:	194b883a 	add	r5,r3,r5
101077c8:	843fffc4 	addi	r16,r16,-1
101077cc:	d9801115 	stw	r6,68(sp)
101077d0:	000d883a 	mov	r6,zero
101077d4:	01cffe34 	movhi	r7,16376
101077d8:	010eee00 	call	1010eee0 <__subdf3>
101077dc:	0198dbf4 	movhi	r6,25455
101077e0:	01cff4f4 	movhi	r7,16339
101077e4:	3190d844 	addi	r6,r6,17249
101077e8:	39e1e9c4 	addi	r7,r7,-30809
101077ec:	1009883a 	mov	r4,r2
101077f0:	180b883a 	mov	r5,r3
101077f4:	010e7c80 	call	1010e7c8 <__muldf3>
101077f8:	01a2d874 	movhi	r6,35681
101077fc:	01cff1f4 	movhi	r7,16327
10107800:	31b22cc4 	addi	r6,r6,-14157
10107804:	39e28a04 	addi	r7,r7,-30168
10107808:	180b883a 	mov	r5,r3
1010780c:	1009883a 	mov	r4,r2
10107810:	010d3dc0 	call	1010d3dc <__adddf3>
10107814:	8009883a 	mov	r4,r16
10107818:	1029883a 	mov	r20,r2
1010781c:	1823883a 	mov	r17,r3
10107820:	010f85c0 	call	1010f85c <__floatsidf>
10107824:	019427f4 	movhi	r6,20639
10107828:	01cff4f4 	movhi	r7,16339
1010782c:	319e7ec4 	addi	r6,r6,31227
10107830:	39d104c4 	addi	r7,r7,17427
10107834:	1009883a 	mov	r4,r2
10107838:	180b883a 	mov	r5,r3
1010783c:	010e7c80 	call	1010e7c8 <__muldf3>
10107840:	100d883a 	mov	r6,r2
10107844:	180f883a 	mov	r7,r3
10107848:	a009883a 	mov	r4,r20
1010784c:	880b883a 	mov	r5,r17
10107850:	010d3dc0 	call	1010d3dc <__adddf3>
10107854:	1009883a 	mov	r4,r2
10107858:	180b883a 	mov	r5,r3
1010785c:	1029883a 	mov	r20,r2
10107860:	1823883a 	mov	r17,r3
10107864:	010f7dc0 	call	1010f7dc <__fixdfsi>
10107868:	000d883a 	mov	r6,zero
1010786c:	000f883a 	mov	r7,zero
10107870:	a009883a 	mov	r4,r20
10107874:	880b883a 	mov	r5,r17
10107878:	d8800515 	stw	r2,20(sp)
1010787c:	010e6d40 	call	1010e6d4 <__ledf2>
10107880:	10028716 	blt	r2,zero,101082a0 <_dtoa_r+0xc88>
10107884:	d8c00517 	ldw	r3,20(sp)
10107888:	00800584 	movi	r2,22
1010788c:	10c27536 	bltu	r2,r3,10108264 <_dtoa_r+0xc4c>
10107890:	180490fa 	slli	r2,r3,3
10107894:	00c40474 	movhi	r3,4113
10107898:	18ca4804 	addi	r3,r3,10528
1010789c:	1885883a 	add	r2,r3,r2
101078a0:	11000017 	ldw	r4,0(r2)
101078a4:	11400117 	ldw	r5,4(r2)
101078a8:	900d883a 	mov	r6,r18
101078ac:	980f883a 	mov	r7,r19
101078b0:	010e5f80 	call	1010e5f8 <__gedf2>
101078b4:	00828d0e 	bge	zero,r2,101082ec <_dtoa_r+0xcd4>
101078b8:	d9000517 	ldw	r4,20(sp)
101078bc:	d8000e15 	stw	zero,56(sp)
101078c0:	213fffc4 	addi	r4,r4,-1
101078c4:	d9000515 	stw	r4,20(sp)
101078c8:	b42dc83a 	sub	r22,r22,r16
101078cc:	b5bfffc4 	addi	r22,r22,-1
101078d0:	b0026f16 	blt	r22,zero,10108290 <_dtoa_r+0xc78>
101078d4:	d8000815 	stw	zero,32(sp)
101078d8:	d9c00517 	ldw	r7,20(sp)
101078dc:	38026416 	blt	r7,zero,10108270 <_dtoa_r+0xc58>
101078e0:	b1ed883a 	add	r22,r22,r7
101078e4:	d9c00d15 	stw	r7,52(sp)
101078e8:	d8000a15 	stw	zero,40(sp)
101078ec:	d9800317 	ldw	r6,12(sp)
101078f0:	00800244 	movi	r2,9
101078f4:	11811436 	bltu	r2,r6,10107d48 <_dtoa_r+0x730>
101078f8:	00800144 	movi	r2,5
101078fc:	1184e10e 	bge	r2,r6,10108c84 <_dtoa_r+0x166c>
10107900:	31bfff04 	addi	r6,r6,-4
10107904:	d9800315 	stw	r6,12(sp)
10107908:	0023883a 	mov	r17,zero
1010790c:	d9800317 	ldw	r6,12(sp)
10107910:	008000c4 	movi	r2,3
10107914:	30836726 	beq	r6,r2,101086b4 <_dtoa_r+0x109c>
10107918:	1183410e 	bge	r2,r6,10108620 <_dtoa_r+0x1008>
1010791c:	d9c00317 	ldw	r7,12(sp)
10107920:	00800104 	movi	r2,4
10107924:	38827c26 	beq	r7,r2,10108318 <_dtoa_r+0xd00>
10107928:	00800144 	movi	r2,5
1010792c:	3884c41e 	bne	r7,r2,10108c40 <_dtoa_r+0x1628>
10107930:	00800044 	movi	r2,1
10107934:	d8800b15 	stw	r2,44(sp)
10107938:	d8c00517 	ldw	r3,20(sp)
1010793c:	d9002217 	ldw	r4,136(sp)
10107940:	1907883a 	add	r3,r3,r4
10107944:	19800044 	addi	r6,r3,1
10107948:	d8c00c15 	stw	r3,48(sp)
1010794c:	d9800615 	stw	r6,24(sp)
10107950:	0183a40e 	bge	zero,r6,101087e4 <_dtoa_r+0x11cc>
10107954:	d9800617 	ldw	r6,24(sp)
10107958:	3021883a 	mov	r16,r6
1010795c:	e0001115 	stw	zero,68(fp)
10107960:	008005c4 	movi	r2,23
10107964:	1184c92e 	bgeu	r2,r6,10108c8c <_dtoa_r+0x1674>
10107968:	00c00044 	movi	r3,1
1010796c:	00800104 	movi	r2,4
10107970:	1085883a 	add	r2,r2,r2
10107974:	11000504 	addi	r4,r2,20
10107978:	180b883a 	mov	r5,r3
1010797c:	18c00044 	addi	r3,r3,1
10107980:	313ffb2e 	bgeu	r6,r4,10107970 <__alt_data_end+0xfffe7970>
10107984:	e1401115 	stw	r5,68(fp)
10107988:	e009883a 	mov	r4,fp
1010798c:	01097200 	call	10109720 <_Balloc>
10107990:	d8800715 	stw	r2,28(sp)
10107994:	e0801015 	stw	r2,64(fp)
10107998:	00800384 	movi	r2,14
1010799c:	1400f736 	bltu	r2,r16,10107d7c <_dtoa_r+0x764>
101079a0:	8800f626 	beq	r17,zero,10107d7c <_dtoa_r+0x764>
101079a4:	d9c00517 	ldw	r7,20(sp)
101079a8:	01c39a0e 	bge	zero,r7,10108814 <_dtoa_r+0x11fc>
101079ac:	388003cc 	andi	r2,r7,15
101079b0:	100490fa 	slli	r2,r2,3
101079b4:	382bd13a 	srai	r21,r7,4
101079b8:	00c40474 	movhi	r3,4113
101079bc:	18ca4804 	addi	r3,r3,10528
101079c0:	1885883a 	add	r2,r3,r2
101079c4:	a8c0040c 	andi	r3,r21,16
101079c8:	12400017 	ldw	r9,0(r2)
101079cc:	12000117 	ldw	r8,4(r2)
101079d0:	18037926 	beq	r3,zero,101087b8 <_dtoa_r+0x11a0>
101079d4:	00840474 	movhi	r2,4113
101079d8:	108a3e04 	addi	r2,r2,10488
101079dc:	11800817 	ldw	r6,32(r2)
101079e0:	11c00917 	ldw	r7,36(r2)
101079e4:	9009883a 	mov	r4,r18
101079e8:	980b883a 	mov	r5,r19
101079ec:	da001715 	stw	r8,92(sp)
101079f0:	da401615 	stw	r9,88(sp)
101079f4:	010dc880 	call	1010dc88 <__divdf3>
101079f8:	da001717 	ldw	r8,92(sp)
101079fc:	da401617 	ldw	r9,88(sp)
10107a00:	ad4003cc 	andi	r21,r21,15
10107a04:	040000c4 	movi	r16,3
10107a08:	1023883a 	mov	r17,r2
10107a0c:	1829883a 	mov	r20,r3
10107a10:	a8001126 	beq	r21,zero,10107a58 <_dtoa_r+0x440>
10107a14:	05c40474 	movhi	r23,4113
10107a18:	bdca3e04 	addi	r23,r23,10488
10107a1c:	4805883a 	mov	r2,r9
10107a20:	4007883a 	mov	r3,r8
10107a24:	a980004c 	andi	r6,r21,1
10107a28:	1009883a 	mov	r4,r2
10107a2c:	a82bd07a 	srai	r21,r21,1
10107a30:	180b883a 	mov	r5,r3
10107a34:	30000426 	beq	r6,zero,10107a48 <_dtoa_r+0x430>
10107a38:	b9800017 	ldw	r6,0(r23)
10107a3c:	b9c00117 	ldw	r7,4(r23)
10107a40:	84000044 	addi	r16,r16,1
10107a44:	010e7c80 	call	1010e7c8 <__muldf3>
10107a48:	bdc00204 	addi	r23,r23,8
10107a4c:	a83ff51e 	bne	r21,zero,10107a24 <__alt_data_end+0xfffe7a24>
10107a50:	1013883a 	mov	r9,r2
10107a54:	1811883a 	mov	r8,r3
10107a58:	480d883a 	mov	r6,r9
10107a5c:	400f883a 	mov	r7,r8
10107a60:	8809883a 	mov	r4,r17
10107a64:	a00b883a 	mov	r5,r20
10107a68:	010dc880 	call	1010dc88 <__divdf3>
10107a6c:	d8800f15 	stw	r2,60(sp)
10107a70:	d8c01015 	stw	r3,64(sp)
10107a74:	d8c00e17 	ldw	r3,56(sp)
10107a78:	18000626 	beq	r3,zero,10107a94 <_dtoa_r+0x47c>
10107a7c:	d9000f17 	ldw	r4,60(sp)
10107a80:	d9401017 	ldw	r5,64(sp)
10107a84:	000d883a 	mov	r6,zero
10107a88:	01cffc34 	movhi	r7,16368
10107a8c:	010e6d40 	call	1010e6d4 <__ledf2>
10107a90:	10040b16 	blt	r2,zero,10108ac0 <_dtoa_r+0x14a8>
10107a94:	8009883a 	mov	r4,r16
10107a98:	010f85c0 	call	1010f85c <__floatsidf>
10107a9c:	d9800f17 	ldw	r6,60(sp)
10107aa0:	d9c01017 	ldw	r7,64(sp)
10107aa4:	1009883a 	mov	r4,r2
10107aa8:	180b883a 	mov	r5,r3
10107aac:	010e7c80 	call	1010e7c8 <__muldf3>
10107ab0:	000d883a 	mov	r6,zero
10107ab4:	01d00734 	movhi	r7,16412
10107ab8:	1009883a 	mov	r4,r2
10107abc:	180b883a 	mov	r5,r3
10107ac0:	010d3dc0 	call	1010d3dc <__adddf3>
10107ac4:	1021883a 	mov	r16,r2
10107ac8:	d8800617 	ldw	r2,24(sp)
10107acc:	047f3034 	movhi	r17,64704
10107ad0:	1c63883a 	add	r17,r3,r17
10107ad4:	10031826 	beq	r2,zero,10108738 <_dtoa_r+0x1120>
10107ad8:	d8c00517 	ldw	r3,20(sp)
10107adc:	db000617 	ldw	r12,24(sp)
10107ae0:	d8c01315 	stw	r3,76(sp)
10107ae4:	d9000b17 	ldw	r4,44(sp)
10107ae8:	20038f26 	beq	r4,zero,10108928 <_dtoa_r+0x1310>
10107aec:	60bfffc4 	addi	r2,r12,-1
10107af0:	100490fa 	slli	r2,r2,3
10107af4:	00c40474 	movhi	r3,4113
10107af8:	18ca4804 	addi	r3,r3,10528
10107afc:	1885883a 	add	r2,r3,r2
10107b00:	11800017 	ldw	r6,0(r2)
10107b04:	11c00117 	ldw	r7,4(r2)
10107b08:	d8800717 	ldw	r2,28(sp)
10107b0c:	0009883a 	mov	r4,zero
10107b10:	014ff834 	movhi	r5,16352
10107b14:	db001615 	stw	r12,88(sp)
10107b18:	15c00044 	addi	r23,r2,1
10107b1c:	010dc880 	call	1010dc88 <__divdf3>
10107b20:	800d883a 	mov	r6,r16
10107b24:	880f883a 	mov	r7,r17
10107b28:	1009883a 	mov	r4,r2
10107b2c:	180b883a 	mov	r5,r3
10107b30:	010eee00 	call	1010eee0 <__subdf3>
10107b34:	d9401017 	ldw	r5,64(sp)
10107b38:	d9000f17 	ldw	r4,60(sp)
10107b3c:	102b883a 	mov	r21,r2
10107b40:	d8c01215 	stw	r3,72(sp)
10107b44:	010f7dc0 	call	1010f7dc <__fixdfsi>
10107b48:	1009883a 	mov	r4,r2
10107b4c:	1029883a 	mov	r20,r2
10107b50:	010f85c0 	call	1010f85c <__floatsidf>
10107b54:	d9000f17 	ldw	r4,60(sp)
10107b58:	d9401017 	ldw	r5,64(sp)
10107b5c:	100d883a 	mov	r6,r2
10107b60:	180f883a 	mov	r7,r3
10107b64:	010eee00 	call	1010eee0 <__subdf3>
10107b68:	1823883a 	mov	r17,r3
10107b6c:	d8c00717 	ldw	r3,28(sp)
10107b70:	d9401217 	ldw	r5,72(sp)
10107b74:	a2000c04 	addi	r8,r20,48
10107b78:	1021883a 	mov	r16,r2
10107b7c:	1a000005 	stb	r8,0(r3)
10107b80:	800d883a 	mov	r6,r16
10107b84:	880f883a 	mov	r7,r17
10107b88:	a809883a 	mov	r4,r21
10107b8c:	4029883a 	mov	r20,r8
10107b90:	010e5f80 	call	1010e5f8 <__gedf2>
10107b94:	00841d16 	blt	zero,r2,10108c0c <_dtoa_r+0x15f4>
10107b98:	800d883a 	mov	r6,r16
10107b9c:	880f883a 	mov	r7,r17
10107ba0:	0009883a 	mov	r4,zero
10107ba4:	014ffc34 	movhi	r5,16368
10107ba8:	010eee00 	call	1010eee0 <__subdf3>
10107bac:	d9401217 	ldw	r5,72(sp)
10107bb0:	100d883a 	mov	r6,r2
10107bb4:	180f883a 	mov	r7,r3
10107bb8:	a809883a 	mov	r4,r21
10107bbc:	010e5f80 	call	1010e5f8 <__gedf2>
10107bc0:	db001617 	ldw	r12,88(sp)
10107bc4:	00840e16 	blt	zero,r2,10108c00 <_dtoa_r+0x15e8>
10107bc8:	00800044 	movi	r2,1
10107bcc:	13006b0e 	bge	r2,r12,10107d7c <_dtoa_r+0x764>
10107bd0:	d9000717 	ldw	r4,28(sp)
10107bd4:	dd800f15 	stw	r22,60(sp)
10107bd8:	dcc01015 	stw	r19,64(sp)
10107bdc:	2319883a 	add	r12,r4,r12
10107be0:	dcc01217 	ldw	r19,72(sp)
10107be4:	602d883a 	mov	r22,r12
10107be8:	dc801215 	stw	r18,72(sp)
10107bec:	b825883a 	mov	r18,r23
10107bf0:	00000906 	br	10107c18 <_dtoa_r+0x600>
10107bf4:	010eee00 	call	1010eee0 <__subdf3>
10107bf8:	a80d883a 	mov	r6,r21
10107bfc:	980f883a 	mov	r7,r19
10107c00:	1009883a 	mov	r4,r2
10107c04:	180b883a 	mov	r5,r3
10107c08:	010e6d40 	call	1010e6d4 <__ledf2>
10107c0c:	1003e816 	blt	r2,zero,10108bb0 <_dtoa_r+0x1598>
10107c10:	b825883a 	mov	r18,r23
10107c14:	bd83e926 	beq	r23,r22,10108bbc <_dtoa_r+0x15a4>
10107c18:	a809883a 	mov	r4,r21
10107c1c:	980b883a 	mov	r5,r19
10107c20:	000d883a 	mov	r6,zero
10107c24:	01d00934 	movhi	r7,16420
10107c28:	010e7c80 	call	1010e7c8 <__muldf3>
10107c2c:	000d883a 	mov	r6,zero
10107c30:	01d00934 	movhi	r7,16420
10107c34:	8009883a 	mov	r4,r16
10107c38:	880b883a 	mov	r5,r17
10107c3c:	102b883a 	mov	r21,r2
10107c40:	1827883a 	mov	r19,r3
10107c44:	010e7c80 	call	1010e7c8 <__muldf3>
10107c48:	180b883a 	mov	r5,r3
10107c4c:	1009883a 	mov	r4,r2
10107c50:	1821883a 	mov	r16,r3
10107c54:	1023883a 	mov	r17,r2
10107c58:	010f7dc0 	call	1010f7dc <__fixdfsi>
10107c5c:	1009883a 	mov	r4,r2
10107c60:	1029883a 	mov	r20,r2
10107c64:	010f85c0 	call	1010f85c <__floatsidf>
10107c68:	8809883a 	mov	r4,r17
10107c6c:	800b883a 	mov	r5,r16
10107c70:	100d883a 	mov	r6,r2
10107c74:	180f883a 	mov	r7,r3
10107c78:	010eee00 	call	1010eee0 <__subdf3>
10107c7c:	a5000c04 	addi	r20,r20,48
10107c80:	a80d883a 	mov	r6,r21
10107c84:	980f883a 	mov	r7,r19
10107c88:	1009883a 	mov	r4,r2
10107c8c:	180b883a 	mov	r5,r3
10107c90:	95000005 	stb	r20,0(r18)
10107c94:	1021883a 	mov	r16,r2
10107c98:	1823883a 	mov	r17,r3
10107c9c:	010e6d40 	call	1010e6d4 <__ledf2>
10107ca0:	bdc00044 	addi	r23,r23,1
10107ca4:	800d883a 	mov	r6,r16
10107ca8:	880f883a 	mov	r7,r17
10107cac:	0009883a 	mov	r4,zero
10107cb0:	014ffc34 	movhi	r5,16368
10107cb4:	103fcf0e 	bge	r2,zero,10107bf4 <__alt_data_end+0xfffe7bf4>
10107cb8:	d8c01317 	ldw	r3,76(sp)
10107cbc:	d8c00515 	stw	r3,20(sp)
10107cc0:	d9400917 	ldw	r5,36(sp)
10107cc4:	e009883a 	mov	r4,fp
10107cc8:	01097c80 	call	101097c8 <_Bfree>
10107ccc:	d9000517 	ldw	r4,20(sp)
10107cd0:	d9802317 	ldw	r6,140(sp)
10107cd4:	d9c02517 	ldw	r7,148(sp)
10107cd8:	b8000005 	stb	zero,0(r23)
10107cdc:	20800044 	addi	r2,r4,1
10107ce0:	30800015 	stw	r2,0(r6)
10107ce4:	3802aa26 	beq	r7,zero,10108790 <_dtoa_r+0x1178>
10107ce8:	3dc00015 	stw	r23,0(r7)
10107cec:	d8800717 	ldw	r2,28(sp)
10107cf0:	003e7906 	br	101076d8 <__alt_data_end+0xfffe76d8>
10107cf4:	00800434 	movhi	r2,16
10107cf8:	10bfffc4 	addi	r2,r2,-1
10107cfc:	88a2703a 	and	r17,r17,r2
10107d00:	883e851e 	bne	r17,zero,10107718 <__alt_data_end+0xfffe7718>
10107d04:	00840474 	movhi	r2,4113
10107d08:	108a2a04 	addi	r2,r2,10408
10107d0c:	003e8406 	br	10107720 <__alt_data_end+0xfffe7720>
10107d10:	10c00204 	addi	r3,r2,8
10107d14:	003e8706 	br	10107734 <__alt_data_end+0xfffe7734>
10107d18:	01400434 	movhi	r5,16
10107d1c:	297fffc4 	addi	r5,r5,-1
10107d20:	994a703a 	and	r5,r19,r5
10107d24:	9009883a 	mov	r4,r18
10107d28:	843f0044 	addi	r16,r16,-1023
10107d2c:	294ffc34 	orhi	r5,r5,16368
10107d30:	dd800217 	ldw	r22,8(sp)
10107d34:	d8001115 	stw	zero,68(sp)
10107d38:	003ea506 	br	101077d0 <__alt_data_end+0xfffe77d0>
10107d3c:	00840474 	movhi	r2,4113
10107d40:	108a2104 	addi	r2,r2,10372
10107d44:	003e6406 	br	101076d8 <__alt_data_end+0xfffe76d8>
10107d48:	e0001115 	stw	zero,68(fp)
10107d4c:	000b883a 	mov	r5,zero
10107d50:	e009883a 	mov	r4,fp
10107d54:	01097200 	call	10109720 <_Balloc>
10107d58:	01bfffc4 	movi	r6,-1
10107d5c:	01c00044 	movi	r7,1
10107d60:	d8800715 	stw	r2,28(sp)
10107d64:	d9800c15 	stw	r6,48(sp)
10107d68:	e0801015 	stw	r2,64(fp)
10107d6c:	d8000315 	stw	zero,12(sp)
10107d70:	d9c00b15 	stw	r7,44(sp)
10107d74:	d9800615 	stw	r6,24(sp)
10107d78:	d8002215 	stw	zero,136(sp)
10107d7c:	d8800117 	ldw	r2,4(sp)
10107d80:	10008916 	blt	r2,zero,10107fa8 <_dtoa_r+0x990>
10107d84:	d9000517 	ldw	r4,20(sp)
10107d88:	00c00384 	movi	r3,14
10107d8c:	19008616 	blt	r3,r4,10107fa8 <_dtoa_r+0x990>
10107d90:	200490fa 	slli	r2,r4,3
10107d94:	00c40474 	movhi	r3,4113
10107d98:	d9802217 	ldw	r6,136(sp)
10107d9c:	18ca4804 	addi	r3,r3,10528
10107da0:	1885883a 	add	r2,r3,r2
10107da4:	14000017 	ldw	r16,0(r2)
10107da8:	14400117 	ldw	r17,4(r2)
10107dac:	30016316 	blt	r6,zero,1010833c <_dtoa_r+0xd24>
10107db0:	800d883a 	mov	r6,r16
10107db4:	880f883a 	mov	r7,r17
10107db8:	9009883a 	mov	r4,r18
10107dbc:	980b883a 	mov	r5,r19
10107dc0:	010dc880 	call	1010dc88 <__divdf3>
10107dc4:	180b883a 	mov	r5,r3
10107dc8:	1009883a 	mov	r4,r2
10107dcc:	010f7dc0 	call	1010f7dc <__fixdfsi>
10107dd0:	1009883a 	mov	r4,r2
10107dd4:	102b883a 	mov	r21,r2
10107dd8:	010f85c0 	call	1010f85c <__floatsidf>
10107ddc:	800d883a 	mov	r6,r16
10107de0:	880f883a 	mov	r7,r17
10107de4:	1009883a 	mov	r4,r2
10107de8:	180b883a 	mov	r5,r3
10107dec:	010e7c80 	call	1010e7c8 <__muldf3>
10107df0:	100d883a 	mov	r6,r2
10107df4:	180f883a 	mov	r7,r3
10107df8:	9009883a 	mov	r4,r18
10107dfc:	980b883a 	mov	r5,r19
10107e00:	010eee00 	call	1010eee0 <__subdf3>
10107e04:	d9c00717 	ldw	r7,28(sp)
10107e08:	1009883a 	mov	r4,r2
10107e0c:	a8800c04 	addi	r2,r21,48
10107e10:	38800005 	stb	r2,0(r7)
10107e14:	3dc00044 	addi	r23,r7,1
10107e18:	d9c00617 	ldw	r7,24(sp)
10107e1c:	01800044 	movi	r6,1
10107e20:	180b883a 	mov	r5,r3
10107e24:	2005883a 	mov	r2,r4
10107e28:	39803826 	beq	r7,r6,10107f0c <_dtoa_r+0x8f4>
10107e2c:	000d883a 	mov	r6,zero
10107e30:	01d00934 	movhi	r7,16420
10107e34:	010e7c80 	call	1010e7c8 <__muldf3>
10107e38:	000d883a 	mov	r6,zero
10107e3c:	000f883a 	mov	r7,zero
10107e40:	1009883a 	mov	r4,r2
10107e44:	180b883a 	mov	r5,r3
10107e48:	1025883a 	mov	r18,r2
10107e4c:	1827883a 	mov	r19,r3
10107e50:	010e5700 	call	1010e570 <__eqdf2>
10107e54:	103f9a26 	beq	r2,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
10107e58:	d9c00617 	ldw	r7,24(sp)
10107e5c:	d8c00717 	ldw	r3,28(sp)
10107e60:	b829883a 	mov	r20,r23
10107e64:	38bfffc4 	addi	r2,r7,-1
10107e68:	18ad883a 	add	r22,r3,r2
10107e6c:	00000a06 	br	10107e98 <_dtoa_r+0x880>
10107e70:	010e7c80 	call	1010e7c8 <__muldf3>
10107e74:	000d883a 	mov	r6,zero
10107e78:	000f883a 	mov	r7,zero
10107e7c:	1009883a 	mov	r4,r2
10107e80:	180b883a 	mov	r5,r3
10107e84:	1025883a 	mov	r18,r2
10107e88:	1827883a 	mov	r19,r3
10107e8c:	b829883a 	mov	r20,r23
10107e90:	010e5700 	call	1010e570 <__eqdf2>
10107e94:	103f8a26 	beq	r2,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
10107e98:	800d883a 	mov	r6,r16
10107e9c:	880f883a 	mov	r7,r17
10107ea0:	9009883a 	mov	r4,r18
10107ea4:	980b883a 	mov	r5,r19
10107ea8:	010dc880 	call	1010dc88 <__divdf3>
10107eac:	180b883a 	mov	r5,r3
10107eb0:	1009883a 	mov	r4,r2
10107eb4:	010f7dc0 	call	1010f7dc <__fixdfsi>
10107eb8:	1009883a 	mov	r4,r2
10107ebc:	102b883a 	mov	r21,r2
10107ec0:	010f85c0 	call	1010f85c <__floatsidf>
10107ec4:	800d883a 	mov	r6,r16
10107ec8:	880f883a 	mov	r7,r17
10107ecc:	1009883a 	mov	r4,r2
10107ed0:	180b883a 	mov	r5,r3
10107ed4:	010e7c80 	call	1010e7c8 <__muldf3>
10107ed8:	100d883a 	mov	r6,r2
10107edc:	180f883a 	mov	r7,r3
10107ee0:	9009883a 	mov	r4,r18
10107ee4:	980b883a 	mov	r5,r19
10107ee8:	010eee00 	call	1010eee0 <__subdf3>
10107eec:	aa000c04 	addi	r8,r21,48
10107ef0:	a2000005 	stb	r8,0(r20)
10107ef4:	000d883a 	mov	r6,zero
10107ef8:	01d00934 	movhi	r7,16420
10107efc:	1009883a 	mov	r4,r2
10107f00:	180b883a 	mov	r5,r3
10107f04:	a5c00044 	addi	r23,r20,1
10107f08:	b53fd91e 	bne	r22,r20,10107e70 <__alt_data_end+0xfffe7e70>
10107f0c:	100d883a 	mov	r6,r2
10107f10:	180f883a 	mov	r7,r3
10107f14:	1009883a 	mov	r4,r2
10107f18:	180b883a 	mov	r5,r3
10107f1c:	010d3dc0 	call	1010d3dc <__adddf3>
10107f20:	100d883a 	mov	r6,r2
10107f24:	180f883a 	mov	r7,r3
10107f28:	8009883a 	mov	r4,r16
10107f2c:	880b883a 	mov	r5,r17
10107f30:	1027883a 	mov	r19,r2
10107f34:	1825883a 	mov	r18,r3
10107f38:	010e6d40 	call	1010e6d4 <__ledf2>
10107f3c:	10000816 	blt	r2,zero,10107f60 <_dtoa_r+0x948>
10107f40:	980d883a 	mov	r6,r19
10107f44:	900f883a 	mov	r7,r18
10107f48:	8009883a 	mov	r4,r16
10107f4c:	880b883a 	mov	r5,r17
10107f50:	010e5700 	call	1010e570 <__eqdf2>
10107f54:	103f5a1e 	bne	r2,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
10107f58:	ad40004c 	andi	r21,r21,1
10107f5c:	a83f5826 	beq	r21,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
10107f60:	bd3fffc3 	ldbu	r20,-1(r23)
10107f64:	b8bfffc4 	addi	r2,r23,-1
10107f68:	1007883a 	mov	r3,r2
10107f6c:	01400e44 	movi	r5,57
10107f70:	d9800717 	ldw	r6,28(sp)
10107f74:	00000506 	br	10107f8c <_dtoa_r+0x974>
10107f78:	18ffffc4 	addi	r3,r3,-1
10107f7c:	11824726 	beq	r2,r6,1010889c <_dtoa_r+0x1284>
10107f80:	1d000003 	ldbu	r20,0(r3)
10107f84:	102f883a 	mov	r23,r2
10107f88:	10bfffc4 	addi	r2,r2,-1
10107f8c:	a1003fcc 	andi	r4,r20,255
10107f90:	2100201c 	xori	r4,r4,128
10107f94:	213fe004 	addi	r4,r4,-128
10107f98:	217ff726 	beq	r4,r5,10107f78 <__alt_data_end+0xfffe7f78>
10107f9c:	a2000044 	addi	r8,r20,1
10107fa0:	12000005 	stb	r8,0(r2)
10107fa4:	003f4606 	br	10107cc0 <__alt_data_end+0xfffe7cc0>
10107fa8:	d9000b17 	ldw	r4,44(sp)
10107fac:	2000c826 	beq	r4,zero,101082d0 <_dtoa_r+0xcb8>
10107fb0:	d9800317 	ldw	r6,12(sp)
10107fb4:	00c00044 	movi	r3,1
10107fb8:	1980f90e 	bge	r3,r6,101083a0 <_dtoa_r+0xd88>
10107fbc:	d8800617 	ldw	r2,24(sp)
10107fc0:	d8c00a17 	ldw	r3,40(sp)
10107fc4:	157fffc4 	addi	r21,r2,-1
10107fc8:	1d41f316 	blt	r3,r21,10108798 <_dtoa_r+0x1180>
10107fcc:	1d6bc83a 	sub	r21,r3,r21
10107fd0:	d9c00617 	ldw	r7,24(sp)
10107fd4:	3802aa16 	blt	r7,zero,10108a80 <_dtoa_r+0x1468>
10107fd8:	dd000817 	ldw	r20,32(sp)
10107fdc:	d8800617 	ldw	r2,24(sp)
10107fe0:	d8c00817 	ldw	r3,32(sp)
10107fe4:	01400044 	movi	r5,1
10107fe8:	e009883a 	mov	r4,fp
10107fec:	1887883a 	add	r3,r3,r2
10107ff0:	d8c00815 	stw	r3,32(sp)
10107ff4:	b0ad883a 	add	r22,r22,r2
10107ff8:	0109b2c0 	call	10109b2c <__i2b>
10107ffc:	1023883a 	mov	r17,r2
10108000:	a0000826 	beq	r20,zero,10108024 <_dtoa_r+0xa0c>
10108004:	0580070e 	bge	zero,r22,10108024 <_dtoa_r+0xa0c>
10108008:	a005883a 	mov	r2,r20
1010800c:	b500b916 	blt	r22,r20,101082f4 <_dtoa_r+0xcdc>
10108010:	d9000817 	ldw	r4,32(sp)
10108014:	a0a9c83a 	sub	r20,r20,r2
10108018:	b0adc83a 	sub	r22,r22,r2
1010801c:	2089c83a 	sub	r4,r4,r2
10108020:	d9000815 	stw	r4,32(sp)
10108024:	d9800a17 	ldw	r6,40(sp)
10108028:	0181810e 	bge	zero,r6,10108630 <_dtoa_r+0x1018>
1010802c:	d9c00b17 	ldw	r7,44(sp)
10108030:	3800b326 	beq	r7,zero,10108300 <_dtoa_r+0xce8>
10108034:	a800b226 	beq	r21,zero,10108300 <_dtoa_r+0xce8>
10108038:	880b883a 	mov	r5,r17
1010803c:	a80d883a 	mov	r6,r21
10108040:	e009883a 	mov	r4,fp
10108044:	0109d600 	call	10109d60 <__pow5mult>
10108048:	d9800917 	ldw	r6,36(sp)
1010804c:	100b883a 	mov	r5,r2
10108050:	e009883a 	mov	r4,fp
10108054:	1023883a 	mov	r17,r2
10108058:	0109b680 	call	10109b68 <__multiply>
1010805c:	1021883a 	mov	r16,r2
10108060:	d8800a17 	ldw	r2,40(sp)
10108064:	d9400917 	ldw	r5,36(sp)
10108068:	e009883a 	mov	r4,fp
1010806c:	1545c83a 	sub	r2,r2,r21
10108070:	d8800a15 	stw	r2,40(sp)
10108074:	01097c80 	call	101097c8 <_Bfree>
10108078:	d8c00a17 	ldw	r3,40(sp)
1010807c:	18009f1e 	bne	r3,zero,101082fc <_dtoa_r+0xce4>
10108080:	05c00044 	movi	r23,1
10108084:	e009883a 	mov	r4,fp
10108088:	b80b883a 	mov	r5,r23
1010808c:	0109b2c0 	call	10109b2c <__i2b>
10108090:	d9000d17 	ldw	r4,52(sp)
10108094:	102b883a 	mov	r21,r2
10108098:	2000ce26 	beq	r4,zero,101083d4 <_dtoa_r+0xdbc>
1010809c:	200d883a 	mov	r6,r4
101080a0:	100b883a 	mov	r5,r2
101080a4:	e009883a 	mov	r4,fp
101080a8:	0109d600 	call	10109d60 <__pow5mult>
101080ac:	d9800317 	ldw	r6,12(sp)
101080b0:	102b883a 	mov	r21,r2
101080b4:	b981810e 	bge	r23,r6,101086bc <_dtoa_r+0x10a4>
101080b8:	0027883a 	mov	r19,zero
101080bc:	a8800417 	ldw	r2,16(r21)
101080c0:	05c00804 	movi	r23,32
101080c4:	10800104 	addi	r2,r2,4
101080c8:	1085883a 	add	r2,r2,r2
101080cc:	1085883a 	add	r2,r2,r2
101080d0:	a885883a 	add	r2,r21,r2
101080d4:	11000017 	ldw	r4,0(r2)
101080d8:	0109a140 	call	10109a14 <__hi0bits>
101080dc:	b885c83a 	sub	r2,r23,r2
101080e0:	1585883a 	add	r2,r2,r22
101080e4:	108007cc 	andi	r2,r2,31
101080e8:	1000b326 	beq	r2,zero,101083b8 <_dtoa_r+0xda0>
101080ec:	00c00804 	movi	r3,32
101080f0:	1887c83a 	sub	r3,r3,r2
101080f4:	01000104 	movi	r4,4
101080f8:	20c2cd0e 	bge	r4,r3,10108c30 <_dtoa_r+0x1618>
101080fc:	00c00704 	movi	r3,28
10108100:	1885c83a 	sub	r2,r3,r2
10108104:	d8c00817 	ldw	r3,32(sp)
10108108:	a0a9883a 	add	r20,r20,r2
1010810c:	b0ad883a 	add	r22,r22,r2
10108110:	1887883a 	add	r3,r3,r2
10108114:	d8c00815 	stw	r3,32(sp)
10108118:	d9800817 	ldw	r6,32(sp)
1010811c:	0180040e 	bge	zero,r6,10108130 <_dtoa_r+0xb18>
10108120:	800b883a 	mov	r5,r16
10108124:	e009883a 	mov	r4,fp
10108128:	0109ea00 	call	10109ea0 <__lshift>
1010812c:	1021883a 	mov	r16,r2
10108130:	0580050e 	bge	zero,r22,10108148 <_dtoa_r+0xb30>
10108134:	a80b883a 	mov	r5,r21
10108138:	b00d883a 	mov	r6,r22
1010813c:	e009883a 	mov	r4,fp
10108140:	0109ea00 	call	10109ea0 <__lshift>
10108144:	102b883a 	mov	r21,r2
10108148:	d9c00e17 	ldw	r7,56(sp)
1010814c:	3801211e 	bne	r7,zero,101085d4 <_dtoa_r+0xfbc>
10108150:	d9800617 	ldw	r6,24(sp)
10108154:	0181380e 	bge	zero,r6,10108638 <_dtoa_r+0x1020>
10108158:	d8c00b17 	ldw	r3,44(sp)
1010815c:	1800ab1e 	bne	r3,zero,1010840c <_dtoa_r+0xdf4>
10108160:	dc800717 	ldw	r18,28(sp)
10108164:	dcc00617 	ldw	r19,24(sp)
10108168:	9029883a 	mov	r20,r18
1010816c:	00000206 	br	10108178 <_dtoa_r+0xb60>
10108170:	01097f00 	call	101097f0 <__multadd>
10108174:	1021883a 	mov	r16,r2
10108178:	a80b883a 	mov	r5,r21
1010817c:	8009883a 	mov	r4,r16
10108180:	01074180 	call	10107418 <quorem>
10108184:	10800c04 	addi	r2,r2,48
10108188:	90800005 	stb	r2,0(r18)
1010818c:	94800044 	addi	r18,r18,1
10108190:	9507c83a 	sub	r3,r18,r20
10108194:	000f883a 	mov	r7,zero
10108198:	01800284 	movi	r6,10
1010819c:	800b883a 	mov	r5,r16
101081a0:	e009883a 	mov	r4,fp
101081a4:	1cfff216 	blt	r3,r19,10108170 <__alt_data_end+0xfffe8170>
101081a8:	1011883a 	mov	r8,r2
101081ac:	d8800617 	ldw	r2,24(sp)
101081b0:	0082370e 	bge	zero,r2,10108a90 <_dtoa_r+0x1478>
101081b4:	d9000717 	ldw	r4,28(sp)
101081b8:	0025883a 	mov	r18,zero
101081bc:	20af883a 	add	r23,r4,r2
101081c0:	01800044 	movi	r6,1
101081c4:	800b883a 	mov	r5,r16
101081c8:	e009883a 	mov	r4,fp
101081cc:	da001715 	stw	r8,92(sp)
101081d0:	0109ea00 	call	10109ea0 <__lshift>
101081d4:	a80b883a 	mov	r5,r21
101081d8:	1009883a 	mov	r4,r2
101081dc:	d8800915 	stw	r2,36(sp)
101081e0:	0109fe80 	call	10109fe8 <__mcmp>
101081e4:	da001717 	ldw	r8,92(sp)
101081e8:	0081800e 	bge	zero,r2,101087ec <_dtoa_r+0x11d4>
101081ec:	b93fffc3 	ldbu	r4,-1(r23)
101081f0:	b8bfffc4 	addi	r2,r23,-1
101081f4:	1007883a 	mov	r3,r2
101081f8:	01800e44 	movi	r6,57
101081fc:	d9c00717 	ldw	r7,28(sp)
10108200:	00000506 	br	10108218 <_dtoa_r+0xc00>
10108204:	18ffffc4 	addi	r3,r3,-1
10108208:	11c12326 	beq	r2,r7,10108698 <_dtoa_r+0x1080>
1010820c:	19000003 	ldbu	r4,0(r3)
10108210:	102f883a 	mov	r23,r2
10108214:	10bfffc4 	addi	r2,r2,-1
10108218:	21403fcc 	andi	r5,r4,255
1010821c:	2940201c 	xori	r5,r5,128
10108220:	297fe004 	addi	r5,r5,-128
10108224:	29bff726 	beq	r5,r6,10108204 <__alt_data_end+0xfffe8204>
10108228:	21000044 	addi	r4,r4,1
1010822c:	11000005 	stb	r4,0(r2)
10108230:	a80b883a 	mov	r5,r21
10108234:	e009883a 	mov	r4,fp
10108238:	01097c80 	call	101097c8 <_Bfree>
1010823c:	883ea026 	beq	r17,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
10108240:	90000426 	beq	r18,zero,10108254 <_dtoa_r+0xc3c>
10108244:	94400326 	beq	r18,r17,10108254 <_dtoa_r+0xc3c>
10108248:	900b883a 	mov	r5,r18
1010824c:	e009883a 	mov	r4,fp
10108250:	01097c80 	call	101097c8 <_Bfree>
10108254:	880b883a 	mov	r5,r17
10108258:	e009883a 	mov	r4,fp
1010825c:	01097c80 	call	101097c8 <_Bfree>
10108260:	003e9706 	br	10107cc0 <__alt_data_end+0xfffe7cc0>
10108264:	01800044 	movi	r6,1
10108268:	d9800e15 	stw	r6,56(sp)
1010826c:	003d9606 	br	101078c8 <__alt_data_end+0xfffe78c8>
10108270:	d8800817 	ldw	r2,32(sp)
10108274:	d8c00517 	ldw	r3,20(sp)
10108278:	d8000d15 	stw	zero,52(sp)
1010827c:	10c5c83a 	sub	r2,r2,r3
10108280:	00c9c83a 	sub	r4,zero,r3
10108284:	d8800815 	stw	r2,32(sp)
10108288:	d9000a15 	stw	r4,40(sp)
1010828c:	003d9706 	br	101078ec <__alt_data_end+0xfffe78ec>
10108290:	05adc83a 	sub	r22,zero,r22
10108294:	dd800815 	stw	r22,32(sp)
10108298:	002d883a 	mov	r22,zero
1010829c:	003d8e06 	br	101078d8 <__alt_data_end+0xfffe78d8>
101082a0:	d9000517 	ldw	r4,20(sp)
101082a4:	010f85c0 	call	1010f85c <__floatsidf>
101082a8:	100d883a 	mov	r6,r2
101082ac:	180f883a 	mov	r7,r3
101082b0:	a009883a 	mov	r4,r20
101082b4:	880b883a 	mov	r5,r17
101082b8:	010e5700 	call	1010e570 <__eqdf2>
101082bc:	103d7126 	beq	r2,zero,10107884 <__alt_data_end+0xfffe7884>
101082c0:	d9c00517 	ldw	r7,20(sp)
101082c4:	39ffffc4 	addi	r7,r7,-1
101082c8:	d9c00515 	stw	r7,20(sp)
101082cc:	003d6d06 	br	10107884 <__alt_data_end+0xfffe7884>
101082d0:	dd400a17 	ldw	r21,40(sp)
101082d4:	dd000817 	ldw	r20,32(sp)
101082d8:	0023883a 	mov	r17,zero
101082dc:	003f4806 	br	10108000 <__alt_data_end+0xfffe8000>
101082e0:	10e3c83a 	sub	r17,r2,r3
101082e4:	9448983a 	sll	r4,r18,r17
101082e8:	003d3206 	br	101077b4 <__alt_data_end+0xfffe77b4>
101082ec:	d8000e15 	stw	zero,56(sp)
101082f0:	003d7506 	br	101078c8 <__alt_data_end+0xfffe78c8>
101082f4:	b005883a 	mov	r2,r22
101082f8:	003f4506 	br	10108010 <__alt_data_end+0xfffe8010>
101082fc:	dc000915 	stw	r16,36(sp)
10108300:	d9800a17 	ldw	r6,40(sp)
10108304:	d9400917 	ldw	r5,36(sp)
10108308:	e009883a 	mov	r4,fp
1010830c:	0109d600 	call	10109d60 <__pow5mult>
10108310:	1021883a 	mov	r16,r2
10108314:	003f5a06 	br	10108080 <__alt_data_end+0xfffe8080>
10108318:	01c00044 	movi	r7,1
1010831c:	d9c00b15 	stw	r7,44(sp)
10108320:	d8802217 	ldw	r2,136(sp)
10108324:	0081280e 	bge	zero,r2,101087c8 <_dtoa_r+0x11b0>
10108328:	100d883a 	mov	r6,r2
1010832c:	1021883a 	mov	r16,r2
10108330:	d8800c15 	stw	r2,48(sp)
10108334:	d8800615 	stw	r2,24(sp)
10108338:	003d8806 	br	1010795c <__alt_data_end+0xfffe795c>
1010833c:	d8800617 	ldw	r2,24(sp)
10108340:	00be9b16 	blt	zero,r2,10107db0 <__alt_data_end+0xfffe7db0>
10108344:	10010f1e 	bne	r2,zero,10108784 <_dtoa_r+0x116c>
10108348:	880b883a 	mov	r5,r17
1010834c:	000d883a 	mov	r6,zero
10108350:	01d00534 	movhi	r7,16404
10108354:	8009883a 	mov	r4,r16
10108358:	010e7c80 	call	1010e7c8 <__muldf3>
1010835c:	900d883a 	mov	r6,r18
10108360:	980f883a 	mov	r7,r19
10108364:	1009883a 	mov	r4,r2
10108368:	180b883a 	mov	r5,r3
1010836c:	010e5f80 	call	1010e5f8 <__gedf2>
10108370:	002b883a 	mov	r21,zero
10108374:	0023883a 	mov	r17,zero
10108378:	1000bf16 	blt	r2,zero,10108678 <_dtoa_r+0x1060>
1010837c:	d9802217 	ldw	r6,136(sp)
10108380:	ddc00717 	ldw	r23,28(sp)
10108384:	018c303a 	nor	r6,zero,r6
10108388:	d9800515 	stw	r6,20(sp)
1010838c:	a80b883a 	mov	r5,r21
10108390:	e009883a 	mov	r4,fp
10108394:	01097c80 	call	101097c8 <_Bfree>
10108398:	883e4926 	beq	r17,zero,10107cc0 <__alt_data_end+0xfffe7cc0>
1010839c:	003fad06 	br	10108254 <__alt_data_end+0xfffe8254>
101083a0:	d9c01117 	ldw	r7,68(sp)
101083a4:	3801bc26 	beq	r7,zero,10108a98 <_dtoa_r+0x1480>
101083a8:	10810cc4 	addi	r2,r2,1075
101083ac:	dd400a17 	ldw	r21,40(sp)
101083b0:	dd000817 	ldw	r20,32(sp)
101083b4:	003f0a06 	br	10107fe0 <__alt_data_end+0xfffe7fe0>
101083b8:	00800704 	movi	r2,28
101083bc:	d9000817 	ldw	r4,32(sp)
101083c0:	a0a9883a 	add	r20,r20,r2
101083c4:	b0ad883a 	add	r22,r22,r2
101083c8:	2089883a 	add	r4,r4,r2
101083cc:	d9000815 	stw	r4,32(sp)
101083d0:	003f5106 	br	10108118 <__alt_data_end+0xfffe8118>
101083d4:	d8c00317 	ldw	r3,12(sp)
101083d8:	b8c1fc0e 	bge	r23,r3,10108bcc <_dtoa_r+0x15b4>
101083dc:	0027883a 	mov	r19,zero
101083e0:	b805883a 	mov	r2,r23
101083e4:	003f3e06 	br	101080e0 <__alt_data_end+0xfffe80e0>
101083e8:	880b883a 	mov	r5,r17
101083ec:	e009883a 	mov	r4,fp
101083f0:	000f883a 	mov	r7,zero
101083f4:	01800284 	movi	r6,10
101083f8:	01097f00 	call	101097f0 <__multadd>
101083fc:	d9000c17 	ldw	r4,48(sp)
10108400:	1023883a 	mov	r17,r2
10108404:	0102040e 	bge	zero,r4,10108c18 <_dtoa_r+0x1600>
10108408:	d9000615 	stw	r4,24(sp)
1010840c:	0500050e 	bge	zero,r20,10108424 <_dtoa_r+0xe0c>
10108410:	880b883a 	mov	r5,r17
10108414:	a00d883a 	mov	r6,r20
10108418:	e009883a 	mov	r4,fp
1010841c:	0109ea00 	call	10109ea0 <__lshift>
10108420:	1023883a 	mov	r17,r2
10108424:	9801241e 	bne	r19,zero,101088b8 <_dtoa_r+0x12a0>
10108428:	8829883a 	mov	r20,r17
1010842c:	d9000617 	ldw	r4,24(sp)
10108430:	dcc00717 	ldw	r19,28(sp)
10108434:	9480004c 	andi	r18,r18,1
10108438:	20bfffc4 	addi	r2,r4,-1
1010843c:	9885883a 	add	r2,r19,r2
10108440:	d8800415 	stw	r2,16(sp)
10108444:	dc800615 	stw	r18,24(sp)
10108448:	a80b883a 	mov	r5,r21
1010844c:	8009883a 	mov	r4,r16
10108450:	01074180 	call	10107418 <quorem>
10108454:	880b883a 	mov	r5,r17
10108458:	8009883a 	mov	r4,r16
1010845c:	102f883a 	mov	r23,r2
10108460:	0109fe80 	call	10109fe8 <__mcmp>
10108464:	a80b883a 	mov	r5,r21
10108468:	a00d883a 	mov	r6,r20
1010846c:	e009883a 	mov	r4,fp
10108470:	102d883a 	mov	r22,r2
10108474:	010a0480 	call	1010a048 <__mdiff>
10108478:	1007883a 	mov	r3,r2
1010847c:	10800317 	ldw	r2,12(r2)
10108480:	bc800c04 	addi	r18,r23,48
10108484:	180b883a 	mov	r5,r3
10108488:	10004e1e 	bne	r2,zero,101085c4 <_dtoa_r+0xfac>
1010848c:	8009883a 	mov	r4,r16
10108490:	d8c01615 	stw	r3,88(sp)
10108494:	0109fe80 	call	10109fe8 <__mcmp>
10108498:	d8c01617 	ldw	r3,88(sp)
1010849c:	e009883a 	mov	r4,fp
101084a0:	d8801615 	stw	r2,88(sp)
101084a4:	180b883a 	mov	r5,r3
101084a8:	01097c80 	call	101097c8 <_Bfree>
101084ac:	d8801617 	ldw	r2,88(sp)
101084b0:	1000041e 	bne	r2,zero,101084c4 <_dtoa_r+0xeac>
101084b4:	d9800317 	ldw	r6,12(sp)
101084b8:	3000021e 	bne	r6,zero,101084c4 <_dtoa_r+0xeac>
101084bc:	d8c00617 	ldw	r3,24(sp)
101084c0:	18003726 	beq	r3,zero,101085a0 <_dtoa_r+0xf88>
101084c4:	b0002016 	blt	r22,zero,10108548 <_dtoa_r+0xf30>
101084c8:	b000041e 	bne	r22,zero,101084dc <_dtoa_r+0xec4>
101084cc:	d9000317 	ldw	r4,12(sp)
101084d0:	2000021e 	bne	r4,zero,101084dc <_dtoa_r+0xec4>
101084d4:	d8c00617 	ldw	r3,24(sp)
101084d8:	18001b26 	beq	r3,zero,10108548 <_dtoa_r+0xf30>
101084dc:	00810716 	blt	zero,r2,101088fc <_dtoa_r+0x12e4>
101084e0:	d8c00417 	ldw	r3,16(sp)
101084e4:	9d800044 	addi	r22,r19,1
101084e8:	9c800005 	stb	r18,0(r19)
101084ec:	b02f883a 	mov	r23,r22
101084f0:	98c10626 	beq	r19,r3,1010890c <_dtoa_r+0x12f4>
101084f4:	800b883a 	mov	r5,r16
101084f8:	000f883a 	mov	r7,zero
101084fc:	01800284 	movi	r6,10
10108500:	e009883a 	mov	r4,fp
10108504:	01097f00 	call	101097f0 <__multadd>
10108508:	1021883a 	mov	r16,r2
1010850c:	000f883a 	mov	r7,zero
10108510:	01800284 	movi	r6,10
10108514:	880b883a 	mov	r5,r17
10108518:	e009883a 	mov	r4,fp
1010851c:	8d002526 	beq	r17,r20,101085b4 <_dtoa_r+0xf9c>
10108520:	01097f00 	call	101097f0 <__multadd>
10108524:	a00b883a 	mov	r5,r20
10108528:	000f883a 	mov	r7,zero
1010852c:	01800284 	movi	r6,10
10108530:	e009883a 	mov	r4,fp
10108534:	1023883a 	mov	r17,r2
10108538:	01097f00 	call	101097f0 <__multadd>
1010853c:	1029883a 	mov	r20,r2
10108540:	b027883a 	mov	r19,r22
10108544:	003fc006 	br	10108448 <__alt_data_end+0xfffe8448>
10108548:	9011883a 	mov	r8,r18
1010854c:	00800e0e 	bge	zero,r2,10108588 <_dtoa_r+0xf70>
10108550:	800b883a 	mov	r5,r16
10108554:	01800044 	movi	r6,1
10108558:	e009883a 	mov	r4,fp
1010855c:	da001715 	stw	r8,92(sp)
10108560:	0109ea00 	call	10109ea0 <__lshift>
10108564:	a80b883a 	mov	r5,r21
10108568:	1009883a 	mov	r4,r2
1010856c:	1021883a 	mov	r16,r2
10108570:	0109fe80 	call	10109fe8 <__mcmp>
10108574:	da001717 	ldw	r8,92(sp)
10108578:	0081960e 	bge	zero,r2,10108bd4 <_dtoa_r+0x15bc>
1010857c:	00800e44 	movi	r2,57
10108580:	40817026 	beq	r8,r2,10108b44 <_dtoa_r+0x152c>
10108584:	ba000c44 	addi	r8,r23,49
10108588:	8825883a 	mov	r18,r17
1010858c:	9dc00044 	addi	r23,r19,1
10108590:	9a000005 	stb	r8,0(r19)
10108594:	a023883a 	mov	r17,r20
10108598:	dc000915 	stw	r16,36(sp)
1010859c:	003f2406 	br	10108230 <__alt_data_end+0xfffe8230>
101085a0:	00800e44 	movi	r2,57
101085a4:	9011883a 	mov	r8,r18
101085a8:	90816626 	beq	r18,r2,10108b44 <_dtoa_r+0x152c>
101085ac:	05bff516 	blt	zero,r22,10108584 <__alt_data_end+0xfffe8584>
101085b0:	003ff506 	br	10108588 <__alt_data_end+0xfffe8588>
101085b4:	01097f00 	call	101097f0 <__multadd>
101085b8:	1023883a 	mov	r17,r2
101085bc:	1029883a 	mov	r20,r2
101085c0:	003fdf06 	br	10108540 <__alt_data_end+0xfffe8540>
101085c4:	e009883a 	mov	r4,fp
101085c8:	01097c80 	call	101097c8 <_Bfree>
101085cc:	00800044 	movi	r2,1
101085d0:	003fbc06 	br	101084c4 <__alt_data_end+0xfffe84c4>
101085d4:	a80b883a 	mov	r5,r21
101085d8:	8009883a 	mov	r4,r16
101085dc:	0109fe80 	call	10109fe8 <__mcmp>
101085e0:	103edb0e 	bge	r2,zero,10108150 <__alt_data_end+0xfffe8150>
101085e4:	800b883a 	mov	r5,r16
101085e8:	000f883a 	mov	r7,zero
101085ec:	01800284 	movi	r6,10
101085f0:	e009883a 	mov	r4,fp
101085f4:	01097f00 	call	101097f0 <__multadd>
101085f8:	1021883a 	mov	r16,r2
101085fc:	d8800517 	ldw	r2,20(sp)
10108600:	d8c00b17 	ldw	r3,44(sp)
10108604:	10bfffc4 	addi	r2,r2,-1
10108608:	d8800515 	stw	r2,20(sp)
1010860c:	183f761e 	bne	r3,zero,101083e8 <__alt_data_end+0xfffe83e8>
10108610:	d9000c17 	ldw	r4,48(sp)
10108614:	0101730e 	bge	zero,r4,10108be4 <_dtoa_r+0x15cc>
10108618:	d9000615 	stw	r4,24(sp)
1010861c:	003ed006 	br	10108160 <__alt_data_end+0xfffe8160>
10108620:	00800084 	movi	r2,2
10108624:	3081861e 	bne	r6,r2,10108c40 <_dtoa_r+0x1628>
10108628:	d8000b15 	stw	zero,44(sp)
1010862c:	003f3c06 	br	10108320 <__alt_data_end+0xfffe8320>
10108630:	dc000917 	ldw	r16,36(sp)
10108634:	003e9206 	br	10108080 <__alt_data_end+0xfffe8080>
10108638:	d9c00317 	ldw	r7,12(sp)
1010863c:	00800084 	movi	r2,2
10108640:	11fec50e 	bge	r2,r7,10108158 <__alt_data_end+0xfffe8158>
10108644:	d9000617 	ldw	r4,24(sp)
10108648:	20013c1e 	bne	r4,zero,10108b3c <_dtoa_r+0x1524>
1010864c:	a80b883a 	mov	r5,r21
10108650:	000f883a 	mov	r7,zero
10108654:	01800144 	movi	r6,5
10108658:	e009883a 	mov	r4,fp
1010865c:	01097f00 	call	101097f0 <__multadd>
10108660:	100b883a 	mov	r5,r2
10108664:	8009883a 	mov	r4,r16
10108668:	102b883a 	mov	r21,r2
1010866c:	0109fe80 	call	10109fe8 <__mcmp>
10108670:	dc000915 	stw	r16,36(sp)
10108674:	00bf410e 	bge	zero,r2,1010837c <__alt_data_end+0xfffe837c>
10108678:	d9c00717 	ldw	r7,28(sp)
1010867c:	00800c44 	movi	r2,49
10108680:	38800005 	stb	r2,0(r7)
10108684:	d8800517 	ldw	r2,20(sp)
10108688:	3dc00044 	addi	r23,r7,1
1010868c:	10800044 	addi	r2,r2,1
10108690:	d8800515 	stw	r2,20(sp)
10108694:	003f3d06 	br	1010838c <__alt_data_end+0xfffe838c>
10108698:	d9800517 	ldw	r6,20(sp)
1010869c:	d9c00717 	ldw	r7,28(sp)
101086a0:	00800c44 	movi	r2,49
101086a4:	31800044 	addi	r6,r6,1
101086a8:	d9800515 	stw	r6,20(sp)
101086ac:	38800005 	stb	r2,0(r7)
101086b0:	003edf06 	br	10108230 <__alt_data_end+0xfffe8230>
101086b4:	d8000b15 	stw	zero,44(sp)
101086b8:	003c9f06 	br	10107938 <__alt_data_end+0xfffe7938>
101086bc:	903e7e1e 	bne	r18,zero,101080b8 <__alt_data_end+0xfffe80b8>
101086c0:	00800434 	movhi	r2,16
101086c4:	10bfffc4 	addi	r2,r2,-1
101086c8:	9884703a 	and	r2,r19,r2
101086cc:	1000ea1e 	bne	r2,zero,10108a78 <_dtoa_r+0x1460>
101086d0:	9cdffc2c 	andhi	r19,r19,32752
101086d4:	9800e826 	beq	r19,zero,10108a78 <_dtoa_r+0x1460>
101086d8:	d9c00817 	ldw	r7,32(sp)
101086dc:	b5800044 	addi	r22,r22,1
101086e0:	04c00044 	movi	r19,1
101086e4:	39c00044 	addi	r7,r7,1
101086e8:	d9c00815 	stw	r7,32(sp)
101086ec:	d8800d17 	ldw	r2,52(sp)
101086f0:	103e721e 	bne	r2,zero,101080bc <__alt_data_end+0xfffe80bc>
101086f4:	00800044 	movi	r2,1
101086f8:	003e7906 	br	101080e0 <__alt_data_end+0xfffe80e0>
101086fc:	8009883a 	mov	r4,r16
10108700:	010f85c0 	call	1010f85c <__floatsidf>
10108704:	d9800f17 	ldw	r6,60(sp)
10108708:	d9c01017 	ldw	r7,64(sp)
1010870c:	1009883a 	mov	r4,r2
10108710:	180b883a 	mov	r5,r3
10108714:	010e7c80 	call	1010e7c8 <__muldf3>
10108718:	000d883a 	mov	r6,zero
1010871c:	01d00734 	movhi	r7,16412
10108720:	1009883a 	mov	r4,r2
10108724:	180b883a 	mov	r5,r3
10108728:	010d3dc0 	call	1010d3dc <__adddf3>
1010872c:	047f3034 	movhi	r17,64704
10108730:	1021883a 	mov	r16,r2
10108734:	1c63883a 	add	r17,r3,r17
10108738:	d9000f17 	ldw	r4,60(sp)
1010873c:	d9401017 	ldw	r5,64(sp)
10108740:	000d883a 	mov	r6,zero
10108744:	01d00534 	movhi	r7,16404
10108748:	010eee00 	call	1010eee0 <__subdf3>
1010874c:	800d883a 	mov	r6,r16
10108750:	880f883a 	mov	r7,r17
10108754:	1009883a 	mov	r4,r2
10108758:	180b883a 	mov	r5,r3
1010875c:	102b883a 	mov	r21,r2
10108760:	1829883a 	mov	r20,r3
10108764:	010e5f80 	call	1010e5f8 <__gedf2>
10108768:	00806c16 	blt	zero,r2,1010891c <_dtoa_r+0x1304>
1010876c:	89e0003c 	xorhi	r7,r17,32768
10108770:	800d883a 	mov	r6,r16
10108774:	a809883a 	mov	r4,r21
10108778:	a00b883a 	mov	r5,r20
1010877c:	010e6d40 	call	1010e6d4 <__ledf2>
10108780:	103d7e0e 	bge	r2,zero,10107d7c <__alt_data_end+0xfffe7d7c>
10108784:	002b883a 	mov	r21,zero
10108788:	0023883a 	mov	r17,zero
1010878c:	003efb06 	br	1010837c <__alt_data_end+0xfffe837c>
10108790:	d8800717 	ldw	r2,28(sp)
10108794:	003bd006 	br	101076d8 <__alt_data_end+0xfffe76d8>
10108798:	d9000a17 	ldw	r4,40(sp)
1010879c:	d9800d17 	ldw	r6,52(sp)
101087a0:	dd400a15 	stw	r21,40(sp)
101087a4:	a905c83a 	sub	r2,r21,r4
101087a8:	308d883a 	add	r6,r6,r2
101087ac:	d9800d15 	stw	r6,52(sp)
101087b0:	002b883a 	mov	r21,zero
101087b4:	003e0606 	br	10107fd0 <__alt_data_end+0xfffe7fd0>
101087b8:	9023883a 	mov	r17,r18
101087bc:	9829883a 	mov	r20,r19
101087c0:	04000084 	movi	r16,2
101087c4:	003c9206 	br	10107a10 <__alt_data_end+0xfffe7a10>
101087c8:	04000044 	movi	r16,1
101087cc:	dc000c15 	stw	r16,48(sp)
101087d0:	dc000615 	stw	r16,24(sp)
101087d4:	dc002215 	stw	r16,136(sp)
101087d8:	e0001115 	stw	zero,68(fp)
101087dc:	000b883a 	mov	r5,zero
101087e0:	003c6906 	br	10107988 <__alt_data_end+0xfffe7988>
101087e4:	3021883a 	mov	r16,r6
101087e8:	003ffb06 	br	101087d8 <__alt_data_end+0xfffe87d8>
101087ec:	1000021e 	bne	r2,zero,101087f8 <_dtoa_r+0x11e0>
101087f0:	4200004c 	andi	r8,r8,1
101087f4:	403e7d1e 	bne	r8,zero,101081ec <__alt_data_end+0xfffe81ec>
101087f8:	01000c04 	movi	r4,48
101087fc:	00000106 	br	10108804 <_dtoa_r+0x11ec>
10108800:	102f883a 	mov	r23,r2
10108804:	b8bfffc4 	addi	r2,r23,-1
10108808:	10c00007 	ldb	r3,0(r2)
1010880c:	193ffc26 	beq	r3,r4,10108800 <__alt_data_end+0xfffe8800>
10108810:	003e8706 	br	10108230 <__alt_data_end+0xfffe8230>
10108814:	d8800517 	ldw	r2,20(sp)
10108818:	00a3c83a 	sub	r17,zero,r2
1010881c:	8800a426 	beq	r17,zero,10108ab0 <_dtoa_r+0x1498>
10108820:	888003cc 	andi	r2,r17,15
10108824:	100490fa 	slli	r2,r2,3
10108828:	00c40474 	movhi	r3,4113
1010882c:	18ca4804 	addi	r3,r3,10528
10108830:	1885883a 	add	r2,r3,r2
10108834:	11800017 	ldw	r6,0(r2)
10108838:	11c00117 	ldw	r7,4(r2)
1010883c:	9009883a 	mov	r4,r18
10108840:	980b883a 	mov	r5,r19
10108844:	8823d13a 	srai	r17,r17,4
10108848:	010e7c80 	call	1010e7c8 <__muldf3>
1010884c:	d8800f15 	stw	r2,60(sp)
10108850:	d8c01015 	stw	r3,64(sp)
10108854:	8800e826 	beq	r17,zero,10108bf8 <_dtoa_r+0x15e0>
10108858:	05040474 	movhi	r20,4113
1010885c:	a50a3e04 	addi	r20,r20,10488
10108860:	04000084 	movi	r16,2
10108864:	8980004c 	andi	r6,r17,1
10108868:	1009883a 	mov	r4,r2
1010886c:	8823d07a 	srai	r17,r17,1
10108870:	180b883a 	mov	r5,r3
10108874:	30000426 	beq	r6,zero,10108888 <_dtoa_r+0x1270>
10108878:	a1800017 	ldw	r6,0(r20)
1010887c:	a1c00117 	ldw	r7,4(r20)
10108880:	84000044 	addi	r16,r16,1
10108884:	010e7c80 	call	1010e7c8 <__muldf3>
10108888:	a5000204 	addi	r20,r20,8
1010888c:	883ff51e 	bne	r17,zero,10108864 <__alt_data_end+0xfffe8864>
10108890:	d8800f15 	stw	r2,60(sp)
10108894:	d8c01015 	stw	r3,64(sp)
10108898:	003c7606 	br	10107a74 <__alt_data_end+0xfffe7a74>
1010889c:	00c00c04 	movi	r3,48
101088a0:	10c00005 	stb	r3,0(r2)
101088a4:	d8c00517 	ldw	r3,20(sp)
101088a8:	bd3fffc3 	ldbu	r20,-1(r23)
101088ac:	18c00044 	addi	r3,r3,1
101088b0:	d8c00515 	stw	r3,20(sp)
101088b4:	003db906 	br	10107f9c <__alt_data_end+0xfffe7f9c>
101088b8:	89400117 	ldw	r5,4(r17)
101088bc:	e009883a 	mov	r4,fp
101088c0:	01097200 	call	10109720 <_Balloc>
101088c4:	89800417 	ldw	r6,16(r17)
101088c8:	89400304 	addi	r5,r17,12
101088cc:	11000304 	addi	r4,r2,12
101088d0:	31800084 	addi	r6,r6,2
101088d4:	318d883a 	add	r6,r6,r6
101088d8:	318d883a 	add	r6,r6,r6
101088dc:	1027883a 	mov	r19,r2
101088e0:	010947c0 	call	1010947c <memcpy>
101088e4:	01800044 	movi	r6,1
101088e8:	980b883a 	mov	r5,r19
101088ec:	e009883a 	mov	r4,fp
101088f0:	0109ea00 	call	10109ea0 <__lshift>
101088f4:	1029883a 	mov	r20,r2
101088f8:	003ecc06 	br	1010842c <__alt_data_end+0xfffe842c>
101088fc:	00800e44 	movi	r2,57
10108900:	90809026 	beq	r18,r2,10108b44 <_dtoa_r+0x152c>
10108904:	92000044 	addi	r8,r18,1
10108908:	003f1f06 	br	10108588 <__alt_data_end+0xfffe8588>
1010890c:	9011883a 	mov	r8,r18
10108910:	8825883a 	mov	r18,r17
10108914:	a023883a 	mov	r17,r20
10108918:	003e2906 	br	101081c0 <__alt_data_end+0xfffe81c0>
1010891c:	002b883a 	mov	r21,zero
10108920:	0023883a 	mov	r17,zero
10108924:	003f5406 	br	10108678 <__alt_data_end+0xfffe8678>
10108928:	61bfffc4 	addi	r6,r12,-1
1010892c:	300490fa 	slli	r2,r6,3
10108930:	00c40474 	movhi	r3,4113
10108934:	18ca4804 	addi	r3,r3,10528
10108938:	1885883a 	add	r2,r3,r2
1010893c:	11000017 	ldw	r4,0(r2)
10108940:	11400117 	ldw	r5,4(r2)
10108944:	d8800717 	ldw	r2,28(sp)
10108948:	880f883a 	mov	r7,r17
1010894c:	d9801215 	stw	r6,72(sp)
10108950:	800d883a 	mov	r6,r16
10108954:	db001615 	stw	r12,88(sp)
10108958:	15c00044 	addi	r23,r2,1
1010895c:	010e7c80 	call	1010e7c8 <__muldf3>
10108960:	d9401017 	ldw	r5,64(sp)
10108964:	d9000f17 	ldw	r4,60(sp)
10108968:	d8c01515 	stw	r3,84(sp)
1010896c:	d8801415 	stw	r2,80(sp)
10108970:	010f7dc0 	call	1010f7dc <__fixdfsi>
10108974:	1009883a 	mov	r4,r2
10108978:	1021883a 	mov	r16,r2
1010897c:	010f85c0 	call	1010f85c <__floatsidf>
10108980:	d9000f17 	ldw	r4,60(sp)
10108984:	d9401017 	ldw	r5,64(sp)
10108988:	100d883a 	mov	r6,r2
1010898c:	180f883a 	mov	r7,r3
10108990:	010eee00 	call	1010eee0 <__subdf3>
10108994:	1829883a 	mov	r20,r3
10108998:	d8c00717 	ldw	r3,28(sp)
1010899c:	84000c04 	addi	r16,r16,48
101089a0:	1023883a 	mov	r17,r2
101089a4:	1c000005 	stb	r16,0(r3)
101089a8:	db001617 	ldw	r12,88(sp)
101089ac:	00800044 	movi	r2,1
101089b0:	60802226 	beq	r12,r2,10108a3c <_dtoa_r+0x1424>
101089b4:	d9c00717 	ldw	r7,28(sp)
101089b8:	8805883a 	mov	r2,r17
101089bc:	b82b883a 	mov	r21,r23
101089c0:	3b19883a 	add	r12,r7,r12
101089c4:	6023883a 	mov	r17,r12
101089c8:	a007883a 	mov	r3,r20
101089cc:	dc800f15 	stw	r18,60(sp)
101089d0:	000d883a 	mov	r6,zero
101089d4:	01d00934 	movhi	r7,16420
101089d8:	1009883a 	mov	r4,r2
101089dc:	180b883a 	mov	r5,r3
101089e0:	010e7c80 	call	1010e7c8 <__muldf3>
101089e4:	180b883a 	mov	r5,r3
101089e8:	1009883a 	mov	r4,r2
101089ec:	1829883a 	mov	r20,r3
101089f0:	1025883a 	mov	r18,r2
101089f4:	010f7dc0 	call	1010f7dc <__fixdfsi>
101089f8:	1009883a 	mov	r4,r2
101089fc:	1021883a 	mov	r16,r2
10108a00:	010f85c0 	call	1010f85c <__floatsidf>
10108a04:	100d883a 	mov	r6,r2
10108a08:	180f883a 	mov	r7,r3
10108a0c:	9009883a 	mov	r4,r18
10108a10:	a00b883a 	mov	r5,r20
10108a14:	84000c04 	addi	r16,r16,48
10108a18:	010eee00 	call	1010eee0 <__subdf3>
10108a1c:	ad400044 	addi	r21,r21,1
10108a20:	ac3fffc5 	stb	r16,-1(r21)
10108a24:	ac7fea1e 	bne	r21,r17,101089d0 <__alt_data_end+0xfffe89d0>
10108a28:	1023883a 	mov	r17,r2
10108a2c:	d8801217 	ldw	r2,72(sp)
10108a30:	dc800f17 	ldw	r18,60(sp)
10108a34:	1829883a 	mov	r20,r3
10108a38:	b8af883a 	add	r23,r23,r2
10108a3c:	d9001417 	ldw	r4,80(sp)
10108a40:	d9401517 	ldw	r5,84(sp)
10108a44:	000d883a 	mov	r6,zero
10108a48:	01cff834 	movhi	r7,16352
10108a4c:	010d3dc0 	call	1010d3dc <__adddf3>
10108a50:	880d883a 	mov	r6,r17
10108a54:	a00f883a 	mov	r7,r20
10108a58:	1009883a 	mov	r4,r2
10108a5c:	180b883a 	mov	r5,r3
10108a60:	010e6d40 	call	1010e6d4 <__ledf2>
10108a64:	10003e0e 	bge	r2,zero,10108b60 <_dtoa_r+0x1548>
10108a68:	d9001317 	ldw	r4,76(sp)
10108a6c:	bd3fffc3 	ldbu	r20,-1(r23)
10108a70:	d9000515 	stw	r4,20(sp)
10108a74:	003d3b06 	br	10107f64 <__alt_data_end+0xfffe7f64>
10108a78:	0027883a 	mov	r19,zero
10108a7c:	003f1b06 	br	101086ec <__alt_data_end+0xfffe86ec>
10108a80:	d8800817 	ldw	r2,32(sp)
10108a84:	11e9c83a 	sub	r20,r2,r7
10108a88:	0005883a 	mov	r2,zero
10108a8c:	003d5406 	br	10107fe0 <__alt_data_end+0xfffe7fe0>
10108a90:	00800044 	movi	r2,1
10108a94:	003dc706 	br	101081b4 <__alt_data_end+0xfffe81b4>
10108a98:	d8c00217 	ldw	r3,8(sp)
10108a9c:	00800d84 	movi	r2,54
10108aa0:	dd400a17 	ldw	r21,40(sp)
10108aa4:	10c5c83a 	sub	r2,r2,r3
10108aa8:	dd000817 	ldw	r20,32(sp)
10108aac:	003d4c06 	br	10107fe0 <__alt_data_end+0xfffe7fe0>
10108ab0:	dc800f15 	stw	r18,60(sp)
10108ab4:	dcc01015 	stw	r19,64(sp)
10108ab8:	04000084 	movi	r16,2
10108abc:	003bed06 	br	10107a74 <__alt_data_end+0xfffe7a74>
10108ac0:	d9000617 	ldw	r4,24(sp)
10108ac4:	203f0d26 	beq	r4,zero,101086fc <__alt_data_end+0xfffe86fc>
10108ac8:	d9800c17 	ldw	r6,48(sp)
10108acc:	01bcab0e 	bge	zero,r6,10107d7c <__alt_data_end+0xfffe7d7c>
10108ad0:	d9401017 	ldw	r5,64(sp)
10108ad4:	d9000f17 	ldw	r4,60(sp)
10108ad8:	000d883a 	mov	r6,zero
10108adc:	01d00934 	movhi	r7,16420
10108ae0:	010e7c80 	call	1010e7c8 <__muldf3>
10108ae4:	81000044 	addi	r4,r16,1
10108ae8:	d8800f15 	stw	r2,60(sp)
10108aec:	d8c01015 	stw	r3,64(sp)
10108af0:	010f85c0 	call	1010f85c <__floatsidf>
10108af4:	d9800f17 	ldw	r6,60(sp)
10108af8:	d9c01017 	ldw	r7,64(sp)
10108afc:	1009883a 	mov	r4,r2
10108b00:	180b883a 	mov	r5,r3
10108b04:	010e7c80 	call	1010e7c8 <__muldf3>
10108b08:	01d00734 	movhi	r7,16412
10108b0c:	000d883a 	mov	r6,zero
10108b10:	1009883a 	mov	r4,r2
10108b14:	180b883a 	mov	r5,r3
10108b18:	010d3dc0 	call	1010d3dc <__adddf3>
10108b1c:	d9c00517 	ldw	r7,20(sp)
10108b20:	047f3034 	movhi	r17,64704
10108b24:	1021883a 	mov	r16,r2
10108b28:	39ffffc4 	addi	r7,r7,-1
10108b2c:	d9c01315 	stw	r7,76(sp)
10108b30:	1c63883a 	add	r17,r3,r17
10108b34:	db000c17 	ldw	r12,48(sp)
10108b38:	003bea06 	br	10107ae4 <__alt_data_end+0xfffe7ae4>
10108b3c:	dc000915 	stw	r16,36(sp)
10108b40:	003e0e06 	br	1010837c <__alt_data_end+0xfffe837c>
10108b44:	01000e44 	movi	r4,57
10108b48:	8825883a 	mov	r18,r17
10108b4c:	9dc00044 	addi	r23,r19,1
10108b50:	99000005 	stb	r4,0(r19)
10108b54:	a023883a 	mov	r17,r20
10108b58:	dc000915 	stw	r16,36(sp)
10108b5c:	003da406 	br	101081f0 <__alt_data_end+0xfffe81f0>
10108b60:	d9801417 	ldw	r6,80(sp)
10108b64:	d9c01517 	ldw	r7,84(sp)
10108b68:	0009883a 	mov	r4,zero
10108b6c:	014ff834 	movhi	r5,16352
10108b70:	010eee00 	call	1010eee0 <__subdf3>
10108b74:	880d883a 	mov	r6,r17
10108b78:	a00f883a 	mov	r7,r20
10108b7c:	1009883a 	mov	r4,r2
10108b80:	180b883a 	mov	r5,r3
10108b84:	010e5f80 	call	1010e5f8 <__gedf2>
10108b88:	00bc7c0e 	bge	zero,r2,10107d7c <__alt_data_end+0xfffe7d7c>
10108b8c:	01000c04 	movi	r4,48
10108b90:	00000106 	br	10108b98 <_dtoa_r+0x1580>
10108b94:	102f883a 	mov	r23,r2
10108b98:	b8bfffc4 	addi	r2,r23,-1
10108b9c:	10c00007 	ldb	r3,0(r2)
10108ba0:	193ffc26 	beq	r3,r4,10108b94 <__alt_data_end+0xfffe8b94>
10108ba4:	d9801317 	ldw	r6,76(sp)
10108ba8:	d9800515 	stw	r6,20(sp)
10108bac:	003c4406 	br	10107cc0 <__alt_data_end+0xfffe7cc0>
10108bb0:	d9801317 	ldw	r6,76(sp)
10108bb4:	d9800515 	stw	r6,20(sp)
10108bb8:	003cea06 	br	10107f64 <__alt_data_end+0xfffe7f64>
10108bbc:	dd800f17 	ldw	r22,60(sp)
10108bc0:	dcc01017 	ldw	r19,64(sp)
10108bc4:	dc801217 	ldw	r18,72(sp)
10108bc8:	003c6c06 	br	10107d7c <__alt_data_end+0xfffe7d7c>
10108bcc:	903e031e 	bne	r18,zero,101083dc <__alt_data_end+0xfffe83dc>
10108bd0:	003ebb06 	br	101086c0 <__alt_data_end+0xfffe86c0>
10108bd4:	103e6c1e 	bne	r2,zero,10108588 <__alt_data_end+0xfffe8588>
10108bd8:	4080004c 	andi	r2,r8,1
10108bdc:	103e6a26 	beq	r2,zero,10108588 <__alt_data_end+0xfffe8588>
10108be0:	003e6606 	br	1010857c <__alt_data_end+0xfffe857c>
10108be4:	d8c00317 	ldw	r3,12(sp)
10108be8:	00800084 	movi	r2,2
10108bec:	10c02916 	blt	r2,r3,10108c94 <_dtoa_r+0x167c>
10108bf0:	d9000c17 	ldw	r4,48(sp)
10108bf4:	003e8806 	br	10108618 <__alt_data_end+0xfffe8618>
10108bf8:	04000084 	movi	r16,2
10108bfc:	003b9d06 	br	10107a74 <__alt_data_end+0xfffe7a74>
10108c00:	d9001317 	ldw	r4,76(sp)
10108c04:	d9000515 	stw	r4,20(sp)
10108c08:	003cd606 	br	10107f64 <__alt_data_end+0xfffe7f64>
10108c0c:	d8801317 	ldw	r2,76(sp)
10108c10:	d8800515 	stw	r2,20(sp)
10108c14:	003c2a06 	br	10107cc0 <__alt_data_end+0xfffe7cc0>
10108c18:	d9800317 	ldw	r6,12(sp)
10108c1c:	00800084 	movi	r2,2
10108c20:	11801516 	blt	r2,r6,10108c78 <_dtoa_r+0x1660>
10108c24:	d9c00c17 	ldw	r7,48(sp)
10108c28:	d9c00615 	stw	r7,24(sp)
10108c2c:	003df706 	br	1010840c <__alt_data_end+0xfffe840c>
10108c30:	193d3926 	beq	r3,r4,10108118 <__alt_data_end+0xfffe8118>
10108c34:	00c00f04 	movi	r3,60
10108c38:	1885c83a 	sub	r2,r3,r2
10108c3c:	003ddf06 	br	101083bc <__alt_data_end+0xfffe83bc>
10108c40:	e009883a 	mov	r4,fp
10108c44:	e0001115 	stw	zero,68(fp)
10108c48:	000b883a 	mov	r5,zero
10108c4c:	01097200 	call	10109720 <_Balloc>
10108c50:	d8800715 	stw	r2,28(sp)
10108c54:	d8c00717 	ldw	r3,28(sp)
10108c58:	00bfffc4 	movi	r2,-1
10108c5c:	01000044 	movi	r4,1
10108c60:	d8800c15 	stw	r2,48(sp)
10108c64:	e0c01015 	stw	r3,64(fp)
10108c68:	d9000b15 	stw	r4,44(sp)
10108c6c:	d8800615 	stw	r2,24(sp)
10108c70:	d8002215 	stw	zero,136(sp)
10108c74:	003c4106 	br	10107d7c <__alt_data_end+0xfffe7d7c>
10108c78:	d8c00c17 	ldw	r3,48(sp)
10108c7c:	d8c00615 	stw	r3,24(sp)
10108c80:	003e7006 	br	10108644 <__alt_data_end+0xfffe8644>
10108c84:	04400044 	movi	r17,1
10108c88:	003b2006 	br	1010790c <__alt_data_end+0xfffe790c>
10108c8c:	000b883a 	mov	r5,zero
10108c90:	003b3d06 	br	10107988 <__alt_data_end+0xfffe7988>
10108c94:	d8800c17 	ldw	r2,48(sp)
10108c98:	d8800615 	stw	r2,24(sp)
10108c9c:	003e6906 	br	10108644 <__alt_data_end+0xfffe8644>

10108ca0 <__sflags>:
10108ca0:	28800007 	ldb	r2,0(r5)
10108ca4:	00c01c84 	movi	r3,114
10108ca8:	10c02426 	beq	r2,r3,10108d3c <__sflags+0x9c>
10108cac:	00c01dc4 	movi	r3,119
10108cb0:	10c01e26 	beq	r2,r3,10108d2c <__sflags+0x8c>
10108cb4:	00c01844 	movi	r3,97
10108cb8:	10c00426 	beq	r2,r3,10108ccc <__sflags+0x2c>
10108cbc:	00800584 	movi	r2,22
10108cc0:	20800015 	stw	r2,0(r4)
10108cc4:	0005883a 	mov	r2,zero
10108cc8:	f800283a 	ret
10108ccc:	02c08204 	movi	r11,520
10108cd0:	01000044 	movi	r4,1
10108cd4:	00804204 	movi	r2,264
10108cd8:	01c00ac4 	movi	r7,43
10108cdc:	02bff8c4 	movi	r10,-29
10108ce0:	027fff04 	movi	r9,-4
10108ce4:	02001e04 	movi	r8,120
10108ce8:	29400044 	addi	r5,r5,1
10108cec:	28c00007 	ldb	r3,0(r5)
10108cf0:	18000626 	beq	r3,zero,10108d0c <__sflags+0x6c>
10108cf4:	19c00826 	beq	r3,r7,10108d18 <__sflags+0x78>
10108cf8:	1a3ffb1e 	bne	r3,r8,10108ce8 <__alt_data_end+0xfffe8ce8>
10108cfc:	29400044 	addi	r5,r5,1
10108d00:	28c00007 	ldb	r3,0(r5)
10108d04:	21020014 	ori	r4,r4,2048
10108d08:	183ffa1e 	bne	r3,zero,10108cf4 <__alt_data_end+0xfffe8cf4>
10108d0c:	22c8b03a 	or	r4,r4,r11
10108d10:	31000015 	stw	r4,0(r6)
10108d14:	f800283a 	ret
10108d18:	1284703a 	and	r2,r2,r10
10108d1c:	2248703a 	and	r4,r4,r9
10108d20:	10800414 	ori	r2,r2,16
10108d24:	21000094 	ori	r4,r4,2
10108d28:	003fef06 	br	10108ce8 <__alt_data_end+0xfffe8ce8>
10108d2c:	02c18004 	movi	r11,1536
10108d30:	01000044 	movi	r4,1
10108d34:	00800204 	movi	r2,8
10108d38:	003fe706 	br	10108cd8 <__alt_data_end+0xfffe8cd8>
10108d3c:	0017883a 	mov	r11,zero
10108d40:	0009883a 	mov	r4,zero
10108d44:	00800104 	movi	r2,4
10108d48:	003fe306 	br	10108cd8 <__alt_data_end+0xfffe8cd8>

10108d4c <__sfvwrite_r>:
10108d4c:	30800217 	ldw	r2,8(r6)
10108d50:	10006726 	beq	r2,zero,10108ef0 <__sfvwrite_r+0x1a4>
10108d54:	28c0030b 	ldhu	r3,12(r5)
10108d58:	defff404 	addi	sp,sp,-48
10108d5c:	dd400715 	stw	r21,28(sp)
10108d60:	dd000615 	stw	r20,24(sp)
10108d64:	dc000215 	stw	r16,8(sp)
10108d68:	dfc00b15 	stw	ra,44(sp)
10108d6c:	df000a15 	stw	fp,40(sp)
10108d70:	ddc00915 	stw	r23,36(sp)
10108d74:	dd800815 	stw	r22,32(sp)
10108d78:	dcc00515 	stw	r19,20(sp)
10108d7c:	dc800415 	stw	r18,16(sp)
10108d80:	dc400315 	stw	r17,12(sp)
10108d84:	1880020c 	andi	r2,r3,8
10108d88:	2821883a 	mov	r16,r5
10108d8c:	202b883a 	mov	r21,r4
10108d90:	3029883a 	mov	r20,r6
10108d94:	10002726 	beq	r2,zero,10108e34 <__sfvwrite_r+0xe8>
10108d98:	28800417 	ldw	r2,16(r5)
10108d9c:	10002526 	beq	r2,zero,10108e34 <__sfvwrite_r+0xe8>
10108da0:	1880008c 	andi	r2,r3,2
10108da4:	a4400017 	ldw	r17,0(r20)
10108da8:	10002a26 	beq	r2,zero,10108e54 <__sfvwrite_r+0x108>
10108dac:	05a00034 	movhi	r22,32768
10108db0:	0027883a 	mov	r19,zero
10108db4:	0025883a 	mov	r18,zero
10108db8:	b5bf0004 	addi	r22,r22,-1024
10108dbc:	980d883a 	mov	r6,r19
10108dc0:	a809883a 	mov	r4,r21
10108dc4:	90004626 	beq	r18,zero,10108ee0 <__sfvwrite_r+0x194>
10108dc8:	900f883a 	mov	r7,r18
10108dcc:	b480022e 	bgeu	r22,r18,10108dd8 <__sfvwrite_r+0x8c>
10108dd0:	01e00034 	movhi	r7,32768
10108dd4:	39ff0004 	addi	r7,r7,-1024
10108dd8:	80800917 	ldw	r2,36(r16)
10108ddc:	81400717 	ldw	r5,28(r16)
10108de0:	103ee83a 	callr	r2
10108de4:	0080570e 	bge	zero,r2,10108f44 <__sfvwrite_r+0x1f8>
10108de8:	a0c00217 	ldw	r3,8(r20)
10108dec:	98a7883a 	add	r19,r19,r2
10108df0:	90a5c83a 	sub	r18,r18,r2
10108df4:	1885c83a 	sub	r2,r3,r2
10108df8:	a0800215 	stw	r2,8(r20)
10108dfc:	103fef1e 	bne	r2,zero,10108dbc <__alt_data_end+0xfffe8dbc>
10108e00:	0005883a 	mov	r2,zero
10108e04:	dfc00b17 	ldw	ra,44(sp)
10108e08:	df000a17 	ldw	fp,40(sp)
10108e0c:	ddc00917 	ldw	r23,36(sp)
10108e10:	dd800817 	ldw	r22,32(sp)
10108e14:	dd400717 	ldw	r21,28(sp)
10108e18:	dd000617 	ldw	r20,24(sp)
10108e1c:	dcc00517 	ldw	r19,20(sp)
10108e20:	dc800417 	ldw	r18,16(sp)
10108e24:	dc400317 	ldw	r17,12(sp)
10108e28:	dc000217 	ldw	r16,8(sp)
10108e2c:	dec00c04 	addi	sp,sp,48
10108e30:	f800283a 	ret
10108e34:	800b883a 	mov	r5,r16
10108e38:	a809883a 	mov	r4,r21
10108e3c:	01072700 	call	10107270 <__swsetup_r>
10108e40:	1000eb1e 	bne	r2,zero,101091f0 <__sfvwrite_r+0x4a4>
10108e44:	80c0030b 	ldhu	r3,12(r16)
10108e48:	a4400017 	ldw	r17,0(r20)
10108e4c:	1880008c 	andi	r2,r3,2
10108e50:	103fd61e 	bne	r2,zero,10108dac <__alt_data_end+0xfffe8dac>
10108e54:	1880004c 	andi	r2,r3,1
10108e58:	10003f1e 	bne	r2,zero,10108f58 <__sfvwrite_r+0x20c>
10108e5c:	0039883a 	mov	fp,zero
10108e60:	0025883a 	mov	r18,zero
10108e64:	90001a26 	beq	r18,zero,10108ed0 <__sfvwrite_r+0x184>
10108e68:	1880800c 	andi	r2,r3,512
10108e6c:	84c00217 	ldw	r19,8(r16)
10108e70:	10002126 	beq	r2,zero,10108ef8 <__sfvwrite_r+0x1ac>
10108e74:	982f883a 	mov	r23,r19
10108e78:	94c09336 	bltu	r18,r19,101090c8 <__sfvwrite_r+0x37c>
10108e7c:	1881200c 	andi	r2,r3,1152
10108e80:	10009e1e 	bne	r2,zero,101090fc <__sfvwrite_r+0x3b0>
10108e84:	81000017 	ldw	r4,0(r16)
10108e88:	b80d883a 	mov	r6,r23
10108e8c:	e00b883a 	mov	r5,fp
10108e90:	01095c40 	call	101095c4 <memmove>
10108e94:	80c00217 	ldw	r3,8(r16)
10108e98:	81000017 	ldw	r4,0(r16)
10108e9c:	9005883a 	mov	r2,r18
10108ea0:	1ce7c83a 	sub	r19,r3,r19
10108ea4:	25cf883a 	add	r7,r4,r23
10108ea8:	84c00215 	stw	r19,8(r16)
10108eac:	81c00015 	stw	r7,0(r16)
10108eb0:	a0c00217 	ldw	r3,8(r20)
10108eb4:	e0b9883a 	add	fp,fp,r2
10108eb8:	90a5c83a 	sub	r18,r18,r2
10108ebc:	18a7c83a 	sub	r19,r3,r2
10108ec0:	a4c00215 	stw	r19,8(r20)
10108ec4:	983fce26 	beq	r19,zero,10108e00 <__alt_data_end+0xfffe8e00>
10108ec8:	80c0030b 	ldhu	r3,12(r16)
10108ecc:	903fe61e 	bne	r18,zero,10108e68 <__alt_data_end+0xfffe8e68>
10108ed0:	8f000017 	ldw	fp,0(r17)
10108ed4:	8c800117 	ldw	r18,4(r17)
10108ed8:	8c400204 	addi	r17,r17,8
10108edc:	003fe106 	br	10108e64 <__alt_data_end+0xfffe8e64>
10108ee0:	8cc00017 	ldw	r19,0(r17)
10108ee4:	8c800117 	ldw	r18,4(r17)
10108ee8:	8c400204 	addi	r17,r17,8
10108eec:	003fb306 	br	10108dbc <__alt_data_end+0xfffe8dbc>
10108ef0:	0005883a 	mov	r2,zero
10108ef4:	f800283a 	ret
10108ef8:	81000017 	ldw	r4,0(r16)
10108efc:	80800417 	ldw	r2,16(r16)
10108f00:	11005736 	bltu	r2,r4,10109060 <__sfvwrite_r+0x314>
10108f04:	85c00517 	ldw	r23,20(r16)
10108f08:	95c05536 	bltu	r18,r23,10109060 <__sfvwrite_r+0x314>
10108f0c:	00a00034 	movhi	r2,32768
10108f10:	10bfffc4 	addi	r2,r2,-1
10108f14:	9009883a 	mov	r4,r18
10108f18:	1480012e 	bgeu	r2,r18,10108f20 <__sfvwrite_r+0x1d4>
10108f1c:	1009883a 	mov	r4,r2
10108f20:	b80b883a 	mov	r5,r23
10108f24:	01025480 	call	10102548 <__divsi3>
10108f28:	15cf383a 	mul	r7,r2,r23
10108f2c:	81400717 	ldw	r5,28(r16)
10108f30:	80800917 	ldw	r2,36(r16)
10108f34:	e00d883a 	mov	r6,fp
10108f38:	a809883a 	mov	r4,r21
10108f3c:	103ee83a 	callr	r2
10108f40:	00bfdb16 	blt	zero,r2,10108eb0 <__alt_data_end+0xfffe8eb0>
10108f44:	8080030b 	ldhu	r2,12(r16)
10108f48:	10801014 	ori	r2,r2,64
10108f4c:	8080030d 	sth	r2,12(r16)
10108f50:	00bfffc4 	movi	r2,-1
10108f54:	003fab06 	br	10108e04 <__alt_data_end+0xfffe8e04>
10108f58:	0027883a 	mov	r19,zero
10108f5c:	0011883a 	mov	r8,zero
10108f60:	0039883a 	mov	fp,zero
10108f64:	0025883a 	mov	r18,zero
10108f68:	90001f26 	beq	r18,zero,10108fe8 <__sfvwrite_r+0x29c>
10108f6c:	40005a26 	beq	r8,zero,101090d8 <__sfvwrite_r+0x38c>
10108f70:	982d883a 	mov	r22,r19
10108f74:	94c0012e 	bgeu	r18,r19,10108f7c <__sfvwrite_r+0x230>
10108f78:	902d883a 	mov	r22,r18
10108f7c:	81000017 	ldw	r4,0(r16)
10108f80:	80800417 	ldw	r2,16(r16)
10108f84:	b02f883a 	mov	r23,r22
10108f88:	81c00517 	ldw	r7,20(r16)
10108f8c:	1100032e 	bgeu	r2,r4,10108f9c <__sfvwrite_r+0x250>
10108f90:	80c00217 	ldw	r3,8(r16)
10108f94:	38c7883a 	add	r3,r7,r3
10108f98:	1d801816 	blt	r3,r22,10108ffc <__sfvwrite_r+0x2b0>
10108f9c:	b1c03e16 	blt	r22,r7,10109098 <__sfvwrite_r+0x34c>
10108fa0:	80800917 	ldw	r2,36(r16)
10108fa4:	81400717 	ldw	r5,28(r16)
10108fa8:	e00d883a 	mov	r6,fp
10108fac:	da000115 	stw	r8,4(sp)
10108fb0:	a809883a 	mov	r4,r21
10108fb4:	103ee83a 	callr	r2
10108fb8:	102f883a 	mov	r23,r2
10108fbc:	da000117 	ldw	r8,4(sp)
10108fc0:	00bfe00e 	bge	zero,r2,10108f44 <__alt_data_end+0xfffe8f44>
10108fc4:	9de7c83a 	sub	r19,r19,r23
10108fc8:	98001f26 	beq	r19,zero,10109048 <__sfvwrite_r+0x2fc>
10108fcc:	a0800217 	ldw	r2,8(r20)
10108fd0:	e5f9883a 	add	fp,fp,r23
10108fd4:	95e5c83a 	sub	r18,r18,r23
10108fd8:	15efc83a 	sub	r23,r2,r23
10108fdc:	a5c00215 	stw	r23,8(r20)
10108fe0:	b83f8726 	beq	r23,zero,10108e00 <__alt_data_end+0xfffe8e00>
10108fe4:	903fe11e 	bne	r18,zero,10108f6c <__alt_data_end+0xfffe8f6c>
10108fe8:	8f000017 	ldw	fp,0(r17)
10108fec:	8c800117 	ldw	r18,4(r17)
10108ff0:	0011883a 	mov	r8,zero
10108ff4:	8c400204 	addi	r17,r17,8
10108ff8:	003fdb06 	br	10108f68 <__alt_data_end+0xfffe8f68>
10108ffc:	180d883a 	mov	r6,r3
10109000:	e00b883a 	mov	r5,fp
10109004:	da000115 	stw	r8,4(sp)
10109008:	d8c00015 	stw	r3,0(sp)
1010900c:	01095c40 	call	101095c4 <memmove>
10109010:	d8c00017 	ldw	r3,0(sp)
10109014:	80800017 	ldw	r2,0(r16)
10109018:	800b883a 	mov	r5,r16
1010901c:	a809883a 	mov	r4,r21
10109020:	10c5883a 	add	r2,r2,r3
10109024:	80800015 	stw	r2,0(r16)
10109028:	d8c00015 	stw	r3,0(sp)
1010902c:	0102a1c0 	call	10102a1c <_fflush_r>
10109030:	d8c00017 	ldw	r3,0(sp)
10109034:	da000117 	ldw	r8,4(sp)
10109038:	103fc21e 	bne	r2,zero,10108f44 <__alt_data_end+0xfffe8f44>
1010903c:	182f883a 	mov	r23,r3
10109040:	9de7c83a 	sub	r19,r19,r23
10109044:	983fe11e 	bne	r19,zero,10108fcc <__alt_data_end+0xfffe8fcc>
10109048:	800b883a 	mov	r5,r16
1010904c:	a809883a 	mov	r4,r21
10109050:	0102a1c0 	call	10102a1c <_fflush_r>
10109054:	103fbb1e 	bne	r2,zero,10108f44 <__alt_data_end+0xfffe8f44>
10109058:	0011883a 	mov	r8,zero
1010905c:	003fdb06 	br	10108fcc <__alt_data_end+0xfffe8fcc>
10109060:	94c0012e 	bgeu	r18,r19,10109068 <__sfvwrite_r+0x31c>
10109064:	9027883a 	mov	r19,r18
10109068:	980d883a 	mov	r6,r19
1010906c:	e00b883a 	mov	r5,fp
10109070:	01095c40 	call	101095c4 <memmove>
10109074:	80800217 	ldw	r2,8(r16)
10109078:	80c00017 	ldw	r3,0(r16)
1010907c:	14c5c83a 	sub	r2,r2,r19
10109080:	1cc7883a 	add	r3,r3,r19
10109084:	80800215 	stw	r2,8(r16)
10109088:	80c00015 	stw	r3,0(r16)
1010908c:	10004326 	beq	r2,zero,1010919c <__sfvwrite_r+0x450>
10109090:	9805883a 	mov	r2,r19
10109094:	003f8606 	br	10108eb0 <__alt_data_end+0xfffe8eb0>
10109098:	b00d883a 	mov	r6,r22
1010909c:	e00b883a 	mov	r5,fp
101090a0:	da000115 	stw	r8,4(sp)
101090a4:	01095c40 	call	101095c4 <memmove>
101090a8:	80800217 	ldw	r2,8(r16)
101090ac:	80c00017 	ldw	r3,0(r16)
101090b0:	da000117 	ldw	r8,4(sp)
101090b4:	1585c83a 	sub	r2,r2,r22
101090b8:	1dad883a 	add	r22,r3,r22
101090bc:	80800215 	stw	r2,8(r16)
101090c0:	85800015 	stw	r22,0(r16)
101090c4:	003fbf06 	br	10108fc4 <__alt_data_end+0xfffe8fc4>
101090c8:	81000017 	ldw	r4,0(r16)
101090cc:	9027883a 	mov	r19,r18
101090d0:	902f883a 	mov	r23,r18
101090d4:	003f6c06 	br	10108e88 <__alt_data_end+0xfffe8e88>
101090d8:	900d883a 	mov	r6,r18
101090dc:	01400284 	movi	r5,10
101090e0:	e009883a 	mov	r4,fp
101090e4:	01093980 	call	10109398 <memchr>
101090e8:	10003e26 	beq	r2,zero,101091e4 <__sfvwrite_r+0x498>
101090ec:	10800044 	addi	r2,r2,1
101090f0:	1727c83a 	sub	r19,r2,fp
101090f4:	02000044 	movi	r8,1
101090f8:	003f9d06 	br	10108f70 <__alt_data_end+0xfffe8f70>
101090fc:	80800517 	ldw	r2,20(r16)
10109100:	81400417 	ldw	r5,16(r16)
10109104:	81c00017 	ldw	r7,0(r16)
10109108:	10a7883a 	add	r19,r2,r2
1010910c:	9885883a 	add	r2,r19,r2
10109110:	1026d7fa 	srli	r19,r2,31
10109114:	396dc83a 	sub	r22,r7,r5
10109118:	b1000044 	addi	r4,r22,1
1010911c:	9885883a 	add	r2,r19,r2
10109120:	1027d07a 	srai	r19,r2,1
10109124:	2485883a 	add	r2,r4,r18
10109128:	980d883a 	mov	r6,r19
1010912c:	9880022e 	bgeu	r19,r2,10109138 <__sfvwrite_r+0x3ec>
10109130:	1027883a 	mov	r19,r2
10109134:	100d883a 	mov	r6,r2
10109138:	18c1000c 	andi	r3,r3,1024
1010913c:	18001c26 	beq	r3,zero,101091b0 <__sfvwrite_r+0x464>
10109140:	300b883a 	mov	r5,r6
10109144:	a809883a 	mov	r4,r21
10109148:	0103d940 	call	10103d94 <_malloc_r>
1010914c:	102f883a 	mov	r23,r2
10109150:	10002926 	beq	r2,zero,101091f8 <__sfvwrite_r+0x4ac>
10109154:	81400417 	ldw	r5,16(r16)
10109158:	b00d883a 	mov	r6,r22
1010915c:	1009883a 	mov	r4,r2
10109160:	010947c0 	call	1010947c <memcpy>
10109164:	8080030b 	ldhu	r2,12(r16)
10109168:	00fedfc4 	movi	r3,-1153
1010916c:	10c4703a 	and	r2,r2,r3
10109170:	10802014 	ori	r2,r2,128
10109174:	8080030d 	sth	r2,12(r16)
10109178:	bd89883a 	add	r4,r23,r22
1010917c:	9d8fc83a 	sub	r7,r19,r22
10109180:	85c00415 	stw	r23,16(r16)
10109184:	84c00515 	stw	r19,20(r16)
10109188:	81000015 	stw	r4,0(r16)
1010918c:	9027883a 	mov	r19,r18
10109190:	81c00215 	stw	r7,8(r16)
10109194:	902f883a 	mov	r23,r18
10109198:	003f3b06 	br	10108e88 <__alt_data_end+0xfffe8e88>
1010919c:	800b883a 	mov	r5,r16
101091a0:	a809883a 	mov	r4,r21
101091a4:	0102a1c0 	call	10102a1c <_fflush_r>
101091a8:	103fb926 	beq	r2,zero,10109090 <__alt_data_end+0xfffe9090>
101091ac:	003f6506 	br	10108f44 <__alt_data_end+0xfffe8f44>
101091b0:	a809883a 	mov	r4,r21
101091b4:	010a77c0 	call	1010a77c <_realloc_r>
101091b8:	102f883a 	mov	r23,r2
101091bc:	103fee1e 	bne	r2,zero,10109178 <__alt_data_end+0xfffe9178>
101091c0:	81400417 	ldw	r5,16(r16)
101091c4:	a809883a 	mov	r4,r21
101091c8:	01031640 	call	10103164 <_free_r>
101091cc:	8080030b 	ldhu	r2,12(r16)
101091d0:	00ffdfc4 	movi	r3,-129
101091d4:	1884703a 	and	r2,r3,r2
101091d8:	00c00304 	movi	r3,12
101091dc:	a8c00015 	stw	r3,0(r21)
101091e0:	003f5906 	br	10108f48 <__alt_data_end+0xfffe8f48>
101091e4:	94c00044 	addi	r19,r18,1
101091e8:	02000044 	movi	r8,1
101091ec:	003f6006 	br	10108f70 <__alt_data_end+0xfffe8f70>
101091f0:	00bfffc4 	movi	r2,-1
101091f4:	003f0306 	br	10108e04 <__alt_data_end+0xfffe8e04>
101091f8:	00800304 	movi	r2,12
101091fc:	a8800015 	stw	r2,0(r21)
10109200:	8080030b 	ldhu	r2,12(r16)
10109204:	003f5006 	br	10108f48 <__alt_data_end+0xfffe8f48>

10109208 <_isatty_r>:
10109208:	defffd04 	addi	sp,sp,-12
1010920c:	dc000015 	stw	r16,0(sp)
10109210:	04040474 	movhi	r16,4113
10109214:	dc400115 	stw	r17,4(sp)
10109218:	84188004 	addi	r16,r16,25088
1010921c:	2023883a 	mov	r17,r4
10109220:	2809883a 	mov	r4,r5
10109224:	dfc00215 	stw	ra,8(sp)
10109228:	80000015 	stw	zero,0(r16)
1010922c:	010fca40 	call	1010fca4 <isatty>
10109230:	00ffffc4 	movi	r3,-1
10109234:	10c00526 	beq	r2,r3,1010924c <_isatty_r+0x44>
10109238:	dfc00217 	ldw	ra,8(sp)
1010923c:	dc400117 	ldw	r17,4(sp)
10109240:	dc000017 	ldw	r16,0(sp)
10109244:	dec00304 	addi	sp,sp,12
10109248:	f800283a 	ret
1010924c:	80c00017 	ldw	r3,0(r16)
10109250:	183ff926 	beq	r3,zero,10109238 <__alt_data_end+0xfffe9238>
10109254:	88c00015 	stw	r3,0(r17)
10109258:	003ff706 	br	10109238 <__alt_data_end+0xfffe9238>

1010925c <_setlocale_r>:
1010925c:	30001b26 	beq	r6,zero,101092cc <_setlocale_r+0x70>
10109260:	01440474 	movhi	r5,4113
10109264:	defffe04 	addi	sp,sp,-8
10109268:	294a2e04 	addi	r5,r5,10424
1010926c:	3009883a 	mov	r4,r6
10109270:	dc000015 	stw	r16,0(sp)
10109274:	dfc00115 	stw	ra,4(sp)
10109278:	3021883a 	mov	r16,r6
1010927c:	010ad540 	call	1010ad54 <strcmp>
10109280:	1000061e 	bne	r2,zero,1010929c <_setlocale_r+0x40>
10109284:	00840474 	movhi	r2,4113
10109288:	108a0f04 	addi	r2,r2,10300
1010928c:	dfc00117 	ldw	ra,4(sp)
10109290:	dc000017 	ldw	r16,0(sp)
10109294:	dec00204 	addi	sp,sp,8
10109298:	f800283a 	ret
1010929c:	01440474 	movhi	r5,4113
101092a0:	294a0f04 	addi	r5,r5,10300
101092a4:	8009883a 	mov	r4,r16
101092a8:	010ad540 	call	1010ad54 <strcmp>
101092ac:	103ff526 	beq	r2,zero,10109284 <__alt_data_end+0xfffe9284>
101092b0:	01440474 	movhi	r5,4113
101092b4:	294a1904 	addi	r5,r5,10340
101092b8:	8009883a 	mov	r4,r16
101092bc:	010ad540 	call	1010ad54 <strcmp>
101092c0:	103ff026 	beq	r2,zero,10109284 <__alt_data_end+0xfffe9284>
101092c4:	0005883a 	mov	r2,zero
101092c8:	003ff006 	br	1010928c <__alt_data_end+0xfffe928c>
101092cc:	00840474 	movhi	r2,4113
101092d0:	108a0f04 	addi	r2,r2,10300
101092d4:	f800283a 	ret

101092d8 <__locale_charset>:
101092d8:	00840474 	movhi	r2,4113
101092dc:	108ce504 	addi	r2,r2,13204
101092e0:	f800283a 	ret

101092e4 <__locale_mb_cur_max>:
101092e4:	00840474 	movhi	r2,4113
101092e8:	10918b04 	addi	r2,r2,17964
101092ec:	10800017 	ldw	r2,0(r2)
101092f0:	f800283a 	ret

101092f4 <__locale_msgcharset>:
101092f4:	00840474 	movhi	r2,4113
101092f8:	108cdd04 	addi	r2,r2,13172
101092fc:	f800283a 	ret

10109300 <__locale_cjk_lang>:
10109300:	0005883a 	mov	r2,zero
10109304:	f800283a 	ret

10109308 <_localeconv_r>:
10109308:	00840474 	movhi	r2,4113
1010930c:	108ced04 	addi	r2,r2,13236
10109310:	f800283a 	ret

10109314 <setlocale>:
10109314:	00840474 	movhi	r2,4113
10109318:	10918804 	addi	r2,r2,17952
1010931c:	280d883a 	mov	r6,r5
10109320:	200b883a 	mov	r5,r4
10109324:	11000017 	ldw	r4,0(r2)
10109328:	010925c1 	jmpi	1010925c <_setlocale_r>

1010932c <localeconv>:
1010932c:	00840474 	movhi	r2,4113
10109330:	108ced04 	addi	r2,r2,13236
10109334:	f800283a 	ret

10109338 <_lseek_r>:
10109338:	defffd04 	addi	sp,sp,-12
1010933c:	2805883a 	mov	r2,r5
10109340:	dc000015 	stw	r16,0(sp)
10109344:	04040474 	movhi	r16,4113
10109348:	dc400115 	stw	r17,4(sp)
1010934c:	300b883a 	mov	r5,r6
10109350:	84188004 	addi	r16,r16,25088
10109354:	2023883a 	mov	r17,r4
10109358:	380d883a 	mov	r6,r7
1010935c:	1009883a 	mov	r4,r2
10109360:	dfc00215 	stw	ra,8(sp)
10109364:	80000015 	stw	zero,0(r16)
10109368:	010fe700 	call	1010fe70 <lseek>
1010936c:	00ffffc4 	movi	r3,-1
10109370:	10c00526 	beq	r2,r3,10109388 <_lseek_r+0x50>
10109374:	dfc00217 	ldw	ra,8(sp)
10109378:	dc400117 	ldw	r17,4(sp)
1010937c:	dc000017 	ldw	r16,0(sp)
10109380:	dec00304 	addi	sp,sp,12
10109384:	f800283a 	ret
10109388:	80c00017 	ldw	r3,0(r16)
1010938c:	183ff926 	beq	r3,zero,10109374 <__alt_data_end+0xfffe9374>
10109390:	88c00015 	stw	r3,0(r17)
10109394:	003ff706 	br	10109374 <__alt_data_end+0xfffe9374>

10109398 <memchr>:
10109398:	208000cc 	andi	r2,r4,3
1010939c:	280f883a 	mov	r7,r5
101093a0:	10003426 	beq	r2,zero,10109474 <memchr+0xdc>
101093a4:	30bfffc4 	addi	r2,r6,-1
101093a8:	30001a26 	beq	r6,zero,10109414 <memchr+0x7c>
101093ac:	20c00003 	ldbu	r3,0(r4)
101093b0:	29803fcc 	andi	r6,r5,255
101093b4:	30c0051e 	bne	r6,r3,101093cc <memchr+0x34>
101093b8:	00001806 	br	1010941c <memchr+0x84>
101093bc:	10001526 	beq	r2,zero,10109414 <memchr+0x7c>
101093c0:	20c00003 	ldbu	r3,0(r4)
101093c4:	10bfffc4 	addi	r2,r2,-1
101093c8:	30c01426 	beq	r6,r3,1010941c <memchr+0x84>
101093cc:	21000044 	addi	r4,r4,1
101093d0:	20c000cc 	andi	r3,r4,3
101093d4:	183ff91e 	bne	r3,zero,101093bc <__alt_data_end+0xfffe93bc>
101093d8:	020000c4 	movi	r8,3
101093dc:	40801136 	bltu	r8,r2,10109424 <memchr+0x8c>
101093e0:	10000c26 	beq	r2,zero,10109414 <memchr+0x7c>
101093e4:	20c00003 	ldbu	r3,0(r4)
101093e8:	29403fcc 	andi	r5,r5,255
101093ec:	28c00b26 	beq	r5,r3,1010941c <memchr+0x84>
101093f0:	20c00044 	addi	r3,r4,1
101093f4:	39803fcc 	andi	r6,r7,255
101093f8:	2089883a 	add	r4,r4,r2
101093fc:	00000306 	br	1010940c <memchr+0x74>
10109400:	18c00044 	addi	r3,r3,1
10109404:	197fffc3 	ldbu	r5,-1(r3)
10109408:	31400526 	beq	r6,r5,10109420 <memchr+0x88>
1010940c:	1805883a 	mov	r2,r3
10109410:	20fffb1e 	bne	r4,r3,10109400 <__alt_data_end+0xfffe9400>
10109414:	0005883a 	mov	r2,zero
10109418:	f800283a 	ret
1010941c:	2005883a 	mov	r2,r4
10109420:	f800283a 	ret
10109424:	28c03fcc 	andi	r3,r5,255
10109428:	1812923a 	slli	r9,r3,8
1010942c:	02ffbff4 	movhi	r11,65279
10109430:	02a02074 	movhi	r10,32897
10109434:	48d2b03a 	or	r9,r9,r3
10109438:	4806943a 	slli	r3,r9,16
1010943c:	5affbfc4 	addi	r11,r11,-257
10109440:	52a02004 	addi	r10,r10,-32640
10109444:	48d2b03a 	or	r9,r9,r3
10109448:	20c00017 	ldw	r3,0(r4)
1010944c:	48c6f03a 	xor	r3,r9,r3
10109450:	1acd883a 	add	r6,r3,r11
10109454:	00c6303a 	nor	r3,zero,r3
10109458:	30c6703a 	and	r3,r6,r3
1010945c:	1a86703a 	and	r3,r3,r10
10109460:	183fe01e 	bne	r3,zero,101093e4 <__alt_data_end+0xfffe93e4>
10109464:	10bfff04 	addi	r2,r2,-4
10109468:	21000104 	addi	r4,r4,4
1010946c:	40bff636 	bltu	r8,r2,10109448 <__alt_data_end+0xfffe9448>
10109470:	003fdb06 	br	101093e0 <__alt_data_end+0xfffe93e0>
10109474:	3005883a 	mov	r2,r6
10109478:	003fd706 	br	101093d8 <__alt_data_end+0xfffe93d8>

1010947c <memcpy>:
1010947c:	defffd04 	addi	sp,sp,-12
10109480:	dfc00215 	stw	ra,8(sp)
10109484:	dc400115 	stw	r17,4(sp)
10109488:	dc000015 	stw	r16,0(sp)
1010948c:	00c003c4 	movi	r3,15
10109490:	2005883a 	mov	r2,r4
10109494:	1980452e 	bgeu	r3,r6,101095ac <memcpy+0x130>
10109498:	2906b03a 	or	r3,r5,r4
1010949c:	18c000cc 	andi	r3,r3,3
101094a0:	1800441e 	bne	r3,zero,101095b4 <memcpy+0x138>
101094a4:	347ffc04 	addi	r17,r6,-16
101094a8:	8822d13a 	srli	r17,r17,4
101094ac:	28c00104 	addi	r3,r5,4
101094b0:	23400104 	addi	r13,r4,4
101094b4:	8820913a 	slli	r16,r17,4
101094b8:	2b000204 	addi	r12,r5,8
101094bc:	22c00204 	addi	r11,r4,8
101094c0:	84000504 	addi	r16,r16,20
101094c4:	2a800304 	addi	r10,r5,12
101094c8:	22400304 	addi	r9,r4,12
101094cc:	2c21883a 	add	r16,r5,r16
101094d0:	2811883a 	mov	r8,r5
101094d4:	200f883a 	mov	r7,r4
101094d8:	41000017 	ldw	r4,0(r8)
101094dc:	1fc00017 	ldw	ra,0(r3)
101094e0:	63c00017 	ldw	r15,0(r12)
101094e4:	39000015 	stw	r4,0(r7)
101094e8:	53800017 	ldw	r14,0(r10)
101094ec:	6fc00015 	stw	ra,0(r13)
101094f0:	5bc00015 	stw	r15,0(r11)
101094f4:	4b800015 	stw	r14,0(r9)
101094f8:	18c00404 	addi	r3,r3,16
101094fc:	39c00404 	addi	r7,r7,16
10109500:	42000404 	addi	r8,r8,16
10109504:	6b400404 	addi	r13,r13,16
10109508:	63000404 	addi	r12,r12,16
1010950c:	5ac00404 	addi	r11,r11,16
10109510:	52800404 	addi	r10,r10,16
10109514:	4a400404 	addi	r9,r9,16
10109518:	1c3fef1e 	bne	r3,r16,101094d8 <__alt_data_end+0xfffe94d8>
1010951c:	89c00044 	addi	r7,r17,1
10109520:	380e913a 	slli	r7,r7,4
10109524:	310003cc 	andi	r4,r6,15
10109528:	02c000c4 	movi	r11,3
1010952c:	11c7883a 	add	r3,r2,r7
10109530:	29cb883a 	add	r5,r5,r7
10109534:	5900212e 	bgeu	r11,r4,101095bc <memcpy+0x140>
10109538:	1813883a 	mov	r9,r3
1010953c:	2811883a 	mov	r8,r5
10109540:	200f883a 	mov	r7,r4
10109544:	42800017 	ldw	r10,0(r8)
10109548:	4a400104 	addi	r9,r9,4
1010954c:	39ffff04 	addi	r7,r7,-4
10109550:	4abfff15 	stw	r10,-4(r9)
10109554:	42000104 	addi	r8,r8,4
10109558:	59fffa36 	bltu	r11,r7,10109544 <__alt_data_end+0xfffe9544>
1010955c:	213fff04 	addi	r4,r4,-4
10109560:	2008d0ba 	srli	r4,r4,2
10109564:	318000cc 	andi	r6,r6,3
10109568:	21000044 	addi	r4,r4,1
1010956c:	2109883a 	add	r4,r4,r4
10109570:	2109883a 	add	r4,r4,r4
10109574:	1907883a 	add	r3,r3,r4
10109578:	290b883a 	add	r5,r5,r4
1010957c:	30000626 	beq	r6,zero,10109598 <memcpy+0x11c>
10109580:	198d883a 	add	r6,r3,r6
10109584:	29c00003 	ldbu	r7,0(r5)
10109588:	18c00044 	addi	r3,r3,1
1010958c:	29400044 	addi	r5,r5,1
10109590:	19ffffc5 	stb	r7,-1(r3)
10109594:	19bffb1e 	bne	r3,r6,10109584 <__alt_data_end+0xfffe9584>
10109598:	dfc00217 	ldw	ra,8(sp)
1010959c:	dc400117 	ldw	r17,4(sp)
101095a0:	dc000017 	ldw	r16,0(sp)
101095a4:	dec00304 	addi	sp,sp,12
101095a8:	f800283a 	ret
101095ac:	2007883a 	mov	r3,r4
101095b0:	003ff206 	br	1010957c <__alt_data_end+0xfffe957c>
101095b4:	2007883a 	mov	r3,r4
101095b8:	003ff106 	br	10109580 <__alt_data_end+0xfffe9580>
101095bc:	200d883a 	mov	r6,r4
101095c0:	003fee06 	br	1010957c <__alt_data_end+0xfffe957c>

101095c4 <memmove>:
101095c4:	2005883a 	mov	r2,r4
101095c8:	29000b2e 	bgeu	r5,r4,101095f8 <memmove+0x34>
101095cc:	298f883a 	add	r7,r5,r6
101095d0:	21c0092e 	bgeu	r4,r7,101095f8 <memmove+0x34>
101095d4:	2187883a 	add	r3,r4,r6
101095d8:	198bc83a 	sub	r5,r3,r6
101095dc:	30004826 	beq	r6,zero,10109700 <memmove+0x13c>
101095e0:	39ffffc4 	addi	r7,r7,-1
101095e4:	39000003 	ldbu	r4,0(r7)
101095e8:	18ffffc4 	addi	r3,r3,-1
101095ec:	19000005 	stb	r4,0(r3)
101095f0:	28fffb1e 	bne	r5,r3,101095e0 <__alt_data_end+0xfffe95e0>
101095f4:	f800283a 	ret
101095f8:	00c003c4 	movi	r3,15
101095fc:	1980412e 	bgeu	r3,r6,10109704 <memmove+0x140>
10109600:	2886b03a 	or	r3,r5,r2
10109604:	18c000cc 	andi	r3,r3,3
10109608:	1800401e 	bne	r3,zero,1010970c <memmove+0x148>
1010960c:	33fffc04 	addi	r15,r6,-16
10109610:	781ed13a 	srli	r15,r15,4
10109614:	28c00104 	addi	r3,r5,4
10109618:	13400104 	addi	r13,r2,4
1010961c:	781c913a 	slli	r14,r15,4
10109620:	2b000204 	addi	r12,r5,8
10109624:	12c00204 	addi	r11,r2,8
10109628:	73800504 	addi	r14,r14,20
1010962c:	2a800304 	addi	r10,r5,12
10109630:	12400304 	addi	r9,r2,12
10109634:	2b9d883a 	add	r14,r5,r14
10109638:	2811883a 	mov	r8,r5
1010963c:	100f883a 	mov	r7,r2
10109640:	41000017 	ldw	r4,0(r8)
10109644:	39c00404 	addi	r7,r7,16
10109648:	18c00404 	addi	r3,r3,16
1010964c:	393ffc15 	stw	r4,-16(r7)
10109650:	193ffc17 	ldw	r4,-16(r3)
10109654:	6b400404 	addi	r13,r13,16
10109658:	5ac00404 	addi	r11,r11,16
1010965c:	693ffc15 	stw	r4,-16(r13)
10109660:	61000017 	ldw	r4,0(r12)
10109664:	4a400404 	addi	r9,r9,16
10109668:	42000404 	addi	r8,r8,16
1010966c:	593ffc15 	stw	r4,-16(r11)
10109670:	51000017 	ldw	r4,0(r10)
10109674:	63000404 	addi	r12,r12,16
10109678:	52800404 	addi	r10,r10,16
1010967c:	493ffc15 	stw	r4,-16(r9)
10109680:	1bbfef1e 	bne	r3,r14,10109640 <__alt_data_end+0xfffe9640>
10109684:	79000044 	addi	r4,r15,1
10109688:	2008913a 	slli	r4,r4,4
1010968c:	328003cc 	andi	r10,r6,15
10109690:	02c000c4 	movi	r11,3
10109694:	1107883a 	add	r3,r2,r4
10109698:	290b883a 	add	r5,r5,r4
1010969c:	5a801e2e 	bgeu	r11,r10,10109718 <memmove+0x154>
101096a0:	1813883a 	mov	r9,r3
101096a4:	2811883a 	mov	r8,r5
101096a8:	500f883a 	mov	r7,r10
101096ac:	41000017 	ldw	r4,0(r8)
101096b0:	4a400104 	addi	r9,r9,4
101096b4:	39ffff04 	addi	r7,r7,-4
101096b8:	493fff15 	stw	r4,-4(r9)
101096bc:	42000104 	addi	r8,r8,4
101096c0:	59fffa36 	bltu	r11,r7,101096ac <__alt_data_end+0xfffe96ac>
101096c4:	513fff04 	addi	r4,r10,-4
101096c8:	2008d0ba 	srli	r4,r4,2
101096cc:	318000cc 	andi	r6,r6,3
101096d0:	21000044 	addi	r4,r4,1
101096d4:	2109883a 	add	r4,r4,r4
101096d8:	2109883a 	add	r4,r4,r4
101096dc:	1907883a 	add	r3,r3,r4
101096e0:	290b883a 	add	r5,r5,r4
101096e4:	30000b26 	beq	r6,zero,10109714 <memmove+0x150>
101096e8:	198d883a 	add	r6,r3,r6
101096ec:	29c00003 	ldbu	r7,0(r5)
101096f0:	18c00044 	addi	r3,r3,1
101096f4:	29400044 	addi	r5,r5,1
101096f8:	19ffffc5 	stb	r7,-1(r3)
101096fc:	19bffb1e 	bne	r3,r6,101096ec <__alt_data_end+0xfffe96ec>
10109700:	f800283a 	ret
10109704:	1007883a 	mov	r3,r2
10109708:	003ff606 	br	101096e4 <__alt_data_end+0xfffe96e4>
1010970c:	1007883a 	mov	r3,r2
10109710:	003ff506 	br	101096e8 <__alt_data_end+0xfffe96e8>
10109714:	f800283a 	ret
10109718:	500d883a 	mov	r6,r10
1010971c:	003ff106 	br	101096e4 <__alt_data_end+0xfffe96e4>

10109720 <_Balloc>:
10109720:	20801317 	ldw	r2,76(r4)
10109724:	defffc04 	addi	sp,sp,-16
10109728:	dc400115 	stw	r17,4(sp)
1010972c:	dc000015 	stw	r16,0(sp)
10109730:	dfc00315 	stw	ra,12(sp)
10109734:	dc800215 	stw	r18,8(sp)
10109738:	2023883a 	mov	r17,r4
1010973c:	2821883a 	mov	r16,r5
10109740:	10000f26 	beq	r2,zero,10109780 <_Balloc+0x60>
10109744:	8407883a 	add	r3,r16,r16
10109748:	18c7883a 	add	r3,r3,r3
1010974c:	10c7883a 	add	r3,r2,r3
10109750:	18800017 	ldw	r2,0(r3)
10109754:	10001126 	beq	r2,zero,1010979c <_Balloc+0x7c>
10109758:	11000017 	ldw	r4,0(r2)
1010975c:	19000015 	stw	r4,0(r3)
10109760:	10000415 	stw	zero,16(r2)
10109764:	10000315 	stw	zero,12(r2)
10109768:	dfc00317 	ldw	ra,12(sp)
1010976c:	dc800217 	ldw	r18,8(sp)
10109770:	dc400117 	ldw	r17,4(sp)
10109774:	dc000017 	ldw	r16,0(sp)
10109778:	dec00404 	addi	sp,sp,16
1010977c:	f800283a 	ret
10109780:	01800844 	movi	r6,33
10109784:	01400104 	movi	r5,4
10109788:	010c4780 	call	1010c478 <_calloc_r>
1010978c:	88801315 	stw	r2,76(r17)
10109790:	103fec1e 	bne	r2,zero,10109744 <__alt_data_end+0xfffe9744>
10109794:	0005883a 	mov	r2,zero
10109798:	003ff306 	br	10109768 <__alt_data_end+0xfffe9768>
1010979c:	01400044 	movi	r5,1
101097a0:	2c24983a 	sll	r18,r5,r16
101097a4:	8809883a 	mov	r4,r17
101097a8:	91800144 	addi	r6,r18,5
101097ac:	318d883a 	add	r6,r6,r6
101097b0:	318d883a 	add	r6,r6,r6
101097b4:	010c4780 	call	1010c478 <_calloc_r>
101097b8:	103ff626 	beq	r2,zero,10109794 <__alt_data_end+0xfffe9794>
101097bc:	14000115 	stw	r16,4(r2)
101097c0:	14800215 	stw	r18,8(r2)
101097c4:	003fe606 	br	10109760 <__alt_data_end+0xfffe9760>

101097c8 <_Bfree>:
101097c8:	28000826 	beq	r5,zero,101097ec <_Bfree+0x24>
101097cc:	28c00117 	ldw	r3,4(r5)
101097d0:	20801317 	ldw	r2,76(r4)
101097d4:	18c7883a 	add	r3,r3,r3
101097d8:	18c7883a 	add	r3,r3,r3
101097dc:	10c5883a 	add	r2,r2,r3
101097e0:	10c00017 	ldw	r3,0(r2)
101097e4:	28c00015 	stw	r3,0(r5)
101097e8:	11400015 	stw	r5,0(r2)
101097ec:	f800283a 	ret

101097f0 <__multadd>:
101097f0:	defffa04 	addi	sp,sp,-24
101097f4:	dc800315 	stw	r18,12(sp)
101097f8:	dc400215 	stw	r17,8(sp)
101097fc:	dc000115 	stw	r16,4(sp)
10109800:	2823883a 	mov	r17,r5
10109804:	2c000417 	ldw	r16,16(r5)
10109808:	dfc00515 	stw	ra,20(sp)
1010980c:	dcc00415 	stw	r19,16(sp)
10109810:	2025883a 	mov	r18,r4
10109814:	29400504 	addi	r5,r5,20
10109818:	0011883a 	mov	r8,zero
1010981c:	28c00017 	ldw	r3,0(r5)
10109820:	29400104 	addi	r5,r5,4
10109824:	42000044 	addi	r8,r8,1
10109828:	18bfffcc 	andi	r2,r3,65535
1010982c:	1185383a 	mul	r2,r2,r6
10109830:	1806d43a 	srli	r3,r3,16
10109834:	11cf883a 	add	r7,r2,r7
10109838:	3808d43a 	srli	r4,r7,16
1010983c:	1987383a 	mul	r3,r3,r6
10109840:	38bfffcc 	andi	r2,r7,65535
10109844:	1907883a 	add	r3,r3,r4
10109848:	1808943a 	slli	r4,r3,16
1010984c:	180ed43a 	srli	r7,r3,16
10109850:	2085883a 	add	r2,r4,r2
10109854:	28bfff15 	stw	r2,-4(r5)
10109858:	443ff016 	blt	r8,r16,1010981c <__alt_data_end+0xfffe981c>
1010985c:	38000926 	beq	r7,zero,10109884 <__multadd+0x94>
10109860:	88800217 	ldw	r2,8(r17)
10109864:	80800f0e 	bge	r16,r2,101098a4 <__multadd+0xb4>
10109868:	80800144 	addi	r2,r16,5
1010986c:	1085883a 	add	r2,r2,r2
10109870:	1085883a 	add	r2,r2,r2
10109874:	8885883a 	add	r2,r17,r2
10109878:	11c00015 	stw	r7,0(r2)
1010987c:	84000044 	addi	r16,r16,1
10109880:	8c000415 	stw	r16,16(r17)
10109884:	8805883a 	mov	r2,r17
10109888:	dfc00517 	ldw	ra,20(sp)
1010988c:	dcc00417 	ldw	r19,16(sp)
10109890:	dc800317 	ldw	r18,12(sp)
10109894:	dc400217 	ldw	r17,8(sp)
10109898:	dc000117 	ldw	r16,4(sp)
1010989c:	dec00604 	addi	sp,sp,24
101098a0:	f800283a 	ret
101098a4:	89400117 	ldw	r5,4(r17)
101098a8:	9009883a 	mov	r4,r18
101098ac:	d9c00015 	stw	r7,0(sp)
101098b0:	29400044 	addi	r5,r5,1
101098b4:	01097200 	call	10109720 <_Balloc>
101098b8:	89800417 	ldw	r6,16(r17)
101098bc:	89400304 	addi	r5,r17,12
101098c0:	11000304 	addi	r4,r2,12
101098c4:	31800084 	addi	r6,r6,2
101098c8:	318d883a 	add	r6,r6,r6
101098cc:	318d883a 	add	r6,r6,r6
101098d0:	1027883a 	mov	r19,r2
101098d4:	010947c0 	call	1010947c <memcpy>
101098d8:	d9c00017 	ldw	r7,0(sp)
101098dc:	88000a26 	beq	r17,zero,10109908 <__multadd+0x118>
101098e0:	88c00117 	ldw	r3,4(r17)
101098e4:	90801317 	ldw	r2,76(r18)
101098e8:	18c7883a 	add	r3,r3,r3
101098ec:	18c7883a 	add	r3,r3,r3
101098f0:	10c5883a 	add	r2,r2,r3
101098f4:	10c00017 	ldw	r3,0(r2)
101098f8:	88c00015 	stw	r3,0(r17)
101098fc:	14400015 	stw	r17,0(r2)
10109900:	9823883a 	mov	r17,r19
10109904:	003fd806 	br	10109868 <__alt_data_end+0xfffe9868>
10109908:	9823883a 	mov	r17,r19
1010990c:	003fd606 	br	10109868 <__alt_data_end+0xfffe9868>

10109910 <__s2b>:
10109910:	defff904 	addi	sp,sp,-28
10109914:	dc400115 	stw	r17,4(sp)
10109918:	dc000015 	stw	r16,0(sp)
1010991c:	2023883a 	mov	r17,r4
10109920:	2821883a 	mov	r16,r5
10109924:	39000204 	addi	r4,r7,8
10109928:	01400244 	movi	r5,9
1010992c:	dcc00315 	stw	r19,12(sp)
10109930:	dc800215 	stw	r18,8(sp)
10109934:	dfc00615 	stw	ra,24(sp)
10109938:	dd400515 	stw	r21,20(sp)
1010993c:	dd000415 	stw	r20,16(sp)
10109940:	3825883a 	mov	r18,r7
10109944:	3027883a 	mov	r19,r6
10109948:	01025480 	call	10102548 <__divsi3>
1010994c:	00c00044 	movi	r3,1
10109950:	000b883a 	mov	r5,zero
10109954:	1880030e 	bge	r3,r2,10109964 <__s2b+0x54>
10109958:	18c7883a 	add	r3,r3,r3
1010995c:	29400044 	addi	r5,r5,1
10109960:	18bffd16 	blt	r3,r2,10109958 <__alt_data_end+0xfffe9958>
10109964:	8809883a 	mov	r4,r17
10109968:	01097200 	call	10109720 <_Balloc>
1010996c:	d8c00717 	ldw	r3,28(sp)
10109970:	10c00515 	stw	r3,20(r2)
10109974:	00c00044 	movi	r3,1
10109978:	10c00415 	stw	r3,16(r2)
1010997c:	00c00244 	movi	r3,9
10109980:	1cc0210e 	bge	r3,r19,10109a08 <__s2b+0xf8>
10109984:	80eb883a 	add	r21,r16,r3
10109988:	a829883a 	mov	r20,r21
1010998c:	84e1883a 	add	r16,r16,r19
10109990:	a1c00007 	ldb	r7,0(r20)
10109994:	01800284 	movi	r6,10
10109998:	a5000044 	addi	r20,r20,1
1010999c:	100b883a 	mov	r5,r2
101099a0:	39fff404 	addi	r7,r7,-48
101099a4:	8809883a 	mov	r4,r17
101099a8:	01097f00 	call	101097f0 <__multadd>
101099ac:	a43ff81e 	bne	r20,r16,10109990 <__alt_data_end+0xfffe9990>
101099b0:	ace1883a 	add	r16,r21,r19
101099b4:	843ffe04 	addi	r16,r16,-8
101099b8:	9c800a0e 	bge	r19,r18,101099e4 <__s2b+0xd4>
101099bc:	94e5c83a 	sub	r18,r18,r19
101099c0:	84a5883a 	add	r18,r16,r18
101099c4:	81c00007 	ldb	r7,0(r16)
101099c8:	01800284 	movi	r6,10
101099cc:	84000044 	addi	r16,r16,1
101099d0:	100b883a 	mov	r5,r2
101099d4:	39fff404 	addi	r7,r7,-48
101099d8:	8809883a 	mov	r4,r17
101099dc:	01097f00 	call	101097f0 <__multadd>
101099e0:	84bff81e 	bne	r16,r18,101099c4 <__alt_data_end+0xfffe99c4>
101099e4:	dfc00617 	ldw	ra,24(sp)
101099e8:	dd400517 	ldw	r21,20(sp)
101099ec:	dd000417 	ldw	r20,16(sp)
101099f0:	dcc00317 	ldw	r19,12(sp)
101099f4:	dc800217 	ldw	r18,8(sp)
101099f8:	dc400117 	ldw	r17,4(sp)
101099fc:	dc000017 	ldw	r16,0(sp)
10109a00:	dec00704 	addi	sp,sp,28
10109a04:	f800283a 	ret
10109a08:	84000284 	addi	r16,r16,10
10109a0c:	1827883a 	mov	r19,r3
10109a10:	003fe906 	br	101099b8 <__alt_data_end+0xfffe99b8>

10109a14 <__hi0bits>:
10109a14:	20bfffec 	andhi	r2,r4,65535
10109a18:	1000141e 	bne	r2,zero,10109a6c <__hi0bits+0x58>
10109a1c:	2008943a 	slli	r4,r4,16
10109a20:	00800404 	movi	r2,16
10109a24:	20ffc02c 	andhi	r3,r4,65280
10109a28:	1800021e 	bne	r3,zero,10109a34 <__hi0bits+0x20>
10109a2c:	2008923a 	slli	r4,r4,8
10109a30:	10800204 	addi	r2,r2,8
10109a34:	20fc002c 	andhi	r3,r4,61440
10109a38:	1800021e 	bne	r3,zero,10109a44 <__hi0bits+0x30>
10109a3c:	2008913a 	slli	r4,r4,4
10109a40:	10800104 	addi	r2,r2,4
10109a44:	20f0002c 	andhi	r3,r4,49152
10109a48:	1800031e 	bne	r3,zero,10109a58 <__hi0bits+0x44>
10109a4c:	2109883a 	add	r4,r4,r4
10109a50:	10800084 	addi	r2,r2,2
10109a54:	2109883a 	add	r4,r4,r4
10109a58:	20000316 	blt	r4,zero,10109a68 <__hi0bits+0x54>
10109a5c:	2110002c 	andhi	r4,r4,16384
10109a60:	2000041e 	bne	r4,zero,10109a74 <__hi0bits+0x60>
10109a64:	00800804 	movi	r2,32
10109a68:	f800283a 	ret
10109a6c:	0005883a 	mov	r2,zero
10109a70:	003fec06 	br	10109a24 <__alt_data_end+0xfffe9a24>
10109a74:	10800044 	addi	r2,r2,1
10109a78:	f800283a 	ret

10109a7c <__lo0bits>:
10109a7c:	20c00017 	ldw	r3,0(r4)
10109a80:	188001cc 	andi	r2,r3,7
10109a84:	10000826 	beq	r2,zero,10109aa8 <__lo0bits+0x2c>
10109a88:	1880004c 	andi	r2,r3,1
10109a8c:	1000211e 	bne	r2,zero,10109b14 <__lo0bits+0x98>
10109a90:	1880008c 	andi	r2,r3,2
10109a94:	1000211e 	bne	r2,zero,10109b1c <__lo0bits+0xa0>
10109a98:	1806d0ba 	srli	r3,r3,2
10109a9c:	00800084 	movi	r2,2
10109aa0:	20c00015 	stw	r3,0(r4)
10109aa4:	f800283a 	ret
10109aa8:	18bfffcc 	andi	r2,r3,65535
10109aac:	10001326 	beq	r2,zero,10109afc <__lo0bits+0x80>
10109ab0:	0005883a 	mov	r2,zero
10109ab4:	19403fcc 	andi	r5,r3,255
10109ab8:	2800021e 	bne	r5,zero,10109ac4 <__lo0bits+0x48>
10109abc:	1806d23a 	srli	r3,r3,8
10109ac0:	10800204 	addi	r2,r2,8
10109ac4:	194003cc 	andi	r5,r3,15
10109ac8:	2800021e 	bne	r5,zero,10109ad4 <__lo0bits+0x58>
10109acc:	1806d13a 	srli	r3,r3,4
10109ad0:	10800104 	addi	r2,r2,4
10109ad4:	194000cc 	andi	r5,r3,3
10109ad8:	2800021e 	bne	r5,zero,10109ae4 <__lo0bits+0x68>
10109adc:	1806d0ba 	srli	r3,r3,2
10109ae0:	10800084 	addi	r2,r2,2
10109ae4:	1940004c 	andi	r5,r3,1
10109ae8:	2800081e 	bne	r5,zero,10109b0c <__lo0bits+0x90>
10109aec:	1806d07a 	srli	r3,r3,1
10109af0:	1800051e 	bne	r3,zero,10109b08 <__lo0bits+0x8c>
10109af4:	00800804 	movi	r2,32
10109af8:	f800283a 	ret
10109afc:	1806d43a 	srli	r3,r3,16
10109b00:	00800404 	movi	r2,16
10109b04:	003feb06 	br	10109ab4 <__alt_data_end+0xfffe9ab4>
10109b08:	10800044 	addi	r2,r2,1
10109b0c:	20c00015 	stw	r3,0(r4)
10109b10:	f800283a 	ret
10109b14:	0005883a 	mov	r2,zero
10109b18:	f800283a 	ret
10109b1c:	1806d07a 	srli	r3,r3,1
10109b20:	00800044 	movi	r2,1
10109b24:	20c00015 	stw	r3,0(r4)
10109b28:	f800283a 	ret

10109b2c <__i2b>:
10109b2c:	defffd04 	addi	sp,sp,-12
10109b30:	dc000015 	stw	r16,0(sp)
10109b34:	04000044 	movi	r16,1
10109b38:	dc400115 	stw	r17,4(sp)
10109b3c:	2823883a 	mov	r17,r5
10109b40:	800b883a 	mov	r5,r16
10109b44:	dfc00215 	stw	ra,8(sp)
10109b48:	01097200 	call	10109720 <_Balloc>
10109b4c:	14400515 	stw	r17,20(r2)
10109b50:	14000415 	stw	r16,16(r2)
10109b54:	dfc00217 	ldw	ra,8(sp)
10109b58:	dc400117 	ldw	r17,4(sp)
10109b5c:	dc000017 	ldw	r16,0(sp)
10109b60:	dec00304 	addi	sp,sp,12
10109b64:	f800283a 	ret

10109b68 <__multiply>:
10109b68:	defffa04 	addi	sp,sp,-24
10109b6c:	dcc00315 	stw	r19,12(sp)
10109b70:	dc800215 	stw	r18,8(sp)
10109b74:	34c00417 	ldw	r19,16(r6)
10109b78:	2c800417 	ldw	r18,16(r5)
10109b7c:	dd000415 	stw	r20,16(sp)
10109b80:	dc400115 	stw	r17,4(sp)
10109b84:	dfc00515 	stw	ra,20(sp)
10109b88:	dc000015 	stw	r16,0(sp)
10109b8c:	2829883a 	mov	r20,r5
10109b90:	3023883a 	mov	r17,r6
10109b94:	94c0050e 	bge	r18,r19,10109bac <__multiply+0x44>
10109b98:	9007883a 	mov	r3,r18
10109b9c:	3029883a 	mov	r20,r6
10109ba0:	9825883a 	mov	r18,r19
10109ba4:	2823883a 	mov	r17,r5
10109ba8:	1827883a 	mov	r19,r3
10109bac:	a0800217 	ldw	r2,8(r20)
10109bb0:	94e1883a 	add	r16,r18,r19
10109bb4:	a1400117 	ldw	r5,4(r20)
10109bb8:	1400010e 	bge	r2,r16,10109bc0 <__multiply+0x58>
10109bbc:	29400044 	addi	r5,r5,1
10109bc0:	01097200 	call	10109720 <_Balloc>
10109bc4:	8415883a 	add	r10,r16,r16
10109bc8:	12c00504 	addi	r11,r2,20
10109bcc:	5295883a 	add	r10,r10,r10
10109bd0:	5a95883a 	add	r10,r11,r10
10109bd4:	5807883a 	mov	r3,r11
10109bd8:	5a80032e 	bgeu	r11,r10,10109be8 <__multiply+0x80>
10109bdc:	18000015 	stw	zero,0(r3)
10109be0:	18c00104 	addi	r3,r3,4
10109be4:	1abffd36 	bltu	r3,r10,10109bdc <__alt_data_end+0xfffe9bdc>
10109be8:	9ce7883a 	add	r19,r19,r19
10109bec:	94a5883a 	add	r18,r18,r18
10109bf0:	89800504 	addi	r6,r17,20
10109bf4:	9ce7883a 	add	r19,r19,r19
10109bf8:	a3400504 	addi	r13,r20,20
10109bfc:	94a5883a 	add	r18,r18,r18
10109c00:	34d9883a 	add	r12,r6,r19
10109c04:	6c93883a 	add	r9,r13,r18
10109c08:	3300422e 	bgeu	r6,r12,10109d14 <__multiply+0x1ac>
10109c0c:	37c00017 	ldw	ra,0(r6)
10109c10:	fbffffcc 	andi	r15,ra,65535
10109c14:	78001b26 	beq	r15,zero,10109c84 <__multiply+0x11c>
10109c18:	5811883a 	mov	r8,r11
10109c1c:	681d883a 	mov	r14,r13
10109c20:	000f883a 	mov	r7,zero
10109c24:	71000017 	ldw	r4,0(r14)
10109c28:	40c00017 	ldw	r3,0(r8)
10109c2c:	73800104 	addi	r14,r14,4
10109c30:	217fffcc 	andi	r5,r4,65535
10109c34:	2bcb383a 	mul	r5,r5,r15
10109c38:	2008d43a 	srli	r4,r4,16
10109c3c:	1c7fffcc 	andi	r17,r3,65535
10109c40:	2c4b883a 	add	r5,r5,r17
10109c44:	29cb883a 	add	r5,r5,r7
10109c48:	23c9383a 	mul	r4,r4,r15
10109c4c:	1806d43a 	srli	r3,r3,16
10109c50:	280ed43a 	srli	r7,r5,16
10109c54:	297fffcc 	andi	r5,r5,65535
10109c58:	20c7883a 	add	r3,r4,r3
10109c5c:	19c7883a 	add	r3,r3,r7
10109c60:	1808943a 	slli	r4,r3,16
10109c64:	4023883a 	mov	r17,r8
10109c68:	180ed43a 	srli	r7,r3,16
10109c6c:	214ab03a 	or	r5,r4,r5
10109c70:	41400015 	stw	r5,0(r8)
10109c74:	42000104 	addi	r8,r8,4
10109c78:	727fea36 	bltu	r14,r9,10109c24 <__alt_data_end+0xfffe9c24>
10109c7c:	89c00115 	stw	r7,4(r17)
10109c80:	37c00017 	ldw	ra,0(r6)
10109c84:	f83ed43a 	srli	ra,ra,16
10109c88:	f8001f26 	beq	ra,zero,10109d08 <__multiply+0x1a0>
10109c8c:	58c00017 	ldw	r3,0(r11)
10109c90:	681d883a 	mov	r14,r13
10109c94:	581f883a 	mov	r15,r11
10109c98:	1811883a 	mov	r8,r3
10109c9c:	5825883a 	mov	r18,r11
10109ca0:	000f883a 	mov	r7,zero
10109ca4:	00000106 	br	10109cac <__multiply+0x144>
10109ca8:	8825883a 	mov	r18,r17
10109cac:	7140000b 	ldhu	r5,0(r14)
10109cb0:	4010d43a 	srli	r8,r8,16
10109cb4:	193fffcc 	andi	r4,r3,65535
10109cb8:	2fcb383a 	mul	r5,r5,ra
10109cbc:	7bc00104 	addi	r15,r15,4
10109cc0:	73800104 	addi	r14,r14,4
10109cc4:	2a0b883a 	add	r5,r5,r8
10109cc8:	29cb883a 	add	r5,r5,r7
10109ccc:	2806943a 	slli	r3,r5,16
10109cd0:	94400104 	addi	r17,r18,4
10109cd4:	280ad43a 	srli	r5,r5,16
10109cd8:	1908b03a 	or	r4,r3,r4
10109cdc:	793fff15 	stw	r4,-4(r15)
10109ce0:	70ffff17 	ldw	r3,-4(r14)
10109ce4:	8a000017 	ldw	r8,0(r17)
10109ce8:	1806d43a 	srli	r3,r3,16
10109cec:	413fffcc 	andi	r4,r8,65535
10109cf0:	1fc7383a 	mul	r3,r3,ra
10109cf4:	1907883a 	add	r3,r3,r4
10109cf8:	1947883a 	add	r3,r3,r5
10109cfc:	180ed43a 	srli	r7,r3,16
10109d00:	727fe936 	bltu	r14,r9,10109ca8 <__alt_data_end+0xfffe9ca8>
10109d04:	90c00115 	stw	r3,4(r18)
10109d08:	31800104 	addi	r6,r6,4
10109d0c:	5ac00104 	addi	r11,r11,4
10109d10:	333fbe36 	bltu	r6,r12,10109c0c <__alt_data_end+0xfffe9c0c>
10109d14:	0400090e 	bge	zero,r16,10109d3c <__multiply+0x1d4>
10109d18:	50ffff17 	ldw	r3,-4(r10)
10109d1c:	52bfff04 	addi	r10,r10,-4
10109d20:	18000326 	beq	r3,zero,10109d30 <__multiply+0x1c8>
10109d24:	00000506 	br	10109d3c <__multiply+0x1d4>
10109d28:	50c00017 	ldw	r3,0(r10)
10109d2c:	1800031e 	bne	r3,zero,10109d3c <__multiply+0x1d4>
10109d30:	843fffc4 	addi	r16,r16,-1
10109d34:	52bfff04 	addi	r10,r10,-4
10109d38:	803ffb1e 	bne	r16,zero,10109d28 <__alt_data_end+0xfffe9d28>
10109d3c:	14000415 	stw	r16,16(r2)
10109d40:	dfc00517 	ldw	ra,20(sp)
10109d44:	dd000417 	ldw	r20,16(sp)
10109d48:	dcc00317 	ldw	r19,12(sp)
10109d4c:	dc800217 	ldw	r18,8(sp)
10109d50:	dc400117 	ldw	r17,4(sp)
10109d54:	dc000017 	ldw	r16,0(sp)
10109d58:	dec00604 	addi	sp,sp,24
10109d5c:	f800283a 	ret

10109d60 <__pow5mult>:
10109d60:	defffa04 	addi	sp,sp,-24
10109d64:	dcc00315 	stw	r19,12(sp)
10109d68:	dc000015 	stw	r16,0(sp)
10109d6c:	dfc00515 	stw	ra,20(sp)
10109d70:	dd000415 	stw	r20,16(sp)
10109d74:	dc800215 	stw	r18,8(sp)
10109d78:	dc400115 	stw	r17,4(sp)
10109d7c:	308000cc 	andi	r2,r6,3
10109d80:	3021883a 	mov	r16,r6
10109d84:	2027883a 	mov	r19,r4
10109d88:	10002f1e 	bne	r2,zero,10109e48 <__pow5mult+0xe8>
10109d8c:	2825883a 	mov	r18,r5
10109d90:	8021d0ba 	srai	r16,r16,2
10109d94:	80001a26 	beq	r16,zero,10109e00 <__pow5mult+0xa0>
10109d98:	9c401217 	ldw	r17,72(r19)
10109d9c:	8800061e 	bne	r17,zero,10109db8 <__pow5mult+0x58>
10109da0:	00003406 	br	10109e74 <__pow5mult+0x114>
10109da4:	8021d07a 	srai	r16,r16,1
10109da8:	80001526 	beq	r16,zero,10109e00 <__pow5mult+0xa0>
10109dac:	88800017 	ldw	r2,0(r17)
10109db0:	10001c26 	beq	r2,zero,10109e24 <__pow5mult+0xc4>
10109db4:	1023883a 	mov	r17,r2
10109db8:	8080004c 	andi	r2,r16,1
10109dbc:	103ff926 	beq	r2,zero,10109da4 <__alt_data_end+0xfffe9da4>
10109dc0:	880d883a 	mov	r6,r17
10109dc4:	900b883a 	mov	r5,r18
10109dc8:	9809883a 	mov	r4,r19
10109dcc:	0109b680 	call	10109b68 <__multiply>
10109dd0:	90001b26 	beq	r18,zero,10109e40 <__pow5mult+0xe0>
10109dd4:	91000117 	ldw	r4,4(r18)
10109dd8:	98c01317 	ldw	r3,76(r19)
10109ddc:	8021d07a 	srai	r16,r16,1
10109de0:	2109883a 	add	r4,r4,r4
10109de4:	2109883a 	add	r4,r4,r4
10109de8:	1907883a 	add	r3,r3,r4
10109dec:	19000017 	ldw	r4,0(r3)
10109df0:	91000015 	stw	r4,0(r18)
10109df4:	1c800015 	stw	r18,0(r3)
10109df8:	1025883a 	mov	r18,r2
10109dfc:	803feb1e 	bne	r16,zero,10109dac <__alt_data_end+0xfffe9dac>
10109e00:	9005883a 	mov	r2,r18
10109e04:	dfc00517 	ldw	ra,20(sp)
10109e08:	dd000417 	ldw	r20,16(sp)
10109e0c:	dcc00317 	ldw	r19,12(sp)
10109e10:	dc800217 	ldw	r18,8(sp)
10109e14:	dc400117 	ldw	r17,4(sp)
10109e18:	dc000017 	ldw	r16,0(sp)
10109e1c:	dec00604 	addi	sp,sp,24
10109e20:	f800283a 	ret
10109e24:	880d883a 	mov	r6,r17
10109e28:	880b883a 	mov	r5,r17
10109e2c:	9809883a 	mov	r4,r19
10109e30:	0109b680 	call	10109b68 <__multiply>
10109e34:	88800015 	stw	r2,0(r17)
10109e38:	10000015 	stw	zero,0(r2)
10109e3c:	003fdd06 	br	10109db4 <__alt_data_end+0xfffe9db4>
10109e40:	1025883a 	mov	r18,r2
10109e44:	003fd706 	br	10109da4 <__alt_data_end+0xfffe9da4>
10109e48:	10bfffc4 	addi	r2,r2,-1
10109e4c:	1085883a 	add	r2,r2,r2
10109e50:	00c40474 	movhi	r3,4113
10109e54:	18ca3104 	addi	r3,r3,10436
10109e58:	1085883a 	add	r2,r2,r2
10109e5c:	1885883a 	add	r2,r3,r2
10109e60:	11800017 	ldw	r6,0(r2)
10109e64:	000f883a 	mov	r7,zero
10109e68:	01097f00 	call	101097f0 <__multadd>
10109e6c:	1025883a 	mov	r18,r2
10109e70:	003fc706 	br	10109d90 <__alt_data_end+0xfffe9d90>
10109e74:	05000044 	movi	r20,1
10109e78:	a00b883a 	mov	r5,r20
10109e7c:	9809883a 	mov	r4,r19
10109e80:	01097200 	call	10109720 <_Balloc>
10109e84:	1023883a 	mov	r17,r2
10109e88:	00809c44 	movi	r2,625
10109e8c:	88800515 	stw	r2,20(r17)
10109e90:	8d000415 	stw	r20,16(r17)
10109e94:	9c401215 	stw	r17,72(r19)
10109e98:	88000015 	stw	zero,0(r17)
10109e9c:	003fc606 	br	10109db8 <__alt_data_end+0xfffe9db8>

10109ea0 <__lshift>:
10109ea0:	defff904 	addi	sp,sp,-28
10109ea4:	dd400515 	stw	r21,20(sp)
10109ea8:	dcc00315 	stw	r19,12(sp)
10109eac:	302bd17a 	srai	r21,r6,5
10109eb0:	2cc00417 	ldw	r19,16(r5)
10109eb4:	28800217 	ldw	r2,8(r5)
10109eb8:	dd000415 	stw	r20,16(sp)
10109ebc:	ace7883a 	add	r19,r21,r19
10109ec0:	dc800215 	stw	r18,8(sp)
10109ec4:	dc400115 	stw	r17,4(sp)
10109ec8:	dc000015 	stw	r16,0(sp)
10109ecc:	dfc00615 	stw	ra,24(sp)
10109ed0:	9c000044 	addi	r16,r19,1
10109ed4:	2823883a 	mov	r17,r5
10109ed8:	3029883a 	mov	r20,r6
10109edc:	2025883a 	mov	r18,r4
10109ee0:	29400117 	ldw	r5,4(r5)
10109ee4:	1400030e 	bge	r2,r16,10109ef4 <__lshift+0x54>
10109ee8:	1085883a 	add	r2,r2,r2
10109eec:	29400044 	addi	r5,r5,1
10109ef0:	143ffd16 	blt	r2,r16,10109ee8 <__alt_data_end+0xfffe9ee8>
10109ef4:	9009883a 	mov	r4,r18
10109ef8:	01097200 	call	10109720 <_Balloc>
10109efc:	10c00504 	addi	r3,r2,20
10109f00:	0540070e 	bge	zero,r21,10109f20 <__lshift+0x80>
10109f04:	ad6b883a 	add	r21,r21,r21
10109f08:	ad6b883a 	add	r21,r21,r21
10109f0c:	1809883a 	mov	r4,r3
10109f10:	1d47883a 	add	r3,r3,r21
10109f14:	20000015 	stw	zero,0(r4)
10109f18:	21000104 	addi	r4,r4,4
10109f1c:	193ffd1e 	bne	r3,r4,10109f14 <__alt_data_end+0xfffe9f14>
10109f20:	8a000417 	ldw	r8,16(r17)
10109f24:	89000504 	addi	r4,r17,20
10109f28:	a18007cc 	andi	r6,r20,31
10109f2c:	4211883a 	add	r8,r8,r8
10109f30:	4211883a 	add	r8,r8,r8
10109f34:	2211883a 	add	r8,r4,r8
10109f38:	30002326 	beq	r6,zero,10109fc8 <__lshift+0x128>
10109f3c:	02400804 	movi	r9,32
10109f40:	4993c83a 	sub	r9,r9,r6
10109f44:	000b883a 	mov	r5,zero
10109f48:	21c00017 	ldw	r7,0(r4)
10109f4c:	1815883a 	mov	r10,r3
10109f50:	18c00104 	addi	r3,r3,4
10109f54:	398e983a 	sll	r7,r7,r6
10109f58:	21000104 	addi	r4,r4,4
10109f5c:	394ab03a 	or	r5,r7,r5
10109f60:	197fff15 	stw	r5,-4(r3)
10109f64:	217fff17 	ldw	r5,-4(r4)
10109f68:	2a4ad83a 	srl	r5,r5,r9
10109f6c:	223ff636 	bltu	r4,r8,10109f48 <__alt_data_end+0xfffe9f48>
10109f70:	51400115 	stw	r5,4(r10)
10109f74:	28001a1e 	bne	r5,zero,10109fe0 <__lshift+0x140>
10109f78:	843fffc4 	addi	r16,r16,-1
10109f7c:	14000415 	stw	r16,16(r2)
10109f80:	88000826 	beq	r17,zero,10109fa4 <__lshift+0x104>
10109f84:	89000117 	ldw	r4,4(r17)
10109f88:	90c01317 	ldw	r3,76(r18)
10109f8c:	2109883a 	add	r4,r4,r4
10109f90:	2109883a 	add	r4,r4,r4
10109f94:	1907883a 	add	r3,r3,r4
10109f98:	19000017 	ldw	r4,0(r3)
10109f9c:	89000015 	stw	r4,0(r17)
10109fa0:	1c400015 	stw	r17,0(r3)
10109fa4:	dfc00617 	ldw	ra,24(sp)
10109fa8:	dd400517 	ldw	r21,20(sp)
10109fac:	dd000417 	ldw	r20,16(sp)
10109fb0:	dcc00317 	ldw	r19,12(sp)
10109fb4:	dc800217 	ldw	r18,8(sp)
10109fb8:	dc400117 	ldw	r17,4(sp)
10109fbc:	dc000017 	ldw	r16,0(sp)
10109fc0:	dec00704 	addi	sp,sp,28
10109fc4:	f800283a 	ret
10109fc8:	21400017 	ldw	r5,0(r4)
10109fcc:	18c00104 	addi	r3,r3,4
10109fd0:	21000104 	addi	r4,r4,4
10109fd4:	197fff15 	stw	r5,-4(r3)
10109fd8:	223ffb36 	bltu	r4,r8,10109fc8 <__alt_data_end+0xfffe9fc8>
10109fdc:	003fe606 	br	10109f78 <__alt_data_end+0xfffe9f78>
10109fe0:	9c000084 	addi	r16,r19,2
10109fe4:	003fe406 	br	10109f78 <__alt_data_end+0xfffe9f78>

10109fe8 <__mcmp>:
10109fe8:	20800417 	ldw	r2,16(r4)
10109fec:	28c00417 	ldw	r3,16(r5)
10109ff0:	10c5c83a 	sub	r2,r2,r3
10109ff4:	1000111e 	bne	r2,zero,1010a03c <__mcmp+0x54>
10109ff8:	18c7883a 	add	r3,r3,r3
10109ffc:	18c7883a 	add	r3,r3,r3
1010a000:	21000504 	addi	r4,r4,20
1010a004:	29400504 	addi	r5,r5,20
1010a008:	20c5883a 	add	r2,r4,r3
1010a00c:	28cb883a 	add	r5,r5,r3
1010a010:	00000106 	br	1010a018 <__mcmp+0x30>
1010a014:	20800a2e 	bgeu	r4,r2,1010a040 <__mcmp+0x58>
1010a018:	10bfff04 	addi	r2,r2,-4
1010a01c:	297fff04 	addi	r5,r5,-4
1010a020:	11800017 	ldw	r6,0(r2)
1010a024:	28c00017 	ldw	r3,0(r5)
1010a028:	30fffa26 	beq	r6,r3,1010a014 <__alt_data_end+0xfffea014>
1010a02c:	30c00236 	bltu	r6,r3,1010a038 <__mcmp+0x50>
1010a030:	00800044 	movi	r2,1
1010a034:	f800283a 	ret
1010a038:	00bfffc4 	movi	r2,-1
1010a03c:	f800283a 	ret
1010a040:	0005883a 	mov	r2,zero
1010a044:	f800283a 	ret

1010a048 <__mdiff>:
1010a048:	28c00417 	ldw	r3,16(r5)
1010a04c:	30800417 	ldw	r2,16(r6)
1010a050:	defffa04 	addi	sp,sp,-24
1010a054:	dcc00315 	stw	r19,12(sp)
1010a058:	dc800215 	stw	r18,8(sp)
1010a05c:	dfc00515 	stw	ra,20(sp)
1010a060:	dd000415 	stw	r20,16(sp)
1010a064:	dc400115 	stw	r17,4(sp)
1010a068:	dc000015 	stw	r16,0(sp)
1010a06c:	1887c83a 	sub	r3,r3,r2
1010a070:	2825883a 	mov	r18,r5
1010a074:	3027883a 	mov	r19,r6
1010a078:	1800141e 	bne	r3,zero,1010a0cc <__mdiff+0x84>
1010a07c:	1085883a 	add	r2,r2,r2
1010a080:	1085883a 	add	r2,r2,r2
1010a084:	2a000504 	addi	r8,r5,20
1010a088:	34000504 	addi	r16,r6,20
1010a08c:	4087883a 	add	r3,r8,r2
1010a090:	8085883a 	add	r2,r16,r2
1010a094:	00000106 	br	1010a09c <__mdiff+0x54>
1010a098:	40c0592e 	bgeu	r8,r3,1010a200 <__mdiff+0x1b8>
1010a09c:	18ffff04 	addi	r3,r3,-4
1010a0a0:	10bfff04 	addi	r2,r2,-4
1010a0a4:	19c00017 	ldw	r7,0(r3)
1010a0a8:	11400017 	ldw	r5,0(r2)
1010a0ac:	397ffa26 	beq	r7,r5,1010a098 <__alt_data_end+0xfffea098>
1010a0b0:	3940592e 	bgeu	r7,r5,1010a218 <__mdiff+0x1d0>
1010a0b4:	9005883a 	mov	r2,r18
1010a0b8:	4023883a 	mov	r17,r8
1010a0bc:	9825883a 	mov	r18,r19
1010a0c0:	05000044 	movi	r20,1
1010a0c4:	1027883a 	mov	r19,r2
1010a0c8:	00000406 	br	1010a0dc <__mdiff+0x94>
1010a0cc:	18005616 	blt	r3,zero,1010a228 <__mdiff+0x1e0>
1010a0d0:	34400504 	addi	r17,r6,20
1010a0d4:	2c000504 	addi	r16,r5,20
1010a0d8:	0029883a 	mov	r20,zero
1010a0dc:	91400117 	ldw	r5,4(r18)
1010a0e0:	01097200 	call	10109720 <_Balloc>
1010a0e4:	92400417 	ldw	r9,16(r18)
1010a0e8:	9b000417 	ldw	r12,16(r19)
1010a0ec:	12c00504 	addi	r11,r2,20
1010a0f0:	4a51883a 	add	r8,r9,r9
1010a0f4:	6319883a 	add	r12,r12,r12
1010a0f8:	4211883a 	add	r8,r8,r8
1010a0fc:	6319883a 	add	r12,r12,r12
1010a100:	15000315 	stw	r20,12(r2)
1010a104:	8211883a 	add	r8,r16,r8
1010a108:	8b19883a 	add	r12,r17,r12
1010a10c:	0007883a 	mov	r3,zero
1010a110:	81400017 	ldw	r5,0(r16)
1010a114:	89c00017 	ldw	r7,0(r17)
1010a118:	59800104 	addi	r6,r11,4
1010a11c:	293fffcc 	andi	r4,r5,65535
1010a120:	20c7883a 	add	r3,r4,r3
1010a124:	393fffcc 	andi	r4,r7,65535
1010a128:	1909c83a 	sub	r4,r3,r4
1010a12c:	280ad43a 	srli	r5,r5,16
1010a130:	380ed43a 	srli	r7,r7,16
1010a134:	2007d43a 	srai	r3,r4,16
1010a138:	213fffcc 	andi	r4,r4,65535
1010a13c:	29cbc83a 	sub	r5,r5,r7
1010a140:	28c7883a 	add	r3,r5,r3
1010a144:	180a943a 	slli	r5,r3,16
1010a148:	8c400104 	addi	r17,r17,4
1010a14c:	84000104 	addi	r16,r16,4
1010a150:	2908b03a 	or	r4,r5,r4
1010a154:	59000015 	stw	r4,0(r11)
1010a158:	1807d43a 	srai	r3,r3,16
1010a15c:	3015883a 	mov	r10,r6
1010a160:	3017883a 	mov	r11,r6
1010a164:	8b3fea36 	bltu	r17,r12,1010a110 <__alt_data_end+0xfffea110>
1010a168:	8200162e 	bgeu	r16,r8,1010a1c4 <__mdiff+0x17c>
1010a16c:	8017883a 	mov	r11,r16
1010a170:	59400017 	ldw	r5,0(r11)
1010a174:	31800104 	addi	r6,r6,4
1010a178:	5ac00104 	addi	r11,r11,4
1010a17c:	293fffcc 	andi	r4,r5,65535
1010a180:	20c7883a 	add	r3,r4,r3
1010a184:	280ed43a 	srli	r7,r5,16
1010a188:	180bd43a 	srai	r5,r3,16
1010a18c:	193fffcc 	andi	r4,r3,65535
1010a190:	3947883a 	add	r3,r7,r5
1010a194:	180a943a 	slli	r5,r3,16
1010a198:	1807d43a 	srai	r3,r3,16
1010a19c:	2908b03a 	or	r4,r5,r4
1010a1a0:	313fff15 	stw	r4,-4(r6)
1010a1a4:	5a3ff236 	bltu	r11,r8,1010a170 <__alt_data_end+0xfffea170>
1010a1a8:	0406303a 	nor	r3,zero,r16
1010a1ac:	1a07883a 	add	r3,r3,r8
1010a1b0:	1806d0ba 	srli	r3,r3,2
1010a1b4:	18c00044 	addi	r3,r3,1
1010a1b8:	18c7883a 	add	r3,r3,r3
1010a1bc:	18c7883a 	add	r3,r3,r3
1010a1c0:	50d5883a 	add	r10,r10,r3
1010a1c4:	50ffff04 	addi	r3,r10,-4
1010a1c8:	2000041e 	bne	r4,zero,1010a1dc <__mdiff+0x194>
1010a1cc:	18ffff04 	addi	r3,r3,-4
1010a1d0:	19000017 	ldw	r4,0(r3)
1010a1d4:	4a7fffc4 	addi	r9,r9,-1
1010a1d8:	203ffc26 	beq	r4,zero,1010a1cc <__alt_data_end+0xfffea1cc>
1010a1dc:	12400415 	stw	r9,16(r2)
1010a1e0:	dfc00517 	ldw	ra,20(sp)
1010a1e4:	dd000417 	ldw	r20,16(sp)
1010a1e8:	dcc00317 	ldw	r19,12(sp)
1010a1ec:	dc800217 	ldw	r18,8(sp)
1010a1f0:	dc400117 	ldw	r17,4(sp)
1010a1f4:	dc000017 	ldw	r16,0(sp)
1010a1f8:	dec00604 	addi	sp,sp,24
1010a1fc:	f800283a 	ret
1010a200:	000b883a 	mov	r5,zero
1010a204:	01097200 	call	10109720 <_Balloc>
1010a208:	00c00044 	movi	r3,1
1010a20c:	10c00415 	stw	r3,16(r2)
1010a210:	10000515 	stw	zero,20(r2)
1010a214:	003ff206 	br	1010a1e0 <__alt_data_end+0xfffea1e0>
1010a218:	8023883a 	mov	r17,r16
1010a21c:	0029883a 	mov	r20,zero
1010a220:	4021883a 	mov	r16,r8
1010a224:	003fad06 	br	1010a0dc <__alt_data_end+0xfffea0dc>
1010a228:	9005883a 	mov	r2,r18
1010a22c:	94400504 	addi	r17,r18,20
1010a230:	9c000504 	addi	r16,r19,20
1010a234:	9825883a 	mov	r18,r19
1010a238:	05000044 	movi	r20,1
1010a23c:	1027883a 	mov	r19,r2
1010a240:	003fa606 	br	1010a0dc <__alt_data_end+0xfffea0dc>

1010a244 <__ulp>:
1010a244:	295ffc2c 	andhi	r5,r5,32752
1010a248:	00bf3034 	movhi	r2,64704
1010a24c:	2887883a 	add	r3,r5,r2
1010a250:	00c0020e 	bge	zero,r3,1010a25c <__ulp+0x18>
1010a254:	0005883a 	mov	r2,zero
1010a258:	f800283a 	ret
1010a25c:	00c7c83a 	sub	r3,zero,r3
1010a260:	1807d53a 	srai	r3,r3,20
1010a264:	008004c4 	movi	r2,19
1010a268:	10c00b0e 	bge	r2,r3,1010a298 <__ulp+0x54>
1010a26c:	18bffb04 	addi	r2,r3,-20
1010a270:	01000784 	movi	r4,30
1010a274:	0007883a 	mov	r3,zero
1010a278:	20800516 	blt	r4,r2,1010a290 <__ulp+0x4c>
1010a27c:	010007c4 	movi	r4,31
1010a280:	2089c83a 	sub	r4,r4,r2
1010a284:	00800044 	movi	r2,1
1010a288:	1104983a 	sll	r2,r2,r4
1010a28c:	f800283a 	ret
1010a290:	00800044 	movi	r2,1
1010a294:	f800283a 	ret
1010a298:	01400234 	movhi	r5,8
1010a29c:	28c7d83a 	sra	r3,r5,r3
1010a2a0:	0005883a 	mov	r2,zero
1010a2a4:	f800283a 	ret

1010a2a8 <__b2d>:
1010a2a8:	defffa04 	addi	sp,sp,-24
1010a2ac:	dc000015 	stw	r16,0(sp)
1010a2b0:	24000417 	ldw	r16,16(r4)
1010a2b4:	dc400115 	stw	r17,4(sp)
1010a2b8:	24400504 	addi	r17,r4,20
1010a2bc:	8421883a 	add	r16,r16,r16
1010a2c0:	8421883a 	add	r16,r16,r16
1010a2c4:	8c21883a 	add	r16,r17,r16
1010a2c8:	dc800215 	stw	r18,8(sp)
1010a2cc:	84bfff17 	ldw	r18,-4(r16)
1010a2d0:	dd000415 	stw	r20,16(sp)
1010a2d4:	dcc00315 	stw	r19,12(sp)
1010a2d8:	9009883a 	mov	r4,r18
1010a2dc:	2829883a 	mov	r20,r5
1010a2e0:	dfc00515 	stw	ra,20(sp)
1010a2e4:	0109a140 	call	10109a14 <__hi0bits>
1010a2e8:	00c00804 	movi	r3,32
1010a2ec:	1889c83a 	sub	r4,r3,r2
1010a2f0:	a1000015 	stw	r4,0(r20)
1010a2f4:	01000284 	movi	r4,10
1010a2f8:	84ffff04 	addi	r19,r16,-4
1010a2fc:	20801216 	blt	r4,r2,1010a348 <__b2d+0xa0>
1010a300:	018002c4 	movi	r6,11
1010a304:	308dc83a 	sub	r6,r6,r2
1010a308:	9186d83a 	srl	r3,r18,r6
1010a30c:	18cffc34 	orhi	r3,r3,16368
1010a310:	8cc0212e 	bgeu	r17,r19,1010a398 <__b2d+0xf0>
1010a314:	813ffe17 	ldw	r4,-8(r16)
1010a318:	218cd83a 	srl	r6,r4,r6
1010a31c:	10800544 	addi	r2,r2,21
1010a320:	9084983a 	sll	r2,r18,r2
1010a324:	1184b03a 	or	r2,r2,r6
1010a328:	dfc00517 	ldw	ra,20(sp)
1010a32c:	dd000417 	ldw	r20,16(sp)
1010a330:	dcc00317 	ldw	r19,12(sp)
1010a334:	dc800217 	ldw	r18,8(sp)
1010a338:	dc400117 	ldw	r17,4(sp)
1010a33c:	dc000017 	ldw	r16,0(sp)
1010a340:	dec00604 	addi	sp,sp,24
1010a344:	f800283a 	ret
1010a348:	8cc00f2e 	bgeu	r17,r19,1010a388 <__b2d+0xe0>
1010a34c:	117ffd44 	addi	r5,r2,-11
1010a350:	80bffe17 	ldw	r2,-8(r16)
1010a354:	28000e26 	beq	r5,zero,1010a390 <__b2d+0xe8>
1010a358:	1949c83a 	sub	r4,r3,r5
1010a35c:	9164983a 	sll	r18,r18,r5
1010a360:	1106d83a 	srl	r3,r2,r4
1010a364:	81bffe04 	addi	r6,r16,-8
1010a368:	948ffc34 	orhi	r18,r18,16368
1010a36c:	90c6b03a 	or	r3,r18,r3
1010a370:	89800e2e 	bgeu	r17,r6,1010a3ac <__b2d+0x104>
1010a374:	81bffd17 	ldw	r6,-12(r16)
1010a378:	1144983a 	sll	r2,r2,r5
1010a37c:	310ad83a 	srl	r5,r6,r4
1010a380:	2884b03a 	or	r2,r5,r2
1010a384:	003fe806 	br	1010a328 <__alt_data_end+0xfffea328>
1010a388:	10bffd44 	addi	r2,r2,-11
1010a38c:	1000041e 	bne	r2,zero,1010a3a0 <__b2d+0xf8>
1010a390:	90cffc34 	orhi	r3,r18,16368
1010a394:	003fe406 	br	1010a328 <__alt_data_end+0xfffea328>
1010a398:	000d883a 	mov	r6,zero
1010a39c:	003fdf06 	br	1010a31c <__alt_data_end+0xfffea31c>
1010a3a0:	90a4983a 	sll	r18,r18,r2
1010a3a4:	0005883a 	mov	r2,zero
1010a3a8:	003ff906 	br	1010a390 <__alt_data_end+0xfffea390>
1010a3ac:	1144983a 	sll	r2,r2,r5
1010a3b0:	003fdd06 	br	1010a328 <__alt_data_end+0xfffea328>

1010a3b4 <__d2b>:
1010a3b4:	defff804 	addi	sp,sp,-32
1010a3b8:	dc000215 	stw	r16,8(sp)
1010a3bc:	3021883a 	mov	r16,r6
1010a3c0:	dc400315 	stw	r17,12(sp)
1010a3c4:	8022907a 	slli	r17,r16,1
1010a3c8:	dd000615 	stw	r20,24(sp)
1010a3cc:	2829883a 	mov	r20,r5
1010a3d0:	01400044 	movi	r5,1
1010a3d4:	dcc00515 	stw	r19,20(sp)
1010a3d8:	dc800415 	stw	r18,16(sp)
1010a3dc:	dfc00715 	stw	ra,28(sp)
1010a3e0:	3825883a 	mov	r18,r7
1010a3e4:	8822d57a 	srli	r17,r17,21
1010a3e8:	01097200 	call	10109720 <_Balloc>
1010a3ec:	1027883a 	mov	r19,r2
1010a3f0:	00800434 	movhi	r2,16
1010a3f4:	10bfffc4 	addi	r2,r2,-1
1010a3f8:	808c703a 	and	r6,r16,r2
1010a3fc:	88000126 	beq	r17,zero,1010a404 <__d2b+0x50>
1010a400:	31800434 	orhi	r6,r6,16
1010a404:	d9800015 	stw	r6,0(sp)
1010a408:	a0002426 	beq	r20,zero,1010a49c <__d2b+0xe8>
1010a40c:	d9000104 	addi	r4,sp,4
1010a410:	dd000115 	stw	r20,4(sp)
1010a414:	0109a7c0 	call	10109a7c <__lo0bits>
1010a418:	d8c00017 	ldw	r3,0(sp)
1010a41c:	10002f1e 	bne	r2,zero,1010a4dc <__d2b+0x128>
1010a420:	d9000117 	ldw	r4,4(sp)
1010a424:	99000515 	stw	r4,20(r19)
1010a428:	1821003a 	cmpeq	r16,r3,zero
1010a42c:	01000084 	movi	r4,2
1010a430:	2421c83a 	sub	r16,r4,r16
1010a434:	98c00615 	stw	r3,24(r19)
1010a438:	9c000415 	stw	r16,16(r19)
1010a43c:	88001f1e 	bne	r17,zero,1010a4bc <__d2b+0x108>
1010a440:	10bef384 	addi	r2,r2,-1074
1010a444:	90800015 	stw	r2,0(r18)
1010a448:	00900034 	movhi	r2,16384
1010a44c:	10bfffc4 	addi	r2,r2,-1
1010a450:	8085883a 	add	r2,r16,r2
1010a454:	1085883a 	add	r2,r2,r2
1010a458:	1085883a 	add	r2,r2,r2
1010a45c:	9885883a 	add	r2,r19,r2
1010a460:	11000517 	ldw	r4,20(r2)
1010a464:	8020917a 	slli	r16,r16,5
1010a468:	0109a140 	call	10109a14 <__hi0bits>
1010a46c:	d8c00817 	ldw	r3,32(sp)
1010a470:	8085c83a 	sub	r2,r16,r2
1010a474:	18800015 	stw	r2,0(r3)
1010a478:	9805883a 	mov	r2,r19
1010a47c:	dfc00717 	ldw	ra,28(sp)
1010a480:	dd000617 	ldw	r20,24(sp)
1010a484:	dcc00517 	ldw	r19,20(sp)
1010a488:	dc800417 	ldw	r18,16(sp)
1010a48c:	dc400317 	ldw	r17,12(sp)
1010a490:	dc000217 	ldw	r16,8(sp)
1010a494:	dec00804 	addi	sp,sp,32
1010a498:	f800283a 	ret
1010a49c:	d809883a 	mov	r4,sp
1010a4a0:	0109a7c0 	call	10109a7c <__lo0bits>
1010a4a4:	d8c00017 	ldw	r3,0(sp)
1010a4a8:	04000044 	movi	r16,1
1010a4ac:	9c000415 	stw	r16,16(r19)
1010a4b0:	98c00515 	stw	r3,20(r19)
1010a4b4:	10800804 	addi	r2,r2,32
1010a4b8:	883fe126 	beq	r17,zero,1010a440 <__alt_data_end+0xfffea440>
1010a4bc:	00c00d44 	movi	r3,53
1010a4c0:	8c7ef344 	addi	r17,r17,-1075
1010a4c4:	88a3883a 	add	r17,r17,r2
1010a4c8:	1885c83a 	sub	r2,r3,r2
1010a4cc:	d8c00817 	ldw	r3,32(sp)
1010a4d0:	94400015 	stw	r17,0(r18)
1010a4d4:	18800015 	stw	r2,0(r3)
1010a4d8:	003fe706 	br	1010a478 <__alt_data_end+0xfffea478>
1010a4dc:	01000804 	movi	r4,32
1010a4e0:	2089c83a 	sub	r4,r4,r2
1010a4e4:	1908983a 	sll	r4,r3,r4
1010a4e8:	d9400117 	ldw	r5,4(sp)
1010a4ec:	1886d83a 	srl	r3,r3,r2
1010a4f0:	2148b03a 	or	r4,r4,r5
1010a4f4:	99000515 	stw	r4,20(r19)
1010a4f8:	d8c00015 	stw	r3,0(sp)
1010a4fc:	003fca06 	br	1010a428 <__alt_data_end+0xfffea428>

1010a500 <__ratio>:
1010a500:	defff904 	addi	sp,sp,-28
1010a504:	dc400315 	stw	r17,12(sp)
1010a508:	2823883a 	mov	r17,r5
1010a50c:	d9400104 	addi	r5,sp,4
1010a510:	dfc00615 	stw	ra,24(sp)
1010a514:	dcc00515 	stw	r19,20(sp)
1010a518:	dc800415 	stw	r18,16(sp)
1010a51c:	2027883a 	mov	r19,r4
1010a520:	dc000215 	stw	r16,8(sp)
1010a524:	010a2a80 	call	1010a2a8 <__b2d>
1010a528:	d80b883a 	mov	r5,sp
1010a52c:	8809883a 	mov	r4,r17
1010a530:	1025883a 	mov	r18,r2
1010a534:	1821883a 	mov	r16,r3
1010a538:	010a2a80 	call	1010a2a8 <__b2d>
1010a53c:	8a000417 	ldw	r8,16(r17)
1010a540:	99000417 	ldw	r4,16(r19)
1010a544:	d9400117 	ldw	r5,4(sp)
1010a548:	2209c83a 	sub	r4,r4,r8
1010a54c:	2010917a 	slli	r8,r4,5
1010a550:	d9000017 	ldw	r4,0(sp)
1010a554:	2909c83a 	sub	r4,r5,r4
1010a558:	4109883a 	add	r4,r8,r4
1010a55c:	01000e0e 	bge	zero,r4,1010a598 <__ratio+0x98>
1010a560:	2008953a 	slli	r4,r4,20
1010a564:	2421883a 	add	r16,r4,r16
1010a568:	100d883a 	mov	r6,r2
1010a56c:	180f883a 	mov	r7,r3
1010a570:	9009883a 	mov	r4,r18
1010a574:	800b883a 	mov	r5,r16
1010a578:	010dc880 	call	1010dc88 <__divdf3>
1010a57c:	dfc00617 	ldw	ra,24(sp)
1010a580:	dcc00517 	ldw	r19,20(sp)
1010a584:	dc800417 	ldw	r18,16(sp)
1010a588:	dc400317 	ldw	r17,12(sp)
1010a58c:	dc000217 	ldw	r16,8(sp)
1010a590:	dec00704 	addi	sp,sp,28
1010a594:	f800283a 	ret
1010a598:	2008953a 	slli	r4,r4,20
1010a59c:	1907c83a 	sub	r3,r3,r4
1010a5a0:	003ff106 	br	1010a568 <__alt_data_end+0xfffea568>

1010a5a4 <_mprec_log10>:
1010a5a4:	defffe04 	addi	sp,sp,-8
1010a5a8:	dc000015 	stw	r16,0(sp)
1010a5ac:	dfc00115 	stw	ra,4(sp)
1010a5b0:	008005c4 	movi	r2,23
1010a5b4:	2021883a 	mov	r16,r4
1010a5b8:	11000d0e 	bge	r2,r4,1010a5f0 <_mprec_log10+0x4c>
1010a5bc:	0005883a 	mov	r2,zero
1010a5c0:	00cffc34 	movhi	r3,16368
1010a5c4:	843fffc4 	addi	r16,r16,-1
1010a5c8:	000d883a 	mov	r6,zero
1010a5cc:	01d00934 	movhi	r7,16420
1010a5d0:	1009883a 	mov	r4,r2
1010a5d4:	180b883a 	mov	r5,r3
1010a5d8:	010e7c80 	call	1010e7c8 <__muldf3>
1010a5dc:	803ff91e 	bne	r16,zero,1010a5c4 <__alt_data_end+0xfffea5c4>
1010a5e0:	dfc00117 	ldw	ra,4(sp)
1010a5e4:	dc000017 	ldw	r16,0(sp)
1010a5e8:	dec00204 	addi	sp,sp,8
1010a5ec:	f800283a 	ret
1010a5f0:	202090fa 	slli	r16,r4,3
1010a5f4:	00840474 	movhi	r2,4113
1010a5f8:	108a4804 	addi	r2,r2,10528
1010a5fc:	1421883a 	add	r16,r2,r16
1010a600:	80800017 	ldw	r2,0(r16)
1010a604:	80c00117 	ldw	r3,4(r16)
1010a608:	dfc00117 	ldw	ra,4(sp)
1010a60c:	dc000017 	ldw	r16,0(sp)
1010a610:	dec00204 	addi	sp,sp,8
1010a614:	f800283a 	ret

1010a618 <__copybits>:
1010a618:	297fffc4 	addi	r5,r5,-1
1010a61c:	280fd17a 	srai	r7,r5,5
1010a620:	30c00417 	ldw	r3,16(r6)
1010a624:	30800504 	addi	r2,r6,20
1010a628:	39c00044 	addi	r7,r7,1
1010a62c:	18c7883a 	add	r3,r3,r3
1010a630:	39cf883a 	add	r7,r7,r7
1010a634:	18c7883a 	add	r3,r3,r3
1010a638:	39cf883a 	add	r7,r7,r7
1010a63c:	10c7883a 	add	r3,r2,r3
1010a640:	21cf883a 	add	r7,r4,r7
1010a644:	10c00d2e 	bgeu	r2,r3,1010a67c <__copybits+0x64>
1010a648:	200b883a 	mov	r5,r4
1010a64c:	12000017 	ldw	r8,0(r2)
1010a650:	29400104 	addi	r5,r5,4
1010a654:	10800104 	addi	r2,r2,4
1010a658:	2a3fff15 	stw	r8,-4(r5)
1010a65c:	10fffb36 	bltu	r2,r3,1010a64c <__alt_data_end+0xfffea64c>
1010a660:	1985c83a 	sub	r2,r3,r6
1010a664:	10bffac4 	addi	r2,r2,-21
1010a668:	1004d0ba 	srli	r2,r2,2
1010a66c:	10800044 	addi	r2,r2,1
1010a670:	1085883a 	add	r2,r2,r2
1010a674:	1085883a 	add	r2,r2,r2
1010a678:	2089883a 	add	r4,r4,r2
1010a67c:	21c0032e 	bgeu	r4,r7,1010a68c <__copybits+0x74>
1010a680:	20000015 	stw	zero,0(r4)
1010a684:	21000104 	addi	r4,r4,4
1010a688:	21fffd36 	bltu	r4,r7,1010a680 <__alt_data_end+0xfffea680>
1010a68c:	f800283a 	ret

1010a690 <__any_on>:
1010a690:	20c00417 	ldw	r3,16(r4)
1010a694:	2805d17a 	srai	r2,r5,5
1010a698:	21000504 	addi	r4,r4,20
1010a69c:	18800d0e 	bge	r3,r2,1010a6d4 <__any_on+0x44>
1010a6a0:	18c7883a 	add	r3,r3,r3
1010a6a4:	18c7883a 	add	r3,r3,r3
1010a6a8:	20c7883a 	add	r3,r4,r3
1010a6ac:	20c0192e 	bgeu	r4,r3,1010a714 <__any_on+0x84>
1010a6b0:	18bfff17 	ldw	r2,-4(r3)
1010a6b4:	18ffff04 	addi	r3,r3,-4
1010a6b8:	1000041e 	bne	r2,zero,1010a6cc <__any_on+0x3c>
1010a6bc:	20c0142e 	bgeu	r4,r3,1010a710 <__any_on+0x80>
1010a6c0:	18ffff04 	addi	r3,r3,-4
1010a6c4:	19400017 	ldw	r5,0(r3)
1010a6c8:	283ffc26 	beq	r5,zero,1010a6bc <__alt_data_end+0xfffea6bc>
1010a6cc:	00800044 	movi	r2,1
1010a6d0:	f800283a 	ret
1010a6d4:	10c00a0e 	bge	r2,r3,1010a700 <__any_on+0x70>
1010a6d8:	1085883a 	add	r2,r2,r2
1010a6dc:	1085883a 	add	r2,r2,r2
1010a6e0:	294007cc 	andi	r5,r5,31
1010a6e4:	2087883a 	add	r3,r4,r2
1010a6e8:	283ff026 	beq	r5,zero,1010a6ac <__alt_data_end+0xfffea6ac>
1010a6ec:	19800017 	ldw	r6,0(r3)
1010a6f0:	3144d83a 	srl	r2,r6,r5
1010a6f4:	114a983a 	sll	r5,r2,r5
1010a6f8:	317ff41e 	bne	r6,r5,1010a6cc <__alt_data_end+0xfffea6cc>
1010a6fc:	003feb06 	br	1010a6ac <__alt_data_end+0xfffea6ac>
1010a700:	1085883a 	add	r2,r2,r2
1010a704:	1085883a 	add	r2,r2,r2
1010a708:	2087883a 	add	r3,r4,r2
1010a70c:	003fe706 	br	1010a6ac <__alt_data_end+0xfffea6ac>
1010a710:	f800283a 	ret
1010a714:	0005883a 	mov	r2,zero
1010a718:	f800283a 	ret

1010a71c <_read_r>:
1010a71c:	defffd04 	addi	sp,sp,-12
1010a720:	2805883a 	mov	r2,r5
1010a724:	dc000015 	stw	r16,0(sp)
1010a728:	04040474 	movhi	r16,4113
1010a72c:	dc400115 	stw	r17,4(sp)
1010a730:	300b883a 	mov	r5,r6
1010a734:	84188004 	addi	r16,r16,25088
1010a738:	2023883a 	mov	r17,r4
1010a73c:	380d883a 	mov	r6,r7
1010a740:	1009883a 	mov	r4,r2
1010a744:	dfc00215 	stw	ra,8(sp)
1010a748:	80000015 	stw	zero,0(r16)
1010a74c:	01102980 	call	10110298 <read>
1010a750:	00ffffc4 	movi	r3,-1
1010a754:	10c00526 	beq	r2,r3,1010a76c <_read_r+0x50>
1010a758:	dfc00217 	ldw	ra,8(sp)
1010a75c:	dc400117 	ldw	r17,4(sp)
1010a760:	dc000017 	ldw	r16,0(sp)
1010a764:	dec00304 	addi	sp,sp,12
1010a768:	f800283a 	ret
1010a76c:	80c00017 	ldw	r3,0(r16)
1010a770:	183ff926 	beq	r3,zero,1010a758 <__alt_data_end+0xfffea758>
1010a774:	88c00015 	stw	r3,0(r17)
1010a778:	003ff706 	br	1010a758 <__alt_data_end+0xfffea758>

1010a77c <_realloc_r>:
1010a77c:	defff604 	addi	sp,sp,-40
1010a780:	dc800215 	stw	r18,8(sp)
1010a784:	dfc00915 	stw	ra,36(sp)
1010a788:	df000815 	stw	fp,32(sp)
1010a78c:	ddc00715 	stw	r23,28(sp)
1010a790:	dd800615 	stw	r22,24(sp)
1010a794:	dd400515 	stw	r21,20(sp)
1010a798:	dd000415 	stw	r20,16(sp)
1010a79c:	dcc00315 	stw	r19,12(sp)
1010a7a0:	dc400115 	stw	r17,4(sp)
1010a7a4:	dc000015 	stw	r16,0(sp)
1010a7a8:	3025883a 	mov	r18,r6
1010a7ac:	2800b726 	beq	r5,zero,1010aa8c <_realloc_r+0x310>
1010a7b0:	282b883a 	mov	r21,r5
1010a7b4:	2029883a 	mov	r20,r4
1010a7b8:	010ffc00 	call	1010ffc0 <__malloc_lock>
1010a7bc:	a8bfff17 	ldw	r2,-4(r21)
1010a7c0:	043fff04 	movi	r16,-4
1010a7c4:	90c002c4 	addi	r3,r18,11
1010a7c8:	01000584 	movi	r4,22
1010a7cc:	acfffe04 	addi	r19,r21,-8
1010a7d0:	1420703a 	and	r16,r2,r16
1010a7d4:	20c0332e 	bgeu	r4,r3,1010a8a4 <_realloc_r+0x128>
1010a7d8:	047ffe04 	movi	r17,-8
1010a7dc:	1c62703a 	and	r17,r3,r17
1010a7e0:	8807883a 	mov	r3,r17
1010a7e4:	88005816 	blt	r17,zero,1010a948 <_realloc_r+0x1cc>
1010a7e8:	8c805736 	bltu	r17,r18,1010a948 <_realloc_r+0x1cc>
1010a7ec:	80c0300e 	bge	r16,r3,1010a8b0 <_realloc_r+0x134>
1010a7f0:	07040474 	movhi	fp,4113
1010a7f4:	e70bdb04 	addi	fp,fp,12140
1010a7f8:	e1c00217 	ldw	r7,8(fp)
1010a7fc:	9c09883a 	add	r4,r19,r16
1010a800:	22000117 	ldw	r8,4(r4)
1010a804:	21c06326 	beq	r4,r7,1010a994 <_realloc_r+0x218>
1010a808:	017fff84 	movi	r5,-2
1010a80c:	414a703a 	and	r5,r8,r5
1010a810:	214b883a 	add	r5,r4,r5
1010a814:	29800117 	ldw	r6,4(r5)
1010a818:	3180004c 	andi	r6,r6,1
1010a81c:	30003f26 	beq	r6,zero,1010a91c <_realloc_r+0x1a0>
1010a820:	1080004c 	andi	r2,r2,1
1010a824:	10008326 	beq	r2,zero,1010aa34 <_realloc_r+0x2b8>
1010a828:	900b883a 	mov	r5,r18
1010a82c:	a009883a 	mov	r4,r20
1010a830:	0103d940 	call	10103d94 <_malloc_r>
1010a834:	1025883a 	mov	r18,r2
1010a838:	10011e26 	beq	r2,zero,1010acb4 <_realloc_r+0x538>
1010a83c:	a93fff17 	ldw	r4,-4(r21)
1010a840:	10fffe04 	addi	r3,r2,-8
1010a844:	00bfff84 	movi	r2,-2
1010a848:	2084703a 	and	r2,r4,r2
1010a84c:	9885883a 	add	r2,r19,r2
1010a850:	1880ee26 	beq	r3,r2,1010ac0c <_realloc_r+0x490>
1010a854:	81bfff04 	addi	r6,r16,-4
1010a858:	00800904 	movi	r2,36
1010a85c:	1180b836 	bltu	r2,r6,1010ab40 <_realloc_r+0x3c4>
1010a860:	00c004c4 	movi	r3,19
1010a864:	19809636 	bltu	r3,r6,1010aac0 <_realloc_r+0x344>
1010a868:	9005883a 	mov	r2,r18
1010a86c:	a807883a 	mov	r3,r21
1010a870:	19000017 	ldw	r4,0(r3)
1010a874:	11000015 	stw	r4,0(r2)
1010a878:	19000117 	ldw	r4,4(r3)
1010a87c:	11000115 	stw	r4,4(r2)
1010a880:	18c00217 	ldw	r3,8(r3)
1010a884:	10c00215 	stw	r3,8(r2)
1010a888:	a80b883a 	mov	r5,r21
1010a88c:	a009883a 	mov	r4,r20
1010a890:	01031640 	call	10103164 <_free_r>
1010a894:	a009883a 	mov	r4,r20
1010a898:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010a89c:	9005883a 	mov	r2,r18
1010a8a0:	00001206 	br	1010a8ec <_realloc_r+0x170>
1010a8a4:	00c00404 	movi	r3,16
1010a8a8:	1823883a 	mov	r17,r3
1010a8ac:	003fce06 	br	1010a7e8 <__alt_data_end+0xfffea7e8>
1010a8b0:	a825883a 	mov	r18,r21
1010a8b4:	8445c83a 	sub	r2,r16,r17
1010a8b8:	00c003c4 	movi	r3,15
1010a8bc:	18802636 	bltu	r3,r2,1010a958 <_realloc_r+0x1dc>
1010a8c0:	99800117 	ldw	r6,4(r19)
1010a8c4:	9c07883a 	add	r3,r19,r16
1010a8c8:	3180004c 	andi	r6,r6,1
1010a8cc:	3420b03a 	or	r16,r6,r16
1010a8d0:	9c000115 	stw	r16,4(r19)
1010a8d4:	18800117 	ldw	r2,4(r3)
1010a8d8:	10800054 	ori	r2,r2,1
1010a8dc:	18800115 	stw	r2,4(r3)
1010a8e0:	a009883a 	mov	r4,r20
1010a8e4:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010a8e8:	9005883a 	mov	r2,r18
1010a8ec:	dfc00917 	ldw	ra,36(sp)
1010a8f0:	df000817 	ldw	fp,32(sp)
1010a8f4:	ddc00717 	ldw	r23,28(sp)
1010a8f8:	dd800617 	ldw	r22,24(sp)
1010a8fc:	dd400517 	ldw	r21,20(sp)
1010a900:	dd000417 	ldw	r20,16(sp)
1010a904:	dcc00317 	ldw	r19,12(sp)
1010a908:	dc800217 	ldw	r18,8(sp)
1010a90c:	dc400117 	ldw	r17,4(sp)
1010a910:	dc000017 	ldw	r16,0(sp)
1010a914:	dec00a04 	addi	sp,sp,40
1010a918:	f800283a 	ret
1010a91c:	017fff04 	movi	r5,-4
1010a920:	414a703a 	and	r5,r8,r5
1010a924:	814d883a 	add	r6,r16,r5
1010a928:	30c01f16 	blt	r6,r3,1010a9a8 <_realloc_r+0x22c>
1010a92c:	20800317 	ldw	r2,12(r4)
1010a930:	20c00217 	ldw	r3,8(r4)
1010a934:	a825883a 	mov	r18,r21
1010a938:	3021883a 	mov	r16,r6
1010a93c:	18800315 	stw	r2,12(r3)
1010a940:	10c00215 	stw	r3,8(r2)
1010a944:	003fdb06 	br	1010a8b4 <__alt_data_end+0xfffea8b4>
1010a948:	00800304 	movi	r2,12
1010a94c:	a0800015 	stw	r2,0(r20)
1010a950:	0005883a 	mov	r2,zero
1010a954:	003fe506 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010a958:	98c00117 	ldw	r3,4(r19)
1010a95c:	9c4b883a 	add	r5,r19,r17
1010a960:	11000054 	ori	r4,r2,1
1010a964:	18c0004c 	andi	r3,r3,1
1010a968:	1c62b03a 	or	r17,r3,r17
1010a96c:	9c400115 	stw	r17,4(r19)
1010a970:	29000115 	stw	r4,4(r5)
1010a974:	2885883a 	add	r2,r5,r2
1010a978:	10c00117 	ldw	r3,4(r2)
1010a97c:	29400204 	addi	r5,r5,8
1010a980:	a009883a 	mov	r4,r20
1010a984:	18c00054 	ori	r3,r3,1
1010a988:	10c00115 	stw	r3,4(r2)
1010a98c:	01031640 	call	10103164 <_free_r>
1010a990:	003fd306 	br	1010a8e0 <__alt_data_end+0xfffea8e0>
1010a994:	017fff04 	movi	r5,-4
1010a998:	414a703a 	and	r5,r8,r5
1010a99c:	89800404 	addi	r6,r17,16
1010a9a0:	8151883a 	add	r8,r16,r5
1010a9a4:	4180590e 	bge	r8,r6,1010ab0c <_realloc_r+0x390>
1010a9a8:	1080004c 	andi	r2,r2,1
1010a9ac:	103f9e1e 	bne	r2,zero,1010a828 <__alt_data_end+0xfffea828>
1010a9b0:	adbffe17 	ldw	r22,-8(r21)
1010a9b4:	00bfff04 	movi	r2,-4
1010a9b8:	9dadc83a 	sub	r22,r19,r22
1010a9bc:	b1800117 	ldw	r6,4(r22)
1010a9c0:	3084703a 	and	r2,r6,r2
1010a9c4:	20002026 	beq	r4,zero,1010aa48 <_realloc_r+0x2cc>
1010a9c8:	80af883a 	add	r23,r16,r2
1010a9cc:	b96f883a 	add	r23,r23,r5
1010a9d0:	21c05f26 	beq	r4,r7,1010ab50 <_realloc_r+0x3d4>
1010a9d4:	b8c01c16 	blt	r23,r3,1010aa48 <_realloc_r+0x2cc>
1010a9d8:	20800317 	ldw	r2,12(r4)
1010a9dc:	20c00217 	ldw	r3,8(r4)
1010a9e0:	81bfff04 	addi	r6,r16,-4
1010a9e4:	01000904 	movi	r4,36
1010a9e8:	18800315 	stw	r2,12(r3)
1010a9ec:	10c00215 	stw	r3,8(r2)
1010a9f0:	b0c00217 	ldw	r3,8(r22)
1010a9f4:	b0800317 	ldw	r2,12(r22)
1010a9f8:	b4800204 	addi	r18,r22,8
1010a9fc:	18800315 	stw	r2,12(r3)
1010aa00:	10c00215 	stw	r3,8(r2)
1010aa04:	21801b36 	bltu	r4,r6,1010aa74 <_realloc_r+0x2f8>
1010aa08:	008004c4 	movi	r2,19
1010aa0c:	1180352e 	bgeu	r2,r6,1010aae4 <_realloc_r+0x368>
1010aa10:	a8800017 	ldw	r2,0(r21)
1010aa14:	b0800215 	stw	r2,8(r22)
1010aa18:	a8800117 	ldw	r2,4(r21)
1010aa1c:	b0800315 	stw	r2,12(r22)
1010aa20:	008006c4 	movi	r2,27
1010aa24:	11807f36 	bltu	r2,r6,1010ac24 <_realloc_r+0x4a8>
1010aa28:	b0800404 	addi	r2,r22,16
1010aa2c:	ad400204 	addi	r21,r21,8
1010aa30:	00002d06 	br	1010aae8 <_realloc_r+0x36c>
1010aa34:	adbffe17 	ldw	r22,-8(r21)
1010aa38:	00bfff04 	movi	r2,-4
1010aa3c:	9dadc83a 	sub	r22,r19,r22
1010aa40:	b1000117 	ldw	r4,4(r22)
1010aa44:	2084703a 	and	r2,r4,r2
1010aa48:	b03f7726 	beq	r22,zero,1010a828 <__alt_data_end+0xfffea828>
1010aa4c:	80af883a 	add	r23,r16,r2
1010aa50:	b8ff7516 	blt	r23,r3,1010a828 <__alt_data_end+0xfffea828>
1010aa54:	b0800317 	ldw	r2,12(r22)
1010aa58:	b0c00217 	ldw	r3,8(r22)
1010aa5c:	81bfff04 	addi	r6,r16,-4
1010aa60:	01000904 	movi	r4,36
1010aa64:	18800315 	stw	r2,12(r3)
1010aa68:	10c00215 	stw	r3,8(r2)
1010aa6c:	b4800204 	addi	r18,r22,8
1010aa70:	21bfe52e 	bgeu	r4,r6,1010aa08 <__alt_data_end+0xfffeaa08>
1010aa74:	a80b883a 	mov	r5,r21
1010aa78:	9009883a 	mov	r4,r18
1010aa7c:	01095c40 	call	101095c4 <memmove>
1010aa80:	b821883a 	mov	r16,r23
1010aa84:	b027883a 	mov	r19,r22
1010aa88:	003f8a06 	br	1010a8b4 <__alt_data_end+0xfffea8b4>
1010aa8c:	300b883a 	mov	r5,r6
1010aa90:	dfc00917 	ldw	ra,36(sp)
1010aa94:	df000817 	ldw	fp,32(sp)
1010aa98:	ddc00717 	ldw	r23,28(sp)
1010aa9c:	dd800617 	ldw	r22,24(sp)
1010aaa0:	dd400517 	ldw	r21,20(sp)
1010aaa4:	dd000417 	ldw	r20,16(sp)
1010aaa8:	dcc00317 	ldw	r19,12(sp)
1010aaac:	dc800217 	ldw	r18,8(sp)
1010aab0:	dc400117 	ldw	r17,4(sp)
1010aab4:	dc000017 	ldw	r16,0(sp)
1010aab8:	dec00a04 	addi	sp,sp,40
1010aabc:	0103d941 	jmpi	10103d94 <_malloc_r>
1010aac0:	a8c00017 	ldw	r3,0(r21)
1010aac4:	90c00015 	stw	r3,0(r18)
1010aac8:	a8c00117 	ldw	r3,4(r21)
1010aacc:	90c00115 	stw	r3,4(r18)
1010aad0:	00c006c4 	movi	r3,27
1010aad4:	19804536 	bltu	r3,r6,1010abec <_realloc_r+0x470>
1010aad8:	90800204 	addi	r2,r18,8
1010aadc:	a8c00204 	addi	r3,r21,8
1010aae0:	003f6306 	br	1010a870 <__alt_data_end+0xfffea870>
1010aae4:	9005883a 	mov	r2,r18
1010aae8:	a8c00017 	ldw	r3,0(r21)
1010aaec:	b821883a 	mov	r16,r23
1010aaf0:	b027883a 	mov	r19,r22
1010aaf4:	10c00015 	stw	r3,0(r2)
1010aaf8:	a8c00117 	ldw	r3,4(r21)
1010aafc:	10c00115 	stw	r3,4(r2)
1010ab00:	a8c00217 	ldw	r3,8(r21)
1010ab04:	10c00215 	stw	r3,8(r2)
1010ab08:	003f6a06 	br	1010a8b4 <__alt_data_end+0xfffea8b4>
1010ab0c:	9c67883a 	add	r19,r19,r17
1010ab10:	4445c83a 	sub	r2,r8,r17
1010ab14:	e4c00215 	stw	r19,8(fp)
1010ab18:	10800054 	ori	r2,r2,1
1010ab1c:	98800115 	stw	r2,4(r19)
1010ab20:	a8bfff17 	ldw	r2,-4(r21)
1010ab24:	a009883a 	mov	r4,r20
1010ab28:	1080004c 	andi	r2,r2,1
1010ab2c:	1462b03a 	or	r17,r2,r17
1010ab30:	ac7fff15 	stw	r17,-4(r21)
1010ab34:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010ab38:	a805883a 	mov	r2,r21
1010ab3c:	003f6b06 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010ab40:	a80b883a 	mov	r5,r21
1010ab44:	9009883a 	mov	r4,r18
1010ab48:	01095c40 	call	101095c4 <memmove>
1010ab4c:	003f4e06 	br	1010a888 <__alt_data_end+0xfffea888>
1010ab50:	89000404 	addi	r4,r17,16
1010ab54:	b93fbc16 	blt	r23,r4,1010aa48 <__alt_data_end+0xfffeaa48>
1010ab58:	b0800317 	ldw	r2,12(r22)
1010ab5c:	b0c00217 	ldw	r3,8(r22)
1010ab60:	81bfff04 	addi	r6,r16,-4
1010ab64:	01000904 	movi	r4,36
1010ab68:	18800315 	stw	r2,12(r3)
1010ab6c:	10c00215 	stw	r3,8(r2)
1010ab70:	b4800204 	addi	r18,r22,8
1010ab74:	21804336 	bltu	r4,r6,1010ac84 <_realloc_r+0x508>
1010ab78:	008004c4 	movi	r2,19
1010ab7c:	11803f2e 	bgeu	r2,r6,1010ac7c <_realloc_r+0x500>
1010ab80:	a8800017 	ldw	r2,0(r21)
1010ab84:	b0800215 	stw	r2,8(r22)
1010ab88:	a8800117 	ldw	r2,4(r21)
1010ab8c:	b0800315 	stw	r2,12(r22)
1010ab90:	008006c4 	movi	r2,27
1010ab94:	11803f36 	bltu	r2,r6,1010ac94 <_realloc_r+0x518>
1010ab98:	b0800404 	addi	r2,r22,16
1010ab9c:	ad400204 	addi	r21,r21,8
1010aba0:	a8c00017 	ldw	r3,0(r21)
1010aba4:	10c00015 	stw	r3,0(r2)
1010aba8:	a8c00117 	ldw	r3,4(r21)
1010abac:	10c00115 	stw	r3,4(r2)
1010abb0:	a8c00217 	ldw	r3,8(r21)
1010abb4:	10c00215 	stw	r3,8(r2)
1010abb8:	b447883a 	add	r3,r22,r17
1010abbc:	bc45c83a 	sub	r2,r23,r17
1010abc0:	e0c00215 	stw	r3,8(fp)
1010abc4:	10800054 	ori	r2,r2,1
1010abc8:	18800115 	stw	r2,4(r3)
1010abcc:	b0800117 	ldw	r2,4(r22)
1010abd0:	a009883a 	mov	r4,r20
1010abd4:	1080004c 	andi	r2,r2,1
1010abd8:	1462b03a 	or	r17,r2,r17
1010abdc:	b4400115 	stw	r17,4(r22)
1010abe0:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010abe4:	9005883a 	mov	r2,r18
1010abe8:	003f4006 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010abec:	a8c00217 	ldw	r3,8(r21)
1010abf0:	90c00215 	stw	r3,8(r18)
1010abf4:	a8c00317 	ldw	r3,12(r21)
1010abf8:	90c00315 	stw	r3,12(r18)
1010abfc:	30801126 	beq	r6,r2,1010ac44 <_realloc_r+0x4c8>
1010ac00:	90800404 	addi	r2,r18,16
1010ac04:	a8c00404 	addi	r3,r21,16
1010ac08:	003f1906 	br	1010a870 <__alt_data_end+0xfffea870>
1010ac0c:	90ffff17 	ldw	r3,-4(r18)
1010ac10:	00bfff04 	movi	r2,-4
1010ac14:	a825883a 	mov	r18,r21
1010ac18:	1884703a 	and	r2,r3,r2
1010ac1c:	80a1883a 	add	r16,r16,r2
1010ac20:	003f2406 	br	1010a8b4 <__alt_data_end+0xfffea8b4>
1010ac24:	a8800217 	ldw	r2,8(r21)
1010ac28:	b0800415 	stw	r2,16(r22)
1010ac2c:	a8800317 	ldw	r2,12(r21)
1010ac30:	b0800515 	stw	r2,20(r22)
1010ac34:	31000a26 	beq	r6,r4,1010ac60 <_realloc_r+0x4e4>
1010ac38:	b0800604 	addi	r2,r22,24
1010ac3c:	ad400404 	addi	r21,r21,16
1010ac40:	003fa906 	br	1010aae8 <__alt_data_end+0xfffeaae8>
1010ac44:	a9000417 	ldw	r4,16(r21)
1010ac48:	90800604 	addi	r2,r18,24
1010ac4c:	a8c00604 	addi	r3,r21,24
1010ac50:	91000415 	stw	r4,16(r18)
1010ac54:	a9000517 	ldw	r4,20(r21)
1010ac58:	91000515 	stw	r4,20(r18)
1010ac5c:	003f0406 	br	1010a870 <__alt_data_end+0xfffea870>
1010ac60:	a8c00417 	ldw	r3,16(r21)
1010ac64:	ad400604 	addi	r21,r21,24
1010ac68:	b0800804 	addi	r2,r22,32
1010ac6c:	b0c00615 	stw	r3,24(r22)
1010ac70:	a8ffff17 	ldw	r3,-4(r21)
1010ac74:	b0c00715 	stw	r3,28(r22)
1010ac78:	003f9b06 	br	1010aae8 <__alt_data_end+0xfffeaae8>
1010ac7c:	9005883a 	mov	r2,r18
1010ac80:	003fc706 	br	1010aba0 <__alt_data_end+0xfffeaba0>
1010ac84:	a80b883a 	mov	r5,r21
1010ac88:	9009883a 	mov	r4,r18
1010ac8c:	01095c40 	call	101095c4 <memmove>
1010ac90:	003fc906 	br	1010abb8 <__alt_data_end+0xfffeabb8>
1010ac94:	a8800217 	ldw	r2,8(r21)
1010ac98:	b0800415 	stw	r2,16(r22)
1010ac9c:	a8800317 	ldw	r2,12(r21)
1010aca0:	b0800515 	stw	r2,20(r22)
1010aca4:	31000726 	beq	r6,r4,1010acc4 <_realloc_r+0x548>
1010aca8:	b0800604 	addi	r2,r22,24
1010acac:	ad400404 	addi	r21,r21,16
1010acb0:	003fbb06 	br	1010aba0 <__alt_data_end+0xfffeaba0>
1010acb4:	a009883a 	mov	r4,r20
1010acb8:	010ffe40 	call	1010ffe4 <__malloc_unlock>
1010acbc:	0005883a 	mov	r2,zero
1010acc0:	003f0a06 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010acc4:	a8c00417 	ldw	r3,16(r21)
1010acc8:	ad400604 	addi	r21,r21,24
1010accc:	b0800804 	addi	r2,r22,32
1010acd0:	b0c00615 	stw	r3,24(r22)
1010acd4:	a8ffff17 	ldw	r3,-4(r21)
1010acd8:	b0c00715 	stw	r3,28(r22)
1010acdc:	003fb006 	br	1010aba0 <__alt_data_end+0xfffeaba0>

1010ace0 <__fpclassifyd>:
1010ace0:	00a00034 	movhi	r2,32768
1010ace4:	10bfffc4 	addi	r2,r2,-1
1010ace8:	2884703a 	and	r2,r5,r2
1010acec:	10000726 	beq	r2,zero,1010ad0c <__fpclassifyd+0x2c>
1010acf0:	00fffc34 	movhi	r3,65520
1010acf4:	019ff834 	movhi	r6,32736
1010acf8:	28c7883a 	add	r3,r5,r3
1010acfc:	31bfffc4 	addi	r6,r6,-1
1010ad00:	30c00536 	bltu	r6,r3,1010ad18 <__fpclassifyd+0x38>
1010ad04:	00800104 	movi	r2,4
1010ad08:	f800283a 	ret
1010ad0c:	2000021e 	bne	r4,zero,1010ad18 <__fpclassifyd+0x38>
1010ad10:	00800084 	movi	r2,2
1010ad14:	f800283a 	ret
1010ad18:	00dffc34 	movhi	r3,32752
1010ad1c:	019ff834 	movhi	r6,32736
1010ad20:	28cb883a 	add	r5,r5,r3
1010ad24:	31bfffc4 	addi	r6,r6,-1
1010ad28:	317ff62e 	bgeu	r6,r5,1010ad04 <__alt_data_end+0xfffead04>
1010ad2c:	01400434 	movhi	r5,16
1010ad30:	297fffc4 	addi	r5,r5,-1
1010ad34:	28800236 	bltu	r5,r2,1010ad40 <__fpclassifyd+0x60>
1010ad38:	008000c4 	movi	r2,3
1010ad3c:	f800283a 	ret
1010ad40:	10c00226 	beq	r2,r3,1010ad4c <__fpclassifyd+0x6c>
1010ad44:	0005883a 	mov	r2,zero
1010ad48:	f800283a 	ret
1010ad4c:	2005003a 	cmpeq	r2,r4,zero
1010ad50:	f800283a 	ret

1010ad54 <strcmp>:
1010ad54:	2144b03a 	or	r2,r4,r5
1010ad58:	108000cc 	andi	r2,r2,3
1010ad5c:	1000171e 	bne	r2,zero,1010adbc <strcmp+0x68>
1010ad60:	20800017 	ldw	r2,0(r4)
1010ad64:	28c00017 	ldw	r3,0(r5)
1010ad68:	10c0141e 	bne	r2,r3,1010adbc <strcmp+0x68>
1010ad6c:	027fbff4 	movhi	r9,65279
1010ad70:	4a7fbfc4 	addi	r9,r9,-257
1010ad74:	0086303a 	nor	r3,zero,r2
1010ad78:	02202074 	movhi	r8,32897
1010ad7c:	1245883a 	add	r2,r2,r9
1010ad80:	42202004 	addi	r8,r8,-32640
1010ad84:	10c4703a 	and	r2,r2,r3
1010ad88:	1204703a 	and	r2,r2,r8
1010ad8c:	10000226 	beq	r2,zero,1010ad98 <strcmp+0x44>
1010ad90:	00002306 	br	1010ae20 <strcmp+0xcc>
1010ad94:	1000221e 	bne	r2,zero,1010ae20 <strcmp+0xcc>
1010ad98:	21000104 	addi	r4,r4,4
1010ad9c:	20c00017 	ldw	r3,0(r4)
1010ada0:	29400104 	addi	r5,r5,4
1010ada4:	29800017 	ldw	r6,0(r5)
1010ada8:	1a4f883a 	add	r7,r3,r9
1010adac:	00c4303a 	nor	r2,zero,r3
1010adb0:	3884703a 	and	r2,r7,r2
1010adb4:	1204703a 	and	r2,r2,r8
1010adb8:	19bff626 	beq	r3,r6,1010ad94 <__alt_data_end+0xfffead94>
1010adbc:	20800003 	ldbu	r2,0(r4)
1010adc0:	10c03fcc 	andi	r3,r2,255
1010adc4:	18c0201c 	xori	r3,r3,128
1010adc8:	18ffe004 	addi	r3,r3,-128
1010adcc:	18000c26 	beq	r3,zero,1010ae00 <strcmp+0xac>
1010add0:	29800007 	ldb	r6,0(r5)
1010add4:	19800326 	beq	r3,r6,1010ade4 <strcmp+0x90>
1010add8:	00001306 	br	1010ae28 <strcmp+0xd4>
1010addc:	29800007 	ldb	r6,0(r5)
1010ade0:	11800b1e 	bne	r2,r6,1010ae10 <strcmp+0xbc>
1010ade4:	21000044 	addi	r4,r4,1
1010ade8:	20c00003 	ldbu	r3,0(r4)
1010adec:	29400044 	addi	r5,r5,1
1010adf0:	18803fcc 	andi	r2,r3,255
1010adf4:	1080201c 	xori	r2,r2,128
1010adf8:	10bfe004 	addi	r2,r2,-128
1010adfc:	103ff71e 	bne	r2,zero,1010addc <__alt_data_end+0xfffeaddc>
1010ae00:	0007883a 	mov	r3,zero
1010ae04:	28800003 	ldbu	r2,0(r5)
1010ae08:	1885c83a 	sub	r2,r3,r2
1010ae0c:	f800283a 	ret
1010ae10:	28800003 	ldbu	r2,0(r5)
1010ae14:	18c03fcc 	andi	r3,r3,255
1010ae18:	1885c83a 	sub	r2,r3,r2
1010ae1c:	f800283a 	ret
1010ae20:	0005883a 	mov	r2,zero
1010ae24:	f800283a 	ret
1010ae28:	10c03fcc 	andi	r3,r2,255
1010ae2c:	003ff506 	br	1010ae04 <__alt_data_end+0xfffeae04>

1010ae30 <__sprint_r.part.0>:
1010ae30:	28801917 	ldw	r2,100(r5)
1010ae34:	defff604 	addi	sp,sp,-40
1010ae38:	dd400515 	stw	r21,20(sp)
1010ae3c:	dfc00915 	stw	ra,36(sp)
1010ae40:	df000815 	stw	fp,32(sp)
1010ae44:	ddc00715 	stw	r23,28(sp)
1010ae48:	dd800615 	stw	r22,24(sp)
1010ae4c:	dd000415 	stw	r20,16(sp)
1010ae50:	dcc00315 	stw	r19,12(sp)
1010ae54:	dc800215 	stw	r18,8(sp)
1010ae58:	dc400115 	stw	r17,4(sp)
1010ae5c:	dc000015 	stw	r16,0(sp)
1010ae60:	1088000c 	andi	r2,r2,8192
1010ae64:	302b883a 	mov	r21,r6
1010ae68:	10002e26 	beq	r2,zero,1010af24 <__sprint_r.part.0+0xf4>
1010ae6c:	30800217 	ldw	r2,8(r6)
1010ae70:	35800017 	ldw	r22,0(r6)
1010ae74:	10002926 	beq	r2,zero,1010af1c <__sprint_r.part.0+0xec>
1010ae78:	2827883a 	mov	r19,r5
1010ae7c:	2029883a 	mov	r20,r4
1010ae80:	b5c00104 	addi	r23,r22,4
1010ae84:	04bfffc4 	movi	r18,-1
1010ae88:	bc400017 	ldw	r17,0(r23)
1010ae8c:	b4000017 	ldw	r16,0(r22)
1010ae90:	0039883a 	mov	fp,zero
1010ae94:	8822d0ba 	srli	r17,r17,2
1010ae98:	8800031e 	bne	r17,zero,1010aea8 <__sprint_r.part.0+0x78>
1010ae9c:	00001806 	br	1010af00 <__sprint_r.part.0+0xd0>
1010aea0:	84000104 	addi	r16,r16,4
1010aea4:	8f001526 	beq	r17,fp,1010aefc <__sprint_r.part.0+0xcc>
1010aea8:	81400017 	ldw	r5,0(r16)
1010aeac:	980d883a 	mov	r6,r19
1010aeb0:	a009883a 	mov	r4,r20
1010aeb4:	010c6a00 	call	1010c6a0 <_fputwc_r>
1010aeb8:	e7000044 	addi	fp,fp,1
1010aebc:	14bff81e 	bne	r2,r18,1010aea0 <__alt_data_end+0xfffeaea0>
1010aec0:	9005883a 	mov	r2,r18
1010aec4:	a8000215 	stw	zero,8(r21)
1010aec8:	a8000115 	stw	zero,4(r21)
1010aecc:	dfc00917 	ldw	ra,36(sp)
1010aed0:	df000817 	ldw	fp,32(sp)
1010aed4:	ddc00717 	ldw	r23,28(sp)
1010aed8:	dd800617 	ldw	r22,24(sp)
1010aedc:	dd400517 	ldw	r21,20(sp)
1010aee0:	dd000417 	ldw	r20,16(sp)
1010aee4:	dcc00317 	ldw	r19,12(sp)
1010aee8:	dc800217 	ldw	r18,8(sp)
1010aeec:	dc400117 	ldw	r17,4(sp)
1010aef0:	dc000017 	ldw	r16,0(sp)
1010aef4:	dec00a04 	addi	sp,sp,40
1010aef8:	f800283a 	ret
1010aefc:	a8800217 	ldw	r2,8(r21)
1010af00:	8c63883a 	add	r17,r17,r17
1010af04:	8c63883a 	add	r17,r17,r17
1010af08:	1445c83a 	sub	r2,r2,r17
1010af0c:	a8800215 	stw	r2,8(r21)
1010af10:	b5800204 	addi	r22,r22,8
1010af14:	bdc00204 	addi	r23,r23,8
1010af18:	103fdb1e 	bne	r2,zero,1010ae88 <__alt_data_end+0xfffeae88>
1010af1c:	0005883a 	mov	r2,zero
1010af20:	003fe806 	br	1010aec4 <__alt_data_end+0xfffeaec4>
1010af24:	0108d4c0 	call	10108d4c <__sfvwrite_r>
1010af28:	003fe606 	br	1010aec4 <__alt_data_end+0xfffeaec4>

1010af2c <__sprint_r>:
1010af2c:	30c00217 	ldw	r3,8(r6)
1010af30:	18000126 	beq	r3,zero,1010af38 <__sprint_r+0xc>
1010af34:	010ae301 	jmpi	1010ae30 <__sprint_r.part.0>
1010af38:	30000115 	stw	zero,4(r6)
1010af3c:	0005883a 	mov	r2,zero
1010af40:	f800283a 	ret

1010af44 <___vfiprintf_internal_r>:
1010af44:	deffc904 	addi	sp,sp,-220
1010af48:	df003515 	stw	fp,212(sp)
1010af4c:	dd003115 	stw	r20,196(sp)
1010af50:	dfc03615 	stw	ra,216(sp)
1010af54:	ddc03415 	stw	r23,208(sp)
1010af58:	dd803315 	stw	r22,204(sp)
1010af5c:	dd403215 	stw	r21,200(sp)
1010af60:	dcc03015 	stw	r19,192(sp)
1010af64:	dc802f15 	stw	r18,188(sp)
1010af68:	dc402e15 	stw	r17,184(sp)
1010af6c:	dc002d15 	stw	r16,180(sp)
1010af70:	d9002015 	stw	r4,128(sp)
1010af74:	d9c02215 	stw	r7,136(sp)
1010af78:	2829883a 	mov	r20,r5
1010af7c:	3039883a 	mov	fp,r6
1010af80:	20000226 	beq	r4,zero,1010af8c <___vfiprintf_internal_r+0x48>
1010af84:	20800e17 	ldw	r2,56(r4)
1010af88:	1000cf26 	beq	r2,zero,1010b2c8 <___vfiprintf_internal_r+0x384>
1010af8c:	a080030b 	ldhu	r2,12(r20)
1010af90:	10c8000c 	andi	r3,r2,8192
1010af94:	1800061e 	bne	r3,zero,1010afb0 <___vfiprintf_internal_r+0x6c>
1010af98:	a1001917 	ldw	r4,100(r20)
1010af9c:	00f7ffc4 	movi	r3,-8193
1010afa0:	10880014 	ori	r2,r2,8192
1010afa4:	20c6703a 	and	r3,r4,r3
1010afa8:	a080030d 	sth	r2,12(r20)
1010afac:	a0c01915 	stw	r3,100(r20)
1010afb0:	10c0020c 	andi	r3,r2,8
1010afb4:	1800a926 	beq	r3,zero,1010b25c <___vfiprintf_internal_r+0x318>
1010afb8:	a0c00417 	ldw	r3,16(r20)
1010afbc:	1800a726 	beq	r3,zero,1010b25c <___vfiprintf_internal_r+0x318>
1010afc0:	1080068c 	andi	r2,r2,26
1010afc4:	00c00284 	movi	r3,10
1010afc8:	10c0ac26 	beq	r2,r3,1010b27c <___vfiprintf_internal_r+0x338>
1010afcc:	da801a04 	addi	r10,sp,104
1010afd0:	da801e15 	stw	r10,120(sp)
1010afd4:	d8801e17 	ldw	r2,120(sp)
1010afd8:	da8019c4 	addi	r10,sp,103
1010afdc:	05840474 	movhi	r22,4113
1010afe0:	05c40474 	movhi	r23,4113
1010afe4:	da801f15 	stw	r10,124(sp)
1010afe8:	1295c83a 	sub	r10,r2,r10
1010afec:	b58a7e04 	addi	r22,r22,10744
1010aff0:	bdca7a04 	addi	r23,r23,10728
1010aff4:	dec01a15 	stw	sp,104(sp)
1010aff8:	d8001c15 	stw	zero,112(sp)
1010affc:	d8001b15 	stw	zero,108(sp)
1010b000:	d8002615 	stw	zero,152(sp)
1010b004:	d8002315 	stw	zero,140(sp)
1010b008:	da802715 	stw	r10,156(sp)
1010b00c:	d811883a 	mov	r8,sp
1010b010:	dd002115 	stw	r20,132(sp)
1010b014:	e021883a 	mov	r16,fp
1010b018:	80800007 	ldb	r2,0(r16)
1010b01c:	1003ea26 	beq	r2,zero,1010bfc8 <___vfiprintf_internal_r+0x1084>
1010b020:	00c00944 	movi	r3,37
1010b024:	8025883a 	mov	r18,r16
1010b028:	10c0021e 	bne	r2,r3,1010b034 <___vfiprintf_internal_r+0xf0>
1010b02c:	00001606 	br	1010b088 <___vfiprintf_internal_r+0x144>
1010b030:	10c00326 	beq	r2,r3,1010b040 <___vfiprintf_internal_r+0xfc>
1010b034:	94800044 	addi	r18,r18,1
1010b038:	90800007 	ldb	r2,0(r18)
1010b03c:	103ffc1e 	bne	r2,zero,1010b030 <__alt_data_end+0xfffeb030>
1010b040:	9423c83a 	sub	r17,r18,r16
1010b044:	88001026 	beq	r17,zero,1010b088 <___vfiprintf_internal_r+0x144>
1010b048:	d8c01c17 	ldw	r3,112(sp)
1010b04c:	d8801b17 	ldw	r2,108(sp)
1010b050:	44000015 	stw	r16,0(r8)
1010b054:	88c7883a 	add	r3,r17,r3
1010b058:	10800044 	addi	r2,r2,1
1010b05c:	44400115 	stw	r17,4(r8)
1010b060:	d8c01c15 	stw	r3,112(sp)
1010b064:	d8801b15 	stw	r2,108(sp)
1010b068:	010001c4 	movi	r4,7
1010b06c:	2080760e 	bge	r4,r2,1010b248 <___vfiprintf_internal_r+0x304>
1010b070:	1803821e 	bne	r3,zero,1010be7c <___vfiprintf_internal_r+0xf38>
1010b074:	da802317 	ldw	r10,140(sp)
1010b078:	d8001b15 	stw	zero,108(sp)
1010b07c:	d811883a 	mov	r8,sp
1010b080:	5455883a 	add	r10,r10,r17
1010b084:	da802315 	stw	r10,140(sp)
1010b088:	90800007 	ldb	r2,0(r18)
1010b08c:	10044626 	beq	r2,zero,1010c1a8 <___vfiprintf_internal_r+0x1264>
1010b090:	90c00047 	ldb	r3,1(r18)
1010b094:	94000044 	addi	r16,r18,1
1010b098:	d8001d85 	stb	zero,118(sp)
1010b09c:	0009883a 	mov	r4,zero
1010b0a0:	000f883a 	mov	r7,zero
1010b0a4:	027fffc4 	movi	r9,-1
1010b0a8:	0023883a 	mov	r17,zero
1010b0ac:	0029883a 	mov	r20,zero
1010b0b0:	01401604 	movi	r5,88
1010b0b4:	01800244 	movi	r6,9
1010b0b8:	03400a84 	movi	r13,42
1010b0bc:	03001b04 	movi	r12,108
1010b0c0:	84000044 	addi	r16,r16,1
1010b0c4:	18bff804 	addi	r2,r3,-32
1010b0c8:	28827336 	bltu	r5,r2,1010ba98 <___vfiprintf_internal_r+0xb54>
1010b0cc:	100490ba 	slli	r2,r2,2
1010b0d0:	02840474 	movhi	r10,4113
1010b0d4:	52ac3904 	addi	r10,r10,-20252
1010b0d8:	1285883a 	add	r2,r2,r10
1010b0dc:	10800017 	ldw	r2,0(r2)
1010b0e0:	1000683a 	jmp	r2
1010b0e4:	1010b7cc 	andi	zero,r2,17119
1010b0e8:	1010ba98 	cmpnei	zero,r2,17130
1010b0ec:	1010ba98 	cmpnei	zero,r2,17130
1010b0f0:	1010b7ec 	andhi	zero,r2,17119
1010b0f4:	1010ba98 	cmpnei	zero,r2,17130
1010b0f8:	1010ba98 	cmpnei	zero,r2,17130
1010b0fc:	1010ba98 	cmpnei	zero,r2,17130
1010b100:	1010ba98 	cmpnei	zero,r2,17130
1010b104:	1010ba98 	cmpnei	zero,r2,17130
1010b108:	1010ba98 	cmpnei	zero,r2,17130
1010b10c:	1010b9d4 	ori	zero,r2,17127
1010b110:	1010b9f0 	cmpltui	zero,r2,17127
1010b114:	1010ba98 	cmpnei	zero,r2,17130
1010b118:	1010b2d8 	cmpnei	zero,r2,17099
1010b11c:	1010ba00 	call	11010ba0 <__alt_data_end+0xef0ba0>
1010b120:	1010ba98 	cmpnei	zero,r2,17130
1010b124:	1010b7f8 	rdprs	zero,r2,17119
1010b128:	1010b804 	addi	zero,r2,17120
1010b12c:	1010b804 	addi	zero,r2,17120
1010b130:	1010b804 	addi	zero,r2,17120
1010b134:	1010b804 	addi	zero,r2,17120
1010b138:	1010b804 	addi	zero,r2,17120
1010b13c:	1010b804 	addi	zero,r2,17120
1010b140:	1010b804 	addi	zero,r2,17120
1010b144:	1010b804 	addi	zero,r2,17120
1010b148:	1010b804 	addi	zero,r2,17120
1010b14c:	1010ba98 	cmpnei	zero,r2,17130
1010b150:	1010ba98 	cmpnei	zero,r2,17130
1010b154:	1010ba98 	cmpnei	zero,r2,17130
1010b158:	1010ba98 	cmpnei	zero,r2,17130
1010b15c:	1010ba98 	cmpnei	zero,r2,17130
1010b160:	1010ba98 	cmpnei	zero,r2,17130
1010b164:	1010ba98 	cmpnei	zero,r2,17130
1010b168:	1010ba98 	cmpnei	zero,r2,17130
1010b16c:	1010ba98 	cmpnei	zero,r2,17130
1010b170:	1010ba98 	cmpnei	zero,r2,17130
1010b174:	1010b830 	cmpltui	zero,r2,17120
1010b178:	1010ba98 	cmpnei	zero,r2,17130
1010b17c:	1010ba98 	cmpnei	zero,r2,17130
1010b180:	1010ba98 	cmpnei	zero,r2,17130
1010b184:	1010ba98 	cmpnei	zero,r2,17130
1010b188:	1010ba98 	cmpnei	zero,r2,17130
1010b18c:	1010ba98 	cmpnei	zero,r2,17130
1010b190:	1010ba98 	cmpnei	zero,r2,17130
1010b194:	1010ba98 	cmpnei	zero,r2,17130
1010b198:	1010ba98 	cmpnei	zero,r2,17130
1010b19c:	1010ba98 	cmpnei	zero,r2,17130
1010b1a0:	1010b868 	cmpgeui	zero,r2,17121
1010b1a4:	1010ba98 	cmpnei	zero,r2,17130
1010b1a8:	1010ba98 	cmpnei	zero,r2,17130
1010b1ac:	1010ba98 	cmpnei	zero,r2,17130
1010b1b0:	1010ba98 	cmpnei	zero,r2,17130
1010b1b4:	1010ba98 	cmpnei	zero,r2,17130
1010b1b8:	1010b8c0 	call	11010b8c <__alt_data_end+0xef0b8c>
1010b1bc:	1010ba98 	cmpnei	zero,r2,17130
1010b1c0:	1010ba98 	cmpnei	zero,r2,17130
1010b1c4:	1010b930 	cmpltui	zero,r2,17124
1010b1c8:	1010ba98 	cmpnei	zero,r2,17130
1010b1cc:	1010ba98 	cmpnei	zero,r2,17130
1010b1d0:	1010ba98 	cmpnei	zero,r2,17130
1010b1d4:	1010ba98 	cmpnei	zero,r2,17130
1010b1d8:	1010ba98 	cmpnei	zero,r2,17130
1010b1dc:	1010ba98 	cmpnei	zero,r2,17130
1010b1e0:	1010ba98 	cmpnei	zero,r2,17130
1010b1e4:	1010ba98 	cmpnei	zero,r2,17130
1010b1e8:	1010ba98 	cmpnei	zero,r2,17130
1010b1ec:	1010ba98 	cmpnei	zero,r2,17130
1010b1f0:	1010b6dc 	xori	zero,r2,17115
1010b1f4:	1010b708 	cmpgei	zero,r2,17116
1010b1f8:	1010ba98 	cmpnei	zero,r2,17130
1010b1fc:	1010ba98 	cmpnei	zero,r2,17130
1010b200:	1010ba98 	cmpnei	zero,r2,17130
1010b204:	1010ba40 	call	11010ba4 <__alt_data_end+0xef0ba4>
1010b208:	1010b708 	cmpgei	zero,r2,17116
1010b20c:	1010ba98 	cmpnei	zero,r2,17130
1010b210:	1010ba98 	cmpnei	zero,r2,17130
1010b214:	1010b59c 	xori	zero,r2,17110
1010b218:	1010ba98 	cmpnei	zero,r2,17130
1010b21c:	1010b5ac 	andhi	zero,r2,17110
1010b220:	1010b5e8 	cmpgeui	zero,r2,17111
1010b224:	1010b2e4 	muli	zero,r2,17099
1010b228:	1010b590 	cmplti	zero,r2,17110
1010b22c:	1010ba98 	cmpnei	zero,r2,17130
1010b230:	1010b96c 	andhi	zero,r2,17125
1010b234:	1010ba98 	cmpnei	zero,r2,17130
1010b238:	1010b9c4 	addi	zero,r2,17127
1010b23c:	1010ba98 	cmpnei	zero,r2,17130
1010b240:	1010ba98 	cmpnei	zero,r2,17130
1010b244:	1010b688 	cmpgei	zero,r2,17114
1010b248:	42000204 	addi	r8,r8,8
1010b24c:	da802317 	ldw	r10,140(sp)
1010b250:	5455883a 	add	r10,r10,r17
1010b254:	da802315 	stw	r10,140(sp)
1010b258:	003f8b06 	br	1010b088 <__alt_data_end+0xfffeb088>
1010b25c:	d9002017 	ldw	r4,128(sp)
1010b260:	a00b883a 	mov	r5,r20
1010b264:	01072700 	call	10107270 <__swsetup_r>
1010b268:	1003b11e 	bne	r2,zero,1010c130 <___vfiprintf_internal_r+0x11ec>
1010b26c:	a080030b 	ldhu	r2,12(r20)
1010b270:	00c00284 	movi	r3,10
1010b274:	1080068c 	andi	r2,r2,26
1010b278:	10ff541e 	bne	r2,r3,1010afcc <__alt_data_end+0xfffeafcc>
1010b27c:	a080038f 	ldh	r2,14(r20)
1010b280:	103f5216 	blt	r2,zero,1010afcc <__alt_data_end+0xfffeafcc>
1010b284:	d9c02217 	ldw	r7,136(sp)
1010b288:	d9002017 	ldw	r4,128(sp)
1010b28c:	e00d883a 	mov	r6,fp
1010b290:	a00b883a 	mov	r5,r20
1010b294:	010c3bc0 	call	1010c3bc <__sbprintf>
1010b298:	dfc03617 	ldw	ra,216(sp)
1010b29c:	df003517 	ldw	fp,212(sp)
1010b2a0:	ddc03417 	ldw	r23,208(sp)
1010b2a4:	dd803317 	ldw	r22,204(sp)
1010b2a8:	dd403217 	ldw	r21,200(sp)
1010b2ac:	dd003117 	ldw	r20,196(sp)
1010b2b0:	dcc03017 	ldw	r19,192(sp)
1010b2b4:	dc802f17 	ldw	r18,188(sp)
1010b2b8:	dc402e17 	ldw	r17,184(sp)
1010b2bc:	dc002d17 	ldw	r16,180(sp)
1010b2c0:	dec03704 	addi	sp,sp,220
1010b2c4:	f800283a 	ret
1010b2c8:	0102df80 	call	10102df8 <__sinit>
1010b2cc:	003f2f06 	br	1010af8c <__alt_data_end+0xfffeaf8c>
1010b2d0:	0463c83a 	sub	r17,zero,r17
1010b2d4:	d8802215 	stw	r2,136(sp)
1010b2d8:	a5000114 	ori	r20,r20,4
1010b2dc:	80c00007 	ldb	r3,0(r16)
1010b2e0:	003f7706 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b2e4:	00800c04 	movi	r2,48
1010b2e8:	da802217 	ldw	r10,136(sp)
1010b2ec:	d8801d05 	stb	r2,116(sp)
1010b2f0:	00801e04 	movi	r2,120
1010b2f4:	d8801d45 	stb	r2,117(sp)
1010b2f8:	d8001d85 	stb	zero,118(sp)
1010b2fc:	50c00104 	addi	r3,r10,4
1010b300:	54800017 	ldw	r18,0(r10)
1010b304:	0027883a 	mov	r19,zero
1010b308:	a0800094 	ori	r2,r20,2
1010b30c:	48030b16 	blt	r9,zero,1010bf3c <___vfiprintf_internal_r+0xff8>
1010b310:	00bfdfc4 	movi	r2,-129
1010b314:	a096703a 	and	r11,r20,r2
1010b318:	d8c02215 	stw	r3,136(sp)
1010b31c:	5d000094 	ori	r20,r11,2
1010b320:	90032b1e 	bne	r18,zero,1010bfd0 <___vfiprintf_internal_r+0x108c>
1010b324:	00840474 	movhi	r2,4113
1010b328:	108a1a04 	addi	r2,r2,10344
1010b32c:	d8802615 	stw	r2,152(sp)
1010b330:	0039883a 	mov	fp,zero
1010b334:	48017b1e 	bne	r9,zero,1010b924 <___vfiprintf_internal_r+0x9e0>
1010b338:	0013883a 	mov	r9,zero
1010b33c:	0027883a 	mov	r19,zero
1010b340:	dd401a04 	addi	r21,sp,104
1010b344:	4825883a 	mov	r18,r9
1010b348:	4cc0010e 	bge	r9,r19,1010b350 <___vfiprintf_internal_r+0x40c>
1010b34c:	9825883a 	mov	r18,r19
1010b350:	e7003fcc 	andi	fp,fp,255
1010b354:	e700201c 	xori	fp,fp,128
1010b358:	e73fe004 	addi	fp,fp,-128
1010b35c:	e0000126 	beq	fp,zero,1010b364 <___vfiprintf_internal_r+0x420>
1010b360:	94800044 	addi	r18,r18,1
1010b364:	a380008c 	andi	r14,r20,2
1010b368:	70000126 	beq	r14,zero,1010b370 <___vfiprintf_internal_r+0x42c>
1010b36c:	94800084 	addi	r18,r18,2
1010b370:	a700210c 	andi	fp,r20,132
1010b374:	e001df1e 	bne	fp,zero,1010baf4 <___vfiprintf_internal_r+0xbb0>
1010b378:	8c87c83a 	sub	r3,r17,r18
1010b37c:	00c1dd0e 	bge	zero,r3,1010baf4 <___vfiprintf_internal_r+0xbb0>
1010b380:	01c00404 	movi	r7,16
1010b384:	d8801c17 	ldw	r2,112(sp)
1010b388:	38c3ad0e 	bge	r7,r3,1010c240 <___vfiprintf_internal_r+0x12fc>
1010b38c:	02840474 	movhi	r10,4113
1010b390:	528a7e04 	addi	r10,r10,10744
1010b394:	dc002915 	stw	r16,164(sp)
1010b398:	d9801b17 	ldw	r6,108(sp)
1010b39c:	da802415 	stw	r10,144(sp)
1010b3a0:	03c001c4 	movi	r15,7
1010b3a4:	da402515 	stw	r9,148(sp)
1010b3a8:	db802815 	stw	r14,160(sp)
1010b3ac:	1821883a 	mov	r16,r3
1010b3b0:	00000506 	br	1010b3c8 <___vfiprintf_internal_r+0x484>
1010b3b4:	31400084 	addi	r5,r6,2
1010b3b8:	42000204 	addi	r8,r8,8
1010b3bc:	200d883a 	mov	r6,r4
1010b3c0:	843ffc04 	addi	r16,r16,-16
1010b3c4:	3c000d0e 	bge	r7,r16,1010b3fc <___vfiprintf_internal_r+0x4b8>
1010b3c8:	10800404 	addi	r2,r2,16
1010b3cc:	31000044 	addi	r4,r6,1
1010b3d0:	45800015 	stw	r22,0(r8)
1010b3d4:	41c00115 	stw	r7,4(r8)
1010b3d8:	d8801c15 	stw	r2,112(sp)
1010b3dc:	d9001b15 	stw	r4,108(sp)
1010b3e0:	793ff40e 	bge	r15,r4,1010b3b4 <__alt_data_end+0xfffeb3b4>
1010b3e4:	1001b51e 	bne	r2,zero,1010babc <___vfiprintf_internal_r+0xb78>
1010b3e8:	843ffc04 	addi	r16,r16,-16
1010b3ec:	000d883a 	mov	r6,zero
1010b3f0:	01400044 	movi	r5,1
1010b3f4:	d811883a 	mov	r8,sp
1010b3f8:	3c3ff316 	blt	r7,r16,1010b3c8 <__alt_data_end+0xfffeb3c8>
1010b3fc:	8007883a 	mov	r3,r16
1010b400:	da402517 	ldw	r9,148(sp)
1010b404:	db802817 	ldw	r14,160(sp)
1010b408:	dc002917 	ldw	r16,164(sp)
1010b40c:	da802417 	ldw	r10,144(sp)
1010b410:	1885883a 	add	r2,r3,r2
1010b414:	40c00115 	stw	r3,4(r8)
1010b418:	42800015 	stw	r10,0(r8)
1010b41c:	d8801c15 	stw	r2,112(sp)
1010b420:	d9401b15 	stw	r5,108(sp)
1010b424:	00c001c4 	movi	r3,7
1010b428:	19426016 	blt	r3,r5,1010bdac <___vfiprintf_internal_r+0xe68>
1010b42c:	d8c01d87 	ldb	r3,118(sp)
1010b430:	42000204 	addi	r8,r8,8
1010b434:	29000044 	addi	r4,r5,1
1010b438:	1801b31e 	bne	r3,zero,1010bb08 <___vfiprintf_internal_r+0xbc4>
1010b43c:	7001c026 	beq	r14,zero,1010bb40 <___vfiprintf_internal_r+0xbfc>
1010b440:	d8c01d04 	addi	r3,sp,116
1010b444:	10800084 	addi	r2,r2,2
1010b448:	40c00015 	stw	r3,0(r8)
1010b44c:	00c00084 	movi	r3,2
1010b450:	40c00115 	stw	r3,4(r8)
1010b454:	d8801c15 	stw	r2,112(sp)
1010b458:	d9001b15 	stw	r4,108(sp)
1010b45c:	00c001c4 	movi	r3,7
1010b460:	1902650e 	bge	r3,r4,1010bdf8 <___vfiprintf_internal_r+0xeb4>
1010b464:	10029a1e 	bne	r2,zero,1010bed0 <___vfiprintf_internal_r+0xf8c>
1010b468:	00c02004 	movi	r3,128
1010b46c:	01000044 	movi	r4,1
1010b470:	000b883a 	mov	r5,zero
1010b474:	d811883a 	mov	r8,sp
1010b478:	e0c1b31e 	bne	fp,r3,1010bb48 <___vfiprintf_internal_r+0xc04>
1010b47c:	8cb9c83a 	sub	fp,r17,r18
1010b480:	0701b10e 	bge	zero,fp,1010bb48 <___vfiprintf_internal_r+0xc04>
1010b484:	01c00404 	movi	r7,16
1010b488:	3f03890e 	bge	r7,fp,1010c2b0 <___vfiprintf_internal_r+0x136c>
1010b48c:	00c40474 	movhi	r3,4113
1010b490:	18ca7a04 	addi	r3,r3,10728
1010b494:	d8c02415 	stw	r3,144(sp)
1010b498:	8007883a 	mov	r3,r16
1010b49c:	034001c4 	movi	r13,7
1010b4a0:	e021883a 	mov	r16,fp
1010b4a4:	da402515 	stw	r9,148(sp)
1010b4a8:	1839883a 	mov	fp,r3
1010b4ac:	00000506 	br	1010b4c4 <___vfiprintf_internal_r+0x580>
1010b4b0:	29800084 	addi	r6,r5,2
1010b4b4:	42000204 	addi	r8,r8,8
1010b4b8:	180b883a 	mov	r5,r3
1010b4bc:	843ffc04 	addi	r16,r16,-16
1010b4c0:	3c000d0e 	bge	r7,r16,1010b4f8 <___vfiprintf_internal_r+0x5b4>
1010b4c4:	10800404 	addi	r2,r2,16
1010b4c8:	28c00044 	addi	r3,r5,1
1010b4cc:	45c00015 	stw	r23,0(r8)
1010b4d0:	41c00115 	stw	r7,4(r8)
1010b4d4:	d8801c15 	stw	r2,112(sp)
1010b4d8:	d8c01b15 	stw	r3,108(sp)
1010b4dc:	68fff40e 	bge	r13,r3,1010b4b0 <__alt_data_end+0xfffeb4b0>
1010b4e0:	1002241e 	bne	r2,zero,1010bd74 <___vfiprintf_internal_r+0xe30>
1010b4e4:	843ffc04 	addi	r16,r16,-16
1010b4e8:	01800044 	movi	r6,1
1010b4ec:	000b883a 	mov	r5,zero
1010b4f0:	d811883a 	mov	r8,sp
1010b4f4:	3c3ff316 	blt	r7,r16,1010b4c4 <__alt_data_end+0xfffeb4c4>
1010b4f8:	da402517 	ldw	r9,148(sp)
1010b4fc:	e007883a 	mov	r3,fp
1010b500:	8039883a 	mov	fp,r16
1010b504:	1821883a 	mov	r16,r3
1010b508:	d8c02417 	ldw	r3,144(sp)
1010b50c:	1705883a 	add	r2,r2,fp
1010b510:	47000115 	stw	fp,4(r8)
1010b514:	40c00015 	stw	r3,0(r8)
1010b518:	d8801c15 	stw	r2,112(sp)
1010b51c:	d9801b15 	stw	r6,108(sp)
1010b520:	00c001c4 	movi	r3,7
1010b524:	19827616 	blt	r3,r6,1010bf00 <___vfiprintf_internal_r+0xfbc>
1010b528:	4cf9c83a 	sub	fp,r9,r19
1010b52c:	42000204 	addi	r8,r8,8
1010b530:	31000044 	addi	r4,r6,1
1010b534:	300b883a 	mov	r5,r6
1010b538:	07018516 	blt	zero,fp,1010bb50 <___vfiprintf_internal_r+0xc0c>
1010b53c:	9885883a 	add	r2,r19,r2
1010b540:	45400015 	stw	r21,0(r8)
1010b544:	44c00115 	stw	r19,4(r8)
1010b548:	d8801c15 	stw	r2,112(sp)
1010b54c:	d9001b15 	stw	r4,108(sp)
1010b550:	00c001c4 	movi	r3,7
1010b554:	1901dd0e 	bge	r3,r4,1010bccc <___vfiprintf_internal_r+0xd88>
1010b558:	1002401e 	bne	r2,zero,1010be5c <___vfiprintf_internal_r+0xf18>
1010b55c:	d8001b15 	stw	zero,108(sp)
1010b560:	a2c0010c 	andi	r11,r20,4
1010b564:	58000226 	beq	r11,zero,1010b570 <___vfiprintf_internal_r+0x62c>
1010b568:	8ca7c83a 	sub	r19,r17,r18
1010b56c:	04c2f216 	blt	zero,r19,1010c138 <___vfiprintf_internal_r+0x11f4>
1010b570:	8c80010e 	bge	r17,r18,1010b578 <___vfiprintf_internal_r+0x634>
1010b574:	9023883a 	mov	r17,r18
1010b578:	da802317 	ldw	r10,140(sp)
1010b57c:	5455883a 	add	r10,r10,r17
1010b580:	da802315 	stw	r10,140(sp)
1010b584:	d8001b15 	stw	zero,108(sp)
1010b588:	d811883a 	mov	r8,sp
1010b58c:	003ea206 	br	1010b018 <__alt_data_end+0xfffeb018>
1010b590:	a5000814 	ori	r20,r20,32
1010b594:	80c00007 	ldb	r3,0(r16)
1010b598:	003ec906 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b59c:	80c00007 	ldb	r3,0(r16)
1010b5a0:	1b030926 	beq	r3,r12,1010c1c8 <___vfiprintf_internal_r+0x1284>
1010b5a4:	a5000414 	ori	r20,r20,16
1010b5a8:	003ec506 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b5ac:	21003fcc 	andi	r4,r4,255
1010b5b0:	20035e1e 	bne	r4,zero,1010c32c <___vfiprintf_internal_r+0x13e8>
1010b5b4:	a080080c 	andi	r2,r20,32
1010b5b8:	1002a526 	beq	r2,zero,1010c050 <___vfiprintf_internal_r+0x110c>
1010b5bc:	da802217 	ldw	r10,136(sp)
1010b5c0:	50800017 	ldw	r2,0(r10)
1010b5c4:	da802317 	ldw	r10,140(sp)
1010b5c8:	5007d7fa 	srai	r3,r10,31
1010b5cc:	da802217 	ldw	r10,136(sp)
1010b5d0:	10c00115 	stw	r3,4(r2)
1010b5d4:	52800104 	addi	r10,r10,4
1010b5d8:	da802215 	stw	r10,136(sp)
1010b5dc:	da802317 	ldw	r10,140(sp)
1010b5e0:	12800015 	stw	r10,0(r2)
1010b5e4:	003e8c06 	br	1010b018 <__alt_data_end+0xfffeb018>
1010b5e8:	21003fcc 	andi	r4,r4,255
1010b5ec:	2003511e 	bne	r4,zero,1010c334 <___vfiprintf_internal_r+0x13f0>
1010b5f0:	a080080c 	andi	r2,r20,32
1010b5f4:	1000a126 	beq	r2,zero,1010b87c <___vfiprintf_internal_r+0x938>
1010b5f8:	da802217 	ldw	r10,136(sp)
1010b5fc:	d8001d85 	stb	zero,118(sp)
1010b600:	50800204 	addi	r2,r10,8
1010b604:	54800017 	ldw	r18,0(r10)
1010b608:	54c00117 	ldw	r19,4(r10)
1010b60c:	4802b416 	blt	r9,zero,1010c0e0 <___vfiprintf_internal_r+0x119c>
1010b610:	013fdfc4 	movi	r4,-129
1010b614:	94c6b03a 	or	r3,r18,r19
1010b618:	d8802215 	stw	r2,136(sp)
1010b61c:	a128703a 	and	r20,r20,r4
1010b620:	1800a226 	beq	r3,zero,1010b8ac <___vfiprintf_internal_r+0x968>
1010b624:	0039883a 	mov	fp,zero
1010b628:	dd401a04 	addi	r21,sp,104
1010b62c:	9006d0fa 	srli	r3,r18,3
1010b630:	9808977a 	slli	r4,r19,29
1010b634:	9826d0fa 	srli	r19,r19,3
1010b638:	948001cc 	andi	r18,r18,7
1010b63c:	90800c04 	addi	r2,r18,48
1010b640:	ad7fffc4 	addi	r21,r21,-1
1010b644:	20e4b03a 	or	r18,r4,r3
1010b648:	a8800005 	stb	r2,0(r21)
1010b64c:	94c6b03a 	or	r3,r18,r19
1010b650:	183ff61e 	bne	r3,zero,1010b62c <__alt_data_end+0xfffeb62c>
1010b654:	a0c0004c 	andi	r3,r20,1
1010b658:	18005926 	beq	r3,zero,1010b7c0 <___vfiprintf_internal_r+0x87c>
1010b65c:	10803fcc 	andi	r2,r2,255
1010b660:	1080201c 	xori	r2,r2,128
1010b664:	10bfe004 	addi	r2,r2,-128
1010b668:	00c00c04 	movi	r3,48
1010b66c:	10c05426 	beq	r2,r3,1010b7c0 <___vfiprintf_internal_r+0x87c>
1010b670:	da801e17 	ldw	r10,120(sp)
1010b674:	a8bfffc4 	addi	r2,r21,-1
1010b678:	a8ffffc5 	stb	r3,-1(r21)
1010b67c:	50a7c83a 	sub	r19,r10,r2
1010b680:	102b883a 	mov	r21,r2
1010b684:	003f2f06 	br	1010b344 <__alt_data_end+0xfffeb344>
1010b688:	21003fcc 	andi	r4,r4,255
1010b68c:	2003421e 	bne	r4,zero,1010c398 <___vfiprintf_internal_r+0x1454>
1010b690:	00840474 	movhi	r2,4113
1010b694:	108a1a04 	addi	r2,r2,10344
1010b698:	d8802615 	stw	r2,152(sp)
1010b69c:	a080080c 	andi	r2,r20,32
1010b6a0:	1000aa26 	beq	r2,zero,1010b94c <___vfiprintf_internal_r+0xa08>
1010b6a4:	da802217 	ldw	r10,136(sp)
1010b6a8:	54800017 	ldw	r18,0(r10)
1010b6ac:	54c00117 	ldw	r19,4(r10)
1010b6b0:	52800204 	addi	r10,r10,8
1010b6b4:	da802215 	stw	r10,136(sp)
1010b6b8:	a080004c 	andi	r2,r20,1
1010b6bc:	1001d226 	beq	r2,zero,1010be08 <___vfiprintf_internal_r+0xec4>
1010b6c0:	94c4b03a 	or	r2,r18,r19
1010b6c4:	1002351e 	bne	r2,zero,1010bf9c <___vfiprintf_internal_r+0x1058>
1010b6c8:	d8001d85 	stb	zero,118(sp)
1010b6cc:	48022216 	blt	r9,zero,1010bf58 <___vfiprintf_internal_r+0x1014>
1010b6d0:	00bfdfc4 	movi	r2,-129
1010b6d4:	a0a8703a 	and	r20,r20,r2
1010b6d8:	003f1506 	br	1010b330 <__alt_data_end+0xfffeb330>
1010b6dc:	da802217 	ldw	r10,136(sp)
1010b6e0:	04800044 	movi	r18,1
1010b6e4:	d8001d85 	stb	zero,118(sp)
1010b6e8:	50800017 	ldw	r2,0(r10)
1010b6ec:	52800104 	addi	r10,r10,4
1010b6f0:	da802215 	stw	r10,136(sp)
1010b6f4:	d8801005 	stb	r2,64(sp)
1010b6f8:	9027883a 	mov	r19,r18
1010b6fc:	dd401004 	addi	r21,sp,64
1010b700:	0013883a 	mov	r9,zero
1010b704:	003f1706 	br	1010b364 <__alt_data_end+0xfffeb364>
1010b708:	21003fcc 	andi	r4,r4,255
1010b70c:	2003201e 	bne	r4,zero,1010c390 <___vfiprintf_internal_r+0x144c>
1010b710:	a080080c 	andi	r2,r20,32
1010b714:	10004b26 	beq	r2,zero,1010b844 <___vfiprintf_internal_r+0x900>
1010b718:	da802217 	ldw	r10,136(sp)
1010b71c:	50800117 	ldw	r2,4(r10)
1010b720:	54800017 	ldw	r18,0(r10)
1010b724:	52800204 	addi	r10,r10,8
1010b728:	da802215 	stw	r10,136(sp)
1010b72c:	1027883a 	mov	r19,r2
1010b730:	10022c16 	blt	r2,zero,1010bfe4 <___vfiprintf_internal_r+0x10a0>
1010b734:	df001d83 	ldbu	fp,118(sp)
1010b738:	48007216 	blt	r9,zero,1010b904 <___vfiprintf_internal_r+0x9c0>
1010b73c:	00ffdfc4 	movi	r3,-129
1010b740:	94c4b03a 	or	r2,r18,r19
1010b744:	a0e8703a 	and	r20,r20,r3
1010b748:	1000cc26 	beq	r2,zero,1010ba7c <___vfiprintf_internal_r+0xb38>
1010b74c:	98021026 	beq	r19,zero,1010bf90 <___vfiprintf_internal_r+0x104c>
1010b750:	dc402415 	stw	r17,144(sp)
1010b754:	dc002515 	stw	r16,148(sp)
1010b758:	9823883a 	mov	r17,r19
1010b75c:	9021883a 	mov	r16,r18
1010b760:	dd401a04 	addi	r21,sp,104
1010b764:	4825883a 	mov	r18,r9
1010b768:	4027883a 	mov	r19,r8
1010b76c:	8009883a 	mov	r4,r16
1010b770:	880b883a 	mov	r5,r17
1010b774:	01800284 	movi	r6,10
1010b778:	000f883a 	mov	r7,zero
1010b77c:	010cea40 	call	1010cea4 <__umoddi3>
1010b780:	10800c04 	addi	r2,r2,48
1010b784:	ad7fffc4 	addi	r21,r21,-1
1010b788:	8009883a 	mov	r4,r16
1010b78c:	880b883a 	mov	r5,r17
1010b790:	a8800005 	stb	r2,0(r21)
1010b794:	01800284 	movi	r6,10
1010b798:	000f883a 	mov	r7,zero
1010b79c:	010c92c0 	call	1010c92c <__udivdi3>
1010b7a0:	1021883a 	mov	r16,r2
1010b7a4:	10c4b03a 	or	r2,r2,r3
1010b7a8:	1823883a 	mov	r17,r3
1010b7ac:	103fef1e 	bne	r2,zero,1010b76c <__alt_data_end+0xfffeb76c>
1010b7b0:	dc402417 	ldw	r17,144(sp)
1010b7b4:	dc002517 	ldw	r16,148(sp)
1010b7b8:	9013883a 	mov	r9,r18
1010b7bc:	9811883a 	mov	r8,r19
1010b7c0:	da801e17 	ldw	r10,120(sp)
1010b7c4:	5567c83a 	sub	r19,r10,r21
1010b7c8:	003ede06 	br	1010b344 <__alt_data_end+0xfffeb344>
1010b7cc:	38803fcc 	andi	r2,r7,255
1010b7d0:	1080201c 	xori	r2,r2,128
1010b7d4:	10bfe004 	addi	r2,r2,-128
1010b7d8:	1002371e 	bne	r2,zero,1010c0b8 <___vfiprintf_internal_r+0x1174>
1010b7dc:	01000044 	movi	r4,1
1010b7e0:	01c00804 	movi	r7,32
1010b7e4:	80c00007 	ldb	r3,0(r16)
1010b7e8:	003e3506 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b7ec:	a5000054 	ori	r20,r20,1
1010b7f0:	80c00007 	ldb	r3,0(r16)
1010b7f4:	003e3206 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b7f8:	a5002014 	ori	r20,r20,128
1010b7fc:	80c00007 	ldb	r3,0(r16)
1010b800:	003e2f06 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b804:	8015883a 	mov	r10,r16
1010b808:	0023883a 	mov	r17,zero
1010b80c:	18bff404 	addi	r2,r3,-48
1010b810:	50c00007 	ldb	r3,0(r10)
1010b814:	8c4002a4 	muli	r17,r17,10
1010b818:	84000044 	addi	r16,r16,1
1010b81c:	8015883a 	mov	r10,r16
1010b820:	1463883a 	add	r17,r2,r17
1010b824:	18bff404 	addi	r2,r3,-48
1010b828:	30bff92e 	bgeu	r6,r2,1010b810 <__alt_data_end+0xfffeb810>
1010b82c:	003e2506 	br	1010b0c4 <__alt_data_end+0xfffeb0c4>
1010b830:	21003fcc 	andi	r4,r4,255
1010b834:	2002d41e 	bne	r4,zero,1010c388 <___vfiprintf_internal_r+0x1444>
1010b838:	a5000414 	ori	r20,r20,16
1010b83c:	a080080c 	andi	r2,r20,32
1010b840:	103fb51e 	bne	r2,zero,1010b718 <__alt_data_end+0xfffeb718>
1010b844:	a080040c 	andi	r2,r20,16
1010b848:	1001f826 	beq	r2,zero,1010c02c <___vfiprintf_internal_r+0x10e8>
1010b84c:	da802217 	ldw	r10,136(sp)
1010b850:	54800017 	ldw	r18,0(r10)
1010b854:	52800104 	addi	r10,r10,4
1010b858:	da802215 	stw	r10,136(sp)
1010b85c:	9027d7fa 	srai	r19,r18,31
1010b860:	9805883a 	mov	r2,r19
1010b864:	003fb206 	br	1010b730 <__alt_data_end+0xfffeb730>
1010b868:	21003fcc 	andi	r4,r4,255
1010b86c:	2002c41e 	bne	r4,zero,1010c380 <___vfiprintf_internal_r+0x143c>
1010b870:	a5000414 	ori	r20,r20,16
1010b874:	a080080c 	andi	r2,r20,32
1010b878:	103f5f1e 	bne	r2,zero,1010b5f8 <__alt_data_end+0xfffeb5f8>
1010b87c:	a080040c 	andi	r2,r20,16
1010b880:	10020f26 	beq	r2,zero,1010c0c0 <___vfiprintf_internal_r+0x117c>
1010b884:	da802217 	ldw	r10,136(sp)
1010b888:	d8001d85 	stb	zero,118(sp)
1010b88c:	0027883a 	mov	r19,zero
1010b890:	50800104 	addi	r2,r10,4
1010b894:	54800017 	ldw	r18,0(r10)
1010b898:	48021116 	blt	r9,zero,1010c0e0 <___vfiprintf_internal_r+0x119c>
1010b89c:	00ffdfc4 	movi	r3,-129
1010b8a0:	d8802215 	stw	r2,136(sp)
1010b8a4:	a0e8703a 	and	r20,r20,r3
1010b8a8:	903f5e1e 	bne	r18,zero,1010b624 <__alt_data_end+0xfffeb624>
1010b8ac:	0039883a 	mov	fp,zero
1010b8b0:	4802a626 	beq	r9,zero,1010c34c <___vfiprintf_internal_r+0x1408>
1010b8b4:	0025883a 	mov	r18,zero
1010b8b8:	0027883a 	mov	r19,zero
1010b8bc:	003f5a06 	br	1010b628 <__alt_data_end+0xfffeb628>
1010b8c0:	21003fcc 	andi	r4,r4,255
1010b8c4:	20029f1e 	bne	r4,zero,1010c344 <___vfiprintf_internal_r+0x1400>
1010b8c8:	a5000414 	ori	r20,r20,16
1010b8cc:	a080080c 	andi	r2,r20,32
1010b8d0:	10005e1e 	bne	r2,zero,1010ba4c <___vfiprintf_internal_r+0xb08>
1010b8d4:	a080040c 	andi	r2,r20,16
1010b8d8:	1001a21e 	bne	r2,zero,1010bf64 <___vfiprintf_internal_r+0x1020>
1010b8dc:	a080100c 	andi	r2,r20,64
1010b8e0:	d8001d85 	stb	zero,118(sp)
1010b8e4:	da802217 	ldw	r10,136(sp)
1010b8e8:	1002231e 	bne	r2,zero,1010c178 <___vfiprintf_internal_r+0x1234>
1010b8ec:	50800104 	addi	r2,r10,4
1010b8f0:	54800017 	ldw	r18,0(r10)
1010b8f4:	0027883a 	mov	r19,zero
1010b8f8:	4801a00e 	bge	r9,zero,1010bf7c <___vfiprintf_internal_r+0x1038>
1010b8fc:	d8802215 	stw	r2,136(sp)
1010b900:	0039883a 	mov	fp,zero
1010b904:	94c4b03a 	or	r2,r18,r19
1010b908:	103f901e 	bne	r2,zero,1010b74c <__alt_data_end+0xfffeb74c>
1010b90c:	00800044 	movi	r2,1
1010b910:	10803fcc 	andi	r2,r2,255
1010b914:	00c00044 	movi	r3,1
1010b918:	10c05926 	beq	r2,r3,1010ba80 <___vfiprintf_internal_r+0xb3c>
1010b91c:	00c00084 	movi	r3,2
1010b920:	10ffe41e 	bne	r2,r3,1010b8b4 <__alt_data_end+0xfffeb8b4>
1010b924:	0025883a 	mov	r18,zero
1010b928:	0027883a 	mov	r19,zero
1010b92c:	00013d06 	br	1010be24 <___vfiprintf_internal_r+0xee0>
1010b930:	21003fcc 	andi	r4,r4,255
1010b934:	2002811e 	bne	r4,zero,1010c33c <___vfiprintf_internal_r+0x13f8>
1010b938:	00840474 	movhi	r2,4113
1010b93c:	108a1504 	addi	r2,r2,10324
1010b940:	d8802615 	stw	r2,152(sp)
1010b944:	a080080c 	andi	r2,r20,32
1010b948:	103f561e 	bne	r2,zero,1010b6a4 <__alt_data_end+0xfffeb6a4>
1010b94c:	a080040c 	andi	r2,r20,16
1010b950:	1001d126 	beq	r2,zero,1010c098 <___vfiprintf_internal_r+0x1154>
1010b954:	da802217 	ldw	r10,136(sp)
1010b958:	0027883a 	mov	r19,zero
1010b95c:	54800017 	ldw	r18,0(r10)
1010b960:	52800104 	addi	r10,r10,4
1010b964:	da802215 	stw	r10,136(sp)
1010b968:	003f5306 	br	1010b6b8 <__alt_data_end+0xfffeb6b8>
1010b96c:	da802217 	ldw	r10,136(sp)
1010b970:	d8001d85 	stb	zero,118(sp)
1010b974:	55400017 	ldw	r21,0(r10)
1010b978:	50c00104 	addi	r3,r10,4
1010b97c:	a8024226 	beq	r21,zero,1010c288 <___vfiprintf_internal_r+0x1344>
1010b980:	48021816 	blt	r9,zero,1010c1e4 <___vfiprintf_internal_r+0x12a0>
1010b984:	480d883a 	mov	r6,r9
1010b988:	000b883a 	mov	r5,zero
1010b98c:	a809883a 	mov	r4,r21
1010b990:	d8c02a15 	stw	r3,168(sp)
1010b994:	da002b15 	stw	r8,172(sp)
1010b998:	da402c15 	stw	r9,176(sp)
1010b99c:	01093980 	call	10109398 <memchr>
1010b9a0:	d8c02a17 	ldw	r3,168(sp)
1010b9a4:	da002b17 	ldw	r8,172(sp)
1010b9a8:	da402c17 	ldw	r9,176(sp)
1010b9ac:	10024826 	beq	r2,zero,1010c2d0 <___vfiprintf_internal_r+0x138c>
1010b9b0:	1567c83a 	sub	r19,r2,r21
1010b9b4:	df001d83 	ldbu	fp,118(sp)
1010b9b8:	d8c02215 	stw	r3,136(sp)
1010b9bc:	0013883a 	mov	r9,zero
1010b9c0:	003e6006 	br	1010b344 <__alt_data_end+0xfffeb344>
1010b9c4:	21003fcc 	andi	r4,r4,255
1010b9c8:	203fc026 	beq	r4,zero,1010b8cc <__alt_data_end+0xfffeb8cc>
1010b9cc:	d9c01d85 	stb	r7,118(sp)
1010b9d0:	003fbe06 	br	1010b8cc <__alt_data_end+0xfffeb8cc>
1010b9d4:	da802217 	ldw	r10,136(sp)
1010b9d8:	54400017 	ldw	r17,0(r10)
1010b9dc:	50800104 	addi	r2,r10,4
1010b9e0:	883e3b16 	blt	r17,zero,1010b2d0 <__alt_data_end+0xfffeb2d0>
1010b9e4:	d8802215 	stw	r2,136(sp)
1010b9e8:	80c00007 	ldb	r3,0(r16)
1010b9ec:	003db406 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b9f0:	01000044 	movi	r4,1
1010b9f4:	01c00ac4 	movi	r7,43
1010b9f8:	80c00007 	ldb	r3,0(r16)
1010b9fc:	003db006 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010ba00:	80c00007 	ldb	r3,0(r16)
1010ba04:	82800044 	addi	r10,r16,1
1010ba08:	1b423c26 	beq	r3,r13,1010c2fc <___vfiprintf_internal_r+0x13b8>
1010ba0c:	18bff404 	addi	r2,r3,-48
1010ba10:	0013883a 	mov	r9,zero
1010ba14:	30822b36 	bltu	r6,r2,1010c2c4 <___vfiprintf_internal_r+0x1380>
1010ba18:	50c00007 	ldb	r3,0(r10)
1010ba1c:	4a4002a4 	muli	r9,r9,10
1010ba20:	54000044 	addi	r16,r10,1
1010ba24:	8015883a 	mov	r10,r16
1010ba28:	4893883a 	add	r9,r9,r2
1010ba2c:	18bff404 	addi	r2,r3,-48
1010ba30:	30bff92e 	bgeu	r6,r2,1010ba18 <__alt_data_end+0xfffeba18>
1010ba34:	483da30e 	bge	r9,zero,1010b0c4 <__alt_data_end+0xfffeb0c4>
1010ba38:	027fffc4 	movi	r9,-1
1010ba3c:	003da106 	br	1010b0c4 <__alt_data_end+0xfffeb0c4>
1010ba40:	a5001014 	ori	r20,r20,64
1010ba44:	80c00007 	ldb	r3,0(r16)
1010ba48:	003d9d06 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010ba4c:	da802217 	ldw	r10,136(sp)
1010ba50:	d8001d85 	stb	zero,118(sp)
1010ba54:	50c00204 	addi	r3,r10,8
1010ba58:	54800017 	ldw	r18,0(r10)
1010ba5c:	54c00117 	ldw	r19,4(r10)
1010ba60:	4801ca16 	blt	r9,zero,1010c18c <___vfiprintf_internal_r+0x1248>
1010ba64:	013fdfc4 	movi	r4,-129
1010ba68:	94c4b03a 	or	r2,r18,r19
1010ba6c:	d8c02215 	stw	r3,136(sp)
1010ba70:	a128703a 	and	r20,r20,r4
1010ba74:	0039883a 	mov	fp,zero
1010ba78:	103f341e 	bne	r2,zero,1010b74c <__alt_data_end+0xfffeb74c>
1010ba7c:	483e2e26 	beq	r9,zero,1010b338 <__alt_data_end+0xfffeb338>
1010ba80:	0025883a 	mov	r18,zero
1010ba84:	94800c04 	addi	r18,r18,48
1010ba88:	dc8019c5 	stb	r18,103(sp)
1010ba8c:	dcc02717 	ldw	r19,156(sp)
1010ba90:	dd4019c4 	addi	r21,sp,103
1010ba94:	003e2b06 	br	1010b344 <__alt_data_end+0xfffeb344>
1010ba98:	21003fcc 	andi	r4,r4,255
1010ba9c:	2002361e 	bne	r4,zero,1010c378 <___vfiprintf_internal_r+0x1434>
1010baa0:	1801c126 	beq	r3,zero,1010c1a8 <___vfiprintf_internal_r+0x1264>
1010baa4:	04800044 	movi	r18,1
1010baa8:	d8c01005 	stb	r3,64(sp)
1010baac:	d8001d85 	stb	zero,118(sp)
1010bab0:	9027883a 	mov	r19,r18
1010bab4:	dd401004 	addi	r21,sp,64
1010bab8:	003f1106 	br	1010b700 <__alt_data_end+0xfffeb700>
1010babc:	d9402117 	ldw	r5,132(sp)
1010bac0:	d9002017 	ldw	r4,128(sp)
1010bac4:	d9801a04 	addi	r6,sp,104
1010bac8:	d9c02b15 	stw	r7,172(sp)
1010bacc:	dbc02a15 	stw	r15,168(sp)
1010bad0:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bad4:	d9c02b17 	ldw	r7,172(sp)
1010bad8:	dbc02a17 	ldw	r15,168(sp)
1010badc:	10006d1e 	bne	r2,zero,1010bc94 <___vfiprintf_internal_r+0xd50>
1010bae0:	d9801b17 	ldw	r6,108(sp)
1010bae4:	d8801c17 	ldw	r2,112(sp)
1010bae8:	d811883a 	mov	r8,sp
1010baec:	31400044 	addi	r5,r6,1
1010baf0:	003e3306 	br	1010b3c0 <__alt_data_end+0xfffeb3c0>
1010baf4:	d9401b17 	ldw	r5,108(sp)
1010baf8:	d8801c17 	ldw	r2,112(sp)
1010bafc:	29000044 	addi	r4,r5,1
1010bb00:	d8c01d87 	ldb	r3,118(sp)
1010bb04:	183e4d26 	beq	r3,zero,1010b43c <__alt_data_end+0xfffeb43c>
1010bb08:	00c00044 	movi	r3,1
1010bb0c:	d9401d84 	addi	r5,sp,118
1010bb10:	10c5883a 	add	r2,r2,r3
1010bb14:	41400015 	stw	r5,0(r8)
1010bb18:	40c00115 	stw	r3,4(r8)
1010bb1c:	d8801c15 	stw	r2,112(sp)
1010bb20:	d9001b15 	stw	r4,108(sp)
1010bb24:	014001c4 	movi	r5,7
1010bb28:	2900a90e 	bge	r5,r4,1010bdd0 <___vfiprintf_internal_r+0xe8c>
1010bb2c:	1000da1e 	bne	r2,zero,1010be98 <___vfiprintf_internal_r+0xf54>
1010bb30:	7000ab1e 	bne	r14,zero,1010bde0 <___vfiprintf_internal_r+0xe9c>
1010bb34:	000b883a 	mov	r5,zero
1010bb38:	1809883a 	mov	r4,r3
1010bb3c:	d811883a 	mov	r8,sp
1010bb40:	00c02004 	movi	r3,128
1010bb44:	e0fe4d26 	beq	fp,r3,1010b47c <__alt_data_end+0xfffeb47c>
1010bb48:	4cf9c83a 	sub	fp,r9,r19
1010bb4c:	073e7b0e 	bge	zero,fp,1010b53c <__alt_data_end+0xfffeb53c>
1010bb50:	01c00404 	movi	r7,16
1010bb54:	3f01900e 	bge	r7,fp,1010c198 <___vfiprintf_internal_r+0x1254>
1010bb58:	00c40474 	movhi	r3,4113
1010bb5c:	18ca7a04 	addi	r3,r3,10728
1010bb60:	d8c02415 	stw	r3,144(sp)
1010bb64:	034001c4 	movi	r13,7
1010bb68:	00000506 	br	1010bb80 <___vfiprintf_internal_r+0xc3c>
1010bb6c:	29000084 	addi	r4,r5,2
1010bb70:	42000204 	addi	r8,r8,8
1010bb74:	180b883a 	mov	r5,r3
1010bb78:	e73ffc04 	addi	fp,fp,-16
1010bb7c:	3f000d0e 	bge	r7,fp,1010bbb4 <___vfiprintf_internal_r+0xc70>
1010bb80:	10800404 	addi	r2,r2,16
1010bb84:	28c00044 	addi	r3,r5,1
1010bb88:	45c00015 	stw	r23,0(r8)
1010bb8c:	41c00115 	stw	r7,4(r8)
1010bb90:	d8801c15 	stw	r2,112(sp)
1010bb94:	d8c01b15 	stw	r3,108(sp)
1010bb98:	68fff40e 	bge	r13,r3,1010bb6c <__alt_data_end+0xfffebb6c>
1010bb9c:	1000101e 	bne	r2,zero,1010bbe0 <___vfiprintf_internal_r+0xc9c>
1010bba0:	e73ffc04 	addi	fp,fp,-16
1010bba4:	01000044 	movi	r4,1
1010bba8:	000b883a 	mov	r5,zero
1010bbac:	d811883a 	mov	r8,sp
1010bbb0:	3f3ff316 	blt	r7,fp,1010bb80 <__alt_data_end+0xfffebb80>
1010bbb4:	da802417 	ldw	r10,144(sp)
1010bbb8:	1705883a 	add	r2,r2,fp
1010bbbc:	47000115 	stw	fp,4(r8)
1010bbc0:	42800015 	stw	r10,0(r8)
1010bbc4:	d8801c15 	stw	r2,112(sp)
1010bbc8:	d9001b15 	stw	r4,108(sp)
1010bbcc:	00c001c4 	movi	r3,7
1010bbd0:	19003616 	blt	r3,r4,1010bcac <___vfiprintf_internal_r+0xd68>
1010bbd4:	42000204 	addi	r8,r8,8
1010bbd8:	21000044 	addi	r4,r4,1
1010bbdc:	003e5706 	br	1010b53c <__alt_data_end+0xfffeb53c>
1010bbe0:	d9402117 	ldw	r5,132(sp)
1010bbe4:	d9002017 	ldw	r4,128(sp)
1010bbe8:	d9801a04 	addi	r6,sp,104
1010bbec:	d9c02b15 	stw	r7,172(sp)
1010bbf0:	db402a15 	stw	r13,168(sp)
1010bbf4:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bbf8:	d9c02b17 	ldw	r7,172(sp)
1010bbfc:	db402a17 	ldw	r13,168(sp)
1010bc00:	1000241e 	bne	r2,zero,1010bc94 <___vfiprintf_internal_r+0xd50>
1010bc04:	d9401b17 	ldw	r5,108(sp)
1010bc08:	d8801c17 	ldw	r2,112(sp)
1010bc0c:	d811883a 	mov	r8,sp
1010bc10:	29000044 	addi	r4,r5,1
1010bc14:	003fd806 	br	1010bb78 <__alt_data_end+0xfffebb78>
1010bc18:	d9401b17 	ldw	r5,108(sp)
1010bc1c:	00c40474 	movhi	r3,4113
1010bc20:	18ca7e04 	addi	r3,r3,10744
1010bc24:	d8c02415 	stw	r3,144(sp)
1010bc28:	29400044 	addi	r5,r5,1
1010bc2c:	d8c02417 	ldw	r3,144(sp)
1010bc30:	14c5883a 	add	r2,r2,r19
1010bc34:	44c00115 	stw	r19,4(r8)
1010bc38:	40c00015 	stw	r3,0(r8)
1010bc3c:	d8801c15 	stw	r2,112(sp)
1010bc40:	d9401b15 	stw	r5,108(sp)
1010bc44:	00c001c4 	movi	r3,7
1010bc48:	1940070e 	bge	r3,r5,1010bc68 <___vfiprintf_internal_r+0xd24>
1010bc4c:	103e4826 	beq	r2,zero,1010b570 <__alt_data_end+0xfffeb570>
1010bc50:	d9402117 	ldw	r5,132(sp)
1010bc54:	d9002017 	ldw	r4,128(sp)
1010bc58:	d9801a04 	addi	r6,sp,104
1010bc5c:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bc60:	10000c1e 	bne	r2,zero,1010bc94 <___vfiprintf_internal_r+0xd50>
1010bc64:	d8801c17 	ldw	r2,112(sp)
1010bc68:	8c80010e 	bge	r17,r18,1010bc70 <___vfiprintf_internal_r+0xd2c>
1010bc6c:	9023883a 	mov	r17,r18
1010bc70:	da802317 	ldw	r10,140(sp)
1010bc74:	5455883a 	add	r10,r10,r17
1010bc78:	da802315 	stw	r10,140(sp)
1010bc7c:	103e4126 	beq	r2,zero,1010b584 <__alt_data_end+0xfffeb584>
1010bc80:	d9402117 	ldw	r5,132(sp)
1010bc84:	d9002017 	ldw	r4,128(sp)
1010bc88:	d9801a04 	addi	r6,sp,104
1010bc8c:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bc90:	103e3c26 	beq	r2,zero,1010b584 <__alt_data_end+0xfffeb584>
1010bc94:	dd002117 	ldw	r20,132(sp)
1010bc98:	a080030b 	ldhu	r2,12(r20)
1010bc9c:	1080100c 	andi	r2,r2,64
1010bca0:	1001231e 	bne	r2,zero,1010c130 <___vfiprintf_internal_r+0x11ec>
1010bca4:	d8802317 	ldw	r2,140(sp)
1010bca8:	003d7b06 	br	1010b298 <__alt_data_end+0xfffeb298>
1010bcac:	1000991e 	bne	r2,zero,1010bf14 <___vfiprintf_internal_r+0xfd0>
1010bcb0:	00c00044 	movi	r3,1
1010bcb4:	9805883a 	mov	r2,r19
1010bcb8:	dd400015 	stw	r21,0(sp)
1010bcbc:	dcc00115 	stw	r19,4(sp)
1010bcc0:	dcc01c15 	stw	r19,112(sp)
1010bcc4:	d8c01b15 	stw	r3,108(sp)
1010bcc8:	d811883a 	mov	r8,sp
1010bccc:	42000204 	addi	r8,r8,8
1010bcd0:	a2c0010c 	andi	r11,r20,4
1010bcd4:	583fe426 	beq	r11,zero,1010bc68 <__alt_data_end+0xfffebc68>
1010bcd8:	8ca7c83a 	sub	r19,r17,r18
1010bcdc:	04ffe20e 	bge	zero,r19,1010bc68 <__alt_data_end+0xfffebc68>
1010bce0:	01c00404 	movi	r7,16
1010bce4:	3cffcc0e 	bge	r7,r19,1010bc18 <__alt_data_end+0xfffebc18>
1010bce8:	02840474 	movhi	r10,4113
1010bcec:	528a7e04 	addi	r10,r10,10744
1010bcf0:	d9001b17 	ldw	r4,108(sp)
1010bcf4:	da802415 	stw	r10,144(sp)
1010bcf8:	382b883a 	mov	r21,r7
1010bcfc:	050001c4 	movi	r20,7
1010bd00:	df002017 	ldw	fp,128(sp)
1010bd04:	00000506 	br	1010bd1c <___vfiprintf_internal_r+0xdd8>
1010bd08:	21400084 	addi	r5,r4,2
1010bd0c:	42000204 	addi	r8,r8,8
1010bd10:	1809883a 	mov	r4,r3
1010bd14:	9cfffc04 	addi	r19,r19,-16
1010bd18:	acffc40e 	bge	r21,r19,1010bc2c <__alt_data_end+0xfffebc2c>
1010bd1c:	10800404 	addi	r2,r2,16
1010bd20:	20c00044 	addi	r3,r4,1
1010bd24:	45800015 	stw	r22,0(r8)
1010bd28:	45400115 	stw	r21,4(r8)
1010bd2c:	d8801c15 	stw	r2,112(sp)
1010bd30:	d8c01b15 	stw	r3,108(sp)
1010bd34:	a0fff40e 	bge	r20,r3,1010bd08 <__alt_data_end+0xfffebd08>
1010bd38:	1000041e 	bne	r2,zero,1010bd4c <___vfiprintf_internal_r+0xe08>
1010bd3c:	01400044 	movi	r5,1
1010bd40:	0009883a 	mov	r4,zero
1010bd44:	d811883a 	mov	r8,sp
1010bd48:	003ff206 	br	1010bd14 <__alt_data_end+0xfffebd14>
1010bd4c:	d9402117 	ldw	r5,132(sp)
1010bd50:	d9801a04 	addi	r6,sp,104
1010bd54:	e009883a 	mov	r4,fp
1010bd58:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bd5c:	103fcd1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010bd60:	d9001b17 	ldw	r4,108(sp)
1010bd64:	d8801c17 	ldw	r2,112(sp)
1010bd68:	d811883a 	mov	r8,sp
1010bd6c:	21400044 	addi	r5,r4,1
1010bd70:	003fe806 	br	1010bd14 <__alt_data_end+0xfffebd14>
1010bd74:	d9402117 	ldw	r5,132(sp)
1010bd78:	d9002017 	ldw	r4,128(sp)
1010bd7c:	d9801a04 	addi	r6,sp,104
1010bd80:	d9c02b15 	stw	r7,172(sp)
1010bd84:	db402a15 	stw	r13,168(sp)
1010bd88:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bd8c:	d9c02b17 	ldw	r7,172(sp)
1010bd90:	db402a17 	ldw	r13,168(sp)
1010bd94:	103fbf1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010bd98:	d9401b17 	ldw	r5,108(sp)
1010bd9c:	d8801c17 	ldw	r2,112(sp)
1010bda0:	d811883a 	mov	r8,sp
1010bda4:	29800044 	addi	r6,r5,1
1010bda8:	003dc406 	br	1010b4bc <__alt_data_end+0xfffeb4bc>
1010bdac:	1000d21e 	bne	r2,zero,1010c0f8 <___vfiprintf_internal_r+0x11b4>
1010bdb0:	d8c01d87 	ldb	r3,118(sp)
1010bdb4:	18009526 	beq	r3,zero,1010c00c <___vfiprintf_internal_r+0x10c8>
1010bdb8:	00800044 	movi	r2,1
1010bdbc:	d8c01d84 	addi	r3,sp,118
1010bdc0:	1009883a 	mov	r4,r2
1010bdc4:	d8c00015 	stw	r3,0(sp)
1010bdc8:	d8800115 	stw	r2,4(sp)
1010bdcc:	d811883a 	mov	r8,sp
1010bdd0:	200b883a 	mov	r5,r4
1010bdd4:	42000204 	addi	r8,r8,8
1010bdd8:	21000044 	addi	r4,r4,1
1010bddc:	003d9706 	br	1010b43c <__alt_data_end+0xfffeb43c>
1010bde0:	d9001d04 	addi	r4,sp,116
1010bde4:	00800084 	movi	r2,2
1010bde8:	d9000015 	stw	r4,0(sp)
1010bdec:	d8800115 	stw	r2,4(sp)
1010bdf0:	1809883a 	mov	r4,r3
1010bdf4:	d811883a 	mov	r8,sp
1010bdf8:	200b883a 	mov	r5,r4
1010bdfc:	42000204 	addi	r8,r8,8
1010be00:	21000044 	addi	r4,r4,1
1010be04:	003f4e06 	br	1010bb40 <__alt_data_end+0xfffebb40>
1010be08:	d8001d85 	stb	zero,118(sp)
1010be0c:	48005016 	blt	r9,zero,1010bf50 <___vfiprintf_internal_r+0x100c>
1010be10:	00ffdfc4 	movi	r3,-129
1010be14:	94c4b03a 	or	r2,r18,r19
1010be18:	a0e8703a 	and	r20,r20,r3
1010be1c:	103d4426 	beq	r2,zero,1010b330 <__alt_data_end+0xfffeb330>
1010be20:	0039883a 	mov	fp,zero
1010be24:	d9002617 	ldw	r4,152(sp)
1010be28:	dd401a04 	addi	r21,sp,104
1010be2c:	908003cc 	andi	r2,r18,15
1010be30:	9806973a 	slli	r3,r19,28
1010be34:	2085883a 	add	r2,r4,r2
1010be38:	9024d13a 	srli	r18,r18,4
1010be3c:	10800003 	ldbu	r2,0(r2)
1010be40:	9826d13a 	srli	r19,r19,4
1010be44:	ad7fffc4 	addi	r21,r21,-1
1010be48:	1ca4b03a 	or	r18,r3,r18
1010be4c:	a8800005 	stb	r2,0(r21)
1010be50:	94c4b03a 	or	r2,r18,r19
1010be54:	103ff51e 	bne	r2,zero,1010be2c <__alt_data_end+0xfffebe2c>
1010be58:	003e5906 	br	1010b7c0 <__alt_data_end+0xfffeb7c0>
1010be5c:	d9402117 	ldw	r5,132(sp)
1010be60:	d9002017 	ldw	r4,128(sp)
1010be64:	d9801a04 	addi	r6,sp,104
1010be68:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010be6c:	103f891e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010be70:	d8801c17 	ldw	r2,112(sp)
1010be74:	d811883a 	mov	r8,sp
1010be78:	003f9506 	br	1010bcd0 <__alt_data_end+0xfffebcd0>
1010be7c:	d9402117 	ldw	r5,132(sp)
1010be80:	d9002017 	ldw	r4,128(sp)
1010be84:	d9801a04 	addi	r6,sp,104
1010be88:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010be8c:	103f811e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010be90:	d811883a 	mov	r8,sp
1010be94:	003ced06 	br	1010b24c <__alt_data_end+0xfffeb24c>
1010be98:	d9402117 	ldw	r5,132(sp)
1010be9c:	d9002017 	ldw	r4,128(sp)
1010bea0:	d9801a04 	addi	r6,sp,104
1010bea4:	da402c15 	stw	r9,176(sp)
1010bea8:	db802a15 	stw	r14,168(sp)
1010beac:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010beb0:	da402c17 	ldw	r9,176(sp)
1010beb4:	db802a17 	ldw	r14,168(sp)
1010beb8:	103f761e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010bebc:	d9401b17 	ldw	r5,108(sp)
1010bec0:	d8801c17 	ldw	r2,112(sp)
1010bec4:	d811883a 	mov	r8,sp
1010bec8:	29000044 	addi	r4,r5,1
1010becc:	003d5b06 	br	1010b43c <__alt_data_end+0xfffeb43c>
1010bed0:	d9402117 	ldw	r5,132(sp)
1010bed4:	d9002017 	ldw	r4,128(sp)
1010bed8:	d9801a04 	addi	r6,sp,104
1010bedc:	da402c15 	stw	r9,176(sp)
1010bee0:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bee4:	da402c17 	ldw	r9,176(sp)
1010bee8:	103f6a1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010beec:	d9401b17 	ldw	r5,108(sp)
1010bef0:	d8801c17 	ldw	r2,112(sp)
1010bef4:	d811883a 	mov	r8,sp
1010bef8:	29000044 	addi	r4,r5,1
1010befc:	003f1006 	br	1010bb40 <__alt_data_end+0xfffebb40>
1010bf00:	1000c31e 	bne	r2,zero,1010c210 <___vfiprintf_internal_r+0x12cc>
1010bf04:	01000044 	movi	r4,1
1010bf08:	000b883a 	mov	r5,zero
1010bf0c:	d811883a 	mov	r8,sp
1010bf10:	003f0d06 	br	1010bb48 <__alt_data_end+0xfffebb48>
1010bf14:	d9402117 	ldw	r5,132(sp)
1010bf18:	d9002017 	ldw	r4,128(sp)
1010bf1c:	d9801a04 	addi	r6,sp,104
1010bf20:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010bf24:	103f5b1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010bf28:	d9001b17 	ldw	r4,108(sp)
1010bf2c:	d8801c17 	ldw	r2,112(sp)
1010bf30:	d811883a 	mov	r8,sp
1010bf34:	21000044 	addi	r4,r4,1
1010bf38:	003d8006 	br	1010b53c <__alt_data_end+0xfffeb53c>
1010bf3c:	01040474 	movhi	r4,4113
1010bf40:	210a1a04 	addi	r4,r4,10344
1010bf44:	d9002615 	stw	r4,152(sp)
1010bf48:	d8c02215 	stw	r3,136(sp)
1010bf4c:	1029883a 	mov	r20,r2
1010bf50:	94c4b03a 	or	r2,r18,r19
1010bf54:	103fb21e 	bne	r2,zero,1010be20 <__alt_data_end+0xfffebe20>
1010bf58:	0039883a 	mov	fp,zero
1010bf5c:	00800084 	movi	r2,2
1010bf60:	003e6b06 	br	1010b910 <__alt_data_end+0xfffeb910>
1010bf64:	da802217 	ldw	r10,136(sp)
1010bf68:	d8001d85 	stb	zero,118(sp)
1010bf6c:	0027883a 	mov	r19,zero
1010bf70:	50800104 	addi	r2,r10,4
1010bf74:	54800017 	ldw	r18,0(r10)
1010bf78:	483e6016 	blt	r9,zero,1010b8fc <__alt_data_end+0xfffeb8fc>
1010bf7c:	00ffdfc4 	movi	r3,-129
1010bf80:	d8802215 	stw	r2,136(sp)
1010bf84:	a0e8703a 	and	r20,r20,r3
1010bf88:	0039883a 	mov	fp,zero
1010bf8c:	903ebb26 	beq	r18,zero,1010ba7c <__alt_data_end+0xfffeba7c>
1010bf90:	00800244 	movi	r2,9
1010bf94:	14bdee36 	bltu	r2,r18,1010b750 <__alt_data_end+0xfffeb750>
1010bf98:	003eba06 	br	1010ba84 <__alt_data_end+0xfffeba84>
1010bf9c:	00800c04 	movi	r2,48
1010bfa0:	d8c01d45 	stb	r3,117(sp)
1010bfa4:	d8801d05 	stb	r2,116(sp)
1010bfa8:	d8001d85 	stb	zero,118(sp)
1010bfac:	a0c00094 	ori	r3,r20,2
1010bfb0:	4800a916 	blt	r9,zero,1010c258 <___vfiprintf_internal_r+0x1314>
1010bfb4:	00bfdfc4 	movi	r2,-129
1010bfb8:	a096703a 	and	r11,r20,r2
1010bfbc:	5d000094 	ori	r20,r11,2
1010bfc0:	0039883a 	mov	fp,zero
1010bfc4:	003f9706 	br	1010be24 <__alt_data_end+0xfffebe24>
1010bfc8:	8025883a 	mov	r18,r16
1010bfcc:	003c2e06 	br	1010b088 <__alt_data_end+0xfffeb088>
1010bfd0:	00840474 	movhi	r2,4113
1010bfd4:	108a1a04 	addi	r2,r2,10344
1010bfd8:	0039883a 	mov	fp,zero
1010bfdc:	d8802615 	stw	r2,152(sp)
1010bfe0:	003f9006 	br	1010be24 <__alt_data_end+0xfffebe24>
1010bfe4:	04a5c83a 	sub	r18,zero,r18
1010bfe8:	07000b44 	movi	fp,45
1010bfec:	9004c03a 	cmpne	r2,r18,zero
1010bff0:	04e7c83a 	sub	r19,zero,r19
1010bff4:	df001d85 	stb	fp,118(sp)
1010bff8:	98a7c83a 	sub	r19,r19,r2
1010bffc:	48009f16 	blt	r9,zero,1010c27c <___vfiprintf_internal_r+0x1338>
1010c000:	00bfdfc4 	movi	r2,-129
1010c004:	a0a8703a 	and	r20,r20,r2
1010c008:	003dd006 	br	1010b74c <__alt_data_end+0xfffeb74c>
1010c00c:	70004c26 	beq	r14,zero,1010c140 <___vfiprintf_internal_r+0x11fc>
1010c010:	00800084 	movi	r2,2
1010c014:	d8c01d04 	addi	r3,sp,116
1010c018:	d8c00015 	stw	r3,0(sp)
1010c01c:	d8800115 	stw	r2,4(sp)
1010c020:	01000044 	movi	r4,1
1010c024:	d811883a 	mov	r8,sp
1010c028:	003f7306 	br	1010bdf8 <__alt_data_end+0xfffebdf8>
1010c02c:	a080100c 	andi	r2,r20,64
1010c030:	da802217 	ldw	r10,136(sp)
1010c034:	103e0626 	beq	r2,zero,1010b850 <__alt_data_end+0xfffeb850>
1010c038:	5480000f 	ldh	r18,0(r10)
1010c03c:	52800104 	addi	r10,r10,4
1010c040:	da802215 	stw	r10,136(sp)
1010c044:	9027d7fa 	srai	r19,r18,31
1010c048:	9805883a 	mov	r2,r19
1010c04c:	003db806 	br	1010b730 <__alt_data_end+0xfffeb730>
1010c050:	a080040c 	andi	r2,r20,16
1010c054:	1000091e 	bne	r2,zero,1010c07c <___vfiprintf_internal_r+0x1138>
1010c058:	a2c0100c 	andi	r11,r20,64
1010c05c:	58000726 	beq	r11,zero,1010c07c <___vfiprintf_internal_r+0x1138>
1010c060:	da802217 	ldw	r10,136(sp)
1010c064:	50800017 	ldw	r2,0(r10)
1010c068:	52800104 	addi	r10,r10,4
1010c06c:	da802215 	stw	r10,136(sp)
1010c070:	da802317 	ldw	r10,140(sp)
1010c074:	1280000d 	sth	r10,0(r2)
1010c078:	003be706 	br	1010b018 <__alt_data_end+0xfffeb018>
1010c07c:	da802217 	ldw	r10,136(sp)
1010c080:	50800017 	ldw	r2,0(r10)
1010c084:	52800104 	addi	r10,r10,4
1010c088:	da802215 	stw	r10,136(sp)
1010c08c:	da802317 	ldw	r10,140(sp)
1010c090:	12800015 	stw	r10,0(r2)
1010c094:	003be006 	br	1010b018 <__alt_data_end+0xfffeb018>
1010c098:	a080100c 	andi	r2,r20,64
1010c09c:	da802217 	ldw	r10,136(sp)
1010c0a0:	10003026 	beq	r2,zero,1010c164 <___vfiprintf_internal_r+0x1220>
1010c0a4:	5480000b 	ldhu	r18,0(r10)
1010c0a8:	52800104 	addi	r10,r10,4
1010c0ac:	0027883a 	mov	r19,zero
1010c0b0:	da802215 	stw	r10,136(sp)
1010c0b4:	003d8006 	br	1010b6b8 <__alt_data_end+0xfffeb6b8>
1010c0b8:	80c00007 	ldb	r3,0(r16)
1010c0bc:	003c0006 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010c0c0:	a080100c 	andi	r2,r20,64
1010c0c4:	d8001d85 	stb	zero,118(sp)
1010c0c8:	da802217 	ldw	r10,136(sp)
1010c0cc:	1000201e 	bne	r2,zero,1010c150 <___vfiprintf_internal_r+0x120c>
1010c0d0:	50800104 	addi	r2,r10,4
1010c0d4:	54800017 	ldw	r18,0(r10)
1010c0d8:	0027883a 	mov	r19,zero
1010c0dc:	483def0e 	bge	r9,zero,1010b89c <__alt_data_end+0xfffeb89c>
1010c0e0:	94c6b03a 	or	r3,r18,r19
1010c0e4:	d8802215 	stw	r2,136(sp)
1010c0e8:	183d4e1e 	bne	r3,zero,1010b624 <__alt_data_end+0xfffeb624>
1010c0ec:	0039883a 	mov	fp,zero
1010c0f0:	0005883a 	mov	r2,zero
1010c0f4:	003e0606 	br	1010b910 <__alt_data_end+0xfffeb910>
1010c0f8:	d9402117 	ldw	r5,132(sp)
1010c0fc:	d9002017 	ldw	r4,128(sp)
1010c100:	d9801a04 	addi	r6,sp,104
1010c104:	da402c15 	stw	r9,176(sp)
1010c108:	db802a15 	stw	r14,168(sp)
1010c10c:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010c110:	da402c17 	ldw	r9,176(sp)
1010c114:	db802a17 	ldw	r14,168(sp)
1010c118:	103ede1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010c11c:	d9401b17 	ldw	r5,108(sp)
1010c120:	d8801c17 	ldw	r2,112(sp)
1010c124:	d811883a 	mov	r8,sp
1010c128:	29000044 	addi	r4,r5,1
1010c12c:	003e7406 	br	1010bb00 <__alt_data_end+0xfffebb00>
1010c130:	00bfffc4 	movi	r2,-1
1010c134:	003c5806 	br	1010b298 <__alt_data_end+0xfffeb298>
1010c138:	d811883a 	mov	r8,sp
1010c13c:	003ee806 	br	1010bce0 <__alt_data_end+0xfffebce0>
1010c140:	000b883a 	mov	r5,zero
1010c144:	01000044 	movi	r4,1
1010c148:	d811883a 	mov	r8,sp
1010c14c:	003e7c06 	br	1010bb40 <__alt_data_end+0xfffebb40>
1010c150:	50800104 	addi	r2,r10,4
1010c154:	5480000b 	ldhu	r18,0(r10)
1010c158:	0027883a 	mov	r19,zero
1010c15c:	483dcf0e 	bge	r9,zero,1010b89c <__alt_data_end+0xfffeb89c>
1010c160:	003fdf06 	br	1010c0e0 <__alt_data_end+0xfffec0e0>
1010c164:	54800017 	ldw	r18,0(r10)
1010c168:	52800104 	addi	r10,r10,4
1010c16c:	0027883a 	mov	r19,zero
1010c170:	da802215 	stw	r10,136(sp)
1010c174:	003d5006 	br	1010b6b8 <__alt_data_end+0xfffeb6b8>
1010c178:	50800104 	addi	r2,r10,4
1010c17c:	5480000b 	ldhu	r18,0(r10)
1010c180:	0027883a 	mov	r19,zero
1010c184:	483f7d0e 	bge	r9,zero,1010bf7c <__alt_data_end+0xfffebf7c>
1010c188:	003ddc06 	br	1010b8fc <__alt_data_end+0xfffeb8fc>
1010c18c:	d8c02215 	stw	r3,136(sp)
1010c190:	0039883a 	mov	fp,zero
1010c194:	003ddb06 	br	1010b904 <__alt_data_end+0xfffeb904>
1010c198:	02840474 	movhi	r10,4113
1010c19c:	528a7a04 	addi	r10,r10,10728
1010c1a0:	da802415 	stw	r10,144(sp)
1010c1a4:	003e8306 	br	1010bbb4 <__alt_data_end+0xfffebbb4>
1010c1a8:	d8801c17 	ldw	r2,112(sp)
1010c1ac:	dd002117 	ldw	r20,132(sp)
1010c1b0:	103eb926 	beq	r2,zero,1010bc98 <__alt_data_end+0xfffebc98>
1010c1b4:	d9002017 	ldw	r4,128(sp)
1010c1b8:	d9801a04 	addi	r6,sp,104
1010c1bc:	a00b883a 	mov	r5,r20
1010c1c0:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010c1c4:	003eb406 	br	1010bc98 <__alt_data_end+0xfffebc98>
1010c1c8:	80c00043 	ldbu	r3,1(r16)
1010c1cc:	a5000814 	ori	r20,r20,32
1010c1d0:	84000044 	addi	r16,r16,1
1010c1d4:	18c03fcc 	andi	r3,r3,255
1010c1d8:	18c0201c 	xori	r3,r3,128
1010c1dc:	18ffe004 	addi	r3,r3,-128
1010c1e0:	003bb706 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010c1e4:	a809883a 	mov	r4,r21
1010c1e8:	d8c02a15 	stw	r3,168(sp)
1010c1ec:	da002b15 	stw	r8,172(sp)
1010c1f0:	0104d500 	call	10104d50 <strlen>
1010c1f4:	d8c02a17 	ldw	r3,168(sp)
1010c1f8:	1027883a 	mov	r19,r2
1010c1fc:	df001d83 	ldbu	fp,118(sp)
1010c200:	d8c02215 	stw	r3,136(sp)
1010c204:	0013883a 	mov	r9,zero
1010c208:	da002b17 	ldw	r8,172(sp)
1010c20c:	003c4d06 	br	1010b344 <__alt_data_end+0xfffeb344>
1010c210:	d9402117 	ldw	r5,132(sp)
1010c214:	d9002017 	ldw	r4,128(sp)
1010c218:	d9801a04 	addi	r6,sp,104
1010c21c:	da402c15 	stw	r9,176(sp)
1010c220:	010ae300 	call	1010ae30 <__sprint_r.part.0>
1010c224:	da402c17 	ldw	r9,176(sp)
1010c228:	103e9a1e 	bne	r2,zero,1010bc94 <__alt_data_end+0xfffebc94>
1010c22c:	d9401b17 	ldw	r5,108(sp)
1010c230:	d8801c17 	ldw	r2,112(sp)
1010c234:	d811883a 	mov	r8,sp
1010c238:	29000044 	addi	r4,r5,1
1010c23c:	003e4206 	br	1010bb48 <__alt_data_end+0xfffebb48>
1010c240:	d9401b17 	ldw	r5,108(sp)
1010c244:	01040474 	movhi	r4,4113
1010c248:	210a7e04 	addi	r4,r4,10744
1010c24c:	d9002415 	stw	r4,144(sp)
1010c250:	29400044 	addi	r5,r5,1
1010c254:	003c6d06 	br	1010b40c <__alt_data_end+0xfffeb40c>
1010c258:	0039883a 	mov	fp,zero
1010c25c:	00800084 	movi	r2,2
1010c260:	10803fcc 	andi	r2,r2,255
1010c264:	01000044 	movi	r4,1
1010c268:	11001e26 	beq	r2,r4,1010c2e4 <___vfiprintf_internal_r+0x13a0>
1010c26c:	01000084 	movi	r4,2
1010c270:	11001e1e 	bne	r2,r4,1010c2ec <___vfiprintf_internal_r+0x13a8>
1010c274:	1829883a 	mov	r20,r3
1010c278:	003eea06 	br	1010be24 <__alt_data_end+0xfffebe24>
1010c27c:	a007883a 	mov	r3,r20
1010c280:	00800044 	movi	r2,1
1010c284:	003ff606 	br	1010c260 <__alt_data_end+0xfffec260>
1010c288:	00800184 	movi	r2,6
1010c28c:	1240012e 	bgeu	r2,r9,1010c294 <___vfiprintf_internal_r+0x1350>
1010c290:	1013883a 	mov	r9,r2
1010c294:	4827883a 	mov	r19,r9
1010c298:	4825883a 	mov	r18,r9
1010c29c:	48001516 	blt	r9,zero,1010c2f4 <___vfiprintf_internal_r+0x13b0>
1010c2a0:	05440474 	movhi	r21,4113
1010c2a4:	d8c02215 	stw	r3,136(sp)
1010c2a8:	ad4a1f04 	addi	r21,r21,10364
1010c2ac:	003d1406 	br	1010b700 <__alt_data_end+0xfffeb700>
1010c2b0:	02840474 	movhi	r10,4113
1010c2b4:	528a7a04 	addi	r10,r10,10728
1010c2b8:	da802415 	stw	r10,144(sp)
1010c2bc:	200d883a 	mov	r6,r4
1010c2c0:	003c9106 	br	1010b508 <__alt_data_end+0xfffeb508>
1010c2c4:	5021883a 	mov	r16,r10
1010c2c8:	0013883a 	mov	r9,zero
1010c2cc:	003b7d06 	br	1010b0c4 <__alt_data_end+0xfffeb0c4>
1010c2d0:	4827883a 	mov	r19,r9
1010c2d4:	df001d83 	ldbu	fp,118(sp)
1010c2d8:	d8c02215 	stw	r3,136(sp)
1010c2dc:	0013883a 	mov	r9,zero
1010c2e0:	003c1806 	br	1010b344 <__alt_data_end+0xfffeb344>
1010c2e4:	1829883a 	mov	r20,r3
1010c2e8:	003d1806 	br	1010b74c <__alt_data_end+0xfffeb74c>
1010c2ec:	1829883a 	mov	r20,r3
1010c2f0:	003ccd06 	br	1010b628 <__alt_data_end+0xfffeb628>
1010c2f4:	0025883a 	mov	r18,zero
1010c2f8:	003fe906 	br	1010c2a0 <__alt_data_end+0xfffec2a0>
1010c2fc:	d8802217 	ldw	r2,136(sp)
1010c300:	80c00043 	ldbu	r3,1(r16)
1010c304:	5021883a 	mov	r16,r10
1010c308:	12400017 	ldw	r9,0(r2)
1010c30c:	10800104 	addi	r2,r2,4
1010c310:	d8802215 	stw	r2,136(sp)
1010c314:	483faf0e 	bge	r9,zero,1010c1d4 <__alt_data_end+0xfffec1d4>
1010c318:	18c03fcc 	andi	r3,r3,255
1010c31c:	18c0201c 	xori	r3,r3,128
1010c320:	027fffc4 	movi	r9,-1
1010c324:	18ffe004 	addi	r3,r3,-128
1010c328:	003b6506 	br	1010b0c0 <__alt_data_end+0xfffeb0c0>
1010c32c:	d9c01d85 	stb	r7,118(sp)
1010c330:	003ca006 	br	1010b5b4 <__alt_data_end+0xfffeb5b4>
1010c334:	d9c01d85 	stb	r7,118(sp)
1010c338:	003cad06 	br	1010b5f0 <__alt_data_end+0xfffeb5f0>
1010c33c:	d9c01d85 	stb	r7,118(sp)
1010c340:	003d7d06 	br	1010b938 <__alt_data_end+0xfffeb938>
1010c344:	d9c01d85 	stb	r7,118(sp)
1010c348:	003d5f06 	br	1010b8c8 <__alt_data_end+0xfffeb8c8>
1010c34c:	a080004c 	andi	r2,r20,1
1010c350:	0039883a 	mov	fp,zero
1010c354:	10000526 	beq	r2,zero,1010c36c <___vfiprintf_internal_r+0x1428>
1010c358:	00800c04 	movi	r2,48
1010c35c:	d88019c5 	stb	r2,103(sp)
1010c360:	dcc02717 	ldw	r19,156(sp)
1010c364:	dd4019c4 	addi	r21,sp,103
1010c368:	003bf606 	br	1010b344 <__alt_data_end+0xfffeb344>
1010c36c:	0027883a 	mov	r19,zero
1010c370:	dd401a04 	addi	r21,sp,104
1010c374:	003bf306 	br	1010b344 <__alt_data_end+0xfffeb344>
1010c378:	d9c01d85 	stb	r7,118(sp)
1010c37c:	003dc806 	br	1010baa0 <__alt_data_end+0xfffebaa0>
1010c380:	d9c01d85 	stb	r7,118(sp)
1010c384:	003d3a06 	br	1010b870 <__alt_data_end+0xfffeb870>
1010c388:	d9c01d85 	stb	r7,118(sp)
1010c38c:	003d2a06 	br	1010b838 <__alt_data_end+0xfffeb838>
1010c390:	d9c01d85 	stb	r7,118(sp)
1010c394:	003cde06 	br	1010b710 <__alt_data_end+0xfffeb710>
1010c398:	d9c01d85 	stb	r7,118(sp)
1010c39c:	003cbc06 	br	1010b690 <__alt_data_end+0xfffeb690>

1010c3a0 <__vfiprintf_internal>:
1010c3a0:	00840474 	movhi	r2,4113
1010c3a4:	10918804 	addi	r2,r2,17952
1010c3a8:	300f883a 	mov	r7,r6
1010c3ac:	280d883a 	mov	r6,r5
1010c3b0:	200b883a 	mov	r5,r4
1010c3b4:	11000017 	ldw	r4,0(r2)
1010c3b8:	010af441 	jmpi	1010af44 <___vfiprintf_internal_r>

1010c3bc <__sbprintf>:
1010c3bc:	2880030b 	ldhu	r2,12(r5)
1010c3c0:	2ac01917 	ldw	r11,100(r5)
1010c3c4:	2a80038b 	ldhu	r10,14(r5)
1010c3c8:	2a400717 	ldw	r9,28(r5)
1010c3cc:	2a000917 	ldw	r8,36(r5)
1010c3d0:	defee204 	addi	sp,sp,-1144
1010c3d4:	00c10004 	movi	r3,1024
1010c3d8:	dc011a15 	stw	r16,1128(sp)
1010c3dc:	10bfff4c 	andi	r2,r2,65533
1010c3e0:	2821883a 	mov	r16,r5
1010c3e4:	d8cb883a 	add	r5,sp,r3
1010c3e8:	dc811c15 	stw	r18,1136(sp)
1010c3ec:	dc411b15 	stw	r17,1132(sp)
1010c3f0:	dfc11d15 	stw	ra,1140(sp)
1010c3f4:	2025883a 	mov	r18,r4
1010c3f8:	d881030d 	sth	r2,1036(sp)
1010c3fc:	dac11915 	stw	r11,1124(sp)
1010c400:	da81038d 	sth	r10,1038(sp)
1010c404:	da410715 	stw	r9,1052(sp)
1010c408:	da010915 	stw	r8,1060(sp)
1010c40c:	dec10015 	stw	sp,1024(sp)
1010c410:	dec10415 	stw	sp,1040(sp)
1010c414:	d8c10215 	stw	r3,1032(sp)
1010c418:	d8c10515 	stw	r3,1044(sp)
1010c41c:	d8010615 	stw	zero,1048(sp)
1010c420:	010af440 	call	1010af44 <___vfiprintf_internal_r>
1010c424:	1023883a 	mov	r17,r2
1010c428:	10000416 	blt	r2,zero,1010c43c <__sbprintf+0x80>
1010c42c:	d9410004 	addi	r5,sp,1024
1010c430:	9009883a 	mov	r4,r18
1010c434:	0102a1c0 	call	10102a1c <_fflush_r>
1010c438:	10000d1e 	bne	r2,zero,1010c470 <__sbprintf+0xb4>
1010c43c:	d881030b 	ldhu	r2,1036(sp)
1010c440:	1080100c 	andi	r2,r2,64
1010c444:	10000326 	beq	r2,zero,1010c454 <__sbprintf+0x98>
1010c448:	8080030b 	ldhu	r2,12(r16)
1010c44c:	10801014 	ori	r2,r2,64
1010c450:	8080030d 	sth	r2,12(r16)
1010c454:	8805883a 	mov	r2,r17
1010c458:	dfc11d17 	ldw	ra,1140(sp)
1010c45c:	dc811c17 	ldw	r18,1136(sp)
1010c460:	dc411b17 	ldw	r17,1132(sp)
1010c464:	dc011a17 	ldw	r16,1128(sp)
1010c468:	dec11e04 	addi	sp,sp,1144
1010c46c:	f800283a 	ret
1010c470:	047fffc4 	movi	r17,-1
1010c474:	003ff106 	br	1010c43c <__alt_data_end+0xfffec43c>

1010c478 <_calloc_r>:
1010c478:	298b383a 	mul	r5,r5,r6
1010c47c:	defffe04 	addi	sp,sp,-8
1010c480:	dfc00115 	stw	ra,4(sp)
1010c484:	dc000015 	stw	r16,0(sp)
1010c488:	0103d940 	call	10103d94 <_malloc_r>
1010c48c:	10002926 	beq	r2,zero,1010c534 <_calloc_r+0xbc>
1010c490:	11bfff17 	ldw	r6,-4(r2)
1010c494:	1021883a 	mov	r16,r2
1010c498:	00bfff04 	movi	r2,-4
1010c49c:	308c703a 	and	r6,r6,r2
1010c4a0:	00c00904 	movi	r3,36
1010c4a4:	308d883a 	add	r6,r6,r2
1010c4a8:	19801636 	bltu	r3,r6,1010c504 <_calloc_r+0x8c>
1010c4ac:	008004c4 	movi	r2,19
1010c4b0:	11800b2e 	bgeu	r2,r6,1010c4e0 <_calloc_r+0x68>
1010c4b4:	80000015 	stw	zero,0(r16)
1010c4b8:	80000115 	stw	zero,4(r16)
1010c4bc:	008006c4 	movi	r2,27
1010c4c0:	11801a2e 	bgeu	r2,r6,1010c52c <_calloc_r+0xb4>
1010c4c4:	80000215 	stw	zero,8(r16)
1010c4c8:	80000315 	stw	zero,12(r16)
1010c4cc:	30c0151e 	bne	r6,r3,1010c524 <_calloc_r+0xac>
1010c4d0:	80000415 	stw	zero,16(r16)
1010c4d4:	80800604 	addi	r2,r16,24
1010c4d8:	80000515 	stw	zero,20(r16)
1010c4dc:	00000106 	br	1010c4e4 <_calloc_r+0x6c>
1010c4e0:	8005883a 	mov	r2,r16
1010c4e4:	10000015 	stw	zero,0(r2)
1010c4e8:	10000115 	stw	zero,4(r2)
1010c4ec:	10000215 	stw	zero,8(r2)
1010c4f0:	8005883a 	mov	r2,r16
1010c4f4:	dfc00117 	ldw	ra,4(sp)
1010c4f8:	dc000017 	ldw	r16,0(sp)
1010c4fc:	dec00204 	addi	sp,sp,8
1010c500:	f800283a 	ret
1010c504:	000b883a 	mov	r5,zero
1010c508:	8009883a 	mov	r4,r16
1010c50c:	01045a00 	call	101045a0 <memset>
1010c510:	8005883a 	mov	r2,r16
1010c514:	dfc00117 	ldw	ra,4(sp)
1010c518:	dc000017 	ldw	r16,0(sp)
1010c51c:	dec00204 	addi	sp,sp,8
1010c520:	f800283a 	ret
1010c524:	80800404 	addi	r2,r16,16
1010c528:	003fee06 	br	1010c4e4 <__alt_data_end+0xfffec4e4>
1010c52c:	80800204 	addi	r2,r16,8
1010c530:	003fec06 	br	1010c4e4 <__alt_data_end+0xfffec4e4>
1010c534:	0005883a 	mov	r2,zero
1010c538:	003fee06 	br	1010c4f4 <__alt_data_end+0xfffec4f4>

1010c53c <__fputwc>:
1010c53c:	defff804 	addi	sp,sp,-32
1010c540:	dcc00415 	stw	r19,16(sp)
1010c544:	dc800315 	stw	r18,12(sp)
1010c548:	dc000115 	stw	r16,4(sp)
1010c54c:	dfc00715 	stw	ra,28(sp)
1010c550:	dd400615 	stw	r21,24(sp)
1010c554:	dd000515 	stw	r20,20(sp)
1010c558:	dc400215 	stw	r17,8(sp)
1010c55c:	2027883a 	mov	r19,r4
1010c560:	2825883a 	mov	r18,r5
1010c564:	3021883a 	mov	r16,r6
1010c568:	01092e40 	call	101092e4 <__locale_mb_cur_max>
1010c56c:	00c00044 	movi	r3,1
1010c570:	10c03e26 	beq	r2,r3,1010c66c <__fputwc+0x130>
1010c574:	81c01704 	addi	r7,r16,92
1010c578:	900d883a 	mov	r6,r18
1010c57c:	d80b883a 	mov	r5,sp
1010c580:	9809883a 	mov	r4,r19
1010c584:	010c7440 	call	1010c744 <_wcrtomb_r>
1010c588:	1029883a 	mov	r20,r2
1010c58c:	00bfffc4 	movi	r2,-1
1010c590:	a0802026 	beq	r20,r2,1010c614 <__fputwc+0xd8>
1010c594:	d9400003 	ldbu	r5,0(sp)
1010c598:	a0001c26 	beq	r20,zero,1010c60c <__fputwc+0xd0>
1010c59c:	0023883a 	mov	r17,zero
1010c5a0:	05400284 	movi	r21,10
1010c5a4:	00000906 	br	1010c5cc <__fputwc+0x90>
1010c5a8:	80800017 	ldw	r2,0(r16)
1010c5ac:	11400005 	stb	r5,0(r2)
1010c5b0:	80c00017 	ldw	r3,0(r16)
1010c5b4:	18c00044 	addi	r3,r3,1
1010c5b8:	80c00015 	stw	r3,0(r16)
1010c5bc:	8c400044 	addi	r17,r17,1
1010c5c0:	dc45883a 	add	r2,sp,r17
1010c5c4:	8d00112e 	bgeu	r17,r20,1010c60c <__fputwc+0xd0>
1010c5c8:	11400003 	ldbu	r5,0(r2)
1010c5cc:	80c00217 	ldw	r3,8(r16)
1010c5d0:	18ffffc4 	addi	r3,r3,-1
1010c5d4:	80c00215 	stw	r3,8(r16)
1010c5d8:	183ff30e 	bge	r3,zero,1010c5a8 <__alt_data_end+0xfffec5a8>
1010c5dc:	80800617 	ldw	r2,24(r16)
1010c5e0:	18801916 	blt	r3,r2,1010c648 <__fputwc+0x10c>
1010c5e4:	80800017 	ldw	r2,0(r16)
1010c5e8:	11400005 	stb	r5,0(r2)
1010c5ec:	80800017 	ldw	r2,0(r16)
1010c5f0:	10c00003 	ldbu	r3,0(r2)
1010c5f4:	10800044 	addi	r2,r2,1
1010c5f8:	1d402326 	beq	r3,r21,1010c688 <__fputwc+0x14c>
1010c5fc:	80800015 	stw	r2,0(r16)
1010c600:	8c400044 	addi	r17,r17,1
1010c604:	dc45883a 	add	r2,sp,r17
1010c608:	8d3fef36 	bltu	r17,r20,1010c5c8 <__alt_data_end+0xfffec5c8>
1010c60c:	9005883a 	mov	r2,r18
1010c610:	00000406 	br	1010c624 <__fputwc+0xe8>
1010c614:	80c0030b 	ldhu	r3,12(r16)
1010c618:	a005883a 	mov	r2,r20
1010c61c:	18c01014 	ori	r3,r3,64
1010c620:	80c0030d 	sth	r3,12(r16)
1010c624:	dfc00717 	ldw	ra,28(sp)
1010c628:	dd400617 	ldw	r21,24(sp)
1010c62c:	dd000517 	ldw	r20,20(sp)
1010c630:	dcc00417 	ldw	r19,16(sp)
1010c634:	dc800317 	ldw	r18,12(sp)
1010c638:	dc400217 	ldw	r17,8(sp)
1010c63c:	dc000117 	ldw	r16,4(sp)
1010c640:	dec00804 	addi	sp,sp,32
1010c644:	f800283a 	ret
1010c648:	800d883a 	mov	r6,r16
1010c64c:	29403fcc 	andi	r5,r5,255
1010c650:	9809883a 	mov	r4,r19
1010c654:	01070b80 	call	101070b8 <__swbuf_r>
1010c658:	10bfffe0 	cmpeqi	r2,r2,-1
1010c65c:	10803fcc 	andi	r2,r2,255
1010c660:	103fd626 	beq	r2,zero,1010c5bc <__alt_data_end+0xfffec5bc>
1010c664:	00bfffc4 	movi	r2,-1
1010c668:	003fee06 	br	1010c624 <__alt_data_end+0xfffec624>
1010c66c:	90ffffc4 	addi	r3,r18,-1
1010c670:	01003f84 	movi	r4,254
1010c674:	20ffbf36 	bltu	r4,r3,1010c574 <__alt_data_end+0xfffec574>
1010c678:	900b883a 	mov	r5,r18
1010c67c:	dc800005 	stb	r18,0(sp)
1010c680:	1029883a 	mov	r20,r2
1010c684:	003fc506 	br	1010c59c <__alt_data_end+0xfffec59c>
1010c688:	800d883a 	mov	r6,r16
1010c68c:	a80b883a 	mov	r5,r21
1010c690:	9809883a 	mov	r4,r19
1010c694:	01070b80 	call	101070b8 <__swbuf_r>
1010c698:	10bfffe0 	cmpeqi	r2,r2,-1
1010c69c:	003fef06 	br	1010c65c <__alt_data_end+0xfffec65c>

1010c6a0 <_fputwc_r>:
1010c6a0:	3080030b 	ldhu	r2,12(r6)
1010c6a4:	10c8000c 	andi	r3,r2,8192
1010c6a8:	1800051e 	bne	r3,zero,1010c6c0 <_fputwc_r+0x20>
1010c6ac:	30c01917 	ldw	r3,100(r6)
1010c6b0:	10880014 	ori	r2,r2,8192
1010c6b4:	3080030d 	sth	r2,12(r6)
1010c6b8:	18880014 	ori	r2,r3,8192
1010c6bc:	30801915 	stw	r2,100(r6)
1010c6c0:	010c53c1 	jmpi	1010c53c <__fputwc>

1010c6c4 <fputwc>:
1010c6c4:	00840474 	movhi	r2,4113
1010c6c8:	defffc04 	addi	sp,sp,-16
1010c6cc:	10918804 	addi	r2,r2,17952
1010c6d0:	dc000115 	stw	r16,4(sp)
1010c6d4:	14000017 	ldw	r16,0(r2)
1010c6d8:	dc400215 	stw	r17,8(sp)
1010c6dc:	dfc00315 	stw	ra,12(sp)
1010c6e0:	2023883a 	mov	r17,r4
1010c6e4:	80000226 	beq	r16,zero,1010c6f0 <fputwc+0x2c>
1010c6e8:	80800e17 	ldw	r2,56(r16)
1010c6ec:	10001026 	beq	r2,zero,1010c730 <fputwc+0x6c>
1010c6f0:	2880030b 	ldhu	r2,12(r5)
1010c6f4:	10c8000c 	andi	r3,r2,8192
1010c6f8:	1800051e 	bne	r3,zero,1010c710 <fputwc+0x4c>
1010c6fc:	28c01917 	ldw	r3,100(r5)
1010c700:	10880014 	ori	r2,r2,8192
1010c704:	2880030d 	sth	r2,12(r5)
1010c708:	18880014 	ori	r2,r3,8192
1010c70c:	28801915 	stw	r2,100(r5)
1010c710:	280d883a 	mov	r6,r5
1010c714:	8009883a 	mov	r4,r16
1010c718:	880b883a 	mov	r5,r17
1010c71c:	dfc00317 	ldw	ra,12(sp)
1010c720:	dc400217 	ldw	r17,8(sp)
1010c724:	dc000117 	ldw	r16,4(sp)
1010c728:	dec00404 	addi	sp,sp,16
1010c72c:	010c53c1 	jmpi	1010c53c <__fputwc>
1010c730:	8009883a 	mov	r4,r16
1010c734:	d9400015 	stw	r5,0(sp)
1010c738:	0102df80 	call	10102df8 <__sinit>
1010c73c:	d9400017 	ldw	r5,0(sp)
1010c740:	003feb06 	br	1010c6f0 <__alt_data_end+0xfffec6f0>

1010c744 <_wcrtomb_r>:
1010c744:	defff604 	addi	sp,sp,-40
1010c748:	00840474 	movhi	r2,4113
1010c74c:	dc800815 	stw	r18,32(sp)
1010c750:	dc400715 	stw	r17,28(sp)
1010c754:	dc000615 	stw	r16,24(sp)
1010c758:	10918c04 	addi	r2,r2,17968
1010c75c:	dfc00915 	stw	ra,36(sp)
1010c760:	2021883a 	mov	r16,r4
1010c764:	3823883a 	mov	r17,r7
1010c768:	14800017 	ldw	r18,0(r2)
1010c76c:	28001426 	beq	r5,zero,1010c7c0 <_wcrtomb_r+0x7c>
1010c770:	d9400415 	stw	r5,16(sp)
1010c774:	d9800515 	stw	r6,20(sp)
1010c778:	01092d80 	call	101092d8 <__locale_charset>
1010c77c:	d9800517 	ldw	r6,20(sp)
1010c780:	d9400417 	ldw	r5,16(sp)
1010c784:	100f883a 	mov	r7,r2
1010c788:	dc400015 	stw	r17,0(sp)
1010c78c:	8009883a 	mov	r4,r16
1010c790:	903ee83a 	callr	r18
1010c794:	00ffffc4 	movi	r3,-1
1010c798:	10c0031e 	bne	r2,r3,1010c7a8 <_wcrtomb_r+0x64>
1010c79c:	88000015 	stw	zero,0(r17)
1010c7a0:	00c02284 	movi	r3,138
1010c7a4:	80c00015 	stw	r3,0(r16)
1010c7a8:	dfc00917 	ldw	ra,36(sp)
1010c7ac:	dc800817 	ldw	r18,32(sp)
1010c7b0:	dc400717 	ldw	r17,28(sp)
1010c7b4:	dc000617 	ldw	r16,24(sp)
1010c7b8:	dec00a04 	addi	sp,sp,40
1010c7bc:	f800283a 	ret
1010c7c0:	01092d80 	call	101092d8 <__locale_charset>
1010c7c4:	100f883a 	mov	r7,r2
1010c7c8:	dc400015 	stw	r17,0(sp)
1010c7cc:	000d883a 	mov	r6,zero
1010c7d0:	d9400104 	addi	r5,sp,4
1010c7d4:	8009883a 	mov	r4,r16
1010c7d8:	903ee83a 	callr	r18
1010c7dc:	003fed06 	br	1010c794 <__alt_data_end+0xfffec794>

1010c7e0 <wcrtomb>:
1010c7e0:	defff604 	addi	sp,sp,-40
1010c7e4:	00840474 	movhi	r2,4113
1010c7e8:	dc800615 	stw	r18,24(sp)
1010c7ec:	dc400515 	stw	r17,20(sp)
1010c7f0:	10918804 	addi	r2,r2,17952
1010c7f4:	dfc00915 	stw	ra,36(sp)
1010c7f8:	dd000815 	stw	r20,32(sp)
1010c7fc:	dcc00715 	stw	r19,28(sp)
1010c800:	dc000415 	stw	r16,16(sp)
1010c804:	3025883a 	mov	r18,r6
1010c808:	14400017 	ldw	r17,0(r2)
1010c80c:	20001926 	beq	r4,zero,1010c874 <wcrtomb+0x94>
1010c810:	00840474 	movhi	r2,4113
1010c814:	10918c04 	addi	r2,r2,17968
1010c818:	15000017 	ldw	r20,0(r2)
1010c81c:	2021883a 	mov	r16,r4
1010c820:	2827883a 	mov	r19,r5
1010c824:	01092d80 	call	101092d8 <__locale_charset>
1010c828:	100f883a 	mov	r7,r2
1010c82c:	dc800015 	stw	r18,0(sp)
1010c830:	980d883a 	mov	r6,r19
1010c834:	800b883a 	mov	r5,r16
1010c838:	8809883a 	mov	r4,r17
1010c83c:	a03ee83a 	callr	r20
1010c840:	00ffffc4 	movi	r3,-1
1010c844:	10c0031e 	bne	r2,r3,1010c854 <wcrtomb+0x74>
1010c848:	90000015 	stw	zero,0(r18)
1010c84c:	00c02284 	movi	r3,138
1010c850:	88c00015 	stw	r3,0(r17)
1010c854:	dfc00917 	ldw	ra,36(sp)
1010c858:	dd000817 	ldw	r20,32(sp)
1010c85c:	dcc00717 	ldw	r19,28(sp)
1010c860:	dc800617 	ldw	r18,24(sp)
1010c864:	dc400517 	ldw	r17,20(sp)
1010c868:	dc000417 	ldw	r16,16(sp)
1010c86c:	dec00a04 	addi	sp,sp,40
1010c870:	f800283a 	ret
1010c874:	00840474 	movhi	r2,4113
1010c878:	10918c04 	addi	r2,r2,17968
1010c87c:	14000017 	ldw	r16,0(r2)
1010c880:	01092d80 	call	101092d8 <__locale_charset>
1010c884:	100f883a 	mov	r7,r2
1010c888:	dc800015 	stw	r18,0(sp)
1010c88c:	000d883a 	mov	r6,zero
1010c890:	d9400104 	addi	r5,sp,4
1010c894:	8809883a 	mov	r4,r17
1010c898:	803ee83a 	callr	r16
1010c89c:	003fe806 	br	1010c840 <__alt_data_end+0xfffec840>

1010c8a0 <__ascii_wctomb>:
1010c8a0:	28000526 	beq	r5,zero,1010c8b8 <__ascii_wctomb+0x18>
1010c8a4:	00803fc4 	movi	r2,255
1010c8a8:	11800536 	bltu	r2,r6,1010c8c0 <__ascii_wctomb+0x20>
1010c8ac:	29800005 	stb	r6,0(r5)
1010c8b0:	00800044 	movi	r2,1
1010c8b4:	f800283a 	ret
1010c8b8:	0005883a 	mov	r2,zero
1010c8bc:	f800283a 	ret
1010c8c0:	00802284 	movi	r2,138
1010c8c4:	20800015 	stw	r2,0(r4)
1010c8c8:	00bfffc4 	movi	r2,-1
1010c8cc:	f800283a 	ret

1010c8d0 <_wctomb_r>:
1010c8d0:	00840474 	movhi	r2,4113
1010c8d4:	defff904 	addi	sp,sp,-28
1010c8d8:	10918c04 	addi	r2,r2,17968
1010c8dc:	dfc00615 	stw	ra,24(sp)
1010c8e0:	dc400515 	stw	r17,20(sp)
1010c8e4:	dc000415 	stw	r16,16(sp)
1010c8e8:	3823883a 	mov	r17,r7
1010c8ec:	14000017 	ldw	r16,0(r2)
1010c8f0:	d9000115 	stw	r4,4(sp)
1010c8f4:	d9400215 	stw	r5,8(sp)
1010c8f8:	d9800315 	stw	r6,12(sp)
1010c8fc:	01092d80 	call	101092d8 <__locale_charset>
1010c900:	d9800317 	ldw	r6,12(sp)
1010c904:	d9400217 	ldw	r5,8(sp)
1010c908:	d9000117 	ldw	r4,4(sp)
1010c90c:	100f883a 	mov	r7,r2
1010c910:	dc400015 	stw	r17,0(sp)
1010c914:	803ee83a 	callr	r16
1010c918:	dfc00617 	ldw	ra,24(sp)
1010c91c:	dc400517 	ldw	r17,20(sp)
1010c920:	dc000417 	ldw	r16,16(sp)
1010c924:	dec00704 	addi	sp,sp,28
1010c928:	f800283a 	ret

1010c92c <__udivdi3>:
1010c92c:	defff504 	addi	sp,sp,-44
1010c930:	dcc00415 	stw	r19,16(sp)
1010c934:	dc000115 	stw	r16,4(sp)
1010c938:	dfc00a15 	stw	ra,40(sp)
1010c93c:	df000915 	stw	fp,36(sp)
1010c940:	ddc00815 	stw	r23,32(sp)
1010c944:	dd800715 	stw	r22,28(sp)
1010c948:	dd400615 	stw	r21,24(sp)
1010c94c:	dd000515 	stw	r20,20(sp)
1010c950:	dc800315 	stw	r18,12(sp)
1010c954:	dc400215 	stw	r17,8(sp)
1010c958:	2027883a 	mov	r19,r4
1010c95c:	2821883a 	mov	r16,r5
1010c960:	3800411e 	bne	r7,zero,1010ca68 <__udivdi3+0x13c>
1010c964:	3023883a 	mov	r17,r6
1010c968:	2025883a 	mov	r18,r4
1010c96c:	2980522e 	bgeu	r5,r6,1010cab8 <__udivdi3+0x18c>
1010c970:	00bfffd4 	movui	r2,65535
1010c974:	282d883a 	mov	r22,r5
1010c978:	1180a836 	bltu	r2,r6,1010cc1c <__udivdi3+0x2f0>
1010c97c:	00803fc4 	movi	r2,255
1010c980:	1185803a 	cmpltu	r2,r2,r6
1010c984:	100490fa 	slli	r2,r2,3
1010c988:	3086d83a 	srl	r3,r6,r2
1010c98c:	01040474 	movhi	r4,4113
1010c990:	210a8204 	addi	r4,r4,10760
1010c994:	20c7883a 	add	r3,r4,r3
1010c998:	18c00003 	ldbu	r3,0(r3)
1010c99c:	1885883a 	add	r2,r3,r2
1010c9a0:	00c00804 	movi	r3,32
1010c9a4:	1887c83a 	sub	r3,r3,r2
1010c9a8:	18000526 	beq	r3,zero,1010c9c0 <__udivdi3+0x94>
1010c9ac:	80e0983a 	sll	r16,r16,r3
1010c9b0:	9884d83a 	srl	r2,r19,r2
1010c9b4:	30e2983a 	sll	r17,r6,r3
1010c9b8:	98e4983a 	sll	r18,r19,r3
1010c9bc:	142cb03a 	or	r22,r2,r16
1010c9c0:	882ad43a 	srli	r21,r17,16
1010c9c4:	b009883a 	mov	r4,r22
1010c9c8:	8d3fffcc 	andi	r20,r17,65535
1010c9cc:	a80b883a 	mov	r5,r21
1010c9d0:	01026a40 	call	101026a4 <__umodsi3>
1010c9d4:	b009883a 	mov	r4,r22
1010c9d8:	a80b883a 	mov	r5,r21
1010c9dc:	1027883a 	mov	r19,r2
1010c9e0:	01026400 	call	10102640 <__udivsi3>
1010c9e4:	102d883a 	mov	r22,r2
1010c9e8:	9826943a 	slli	r19,r19,16
1010c9ec:	9004d43a 	srli	r2,r18,16
1010c9f0:	a5a1383a 	mul	r16,r20,r22
1010c9f4:	14c4b03a 	or	r2,r2,r19
1010c9f8:	1400052e 	bgeu	r2,r16,1010ca10 <__udivdi3+0xe4>
1010c9fc:	1445883a 	add	r2,r2,r17
1010ca00:	b0ffffc4 	addi	r3,r22,-1
1010ca04:	14400136 	bltu	r2,r17,1010ca0c <__udivdi3+0xe0>
1010ca08:	14012336 	bltu	r2,r16,1010ce98 <__udivdi3+0x56c>
1010ca0c:	182d883a 	mov	r22,r3
1010ca10:	1421c83a 	sub	r16,r2,r16
1010ca14:	a80b883a 	mov	r5,r21
1010ca18:	8009883a 	mov	r4,r16
1010ca1c:	01026a40 	call	101026a4 <__umodsi3>
1010ca20:	1027883a 	mov	r19,r2
1010ca24:	a80b883a 	mov	r5,r21
1010ca28:	8009883a 	mov	r4,r16
1010ca2c:	01026400 	call	10102640 <__udivsi3>
1010ca30:	9826943a 	slli	r19,r19,16
1010ca34:	a0a9383a 	mul	r20,r20,r2
1010ca38:	94bfffcc 	andi	r18,r18,65535
1010ca3c:	94e4b03a 	or	r18,r18,r19
1010ca40:	9500052e 	bgeu	r18,r20,1010ca58 <__udivdi3+0x12c>
1010ca44:	8ca5883a 	add	r18,r17,r18
1010ca48:	10ffffc4 	addi	r3,r2,-1
1010ca4c:	9440f136 	bltu	r18,r17,1010ce14 <__udivdi3+0x4e8>
1010ca50:	9500f02e 	bgeu	r18,r20,1010ce14 <__udivdi3+0x4e8>
1010ca54:	10bfff84 	addi	r2,r2,-2
1010ca58:	b00c943a 	slli	r6,r22,16
1010ca5c:	0007883a 	mov	r3,zero
1010ca60:	3084b03a 	or	r2,r6,r2
1010ca64:	00005906 	br	1010cbcc <__udivdi3+0x2a0>
1010ca68:	29c05636 	bltu	r5,r7,1010cbc4 <__udivdi3+0x298>
1010ca6c:	00bfffd4 	movui	r2,65535
1010ca70:	11c0622e 	bgeu	r2,r7,1010cbfc <__udivdi3+0x2d0>
1010ca74:	00804034 	movhi	r2,256
1010ca78:	10bfffc4 	addi	r2,r2,-1
1010ca7c:	11c0ee36 	bltu	r2,r7,1010ce38 <__udivdi3+0x50c>
1010ca80:	00800404 	movi	r2,16
1010ca84:	3886d83a 	srl	r3,r7,r2
1010ca88:	01040474 	movhi	r4,4113
1010ca8c:	210a8204 	addi	r4,r4,10760
1010ca90:	20c7883a 	add	r3,r4,r3
1010ca94:	18c00003 	ldbu	r3,0(r3)
1010ca98:	05400804 	movi	r21,32
1010ca9c:	1885883a 	add	r2,r3,r2
1010caa0:	a8abc83a 	sub	r21,r21,r2
1010caa4:	a800621e 	bne	r21,zero,1010cc30 <__udivdi3+0x304>
1010caa8:	3c00e936 	bltu	r7,r16,1010ce50 <__udivdi3+0x524>
1010caac:	9985403a 	cmpgeu	r2,r19,r6
1010cab0:	0007883a 	mov	r3,zero
1010cab4:	00004506 	br	1010cbcc <__udivdi3+0x2a0>
1010cab8:	3000041e 	bne	r6,zero,1010cacc <__udivdi3+0x1a0>
1010cabc:	000b883a 	mov	r5,zero
1010cac0:	01000044 	movi	r4,1
1010cac4:	01026400 	call	10102640 <__udivsi3>
1010cac8:	1023883a 	mov	r17,r2
1010cacc:	00bfffd4 	movui	r2,65535
1010cad0:	14404e2e 	bgeu	r2,r17,1010cc0c <__udivdi3+0x2e0>
1010cad4:	00804034 	movhi	r2,256
1010cad8:	10bfffc4 	addi	r2,r2,-1
1010cadc:	1440d836 	bltu	r2,r17,1010ce40 <__udivdi3+0x514>
1010cae0:	00800404 	movi	r2,16
1010cae4:	8886d83a 	srl	r3,r17,r2
1010cae8:	01040474 	movhi	r4,4113
1010caec:	210a8204 	addi	r4,r4,10760
1010caf0:	20c7883a 	add	r3,r4,r3
1010caf4:	18c00003 	ldbu	r3,0(r3)
1010caf8:	1885883a 	add	r2,r3,r2
1010cafc:	00c00804 	movi	r3,32
1010cb00:	1887c83a 	sub	r3,r3,r2
1010cb04:	18008f1e 	bne	r3,zero,1010cd44 <__udivdi3+0x418>
1010cb08:	882ad43a 	srli	r21,r17,16
1010cb0c:	8461c83a 	sub	r16,r16,r17
1010cb10:	8d3fffcc 	andi	r20,r17,65535
1010cb14:	00c00044 	movi	r3,1
1010cb18:	8009883a 	mov	r4,r16
1010cb1c:	a80b883a 	mov	r5,r21
1010cb20:	d8c00015 	stw	r3,0(sp)
1010cb24:	01026a40 	call	101026a4 <__umodsi3>
1010cb28:	8009883a 	mov	r4,r16
1010cb2c:	a80b883a 	mov	r5,r21
1010cb30:	1027883a 	mov	r19,r2
1010cb34:	01026400 	call	10102640 <__udivsi3>
1010cb38:	9826943a 	slli	r19,r19,16
1010cb3c:	9008d43a 	srli	r4,r18,16
1010cb40:	1521383a 	mul	r16,r2,r20
1010cb44:	102d883a 	mov	r22,r2
1010cb48:	24c8b03a 	or	r4,r4,r19
1010cb4c:	d8c00017 	ldw	r3,0(sp)
1010cb50:	2400052e 	bgeu	r4,r16,1010cb68 <__udivdi3+0x23c>
1010cb54:	2449883a 	add	r4,r4,r17
1010cb58:	b0bfffc4 	addi	r2,r22,-1
1010cb5c:	24400136 	bltu	r4,r17,1010cb64 <__udivdi3+0x238>
1010cb60:	2400ca36 	bltu	r4,r16,1010ce8c <__udivdi3+0x560>
1010cb64:	102d883a 	mov	r22,r2
1010cb68:	2421c83a 	sub	r16,r4,r16
1010cb6c:	a80b883a 	mov	r5,r21
1010cb70:	8009883a 	mov	r4,r16
1010cb74:	d8c00015 	stw	r3,0(sp)
1010cb78:	01026a40 	call	101026a4 <__umodsi3>
1010cb7c:	1027883a 	mov	r19,r2
1010cb80:	a80b883a 	mov	r5,r21
1010cb84:	8009883a 	mov	r4,r16
1010cb88:	01026400 	call	10102640 <__udivsi3>
1010cb8c:	9826943a 	slli	r19,r19,16
1010cb90:	1529383a 	mul	r20,r2,r20
1010cb94:	94bfffcc 	andi	r18,r18,65535
1010cb98:	94e4b03a 	or	r18,r18,r19
1010cb9c:	d8c00017 	ldw	r3,0(sp)
1010cba0:	9500052e 	bgeu	r18,r20,1010cbb8 <__udivdi3+0x28c>
1010cba4:	8ca5883a 	add	r18,r17,r18
1010cba8:	113fffc4 	addi	r4,r2,-1
1010cbac:	94409736 	bltu	r18,r17,1010ce0c <__udivdi3+0x4e0>
1010cbb0:	9500962e 	bgeu	r18,r20,1010ce0c <__udivdi3+0x4e0>
1010cbb4:	10bfff84 	addi	r2,r2,-2
1010cbb8:	b00c943a 	slli	r6,r22,16
1010cbbc:	3084b03a 	or	r2,r6,r2
1010cbc0:	00000206 	br	1010cbcc <__udivdi3+0x2a0>
1010cbc4:	0007883a 	mov	r3,zero
1010cbc8:	0005883a 	mov	r2,zero
1010cbcc:	dfc00a17 	ldw	ra,40(sp)
1010cbd0:	df000917 	ldw	fp,36(sp)
1010cbd4:	ddc00817 	ldw	r23,32(sp)
1010cbd8:	dd800717 	ldw	r22,28(sp)
1010cbdc:	dd400617 	ldw	r21,24(sp)
1010cbe0:	dd000517 	ldw	r20,20(sp)
1010cbe4:	dcc00417 	ldw	r19,16(sp)
1010cbe8:	dc800317 	ldw	r18,12(sp)
1010cbec:	dc400217 	ldw	r17,8(sp)
1010cbf0:	dc000117 	ldw	r16,4(sp)
1010cbf4:	dec00b04 	addi	sp,sp,44
1010cbf8:	f800283a 	ret
1010cbfc:	00803fc4 	movi	r2,255
1010cc00:	11c5803a 	cmpltu	r2,r2,r7
1010cc04:	100490fa 	slli	r2,r2,3
1010cc08:	003f9e06 	br	1010ca84 <__alt_data_end+0xfffeca84>
1010cc0c:	00803fc4 	movi	r2,255
1010cc10:	1445803a 	cmpltu	r2,r2,r17
1010cc14:	100490fa 	slli	r2,r2,3
1010cc18:	003fb206 	br	1010cae4 <__alt_data_end+0xfffecae4>
1010cc1c:	00804034 	movhi	r2,256
1010cc20:	10bfffc4 	addi	r2,r2,-1
1010cc24:	11808836 	bltu	r2,r6,1010ce48 <__udivdi3+0x51c>
1010cc28:	00800404 	movi	r2,16
1010cc2c:	003f5606 	br	1010c988 <__alt_data_end+0xfffec988>
1010cc30:	30aed83a 	srl	r23,r6,r2
1010cc34:	3d4e983a 	sll	r7,r7,r21
1010cc38:	80acd83a 	srl	r22,r16,r2
1010cc3c:	9884d83a 	srl	r2,r19,r2
1010cc40:	3deeb03a 	or	r23,r7,r23
1010cc44:	b824d43a 	srli	r18,r23,16
1010cc48:	8560983a 	sll	r16,r16,r21
1010cc4c:	b009883a 	mov	r4,r22
1010cc50:	900b883a 	mov	r5,r18
1010cc54:	3568983a 	sll	r20,r6,r21
1010cc58:	1420b03a 	or	r16,r2,r16
1010cc5c:	01026a40 	call	101026a4 <__umodsi3>
1010cc60:	b009883a 	mov	r4,r22
1010cc64:	900b883a 	mov	r5,r18
1010cc68:	1023883a 	mov	r17,r2
1010cc6c:	01026400 	call	10102640 <__udivsi3>
1010cc70:	8808943a 	slli	r4,r17,16
1010cc74:	bf3fffcc 	andi	fp,r23,65535
1010cc78:	8006d43a 	srli	r3,r16,16
1010cc7c:	e0a3383a 	mul	r17,fp,r2
1010cc80:	100d883a 	mov	r6,r2
1010cc84:	1906b03a 	or	r3,r3,r4
1010cc88:	1c40042e 	bgeu	r3,r17,1010cc9c <__udivdi3+0x370>
1010cc8c:	1dc7883a 	add	r3,r3,r23
1010cc90:	10bfffc4 	addi	r2,r2,-1
1010cc94:	1dc0752e 	bgeu	r3,r23,1010ce6c <__udivdi3+0x540>
1010cc98:	100d883a 	mov	r6,r2
1010cc9c:	1c63c83a 	sub	r17,r3,r17
1010cca0:	900b883a 	mov	r5,r18
1010cca4:	8809883a 	mov	r4,r17
1010cca8:	d9800015 	stw	r6,0(sp)
1010ccac:	01026a40 	call	101026a4 <__umodsi3>
1010ccb0:	102d883a 	mov	r22,r2
1010ccb4:	8809883a 	mov	r4,r17
1010ccb8:	900b883a 	mov	r5,r18
1010ccbc:	01026400 	call	10102640 <__udivsi3>
1010ccc0:	b02c943a 	slli	r22,r22,16
1010ccc4:	e089383a 	mul	r4,fp,r2
1010ccc8:	843fffcc 	andi	r16,r16,65535
1010cccc:	85a0b03a 	or	r16,r16,r22
1010ccd0:	d9800017 	ldw	r6,0(sp)
1010ccd4:	8100042e 	bgeu	r16,r4,1010cce8 <__udivdi3+0x3bc>
1010ccd8:	85e1883a 	add	r16,r16,r23
1010ccdc:	10ffffc4 	addi	r3,r2,-1
1010cce0:	85c05e2e 	bgeu	r16,r23,1010ce5c <__udivdi3+0x530>
1010cce4:	1805883a 	mov	r2,r3
1010cce8:	300c943a 	slli	r6,r6,16
1010ccec:	a17fffcc 	andi	r5,r20,65535
1010ccf0:	a028d43a 	srli	r20,r20,16
1010ccf4:	3084b03a 	or	r2,r6,r2
1010ccf8:	10ffffcc 	andi	r3,r2,65535
1010ccfc:	100cd43a 	srli	r6,r2,16
1010cd00:	194f383a 	mul	r7,r3,r5
1010cd04:	1d07383a 	mul	r3,r3,r20
1010cd08:	314b383a 	mul	r5,r6,r5
1010cd0c:	3810d43a 	srli	r8,r7,16
1010cd10:	8121c83a 	sub	r16,r16,r4
1010cd14:	1947883a 	add	r3,r3,r5
1010cd18:	40c7883a 	add	r3,r8,r3
1010cd1c:	350d383a 	mul	r6,r6,r20
1010cd20:	1940022e 	bgeu	r3,r5,1010cd2c <__udivdi3+0x400>
1010cd24:	01000074 	movhi	r4,1
1010cd28:	310d883a 	add	r6,r6,r4
1010cd2c:	1828d43a 	srli	r20,r3,16
1010cd30:	a18d883a 	add	r6,r20,r6
1010cd34:	81803e36 	bltu	r16,r6,1010ce30 <__udivdi3+0x504>
1010cd38:	81803826 	beq	r16,r6,1010ce1c <__udivdi3+0x4f0>
1010cd3c:	0007883a 	mov	r3,zero
1010cd40:	003fa206 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010cd44:	88e2983a 	sll	r17,r17,r3
1010cd48:	80a8d83a 	srl	r20,r16,r2
1010cd4c:	80e0983a 	sll	r16,r16,r3
1010cd50:	882ad43a 	srli	r21,r17,16
1010cd54:	9884d83a 	srl	r2,r19,r2
1010cd58:	a009883a 	mov	r4,r20
1010cd5c:	a80b883a 	mov	r5,r21
1010cd60:	142eb03a 	or	r23,r2,r16
1010cd64:	98e4983a 	sll	r18,r19,r3
1010cd68:	01026a40 	call	101026a4 <__umodsi3>
1010cd6c:	a009883a 	mov	r4,r20
1010cd70:	a80b883a 	mov	r5,r21
1010cd74:	1021883a 	mov	r16,r2
1010cd78:	01026400 	call	10102640 <__udivsi3>
1010cd7c:	1039883a 	mov	fp,r2
1010cd80:	8d3fffcc 	andi	r20,r17,65535
1010cd84:	8020943a 	slli	r16,r16,16
1010cd88:	b804d43a 	srli	r2,r23,16
1010cd8c:	a72d383a 	mul	r22,r20,fp
1010cd90:	1404b03a 	or	r2,r2,r16
1010cd94:	1580062e 	bgeu	r2,r22,1010cdb0 <__udivdi3+0x484>
1010cd98:	1445883a 	add	r2,r2,r17
1010cd9c:	e0ffffc4 	addi	r3,fp,-1
1010cda0:	14403836 	bltu	r2,r17,1010ce84 <__udivdi3+0x558>
1010cda4:	1580372e 	bgeu	r2,r22,1010ce84 <__udivdi3+0x558>
1010cda8:	e73fff84 	addi	fp,fp,-2
1010cdac:	1445883a 	add	r2,r2,r17
1010cdb0:	15adc83a 	sub	r22,r2,r22
1010cdb4:	a80b883a 	mov	r5,r21
1010cdb8:	b009883a 	mov	r4,r22
1010cdbc:	01026a40 	call	101026a4 <__umodsi3>
1010cdc0:	1027883a 	mov	r19,r2
1010cdc4:	b009883a 	mov	r4,r22
1010cdc8:	a80b883a 	mov	r5,r21
1010cdcc:	01026400 	call	10102640 <__udivsi3>
1010cdd0:	9826943a 	slli	r19,r19,16
1010cdd4:	a0a1383a 	mul	r16,r20,r2
1010cdd8:	b93fffcc 	andi	r4,r23,65535
1010cddc:	24c8b03a 	or	r4,r4,r19
1010cde0:	2400062e 	bgeu	r4,r16,1010cdfc <__udivdi3+0x4d0>
1010cde4:	2449883a 	add	r4,r4,r17
1010cde8:	10ffffc4 	addi	r3,r2,-1
1010cdec:	24402336 	bltu	r4,r17,1010ce7c <__udivdi3+0x550>
1010cdf0:	2400222e 	bgeu	r4,r16,1010ce7c <__udivdi3+0x550>
1010cdf4:	10bfff84 	addi	r2,r2,-2
1010cdf8:	2449883a 	add	r4,r4,r17
1010cdfc:	e038943a 	slli	fp,fp,16
1010ce00:	2421c83a 	sub	r16,r4,r16
1010ce04:	e086b03a 	or	r3,fp,r2
1010ce08:	003f4306 	br	1010cb18 <__alt_data_end+0xfffecb18>
1010ce0c:	2005883a 	mov	r2,r4
1010ce10:	003f6906 	br	1010cbb8 <__alt_data_end+0xfffecbb8>
1010ce14:	1805883a 	mov	r2,r3
1010ce18:	003f0f06 	br	1010ca58 <__alt_data_end+0xfffeca58>
1010ce1c:	1806943a 	slli	r3,r3,16
1010ce20:	9d66983a 	sll	r19,r19,r21
1010ce24:	39ffffcc 	andi	r7,r7,65535
1010ce28:	19c7883a 	add	r3,r3,r7
1010ce2c:	98ffc32e 	bgeu	r19,r3,1010cd3c <__alt_data_end+0xfffecd3c>
1010ce30:	10bfffc4 	addi	r2,r2,-1
1010ce34:	003fc106 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010ce38:	00800604 	movi	r2,24
1010ce3c:	003f1106 	br	1010ca84 <__alt_data_end+0xfffeca84>
1010ce40:	00800604 	movi	r2,24
1010ce44:	003f2706 	br	1010cae4 <__alt_data_end+0xfffecae4>
1010ce48:	00800604 	movi	r2,24
1010ce4c:	003ece06 	br	1010c988 <__alt_data_end+0xfffec988>
1010ce50:	0007883a 	mov	r3,zero
1010ce54:	00800044 	movi	r2,1
1010ce58:	003f5c06 	br	1010cbcc <__alt_data_end+0xfffecbcc>
1010ce5c:	813fa12e 	bgeu	r16,r4,1010cce4 <__alt_data_end+0xfffecce4>
1010ce60:	10bfff84 	addi	r2,r2,-2
1010ce64:	85e1883a 	add	r16,r16,r23
1010ce68:	003f9f06 	br	1010cce8 <__alt_data_end+0xfffecce8>
1010ce6c:	1c7f8a2e 	bgeu	r3,r17,1010cc98 <__alt_data_end+0xfffecc98>
1010ce70:	31bfff84 	addi	r6,r6,-2
1010ce74:	1dc7883a 	add	r3,r3,r23
1010ce78:	003f8806 	br	1010cc9c <__alt_data_end+0xfffecc9c>
1010ce7c:	1805883a 	mov	r2,r3
1010ce80:	003fde06 	br	1010cdfc <__alt_data_end+0xfffecdfc>
1010ce84:	1839883a 	mov	fp,r3
1010ce88:	003fc906 	br	1010cdb0 <__alt_data_end+0xfffecdb0>
1010ce8c:	b5bfff84 	addi	r22,r22,-2
1010ce90:	2449883a 	add	r4,r4,r17
1010ce94:	003f3406 	br	1010cb68 <__alt_data_end+0xfffecb68>
1010ce98:	b5bfff84 	addi	r22,r22,-2
1010ce9c:	1445883a 	add	r2,r2,r17
1010cea0:	003edb06 	br	1010ca10 <__alt_data_end+0xfffeca10>

1010cea4 <__umoddi3>:
1010cea4:	defff404 	addi	sp,sp,-48
1010cea8:	df000a15 	stw	fp,40(sp)
1010ceac:	dc400315 	stw	r17,12(sp)
1010ceb0:	dc000215 	stw	r16,8(sp)
1010ceb4:	dfc00b15 	stw	ra,44(sp)
1010ceb8:	ddc00915 	stw	r23,36(sp)
1010cebc:	dd800815 	stw	r22,32(sp)
1010cec0:	dd400715 	stw	r21,28(sp)
1010cec4:	dd000615 	stw	r20,24(sp)
1010cec8:	dcc00515 	stw	r19,20(sp)
1010cecc:	dc800415 	stw	r18,16(sp)
1010ced0:	2021883a 	mov	r16,r4
1010ced4:	2823883a 	mov	r17,r5
1010ced8:	2839883a 	mov	fp,r5
1010cedc:	38003c1e 	bne	r7,zero,1010cfd0 <__umoddi3+0x12c>
1010cee0:	3027883a 	mov	r19,r6
1010cee4:	2029883a 	mov	r20,r4
1010cee8:	2980512e 	bgeu	r5,r6,1010d030 <__umoddi3+0x18c>
1010ceec:	00bfffd4 	movui	r2,65535
1010cef0:	11809a36 	bltu	r2,r6,1010d15c <__umoddi3+0x2b8>
1010cef4:	01003fc4 	movi	r4,255
1010cef8:	2189803a 	cmpltu	r4,r4,r6
1010cefc:	200890fa 	slli	r4,r4,3
1010cf00:	3104d83a 	srl	r2,r6,r4
1010cf04:	00c40474 	movhi	r3,4113
1010cf08:	18ca8204 	addi	r3,r3,10760
1010cf0c:	1885883a 	add	r2,r3,r2
1010cf10:	10c00003 	ldbu	r3,0(r2)
1010cf14:	00800804 	movi	r2,32
1010cf18:	1909883a 	add	r4,r3,r4
1010cf1c:	1125c83a 	sub	r18,r2,r4
1010cf20:	90000526 	beq	r18,zero,1010cf38 <__umoddi3+0x94>
1010cf24:	8ca2983a 	sll	r17,r17,r18
1010cf28:	8108d83a 	srl	r4,r16,r4
1010cf2c:	34a6983a 	sll	r19,r6,r18
1010cf30:	84a8983a 	sll	r20,r16,r18
1010cf34:	2478b03a 	or	fp,r4,r17
1010cf38:	982ed43a 	srli	r23,r19,16
1010cf3c:	e009883a 	mov	r4,fp
1010cf40:	9dbfffcc 	andi	r22,r19,65535
1010cf44:	b80b883a 	mov	r5,r23
1010cf48:	01026a40 	call	101026a4 <__umodsi3>
1010cf4c:	e009883a 	mov	r4,fp
1010cf50:	b80b883a 	mov	r5,r23
1010cf54:	102b883a 	mov	r21,r2
1010cf58:	01026400 	call	10102640 <__udivsi3>
1010cf5c:	a806943a 	slli	r3,r21,16
1010cf60:	a008d43a 	srli	r4,r20,16
1010cf64:	b085383a 	mul	r2,r22,r2
1010cf68:	20c8b03a 	or	r4,r4,r3
1010cf6c:	2080032e 	bgeu	r4,r2,1010cf7c <__umoddi3+0xd8>
1010cf70:	24c9883a 	add	r4,r4,r19
1010cf74:	24c00136 	bltu	r4,r19,1010cf7c <__umoddi3+0xd8>
1010cf78:	20811036 	bltu	r4,r2,1010d3bc <__umoddi3+0x518>
1010cf7c:	20abc83a 	sub	r21,r4,r2
1010cf80:	b80b883a 	mov	r5,r23
1010cf84:	a809883a 	mov	r4,r21
1010cf88:	01026a40 	call	101026a4 <__umodsi3>
1010cf8c:	1023883a 	mov	r17,r2
1010cf90:	b80b883a 	mov	r5,r23
1010cf94:	a809883a 	mov	r4,r21
1010cf98:	01026400 	call	10102640 <__udivsi3>
1010cf9c:	8822943a 	slli	r17,r17,16
1010cfa0:	b085383a 	mul	r2,r22,r2
1010cfa4:	a0ffffcc 	andi	r3,r20,65535
1010cfa8:	1c46b03a 	or	r3,r3,r17
1010cfac:	1880042e 	bgeu	r3,r2,1010cfc0 <__umoddi3+0x11c>
1010cfb0:	1cc7883a 	add	r3,r3,r19
1010cfb4:	1cc00236 	bltu	r3,r19,1010cfc0 <__umoddi3+0x11c>
1010cfb8:	1880012e 	bgeu	r3,r2,1010cfc0 <__umoddi3+0x11c>
1010cfbc:	1cc7883a 	add	r3,r3,r19
1010cfc0:	1885c83a 	sub	r2,r3,r2
1010cfc4:	1484d83a 	srl	r2,r2,r18
1010cfc8:	0007883a 	mov	r3,zero
1010cfcc:	00004f06 	br	1010d10c <__umoddi3+0x268>
1010cfd0:	29c04c36 	bltu	r5,r7,1010d104 <__umoddi3+0x260>
1010cfd4:	00bfffd4 	movui	r2,65535
1010cfd8:	11c0582e 	bgeu	r2,r7,1010d13c <__umoddi3+0x298>
1010cfdc:	00804034 	movhi	r2,256
1010cfe0:	10bfffc4 	addi	r2,r2,-1
1010cfe4:	11c0e736 	bltu	r2,r7,1010d384 <__umoddi3+0x4e0>
1010cfe8:	01000404 	movi	r4,16
1010cfec:	3904d83a 	srl	r2,r7,r4
1010cff0:	00c40474 	movhi	r3,4113
1010cff4:	18ca8204 	addi	r3,r3,10760
1010cff8:	1885883a 	add	r2,r3,r2
1010cffc:	14c00003 	ldbu	r19,0(r2)
1010d000:	00c00804 	movi	r3,32
1010d004:	9927883a 	add	r19,r19,r4
1010d008:	1ce9c83a 	sub	r20,r3,r19
1010d00c:	a000581e 	bne	r20,zero,1010d170 <__umoddi3+0x2cc>
1010d010:	3c400136 	bltu	r7,r17,1010d018 <__umoddi3+0x174>
1010d014:	8180eb36 	bltu	r16,r6,1010d3c4 <__umoddi3+0x520>
1010d018:	8185c83a 	sub	r2,r16,r6
1010d01c:	89e3c83a 	sub	r17,r17,r7
1010d020:	8089803a 	cmpltu	r4,r16,r2
1010d024:	8939c83a 	sub	fp,r17,r4
1010d028:	e007883a 	mov	r3,fp
1010d02c:	00003706 	br	1010d10c <__umoddi3+0x268>
1010d030:	3000041e 	bne	r6,zero,1010d044 <__umoddi3+0x1a0>
1010d034:	000b883a 	mov	r5,zero
1010d038:	01000044 	movi	r4,1
1010d03c:	01026400 	call	10102640 <__udivsi3>
1010d040:	1027883a 	mov	r19,r2
1010d044:	00bfffd4 	movui	r2,65535
1010d048:	14c0402e 	bgeu	r2,r19,1010d14c <__umoddi3+0x2a8>
1010d04c:	00804034 	movhi	r2,256
1010d050:	10bfffc4 	addi	r2,r2,-1
1010d054:	14c0cd36 	bltu	r2,r19,1010d38c <__umoddi3+0x4e8>
1010d058:	00800404 	movi	r2,16
1010d05c:	9886d83a 	srl	r3,r19,r2
1010d060:	01040474 	movhi	r4,4113
1010d064:	210a8204 	addi	r4,r4,10760
1010d068:	20c7883a 	add	r3,r4,r3
1010d06c:	18c00003 	ldbu	r3,0(r3)
1010d070:	1887883a 	add	r3,r3,r2
1010d074:	00800804 	movi	r2,32
1010d078:	10e5c83a 	sub	r18,r2,r3
1010d07c:	9000901e 	bne	r18,zero,1010d2c0 <__umoddi3+0x41c>
1010d080:	982cd43a 	srli	r22,r19,16
1010d084:	8ce3c83a 	sub	r17,r17,r19
1010d088:	9d7fffcc 	andi	r21,r19,65535
1010d08c:	b00b883a 	mov	r5,r22
1010d090:	8809883a 	mov	r4,r17
1010d094:	01026a40 	call	101026a4 <__umodsi3>
1010d098:	8809883a 	mov	r4,r17
1010d09c:	b00b883a 	mov	r5,r22
1010d0a0:	1021883a 	mov	r16,r2
1010d0a4:	01026400 	call	10102640 <__udivsi3>
1010d0a8:	8006943a 	slli	r3,r16,16
1010d0ac:	a008d43a 	srli	r4,r20,16
1010d0b0:	1545383a 	mul	r2,r2,r21
1010d0b4:	20c8b03a 	or	r4,r4,r3
1010d0b8:	2080042e 	bgeu	r4,r2,1010d0cc <__umoddi3+0x228>
1010d0bc:	24c9883a 	add	r4,r4,r19
1010d0c0:	24c00236 	bltu	r4,r19,1010d0cc <__umoddi3+0x228>
1010d0c4:	2080012e 	bgeu	r4,r2,1010d0cc <__umoddi3+0x228>
1010d0c8:	24c9883a 	add	r4,r4,r19
1010d0cc:	20a1c83a 	sub	r16,r4,r2
1010d0d0:	b00b883a 	mov	r5,r22
1010d0d4:	8009883a 	mov	r4,r16
1010d0d8:	01026a40 	call	101026a4 <__umodsi3>
1010d0dc:	1023883a 	mov	r17,r2
1010d0e0:	b00b883a 	mov	r5,r22
1010d0e4:	8009883a 	mov	r4,r16
1010d0e8:	01026400 	call	10102640 <__udivsi3>
1010d0ec:	8822943a 	slli	r17,r17,16
1010d0f0:	1545383a 	mul	r2,r2,r21
1010d0f4:	a53fffcc 	andi	r20,r20,65535
1010d0f8:	a446b03a 	or	r3,r20,r17
1010d0fc:	18bfb02e 	bgeu	r3,r2,1010cfc0 <__alt_data_end+0xfffecfc0>
1010d100:	003fab06 	br	1010cfb0 <__alt_data_end+0xfffecfb0>
1010d104:	2005883a 	mov	r2,r4
1010d108:	2807883a 	mov	r3,r5
1010d10c:	dfc00b17 	ldw	ra,44(sp)
1010d110:	df000a17 	ldw	fp,40(sp)
1010d114:	ddc00917 	ldw	r23,36(sp)
1010d118:	dd800817 	ldw	r22,32(sp)
1010d11c:	dd400717 	ldw	r21,28(sp)
1010d120:	dd000617 	ldw	r20,24(sp)
1010d124:	dcc00517 	ldw	r19,20(sp)
1010d128:	dc800417 	ldw	r18,16(sp)
1010d12c:	dc400317 	ldw	r17,12(sp)
1010d130:	dc000217 	ldw	r16,8(sp)
1010d134:	dec00c04 	addi	sp,sp,48
1010d138:	f800283a 	ret
1010d13c:	04c03fc4 	movi	r19,255
1010d140:	99c9803a 	cmpltu	r4,r19,r7
1010d144:	200890fa 	slli	r4,r4,3
1010d148:	003fa806 	br	1010cfec <__alt_data_end+0xfffecfec>
1010d14c:	00803fc4 	movi	r2,255
1010d150:	14c5803a 	cmpltu	r2,r2,r19
1010d154:	100490fa 	slli	r2,r2,3
1010d158:	003fc006 	br	1010d05c <__alt_data_end+0xfffed05c>
1010d15c:	00804034 	movhi	r2,256
1010d160:	10bfffc4 	addi	r2,r2,-1
1010d164:	11808b36 	bltu	r2,r6,1010d394 <__umoddi3+0x4f0>
1010d168:	01000404 	movi	r4,16
1010d16c:	003f6406 	br	1010cf00 <__alt_data_end+0xfffecf00>
1010d170:	34c4d83a 	srl	r2,r6,r19
1010d174:	3d0e983a 	sll	r7,r7,r20
1010d178:	8cf8d83a 	srl	fp,r17,r19
1010d17c:	8d10983a 	sll	r8,r17,r20
1010d180:	38aab03a 	or	r21,r7,r2
1010d184:	a82cd43a 	srli	r22,r21,16
1010d188:	84e2d83a 	srl	r17,r16,r19
1010d18c:	e009883a 	mov	r4,fp
1010d190:	b00b883a 	mov	r5,r22
1010d194:	8a22b03a 	or	r17,r17,r8
1010d198:	3524983a 	sll	r18,r6,r20
1010d19c:	01026a40 	call	101026a4 <__umodsi3>
1010d1a0:	e009883a 	mov	r4,fp
1010d1a4:	b00b883a 	mov	r5,r22
1010d1a8:	102f883a 	mov	r23,r2
1010d1ac:	01026400 	call	10102640 <__udivsi3>
1010d1b0:	100d883a 	mov	r6,r2
1010d1b4:	b808943a 	slli	r4,r23,16
1010d1b8:	aa3fffcc 	andi	r8,r21,65535
1010d1bc:	8804d43a 	srli	r2,r17,16
1010d1c0:	41af383a 	mul	r23,r8,r6
1010d1c4:	8520983a 	sll	r16,r16,r20
1010d1c8:	1104b03a 	or	r2,r2,r4
1010d1cc:	15c0042e 	bgeu	r2,r23,1010d1e0 <__umoddi3+0x33c>
1010d1d0:	1545883a 	add	r2,r2,r21
1010d1d4:	30ffffc4 	addi	r3,r6,-1
1010d1d8:	1540742e 	bgeu	r2,r21,1010d3ac <__umoddi3+0x508>
1010d1dc:	180d883a 	mov	r6,r3
1010d1e0:	15efc83a 	sub	r23,r2,r23
1010d1e4:	b00b883a 	mov	r5,r22
1010d1e8:	b809883a 	mov	r4,r23
1010d1ec:	d9800115 	stw	r6,4(sp)
1010d1f0:	da000015 	stw	r8,0(sp)
1010d1f4:	01026a40 	call	101026a4 <__umodsi3>
1010d1f8:	b00b883a 	mov	r5,r22
1010d1fc:	b809883a 	mov	r4,r23
1010d200:	1039883a 	mov	fp,r2
1010d204:	01026400 	call	10102640 <__udivsi3>
1010d208:	da000017 	ldw	r8,0(sp)
1010d20c:	e038943a 	slli	fp,fp,16
1010d210:	100b883a 	mov	r5,r2
1010d214:	4089383a 	mul	r4,r8,r2
1010d218:	8a3fffcc 	andi	r8,r17,65535
1010d21c:	4710b03a 	or	r8,r8,fp
1010d220:	d9800117 	ldw	r6,4(sp)
1010d224:	4100042e 	bgeu	r8,r4,1010d238 <__umoddi3+0x394>
1010d228:	4551883a 	add	r8,r8,r21
1010d22c:	10bfffc4 	addi	r2,r2,-1
1010d230:	45405a2e 	bgeu	r8,r21,1010d39c <__umoddi3+0x4f8>
1010d234:	100b883a 	mov	r5,r2
1010d238:	300c943a 	slli	r6,r6,16
1010d23c:	91ffffcc 	andi	r7,r18,65535
1010d240:	9004d43a 	srli	r2,r18,16
1010d244:	314cb03a 	or	r6,r6,r5
1010d248:	317fffcc 	andi	r5,r6,65535
1010d24c:	300cd43a 	srli	r6,r6,16
1010d250:	29d3383a 	mul	r9,r5,r7
1010d254:	288b383a 	mul	r5,r5,r2
1010d258:	31cf383a 	mul	r7,r6,r7
1010d25c:	4806d43a 	srli	r3,r9,16
1010d260:	4111c83a 	sub	r8,r8,r4
1010d264:	29cb883a 	add	r5,r5,r7
1010d268:	194b883a 	add	r5,r3,r5
1010d26c:	3085383a 	mul	r2,r6,r2
1010d270:	29c0022e 	bgeu	r5,r7,1010d27c <__umoddi3+0x3d8>
1010d274:	00c00074 	movhi	r3,1
1010d278:	10c5883a 	add	r2,r2,r3
1010d27c:	2808d43a 	srli	r4,r5,16
1010d280:	280a943a 	slli	r5,r5,16
1010d284:	4a7fffcc 	andi	r9,r9,65535
1010d288:	2085883a 	add	r2,r4,r2
1010d28c:	2a4b883a 	add	r5,r5,r9
1010d290:	40803636 	bltu	r8,r2,1010d36c <__umoddi3+0x4c8>
1010d294:	40804d26 	beq	r8,r2,1010d3cc <__umoddi3+0x528>
1010d298:	4089c83a 	sub	r4,r8,r2
1010d29c:	280f883a 	mov	r7,r5
1010d2a0:	81cfc83a 	sub	r7,r16,r7
1010d2a4:	81c7803a 	cmpltu	r3,r16,r7
1010d2a8:	20c7c83a 	sub	r3,r4,r3
1010d2ac:	1cc4983a 	sll	r2,r3,r19
1010d2b0:	3d0ed83a 	srl	r7,r7,r20
1010d2b4:	1d06d83a 	srl	r3,r3,r20
1010d2b8:	11c4b03a 	or	r2,r2,r7
1010d2bc:	003f9306 	br	1010d10c <__alt_data_end+0xfffed10c>
1010d2c0:	9ca6983a 	sll	r19,r19,r18
1010d2c4:	88e8d83a 	srl	r20,r17,r3
1010d2c8:	80c4d83a 	srl	r2,r16,r3
1010d2cc:	982cd43a 	srli	r22,r19,16
1010d2d0:	8ca2983a 	sll	r17,r17,r18
1010d2d4:	a009883a 	mov	r4,r20
1010d2d8:	b00b883a 	mov	r5,r22
1010d2dc:	1478b03a 	or	fp,r2,r17
1010d2e0:	01026a40 	call	101026a4 <__umodsi3>
1010d2e4:	a009883a 	mov	r4,r20
1010d2e8:	b00b883a 	mov	r5,r22
1010d2ec:	1023883a 	mov	r17,r2
1010d2f0:	01026400 	call	10102640 <__udivsi3>
1010d2f4:	9d7fffcc 	andi	r21,r19,65535
1010d2f8:	880a943a 	slli	r5,r17,16
1010d2fc:	e008d43a 	srli	r4,fp,16
1010d300:	a885383a 	mul	r2,r21,r2
1010d304:	84a8983a 	sll	r20,r16,r18
1010d308:	2148b03a 	or	r4,r4,r5
1010d30c:	2080042e 	bgeu	r4,r2,1010d320 <__umoddi3+0x47c>
1010d310:	24c9883a 	add	r4,r4,r19
1010d314:	24c00236 	bltu	r4,r19,1010d320 <__umoddi3+0x47c>
1010d318:	2080012e 	bgeu	r4,r2,1010d320 <__umoddi3+0x47c>
1010d31c:	24c9883a 	add	r4,r4,r19
1010d320:	20a3c83a 	sub	r17,r4,r2
1010d324:	b00b883a 	mov	r5,r22
1010d328:	8809883a 	mov	r4,r17
1010d32c:	01026a40 	call	101026a4 <__umodsi3>
1010d330:	102f883a 	mov	r23,r2
1010d334:	8809883a 	mov	r4,r17
1010d338:	b00b883a 	mov	r5,r22
1010d33c:	01026400 	call	10102640 <__udivsi3>
1010d340:	b82e943a 	slli	r23,r23,16
1010d344:	a885383a 	mul	r2,r21,r2
1010d348:	e13fffcc 	andi	r4,fp,65535
1010d34c:	25c8b03a 	or	r4,r4,r23
1010d350:	2080042e 	bgeu	r4,r2,1010d364 <__umoddi3+0x4c0>
1010d354:	24c9883a 	add	r4,r4,r19
1010d358:	24c00236 	bltu	r4,r19,1010d364 <__umoddi3+0x4c0>
1010d35c:	2080012e 	bgeu	r4,r2,1010d364 <__umoddi3+0x4c0>
1010d360:	24c9883a 	add	r4,r4,r19
1010d364:	20a3c83a 	sub	r17,r4,r2
1010d368:	003f4806 	br	1010d08c <__alt_data_end+0xfffed08c>
1010d36c:	2c8fc83a 	sub	r7,r5,r18
1010d370:	1545c83a 	sub	r2,r2,r21
1010d374:	29cb803a 	cmpltu	r5,r5,r7
1010d378:	1145c83a 	sub	r2,r2,r5
1010d37c:	4089c83a 	sub	r4,r8,r2
1010d380:	003fc706 	br	1010d2a0 <__alt_data_end+0xfffed2a0>
1010d384:	01000604 	movi	r4,24
1010d388:	003f1806 	br	1010cfec <__alt_data_end+0xfffecfec>
1010d38c:	00800604 	movi	r2,24
1010d390:	003f3206 	br	1010d05c <__alt_data_end+0xfffed05c>
1010d394:	01000604 	movi	r4,24
1010d398:	003ed906 	br	1010cf00 <__alt_data_end+0xfffecf00>
1010d39c:	413fa52e 	bgeu	r8,r4,1010d234 <__alt_data_end+0xfffed234>
1010d3a0:	297fff84 	addi	r5,r5,-2
1010d3a4:	4551883a 	add	r8,r8,r21
1010d3a8:	003fa306 	br	1010d238 <__alt_data_end+0xfffed238>
1010d3ac:	15ff8b2e 	bgeu	r2,r23,1010d1dc <__alt_data_end+0xfffed1dc>
1010d3b0:	31bfff84 	addi	r6,r6,-2
1010d3b4:	1545883a 	add	r2,r2,r21
1010d3b8:	003f8906 	br	1010d1e0 <__alt_data_end+0xfffed1e0>
1010d3bc:	24c9883a 	add	r4,r4,r19
1010d3c0:	003eee06 	br	1010cf7c <__alt_data_end+0xfffecf7c>
1010d3c4:	8005883a 	mov	r2,r16
1010d3c8:	003f1706 	br	1010d028 <__alt_data_end+0xfffed028>
1010d3cc:	817fe736 	bltu	r16,r5,1010d36c <__alt_data_end+0xfffed36c>
1010d3d0:	280f883a 	mov	r7,r5
1010d3d4:	0009883a 	mov	r4,zero
1010d3d8:	003fb106 	br	1010d2a0 <__alt_data_end+0xfffed2a0>

1010d3dc <__adddf3>:
1010d3dc:	02c00434 	movhi	r11,16
1010d3e0:	5affffc4 	addi	r11,r11,-1
1010d3e4:	2806d7fa 	srli	r3,r5,31
1010d3e8:	2ad4703a 	and	r10,r5,r11
1010d3ec:	3ad2703a 	and	r9,r7,r11
1010d3f0:	3804d53a 	srli	r2,r7,20
1010d3f4:	3018d77a 	srli	r12,r6,29
1010d3f8:	280ad53a 	srli	r5,r5,20
1010d3fc:	501490fa 	slli	r10,r10,3
1010d400:	2010d77a 	srli	r8,r4,29
1010d404:	481290fa 	slli	r9,r9,3
1010d408:	380ed7fa 	srli	r7,r7,31
1010d40c:	defffb04 	addi	sp,sp,-20
1010d410:	dc800215 	stw	r18,8(sp)
1010d414:	dc400115 	stw	r17,4(sp)
1010d418:	dc000015 	stw	r16,0(sp)
1010d41c:	dfc00415 	stw	ra,16(sp)
1010d420:	dcc00315 	stw	r19,12(sp)
1010d424:	1c803fcc 	andi	r18,r3,255
1010d428:	2c01ffcc 	andi	r16,r5,2047
1010d42c:	5210b03a 	or	r8,r10,r8
1010d430:	202290fa 	slli	r17,r4,3
1010d434:	1081ffcc 	andi	r2,r2,2047
1010d438:	4b12b03a 	or	r9,r9,r12
1010d43c:	300c90fa 	slli	r6,r6,3
1010d440:	91c07526 	beq	r18,r7,1010d618 <__adddf3+0x23c>
1010d444:	8087c83a 	sub	r3,r16,r2
1010d448:	00c0ab0e 	bge	zero,r3,1010d6f8 <__adddf3+0x31c>
1010d44c:	10002a1e 	bne	r2,zero,1010d4f8 <__adddf3+0x11c>
1010d450:	4984b03a 	or	r2,r9,r6
1010d454:	1000961e 	bne	r2,zero,1010d6b0 <__adddf3+0x2d4>
1010d458:	888001cc 	andi	r2,r17,7
1010d45c:	10000726 	beq	r2,zero,1010d47c <__adddf3+0xa0>
1010d460:	888003cc 	andi	r2,r17,15
1010d464:	00c00104 	movi	r3,4
1010d468:	10c00426 	beq	r2,r3,1010d47c <__adddf3+0xa0>
1010d46c:	88c7883a 	add	r3,r17,r3
1010d470:	1c63803a 	cmpltu	r17,r3,r17
1010d474:	4451883a 	add	r8,r8,r17
1010d478:	1823883a 	mov	r17,r3
1010d47c:	4080202c 	andhi	r2,r8,128
1010d480:	10005926 	beq	r2,zero,1010d5e8 <__adddf3+0x20c>
1010d484:	84000044 	addi	r16,r16,1
1010d488:	0081ffc4 	movi	r2,2047
1010d48c:	8080ba26 	beq	r16,r2,1010d778 <__adddf3+0x39c>
1010d490:	00bfe034 	movhi	r2,65408
1010d494:	10bfffc4 	addi	r2,r2,-1
1010d498:	4090703a 	and	r8,r8,r2
1010d49c:	4004977a 	slli	r2,r8,29
1010d4a0:	4010927a 	slli	r8,r8,9
1010d4a4:	8822d0fa 	srli	r17,r17,3
1010d4a8:	8401ffcc 	andi	r16,r16,2047
1010d4ac:	4010d33a 	srli	r8,r8,12
1010d4b0:	9007883a 	mov	r3,r18
1010d4b4:	1444b03a 	or	r2,r2,r17
1010d4b8:	8401ffcc 	andi	r16,r16,2047
1010d4bc:	8020953a 	slli	r16,r16,20
1010d4c0:	18c03fcc 	andi	r3,r3,255
1010d4c4:	01000434 	movhi	r4,16
1010d4c8:	213fffc4 	addi	r4,r4,-1
1010d4cc:	180697fa 	slli	r3,r3,31
1010d4d0:	4110703a 	and	r8,r8,r4
1010d4d4:	4410b03a 	or	r8,r8,r16
1010d4d8:	40c6b03a 	or	r3,r8,r3
1010d4dc:	dfc00417 	ldw	ra,16(sp)
1010d4e0:	dcc00317 	ldw	r19,12(sp)
1010d4e4:	dc800217 	ldw	r18,8(sp)
1010d4e8:	dc400117 	ldw	r17,4(sp)
1010d4ec:	dc000017 	ldw	r16,0(sp)
1010d4f0:	dec00504 	addi	sp,sp,20
1010d4f4:	f800283a 	ret
1010d4f8:	0081ffc4 	movi	r2,2047
1010d4fc:	80bfd626 	beq	r16,r2,1010d458 <__alt_data_end+0xfffed458>
1010d500:	4a402034 	orhi	r9,r9,128
1010d504:	00800e04 	movi	r2,56
1010d508:	10c09f16 	blt	r2,r3,1010d788 <__adddf3+0x3ac>
1010d50c:	008007c4 	movi	r2,31
1010d510:	10c0c216 	blt	r2,r3,1010d81c <__adddf3+0x440>
1010d514:	00800804 	movi	r2,32
1010d518:	10c5c83a 	sub	r2,r2,r3
1010d51c:	488a983a 	sll	r5,r9,r2
1010d520:	30c8d83a 	srl	r4,r6,r3
1010d524:	3084983a 	sll	r2,r6,r2
1010d528:	48c6d83a 	srl	r3,r9,r3
1010d52c:	290cb03a 	or	r6,r5,r4
1010d530:	1004c03a 	cmpne	r2,r2,zero
1010d534:	308cb03a 	or	r6,r6,r2
1010d538:	898dc83a 	sub	r6,r17,r6
1010d53c:	89a3803a 	cmpltu	r17,r17,r6
1010d540:	40d1c83a 	sub	r8,r8,r3
1010d544:	4451c83a 	sub	r8,r8,r17
1010d548:	3023883a 	mov	r17,r6
1010d54c:	4080202c 	andhi	r2,r8,128
1010d550:	10002326 	beq	r2,zero,1010d5e0 <__adddf3+0x204>
1010d554:	04c02034 	movhi	r19,128
1010d558:	9cffffc4 	addi	r19,r19,-1
1010d55c:	44e6703a 	and	r19,r8,r19
1010d560:	98007626 	beq	r19,zero,1010d73c <__adddf3+0x360>
1010d564:	9809883a 	mov	r4,r19
1010d568:	010f9e00 	call	1010f9e0 <__clzsi2>
1010d56c:	10fffe04 	addi	r3,r2,-8
1010d570:	010007c4 	movi	r4,31
1010d574:	20c07716 	blt	r4,r3,1010d754 <__adddf3+0x378>
1010d578:	00800804 	movi	r2,32
1010d57c:	10c5c83a 	sub	r2,r2,r3
1010d580:	8884d83a 	srl	r2,r17,r2
1010d584:	98d0983a 	sll	r8,r19,r3
1010d588:	88e2983a 	sll	r17,r17,r3
1010d58c:	1204b03a 	or	r2,r2,r8
1010d590:	1c007416 	blt	r3,r16,1010d764 <__adddf3+0x388>
1010d594:	1c21c83a 	sub	r16,r3,r16
1010d598:	82000044 	addi	r8,r16,1
1010d59c:	00c007c4 	movi	r3,31
1010d5a0:	1a009116 	blt	r3,r8,1010d7e8 <__adddf3+0x40c>
1010d5a4:	00c00804 	movi	r3,32
1010d5a8:	1a07c83a 	sub	r3,r3,r8
1010d5ac:	8a08d83a 	srl	r4,r17,r8
1010d5b0:	88e2983a 	sll	r17,r17,r3
1010d5b4:	10c6983a 	sll	r3,r2,r3
1010d5b8:	1210d83a 	srl	r8,r2,r8
1010d5bc:	8804c03a 	cmpne	r2,r17,zero
1010d5c0:	1906b03a 	or	r3,r3,r4
1010d5c4:	18a2b03a 	or	r17,r3,r2
1010d5c8:	0021883a 	mov	r16,zero
1010d5cc:	003fa206 	br	1010d458 <__alt_data_end+0xfffed458>
1010d5d0:	1890b03a 	or	r8,r3,r2
1010d5d4:	40017d26 	beq	r8,zero,1010dbcc <__adddf3+0x7f0>
1010d5d8:	1011883a 	mov	r8,r2
1010d5dc:	1823883a 	mov	r17,r3
1010d5e0:	888001cc 	andi	r2,r17,7
1010d5e4:	103f9e1e 	bne	r2,zero,1010d460 <__alt_data_end+0xfffed460>
1010d5e8:	4004977a 	slli	r2,r8,29
1010d5ec:	8822d0fa 	srli	r17,r17,3
1010d5f0:	4010d0fa 	srli	r8,r8,3
1010d5f4:	9007883a 	mov	r3,r18
1010d5f8:	1444b03a 	or	r2,r2,r17
1010d5fc:	0101ffc4 	movi	r4,2047
1010d600:	81002426 	beq	r16,r4,1010d694 <__adddf3+0x2b8>
1010d604:	8120703a 	and	r16,r16,r4
1010d608:	01000434 	movhi	r4,16
1010d60c:	213fffc4 	addi	r4,r4,-1
1010d610:	4110703a 	and	r8,r8,r4
1010d614:	003fa806 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010d618:	8089c83a 	sub	r4,r16,r2
1010d61c:	01005e0e 	bge	zero,r4,1010d798 <__adddf3+0x3bc>
1010d620:	10002b26 	beq	r2,zero,1010d6d0 <__adddf3+0x2f4>
1010d624:	0081ffc4 	movi	r2,2047
1010d628:	80bf8b26 	beq	r16,r2,1010d458 <__alt_data_end+0xfffed458>
1010d62c:	4a402034 	orhi	r9,r9,128
1010d630:	00800e04 	movi	r2,56
1010d634:	1100a40e 	bge	r2,r4,1010d8c8 <__adddf3+0x4ec>
1010d638:	498cb03a 	or	r6,r9,r6
1010d63c:	300ac03a 	cmpne	r5,r6,zero
1010d640:	0013883a 	mov	r9,zero
1010d644:	2c4b883a 	add	r5,r5,r17
1010d648:	2c63803a 	cmpltu	r17,r5,r17
1010d64c:	4a11883a 	add	r8,r9,r8
1010d650:	8a11883a 	add	r8,r17,r8
1010d654:	2823883a 	mov	r17,r5
1010d658:	4080202c 	andhi	r2,r8,128
1010d65c:	103fe026 	beq	r2,zero,1010d5e0 <__alt_data_end+0xfffed5e0>
1010d660:	84000044 	addi	r16,r16,1
1010d664:	0081ffc4 	movi	r2,2047
1010d668:	8080d226 	beq	r16,r2,1010d9b4 <__adddf3+0x5d8>
1010d66c:	00bfe034 	movhi	r2,65408
1010d670:	10bfffc4 	addi	r2,r2,-1
1010d674:	4090703a 	and	r8,r8,r2
1010d678:	880ad07a 	srli	r5,r17,1
1010d67c:	400897fa 	slli	r4,r8,31
1010d680:	88c0004c 	andi	r3,r17,1
1010d684:	28e2b03a 	or	r17,r5,r3
1010d688:	4010d07a 	srli	r8,r8,1
1010d68c:	2462b03a 	or	r17,r4,r17
1010d690:	003f7106 	br	1010d458 <__alt_data_end+0xfffed458>
1010d694:	4088b03a 	or	r4,r8,r2
1010d698:	20014526 	beq	r4,zero,1010dbb0 <__adddf3+0x7d4>
1010d69c:	01000434 	movhi	r4,16
1010d6a0:	42000234 	orhi	r8,r8,8
1010d6a4:	213fffc4 	addi	r4,r4,-1
1010d6a8:	4110703a 	and	r8,r8,r4
1010d6ac:	003f8206 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010d6b0:	18ffffc4 	addi	r3,r3,-1
1010d6b4:	1800491e 	bne	r3,zero,1010d7dc <__adddf3+0x400>
1010d6b8:	898bc83a 	sub	r5,r17,r6
1010d6bc:	8963803a 	cmpltu	r17,r17,r5
1010d6c0:	4251c83a 	sub	r8,r8,r9
1010d6c4:	4451c83a 	sub	r8,r8,r17
1010d6c8:	2823883a 	mov	r17,r5
1010d6cc:	003f9f06 	br	1010d54c <__alt_data_end+0xfffed54c>
1010d6d0:	4984b03a 	or	r2,r9,r6
1010d6d4:	103f6026 	beq	r2,zero,1010d458 <__alt_data_end+0xfffed458>
1010d6d8:	213fffc4 	addi	r4,r4,-1
1010d6dc:	2000931e 	bne	r4,zero,1010d92c <__adddf3+0x550>
1010d6e0:	898d883a 	add	r6,r17,r6
1010d6e4:	3463803a 	cmpltu	r17,r6,r17
1010d6e8:	4251883a 	add	r8,r8,r9
1010d6ec:	8a11883a 	add	r8,r17,r8
1010d6f0:	3023883a 	mov	r17,r6
1010d6f4:	003fd806 	br	1010d658 <__alt_data_end+0xfffed658>
1010d6f8:	1800541e 	bne	r3,zero,1010d84c <__adddf3+0x470>
1010d6fc:	80800044 	addi	r2,r16,1
1010d700:	1081ffcc 	andi	r2,r2,2047
1010d704:	00c00044 	movi	r3,1
1010d708:	1880a00e 	bge	r3,r2,1010d98c <__adddf3+0x5b0>
1010d70c:	8989c83a 	sub	r4,r17,r6
1010d710:	8905803a 	cmpltu	r2,r17,r4
1010d714:	4267c83a 	sub	r19,r8,r9
1010d718:	98a7c83a 	sub	r19,r19,r2
1010d71c:	9880202c 	andhi	r2,r19,128
1010d720:	10006326 	beq	r2,zero,1010d8b0 <__adddf3+0x4d4>
1010d724:	3463c83a 	sub	r17,r6,r17
1010d728:	4a07c83a 	sub	r3,r9,r8
1010d72c:	344d803a 	cmpltu	r6,r6,r17
1010d730:	19a7c83a 	sub	r19,r3,r6
1010d734:	3825883a 	mov	r18,r7
1010d738:	983f8a1e 	bne	r19,zero,1010d564 <__alt_data_end+0xfffed564>
1010d73c:	8809883a 	mov	r4,r17
1010d740:	010f9e00 	call	1010f9e0 <__clzsi2>
1010d744:	10800804 	addi	r2,r2,32
1010d748:	10fffe04 	addi	r3,r2,-8
1010d74c:	010007c4 	movi	r4,31
1010d750:	20ff890e 	bge	r4,r3,1010d578 <__alt_data_end+0xfffed578>
1010d754:	10bff604 	addi	r2,r2,-40
1010d758:	8884983a 	sll	r2,r17,r2
1010d75c:	0023883a 	mov	r17,zero
1010d760:	1c3f8c0e 	bge	r3,r16,1010d594 <__alt_data_end+0xfffed594>
1010d764:	023fe034 	movhi	r8,65408
1010d768:	423fffc4 	addi	r8,r8,-1
1010d76c:	80e1c83a 	sub	r16,r16,r3
1010d770:	1210703a 	and	r8,r2,r8
1010d774:	003f3806 	br	1010d458 <__alt_data_end+0xfffed458>
1010d778:	9007883a 	mov	r3,r18
1010d77c:	0011883a 	mov	r8,zero
1010d780:	0005883a 	mov	r2,zero
1010d784:	003f4c06 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010d788:	498cb03a 	or	r6,r9,r6
1010d78c:	300cc03a 	cmpne	r6,r6,zero
1010d790:	0007883a 	mov	r3,zero
1010d794:	003f6806 	br	1010d538 <__alt_data_end+0xfffed538>
1010d798:	20009c1e 	bne	r4,zero,1010da0c <__adddf3+0x630>
1010d79c:	80800044 	addi	r2,r16,1
1010d7a0:	1141ffcc 	andi	r5,r2,2047
1010d7a4:	01000044 	movi	r4,1
1010d7a8:	2140670e 	bge	r4,r5,1010d948 <__adddf3+0x56c>
1010d7ac:	0101ffc4 	movi	r4,2047
1010d7b0:	11007f26 	beq	r2,r4,1010d9b0 <__adddf3+0x5d4>
1010d7b4:	898d883a 	add	r6,r17,r6
1010d7b8:	4247883a 	add	r3,r8,r9
1010d7bc:	3451803a 	cmpltu	r8,r6,r17
1010d7c0:	40d1883a 	add	r8,r8,r3
1010d7c4:	402297fa 	slli	r17,r8,31
1010d7c8:	300cd07a 	srli	r6,r6,1
1010d7cc:	4010d07a 	srli	r8,r8,1
1010d7d0:	1021883a 	mov	r16,r2
1010d7d4:	89a2b03a 	or	r17,r17,r6
1010d7d8:	003f1f06 	br	1010d458 <__alt_data_end+0xfffed458>
1010d7dc:	0081ffc4 	movi	r2,2047
1010d7e0:	80bf481e 	bne	r16,r2,1010d504 <__alt_data_end+0xfffed504>
1010d7e4:	003f1c06 	br	1010d458 <__alt_data_end+0xfffed458>
1010d7e8:	843ff844 	addi	r16,r16,-31
1010d7ec:	01000804 	movi	r4,32
1010d7f0:	1406d83a 	srl	r3,r2,r16
1010d7f4:	41005026 	beq	r8,r4,1010d938 <__adddf3+0x55c>
1010d7f8:	01001004 	movi	r4,64
1010d7fc:	2211c83a 	sub	r8,r4,r8
1010d800:	1204983a 	sll	r2,r2,r8
1010d804:	88a2b03a 	or	r17,r17,r2
1010d808:	8822c03a 	cmpne	r17,r17,zero
1010d80c:	1c62b03a 	or	r17,r3,r17
1010d810:	0011883a 	mov	r8,zero
1010d814:	0021883a 	mov	r16,zero
1010d818:	003f7106 	br	1010d5e0 <__alt_data_end+0xfffed5e0>
1010d81c:	193ff804 	addi	r4,r3,-32
1010d820:	00800804 	movi	r2,32
1010d824:	4908d83a 	srl	r4,r9,r4
1010d828:	18804526 	beq	r3,r2,1010d940 <__adddf3+0x564>
1010d82c:	00801004 	movi	r2,64
1010d830:	10c5c83a 	sub	r2,r2,r3
1010d834:	4886983a 	sll	r3,r9,r2
1010d838:	198cb03a 	or	r6,r3,r6
1010d83c:	300cc03a 	cmpne	r6,r6,zero
1010d840:	218cb03a 	or	r6,r4,r6
1010d844:	0007883a 	mov	r3,zero
1010d848:	003f3b06 	br	1010d538 <__alt_data_end+0xfffed538>
1010d84c:	80002a26 	beq	r16,zero,1010d8f8 <__adddf3+0x51c>
1010d850:	0101ffc4 	movi	r4,2047
1010d854:	11006826 	beq	r2,r4,1010d9f8 <__adddf3+0x61c>
1010d858:	00c7c83a 	sub	r3,zero,r3
1010d85c:	42002034 	orhi	r8,r8,128
1010d860:	01000e04 	movi	r4,56
1010d864:	20c07c16 	blt	r4,r3,1010da58 <__adddf3+0x67c>
1010d868:	010007c4 	movi	r4,31
1010d86c:	20c0da16 	blt	r4,r3,1010dbd8 <__adddf3+0x7fc>
1010d870:	01000804 	movi	r4,32
1010d874:	20c9c83a 	sub	r4,r4,r3
1010d878:	4114983a 	sll	r10,r8,r4
1010d87c:	88cad83a 	srl	r5,r17,r3
1010d880:	8908983a 	sll	r4,r17,r4
1010d884:	40c6d83a 	srl	r3,r8,r3
1010d888:	5162b03a 	or	r17,r10,r5
1010d88c:	2008c03a 	cmpne	r4,r4,zero
1010d890:	8922b03a 	or	r17,r17,r4
1010d894:	3463c83a 	sub	r17,r6,r17
1010d898:	48c7c83a 	sub	r3,r9,r3
1010d89c:	344d803a 	cmpltu	r6,r6,r17
1010d8a0:	1991c83a 	sub	r8,r3,r6
1010d8a4:	1021883a 	mov	r16,r2
1010d8a8:	3825883a 	mov	r18,r7
1010d8ac:	003f2706 	br	1010d54c <__alt_data_end+0xfffed54c>
1010d8b0:	24d0b03a 	or	r8,r4,r19
1010d8b4:	40001b1e 	bne	r8,zero,1010d924 <__adddf3+0x548>
1010d8b8:	0005883a 	mov	r2,zero
1010d8bc:	0007883a 	mov	r3,zero
1010d8c0:	0021883a 	mov	r16,zero
1010d8c4:	003f4d06 	br	1010d5fc <__alt_data_end+0xfffed5fc>
1010d8c8:	008007c4 	movi	r2,31
1010d8cc:	11003c16 	blt	r2,r4,1010d9c0 <__adddf3+0x5e4>
1010d8d0:	00800804 	movi	r2,32
1010d8d4:	1105c83a 	sub	r2,r2,r4
1010d8d8:	488e983a 	sll	r7,r9,r2
1010d8dc:	310ad83a 	srl	r5,r6,r4
1010d8e0:	3084983a 	sll	r2,r6,r2
1010d8e4:	4912d83a 	srl	r9,r9,r4
1010d8e8:	394ab03a 	or	r5,r7,r5
1010d8ec:	1004c03a 	cmpne	r2,r2,zero
1010d8f0:	288ab03a 	or	r5,r5,r2
1010d8f4:	003f5306 	br	1010d644 <__alt_data_end+0xfffed644>
1010d8f8:	4448b03a 	or	r4,r8,r17
1010d8fc:	20003e26 	beq	r4,zero,1010d9f8 <__adddf3+0x61c>
1010d900:	00c6303a 	nor	r3,zero,r3
1010d904:	18003a1e 	bne	r3,zero,1010d9f0 <__adddf3+0x614>
1010d908:	3463c83a 	sub	r17,r6,r17
1010d90c:	4a07c83a 	sub	r3,r9,r8
1010d910:	344d803a 	cmpltu	r6,r6,r17
1010d914:	1991c83a 	sub	r8,r3,r6
1010d918:	1021883a 	mov	r16,r2
1010d91c:	3825883a 	mov	r18,r7
1010d920:	003f0a06 	br	1010d54c <__alt_data_end+0xfffed54c>
1010d924:	2023883a 	mov	r17,r4
1010d928:	003f0d06 	br	1010d560 <__alt_data_end+0xfffed560>
1010d92c:	0081ffc4 	movi	r2,2047
1010d930:	80bf3f1e 	bne	r16,r2,1010d630 <__alt_data_end+0xfffed630>
1010d934:	003ec806 	br	1010d458 <__alt_data_end+0xfffed458>
1010d938:	0005883a 	mov	r2,zero
1010d93c:	003fb106 	br	1010d804 <__alt_data_end+0xfffed804>
1010d940:	0007883a 	mov	r3,zero
1010d944:	003fbc06 	br	1010d838 <__alt_data_end+0xfffed838>
1010d948:	4444b03a 	or	r2,r8,r17
1010d94c:	8000871e 	bne	r16,zero,1010db6c <__adddf3+0x790>
1010d950:	1000ba26 	beq	r2,zero,1010dc3c <__adddf3+0x860>
1010d954:	4984b03a 	or	r2,r9,r6
1010d958:	103ebf26 	beq	r2,zero,1010d458 <__alt_data_end+0xfffed458>
1010d95c:	8985883a 	add	r2,r17,r6
1010d960:	4247883a 	add	r3,r8,r9
1010d964:	1451803a 	cmpltu	r8,r2,r17
1010d968:	40d1883a 	add	r8,r8,r3
1010d96c:	40c0202c 	andhi	r3,r8,128
1010d970:	1023883a 	mov	r17,r2
1010d974:	183f1a26 	beq	r3,zero,1010d5e0 <__alt_data_end+0xfffed5e0>
1010d978:	00bfe034 	movhi	r2,65408
1010d97c:	10bfffc4 	addi	r2,r2,-1
1010d980:	2021883a 	mov	r16,r4
1010d984:	4090703a 	and	r8,r8,r2
1010d988:	003eb306 	br	1010d458 <__alt_data_end+0xfffed458>
1010d98c:	4444b03a 	or	r2,r8,r17
1010d990:	8000291e 	bne	r16,zero,1010da38 <__adddf3+0x65c>
1010d994:	10004b1e 	bne	r2,zero,1010dac4 <__adddf3+0x6e8>
1010d998:	4990b03a 	or	r8,r9,r6
1010d99c:	40008b26 	beq	r8,zero,1010dbcc <__adddf3+0x7f0>
1010d9a0:	4811883a 	mov	r8,r9
1010d9a4:	3023883a 	mov	r17,r6
1010d9a8:	3825883a 	mov	r18,r7
1010d9ac:	003eaa06 	br	1010d458 <__alt_data_end+0xfffed458>
1010d9b0:	1021883a 	mov	r16,r2
1010d9b4:	0011883a 	mov	r8,zero
1010d9b8:	0005883a 	mov	r2,zero
1010d9bc:	003f0f06 	br	1010d5fc <__alt_data_end+0xfffed5fc>
1010d9c0:	217ff804 	addi	r5,r4,-32
1010d9c4:	00800804 	movi	r2,32
1010d9c8:	494ad83a 	srl	r5,r9,r5
1010d9cc:	20807d26 	beq	r4,r2,1010dbc4 <__adddf3+0x7e8>
1010d9d0:	00801004 	movi	r2,64
1010d9d4:	1109c83a 	sub	r4,r2,r4
1010d9d8:	4912983a 	sll	r9,r9,r4
1010d9dc:	498cb03a 	or	r6,r9,r6
1010d9e0:	300cc03a 	cmpne	r6,r6,zero
1010d9e4:	298ab03a 	or	r5,r5,r6
1010d9e8:	0013883a 	mov	r9,zero
1010d9ec:	003f1506 	br	1010d644 <__alt_data_end+0xfffed644>
1010d9f0:	0101ffc4 	movi	r4,2047
1010d9f4:	113f9a1e 	bne	r2,r4,1010d860 <__alt_data_end+0xfffed860>
1010d9f8:	4811883a 	mov	r8,r9
1010d9fc:	3023883a 	mov	r17,r6
1010da00:	1021883a 	mov	r16,r2
1010da04:	3825883a 	mov	r18,r7
1010da08:	003e9306 	br	1010d458 <__alt_data_end+0xfffed458>
1010da0c:	8000161e 	bne	r16,zero,1010da68 <__adddf3+0x68c>
1010da10:	444ab03a 	or	r5,r8,r17
1010da14:	28005126 	beq	r5,zero,1010db5c <__adddf3+0x780>
1010da18:	0108303a 	nor	r4,zero,r4
1010da1c:	20004d1e 	bne	r4,zero,1010db54 <__adddf3+0x778>
1010da20:	89a3883a 	add	r17,r17,r6
1010da24:	4253883a 	add	r9,r8,r9
1010da28:	898d803a 	cmpltu	r6,r17,r6
1010da2c:	3251883a 	add	r8,r6,r9
1010da30:	1021883a 	mov	r16,r2
1010da34:	003f0806 	br	1010d658 <__alt_data_end+0xfffed658>
1010da38:	1000301e 	bne	r2,zero,1010dafc <__adddf3+0x720>
1010da3c:	4984b03a 	or	r2,r9,r6
1010da40:	10007126 	beq	r2,zero,1010dc08 <__adddf3+0x82c>
1010da44:	4811883a 	mov	r8,r9
1010da48:	3023883a 	mov	r17,r6
1010da4c:	3825883a 	mov	r18,r7
1010da50:	0401ffc4 	movi	r16,2047
1010da54:	003e8006 	br	1010d458 <__alt_data_end+0xfffed458>
1010da58:	4462b03a 	or	r17,r8,r17
1010da5c:	8822c03a 	cmpne	r17,r17,zero
1010da60:	0007883a 	mov	r3,zero
1010da64:	003f8b06 	br	1010d894 <__alt_data_end+0xfffed894>
1010da68:	0141ffc4 	movi	r5,2047
1010da6c:	11403b26 	beq	r2,r5,1010db5c <__adddf3+0x780>
1010da70:	0109c83a 	sub	r4,zero,r4
1010da74:	42002034 	orhi	r8,r8,128
1010da78:	01400e04 	movi	r5,56
1010da7c:	29006716 	blt	r5,r4,1010dc1c <__adddf3+0x840>
1010da80:	014007c4 	movi	r5,31
1010da84:	29007016 	blt	r5,r4,1010dc48 <__adddf3+0x86c>
1010da88:	01400804 	movi	r5,32
1010da8c:	290bc83a 	sub	r5,r5,r4
1010da90:	4154983a 	sll	r10,r8,r5
1010da94:	890ed83a 	srl	r7,r17,r4
1010da98:	894a983a 	sll	r5,r17,r5
1010da9c:	4108d83a 	srl	r4,r8,r4
1010daa0:	51e2b03a 	or	r17,r10,r7
1010daa4:	280ac03a 	cmpne	r5,r5,zero
1010daa8:	8962b03a 	or	r17,r17,r5
1010daac:	89a3883a 	add	r17,r17,r6
1010dab0:	2253883a 	add	r9,r4,r9
1010dab4:	898d803a 	cmpltu	r6,r17,r6
1010dab8:	3251883a 	add	r8,r6,r9
1010dabc:	1021883a 	mov	r16,r2
1010dac0:	003ee506 	br	1010d658 <__alt_data_end+0xfffed658>
1010dac4:	4984b03a 	or	r2,r9,r6
1010dac8:	103e6326 	beq	r2,zero,1010d458 <__alt_data_end+0xfffed458>
1010dacc:	8987c83a 	sub	r3,r17,r6
1010dad0:	88c9803a 	cmpltu	r4,r17,r3
1010dad4:	4245c83a 	sub	r2,r8,r9
1010dad8:	1105c83a 	sub	r2,r2,r4
1010dadc:	1100202c 	andhi	r4,r2,128
1010dae0:	203ebb26 	beq	r4,zero,1010d5d0 <__alt_data_end+0xfffed5d0>
1010dae4:	3463c83a 	sub	r17,r6,r17
1010dae8:	4a07c83a 	sub	r3,r9,r8
1010daec:	344d803a 	cmpltu	r6,r6,r17
1010daf0:	1991c83a 	sub	r8,r3,r6
1010daf4:	3825883a 	mov	r18,r7
1010daf8:	003e5706 	br	1010d458 <__alt_data_end+0xfffed458>
1010dafc:	4984b03a 	or	r2,r9,r6
1010db00:	10002e26 	beq	r2,zero,1010dbbc <__adddf3+0x7e0>
1010db04:	4004d0fa 	srli	r2,r8,3
1010db08:	8822d0fa 	srli	r17,r17,3
1010db0c:	4010977a 	slli	r8,r8,29
1010db10:	10c0022c 	andhi	r3,r2,8
1010db14:	4462b03a 	or	r17,r8,r17
1010db18:	18000826 	beq	r3,zero,1010db3c <__adddf3+0x760>
1010db1c:	4808d0fa 	srli	r4,r9,3
1010db20:	20c0022c 	andhi	r3,r4,8
1010db24:	1800051e 	bne	r3,zero,1010db3c <__adddf3+0x760>
1010db28:	300cd0fa 	srli	r6,r6,3
1010db2c:	4806977a 	slli	r3,r9,29
1010db30:	2005883a 	mov	r2,r4
1010db34:	3825883a 	mov	r18,r7
1010db38:	19a2b03a 	or	r17,r3,r6
1010db3c:	8810d77a 	srli	r8,r17,29
1010db40:	100490fa 	slli	r2,r2,3
1010db44:	882290fa 	slli	r17,r17,3
1010db48:	0401ffc4 	movi	r16,2047
1010db4c:	4090b03a 	or	r8,r8,r2
1010db50:	003e4106 	br	1010d458 <__alt_data_end+0xfffed458>
1010db54:	0141ffc4 	movi	r5,2047
1010db58:	117fc71e 	bne	r2,r5,1010da78 <__alt_data_end+0xfffeda78>
1010db5c:	4811883a 	mov	r8,r9
1010db60:	3023883a 	mov	r17,r6
1010db64:	1021883a 	mov	r16,r2
1010db68:	003e3b06 	br	1010d458 <__alt_data_end+0xfffed458>
1010db6c:	10002f26 	beq	r2,zero,1010dc2c <__adddf3+0x850>
1010db70:	4984b03a 	or	r2,r9,r6
1010db74:	10001126 	beq	r2,zero,1010dbbc <__adddf3+0x7e0>
1010db78:	4004d0fa 	srli	r2,r8,3
1010db7c:	8822d0fa 	srli	r17,r17,3
1010db80:	4010977a 	slli	r8,r8,29
1010db84:	10c0022c 	andhi	r3,r2,8
1010db88:	4462b03a 	or	r17,r8,r17
1010db8c:	183feb26 	beq	r3,zero,1010db3c <__alt_data_end+0xfffedb3c>
1010db90:	4808d0fa 	srli	r4,r9,3
1010db94:	20c0022c 	andhi	r3,r4,8
1010db98:	183fe81e 	bne	r3,zero,1010db3c <__alt_data_end+0xfffedb3c>
1010db9c:	300cd0fa 	srli	r6,r6,3
1010dba0:	4806977a 	slli	r3,r9,29
1010dba4:	2005883a 	mov	r2,r4
1010dba8:	19a2b03a 	or	r17,r3,r6
1010dbac:	003fe306 	br	1010db3c <__alt_data_end+0xfffedb3c>
1010dbb0:	0011883a 	mov	r8,zero
1010dbb4:	0005883a 	mov	r2,zero
1010dbb8:	003e3f06 	br	1010d4b8 <__alt_data_end+0xfffed4b8>
1010dbbc:	0401ffc4 	movi	r16,2047
1010dbc0:	003e2506 	br	1010d458 <__alt_data_end+0xfffed458>
1010dbc4:	0013883a 	mov	r9,zero
1010dbc8:	003f8406 	br	1010d9dc <__alt_data_end+0xfffed9dc>
1010dbcc:	0005883a 	mov	r2,zero
1010dbd0:	0007883a 	mov	r3,zero
1010dbd4:	003e8906 	br	1010d5fc <__alt_data_end+0xfffed5fc>
1010dbd8:	197ff804 	addi	r5,r3,-32
1010dbdc:	01000804 	movi	r4,32
1010dbe0:	414ad83a 	srl	r5,r8,r5
1010dbe4:	19002426 	beq	r3,r4,1010dc78 <__adddf3+0x89c>
1010dbe8:	01001004 	movi	r4,64
1010dbec:	20c7c83a 	sub	r3,r4,r3
1010dbf0:	40c6983a 	sll	r3,r8,r3
1010dbf4:	1c46b03a 	or	r3,r3,r17
1010dbf8:	1806c03a 	cmpne	r3,r3,zero
1010dbfc:	28e2b03a 	or	r17,r5,r3
1010dc00:	0007883a 	mov	r3,zero
1010dc04:	003f2306 	br	1010d894 <__alt_data_end+0xfffed894>
1010dc08:	0007883a 	mov	r3,zero
1010dc0c:	5811883a 	mov	r8,r11
1010dc10:	00bfffc4 	movi	r2,-1
1010dc14:	0401ffc4 	movi	r16,2047
1010dc18:	003e7806 	br	1010d5fc <__alt_data_end+0xfffed5fc>
1010dc1c:	4462b03a 	or	r17,r8,r17
1010dc20:	8822c03a 	cmpne	r17,r17,zero
1010dc24:	0009883a 	mov	r4,zero
1010dc28:	003fa006 	br	1010daac <__alt_data_end+0xfffedaac>
1010dc2c:	4811883a 	mov	r8,r9
1010dc30:	3023883a 	mov	r17,r6
1010dc34:	0401ffc4 	movi	r16,2047
1010dc38:	003e0706 	br	1010d458 <__alt_data_end+0xfffed458>
1010dc3c:	4811883a 	mov	r8,r9
1010dc40:	3023883a 	mov	r17,r6
1010dc44:	003e0406 	br	1010d458 <__alt_data_end+0xfffed458>
1010dc48:	21fff804 	addi	r7,r4,-32
1010dc4c:	01400804 	movi	r5,32
1010dc50:	41ced83a 	srl	r7,r8,r7
1010dc54:	21400a26 	beq	r4,r5,1010dc80 <__adddf3+0x8a4>
1010dc58:	01401004 	movi	r5,64
1010dc5c:	2909c83a 	sub	r4,r5,r4
1010dc60:	4108983a 	sll	r4,r8,r4
1010dc64:	2448b03a 	or	r4,r4,r17
1010dc68:	2008c03a 	cmpne	r4,r4,zero
1010dc6c:	3922b03a 	or	r17,r7,r4
1010dc70:	0009883a 	mov	r4,zero
1010dc74:	003f8d06 	br	1010daac <__alt_data_end+0xfffedaac>
1010dc78:	0007883a 	mov	r3,zero
1010dc7c:	003fdd06 	br	1010dbf4 <__alt_data_end+0xfffedbf4>
1010dc80:	0009883a 	mov	r4,zero
1010dc84:	003ff706 	br	1010dc64 <__alt_data_end+0xfffedc64>

1010dc88 <__divdf3>:
1010dc88:	defff204 	addi	sp,sp,-56
1010dc8c:	dd400915 	stw	r21,36(sp)
1010dc90:	282ad53a 	srli	r21,r5,20
1010dc94:	dd000815 	stw	r20,32(sp)
1010dc98:	2828d7fa 	srli	r20,r5,31
1010dc9c:	dc000415 	stw	r16,16(sp)
1010dca0:	04000434 	movhi	r16,16
1010dca4:	df000c15 	stw	fp,48(sp)
1010dca8:	843fffc4 	addi	r16,r16,-1
1010dcac:	dfc00d15 	stw	ra,52(sp)
1010dcb0:	ddc00b15 	stw	r23,44(sp)
1010dcb4:	dd800a15 	stw	r22,40(sp)
1010dcb8:	dcc00715 	stw	r19,28(sp)
1010dcbc:	dc800615 	stw	r18,24(sp)
1010dcc0:	dc400515 	stw	r17,20(sp)
1010dcc4:	ad41ffcc 	andi	r21,r21,2047
1010dcc8:	2c20703a 	and	r16,r5,r16
1010dccc:	a7003fcc 	andi	fp,r20,255
1010dcd0:	a8006126 	beq	r21,zero,1010de58 <__divdf3+0x1d0>
1010dcd4:	0081ffc4 	movi	r2,2047
1010dcd8:	2025883a 	mov	r18,r4
1010dcdc:	a8803726 	beq	r21,r2,1010ddbc <__divdf3+0x134>
1010dce0:	80800434 	orhi	r2,r16,16
1010dce4:	100490fa 	slli	r2,r2,3
1010dce8:	2020d77a 	srli	r16,r4,29
1010dcec:	202490fa 	slli	r18,r4,3
1010dcf0:	ad7f0044 	addi	r21,r21,-1023
1010dcf4:	80a0b03a 	or	r16,r16,r2
1010dcf8:	0027883a 	mov	r19,zero
1010dcfc:	0013883a 	mov	r9,zero
1010dd00:	3804d53a 	srli	r2,r7,20
1010dd04:	382cd7fa 	srli	r22,r7,31
1010dd08:	04400434 	movhi	r17,16
1010dd0c:	8c7fffc4 	addi	r17,r17,-1
1010dd10:	1081ffcc 	andi	r2,r2,2047
1010dd14:	3011883a 	mov	r8,r6
1010dd18:	3c62703a 	and	r17,r7,r17
1010dd1c:	b5c03fcc 	andi	r23,r22,255
1010dd20:	10006c26 	beq	r2,zero,1010ded4 <__divdf3+0x24c>
1010dd24:	00c1ffc4 	movi	r3,2047
1010dd28:	10c06426 	beq	r2,r3,1010debc <__divdf3+0x234>
1010dd2c:	88c00434 	orhi	r3,r17,16
1010dd30:	180690fa 	slli	r3,r3,3
1010dd34:	3022d77a 	srli	r17,r6,29
1010dd38:	301090fa 	slli	r8,r6,3
1010dd3c:	10bf0044 	addi	r2,r2,-1023
1010dd40:	88e2b03a 	or	r17,r17,r3
1010dd44:	000f883a 	mov	r7,zero
1010dd48:	a58cf03a 	xor	r6,r20,r22
1010dd4c:	3cc8b03a 	or	r4,r7,r19
1010dd50:	a8abc83a 	sub	r21,r21,r2
1010dd54:	008003c4 	movi	r2,15
1010dd58:	3007883a 	mov	r3,r6
1010dd5c:	34c03fcc 	andi	r19,r6,255
1010dd60:	11009036 	bltu	r2,r4,1010dfa4 <__divdf3+0x31c>
1010dd64:	200890ba 	slli	r4,r4,2
1010dd68:	00840474 	movhi	r2,4113
1010dd6c:	10b75f04 	addi	r2,r2,-8836
1010dd70:	2089883a 	add	r4,r4,r2
1010dd74:	20800017 	ldw	r2,0(r4)
1010dd78:	1000683a 	jmp	r2
1010dd7c:	1010dfa4 	muli	zero,r2,17278
1010dd80:	1010ddf4 	orhi	zero,r2,17271
1010dd84:	1010df94 	ori	zero,r2,17278
1010dd88:	1010dde8 	cmpgeui	zero,r2,17271
1010dd8c:	1010df94 	ori	zero,r2,17278
1010dd90:	1010df68 	cmpgeui	zero,r2,17277
1010dd94:	1010df94 	ori	zero,r2,17278
1010dd98:	1010dde8 	cmpgeui	zero,r2,17271
1010dd9c:	1010ddf4 	orhi	zero,r2,17271
1010dda0:	1010ddf4 	orhi	zero,r2,17271
1010dda4:	1010df68 	cmpgeui	zero,r2,17277
1010dda8:	1010dde8 	cmpgeui	zero,r2,17271
1010ddac:	1010ddd8 	cmpnei	zero,r2,17271
1010ddb0:	1010ddd8 	cmpnei	zero,r2,17271
1010ddb4:	1010ddd8 	cmpnei	zero,r2,17271
1010ddb8:	1010e288 	cmpgei	zero,r2,17290
1010ddbc:	2404b03a 	or	r2,r4,r16
1010ddc0:	1000661e 	bne	r2,zero,1010df5c <__divdf3+0x2d4>
1010ddc4:	04c00204 	movi	r19,8
1010ddc8:	0021883a 	mov	r16,zero
1010ddcc:	0025883a 	mov	r18,zero
1010ddd0:	02400084 	movi	r9,2
1010ddd4:	003fca06 	br	1010dd00 <__alt_data_end+0xfffedd00>
1010ddd8:	8023883a 	mov	r17,r16
1010dddc:	9011883a 	mov	r8,r18
1010dde0:	e02f883a 	mov	r23,fp
1010dde4:	480f883a 	mov	r7,r9
1010dde8:	00800084 	movi	r2,2
1010ddec:	3881311e 	bne	r7,r2,1010e2b4 <__divdf3+0x62c>
1010ddf0:	b827883a 	mov	r19,r23
1010ddf4:	98c0004c 	andi	r3,r19,1
1010ddf8:	0081ffc4 	movi	r2,2047
1010ddfc:	000b883a 	mov	r5,zero
1010de00:	0025883a 	mov	r18,zero
1010de04:	1004953a 	slli	r2,r2,20
1010de08:	18c03fcc 	andi	r3,r3,255
1010de0c:	04400434 	movhi	r17,16
1010de10:	8c7fffc4 	addi	r17,r17,-1
1010de14:	180697fa 	slli	r3,r3,31
1010de18:	2c4a703a 	and	r5,r5,r17
1010de1c:	288ab03a 	or	r5,r5,r2
1010de20:	28c6b03a 	or	r3,r5,r3
1010de24:	9005883a 	mov	r2,r18
1010de28:	dfc00d17 	ldw	ra,52(sp)
1010de2c:	df000c17 	ldw	fp,48(sp)
1010de30:	ddc00b17 	ldw	r23,44(sp)
1010de34:	dd800a17 	ldw	r22,40(sp)
1010de38:	dd400917 	ldw	r21,36(sp)
1010de3c:	dd000817 	ldw	r20,32(sp)
1010de40:	dcc00717 	ldw	r19,28(sp)
1010de44:	dc800617 	ldw	r18,24(sp)
1010de48:	dc400517 	ldw	r17,20(sp)
1010de4c:	dc000417 	ldw	r16,16(sp)
1010de50:	dec00e04 	addi	sp,sp,56
1010de54:	f800283a 	ret
1010de58:	2404b03a 	or	r2,r4,r16
1010de5c:	2027883a 	mov	r19,r4
1010de60:	10003926 	beq	r2,zero,1010df48 <__divdf3+0x2c0>
1010de64:	80012e26 	beq	r16,zero,1010e320 <__divdf3+0x698>
1010de68:	8009883a 	mov	r4,r16
1010de6c:	d9800315 	stw	r6,12(sp)
1010de70:	d9c00215 	stw	r7,8(sp)
1010de74:	010f9e00 	call	1010f9e0 <__clzsi2>
1010de78:	d9800317 	ldw	r6,12(sp)
1010de7c:	d9c00217 	ldw	r7,8(sp)
1010de80:	113ffd44 	addi	r4,r2,-11
1010de84:	00c00704 	movi	r3,28
1010de88:	19012116 	blt	r3,r4,1010e310 <__divdf3+0x688>
1010de8c:	00c00744 	movi	r3,29
1010de90:	147ffe04 	addi	r17,r2,-8
1010de94:	1907c83a 	sub	r3,r3,r4
1010de98:	8460983a 	sll	r16,r16,r17
1010de9c:	98c6d83a 	srl	r3,r19,r3
1010dea0:	9c64983a 	sll	r18,r19,r17
1010dea4:	1c20b03a 	or	r16,r3,r16
1010dea8:	1080fcc4 	addi	r2,r2,1011
1010deac:	00abc83a 	sub	r21,zero,r2
1010deb0:	0027883a 	mov	r19,zero
1010deb4:	0013883a 	mov	r9,zero
1010deb8:	003f9106 	br	1010dd00 <__alt_data_end+0xfffedd00>
1010debc:	3446b03a 	or	r3,r6,r17
1010dec0:	18001f1e 	bne	r3,zero,1010df40 <__divdf3+0x2b8>
1010dec4:	0023883a 	mov	r17,zero
1010dec8:	0011883a 	mov	r8,zero
1010decc:	01c00084 	movi	r7,2
1010ded0:	003f9d06 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010ded4:	3446b03a 	or	r3,r6,r17
1010ded8:	18001526 	beq	r3,zero,1010df30 <__divdf3+0x2a8>
1010dedc:	88011b26 	beq	r17,zero,1010e34c <__divdf3+0x6c4>
1010dee0:	8809883a 	mov	r4,r17
1010dee4:	d9800315 	stw	r6,12(sp)
1010dee8:	da400115 	stw	r9,4(sp)
1010deec:	010f9e00 	call	1010f9e0 <__clzsi2>
1010def0:	d9800317 	ldw	r6,12(sp)
1010def4:	da400117 	ldw	r9,4(sp)
1010def8:	113ffd44 	addi	r4,r2,-11
1010defc:	00c00704 	movi	r3,28
1010df00:	19010e16 	blt	r3,r4,1010e33c <__divdf3+0x6b4>
1010df04:	00c00744 	movi	r3,29
1010df08:	123ffe04 	addi	r8,r2,-8
1010df0c:	1907c83a 	sub	r3,r3,r4
1010df10:	8a22983a 	sll	r17,r17,r8
1010df14:	30c6d83a 	srl	r3,r6,r3
1010df18:	3210983a 	sll	r8,r6,r8
1010df1c:	1c62b03a 	or	r17,r3,r17
1010df20:	1080fcc4 	addi	r2,r2,1011
1010df24:	0085c83a 	sub	r2,zero,r2
1010df28:	000f883a 	mov	r7,zero
1010df2c:	003f8606 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010df30:	0023883a 	mov	r17,zero
1010df34:	0011883a 	mov	r8,zero
1010df38:	01c00044 	movi	r7,1
1010df3c:	003f8206 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010df40:	01c000c4 	movi	r7,3
1010df44:	003f8006 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010df48:	04c00104 	movi	r19,4
1010df4c:	0021883a 	mov	r16,zero
1010df50:	0025883a 	mov	r18,zero
1010df54:	02400044 	movi	r9,1
1010df58:	003f6906 	br	1010dd00 <__alt_data_end+0xfffedd00>
1010df5c:	04c00304 	movi	r19,12
1010df60:	024000c4 	movi	r9,3
1010df64:	003f6606 	br	1010dd00 <__alt_data_end+0xfffedd00>
1010df68:	01400434 	movhi	r5,16
1010df6c:	0007883a 	mov	r3,zero
1010df70:	297fffc4 	addi	r5,r5,-1
1010df74:	04bfffc4 	movi	r18,-1
1010df78:	0081ffc4 	movi	r2,2047
1010df7c:	003fa106 	br	1010de04 <__alt_data_end+0xfffede04>
1010df80:	00c00044 	movi	r3,1
1010df84:	1887c83a 	sub	r3,r3,r2
1010df88:	01000e04 	movi	r4,56
1010df8c:	20c1210e 	bge	r4,r3,1010e414 <__divdf3+0x78c>
1010df90:	98c0004c 	andi	r3,r19,1
1010df94:	0005883a 	mov	r2,zero
1010df98:	000b883a 	mov	r5,zero
1010df9c:	0025883a 	mov	r18,zero
1010dfa0:	003f9806 	br	1010de04 <__alt_data_end+0xfffede04>
1010dfa4:	8c00fd36 	bltu	r17,r16,1010e39c <__divdf3+0x714>
1010dfa8:	8440fb26 	beq	r16,r17,1010e398 <__divdf3+0x710>
1010dfac:	8007883a 	mov	r3,r16
1010dfb0:	ad7fffc4 	addi	r21,r21,-1
1010dfb4:	0021883a 	mov	r16,zero
1010dfb8:	4004d63a 	srli	r2,r8,24
1010dfbc:	8822923a 	slli	r17,r17,8
1010dfc0:	1809883a 	mov	r4,r3
1010dfc4:	402c923a 	slli	r22,r8,8
1010dfc8:	88b8b03a 	or	fp,r17,r2
1010dfcc:	e028d43a 	srli	r20,fp,16
1010dfd0:	d8c00015 	stw	r3,0(sp)
1010dfd4:	e5ffffcc 	andi	r23,fp,65535
1010dfd8:	a00b883a 	mov	r5,r20
1010dfdc:	01026400 	call	10102640 <__udivsi3>
1010dfe0:	d8c00017 	ldw	r3,0(sp)
1010dfe4:	a00b883a 	mov	r5,r20
1010dfe8:	d8800315 	stw	r2,12(sp)
1010dfec:	1809883a 	mov	r4,r3
1010dff0:	01026a40 	call	101026a4 <__umodsi3>
1010dff4:	d9800317 	ldw	r6,12(sp)
1010dff8:	1006943a 	slli	r3,r2,16
1010dffc:	9004d43a 	srli	r2,r18,16
1010e000:	b9a3383a 	mul	r17,r23,r6
1010e004:	10c4b03a 	or	r2,r2,r3
1010e008:	1440062e 	bgeu	r2,r17,1010e024 <__divdf3+0x39c>
1010e00c:	1705883a 	add	r2,r2,fp
1010e010:	30ffffc4 	addi	r3,r6,-1
1010e014:	1700ee36 	bltu	r2,fp,1010e3d0 <__divdf3+0x748>
1010e018:	1440ed2e 	bgeu	r2,r17,1010e3d0 <__divdf3+0x748>
1010e01c:	31bfff84 	addi	r6,r6,-2
1010e020:	1705883a 	add	r2,r2,fp
1010e024:	1463c83a 	sub	r17,r2,r17
1010e028:	a00b883a 	mov	r5,r20
1010e02c:	8809883a 	mov	r4,r17
1010e030:	d9800315 	stw	r6,12(sp)
1010e034:	01026400 	call	10102640 <__udivsi3>
1010e038:	a00b883a 	mov	r5,r20
1010e03c:	8809883a 	mov	r4,r17
1010e040:	d8800215 	stw	r2,8(sp)
1010e044:	01026a40 	call	101026a4 <__umodsi3>
1010e048:	d9c00217 	ldw	r7,8(sp)
1010e04c:	1004943a 	slli	r2,r2,16
1010e050:	94bfffcc 	andi	r18,r18,65535
1010e054:	b9d1383a 	mul	r8,r23,r7
1010e058:	90a4b03a 	or	r18,r18,r2
1010e05c:	d9800317 	ldw	r6,12(sp)
1010e060:	9200062e 	bgeu	r18,r8,1010e07c <__divdf3+0x3f4>
1010e064:	9725883a 	add	r18,r18,fp
1010e068:	38bfffc4 	addi	r2,r7,-1
1010e06c:	9700d636 	bltu	r18,fp,1010e3c8 <__divdf3+0x740>
1010e070:	9200d52e 	bgeu	r18,r8,1010e3c8 <__divdf3+0x740>
1010e074:	39ffff84 	addi	r7,r7,-2
1010e078:	9725883a 	add	r18,r18,fp
1010e07c:	3004943a 	slli	r2,r6,16
1010e080:	b012d43a 	srli	r9,r22,16
1010e084:	b1bfffcc 	andi	r6,r22,65535
1010e088:	11e2b03a 	or	r17,r2,r7
1010e08c:	8806d43a 	srli	r3,r17,16
1010e090:	893fffcc 	andi	r4,r17,65535
1010e094:	218b383a 	mul	r5,r4,r6
1010e098:	30c5383a 	mul	r2,r6,r3
1010e09c:	2249383a 	mul	r4,r4,r9
1010e0a0:	280ed43a 	srli	r7,r5,16
1010e0a4:	9225c83a 	sub	r18,r18,r8
1010e0a8:	2089883a 	add	r4,r4,r2
1010e0ac:	3909883a 	add	r4,r7,r4
1010e0b0:	1a47383a 	mul	r3,r3,r9
1010e0b4:	2080022e 	bgeu	r4,r2,1010e0c0 <__divdf3+0x438>
1010e0b8:	00800074 	movhi	r2,1
1010e0bc:	1887883a 	add	r3,r3,r2
1010e0c0:	2004d43a 	srli	r2,r4,16
1010e0c4:	2008943a 	slli	r4,r4,16
1010e0c8:	297fffcc 	andi	r5,r5,65535
1010e0cc:	10c7883a 	add	r3,r2,r3
1010e0d0:	2149883a 	add	r4,r4,r5
1010e0d4:	90c0a536 	bltu	r18,r3,1010e36c <__divdf3+0x6e4>
1010e0d8:	90c0bf26 	beq	r18,r3,1010e3d8 <__divdf3+0x750>
1010e0dc:	90c7c83a 	sub	r3,r18,r3
1010e0e0:	810fc83a 	sub	r7,r16,r4
1010e0e4:	81e5803a 	cmpltu	r18,r16,r7
1010e0e8:	1ca5c83a 	sub	r18,r3,r18
1010e0ec:	e480c126 	beq	fp,r18,1010e3f4 <__divdf3+0x76c>
1010e0f0:	a00b883a 	mov	r5,r20
1010e0f4:	9009883a 	mov	r4,r18
1010e0f8:	d9800315 	stw	r6,12(sp)
1010e0fc:	d9c00215 	stw	r7,8(sp)
1010e100:	da400115 	stw	r9,4(sp)
1010e104:	01026400 	call	10102640 <__udivsi3>
1010e108:	a00b883a 	mov	r5,r20
1010e10c:	9009883a 	mov	r4,r18
1010e110:	d8800015 	stw	r2,0(sp)
1010e114:	01026a40 	call	101026a4 <__umodsi3>
1010e118:	d9c00217 	ldw	r7,8(sp)
1010e11c:	da000017 	ldw	r8,0(sp)
1010e120:	1006943a 	slli	r3,r2,16
1010e124:	3804d43a 	srli	r2,r7,16
1010e128:	ba21383a 	mul	r16,r23,r8
1010e12c:	d9800317 	ldw	r6,12(sp)
1010e130:	10c4b03a 	or	r2,r2,r3
1010e134:	da400117 	ldw	r9,4(sp)
1010e138:	1400062e 	bgeu	r2,r16,1010e154 <__divdf3+0x4cc>
1010e13c:	1705883a 	add	r2,r2,fp
1010e140:	40ffffc4 	addi	r3,r8,-1
1010e144:	1700ad36 	bltu	r2,fp,1010e3fc <__divdf3+0x774>
1010e148:	1400ac2e 	bgeu	r2,r16,1010e3fc <__divdf3+0x774>
1010e14c:	423fff84 	addi	r8,r8,-2
1010e150:	1705883a 	add	r2,r2,fp
1010e154:	1421c83a 	sub	r16,r2,r16
1010e158:	a00b883a 	mov	r5,r20
1010e15c:	8009883a 	mov	r4,r16
1010e160:	d9800315 	stw	r6,12(sp)
1010e164:	d9c00215 	stw	r7,8(sp)
1010e168:	da000015 	stw	r8,0(sp)
1010e16c:	da400115 	stw	r9,4(sp)
1010e170:	01026400 	call	10102640 <__udivsi3>
1010e174:	8009883a 	mov	r4,r16
1010e178:	a00b883a 	mov	r5,r20
1010e17c:	1025883a 	mov	r18,r2
1010e180:	01026a40 	call	101026a4 <__umodsi3>
1010e184:	d9c00217 	ldw	r7,8(sp)
1010e188:	1004943a 	slli	r2,r2,16
1010e18c:	bcaf383a 	mul	r23,r23,r18
1010e190:	393fffcc 	andi	r4,r7,65535
1010e194:	2088b03a 	or	r4,r4,r2
1010e198:	d9800317 	ldw	r6,12(sp)
1010e19c:	da000017 	ldw	r8,0(sp)
1010e1a0:	da400117 	ldw	r9,4(sp)
1010e1a4:	25c0062e 	bgeu	r4,r23,1010e1c0 <__divdf3+0x538>
1010e1a8:	2709883a 	add	r4,r4,fp
1010e1ac:	90bfffc4 	addi	r2,r18,-1
1010e1b0:	27009436 	bltu	r4,fp,1010e404 <__divdf3+0x77c>
1010e1b4:	25c0932e 	bgeu	r4,r23,1010e404 <__divdf3+0x77c>
1010e1b8:	94bfff84 	addi	r18,r18,-2
1010e1bc:	2709883a 	add	r4,r4,fp
1010e1c0:	4004943a 	slli	r2,r8,16
1010e1c4:	25efc83a 	sub	r23,r4,r23
1010e1c8:	1490b03a 	or	r8,r2,r18
1010e1cc:	4008d43a 	srli	r4,r8,16
1010e1d0:	40ffffcc 	andi	r3,r8,65535
1010e1d4:	30c5383a 	mul	r2,r6,r3
1010e1d8:	1a47383a 	mul	r3,r3,r9
1010e1dc:	310d383a 	mul	r6,r6,r4
1010e1e0:	100ad43a 	srli	r5,r2,16
1010e1e4:	4913383a 	mul	r9,r9,r4
1010e1e8:	1987883a 	add	r3,r3,r6
1010e1ec:	28c7883a 	add	r3,r5,r3
1010e1f0:	1980022e 	bgeu	r3,r6,1010e1fc <__divdf3+0x574>
1010e1f4:	01000074 	movhi	r4,1
1010e1f8:	4913883a 	add	r9,r9,r4
1010e1fc:	1808d43a 	srli	r4,r3,16
1010e200:	1806943a 	slli	r3,r3,16
1010e204:	10bfffcc 	andi	r2,r2,65535
1010e208:	2253883a 	add	r9,r4,r9
1010e20c:	1887883a 	add	r3,r3,r2
1010e210:	ba403836 	bltu	r23,r9,1010e2f4 <__divdf3+0x66c>
1010e214:	ba403626 	beq	r23,r9,1010e2f0 <__divdf3+0x668>
1010e218:	42000054 	ori	r8,r8,1
1010e21c:	a880ffc4 	addi	r2,r21,1023
1010e220:	00bf570e 	bge	zero,r2,1010df80 <__alt_data_end+0xfffedf80>
1010e224:	40c001cc 	andi	r3,r8,7
1010e228:	18000726 	beq	r3,zero,1010e248 <__divdf3+0x5c0>
1010e22c:	40c003cc 	andi	r3,r8,15
1010e230:	01000104 	movi	r4,4
1010e234:	19000426 	beq	r3,r4,1010e248 <__divdf3+0x5c0>
1010e238:	4107883a 	add	r3,r8,r4
1010e23c:	1a11803a 	cmpltu	r8,r3,r8
1010e240:	8a23883a 	add	r17,r17,r8
1010e244:	1811883a 	mov	r8,r3
1010e248:	88c0402c 	andhi	r3,r17,256
1010e24c:	18000426 	beq	r3,zero,1010e260 <__divdf3+0x5d8>
1010e250:	00ffc034 	movhi	r3,65280
1010e254:	18ffffc4 	addi	r3,r3,-1
1010e258:	a8810004 	addi	r2,r21,1024
1010e25c:	88e2703a 	and	r17,r17,r3
1010e260:	00c1ff84 	movi	r3,2046
1010e264:	18bee316 	blt	r3,r2,1010ddf4 <__alt_data_end+0xfffeddf4>
1010e268:	8824977a 	slli	r18,r17,29
1010e26c:	4010d0fa 	srli	r8,r8,3
1010e270:	8822927a 	slli	r17,r17,9
1010e274:	1081ffcc 	andi	r2,r2,2047
1010e278:	9224b03a 	or	r18,r18,r8
1010e27c:	880ad33a 	srli	r5,r17,12
1010e280:	98c0004c 	andi	r3,r19,1
1010e284:	003edf06 	br	1010de04 <__alt_data_end+0xfffede04>
1010e288:	8080022c 	andhi	r2,r16,8
1010e28c:	10001226 	beq	r2,zero,1010e2d8 <__divdf3+0x650>
1010e290:	8880022c 	andhi	r2,r17,8
1010e294:	1000101e 	bne	r2,zero,1010e2d8 <__divdf3+0x650>
1010e298:	00800434 	movhi	r2,16
1010e29c:	89400234 	orhi	r5,r17,8
1010e2a0:	10bfffc4 	addi	r2,r2,-1
1010e2a4:	b007883a 	mov	r3,r22
1010e2a8:	288a703a 	and	r5,r5,r2
1010e2ac:	4025883a 	mov	r18,r8
1010e2b0:	003f3106 	br	1010df78 <__alt_data_end+0xfffedf78>
1010e2b4:	008000c4 	movi	r2,3
1010e2b8:	3880a626 	beq	r7,r2,1010e554 <__divdf3+0x8cc>
1010e2bc:	00800044 	movi	r2,1
1010e2c0:	3880521e 	bne	r7,r2,1010e40c <__divdf3+0x784>
1010e2c4:	b807883a 	mov	r3,r23
1010e2c8:	0005883a 	mov	r2,zero
1010e2cc:	000b883a 	mov	r5,zero
1010e2d0:	0025883a 	mov	r18,zero
1010e2d4:	003ecb06 	br	1010de04 <__alt_data_end+0xfffede04>
1010e2d8:	00800434 	movhi	r2,16
1010e2dc:	81400234 	orhi	r5,r16,8
1010e2e0:	10bfffc4 	addi	r2,r2,-1
1010e2e4:	a007883a 	mov	r3,r20
1010e2e8:	288a703a 	and	r5,r5,r2
1010e2ec:	003f2206 	br	1010df78 <__alt_data_end+0xfffedf78>
1010e2f0:	183fca26 	beq	r3,zero,1010e21c <__alt_data_end+0xfffee21c>
1010e2f4:	e5ef883a 	add	r23,fp,r23
1010e2f8:	40bfffc4 	addi	r2,r8,-1
1010e2fc:	bf00392e 	bgeu	r23,fp,1010e3e4 <__divdf3+0x75c>
1010e300:	1011883a 	mov	r8,r2
1010e304:	ba7fc41e 	bne	r23,r9,1010e218 <__alt_data_end+0xfffee218>
1010e308:	b0ffc31e 	bne	r22,r3,1010e218 <__alt_data_end+0xfffee218>
1010e30c:	003fc306 	br	1010e21c <__alt_data_end+0xfffee21c>
1010e310:	143ff604 	addi	r16,r2,-40
1010e314:	9c20983a 	sll	r16,r19,r16
1010e318:	0025883a 	mov	r18,zero
1010e31c:	003ee206 	br	1010dea8 <__alt_data_end+0xfffedea8>
1010e320:	d9800315 	stw	r6,12(sp)
1010e324:	d9c00215 	stw	r7,8(sp)
1010e328:	010f9e00 	call	1010f9e0 <__clzsi2>
1010e32c:	10800804 	addi	r2,r2,32
1010e330:	d9c00217 	ldw	r7,8(sp)
1010e334:	d9800317 	ldw	r6,12(sp)
1010e338:	003ed106 	br	1010de80 <__alt_data_end+0xfffede80>
1010e33c:	147ff604 	addi	r17,r2,-40
1010e340:	3462983a 	sll	r17,r6,r17
1010e344:	0011883a 	mov	r8,zero
1010e348:	003ef506 	br	1010df20 <__alt_data_end+0xfffedf20>
1010e34c:	3009883a 	mov	r4,r6
1010e350:	d9800315 	stw	r6,12(sp)
1010e354:	da400115 	stw	r9,4(sp)
1010e358:	010f9e00 	call	1010f9e0 <__clzsi2>
1010e35c:	10800804 	addi	r2,r2,32
1010e360:	da400117 	ldw	r9,4(sp)
1010e364:	d9800317 	ldw	r6,12(sp)
1010e368:	003ee306 	br	1010def8 <__alt_data_end+0xfffedef8>
1010e36c:	85a1883a 	add	r16,r16,r22
1010e370:	8585803a 	cmpltu	r2,r16,r22
1010e374:	1705883a 	add	r2,r2,fp
1010e378:	14a5883a 	add	r18,r2,r18
1010e37c:	88bfffc4 	addi	r2,r17,-1
1010e380:	e4800c2e 	bgeu	fp,r18,1010e3b4 <__divdf3+0x72c>
1010e384:	90c03e36 	bltu	r18,r3,1010e480 <__divdf3+0x7f8>
1010e388:	1c806926 	beq	r3,r18,1010e530 <__divdf3+0x8a8>
1010e38c:	90c7c83a 	sub	r3,r18,r3
1010e390:	1023883a 	mov	r17,r2
1010e394:	003f5206 	br	1010e0e0 <__alt_data_end+0xfffee0e0>
1010e398:	923f0436 	bltu	r18,r8,1010dfac <__alt_data_end+0xfffedfac>
1010e39c:	800897fa 	slli	r4,r16,31
1010e3a0:	9004d07a 	srli	r2,r18,1
1010e3a4:	8006d07a 	srli	r3,r16,1
1010e3a8:	902097fa 	slli	r16,r18,31
1010e3ac:	20a4b03a 	or	r18,r4,r2
1010e3b0:	003f0106 	br	1010dfb8 <__alt_data_end+0xfffedfb8>
1010e3b4:	e4bff51e 	bne	fp,r18,1010e38c <__alt_data_end+0xfffee38c>
1010e3b8:	85bff22e 	bgeu	r16,r22,1010e384 <__alt_data_end+0xfffee384>
1010e3bc:	e0c7c83a 	sub	r3,fp,r3
1010e3c0:	1023883a 	mov	r17,r2
1010e3c4:	003f4606 	br	1010e0e0 <__alt_data_end+0xfffee0e0>
1010e3c8:	100f883a 	mov	r7,r2
1010e3cc:	003f2b06 	br	1010e07c <__alt_data_end+0xfffee07c>
1010e3d0:	180d883a 	mov	r6,r3
1010e3d4:	003f1306 	br	1010e024 <__alt_data_end+0xfffee024>
1010e3d8:	813fe436 	bltu	r16,r4,1010e36c <__alt_data_end+0xfffee36c>
1010e3dc:	0007883a 	mov	r3,zero
1010e3e0:	003f3f06 	br	1010e0e0 <__alt_data_end+0xfffee0e0>
1010e3e4:	ba402c36 	bltu	r23,r9,1010e498 <__divdf3+0x810>
1010e3e8:	4dc05426 	beq	r9,r23,1010e53c <__divdf3+0x8b4>
1010e3ec:	1011883a 	mov	r8,r2
1010e3f0:	003f8906 	br	1010e218 <__alt_data_end+0xfffee218>
1010e3f4:	023fffc4 	movi	r8,-1
1010e3f8:	003f8806 	br	1010e21c <__alt_data_end+0xfffee21c>
1010e3fc:	1811883a 	mov	r8,r3
1010e400:	003f5406 	br	1010e154 <__alt_data_end+0xfffee154>
1010e404:	1025883a 	mov	r18,r2
1010e408:	003f6d06 	br	1010e1c0 <__alt_data_end+0xfffee1c0>
1010e40c:	b827883a 	mov	r19,r23
1010e410:	003f8206 	br	1010e21c <__alt_data_end+0xfffee21c>
1010e414:	010007c4 	movi	r4,31
1010e418:	20c02616 	blt	r4,r3,1010e4b4 <__divdf3+0x82c>
1010e41c:	00800804 	movi	r2,32
1010e420:	10c5c83a 	sub	r2,r2,r3
1010e424:	888a983a 	sll	r5,r17,r2
1010e428:	40c8d83a 	srl	r4,r8,r3
1010e42c:	4084983a 	sll	r2,r8,r2
1010e430:	88e2d83a 	srl	r17,r17,r3
1010e434:	2906b03a 	or	r3,r5,r4
1010e438:	1004c03a 	cmpne	r2,r2,zero
1010e43c:	1886b03a 	or	r3,r3,r2
1010e440:	188001cc 	andi	r2,r3,7
1010e444:	10000726 	beq	r2,zero,1010e464 <__divdf3+0x7dc>
1010e448:	188003cc 	andi	r2,r3,15
1010e44c:	01000104 	movi	r4,4
1010e450:	11000426 	beq	r2,r4,1010e464 <__divdf3+0x7dc>
1010e454:	1805883a 	mov	r2,r3
1010e458:	10c00104 	addi	r3,r2,4
1010e45c:	1885803a 	cmpltu	r2,r3,r2
1010e460:	88a3883a 	add	r17,r17,r2
1010e464:	8880202c 	andhi	r2,r17,128
1010e468:	10002726 	beq	r2,zero,1010e508 <__divdf3+0x880>
1010e46c:	98c0004c 	andi	r3,r19,1
1010e470:	00800044 	movi	r2,1
1010e474:	000b883a 	mov	r5,zero
1010e478:	0025883a 	mov	r18,zero
1010e47c:	003e6106 	br	1010de04 <__alt_data_end+0xfffede04>
1010e480:	85a1883a 	add	r16,r16,r22
1010e484:	8585803a 	cmpltu	r2,r16,r22
1010e488:	1705883a 	add	r2,r2,fp
1010e48c:	14a5883a 	add	r18,r2,r18
1010e490:	8c7fff84 	addi	r17,r17,-2
1010e494:	003f1106 	br	1010e0dc <__alt_data_end+0xfffee0dc>
1010e498:	b589883a 	add	r4,r22,r22
1010e49c:	25ad803a 	cmpltu	r22,r4,r22
1010e4a0:	b739883a 	add	fp,r22,fp
1010e4a4:	40bfff84 	addi	r2,r8,-2
1010e4a8:	bf2f883a 	add	r23,r23,fp
1010e4ac:	202d883a 	mov	r22,r4
1010e4b0:	003f9306 	br	1010e300 <__alt_data_end+0xfffee300>
1010e4b4:	013ff844 	movi	r4,-31
1010e4b8:	2085c83a 	sub	r2,r4,r2
1010e4bc:	8888d83a 	srl	r4,r17,r2
1010e4c0:	00800804 	movi	r2,32
1010e4c4:	18802126 	beq	r3,r2,1010e54c <__divdf3+0x8c4>
1010e4c8:	00801004 	movi	r2,64
1010e4cc:	10c5c83a 	sub	r2,r2,r3
1010e4d0:	8884983a 	sll	r2,r17,r2
1010e4d4:	1204b03a 	or	r2,r2,r8
1010e4d8:	1004c03a 	cmpne	r2,r2,zero
1010e4dc:	2084b03a 	or	r2,r4,r2
1010e4e0:	144001cc 	andi	r17,r2,7
1010e4e4:	88000d1e 	bne	r17,zero,1010e51c <__divdf3+0x894>
1010e4e8:	000b883a 	mov	r5,zero
1010e4ec:	1024d0fa 	srli	r18,r2,3
1010e4f0:	98c0004c 	andi	r3,r19,1
1010e4f4:	0005883a 	mov	r2,zero
1010e4f8:	9464b03a 	or	r18,r18,r17
1010e4fc:	003e4106 	br	1010de04 <__alt_data_end+0xfffede04>
1010e500:	1007883a 	mov	r3,r2
1010e504:	0023883a 	mov	r17,zero
1010e508:	880a927a 	slli	r5,r17,9
1010e50c:	1805883a 	mov	r2,r3
1010e510:	8822977a 	slli	r17,r17,29
1010e514:	280ad33a 	srli	r5,r5,12
1010e518:	003ff406 	br	1010e4ec <__alt_data_end+0xfffee4ec>
1010e51c:	10c003cc 	andi	r3,r2,15
1010e520:	01000104 	movi	r4,4
1010e524:	193ff626 	beq	r3,r4,1010e500 <__alt_data_end+0xfffee500>
1010e528:	0023883a 	mov	r17,zero
1010e52c:	003fca06 	br	1010e458 <__alt_data_end+0xfffee458>
1010e530:	813fd336 	bltu	r16,r4,1010e480 <__alt_data_end+0xfffee480>
1010e534:	1023883a 	mov	r17,r2
1010e538:	003fa806 	br	1010e3dc <__alt_data_end+0xfffee3dc>
1010e53c:	b0ffd636 	bltu	r22,r3,1010e498 <__alt_data_end+0xfffee498>
1010e540:	1011883a 	mov	r8,r2
1010e544:	b0ff341e 	bne	r22,r3,1010e218 <__alt_data_end+0xfffee218>
1010e548:	003f3406 	br	1010e21c <__alt_data_end+0xfffee21c>
1010e54c:	0005883a 	mov	r2,zero
1010e550:	003fe006 	br	1010e4d4 <__alt_data_end+0xfffee4d4>
1010e554:	00800434 	movhi	r2,16
1010e558:	89400234 	orhi	r5,r17,8
1010e55c:	10bfffc4 	addi	r2,r2,-1
1010e560:	b807883a 	mov	r3,r23
1010e564:	288a703a 	and	r5,r5,r2
1010e568:	4025883a 	mov	r18,r8
1010e56c:	003e8206 	br	1010df78 <__alt_data_end+0xfffedf78>

1010e570 <__eqdf2>:
1010e570:	2804d53a 	srli	r2,r5,20
1010e574:	3806d53a 	srli	r3,r7,20
1010e578:	02000434 	movhi	r8,16
1010e57c:	423fffc4 	addi	r8,r8,-1
1010e580:	1081ffcc 	andi	r2,r2,2047
1010e584:	0281ffc4 	movi	r10,2047
1010e588:	2a12703a 	and	r9,r5,r8
1010e58c:	18c1ffcc 	andi	r3,r3,2047
1010e590:	3a10703a 	and	r8,r7,r8
1010e594:	280ad7fa 	srli	r5,r5,31
1010e598:	380ed7fa 	srli	r7,r7,31
1010e59c:	12801026 	beq	r2,r10,1010e5e0 <__eqdf2+0x70>
1010e5a0:	0281ffc4 	movi	r10,2047
1010e5a4:	1a800a26 	beq	r3,r10,1010e5d0 <__eqdf2+0x60>
1010e5a8:	10c00226 	beq	r2,r3,1010e5b4 <__eqdf2+0x44>
1010e5ac:	00800044 	movi	r2,1
1010e5b0:	f800283a 	ret
1010e5b4:	4a3ffd1e 	bne	r9,r8,1010e5ac <__alt_data_end+0xfffee5ac>
1010e5b8:	21bffc1e 	bne	r4,r6,1010e5ac <__alt_data_end+0xfffee5ac>
1010e5bc:	29c00c26 	beq	r5,r7,1010e5f0 <__eqdf2+0x80>
1010e5c0:	103ffa1e 	bne	r2,zero,1010e5ac <__alt_data_end+0xfffee5ac>
1010e5c4:	2244b03a 	or	r2,r4,r9
1010e5c8:	1004c03a 	cmpne	r2,r2,zero
1010e5cc:	f800283a 	ret
1010e5d0:	3214b03a 	or	r10,r6,r8
1010e5d4:	503ff426 	beq	r10,zero,1010e5a8 <__alt_data_end+0xfffee5a8>
1010e5d8:	00800044 	movi	r2,1
1010e5dc:	f800283a 	ret
1010e5e0:	2254b03a 	or	r10,r4,r9
1010e5e4:	503fee26 	beq	r10,zero,1010e5a0 <__alt_data_end+0xfffee5a0>
1010e5e8:	00800044 	movi	r2,1
1010e5ec:	f800283a 	ret
1010e5f0:	0005883a 	mov	r2,zero
1010e5f4:	f800283a 	ret

1010e5f8 <__gedf2>:
1010e5f8:	2804d53a 	srli	r2,r5,20
1010e5fc:	3806d53a 	srli	r3,r7,20
1010e600:	02000434 	movhi	r8,16
1010e604:	423fffc4 	addi	r8,r8,-1
1010e608:	1081ffcc 	andi	r2,r2,2047
1010e60c:	0241ffc4 	movi	r9,2047
1010e610:	2a14703a 	and	r10,r5,r8
1010e614:	18c1ffcc 	andi	r3,r3,2047
1010e618:	3a10703a 	and	r8,r7,r8
1010e61c:	280ad7fa 	srli	r5,r5,31
1010e620:	380ed7fa 	srli	r7,r7,31
1010e624:	12401d26 	beq	r2,r9,1010e69c <__gedf2+0xa4>
1010e628:	0241ffc4 	movi	r9,2047
1010e62c:	1a401226 	beq	r3,r9,1010e678 <__gedf2+0x80>
1010e630:	1000081e 	bne	r2,zero,1010e654 <__gedf2+0x5c>
1010e634:	2296b03a 	or	r11,r4,r10
1010e638:	5813003a 	cmpeq	r9,r11,zero
1010e63c:	1800091e 	bne	r3,zero,1010e664 <__gedf2+0x6c>
1010e640:	3218b03a 	or	r12,r6,r8
1010e644:	6000071e 	bne	r12,zero,1010e664 <__gedf2+0x6c>
1010e648:	0005883a 	mov	r2,zero
1010e64c:	5800101e 	bne	r11,zero,1010e690 <__gedf2+0x98>
1010e650:	f800283a 	ret
1010e654:	18000c1e 	bne	r3,zero,1010e688 <__gedf2+0x90>
1010e658:	3212b03a 	or	r9,r6,r8
1010e65c:	48000c26 	beq	r9,zero,1010e690 <__gedf2+0x98>
1010e660:	0013883a 	mov	r9,zero
1010e664:	39c03fcc 	andi	r7,r7,255
1010e668:	48000826 	beq	r9,zero,1010e68c <__gedf2+0x94>
1010e66c:	38000926 	beq	r7,zero,1010e694 <__gedf2+0x9c>
1010e670:	00800044 	movi	r2,1
1010e674:	f800283a 	ret
1010e678:	3212b03a 	or	r9,r6,r8
1010e67c:	483fec26 	beq	r9,zero,1010e630 <__alt_data_end+0xfffee630>
1010e680:	00bfff84 	movi	r2,-2
1010e684:	f800283a 	ret
1010e688:	39c03fcc 	andi	r7,r7,255
1010e68c:	29c00626 	beq	r5,r7,1010e6a8 <__gedf2+0xb0>
1010e690:	283ff726 	beq	r5,zero,1010e670 <__alt_data_end+0xfffee670>
1010e694:	00bfffc4 	movi	r2,-1
1010e698:	f800283a 	ret
1010e69c:	2292b03a 	or	r9,r4,r10
1010e6a0:	483fe126 	beq	r9,zero,1010e628 <__alt_data_end+0xfffee628>
1010e6a4:	003ff606 	br	1010e680 <__alt_data_end+0xfffee680>
1010e6a8:	18bff916 	blt	r3,r2,1010e690 <__alt_data_end+0xfffee690>
1010e6ac:	10c00316 	blt	r2,r3,1010e6bc <__gedf2+0xc4>
1010e6b0:	42bff736 	bltu	r8,r10,1010e690 <__alt_data_end+0xfffee690>
1010e6b4:	52000326 	beq	r10,r8,1010e6c4 <__gedf2+0xcc>
1010e6b8:	5200042e 	bgeu	r10,r8,1010e6cc <__gedf2+0xd4>
1010e6bc:	283fec1e 	bne	r5,zero,1010e670 <__alt_data_end+0xfffee670>
1010e6c0:	003ff406 	br	1010e694 <__alt_data_end+0xfffee694>
1010e6c4:	313ff236 	bltu	r6,r4,1010e690 <__alt_data_end+0xfffee690>
1010e6c8:	21bffc36 	bltu	r4,r6,1010e6bc <__alt_data_end+0xfffee6bc>
1010e6cc:	0005883a 	mov	r2,zero
1010e6d0:	f800283a 	ret

1010e6d4 <__ledf2>:
1010e6d4:	2804d53a 	srli	r2,r5,20
1010e6d8:	3810d53a 	srli	r8,r7,20
1010e6dc:	00c00434 	movhi	r3,16
1010e6e0:	18ffffc4 	addi	r3,r3,-1
1010e6e4:	1081ffcc 	andi	r2,r2,2047
1010e6e8:	0241ffc4 	movi	r9,2047
1010e6ec:	28d4703a 	and	r10,r5,r3
1010e6f0:	4201ffcc 	andi	r8,r8,2047
1010e6f4:	38c6703a 	and	r3,r7,r3
1010e6f8:	280ad7fa 	srli	r5,r5,31
1010e6fc:	380ed7fa 	srli	r7,r7,31
1010e700:	12401f26 	beq	r2,r9,1010e780 <__ledf2+0xac>
1010e704:	0241ffc4 	movi	r9,2047
1010e708:	42401426 	beq	r8,r9,1010e75c <__ledf2+0x88>
1010e70c:	1000091e 	bne	r2,zero,1010e734 <__ledf2+0x60>
1010e710:	2296b03a 	or	r11,r4,r10
1010e714:	5813003a 	cmpeq	r9,r11,zero
1010e718:	29403fcc 	andi	r5,r5,255
1010e71c:	40000a1e 	bne	r8,zero,1010e748 <__ledf2+0x74>
1010e720:	30d8b03a 	or	r12,r6,r3
1010e724:	6000081e 	bne	r12,zero,1010e748 <__ledf2+0x74>
1010e728:	0005883a 	mov	r2,zero
1010e72c:	5800111e 	bne	r11,zero,1010e774 <__ledf2+0xa0>
1010e730:	f800283a 	ret
1010e734:	29403fcc 	andi	r5,r5,255
1010e738:	40000c1e 	bne	r8,zero,1010e76c <__ledf2+0x98>
1010e73c:	30d2b03a 	or	r9,r6,r3
1010e740:	48000c26 	beq	r9,zero,1010e774 <__ledf2+0xa0>
1010e744:	0013883a 	mov	r9,zero
1010e748:	39c03fcc 	andi	r7,r7,255
1010e74c:	48000826 	beq	r9,zero,1010e770 <__ledf2+0x9c>
1010e750:	38001126 	beq	r7,zero,1010e798 <__ledf2+0xc4>
1010e754:	00800044 	movi	r2,1
1010e758:	f800283a 	ret
1010e75c:	30d2b03a 	or	r9,r6,r3
1010e760:	483fea26 	beq	r9,zero,1010e70c <__alt_data_end+0xfffee70c>
1010e764:	00800084 	movi	r2,2
1010e768:	f800283a 	ret
1010e76c:	39c03fcc 	andi	r7,r7,255
1010e770:	39400726 	beq	r7,r5,1010e790 <__ledf2+0xbc>
1010e774:	2800081e 	bne	r5,zero,1010e798 <__ledf2+0xc4>
1010e778:	00800044 	movi	r2,1
1010e77c:	f800283a 	ret
1010e780:	2292b03a 	or	r9,r4,r10
1010e784:	483fdf26 	beq	r9,zero,1010e704 <__alt_data_end+0xfffee704>
1010e788:	00800084 	movi	r2,2
1010e78c:	f800283a 	ret
1010e790:	4080030e 	bge	r8,r2,1010e7a0 <__ledf2+0xcc>
1010e794:	383fef26 	beq	r7,zero,1010e754 <__alt_data_end+0xfffee754>
1010e798:	00bfffc4 	movi	r2,-1
1010e79c:	f800283a 	ret
1010e7a0:	123feb16 	blt	r2,r8,1010e750 <__alt_data_end+0xfffee750>
1010e7a4:	1abff336 	bltu	r3,r10,1010e774 <__alt_data_end+0xfffee774>
1010e7a8:	50c00326 	beq	r10,r3,1010e7b8 <__ledf2+0xe4>
1010e7ac:	50c0042e 	bgeu	r10,r3,1010e7c0 <__ledf2+0xec>
1010e7b0:	283fe81e 	bne	r5,zero,1010e754 <__alt_data_end+0xfffee754>
1010e7b4:	003ff806 	br	1010e798 <__alt_data_end+0xfffee798>
1010e7b8:	313fee36 	bltu	r6,r4,1010e774 <__alt_data_end+0xfffee774>
1010e7bc:	21bffc36 	bltu	r4,r6,1010e7b0 <__alt_data_end+0xfffee7b0>
1010e7c0:	0005883a 	mov	r2,zero
1010e7c4:	f800283a 	ret

1010e7c8 <__muldf3>:
1010e7c8:	defff304 	addi	sp,sp,-52
1010e7cc:	2804d53a 	srli	r2,r5,20
1010e7d0:	dd800915 	stw	r22,36(sp)
1010e7d4:	282cd7fa 	srli	r22,r5,31
1010e7d8:	dc000315 	stw	r16,12(sp)
1010e7dc:	04000434 	movhi	r16,16
1010e7e0:	dd400815 	stw	r21,32(sp)
1010e7e4:	dc800515 	stw	r18,20(sp)
1010e7e8:	843fffc4 	addi	r16,r16,-1
1010e7ec:	dfc00c15 	stw	ra,48(sp)
1010e7f0:	df000b15 	stw	fp,44(sp)
1010e7f4:	ddc00a15 	stw	r23,40(sp)
1010e7f8:	dd000715 	stw	r20,28(sp)
1010e7fc:	dcc00615 	stw	r19,24(sp)
1010e800:	dc400415 	stw	r17,16(sp)
1010e804:	1481ffcc 	andi	r18,r2,2047
1010e808:	2c20703a 	and	r16,r5,r16
1010e80c:	b02b883a 	mov	r21,r22
1010e810:	b2403fcc 	andi	r9,r22,255
1010e814:	90006026 	beq	r18,zero,1010e998 <__muldf3+0x1d0>
1010e818:	0081ffc4 	movi	r2,2047
1010e81c:	2029883a 	mov	r20,r4
1010e820:	90803626 	beq	r18,r2,1010e8fc <__muldf3+0x134>
1010e824:	80800434 	orhi	r2,r16,16
1010e828:	100490fa 	slli	r2,r2,3
1010e82c:	2020d77a 	srli	r16,r4,29
1010e830:	202890fa 	slli	r20,r4,3
1010e834:	94bf0044 	addi	r18,r18,-1023
1010e838:	80a0b03a 	or	r16,r16,r2
1010e83c:	0027883a 	mov	r19,zero
1010e840:	0039883a 	mov	fp,zero
1010e844:	3804d53a 	srli	r2,r7,20
1010e848:	382ed7fa 	srli	r23,r7,31
1010e84c:	04400434 	movhi	r17,16
1010e850:	8c7fffc4 	addi	r17,r17,-1
1010e854:	1081ffcc 	andi	r2,r2,2047
1010e858:	3011883a 	mov	r8,r6
1010e85c:	3c62703a 	and	r17,r7,r17
1010e860:	ba803fcc 	andi	r10,r23,255
1010e864:	10006d26 	beq	r2,zero,1010ea1c <__muldf3+0x254>
1010e868:	00c1ffc4 	movi	r3,2047
1010e86c:	10c06526 	beq	r2,r3,1010ea04 <__muldf3+0x23c>
1010e870:	88c00434 	orhi	r3,r17,16
1010e874:	180690fa 	slli	r3,r3,3
1010e878:	3022d77a 	srli	r17,r6,29
1010e87c:	301090fa 	slli	r8,r6,3
1010e880:	10bf0044 	addi	r2,r2,-1023
1010e884:	88e2b03a 	or	r17,r17,r3
1010e888:	000b883a 	mov	r5,zero
1010e88c:	9085883a 	add	r2,r18,r2
1010e890:	2cc8b03a 	or	r4,r5,r19
1010e894:	00c003c4 	movi	r3,15
1010e898:	bdacf03a 	xor	r22,r23,r22
1010e89c:	12c00044 	addi	r11,r2,1
1010e8a0:	19009936 	bltu	r3,r4,1010eb08 <__muldf3+0x340>
1010e8a4:	200890ba 	slli	r4,r4,2
1010e8a8:	00c40474 	movhi	r3,4113
1010e8ac:	18fa2f04 	addi	r3,r3,-5956
1010e8b0:	20c9883a 	add	r4,r4,r3
1010e8b4:	20c00017 	ldw	r3,0(r4)
1010e8b8:	1800683a 	jmp	r3
1010e8bc:	1010eb08 	cmpgei	zero,r2,17324
1010e8c0:	1010e91c 	xori	zero,r2,17316
1010e8c4:	1010e91c 	xori	zero,r2,17316
1010e8c8:	1010e918 	cmpnei	zero,r2,17316
1010e8cc:	1010eae4 	muli	zero,r2,17323
1010e8d0:	1010eae4 	muli	zero,r2,17323
1010e8d4:	1010eacc 	andi	zero,r2,17323
1010e8d8:	1010e918 	cmpnei	zero,r2,17316
1010e8dc:	1010eae4 	muli	zero,r2,17323
1010e8e0:	1010eacc 	andi	zero,r2,17323
1010e8e4:	1010eae4 	muli	zero,r2,17323
1010e8e8:	1010e918 	cmpnei	zero,r2,17316
1010e8ec:	1010eaf4 	orhi	zero,r2,17323
1010e8f0:	1010eaf4 	orhi	zero,r2,17323
1010e8f4:	1010eaf4 	orhi	zero,r2,17323
1010e8f8:	1010ed10 	cmplti	zero,r2,17332
1010e8fc:	2404b03a 	or	r2,r4,r16
1010e900:	10006f1e 	bne	r2,zero,1010eac0 <__muldf3+0x2f8>
1010e904:	04c00204 	movi	r19,8
1010e908:	0021883a 	mov	r16,zero
1010e90c:	0029883a 	mov	r20,zero
1010e910:	07000084 	movi	fp,2
1010e914:	003fcb06 	br	1010e844 <__alt_data_end+0xfffee844>
1010e918:	502d883a 	mov	r22,r10
1010e91c:	00800084 	movi	r2,2
1010e920:	28805726 	beq	r5,r2,1010ea80 <__muldf3+0x2b8>
1010e924:	008000c4 	movi	r2,3
1010e928:	28816626 	beq	r5,r2,1010eec4 <__muldf3+0x6fc>
1010e92c:	00800044 	movi	r2,1
1010e930:	2881411e 	bne	r5,r2,1010ee38 <__muldf3+0x670>
1010e934:	b02b883a 	mov	r21,r22
1010e938:	0005883a 	mov	r2,zero
1010e93c:	000b883a 	mov	r5,zero
1010e940:	0029883a 	mov	r20,zero
1010e944:	1004953a 	slli	r2,r2,20
1010e948:	a8c03fcc 	andi	r3,r21,255
1010e94c:	04400434 	movhi	r17,16
1010e950:	8c7fffc4 	addi	r17,r17,-1
1010e954:	180697fa 	slli	r3,r3,31
1010e958:	2c4a703a 	and	r5,r5,r17
1010e95c:	288ab03a 	or	r5,r5,r2
1010e960:	28c6b03a 	or	r3,r5,r3
1010e964:	a005883a 	mov	r2,r20
1010e968:	dfc00c17 	ldw	ra,48(sp)
1010e96c:	df000b17 	ldw	fp,44(sp)
1010e970:	ddc00a17 	ldw	r23,40(sp)
1010e974:	dd800917 	ldw	r22,36(sp)
1010e978:	dd400817 	ldw	r21,32(sp)
1010e97c:	dd000717 	ldw	r20,28(sp)
1010e980:	dcc00617 	ldw	r19,24(sp)
1010e984:	dc800517 	ldw	r18,20(sp)
1010e988:	dc400417 	ldw	r17,16(sp)
1010e98c:	dc000317 	ldw	r16,12(sp)
1010e990:	dec00d04 	addi	sp,sp,52
1010e994:	f800283a 	ret
1010e998:	2404b03a 	or	r2,r4,r16
1010e99c:	2027883a 	mov	r19,r4
1010e9a0:	10004226 	beq	r2,zero,1010eaac <__muldf3+0x2e4>
1010e9a4:	8000fc26 	beq	r16,zero,1010ed98 <__muldf3+0x5d0>
1010e9a8:	8009883a 	mov	r4,r16
1010e9ac:	d9800215 	stw	r6,8(sp)
1010e9b0:	d9c00015 	stw	r7,0(sp)
1010e9b4:	da400115 	stw	r9,4(sp)
1010e9b8:	010f9e00 	call	1010f9e0 <__clzsi2>
1010e9bc:	d9800217 	ldw	r6,8(sp)
1010e9c0:	d9c00017 	ldw	r7,0(sp)
1010e9c4:	da400117 	ldw	r9,4(sp)
1010e9c8:	113ffd44 	addi	r4,r2,-11
1010e9cc:	00c00704 	movi	r3,28
1010e9d0:	1900ed16 	blt	r3,r4,1010ed88 <__muldf3+0x5c0>
1010e9d4:	00c00744 	movi	r3,29
1010e9d8:	147ffe04 	addi	r17,r2,-8
1010e9dc:	1907c83a 	sub	r3,r3,r4
1010e9e0:	8460983a 	sll	r16,r16,r17
1010e9e4:	98c6d83a 	srl	r3,r19,r3
1010e9e8:	9c68983a 	sll	r20,r19,r17
1010e9ec:	1c20b03a 	or	r16,r3,r16
1010e9f0:	1080fcc4 	addi	r2,r2,1011
1010e9f4:	00a5c83a 	sub	r18,zero,r2
1010e9f8:	0027883a 	mov	r19,zero
1010e9fc:	0039883a 	mov	fp,zero
1010ea00:	003f9006 	br	1010e844 <__alt_data_end+0xfffee844>
1010ea04:	3446b03a 	or	r3,r6,r17
1010ea08:	1800261e 	bne	r3,zero,1010eaa4 <__muldf3+0x2dc>
1010ea0c:	0023883a 	mov	r17,zero
1010ea10:	0011883a 	mov	r8,zero
1010ea14:	01400084 	movi	r5,2
1010ea18:	003f9c06 	br	1010e88c <__alt_data_end+0xfffee88c>
1010ea1c:	3446b03a 	or	r3,r6,r17
1010ea20:	18001c26 	beq	r3,zero,1010ea94 <__muldf3+0x2cc>
1010ea24:	8800ce26 	beq	r17,zero,1010ed60 <__muldf3+0x598>
1010ea28:	8809883a 	mov	r4,r17
1010ea2c:	d9800215 	stw	r6,8(sp)
1010ea30:	da400115 	stw	r9,4(sp)
1010ea34:	da800015 	stw	r10,0(sp)
1010ea38:	010f9e00 	call	1010f9e0 <__clzsi2>
1010ea3c:	d9800217 	ldw	r6,8(sp)
1010ea40:	da400117 	ldw	r9,4(sp)
1010ea44:	da800017 	ldw	r10,0(sp)
1010ea48:	113ffd44 	addi	r4,r2,-11
1010ea4c:	00c00704 	movi	r3,28
1010ea50:	1900bf16 	blt	r3,r4,1010ed50 <__muldf3+0x588>
1010ea54:	00c00744 	movi	r3,29
1010ea58:	123ffe04 	addi	r8,r2,-8
1010ea5c:	1907c83a 	sub	r3,r3,r4
1010ea60:	8a22983a 	sll	r17,r17,r8
1010ea64:	30c6d83a 	srl	r3,r6,r3
1010ea68:	3210983a 	sll	r8,r6,r8
1010ea6c:	1c62b03a 	or	r17,r3,r17
1010ea70:	1080fcc4 	addi	r2,r2,1011
1010ea74:	0085c83a 	sub	r2,zero,r2
1010ea78:	000b883a 	mov	r5,zero
1010ea7c:	003f8306 	br	1010e88c <__alt_data_end+0xfffee88c>
1010ea80:	b02b883a 	mov	r21,r22
1010ea84:	0081ffc4 	movi	r2,2047
1010ea88:	000b883a 	mov	r5,zero
1010ea8c:	0029883a 	mov	r20,zero
1010ea90:	003fac06 	br	1010e944 <__alt_data_end+0xfffee944>
1010ea94:	0023883a 	mov	r17,zero
1010ea98:	0011883a 	mov	r8,zero
1010ea9c:	01400044 	movi	r5,1
1010eaa0:	003f7a06 	br	1010e88c <__alt_data_end+0xfffee88c>
1010eaa4:	014000c4 	movi	r5,3
1010eaa8:	003f7806 	br	1010e88c <__alt_data_end+0xfffee88c>
1010eaac:	04c00104 	movi	r19,4
1010eab0:	0021883a 	mov	r16,zero
1010eab4:	0029883a 	mov	r20,zero
1010eab8:	07000044 	movi	fp,1
1010eabc:	003f6106 	br	1010e844 <__alt_data_end+0xfffee844>
1010eac0:	04c00304 	movi	r19,12
1010eac4:	070000c4 	movi	fp,3
1010eac8:	003f5e06 	br	1010e844 <__alt_data_end+0xfffee844>
1010eacc:	01400434 	movhi	r5,16
1010ead0:	002b883a 	mov	r21,zero
1010ead4:	297fffc4 	addi	r5,r5,-1
1010ead8:	053fffc4 	movi	r20,-1
1010eadc:	0081ffc4 	movi	r2,2047
1010eae0:	003f9806 	br	1010e944 <__alt_data_end+0xfffee944>
1010eae4:	8023883a 	mov	r17,r16
1010eae8:	a011883a 	mov	r8,r20
1010eaec:	e00b883a 	mov	r5,fp
1010eaf0:	003f8a06 	br	1010e91c <__alt_data_end+0xfffee91c>
1010eaf4:	8023883a 	mov	r17,r16
1010eaf8:	a011883a 	mov	r8,r20
1010eafc:	482d883a 	mov	r22,r9
1010eb00:	e00b883a 	mov	r5,fp
1010eb04:	003f8506 	br	1010e91c <__alt_data_end+0xfffee91c>
1010eb08:	a00ad43a 	srli	r5,r20,16
1010eb0c:	401ad43a 	srli	r13,r8,16
1010eb10:	a53fffcc 	andi	r20,r20,65535
1010eb14:	423fffcc 	andi	r8,r8,65535
1010eb18:	4519383a 	mul	r12,r8,r20
1010eb1c:	4147383a 	mul	r3,r8,r5
1010eb20:	6d09383a 	mul	r4,r13,r20
1010eb24:	600cd43a 	srli	r6,r12,16
1010eb28:	2b5d383a 	mul	r14,r5,r13
1010eb2c:	20c9883a 	add	r4,r4,r3
1010eb30:	310d883a 	add	r6,r6,r4
1010eb34:	30c0022e 	bgeu	r6,r3,1010eb40 <__muldf3+0x378>
1010eb38:	00c00074 	movhi	r3,1
1010eb3c:	70dd883a 	add	r14,r14,r3
1010eb40:	8826d43a 	srli	r19,r17,16
1010eb44:	8bffffcc 	andi	r15,r17,65535
1010eb48:	7d23383a 	mul	r17,r15,r20
1010eb4c:	7949383a 	mul	r4,r15,r5
1010eb50:	9d29383a 	mul	r20,r19,r20
1010eb54:	8814d43a 	srli	r10,r17,16
1010eb58:	3012943a 	slli	r9,r6,16
1010eb5c:	a129883a 	add	r20,r20,r4
1010eb60:	633fffcc 	andi	r12,r12,65535
1010eb64:	5515883a 	add	r10,r10,r20
1010eb68:	3006d43a 	srli	r3,r6,16
1010eb6c:	4b13883a 	add	r9,r9,r12
1010eb70:	2ccb383a 	mul	r5,r5,r19
1010eb74:	5100022e 	bgeu	r10,r4,1010eb80 <__muldf3+0x3b8>
1010eb78:	01000074 	movhi	r4,1
1010eb7c:	290b883a 	add	r5,r5,r4
1010eb80:	802ad43a 	srli	r21,r16,16
1010eb84:	843fffcc 	andi	r16,r16,65535
1010eb88:	440d383a 	mul	r6,r8,r16
1010eb8c:	4565383a 	mul	r18,r8,r21
1010eb90:	8349383a 	mul	r4,r16,r13
1010eb94:	500e943a 	slli	r7,r10,16
1010eb98:	3010d43a 	srli	r8,r6,16
1010eb9c:	5028d43a 	srli	r20,r10,16
1010eba0:	2489883a 	add	r4,r4,r18
1010eba4:	8abfffcc 	andi	r10,r17,65535
1010eba8:	3a95883a 	add	r10,r7,r10
1010ebac:	4119883a 	add	r12,r8,r4
1010ebb0:	a169883a 	add	r20,r20,r5
1010ebb4:	1a87883a 	add	r3,r3,r10
1010ebb8:	6d5b383a 	mul	r13,r13,r21
1010ebbc:	6480022e 	bgeu	r12,r18,1010ebc8 <__muldf3+0x400>
1010ebc0:	01000074 	movhi	r4,1
1010ebc4:	691b883a 	add	r13,r13,r4
1010ebc8:	7c25383a 	mul	r18,r15,r16
1010ebcc:	7d4b383a 	mul	r5,r15,r21
1010ebd0:	84cf383a 	mul	r7,r16,r19
1010ebd4:	901ed43a 	srli	r15,r18,16
1010ebd8:	6008d43a 	srli	r4,r12,16
1010ebdc:	6010943a 	slli	r8,r12,16
1010ebe0:	394f883a 	add	r7,r7,r5
1010ebe4:	333fffcc 	andi	r12,r6,65535
1010ebe8:	79df883a 	add	r15,r15,r7
1010ebec:	235b883a 	add	r13,r4,r13
1010ebf0:	9d63383a 	mul	r17,r19,r21
1010ebf4:	4309883a 	add	r4,r8,r12
1010ebf8:	7940022e 	bgeu	r15,r5,1010ec04 <__muldf3+0x43c>
1010ebfc:	01400074 	movhi	r5,1
1010ec00:	8963883a 	add	r17,r17,r5
1010ec04:	780a943a 	slli	r5,r15,16
1010ec08:	91bfffcc 	andi	r6,r18,65535
1010ec0c:	70c7883a 	add	r3,r14,r3
1010ec10:	298d883a 	add	r6,r5,r6
1010ec14:	1a8f803a 	cmpltu	r7,r3,r10
1010ec18:	350b883a 	add	r5,r6,r20
1010ec1c:	20c7883a 	add	r3,r4,r3
1010ec20:	3955883a 	add	r10,r7,r5
1010ec24:	1909803a 	cmpltu	r4,r3,r4
1010ec28:	6a91883a 	add	r8,r13,r10
1010ec2c:	780cd43a 	srli	r6,r15,16
1010ec30:	2219883a 	add	r12,r4,r8
1010ec34:	2d0b803a 	cmpltu	r5,r5,r20
1010ec38:	51cf803a 	cmpltu	r7,r10,r7
1010ec3c:	29ceb03a 	or	r7,r5,r7
1010ec40:	4351803a 	cmpltu	r8,r8,r13
1010ec44:	610b803a 	cmpltu	r5,r12,r4
1010ec48:	4148b03a 	or	r4,r8,r5
1010ec4c:	398f883a 	add	r7,r7,r6
1010ec50:	3909883a 	add	r4,r7,r4
1010ec54:	1810927a 	slli	r8,r3,9
1010ec58:	2449883a 	add	r4,r4,r17
1010ec5c:	2008927a 	slli	r4,r4,9
1010ec60:	6022d5fa 	srli	r17,r12,23
1010ec64:	1806d5fa 	srli	r3,r3,23
1010ec68:	4252b03a 	or	r9,r8,r9
1010ec6c:	600a927a 	slli	r5,r12,9
1010ec70:	4810c03a 	cmpne	r8,r9,zero
1010ec74:	2462b03a 	or	r17,r4,r17
1010ec78:	40c6b03a 	or	r3,r8,r3
1010ec7c:	8900402c 	andhi	r4,r17,256
1010ec80:	1950b03a 	or	r8,r3,r5
1010ec84:	20000726 	beq	r4,zero,1010eca4 <__muldf3+0x4dc>
1010ec88:	4006d07a 	srli	r3,r8,1
1010ec8c:	880497fa 	slli	r2,r17,31
1010ec90:	4200004c 	andi	r8,r8,1
1010ec94:	8822d07a 	srli	r17,r17,1
1010ec98:	1a10b03a 	or	r8,r3,r8
1010ec9c:	1210b03a 	or	r8,r2,r8
1010eca0:	5805883a 	mov	r2,r11
1010eca4:	1140ffc4 	addi	r5,r2,1023
1010eca8:	0140440e 	bge	zero,r5,1010edbc <__muldf3+0x5f4>
1010ecac:	40c001cc 	andi	r3,r8,7
1010ecb0:	18000726 	beq	r3,zero,1010ecd0 <__muldf3+0x508>
1010ecb4:	40c003cc 	andi	r3,r8,15
1010ecb8:	01000104 	movi	r4,4
1010ecbc:	19000426 	beq	r3,r4,1010ecd0 <__muldf3+0x508>
1010ecc0:	4107883a 	add	r3,r8,r4
1010ecc4:	1a11803a 	cmpltu	r8,r3,r8
1010ecc8:	8a23883a 	add	r17,r17,r8
1010eccc:	1811883a 	mov	r8,r3
1010ecd0:	88c0402c 	andhi	r3,r17,256
1010ecd4:	18000426 	beq	r3,zero,1010ece8 <__muldf3+0x520>
1010ecd8:	11410004 	addi	r5,r2,1024
1010ecdc:	00bfc034 	movhi	r2,65280
1010ece0:	10bfffc4 	addi	r2,r2,-1
1010ece4:	88a2703a 	and	r17,r17,r2
1010ece8:	0081ff84 	movi	r2,2046
1010ecec:	117f6416 	blt	r2,r5,1010ea80 <__alt_data_end+0xfffeea80>
1010ecf0:	8828977a 	slli	r20,r17,29
1010ecf4:	4010d0fa 	srli	r8,r8,3
1010ecf8:	8822927a 	slli	r17,r17,9
1010ecfc:	2881ffcc 	andi	r2,r5,2047
1010ed00:	a228b03a 	or	r20,r20,r8
1010ed04:	880ad33a 	srli	r5,r17,12
1010ed08:	b02b883a 	mov	r21,r22
1010ed0c:	003f0d06 	br	1010e944 <__alt_data_end+0xfffee944>
1010ed10:	8080022c 	andhi	r2,r16,8
1010ed14:	10000926 	beq	r2,zero,1010ed3c <__muldf3+0x574>
1010ed18:	8880022c 	andhi	r2,r17,8
1010ed1c:	1000071e 	bne	r2,zero,1010ed3c <__muldf3+0x574>
1010ed20:	00800434 	movhi	r2,16
1010ed24:	89400234 	orhi	r5,r17,8
1010ed28:	10bfffc4 	addi	r2,r2,-1
1010ed2c:	b82b883a 	mov	r21,r23
1010ed30:	288a703a 	and	r5,r5,r2
1010ed34:	4029883a 	mov	r20,r8
1010ed38:	003f6806 	br	1010eadc <__alt_data_end+0xfffeeadc>
1010ed3c:	00800434 	movhi	r2,16
1010ed40:	81400234 	orhi	r5,r16,8
1010ed44:	10bfffc4 	addi	r2,r2,-1
1010ed48:	288a703a 	and	r5,r5,r2
1010ed4c:	003f6306 	br	1010eadc <__alt_data_end+0xfffeeadc>
1010ed50:	147ff604 	addi	r17,r2,-40
1010ed54:	3462983a 	sll	r17,r6,r17
1010ed58:	0011883a 	mov	r8,zero
1010ed5c:	003f4406 	br	1010ea70 <__alt_data_end+0xfffeea70>
1010ed60:	3009883a 	mov	r4,r6
1010ed64:	d9800215 	stw	r6,8(sp)
1010ed68:	da400115 	stw	r9,4(sp)
1010ed6c:	da800015 	stw	r10,0(sp)
1010ed70:	010f9e00 	call	1010f9e0 <__clzsi2>
1010ed74:	10800804 	addi	r2,r2,32
1010ed78:	da800017 	ldw	r10,0(sp)
1010ed7c:	da400117 	ldw	r9,4(sp)
1010ed80:	d9800217 	ldw	r6,8(sp)
1010ed84:	003f3006 	br	1010ea48 <__alt_data_end+0xfffeea48>
1010ed88:	143ff604 	addi	r16,r2,-40
1010ed8c:	9c20983a 	sll	r16,r19,r16
1010ed90:	0029883a 	mov	r20,zero
1010ed94:	003f1606 	br	1010e9f0 <__alt_data_end+0xfffee9f0>
1010ed98:	d9800215 	stw	r6,8(sp)
1010ed9c:	d9c00015 	stw	r7,0(sp)
1010eda0:	da400115 	stw	r9,4(sp)
1010eda4:	010f9e00 	call	1010f9e0 <__clzsi2>
1010eda8:	10800804 	addi	r2,r2,32
1010edac:	da400117 	ldw	r9,4(sp)
1010edb0:	d9c00017 	ldw	r7,0(sp)
1010edb4:	d9800217 	ldw	r6,8(sp)
1010edb8:	003f0306 	br	1010e9c8 <__alt_data_end+0xfffee9c8>
1010edbc:	00c00044 	movi	r3,1
1010edc0:	1947c83a 	sub	r3,r3,r5
1010edc4:	00800e04 	movi	r2,56
1010edc8:	10feda16 	blt	r2,r3,1010e934 <__alt_data_end+0xfffee934>
1010edcc:	008007c4 	movi	r2,31
1010edd0:	10c01b16 	blt	r2,r3,1010ee40 <__muldf3+0x678>
1010edd4:	00800804 	movi	r2,32
1010edd8:	10c5c83a 	sub	r2,r2,r3
1010eddc:	888a983a 	sll	r5,r17,r2
1010ede0:	40c8d83a 	srl	r4,r8,r3
1010ede4:	4084983a 	sll	r2,r8,r2
1010ede8:	88e2d83a 	srl	r17,r17,r3
1010edec:	2906b03a 	or	r3,r5,r4
1010edf0:	1004c03a 	cmpne	r2,r2,zero
1010edf4:	1886b03a 	or	r3,r3,r2
1010edf8:	188001cc 	andi	r2,r3,7
1010edfc:	10000726 	beq	r2,zero,1010ee1c <__muldf3+0x654>
1010ee00:	188003cc 	andi	r2,r3,15
1010ee04:	01000104 	movi	r4,4
1010ee08:	11000426 	beq	r2,r4,1010ee1c <__muldf3+0x654>
1010ee0c:	1805883a 	mov	r2,r3
1010ee10:	10c00104 	addi	r3,r2,4
1010ee14:	1885803a 	cmpltu	r2,r3,r2
1010ee18:	88a3883a 	add	r17,r17,r2
1010ee1c:	8880202c 	andhi	r2,r17,128
1010ee20:	10001c26 	beq	r2,zero,1010ee94 <__muldf3+0x6cc>
1010ee24:	b02b883a 	mov	r21,r22
1010ee28:	00800044 	movi	r2,1
1010ee2c:	000b883a 	mov	r5,zero
1010ee30:	0029883a 	mov	r20,zero
1010ee34:	003ec306 	br	1010e944 <__alt_data_end+0xfffee944>
1010ee38:	5805883a 	mov	r2,r11
1010ee3c:	003f9906 	br	1010eca4 <__alt_data_end+0xfffeeca4>
1010ee40:	00bff844 	movi	r2,-31
1010ee44:	1145c83a 	sub	r2,r2,r5
1010ee48:	8888d83a 	srl	r4,r17,r2
1010ee4c:	00800804 	movi	r2,32
1010ee50:	18801a26 	beq	r3,r2,1010eebc <__muldf3+0x6f4>
1010ee54:	00801004 	movi	r2,64
1010ee58:	10c5c83a 	sub	r2,r2,r3
1010ee5c:	8884983a 	sll	r2,r17,r2
1010ee60:	1204b03a 	or	r2,r2,r8
1010ee64:	1004c03a 	cmpne	r2,r2,zero
1010ee68:	2084b03a 	or	r2,r4,r2
1010ee6c:	144001cc 	andi	r17,r2,7
1010ee70:	88000d1e 	bne	r17,zero,1010eea8 <__muldf3+0x6e0>
1010ee74:	000b883a 	mov	r5,zero
1010ee78:	1028d0fa 	srli	r20,r2,3
1010ee7c:	b02b883a 	mov	r21,r22
1010ee80:	0005883a 	mov	r2,zero
1010ee84:	a468b03a 	or	r20,r20,r17
1010ee88:	003eae06 	br	1010e944 <__alt_data_end+0xfffee944>
1010ee8c:	1007883a 	mov	r3,r2
1010ee90:	0023883a 	mov	r17,zero
1010ee94:	880a927a 	slli	r5,r17,9
1010ee98:	1805883a 	mov	r2,r3
1010ee9c:	8822977a 	slli	r17,r17,29
1010eea0:	280ad33a 	srli	r5,r5,12
1010eea4:	003ff406 	br	1010ee78 <__alt_data_end+0xfffeee78>
1010eea8:	10c003cc 	andi	r3,r2,15
1010eeac:	01000104 	movi	r4,4
1010eeb0:	193ff626 	beq	r3,r4,1010ee8c <__alt_data_end+0xfffeee8c>
1010eeb4:	0023883a 	mov	r17,zero
1010eeb8:	003fd506 	br	1010ee10 <__alt_data_end+0xfffeee10>
1010eebc:	0005883a 	mov	r2,zero
1010eec0:	003fe706 	br	1010ee60 <__alt_data_end+0xfffeee60>
1010eec4:	00800434 	movhi	r2,16
1010eec8:	89400234 	orhi	r5,r17,8
1010eecc:	10bfffc4 	addi	r2,r2,-1
1010eed0:	b02b883a 	mov	r21,r22
1010eed4:	288a703a 	and	r5,r5,r2
1010eed8:	4029883a 	mov	r20,r8
1010eedc:	003eff06 	br	1010eadc <__alt_data_end+0xfffeeadc>

1010eee0 <__subdf3>:
1010eee0:	02000434 	movhi	r8,16
1010eee4:	423fffc4 	addi	r8,r8,-1
1010eee8:	defffb04 	addi	sp,sp,-20
1010eeec:	2a14703a 	and	r10,r5,r8
1010eef0:	3812d53a 	srli	r9,r7,20
1010eef4:	3a10703a 	and	r8,r7,r8
1010eef8:	2006d77a 	srli	r3,r4,29
1010eefc:	3004d77a 	srli	r2,r6,29
1010ef00:	dc000015 	stw	r16,0(sp)
1010ef04:	501490fa 	slli	r10,r10,3
1010ef08:	2820d53a 	srli	r16,r5,20
1010ef0c:	401090fa 	slli	r8,r8,3
1010ef10:	dc800215 	stw	r18,8(sp)
1010ef14:	dc400115 	stw	r17,4(sp)
1010ef18:	dfc00415 	stw	ra,16(sp)
1010ef1c:	202290fa 	slli	r17,r4,3
1010ef20:	dcc00315 	stw	r19,12(sp)
1010ef24:	4a41ffcc 	andi	r9,r9,2047
1010ef28:	0101ffc4 	movi	r4,2047
1010ef2c:	2824d7fa 	srli	r18,r5,31
1010ef30:	8401ffcc 	andi	r16,r16,2047
1010ef34:	50c6b03a 	or	r3,r10,r3
1010ef38:	380ed7fa 	srli	r7,r7,31
1010ef3c:	408ab03a 	or	r5,r8,r2
1010ef40:	300c90fa 	slli	r6,r6,3
1010ef44:	49009626 	beq	r9,r4,1010f1a0 <__subdf3+0x2c0>
1010ef48:	39c0005c 	xori	r7,r7,1
1010ef4c:	8245c83a 	sub	r2,r16,r9
1010ef50:	3c807426 	beq	r7,r18,1010f124 <__subdf3+0x244>
1010ef54:	0080af0e 	bge	zero,r2,1010f214 <__subdf3+0x334>
1010ef58:	48002a1e 	bne	r9,zero,1010f004 <__subdf3+0x124>
1010ef5c:	2988b03a 	or	r4,r5,r6
1010ef60:	20009a1e 	bne	r4,zero,1010f1cc <__subdf3+0x2ec>
1010ef64:	888001cc 	andi	r2,r17,7
1010ef68:	10000726 	beq	r2,zero,1010ef88 <__subdf3+0xa8>
1010ef6c:	888003cc 	andi	r2,r17,15
1010ef70:	01000104 	movi	r4,4
1010ef74:	11000426 	beq	r2,r4,1010ef88 <__subdf3+0xa8>
1010ef78:	890b883a 	add	r5,r17,r4
1010ef7c:	2c63803a 	cmpltu	r17,r5,r17
1010ef80:	1c47883a 	add	r3,r3,r17
1010ef84:	2823883a 	mov	r17,r5
1010ef88:	1880202c 	andhi	r2,r3,128
1010ef8c:	10005926 	beq	r2,zero,1010f0f4 <__subdf3+0x214>
1010ef90:	84000044 	addi	r16,r16,1
1010ef94:	0081ffc4 	movi	r2,2047
1010ef98:	8080be26 	beq	r16,r2,1010f294 <__subdf3+0x3b4>
1010ef9c:	017fe034 	movhi	r5,65408
1010efa0:	297fffc4 	addi	r5,r5,-1
1010efa4:	1946703a 	and	r3,r3,r5
1010efa8:	1804977a 	slli	r2,r3,29
1010efac:	1806927a 	slli	r3,r3,9
1010efb0:	8822d0fa 	srli	r17,r17,3
1010efb4:	8401ffcc 	andi	r16,r16,2047
1010efb8:	180ad33a 	srli	r5,r3,12
1010efbc:	9100004c 	andi	r4,r18,1
1010efc0:	1444b03a 	or	r2,r2,r17
1010efc4:	80c1ffcc 	andi	r3,r16,2047
1010efc8:	1820953a 	slli	r16,r3,20
1010efcc:	20c03fcc 	andi	r3,r4,255
1010efd0:	180897fa 	slli	r4,r3,31
1010efd4:	00c00434 	movhi	r3,16
1010efd8:	18ffffc4 	addi	r3,r3,-1
1010efdc:	28c6703a 	and	r3,r5,r3
1010efe0:	1c06b03a 	or	r3,r3,r16
1010efe4:	1906b03a 	or	r3,r3,r4
1010efe8:	dfc00417 	ldw	ra,16(sp)
1010efec:	dcc00317 	ldw	r19,12(sp)
1010eff0:	dc800217 	ldw	r18,8(sp)
1010eff4:	dc400117 	ldw	r17,4(sp)
1010eff8:	dc000017 	ldw	r16,0(sp)
1010effc:	dec00504 	addi	sp,sp,20
1010f000:	f800283a 	ret
1010f004:	0101ffc4 	movi	r4,2047
1010f008:	813fd626 	beq	r16,r4,1010ef64 <__alt_data_end+0xfffeef64>
1010f00c:	29402034 	orhi	r5,r5,128
1010f010:	01000e04 	movi	r4,56
1010f014:	2080a316 	blt	r4,r2,1010f2a4 <__subdf3+0x3c4>
1010f018:	010007c4 	movi	r4,31
1010f01c:	2080c616 	blt	r4,r2,1010f338 <__subdf3+0x458>
1010f020:	01000804 	movi	r4,32
1010f024:	2089c83a 	sub	r4,r4,r2
1010f028:	2910983a 	sll	r8,r5,r4
1010f02c:	308ed83a 	srl	r7,r6,r2
1010f030:	3108983a 	sll	r4,r6,r4
1010f034:	2884d83a 	srl	r2,r5,r2
1010f038:	41ccb03a 	or	r6,r8,r7
1010f03c:	2008c03a 	cmpne	r4,r4,zero
1010f040:	310cb03a 	or	r6,r6,r4
1010f044:	898dc83a 	sub	r6,r17,r6
1010f048:	89a3803a 	cmpltu	r17,r17,r6
1010f04c:	1887c83a 	sub	r3,r3,r2
1010f050:	1c47c83a 	sub	r3,r3,r17
1010f054:	3023883a 	mov	r17,r6
1010f058:	1880202c 	andhi	r2,r3,128
1010f05c:	10002326 	beq	r2,zero,1010f0ec <__subdf3+0x20c>
1010f060:	04c02034 	movhi	r19,128
1010f064:	9cffffc4 	addi	r19,r19,-1
1010f068:	1ce6703a 	and	r19,r3,r19
1010f06c:	98007a26 	beq	r19,zero,1010f258 <__subdf3+0x378>
1010f070:	9809883a 	mov	r4,r19
1010f074:	010f9e00 	call	1010f9e0 <__clzsi2>
1010f078:	113ffe04 	addi	r4,r2,-8
1010f07c:	00c007c4 	movi	r3,31
1010f080:	19007b16 	blt	r3,r4,1010f270 <__subdf3+0x390>
1010f084:	00800804 	movi	r2,32
1010f088:	1105c83a 	sub	r2,r2,r4
1010f08c:	8884d83a 	srl	r2,r17,r2
1010f090:	9906983a 	sll	r3,r19,r4
1010f094:	8922983a 	sll	r17,r17,r4
1010f098:	10c4b03a 	or	r2,r2,r3
1010f09c:	24007816 	blt	r4,r16,1010f280 <__subdf3+0x3a0>
1010f0a0:	2421c83a 	sub	r16,r4,r16
1010f0a4:	80c00044 	addi	r3,r16,1
1010f0a8:	010007c4 	movi	r4,31
1010f0ac:	20c09516 	blt	r4,r3,1010f304 <__subdf3+0x424>
1010f0b0:	01400804 	movi	r5,32
1010f0b4:	28cbc83a 	sub	r5,r5,r3
1010f0b8:	88c8d83a 	srl	r4,r17,r3
1010f0bc:	8962983a 	sll	r17,r17,r5
1010f0c0:	114a983a 	sll	r5,r2,r5
1010f0c4:	10c6d83a 	srl	r3,r2,r3
1010f0c8:	8804c03a 	cmpne	r2,r17,zero
1010f0cc:	290ab03a 	or	r5,r5,r4
1010f0d0:	28a2b03a 	or	r17,r5,r2
1010f0d4:	0021883a 	mov	r16,zero
1010f0d8:	003fa206 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f0dc:	2090b03a 	or	r8,r4,r2
1010f0e0:	40018e26 	beq	r8,zero,1010f71c <__subdf3+0x83c>
1010f0e4:	1007883a 	mov	r3,r2
1010f0e8:	2023883a 	mov	r17,r4
1010f0ec:	888001cc 	andi	r2,r17,7
1010f0f0:	103f9e1e 	bne	r2,zero,1010ef6c <__alt_data_end+0xfffeef6c>
1010f0f4:	1804977a 	slli	r2,r3,29
1010f0f8:	8822d0fa 	srli	r17,r17,3
1010f0fc:	1810d0fa 	srli	r8,r3,3
1010f100:	9100004c 	andi	r4,r18,1
1010f104:	1444b03a 	or	r2,r2,r17
1010f108:	00c1ffc4 	movi	r3,2047
1010f10c:	80c02826 	beq	r16,r3,1010f1b0 <__subdf3+0x2d0>
1010f110:	01400434 	movhi	r5,16
1010f114:	297fffc4 	addi	r5,r5,-1
1010f118:	80e0703a 	and	r16,r16,r3
1010f11c:	414a703a 	and	r5,r8,r5
1010f120:	003fa806 	br	1010efc4 <__alt_data_end+0xfffeefc4>
1010f124:	0080630e 	bge	zero,r2,1010f2b4 <__subdf3+0x3d4>
1010f128:	48003026 	beq	r9,zero,1010f1ec <__subdf3+0x30c>
1010f12c:	0101ffc4 	movi	r4,2047
1010f130:	813f8c26 	beq	r16,r4,1010ef64 <__alt_data_end+0xfffeef64>
1010f134:	29402034 	orhi	r5,r5,128
1010f138:	01000e04 	movi	r4,56
1010f13c:	2080a90e 	bge	r4,r2,1010f3e4 <__subdf3+0x504>
1010f140:	298cb03a 	or	r6,r5,r6
1010f144:	3012c03a 	cmpne	r9,r6,zero
1010f148:	0005883a 	mov	r2,zero
1010f14c:	4c53883a 	add	r9,r9,r17
1010f150:	4c63803a 	cmpltu	r17,r9,r17
1010f154:	10c7883a 	add	r3,r2,r3
1010f158:	88c7883a 	add	r3,r17,r3
1010f15c:	4823883a 	mov	r17,r9
1010f160:	1880202c 	andhi	r2,r3,128
1010f164:	1000d026 	beq	r2,zero,1010f4a8 <__subdf3+0x5c8>
1010f168:	84000044 	addi	r16,r16,1
1010f16c:	0081ffc4 	movi	r2,2047
1010f170:	8080fe26 	beq	r16,r2,1010f56c <__subdf3+0x68c>
1010f174:	00bfe034 	movhi	r2,65408
1010f178:	10bfffc4 	addi	r2,r2,-1
1010f17c:	1886703a 	and	r3,r3,r2
1010f180:	880ad07a 	srli	r5,r17,1
1010f184:	180497fa 	slli	r2,r3,31
1010f188:	8900004c 	andi	r4,r17,1
1010f18c:	2922b03a 	or	r17,r5,r4
1010f190:	1806d07a 	srli	r3,r3,1
1010f194:	1462b03a 	or	r17,r2,r17
1010f198:	3825883a 	mov	r18,r7
1010f19c:	003f7106 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f1a0:	2984b03a 	or	r2,r5,r6
1010f1a4:	103f6826 	beq	r2,zero,1010ef48 <__alt_data_end+0xfffeef48>
1010f1a8:	39c03fcc 	andi	r7,r7,255
1010f1ac:	003f6706 	br	1010ef4c <__alt_data_end+0xfffeef4c>
1010f1b0:	4086b03a 	or	r3,r8,r2
1010f1b4:	18015226 	beq	r3,zero,1010f700 <__subdf3+0x820>
1010f1b8:	00c00434 	movhi	r3,16
1010f1bc:	41400234 	orhi	r5,r8,8
1010f1c0:	18ffffc4 	addi	r3,r3,-1
1010f1c4:	28ca703a 	and	r5,r5,r3
1010f1c8:	003f7e06 	br	1010efc4 <__alt_data_end+0xfffeefc4>
1010f1cc:	10bfffc4 	addi	r2,r2,-1
1010f1d0:	1000491e 	bne	r2,zero,1010f2f8 <__subdf3+0x418>
1010f1d4:	898fc83a 	sub	r7,r17,r6
1010f1d8:	89e3803a 	cmpltu	r17,r17,r7
1010f1dc:	1947c83a 	sub	r3,r3,r5
1010f1e0:	1c47c83a 	sub	r3,r3,r17
1010f1e4:	3823883a 	mov	r17,r7
1010f1e8:	003f9b06 	br	1010f058 <__alt_data_end+0xfffef058>
1010f1ec:	2988b03a 	or	r4,r5,r6
1010f1f0:	203f5c26 	beq	r4,zero,1010ef64 <__alt_data_end+0xfffeef64>
1010f1f4:	10bfffc4 	addi	r2,r2,-1
1010f1f8:	1000931e 	bne	r2,zero,1010f448 <__subdf3+0x568>
1010f1fc:	898d883a 	add	r6,r17,r6
1010f200:	3463803a 	cmpltu	r17,r6,r17
1010f204:	1947883a 	add	r3,r3,r5
1010f208:	88c7883a 	add	r3,r17,r3
1010f20c:	3023883a 	mov	r17,r6
1010f210:	003fd306 	br	1010f160 <__alt_data_end+0xfffef160>
1010f214:	1000541e 	bne	r2,zero,1010f368 <__subdf3+0x488>
1010f218:	80800044 	addi	r2,r16,1
1010f21c:	1081ffcc 	andi	r2,r2,2047
1010f220:	01000044 	movi	r4,1
1010f224:	2080a20e 	bge	r4,r2,1010f4b0 <__subdf3+0x5d0>
1010f228:	8989c83a 	sub	r4,r17,r6
1010f22c:	8905803a 	cmpltu	r2,r17,r4
1010f230:	1967c83a 	sub	r19,r3,r5
1010f234:	98a7c83a 	sub	r19,r19,r2
1010f238:	9880202c 	andhi	r2,r19,128
1010f23c:	10006326 	beq	r2,zero,1010f3cc <__subdf3+0x4ec>
1010f240:	3463c83a 	sub	r17,r6,r17
1010f244:	28c7c83a 	sub	r3,r5,r3
1010f248:	344d803a 	cmpltu	r6,r6,r17
1010f24c:	19a7c83a 	sub	r19,r3,r6
1010f250:	3825883a 	mov	r18,r7
1010f254:	983f861e 	bne	r19,zero,1010f070 <__alt_data_end+0xfffef070>
1010f258:	8809883a 	mov	r4,r17
1010f25c:	010f9e00 	call	1010f9e0 <__clzsi2>
1010f260:	10800804 	addi	r2,r2,32
1010f264:	113ffe04 	addi	r4,r2,-8
1010f268:	00c007c4 	movi	r3,31
1010f26c:	193f850e 	bge	r3,r4,1010f084 <__alt_data_end+0xfffef084>
1010f270:	10bff604 	addi	r2,r2,-40
1010f274:	8884983a 	sll	r2,r17,r2
1010f278:	0023883a 	mov	r17,zero
1010f27c:	243f880e 	bge	r4,r16,1010f0a0 <__alt_data_end+0xfffef0a0>
1010f280:	00ffe034 	movhi	r3,65408
1010f284:	18ffffc4 	addi	r3,r3,-1
1010f288:	8121c83a 	sub	r16,r16,r4
1010f28c:	10c6703a 	and	r3,r2,r3
1010f290:	003f3406 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f294:	9100004c 	andi	r4,r18,1
1010f298:	000b883a 	mov	r5,zero
1010f29c:	0005883a 	mov	r2,zero
1010f2a0:	003f4806 	br	1010efc4 <__alt_data_end+0xfffeefc4>
1010f2a4:	298cb03a 	or	r6,r5,r6
1010f2a8:	300cc03a 	cmpne	r6,r6,zero
1010f2ac:	0005883a 	mov	r2,zero
1010f2b0:	003f6406 	br	1010f044 <__alt_data_end+0xfffef044>
1010f2b4:	10009a1e 	bne	r2,zero,1010f520 <__subdf3+0x640>
1010f2b8:	82400044 	addi	r9,r16,1
1010f2bc:	4881ffcc 	andi	r2,r9,2047
1010f2c0:	02800044 	movi	r10,1
1010f2c4:	5080670e 	bge	r10,r2,1010f464 <__subdf3+0x584>
1010f2c8:	0081ffc4 	movi	r2,2047
1010f2cc:	4880af26 	beq	r9,r2,1010f58c <__subdf3+0x6ac>
1010f2d0:	898d883a 	add	r6,r17,r6
1010f2d4:	1945883a 	add	r2,r3,r5
1010f2d8:	3447803a 	cmpltu	r3,r6,r17
1010f2dc:	1887883a 	add	r3,r3,r2
1010f2e0:	182297fa 	slli	r17,r3,31
1010f2e4:	300cd07a 	srli	r6,r6,1
1010f2e8:	1806d07a 	srli	r3,r3,1
1010f2ec:	4821883a 	mov	r16,r9
1010f2f0:	89a2b03a 	or	r17,r17,r6
1010f2f4:	003f1b06 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f2f8:	0101ffc4 	movi	r4,2047
1010f2fc:	813f441e 	bne	r16,r4,1010f010 <__alt_data_end+0xfffef010>
1010f300:	003f1806 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f304:	843ff844 	addi	r16,r16,-31
1010f308:	01400804 	movi	r5,32
1010f30c:	1408d83a 	srl	r4,r2,r16
1010f310:	19405026 	beq	r3,r5,1010f454 <__subdf3+0x574>
1010f314:	01401004 	movi	r5,64
1010f318:	28c7c83a 	sub	r3,r5,r3
1010f31c:	10c4983a 	sll	r2,r2,r3
1010f320:	88a2b03a 	or	r17,r17,r2
1010f324:	8822c03a 	cmpne	r17,r17,zero
1010f328:	2462b03a 	or	r17,r4,r17
1010f32c:	0007883a 	mov	r3,zero
1010f330:	0021883a 	mov	r16,zero
1010f334:	003f6d06 	br	1010f0ec <__alt_data_end+0xfffef0ec>
1010f338:	11fff804 	addi	r7,r2,-32
1010f33c:	01000804 	movi	r4,32
1010f340:	29ced83a 	srl	r7,r5,r7
1010f344:	11004526 	beq	r2,r4,1010f45c <__subdf3+0x57c>
1010f348:	01001004 	movi	r4,64
1010f34c:	2089c83a 	sub	r4,r4,r2
1010f350:	2904983a 	sll	r2,r5,r4
1010f354:	118cb03a 	or	r6,r2,r6
1010f358:	300cc03a 	cmpne	r6,r6,zero
1010f35c:	398cb03a 	or	r6,r7,r6
1010f360:	0005883a 	mov	r2,zero
1010f364:	003f3706 	br	1010f044 <__alt_data_end+0xfffef044>
1010f368:	80002a26 	beq	r16,zero,1010f414 <__subdf3+0x534>
1010f36c:	0101ffc4 	movi	r4,2047
1010f370:	49006626 	beq	r9,r4,1010f50c <__subdf3+0x62c>
1010f374:	0085c83a 	sub	r2,zero,r2
1010f378:	18c02034 	orhi	r3,r3,128
1010f37c:	01000e04 	movi	r4,56
1010f380:	20807e16 	blt	r4,r2,1010f57c <__subdf3+0x69c>
1010f384:	010007c4 	movi	r4,31
1010f388:	2080e716 	blt	r4,r2,1010f728 <__subdf3+0x848>
1010f38c:	01000804 	movi	r4,32
1010f390:	2089c83a 	sub	r4,r4,r2
1010f394:	1914983a 	sll	r10,r3,r4
1010f398:	8890d83a 	srl	r8,r17,r2
1010f39c:	8908983a 	sll	r4,r17,r4
1010f3a0:	1884d83a 	srl	r2,r3,r2
1010f3a4:	5222b03a 	or	r17,r10,r8
1010f3a8:	2006c03a 	cmpne	r3,r4,zero
1010f3ac:	88e2b03a 	or	r17,r17,r3
1010f3b0:	3463c83a 	sub	r17,r6,r17
1010f3b4:	2885c83a 	sub	r2,r5,r2
1010f3b8:	344d803a 	cmpltu	r6,r6,r17
1010f3bc:	1187c83a 	sub	r3,r2,r6
1010f3c0:	4821883a 	mov	r16,r9
1010f3c4:	3825883a 	mov	r18,r7
1010f3c8:	003f2306 	br	1010f058 <__alt_data_end+0xfffef058>
1010f3cc:	24d0b03a 	or	r8,r4,r19
1010f3d0:	40001b1e 	bne	r8,zero,1010f440 <__subdf3+0x560>
1010f3d4:	0005883a 	mov	r2,zero
1010f3d8:	0009883a 	mov	r4,zero
1010f3dc:	0021883a 	mov	r16,zero
1010f3e0:	003f4906 	br	1010f108 <__alt_data_end+0xfffef108>
1010f3e4:	010007c4 	movi	r4,31
1010f3e8:	20803a16 	blt	r4,r2,1010f4d4 <__subdf3+0x5f4>
1010f3ec:	01000804 	movi	r4,32
1010f3f0:	2089c83a 	sub	r4,r4,r2
1010f3f4:	2912983a 	sll	r9,r5,r4
1010f3f8:	3090d83a 	srl	r8,r6,r2
1010f3fc:	3108983a 	sll	r4,r6,r4
1010f400:	2884d83a 	srl	r2,r5,r2
1010f404:	4a12b03a 	or	r9,r9,r8
1010f408:	2008c03a 	cmpne	r4,r4,zero
1010f40c:	4912b03a 	or	r9,r9,r4
1010f410:	003f4e06 	br	1010f14c <__alt_data_end+0xfffef14c>
1010f414:	1c48b03a 	or	r4,r3,r17
1010f418:	20003c26 	beq	r4,zero,1010f50c <__subdf3+0x62c>
1010f41c:	0084303a 	nor	r2,zero,r2
1010f420:	1000381e 	bne	r2,zero,1010f504 <__subdf3+0x624>
1010f424:	3463c83a 	sub	r17,r6,r17
1010f428:	28c5c83a 	sub	r2,r5,r3
1010f42c:	344d803a 	cmpltu	r6,r6,r17
1010f430:	1187c83a 	sub	r3,r2,r6
1010f434:	4821883a 	mov	r16,r9
1010f438:	3825883a 	mov	r18,r7
1010f43c:	003f0606 	br	1010f058 <__alt_data_end+0xfffef058>
1010f440:	2023883a 	mov	r17,r4
1010f444:	003f0906 	br	1010f06c <__alt_data_end+0xfffef06c>
1010f448:	0101ffc4 	movi	r4,2047
1010f44c:	813f3a1e 	bne	r16,r4,1010f138 <__alt_data_end+0xfffef138>
1010f450:	003ec406 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f454:	0005883a 	mov	r2,zero
1010f458:	003fb106 	br	1010f320 <__alt_data_end+0xfffef320>
1010f45c:	0005883a 	mov	r2,zero
1010f460:	003fbc06 	br	1010f354 <__alt_data_end+0xfffef354>
1010f464:	1c44b03a 	or	r2,r3,r17
1010f468:	80008e1e 	bne	r16,zero,1010f6a4 <__subdf3+0x7c4>
1010f46c:	1000c826 	beq	r2,zero,1010f790 <__subdf3+0x8b0>
1010f470:	2984b03a 	or	r2,r5,r6
1010f474:	103ebb26 	beq	r2,zero,1010ef64 <__alt_data_end+0xfffeef64>
1010f478:	8989883a 	add	r4,r17,r6
1010f47c:	1945883a 	add	r2,r3,r5
1010f480:	2447803a 	cmpltu	r3,r4,r17
1010f484:	1887883a 	add	r3,r3,r2
1010f488:	1880202c 	andhi	r2,r3,128
1010f48c:	2023883a 	mov	r17,r4
1010f490:	103f1626 	beq	r2,zero,1010f0ec <__alt_data_end+0xfffef0ec>
1010f494:	00bfe034 	movhi	r2,65408
1010f498:	10bfffc4 	addi	r2,r2,-1
1010f49c:	5021883a 	mov	r16,r10
1010f4a0:	1886703a 	and	r3,r3,r2
1010f4a4:	003eaf06 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f4a8:	3825883a 	mov	r18,r7
1010f4ac:	003f0f06 	br	1010f0ec <__alt_data_end+0xfffef0ec>
1010f4b0:	1c44b03a 	or	r2,r3,r17
1010f4b4:	8000251e 	bne	r16,zero,1010f54c <__subdf3+0x66c>
1010f4b8:	1000661e 	bne	r2,zero,1010f654 <__subdf3+0x774>
1010f4bc:	2990b03a 	or	r8,r5,r6
1010f4c0:	40009626 	beq	r8,zero,1010f71c <__subdf3+0x83c>
1010f4c4:	2807883a 	mov	r3,r5
1010f4c8:	3023883a 	mov	r17,r6
1010f4cc:	3825883a 	mov	r18,r7
1010f4d0:	003ea406 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f4d4:	127ff804 	addi	r9,r2,-32
1010f4d8:	01000804 	movi	r4,32
1010f4dc:	2a52d83a 	srl	r9,r5,r9
1010f4e0:	11008c26 	beq	r2,r4,1010f714 <__subdf3+0x834>
1010f4e4:	01001004 	movi	r4,64
1010f4e8:	2085c83a 	sub	r2,r4,r2
1010f4ec:	2884983a 	sll	r2,r5,r2
1010f4f0:	118cb03a 	or	r6,r2,r6
1010f4f4:	300cc03a 	cmpne	r6,r6,zero
1010f4f8:	4992b03a 	or	r9,r9,r6
1010f4fc:	0005883a 	mov	r2,zero
1010f500:	003f1206 	br	1010f14c <__alt_data_end+0xfffef14c>
1010f504:	0101ffc4 	movi	r4,2047
1010f508:	493f9c1e 	bne	r9,r4,1010f37c <__alt_data_end+0xfffef37c>
1010f50c:	2807883a 	mov	r3,r5
1010f510:	3023883a 	mov	r17,r6
1010f514:	4821883a 	mov	r16,r9
1010f518:	3825883a 	mov	r18,r7
1010f51c:	003e9106 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f520:	80001f1e 	bne	r16,zero,1010f5a0 <__subdf3+0x6c0>
1010f524:	1c48b03a 	or	r4,r3,r17
1010f528:	20005a26 	beq	r4,zero,1010f694 <__subdf3+0x7b4>
1010f52c:	0084303a 	nor	r2,zero,r2
1010f530:	1000561e 	bne	r2,zero,1010f68c <__subdf3+0x7ac>
1010f534:	89a3883a 	add	r17,r17,r6
1010f538:	1945883a 	add	r2,r3,r5
1010f53c:	898d803a 	cmpltu	r6,r17,r6
1010f540:	3087883a 	add	r3,r6,r2
1010f544:	4821883a 	mov	r16,r9
1010f548:	003f0506 	br	1010f160 <__alt_data_end+0xfffef160>
1010f54c:	10002b1e 	bne	r2,zero,1010f5fc <__subdf3+0x71c>
1010f550:	2984b03a 	or	r2,r5,r6
1010f554:	10008026 	beq	r2,zero,1010f758 <__subdf3+0x878>
1010f558:	2807883a 	mov	r3,r5
1010f55c:	3023883a 	mov	r17,r6
1010f560:	3825883a 	mov	r18,r7
1010f564:	0401ffc4 	movi	r16,2047
1010f568:	003e7e06 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f56c:	3809883a 	mov	r4,r7
1010f570:	0011883a 	mov	r8,zero
1010f574:	0005883a 	mov	r2,zero
1010f578:	003ee306 	br	1010f108 <__alt_data_end+0xfffef108>
1010f57c:	1c62b03a 	or	r17,r3,r17
1010f580:	8822c03a 	cmpne	r17,r17,zero
1010f584:	0005883a 	mov	r2,zero
1010f588:	003f8906 	br	1010f3b0 <__alt_data_end+0xfffef3b0>
1010f58c:	3809883a 	mov	r4,r7
1010f590:	4821883a 	mov	r16,r9
1010f594:	0011883a 	mov	r8,zero
1010f598:	0005883a 	mov	r2,zero
1010f59c:	003eda06 	br	1010f108 <__alt_data_end+0xfffef108>
1010f5a0:	0101ffc4 	movi	r4,2047
1010f5a4:	49003b26 	beq	r9,r4,1010f694 <__subdf3+0x7b4>
1010f5a8:	0085c83a 	sub	r2,zero,r2
1010f5ac:	18c02034 	orhi	r3,r3,128
1010f5b0:	01000e04 	movi	r4,56
1010f5b4:	20806e16 	blt	r4,r2,1010f770 <__subdf3+0x890>
1010f5b8:	010007c4 	movi	r4,31
1010f5bc:	20807716 	blt	r4,r2,1010f79c <__subdf3+0x8bc>
1010f5c0:	01000804 	movi	r4,32
1010f5c4:	2089c83a 	sub	r4,r4,r2
1010f5c8:	1914983a 	sll	r10,r3,r4
1010f5cc:	8890d83a 	srl	r8,r17,r2
1010f5d0:	8908983a 	sll	r4,r17,r4
1010f5d4:	1884d83a 	srl	r2,r3,r2
1010f5d8:	5222b03a 	or	r17,r10,r8
1010f5dc:	2006c03a 	cmpne	r3,r4,zero
1010f5e0:	88e2b03a 	or	r17,r17,r3
1010f5e4:	89a3883a 	add	r17,r17,r6
1010f5e8:	1145883a 	add	r2,r2,r5
1010f5ec:	898d803a 	cmpltu	r6,r17,r6
1010f5f0:	3087883a 	add	r3,r6,r2
1010f5f4:	4821883a 	mov	r16,r9
1010f5f8:	003ed906 	br	1010f160 <__alt_data_end+0xfffef160>
1010f5fc:	2984b03a 	or	r2,r5,r6
1010f600:	10004226 	beq	r2,zero,1010f70c <__subdf3+0x82c>
1010f604:	1808d0fa 	srli	r4,r3,3
1010f608:	8822d0fa 	srli	r17,r17,3
1010f60c:	1806977a 	slli	r3,r3,29
1010f610:	2080022c 	andhi	r2,r4,8
1010f614:	1c62b03a 	or	r17,r3,r17
1010f618:	10000826 	beq	r2,zero,1010f63c <__subdf3+0x75c>
1010f61c:	2812d0fa 	srli	r9,r5,3
1010f620:	4880022c 	andhi	r2,r9,8
1010f624:	1000051e 	bne	r2,zero,1010f63c <__subdf3+0x75c>
1010f628:	300cd0fa 	srli	r6,r6,3
1010f62c:	2804977a 	slli	r2,r5,29
1010f630:	4809883a 	mov	r4,r9
1010f634:	3825883a 	mov	r18,r7
1010f638:	11a2b03a 	or	r17,r2,r6
1010f63c:	8806d77a 	srli	r3,r17,29
1010f640:	200890fa 	slli	r4,r4,3
1010f644:	882290fa 	slli	r17,r17,3
1010f648:	0401ffc4 	movi	r16,2047
1010f64c:	1906b03a 	or	r3,r3,r4
1010f650:	003e4406 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f654:	2984b03a 	or	r2,r5,r6
1010f658:	103e4226 	beq	r2,zero,1010ef64 <__alt_data_end+0xfffeef64>
1010f65c:	8989c83a 	sub	r4,r17,r6
1010f660:	8911803a 	cmpltu	r8,r17,r4
1010f664:	1945c83a 	sub	r2,r3,r5
1010f668:	1205c83a 	sub	r2,r2,r8
1010f66c:	1200202c 	andhi	r8,r2,128
1010f670:	403e9a26 	beq	r8,zero,1010f0dc <__alt_data_end+0xfffef0dc>
1010f674:	3463c83a 	sub	r17,r6,r17
1010f678:	28c5c83a 	sub	r2,r5,r3
1010f67c:	344d803a 	cmpltu	r6,r6,r17
1010f680:	1187c83a 	sub	r3,r2,r6
1010f684:	3825883a 	mov	r18,r7
1010f688:	003e3606 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f68c:	0101ffc4 	movi	r4,2047
1010f690:	493fc71e 	bne	r9,r4,1010f5b0 <__alt_data_end+0xfffef5b0>
1010f694:	2807883a 	mov	r3,r5
1010f698:	3023883a 	mov	r17,r6
1010f69c:	4821883a 	mov	r16,r9
1010f6a0:	003e3006 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f6a4:	10003626 	beq	r2,zero,1010f780 <__subdf3+0x8a0>
1010f6a8:	2984b03a 	or	r2,r5,r6
1010f6ac:	10001726 	beq	r2,zero,1010f70c <__subdf3+0x82c>
1010f6b0:	1808d0fa 	srli	r4,r3,3
1010f6b4:	8822d0fa 	srli	r17,r17,3
1010f6b8:	1806977a 	slli	r3,r3,29
1010f6bc:	2080022c 	andhi	r2,r4,8
1010f6c0:	1c62b03a 	or	r17,r3,r17
1010f6c4:	10000726 	beq	r2,zero,1010f6e4 <__subdf3+0x804>
1010f6c8:	2812d0fa 	srli	r9,r5,3
1010f6cc:	4880022c 	andhi	r2,r9,8
1010f6d0:	1000041e 	bne	r2,zero,1010f6e4 <__subdf3+0x804>
1010f6d4:	300cd0fa 	srli	r6,r6,3
1010f6d8:	2804977a 	slli	r2,r5,29
1010f6dc:	4809883a 	mov	r4,r9
1010f6e0:	11a2b03a 	or	r17,r2,r6
1010f6e4:	8806d77a 	srli	r3,r17,29
1010f6e8:	200890fa 	slli	r4,r4,3
1010f6ec:	882290fa 	slli	r17,r17,3
1010f6f0:	3825883a 	mov	r18,r7
1010f6f4:	1906b03a 	or	r3,r3,r4
1010f6f8:	0401ffc4 	movi	r16,2047
1010f6fc:	003e1906 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f700:	000b883a 	mov	r5,zero
1010f704:	0005883a 	mov	r2,zero
1010f708:	003e2e06 	br	1010efc4 <__alt_data_end+0xfffeefc4>
1010f70c:	0401ffc4 	movi	r16,2047
1010f710:	003e1406 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f714:	0005883a 	mov	r2,zero
1010f718:	003f7506 	br	1010f4f0 <__alt_data_end+0xfffef4f0>
1010f71c:	0005883a 	mov	r2,zero
1010f720:	0009883a 	mov	r4,zero
1010f724:	003e7806 	br	1010f108 <__alt_data_end+0xfffef108>
1010f728:	123ff804 	addi	r8,r2,-32
1010f72c:	01000804 	movi	r4,32
1010f730:	1a10d83a 	srl	r8,r3,r8
1010f734:	11002526 	beq	r2,r4,1010f7cc <__subdf3+0x8ec>
1010f738:	01001004 	movi	r4,64
1010f73c:	2085c83a 	sub	r2,r4,r2
1010f740:	1884983a 	sll	r2,r3,r2
1010f744:	1444b03a 	or	r2,r2,r17
1010f748:	1004c03a 	cmpne	r2,r2,zero
1010f74c:	40a2b03a 	or	r17,r8,r2
1010f750:	0005883a 	mov	r2,zero
1010f754:	003f1606 	br	1010f3b0 <__alt_data_end+0xfffef3b0>
1010f758:	02000434 	movhi	r8,16
1010f75c:	0009883a 	mov	r4,zero
1010f760:	423fffc4 	addi	r8,r8,-1
1010f764:	00bfffc4 	movi	r2,-1
1010f768:	0401ffc4 	movi	r16,2047
1010f76c:	003e6606 	br	1010f108 <__alt_data_end+0xfffef108>
1010f770:	1c62b03a 	or	r17,r3,r17
1010f774:	8822c03a 	cmpne	r17,r17,zero
1010f778:	0005883a 	mov	r2,zero
1010f77c:	003f9906 	br	1010f5e4 <__alt_data_end+0xfffef5e4>
1010f780:	2807883a 	mov	r3,r5
1010f784:	3023883a 	mov	r17,r6
1010f788:	0401ffc4 	movi	r16,2047
1010f78c:	003df506 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f790:	2807883a 	mov	r3,r5
1010f794:	3023883a 	mov	r17,r6
1010f798:	003df206 	br	1010ef64 <__alt_data_end+0xfffeef64>
1010f79c:	123ff804 	addi	r8,r2,-32
1010f7a0:	01000804 	movi	r4,32
1010f7a4:	1a10d83a 	srl	r8,r3,r8
1010f7a8:	11000a26 	beq	r2,r4,1010f7d4 <__subdf3+0x8f4>
1010f7ac:	01001004 	movi	r4,64
1010f7b0:	2085c83a 	sub	r2,r4,r2
1010f7b4:	1884983a 	sll	r2,r3,r2
1010f7b8:	1444b03a 	or	r2,r2,r17
1010f7bc:	1004c03a 	cmpne	r2,r2,zero
1010f7c0:	40a2b03a 	or	r17,r8,r2
1010f7c4:	0005883a 	mov	r2,zero
1010f7c8:	003f8606 	br	1010f5e4 <__alt_data_end+0xfffef5e4>
1010f7cc:	0005883a 	mov	r2,zero
1010f7d0:	003fdc06 	br	1010f744 <__alt_data_end+0xfffef744>
1010f7d4:	0005883a 	mov	r2,zero
1010f7d8:	003ff706 	br	1010f7b8 <__alt_data_end+0xfffef7b8>

1010f7dc <__fixdfsi>:
1010f7dc:	280cd53a 	srli	r6,r5,20
1010f7e0:	00c00434 	movhi	r3,16
1010f7e4:	18ffffc4 	addi	r3,r3,-1
1010f7e8:	3181ffcc 	andi	r6,r6,2047
1010f7ec:	01c0ff84 	movi	r7,1022
1010f7f0:	28c6703a 	and	r3,r5,r3
1010f7f4:	280ad7fa 	srli	r5,r5,31
1010f7f8:	3980120e 	bge	r7,r6,1010f844 <__fixdfsi+0x68>
1010f7fc:	00810744 	movi	r2,1053
1010f800:	11800c16 	blt	r2,r6,1010f834 <__fixdfsi+0x58>
1010f804:	00810cc4 	movi	r2,1075
1010f808:	1185c83a 	sub	r2,r2,r6
1010f80c:	01c007c4 	movi	r7,31
1010f810:	18c00434 	orhi	r3,r3,16
1010f814:	38800d16 	blt	r7,r2,1010f84c <__fixdfsi+0x70>
1010f818:	31befb44 	addi	r6,r6,-1043
1010f81c:	2084d83a 	srl	r2,r4,r2
1010f820:	1986983a 	sll	r3,r3,r6
1010f824:	1884b03a 	or	r2,r3,r2
1010f828:	28000726 	beq	r5,zero,1010f848 <__fixdfsi+0x6c>
1010f82c:	0085c83a 	sub	r2,zero,r2
1010f830:	f800283a 	ret
1010f834:	00a00034 	movhi	r2,32768
1010f838:	10bfffc4 	addi	r2,r2,-1
1010f83c:	2885883a 	add	r2,r5,r2
1010f840:	f800283a 	ret
1010f844:	0005883a 	mov	r2,zero
1010f848:	f800283a 	ret
1010f84c:	008104c4 	movi	r2,1043
1010f850:	1185c83a 	sub	r2,r2,r6
1010f854:	1884d83a 	srl	r2,r3,r2
1010f858:	003ff306 	br	1010f828 <__alt_data_end+0xfffef828>

1010f85c <__floatsidf>:
1010f85c:	defffd04 	addi	sp,sp,-12
1010f860:	dfc00215 	stw	ra,8(sp)
1010f864:	dc400115 	stw	r17,4(sp)
1010f868:	dc000015 	stw	r16,0(sp)
1010f86c:	20002b26 	beq	r4,zero,1010f91c <__floatsidf+0xc0>
1010f870:	2023883a 	mov	r17,r4
1010f874:	2020d7fa 	srli	r16,r4,31
1010f878:	20002d16 	blt	r4,zero,1010f930 <__floatsidf+0xd4>
1010f87c:	8809883a 	mov	r4,r17
1010f880:	010f9e00 	call	1010f9e0 <__clzsi2>
1010f884:	01410784 	movi	r5,1054
1010f888:	288bc83a 	sub	r5,r5,r2
1010f88c:	01010cc4 	movi	r4,1075
1010f890:	2149c83a 	sub	r4,r4,r5
1010f894:	00c007c4 	movi	r3,31
1010f898:	1900160e 	bge	r3,r4,1010f8f4 <__floatsidf+0x98>
1010f89c:	00c104c4 	movi	r3,1043
1010f8a0:	1947c83a 	sub	r3,r3,r5
1010f8a4:	88c6983a 	sll	r3,r17,r3
1010f8a8:	00800434 	movhi	r2,16
1010f8ac:	10bfffc4 	addi	r2,r2,-1
1010f8b0:	1886703a 	and	r3,r3,r2
1010f8b4:	2941ffcc 	andi	r5,r5,2047
1010f8b8:	800d883a 	mov	r6,r16
1010f8bc:	0005883a 	mov	r2,zero
1010f8c0:	280a953a 	slli	r5,r5,20
1010f8c4:	31803fcc 	andi	r6,r6,255
1010f8c8:	01000434 	movhi	r4,16
1010f8cc:	300c97fa 	slli	r6,r6,31
1010f8d0:	213fffc4 	addi	r4,r4,-1
1010f8d4:	1906703a 	and	r3,r3,r4
1010f8d8:	1946b03a 	or	r3,r3,r5
1010f8dc:	1986b03a 	or	r3,r3,r6
1010f8e0:	dfc00217 	ldw	ra,8(sp)
1010f8e4:	dc400117 	ldw	r17,4(sp)
1010f8e8:	dc000017 	ldw	r16,0(sp)
1010f8ec:	dec00304 	addi	sp,sp,12
1010f8f0:	f800283a 	ret
1010f8f4:	00c002c4 	movi	r3,11
1010f8f8:	1887c83a 	sub	r3,r3,r2
1010f8fc:	88c6d83a 	srl	r3,r17,r3
1010f900:	8904983a 	sll	r2,r17,r4
1010f904:	01000434 	movhi	r4,16
1010f908:	213fffc4 	addi	r4,r4,-1
1010f90c:	2941ffcc 	andi	r5,r5,2047
1010f910:	1906703a 	and	r3,r3,r4
1010f914:	800d883a 	mov	r6,r16
1010f918:	003fe906 	br	1010f8c0 <__alt_data_end+0xfffef8c0>
1010f91c:	000d883a 	mov	r6,zero
1010f920:	000b883a 	mov	r5,zero
1010f924:	0007883a 	mov	r3,zero
1010f928:	0005883a 	mov	r2,zero
1010f92c:	003fe406 	br	1010f8c0 <__alt_data_end+0xfffef8c0>
1010f930:	0123c83a 	sub	r17,zero,r4
1010f934:	003fd106 	br	1010f87c <__alt_data_end+0xfffef87c>

1010f938 <__floatunsidf>:
1010f938:	defffe04 	addi	sp,sp,-8
1010f93c:	dc000015 	stw	r16,0(sp)
1010f940:	dfc00115 	stw	ra,4(sp)
1010f944:	2021883a 	mov	r16,r4
1010f948:	20002226 	beq	r4,zero,1010f9d4 <__floatunsidf+0x9c>
1010f94c:	010f9e00 	call	1010f9e0 <__clzsi2>
1010f950:	01010784 	movi	r4,1054
1010f954:	2089c83a 	sub	r4,r4,r2
1010f958:	01810cc4 	movi	r6,1075
1010f95c:	310dc83a 	sub	r6,r6,r4
1010f960:	00c007c4 	movi	r3,31
1010f964:	1980120e 	bge	r3,r6,1010f9b0 <__floatunsidf+0x78>
1010f968:	00c104c4 	movi	r3,1043
1010f96c:	1907c83a 	sub	r3,r3,r4
1010f970:	80ca983a 	sll	r5,r16,r3
1010f974:	00800434 	movhi	r2,16
1010f978:	10bfffc4 	addi	r2,r2,-1
1010f97c:	2101ffcc 	andi	r4,r4,2047
1010f980:	0021883a 	mov	r16,zero
1010f984:	288a703a 	and	r5,r5,r2
1010f988:	2008953a 	slli	r4,r4,20
1010f98c:	00c00434 	movhi	r3,16
1010f990:	18ffffc4 	addi	r3,r3,-1
1010f994:	28c6703a 	and	r3,r5,r3
1010f998:	8005883a 	mov	r2,r16
1010f99c:	1906b03a 	or	r3,r3,r4
1010f9a0:	dfc00117 	ldw	ra,4(sp)
1010f9a4:	dc000017 	ldw	r16,0(sp)
1010f9a8:	dec00204 	addi	sp,sp,8
1010f9ac:	f800283a 	ret
1010f9b0:	00c002c4 	movi	r3,11
1010f9b4:	188bc83a 	sub	r5,r3,r2
1010f9b8:	814ad83a 	srl	r5,r16,r5
1010f9bc:	00c00434 	movhi	r3,16
1010f9c0:	18ffffc4 	addi	r3,r3,-1
1010f9c4:	81a0983a 	sll	r16,r16,r6
1010f9c8:	2101ffcc 	andi	r4,r4,2047
1010f9cc:	28ca703a 	and	r5,r5,r3
1010f9d0:	003fed06 	br	1010f988 <__alt_data_end+0xfffef988>
1010f9d4:	0009883a 	mov	r4,zero
1010f9d8:	000b883a 	mov	r5,zero
1010f9dc:	003fea06 	br	1010f988 <__alt_data_end+0xfffef988>

1010f9e0 <__clzsi2>:
1010f9e0:	00bfffd4 	movui	r2,65535
1010f9e4:	11000536 	bltu	r2,r4,1010f9fc <__clzsi2+0x1c>
1010f9e8:	00803fc4 	movi	r2,255
1010f9ec:	11000f36 	bltu	r2,r4,1010fa2c <__clzsi2+0x4c>
1010f9f0:	00800804 	movi	r2,32
1010f9f4:	0007883a 	mov	r3,zero
1010f9f8:	00000506 	br	1010fa10 <__clzsi2+0x30>
1010f9fc:	00804034 	movhi	r2,256
1010fa00:	10bfffc4 	addi	r2,r2,-1
1010fa04:	11000c2e 	bgeu	r2,r4,1010fa38 <__clzsi2+0x58>
1010fa08:	00800204 	movi	r2,8
1010fa0c:	00c00604 	movi	r3,24
1010fa10:	20c8d83a 	srl	r4,r4,r3
1010fa14:	00c40474 	movhi	r3,4113
1010fa18:	18ca8204 	addi	r3,r3,10760
1010fa1c:	1909883a 	add	r4,r3,r4
1010fa20:	20c00003 	ldbu	r3,0(r4)
1010fa24:	10c5c83a 	sub	r2,r2,r3
1010fa28:	f800283a 	ret
1010fa2c:	00800604 	movi	r2,24
1010fa30:	00c00204 	movi	r3,8
1010fa34:	003ff606 	br	1010fa10 <__alt_data_end+0xfffefa10>
1010fa38:	00800404 	movi	r2,16
1010fa3c:	1007883a 	mov	r3,r2
1010fa40:	003ff306 	br	1010fa10 <__alt_data_end+0xfffefa10>

1010fa44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fa44:	defffe04 	addi	sp,sp,-8
1010fa48:	dfc00115 	stw	ra,4(sp)
1010fa4c:	df000015 	stw	fp,0(sp)
1010fa50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fa54:	d0a00b17 	ldw	r2,-32724(gp)
1010fa58:	10000326 	beq	r2,zero,1010fa68 <alt_get_errno+0x24>
1010fa5c:	d0a00b17 	ldw	r2,-32724(gp)
1010fa60:	103ee83a 	callr	r2
1010fa64:	00000106 	br	1010fa6c <alt_get_errno+0x28>
1010fa68:	d0a6f904 	addi	r2,gp,-25628
}
1010fa6c:	e037883a 	mov	sp,fp
1010fa70:	dfc00117 	ldw	ra,4(sp)
1010fa74:	df000017 	ldw	fp,0(sp)
1010fa78:	dec00204 	addi	sp,sp,8
1010fa7c:	f800283a 	ret

1010fa80 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010fa80:	defffb04 	addi	sp,sp,-20
1010fa84:	dfc00415 	stw	ra,16(sp)
1010fa88:	df000315 	stw	fp,12(sp)
1010fa8c:	df000304 	addi	fp,sp,12
1010fa90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010fa94:	e0bfff17 	ldw	r2,-4(fp)
1010fa98:	10000616 	blt	r2,zero,1010fab4 <close+0x34>
1010fa9c:	e0bfff17 	ldw	r2,-4(fp)
1010faa0:	10c00324 	muli	r3,r2,12
1010faa4:	00840474 	movhi	r2,4113
1010faa8:	108d0504 	addi	r2,r2,13332
1010faac:	1885883a 	add	r2,r3,r2
1010fab0:	00000106 	br	1010fab8 <close+0x38>
1010fab4:	0005883a 	mov	r2,zero
1010fab8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010fabc:	e0bffd17 	ldw	r2,-12(fp)
1010fac0:	10001926 	beq	r2,zero,1010fb28 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010fac4:	e0bffd17 	ldw	r2,-12(fp)
1010fac8:	10800017 	ldw	r2,0(r2)
1010facc:	10800417 	ldw	r2,16(r2)
1010fad0:	10000626 	beq	r2,zero,1010faec <close+0x6c>
1010fad4:	e0bffd17 	ldw	r2,-12(fp)
1010fad8:	10800017 	ldw	r2,0(r2)
1010fadc:	10800417 	ldw	r2,16(r2)
1010fae0:	e13ffd17 	ldw	r4,-12(fp)
1010fae4:	103ee83a 	callr	r2
1010fae8:	00000106 	br	1010faf0 <close+0x70>
1010faec:	0005883a 	mov	r2,zero
1010faf0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010faf4:	e13fff17 	ldw	r4,-4(fp)
1010faf8:	01103940 	call	10110394 <alt_release_fd>
    if (rval < 0)
1010fafc:	e0bffe17 	ldw	r2,-8(fp)
1010fb00:	1000070e 	bge	r2,zero,1010fb20 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010fb04:	010fa440 	call	1010fa44 <alt_get_errno>
1010fb08:	1007883a 	mov	r3,r2
1010fb0c:	e0bffe17 	ldw	r2,-8(fp)
1010fb10:	0085c83a 	sub	r2,zero,r2
1010fb14:	18800015 	stw	r2,0(r3)
      return -1;
1010fb18:	00bfffc4 	movi	r2,-1
1010fb1c:	00000706 	br	1010fb3c <close+0xbc>
    }
    return 0;
1010fb20:	0005883a 	mov	r2,zero
1010fb24:	00000506 	br	1010fb3c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010fb28:	010fa440 	call	1010fa44 <alt_get_errno>
1010fb2c:	1007883a 	mov	r3,r2
1010fb30:	00801444 	movi	r2,81
1010fb34:	18800015 	stw	r2,0(r3)
    return -1;
1010fb38:	00bfffc4 	movi	r2,-1
  }
}
1010fb3c:	e037883a 	mov	sp,fp
1010fb40:	dfc00117 	ldw	ra,4(sp)
1010fb44:	df000017 	ldw	fp,0(sp)
1010fb48:	dec00204 	addi	sp,sp,8
1010fb4c:	f800283a 	ret

1010fb50 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010fb50:	defffc04 	addi	sp,sp,-16
1010fb54:	df000315 	stw	fp,12(sp)
1010fb58:	df000304 	addi	fp,sp,12
1010fb5c:	e13ffd15 	stw	r4,-12(fp)
1010fb60:	e17ffe15 	stw	r5,-8(fp)
1010fb64:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010fb68:	e0bfff17 	ldw	r2,-4(fp)
}
1010fb6c:	e037883a 	mov	sp,fp
1010fb70:	df000017 	ldw	fp,0(sp)
1010fb74:	dec00104 	addi	sp,sp,4
1010fb78:	f800283a 	ret

1010fb7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fb7c:	defffe04 	addi	sp,sp,-8
1010fb80:	dfc00115 	stw	ra,4(sp)
1010fb84:	df000015 	stw	fp,0(sp)
1010fb88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fb8c:	d0a00b17 	ldw	r2,-32724(gp)
1010fb90:	10000326 	beq	r2,zero,1010fba0 <alt_get_errno+0x24>
1010fb94:	d0a00b17 	ldw	r2,-32724(gp)
1010fb98:	103ee83a 	callr	r2
1010fb9c:	00000106 	br	1010fba4 <alt_get_errno+0x28>
1010fba0:	d0a6f904 	addi	r2,gp,-25628
}
1010fba4:	e037883a 	mov	sp,fp
1010fba8:	dfc00117 	ldw	ra,4(sp)
1010fbac:	df000017 	ldw	fp,0(sp)
1010fbb0:	dec00204 	addi	sp,sp,8
1010fbb4:	f800283a 	ret

1010fbb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010fbb8:	defffb04 	addi	sp,sp,-20
1010fbbc:	dfc00415 	stw	ra,16(sp)
1010fbc0:	df000315 	stw	fp,12(sp)
1010fbc4:	df000304 	addi	fp,sp,12
1010fbc8:	e13ffe15 	stw	r4,-8(fp)
1010fbcc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010fbd0:	e0bffe17 	ldw	r2,-8(fp)
1010fbd4:	10000616 	blt	r2,zero,1010fbf0 <fstat+0x38>
1010fbd8:	e0bffe17 	ldw	r2,-8(fp)
1010fbdc:	10c00324 	muli	r3,r2,12
1010fbe0:	00840474 	movhi	r2,4113
1010fbe4:	108d0504 	addi	r2,r2,13332
1010fbe8:	1885883a 	add	r2,r3,r2
1010fbec:	00000106 	br	1010fbf4 <fstat+0x3c>
1010fbf0:	0005883a 	mov	r2,zero
1010fbf4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010fbf8:	e0bffd17 	ldw	r2,-12(fp)
1010fbfc:	10001026 	beq	r2,zero,1010fc40 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010fc00:	e0bffd17 	ldw	r2,-12(fp)
1010fc04:	10800017 	ldw	r2,0(r2)
1010fc08:	10800817 	ldw	r2,32(r2)
1010fc0c:	10000726 	beq	r2,zero,1010fc2c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010fc10:	e0bffd17 	ldw	r2,-12(fp)
1010fc14:	10800017 	ldw	r2,0(r2)
1010fc18:	10800817 	ldw	r2,32(r2)
1010fc1c:	e17fff17 	ldw	r5,-4(fp)
1010fc20:	e13ffd17 	ldw	r4,-12(fp)
1010fc24:	103ee83a 	callr	r2
1010fc28:	00000a06 	br	1010fc54 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010fc2c:	e0bfff17 	ldw	r2,-4(fp)
1010fc30:	00c80004 	movi	r3,8192
1010fc34:	10c00115 	stw	r3,4(r2)
      return 0;
1010fc38:	0005883a 	mov	r2,zero
1010fc3c:	00000506 	br	1010fc54 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010fc40:	010fb7c0 	call	1010fb7c <alt_get_errno>
1010fc44:	1007883a 	mov	r3,r2
1010fc48:	00801444 	movi	r2,81
1010fc4c:	18800015 	stw	r2,0(r3)
    return -1;
1010fc50:	00bfffc4 	movi	r2,-1
  }
}
1010fc54:	e037883a 	mov	sp,fp
1010fc58:	dfc00117 	ldw	ra,4(sp)
1010fc5c:	df000017 	ldw	fp,0(sp)
1010fc60:	dec00204 	addi	sp,sp,8
1010fc64:	f800283a 	ret

1010fc68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fc68:	defffe04 	addi	sp,sp,-8
1010fc6c:	dfc00115 	stw	ra,4(sp)
1010fc70:	df000015 	stw	fp,0(sp)
1010fc74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fc78:	d0a00b17 	ldw	r2,-32724(gp)
1010fc7c:	10000326 	beq	r2,zero,1010fc8c <alt_get_errno+0x24>
1010fc80:	d0a00b17 	ldw	r2,-32724(gp)
1010fc84:	103ee83a 	callr	r2
1010fc88:	00000106 	br	1010fc90 <alt_get_errno+0x28>
1010fc8c:	d0a6f904 	addi	r2,gp,-25628
}
1010fc90:	e037883a 	mov	sp,fp
1010fc94:	dfc00117 	ldw	ra,4(sp)
1010fc98:	df000017 	ldw	fp,0(sp)
1010fc9c:	dec00204 	addi	sp,sp,8
1010fca0:	f800283a 	ret

1010fca4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010fca4:	deffed04 	addi	sp,sp,-76
1010fca8:	dfc01215 	stw	ra,72(sp)
1010fcac:	df001115 	stw	fp,68(sp)
1010fcb0:	df001104 	addi	fp,sp,68
1010fcb4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010fcb8:	e0bfff17 	ldw	r2,-4(fp)
1010fcbc:	10000616 	blt	r2,zero,1010fcd8 <isatty+0x34>
1010fcc0:	e0bfff17 	ldw	r2,-4(fp)
1010fcc4:	10c00324 	muli	r3,r2,12
1010fcc8:	00840474 	movhi	r2,4113
1010fccc:	108d0504 	addi	r2,r2,13332
1010fcd0:	1885883a 	add	r2,r3,r2
1010fcd4:	00000106 	br	1010fcdc <isatty+0x38>
1010fcd8:	0005883a 	mov	r2,zero
1010fcdc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010fce0:	e0bfef17 	ldw	r2,-68(fp)
1010fce4:	10000e26 	beq	r2,zero,1010fd20 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010fce8:	e0bfef17 	ldw	r2,-68(fp)
1010fcec:	10800017 	ldw	r2,0(r2)
1010fcf0:	10800817 	ldw	r2,32(r2)
1010fcf4:	1000021e 	bne	r2,zero,1010fd00 <isatty+0x5c>
    {
      return 1;
1010fcf8:	00800044 	movi	r2,1
1010fcfc:	00000d06 	br	1010fd34 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010fd00:	e0bff004 	addi	r2,fp,-64
1010fd04:	100b883a 	mov	r5,r2
1010fd08:	e13fff17 	ldw	r4,-4(fp)
1010fd0c:	010fbb80 	call	1010fbb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010fd10:	e0bff117 	ldw	r2,-60(fp)
1010fd14:	10880020 	cmpeqi	r2,r2,8192
1010fd18:	10803fcc 	andi	r2,r2,255
1010fd1c:	00000506 	br	1010fd34 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010fd20:	010fc680 	call	1010fc68 <alt_get_errno>
1010fd24:	1007883a 	mov	r3,r2
1010fd28:	00801444 	movi	r2,81
1010fd2c:	18800015 	stw	r2,0(r3)
    return 0;
1010fd30:	0005883a 	mov	r2,zero
  }
}
1010fd34:	e037883a 	mov	sp,fp
1010fd38:	dfc00117 	ldw	ra,4(sp)
1010fd3c:	df000017 	ldw	fp,0(sp)
1010fd40:	dec00204 	addi	sp,sp,8
1010fd44:	f800283a 	ret

1010fd48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010fd48:	defffc04 	addi	sp,sp,-16
1010fd4c:	df000315 	stw	fp,12(sp)
1010fd50:	df000304 	addi	fp,sp,12
1010fd54:	e13ffd15 	stw	r4,-12(fp)
1010fd58:	e17ffe15 	stw	r5,-8(fp)
1010fd5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010fd60:	e0fffe17 	ldw	r3,-8(fp)
1010fd64:	e0bffd17 	ldw	r2,-12(fp)
1010fd68:	18800c26 	beq	r3,r2,1010fd9c <alt_load_section+0x54>
  {
    while( to != end )
1010fd6c:	00000806 	br	1010fd90 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010fd70:	e0bffe17 	ldw	r2,-8(fp)
1010fd74:	10c00104 	addi	r3,r2,4
1010fd78:	e0fffe15 	stw	r3,-8(fp)
1010fd7c:	e0fffd17 	ldw	r3,-12(fp)
1010fd80:	19000104 	addi	r4,r3,4
1010fd84:	e13ffd15 	stw	r4,-12(fp)
1010fd88:	18c00017 	ldw	r3,0(r3)
1010fd8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010fd90:	e0fffe17 	ldw	r3,-8(fp)
1010fd94:	e0bfff17 	ldw	r2,-4(fp)
1010fd98:	18bff51e 	bne	r3,r2,1010fd70 <__alt_data_end+0xfffefd70>
    {
      *to++ = *from++;
    }
  }
}
1010fd9c:	0001883a 	nop
1010fda0:	e037883a 	mov	sp,fp
1010fda4:	df000017 	ldw	fp,0(sp)
1010fda8:	dec00104 	addi	sp,sp,4
1010fdac:	f800283a 	ret

1010fdb0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010fdb0:	defffe04 	addi	sp,sp,-8
1010fdb4:	dfc00115 	stw	ra,4(sp)
1010fdb8:	df000015 	stw	fp,0(sp)
1010fdbc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010fdc0:	01840474 	movhi	r6,4113
1010fdc4:	3191a904 	addi	r6,r6,18084
1010fdc8:	01440474 	movhi	r5,4113
1010fdcc:	294ad204 	addi	r5,r5,11080
1010fdd0:	01040474 	movhi	r4,4113
1010fdd4:	2111a904 	addi	r4,r4,18084
1010fdd8:	010fd480 	call	1010fd48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010fddc:	01840434 	movhi	r6,4112
1010fde0:	31809104 	addi	r6,r6,580
1010fde4:	01440434 	movhi	r5,4112
1010fde8:	29400804 	addi	r5,r5,32
1010fdec:	01040434 	movhi	r4,4112
1010fdf0:	21000804 	addi	r4,r4,32
1010fdf4:	010fd480 	call	1010fd48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010fdf8:	01840474 	movhi	r6,4113
1010fdfc:	318ad204 	addi	r6,r6,11080
1010fe00:	01440474 	movhi	r5,4113
1010fe04:	2949df04 	addi	r5,r5,10108
1010fe08:	01040474 	movhi	r4,4113
1010fe0c:	2109df04 	addi	r4,r4,10108
1010fe10:	010fd480 	call	1010fd48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010fe14:	011183c0 	call	1011183c <alt_dcache_flush_all>
  alt_icache_flush_all();
1010fe18:	0111ce00 	call	10111ce0 <alt_icache_flush_all>
}
1010fe1c:	0001883a 	nop
1010fe20:	e037883a 	mov	sp,fp
1010fe24:	dfc00117 	ldw	ra,4(sp)
1010fe28:	df000017 	ldw	fp,0(sp)
1010fe2c:	dec00204 	addi	sp,sp,8
1010fe30:	f800283a 	ret

1010fe34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fe34:	defffe04 	addi	sp,sp,-8
1010fe38:	dfc00115 	stw	ra,4(sp)
1010fe3c:	df000015 	stw	fp,0(sp)
1010fe40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010fe44:	d0a00b17 	ldw	r2,-32724(gp)
1010fe48:	10000326 	beq	r2,zero,1010fe58 <alt_get_errno+0x24>
1010fe4c:	d0a00b17 	ldw	r2,-32724(gp)
1010fe50:	103ee83a 	callr	r2
1010fe54:	00000106 	br	1010fe5c <alt_get_errno+0x28>
1010fe58:	d0a6f904 	addi	r2,gp,-25628
}
1010fe5c:	e037883a 	mov	sp,fp
1010fe60:	dfc00117 	ldw	ra,4(sp)
1010fe64:	df000017 	ldw	fp,0(sp)
1010fe68:	dec00204 	addi	sp,sp,8
1010fe6c:	f800283a 	ret

1010fe70 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010fe70:	defff904 	addi	sp,sp,-28
1010fe74:	dfc00615 	stw	ra,24(sp)
1010fe78:	df000515 	stw	fp,20(sp)
1010fe7c:	df000504 	addi	fp,sp,20
1010fe80:	e13ffd15 	stw	r4,-12(fp)
1010fe84:	e17ffe15 	stw	r5,-8(fp)
1010fe88:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010fe8c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010fe90:	e0bffd17 	ldw	r2,-12(fp)
1010fe94:	10000616 	blt	r2,zero,1010feb0 <lseek+0x40>
1010fe98:	e0bffd17 	ldw	r2,-12(fp)
1010fe9c:	10c00324 	muli	r3,r2,12
1010fea0:	00840474 	movhi	r2,4113
1010fea4:	108d0504 	addi	r2,r2,13332
1010fea8:	1885883a 	add	r2,r3,r2
1010feac:	00000106 	br	1010feb4 <lseek+0x44>
1010feb0:	0005883a 	mov	r2,zero
1010feb4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010feb8:	e0bffc17 	ldw	r2,-16(fp)
1010febc:	10001026 	beq	r2,zero,1010ff00 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010fec0:	e0bffc17 	ldw	r2,-16(fp)
1010fec4:	10800017 	ldw	r2,0(r2)
1010fec8:	10800717 	ldw	r2,28(r2)
1010fecc:	10000926 	beq	r2,zero,1010fef4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010fed0:	e0bffc17 	ldw	r2,-16(fp)
1010fed4:	10800017 	ldw	r2,0(r2)
1010fed8:	10800717 	ldw	r2,28(r2)
1010fedc:	e1bfff17 	ldw	r6,-4(fp)
1010fee0:	e17ffe17 	ldw	r5,-8(fp)
1010fee4:	e13ffc17 	ldw	r4,-16(fp)
1010fee8:	103ee83a 	callr	r2
1010feec:	e0bffb15 	stw	r2,-20(fp)
1010fef0:	00000506 	br	1010ff08 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010fef4:	00bfde84 	movi	r2,-134
1010fef8:	e0bffb15 	stw	r2,-20(fp)
1010fefc:	00000206 	br	1010ff08 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010ff00:	00bfebc4 	movi	r2,-81
1010ff04:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010ff08:	e0bffb17 	ldw	r2,-20(fp)
1010ff0c:	1000070e 	bge	r2,zero,1010ff2c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010ff10:	010fe340 	call	1010fe34 <alt_get_errno>
1010ff14:	1007883a 	mov	r3,r2
1010ff18:	e0bffb17 	ldw	r2,-20(fp)
1010ff1c:	0085c83a 	sub	r2,zero,r2
1010ff20:	18800015 	stw	r2,0(r3)
    rc = -1;
1010ff24:	00bfffc4 	movi	r2,-1
1010ff28:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010ff2c:	e0bffb17 	ldw	r2,-20(fp)
}
1010ff30:	e037883a 	mov	sp,fp
1010ff34:	dfc00117 	ldw	ra,4(sp)
1010ff38:	df000017 	ldw	fp,0(sp)
1010ff3c:	dec00204 	addi	sp,sp,8
1010ff40:	f800283a 	ret

1010ff44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010ff44:	defffd04 	addi	sp,sp,-12
1010ff48:	dfc00215 	stw	ra,8(sp)
1010ff4c:	df000115 	stw	fp,4(sp)
1010ff50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010ff54:	0009883a 	mov	r4,zero
1010ff58:	01106400 	call	10110640 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010ff5c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010ff60:	01106780 	call	10110678 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010ff64:	01840474 	movhi	r6,4113
1010ff68:	318ac504 	addi	r6,r6,11028
1010ff6c:	01440474 	movhi	r5,4113
1010ff70:	294ac504 	addi	r5,r5,11028
1010ff74:	01040474 	movhi	r4,4113
1010ff78:	210ac504 	addi	r4,r4,11028
1010ff7c:	01120780 	call	10112078 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010ff80:	01119640 	call	10111964 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010ff84:	01040474 	movhi	r4,4113
1010ff88:	21067104 	addi	r4,r4,6596
1010ff8c:	01123e80 	call	101123e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010ff90:	d0a70017 	ldw	r2,-25600(gp)
1010ff94:	d0e70117 	ldw	r3,-25596(gp)
1010ff98:	d1270217 	ldw	r4,-25592(gp)
1010ff9c:	200d883a 	mov	r6,r4
1010ffa0:	180b883a 	mov	r5,r3
1010ffa4:	1009883a 	mov	r4,r2
1010ffa8:	01022980 	call	10102298 <main>
1010ffac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010ffb0:	01000044 	movi	r4,1
1010ffb4:	010fa800 	call	1010fa80 <close>
  exit (result);
1010ffb8:	e13fff17 	ldw	r4,-4(fp)
1010ffbc:	01123fc0 	call	101123fc <exit>

1010ffc0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010ffc0:	defffe04 	addi	sp,sp,-8
1010ffc4:	df000115 	stw	fp,4(sp)
1010ffc8:	df000104 	addi	fp,sp,4
1010ffcc:	e13fff15 	stw	r4,-4(fp)
}
1010ffd0:	0001883a 	nop
1010ffd4:	e037883a 	mov	sp,fp
1010ffd8:	df000017 	ldw	fp,0(sp)
1010ffdc:	dec00104 	addi	sp,sp,4
1010ffe0:	f800283a 	ret

1010ffe4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010ffe4:	defffe04 	addi	sp,sp,-8
1010ffe8:	df000115 	stw	fp,4(sp)
1010ffec:	df000104 	addi	fp,sp,4
1010fff0:	e13fff15 	stw	r4,-4(fp)
}
1010fff4:	0001883a 	nop
1010fff8:	e037883a 	mov	sp,fp
1010fffc:	df000017 	ldw	fp,0(sp)
10110000:	dec00104 	addi	sp,sp,4
10110004:	f800283a 	ret

10110008 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10110008:	defffe04 	addi	sp,sp,-8
1011000c:	dfc00115 	stw	ra,4(sp)
10110010:	df000015 	stw	fp,0(sp)
10110014:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10110018:	d0a00b17 	ldw	r2,-32724(gp)
1011001c:	10000326 	beq	r2,zero,1011002c <alt_get_errno+0x24>
10110020:	d0a00b17 	ldw	r2,-32724(gp)
10110024:	103ee83a 	callr	r2
10110028:	00000106 	br	10110030 <alt_get_errno+0x28>
1011002c:	d0a6f904 	addi	r2,gp,-25628
}
10110030:	e037883a 	mov	sp,fp
10110034:	dfc00117 	ldw	ra,4(sp)
10110038:	df000017 	ldw	fp,0(sp)
1011003c:	dec00204 	addi	sp,sp,8
10110040:	f800283a 	ret

10110044 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10110044:	defffd04 	addi	sp,sp,-12
10110048:	df000215 	stw	fp,8(sp)
1011004c:	df000204 	addi	fp,sp,8
10110050:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10110054:	e0bfff17 	ldw	r2,-4(fp)
10110058:	10800217 	ldw	r2,8(r2)
1011005c:	10d00034 	orhi	r3,r2,16384
10110060:	e0bfff17 	ldw	r2,-4(fp)
10110064:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10110068:	e03ffe15 	stw	zero,-8(fp)
1011006c:	00001d06 	br	101100e4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10110070:	00840474 	movhi	r2,4113
10110074:	108d0504 	addi	r2,r2,13332
10110078:	e0fffe17 	ldw	r3,-8(fp)
1011007c:	18c00324 	muli	r3,r3,12
10110080:	10c5883a 	add	r2,r2,r3
10110084:	10c00017 	ldw	r3,0(r2)
10110088:	e0bfff17 	ldw	r2,-4(fp)
1011008c:	10800017 	ldw	r2,0(r2)
10110090:	1880111e 	bne	r3,r2,101100d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10110094:	00840474 	movhi	r2,4113
10110098:	108d0504 	addi	r2,r2,13332
1011009c:	e0fffe17 	ldw	r3,-8(fp)
101100a0:	18c00324 	muli	r3,r3,12
101100a4:	10c5883a 	add	r2,r2,r3
101100a8:	10800204 	addi	r2,r2,8
101100ac:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101100b0:	1000090e 	bge	r2,zero,101100d8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
101100b4:	e0bffe17 	ldw	r2,-8(fp)
101100b8:	10c00324 	muli	r3,r2,12
101100bc:	00840474 	movhi	r2,4113
101100c0:	108d0504 	addi	r2,r2,13332
101100c4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101100c8:	e0bfff17 	ldw	r2,-4(fp)
101100cc:	18800226 	beq	r3,r2,101100d8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
101100d0:	00bffcc4 	movi	r2,-13
101100d4:	00000806 	br	101100f8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
101100d8:	e0bffe17 	ldw	r2,-8(fp)
101100dc:	10800044 	addi	r2,r2,1
101100e0:	e0bffe15 	stw	r2,-8(fp)
101100e4:	d0a00a17 	ldw	r2,-32728(gp)
101100e8:	1007883a 	mov	r3,r2
101100ec:	e0bffe17 	ldw	r2,-8(fp)
101100f0:	18bfdf2e 	bgeu	r3,r2,10110070 <__alt_data_end+0xffff0070>
    }
  }
  
  /* The device is not locked */
 
  return 0;
101100f4:	0005883a 	mov	r2,zero
}
101100f8:	e037883a 	mov	sp,fp
101100fc:	df000017 	ldw	fp,0(sp)
10110100:	dec00104 	addi	sp,sp,4
10110104:	f800283a 	ret

10110108 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10110108:	defff604 	addi	sp,sp,-40
1011010c:	dfc00915 	stw	ra,36(sp)
10110110:	df000815 	stw	fp,32(sp)
10110114:	df000804 	addi	fp,sp,32
10110118:	e13ffd15 	stw	r4,-12(fp)
1011011c:	e17ffe15 	stw	r5,-8(fp)
10110120:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10110124:	00bfffc4 	movi	r2,-1
10110128:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1011012c:	00bffb44 	movi	r2,-19
10110130:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10110134:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10110138:	d1600804 	addi	r5,gp,-32736
1011013c:	e13ffd17 	ldw	r4,-12(fp)
10110140:	0111a240 	call	10111a24 <alt_find_dev>
10110144:	e0bff815 	stw	r2,-32(fp)
10110148:	e0bff817 	ldw	r2,-32(fp)
1011014c:	1000051e 	bne	r2,zero,10110164 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10110150:	e13ffd17 	ldw	r4,-12(fp)
10110154:	0111ab40 	call	10111ab4 <alt_find_file>
10110158:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1011015c:	00800044 	movi	r2,1
10110160:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10110164:	e0bff817 	ldw	r2,-32(fp)
10110168:	10002926 	beq	r2,zero,10110210 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1011016c:	e13ff817 	ldw	r4,-32(fp)
10110170:	0111c3c0 	call	10111c3c <alt_get_fd>
10110174:	e0bff915 	stw	r2,-28(fp)
10110178:	e0bff917 	ldw	r2,-28(fp)
1011017c:	1000030e 	bge	r2,zero,1011018c <open+0x84>
    {
      status = index;
10110180:	e0bff917 	ldw	r2,-28(fp)
10110184:	e0bffa15 	stw	r2,-24(fp)
10110188:	00002306 	br	10110218 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1011018c:	e0bff917 	ldw	r2,-28(fp)
10110190:	10c00324 	muli	r3,r2,12
10110194:	00840474 	movhi	r2,4113
10110198:	108d0504 	addi	r2,r2,13332
1011019c:	1885883a 	add	r2,r3,r2
101101a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
101101a4:	e0fffe17 	ldw	r3,-8(fp)
101101a8:	00900034 	movhi	r2,16384
101101ac:	10bfffc4 	addi	r2,r2,-1
101101b0:	1886703a 	and	r3,r3,r2
101101b4:	e0bffc17 	ldw	r2,-16(fp)
101101b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
101101bc:	e0bffb17 	ldw	r2,-20(fp)
101101c0:	1000051e 	bne	r2,zero,101101d8 <open+0xd0>
101101c4:	e13ffc17 	ldw	r4,-16(fp)
101101c8:	01100440 	call	10110044 <alt_file_locked>
101101cc:	e0bffa15 	stw	r2,-24(fp)
101101d0:	e0bffa17 	ldw	r2,-24(fp)
101101d4:	10001016 	blt	r2,zero,10110218 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
101101d8:	e0bff817 	ldw	r2,-32(fp)
101101dc:	10800317 	ldw	r2,12(r2)
101101e0:	10000826 	beq	r2,zero,10110204 <open+0xfc>
101101e4:	e0bff817 	ldw	r2,-32(fp)
101101e8:	10800317 	ldw	r2,12(r2)
101101ec:	e1ffff17 	ldw	r7,-4(fp)
101101f0:	e1bffe17 	ldw	r6,-8(fp)
101101f4:	e17ffd17 	ldw	r5,-12(fp)
101101f8:	e13ffc17 	ldw	r4,-16(fp)
101101fc:	103ee83a 	callr	r2
10110200:	00000106 	br	10110208 <open+0x100>
10110204:	0005883a 	mov	r2,zero
10110208:	e0bffa15 	stw	r2,-24(fp)
1011020c:	00000206 	br	10110218 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
10110210:	00bffb44 	movi	r2,-19
10110214:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10110218:	e0bffa17 	ldw	r2,-24(fp)
1011021c:	1000090e 	bge	r2,zero,10110244 <open+0x13c>
  {
    alt_release_fd (index);  
10110220:	e13ff917 	ldw	r4,-28(fp)
10110224:	01103940 	call	10110394 <alt_release_fd>
    ALT_ERRNO = -status;
10110228:	01100080 	call	10110008 <alt_get_errno>
1011022c:	1007883a 	mov	r3,r2
10110230:	e0bffa17 	ldw	r2,-24(fp)
10110234:	0085c83a 	sub	r2,zero,r2
10110238:	18800015 	stw	r2,0(r3)
    return -1;
1011023c:	00bfffc4 	movi	r2,-1
10110240:	00000106 	br	10110248 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
10110244:	e0bff917 	ldw	r2,-28(fp)
}
10110248:	e037883a 	mov	sp,fp
1011024c:	dfc00117 	ldw	ra,4(sp)
10110250:	df000017 	ldw	fp,0(sp)
10110254:	dec00204 	addi	sp,sp,8
10110258:	f800283a 	ret

1011025c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1011025c:	defffe04 	addi	sp,sp,-8
10110260:	dfc00115 	stw	ra,4(sp)
10110264:	df000015 	stw	fp,0(sp)
10110268:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1011026c:	d0a00b17 	ldw	r2,-32724(gp)
10110270:	10000326 	beq	r2,zero,10110280 <alt_get_errno+0x24>
10110274:	d0a00b17 	ldw	r2,-32724(gp)
10110278:	103ee83a 	callr	r2
1011027c:	00000106 	br	10110284 <alt_get_errno+0x28>
10110280:	d0a6f904 	addi	r2,gp,-25628
}
10110284:	e037883a 	mov	sp,fp
10110288:	dfc00117 	ldw	ra,4(sp)
1011028c:	df000017 	ldw	fp,0(sp)
10110290:	dec00204 	addi	sp,sp,8
10110294:	f800283a 	ret

10110298 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10110298:	defff904 	addi	sp,sp,-28
1011029c:	dfc00615 	stw	ra,24(sp)
101102a0:	df000515 	stw	fp,20(sp)
101102a4:	df000504 	addi	fp,sp,20
101102a8:	e13ffd15 	stw	r4,-12(fp)
101102ac:	e17ffe15 	stw	r5,-8(fp)
101102b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101102b4:	e0bffd17 	ldw	r2,-12(fp)
101102b8:	10000616 	blt	r2,zero,101102d4 <read+0x3c>
101102bc:	e0bffd17 	ldw	r2,-12(fp)
101102c0:	10c00324 	muli	r3,r2,12
101102c4:	00840474 	movhi	r2,4113
101102c8:	108d0504 	addi	r2,r2,13332
101102cc:	1885883a 	add	r2,r3,r2
101102d0:	00000106 	br	101102d8 <read+0x40>
101102d4:	0005883a 	mov	r2,zero
101102d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
101102dc:	e0bffb17 	ldw	r2,-20(fp)
101102e0:	10002226 	beq	r2,zero,1011036c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
101102e4:	e0bffb17 	ldw	r2,-20(fp)
101102e8:	10800217 	ldw	r2,8(r2)
101102ec:	108000cc 	andi	r2,r2,3
101102f0:	10800060 	cmpeqi	r2,r2,1
101102f4:	1000181e 	bne	r2,zero,10110358 <read+0xc0>
        (fd->dev->read))
101102f8:	e0bffb17 	ldw	r2,-20(fp)
101102fc:	10800017 	ldw	r2,0(r2)
10110300:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10110304:	10001426 	beq	r2,zero,10110358 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10110308:	e0bffb17 	ldw	r2,-20(fp)
1011030c:	10800017 	ldw	r2,0(r2)
10110310:	10800517 	ldw	r2,20(r2)
10110314:	e0ffff17 	ldw	r3,-4(fp)
10110318:	180d883a 	mov	r6,r3
1011031c:	e17ffe17 	ldw	r5,-8(fp)
10110320:	e13ffb17 	ldw	r4,-20(fp)
10110324:	103ee83a 	callr	r2
10110328:	e0bffc15 	stw	r2,-16(fp)
1011032c:	e0bffc17 	ldw	r2,-16(fp)
10110330:	1000070e 	bge	r2,zero,10110350 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10110334:	011025c0 	call	1011025c <alt_get_errno>
10110338:	1007883a 	mov	r3,r2
1011033c:	e0bffc17 	ldw	r2,-16(fp)
10110340:	0085c83a 	sub	r2,zero,r2
10110344:	18800015 	stw	r2,0(r3)
          return -1;
10110348:	00bfffc4 	movi	r2,-1
1011034c:	00000c06 	br	10110380 <read+0xe8>
        }
        return rval;
10110350:	e0bffc17 	ldw	r2,-16(fp)
10110354:	00000a06 	br	10110380 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10110358:	011025c0 	call	1011025c <alt_get_errno>
1011035c:	1007883a 	mov	r3,r2
10110360:	00800344 	movi	r2,13
10110364:	18800015 	stw	r2,0(r3)
10110368:	00000406 	br	1011037c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1011036c:	011025c0 	call	1011025c <alt_get_errno>
10110370:	1007883a 	mov	r3,r2
10110374:	00801444 	movi	r2,81
10110378:	18800015 	stw	r2,0(r3)
  }
  return -1;
1011037c:	00bfffc4 	movi	r2,-1
}
10110380:	e037883a 	mov	sp,fp
10110384:	dfc00117 	ldw	ra,4(sp)
10110388:	df000017 	ldw	fp,0(sp)
1011038c:	dec00204 	addi	sp,sp,8
10110390:	f800283a 	ret

10110394 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10110394:	defffe04 	addi	sp,sp,-8
10110398:	df000115 	stw	fp,4(sp)
1011039c:	df000104 	addi	fp,sp,4
101103a0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
101103a4:	e0bfff17 	ldw	r2,-4(fp)
101103a8:	108000d0 	cmplti	r2,r2,3
101103ac:	10000d1e 	bne	r2,zero,101103e4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
101103b0:	00840474 	movhi	r2,4113
101103b4:	108d0504 	addi	r2,r2,13332
101103b8:	e0ffff17 	ldw	r3,-4(fp)
101103bc:	18c00324 	muli	r3,r3,12
101103c0:	10c5883a 	add	r2,r2,r3
101103c4:	10800204 	addi	r2,r2,8
101103c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
101103cc:	00840474 	movhi	r2,4113
101103d0:	108d0504 	addi	r2,r2,13332
101103d4:	e0ffff17 	ldw	r3,-4(fp)
101103d8:	18c00324 	muli	r3,r3,12
101103dc:	10c5883a 	add	r2,r2,r3
101103e0:	10000015 	stw	zero,0(r2)
  }
}
101103e4:	0001883a 	nop
101103e8:	e037883a 	mov	sp,fp
101103ec:	df000017 	ldw	fp,0(sp)
101103f0:	dec00104 	addi	sp,sp,4
101103f4:	f800283a 	ret

101103f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
101103f8:	defff904 	addi	sp,sp,-28
101103fc:	df000615 	stw	fp,24(sp)
10110400:	df000604 	addi	fp,sp,24
10110404:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110408:	0005303a 	rdctl	r2,status
1011040c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110410:	e0fffe17 	ldw	r3,-8(fp)
10110414:	00bfff84 	movi	r2,-2
10110418:	1884703a 	and	r2,r3,r2
1011041c:	1001703a 	wrctl	status,r2
  
  return context;
10110420:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10110424:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10110428:	d0a00c17 	ldw	r2,-32720(gp)
1011042c:	10c000c4 	addi	r3,r2,3
10110430:	00bfff04 	movi	r2,-4
10110434:	1884703a 	and	r2,r3,r2
10110438:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1011043c:	d0e00c17 	ldw	r3,-32720(gp)
10110440:	e0bfff17 	ldw	r2,-4(fp)
10110444:	1887883a 	add	r3,r3,r2
10110448:	008404b4 	movhi	r2,4114
1011044c:	10800004 	addi	r2,r2,0
10110450:	10c0062e 	bgeu	r2,r3,1011046c <sbrk+0x74>
10110454:	e0bffb17 	ldw	r2,-20(fp)
10110458:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1011045c:	e0bffa17 	ldw	r2,-24(fp)
10110460:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10110464:	00bfffc4 	movi	r2,-1
10110468:	00000b06 	br	10110498 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1011046c:	d0a00c17 	ldw	r2,-32720(gp)
10110470:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10110474:	d0e00c17 	ldw	r3,-32720(gp)
10110478:	e0bfff17 	ldw	r2,-4(fp)
1011047c:	1885883a 	add	r2,r3,r2
10110480:	d0a00c15 	stw	r2,-32720(gp)
10110484:	e0bffb17 	ldw	r2,-20(fp)
10110488:	e0bffc15 	stw	r2,-16(fp)
1011048c:	e0bffc17 	ldw	r2,-16(fp)
10110490:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10110494:	e0bffd17 	ldw	r2,-12(fp)
} 
10110498:	e037883a 	mov	sp,fp
1011049c:	df000017 	ldw	fp,0(sp)
101104a0:	dec00104 	addi	sp,sp,4
101104a4:	f800283a 	ret

101104a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
101104a8:	defffd04 	addi	sp,sp,-12
101104ac:	dfc00215 	stw	ra,8(sp)
101104b0:	df000115 	stw	fp,4(sp)
101104b4:	df000104 	addi	fp,sp,4
101104b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
101104bc:	e13fff17 	ldw	r4,-4(fp)
101104c0:	01116e40 	call	101116e4 <alt_busy_sleep>
}
101104c4:	e037883a 	mov	sp,fp
101104c8:	dfc00117 	ldw	ra,4(sp)
101104cc:	df000017 	ldw	fp,0(sp)
101104d0:	dec00204 	addi	sp,sp,8
101104d4:	f800283a 	ret

101104d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101104d8:	defffe04 	addi	sp,sp,-8
101104dc:	dfc00115 	stw	ra,4(sp)
101104e0:	df000015 	stw	fp,0(sp)
101104e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101104e8:	d0a00b17 	ldw	r2,-32724(gp)
101104ec:	10000326 	beq	r2,zero,101104fc <alt_get_errno+0x24>
101104f0:	d0a00b17 	ldw	r2,-32724(gp)
101104f4:	103ee83a 	callr	r2
101104f8:	00000106 	br	10110500 <alt_get_errno+0x28>
101104fc:	d0a6f904 	addi	r2,gp,-25628
}
10110500:	e037883a 	mov	sp,fp
10110504:	dfc00117 	ldw	ra,4(sp)
10110508:	df000017 	ldw	fp,0(sp)
1011050c:	dec00204 	addi	sp,sp,8
10110510:	f800283a 	ret

10110514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10110514:	defff904 	addi	sp,sp,-28
10110518:	dfc00615 	stw	ra,24(sp)
1011051c:	df000515 	stw	fp,20(sp)
10110520:	df000504 	addi	fp,sp,20
10110524:	e13ffd15 	stw	r4,-12(fp)
10110528:	e17ffe15 	stw	r5,-8(fp)
1011052c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10110530:	e0bffd17 	ldw	r2,-12(fp)
10110534:	10000616 	blt	r2,zero,10110550 <write+0x3c>
10110538:	e0bffd17 	ldw	r2,-12(fp)
1011053c:	10c00324 	muli	r3,r2,12
10110540:	00840474 	movhi	r2,4113
10110544:	108d0504 	addi	r2,r2,13332
10110548:	1885883a 	add	r2,r3,r2
1011054c:	00000106 	br	10110554 <write+0x40>
10110550:	0005883a 	mov	r2,zero
10110554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10110558:	e0bffb17 	ldw	r2,-20(fp)
1011055c:	10002126 	beq	r2,zero,101105e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10110560:	e0bffb17 	ldw	r2,-20(fp)
10110564:	10800217 	ldw	r2,8(r2)
10110568:	108000cc 	andi	r2,r2,3
1011056c:	10001826 	beq	r2,zero,101105d0 <write+0xbc>
10110570:	e0bffb17 	ldw	r2,-20(fp)
10110574:	10800017 	ldw	r2,0(r2)
10110578:	10800617 	ldw	r2,24(r2)
1011057c:	10001426 	beq	r2,zero,101105d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10110580:	e0bffb17 	ldw	r2,-20(fp)
10110584:	10800017 	ldw	r2,0(r2)
10110588:	10800617 	ldw	r2,24(r2)
1011058c:	e0ffff17 	ldw	r3,-4(fp)
10110590:	180d883a 	mov	r6,r3
10110594:	e17ffe17 	ldw	r5,-8(fp)
10110598:	e13ffb17 	ldw	r4,-20(fp)
1011059c:	103ee83a 	callr	r2
101105a0:	e0bffc15 	stw	r2,-16(fp)
101105a4:	e0bffc17 	ldw	r2,-16(fp)
101105a8:	1000070e 	bge	r2,zero,101105c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
101105ac:	01104d80 	call	101104d8 <alt_get_errno>
101105b0:	1007883a 	mov	r3,r2
101105b4:	e0bffc17 	ldw	r2,-16(fp)
101105b8:	0085c83a 	sub	r2,zero,r2
101105bc:	18800015 	stw	r2,0(r3)
        return -1;
101105c0:	00bfffc4 	movi	r2,-1
101105c4:	00000c06 	br	101105f8 <write+0xe4>
      }
      return rval;
101105c8:	e0bffc17 	ldw	r2,-16(fp)
101105cc:	00000a06 	br	101105f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
101105d0:	01104d80 	call	101104d8 <alt_get_errno>
101105d4:	1007883a 	mov	r3,r2
101105d8:	00800344 	movi	r2,13
101105dc:	18800015 	stw	r2,0(r3)
101105e0:	00000406 	br	101105f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101105e4:	01104d80 	call	101104d8 <alt_get_errno>
101105e8:	1007883a 	mov	r3,r2
101105ec:	00801444 	movi	r2,81
101105f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
101105f4:	00bfffc4 	movi	r2,-1
}
101105f8:	e037883a 	mov	sp,fp
101105fc:	dfc00117 	ldw	ra,4(sp)
10110600:	df000017 	ldw	fp,0(sp)
10110604:	dec00204 	addi	sp,sp,8
10110608:	f800283a 	ret

1011060c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1011060c:	defffd04 	addi	sp,sp,-12
10110610:	dfc00215 	stw	ra,8(sp)
10110614:	df000115 	stw	fp,4(sp)
10110618:	df000104 	addi	fp,sp,4
1011061c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10110620:	d1600804 	addi	r5,gp,-32736
10110624:	e13fff17 	ldw	r4,-4(fp)
10110628:	01118c00 	call	101118c0 <alt_dev_llist_insert>
}
1011062c:	e037883a 	mov	sp,fp
10110630:	dfc00117 	ldw	ra,4(sp)
10110634:	df000017 	ldw	fp,0(sp)
10110638:	dec00204 	addi	sp,sp,8
1011063c:	f800283a 	ret

10110640 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10110640:	defffd04 	addi	sp,sp,-12
10110644:	dfc00215 	stw	ra,8(sp)
10110648:	df000115 	stw	fp,4(sp)
1011064c:	df000104 	addi	fp,sp,4
10110650:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10110654:	01122980 	call	10112298 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10110658:	00800044 	movi	r2,1
1011065c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10110660:	0001883a 	nop
10110664:	e037883a 	mov	sp,fp
10110668:	dfc00117 	ldw	ra,4(sp)
1011066c:	df000017 	ldw	fp,0(sp)
10110670:	dec00204 	addi	sp,sp,8
10110674:	f800283a 	ret

10110678 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10110678:	defffe04 	addi	sp,sp,-8
1011067c:	dfc00115 	stw	ra,4(sp)
10110680:	df000015 	stw	fp,0(sp)
10110684:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10110688:	01800044 	movi	r6,1
1011068c:	000b883a 	mov	r5,zero
10110690:	01040474 	movhi	r4,4113
10110694:	210d6f04 	addi	r4,r4,13756
10110698:	01108300 	call	10110830 <altera_avalon_jtag_uart_init>
1011069c:	01040474 	movhi	r4,4113
101106a0:	210d6504 	addi	r4,r4,13716
101106a4:	011060c0 	call	1011060c <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
101106a8:	01040474 	movhi	r4,4113
101106ac:	21117d04 	addi	r4,r4,17908
101106b0:	0111bbc0 	call	10111bbc <alt_fs_reg>
}
101106b4:	0001883a 	nop
101106b8:	e037883a 	mov	sp,fp
101106bc:	dfc00117 	ldw	ra,4(sp)
101106c0:	df000017 	ldw	fp,0(sp)
101106c4:	dec00204 	addi	sp,sp,8
101106c8:	f800283a 	ret

101106cc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
101106cc:	defffa04 	addi	sp,sp,-24
101106d0:	dfc00515 	stw	ra,20(sp)
101106d4:	df000415 	stw	fp,16(sp)
101106d8:	df000404 	addi	fp,sp,16
101106dc:	e13ffd15 	stw	r4,-12(fp)
101106e0:	e17ffe15 	stw	r5,-8(fp)
101106e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101106e8:	e0bffd17 	ldw	r2,-12(fp)
101106ec:	10800017 	ldw	r2,0(r2)
101106f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101106f4:	e0bffc17 	ldw	r2,-16(fp)
101106f8:	10c00a04 	addi	r3,r2,40
101106fc:	e0bffd17 	ldw	r2,-12(fp)
10110700:	10800217 	ldw	r2,8(r2)
10110704:	100f883a 	mov	r7,r2
10110708:	e1bfff17 	ldw	r6,-4(fp)
1011070c:	e17ffe17 	ldw	r5,-8(fp)
10110710:	1809883a 	mov	r4,r3
10110714:	0110cf40 	call	10110cf4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10110718:	e037883a 	mov	sp,fp
1011071c:	dfc00117 	ldw	ra,4(sp)
10110720:	df000017 	ldw	fp,0(sp)
10110724:	dec00204 	addi	sp,sp,8
10110728:	f800283a 	ret

1011072c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1011072c:	defffa04 	addi	sp,sp,-24
10110730:	dfc00515 	stw	ra,20(sp)
10110734:	df000415 	stw	fp,16(sp)
10110738:	df000404 	addi	fp,sp,16
1011073c:	e13ffd15 	stw	r4,-12(fp)
10110740:	e17ffe15 	stw	r5,-8(fp)
10110744:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10110748:	e0bffd17 	ldw	r2,-12(fp)
1011074c:	10800017 	ldw	r2,0(r2)
10110750:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10110754:	e0bffc17 	ldw	r2,-16(fp)
10110758:	10c00a04 	addi	r3,r2,40
1011075c:	e0bffd17 	ldw	r2,-12(fp)
10110760:	10800217 	ldw	r2,8(r2)
10110764:	100f883a 	mov	r7,r2
10110768:	e1bfff17 	ldw	r6,-4(fp)
1011076c:	e17ffe17 	ldw	r5,-8(fp)
10110770:	1809883a 	mov	r4,r3
10110774:	0110f100 	call	10110f10 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10110778:	e037883a 	mov	sp,fp
1011077c:	dfc00117 	ldw	ra,4(sp)
10110780:	df000017 	ldw	fp,0(sp)
10110784:	dec00204 	addi	sp,sp,8
10110788:	f800283a 	ret

1011078c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1011078c:	defffc04 	addi	sp,sp,-16
10110790:	dfc00315 	stw	ra,12(sp)
10110794:	df000215 	stw	fp,8(sp)
10110798:	df000204 	addi	fp,sp,8
1011079c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101107a0:	e0bfff17 	ldw	r2,-4(fp)
101107a4:	10800017 	ldw	r2,0(r2)
101107a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
101107ac:	e0bffe17 	ldw	r2,-8(fp)
101107b0:	10c00a04 	addi	r3,r2,40
101107b4:	e0bfff17 	ldw	r2,-4(fp)
101107b8:	10800217 	ldw	r2,8(r2)
101107bc:	100b883a 	mov	r5,r2
101107c0:	1809883a 	mov	r4,r3
101107c4:	0110b9c0 	call	10110b9c <altera_avalon_jtag_uart_close>
}
101107c8:	e037883a 	mov	sp,fp
101107cc:	dfc00117 	ldw	ra,4(sp)
101107d0:	df000017 	ldw	fp,0(sp)
101107d4:	dec00204 	addi	sp,sp,8
101107d8:	f800283a 	ret

101107dc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
101107dc:	defffa04 	addi	sp,sp,-24
101107e0:	dfc00515 	stw	ra,20(sp)
101107e4:	df000415 	stw	fp,16(sp)
101107e8:	df000404 	addi	fp,sp,16
101107ec:	e13ffd15 	stw	r4,-12(fp)
101107f0:	e17ffe15 	stw	r5,-8(fp)
101107f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
101107f8:	e0bffd17 	ldw	r2,-12(fp)
101107fc:	10800017 	ldw	r2,0(r2)
10110800:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10110804:	e0bffc17 	ldw	r2,-16(fp)
10110808:	10800a04 	addi	r2,r2,40
1011080c:	e1bfff17 	ldw	r6,-4(fp)
10110810:	e17ffe17 	ldw	r5,-8(fp)
10110814:	1009883a 	mov	r4,r2
10110818:	0110c040 	call	10110c04 <altera_avalon_jtag_uart_ioctl>
}
1011081c:	e037883a 	mov	sp,fp
10110820:	dfc00117 	ldw	ra,4(sp)
10110824:	df000017 	ldw	fp,0(sp)
10110828:	dec00204 	addi	sp,sp,8
1011082c:	f800283a 	ret

10110830 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10110830:	defffa04 	addi	sp,sp,-24
10110834:	dfc00515 	stw	ra,20(sp)
10110838:	df000415 	stw	fp,16(sp)
1011083c:	df000404 	addi	fp,sp,16
10110840:	e13ffd15 	stw	r4,-12(fp)
10110844:	e17ffe15 	stw	r5,-8(fp)
10110848:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1011084c:	e0bffd17 	ldw	r2,-12(fp)
10110850:	00c00044 	movi	r3,1
10110854:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10110858:	e0bffd17 	ldw	r2,-12(fp)
1011085c:	10800017 	ldw	r2,0(r2)
10110860:	10800104 	addi	r2,r2,4
10110864:	1007883a 	mov	r3,r2
10110868:	e0bffd17 	ldw	r2,-12(fp)
1011086c:	10800817 	ldw	r2,32(r2)
10110870:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10110874:	e0bffe17 	ldw	r2,-8(fp)
10110878:	e0ffff17 	ldw	r3,-4(fp)
1011087c:	d8000015 	stw	zero,0(sp)
10110880:	e1fffd17 	ldw	r7,-12(fp)
10110884:	01840474 	movhi	r6,4113
10110888:	31823c04 	addi	r6,r6,2288
1011088c:	180b883a 	mov	r5,r3
10110890:	1009883a 	mov	r4,r2
10110894:	0111d140 	call	10111d14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10110898:	e0bffd17 	ldw	r2,-12(fp)
1011089c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
101108a0:	e0bffd17 	ldw	r2,-12(fp)
101108a4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
101108a8:	d0e70417 	ldw	r3,-25584(gp)
101108ac:	e1fffd17 	ldw	r7,-12(fp)
101108b0:	01840474 	movhi	r6,4113
101108b4:	3182bf04 	addi	r6,r6,2812
101108b8:	180b883a 	mov	r5,r3
101108bc:	1009883a 	mov	r4,r2
101108c0:	01115b80 	call	101115b8 <alt_alarm_start>
101108c4:	1000040e 	bge	r2,zero,101108d8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
101108c8:	e0fffd17 	ldw	r3,-12(fp)
101108cc:	00a00034 	movhi	r2,32768
101108d0:	10bfffc4 	addi	r2,r2,-1
101108d4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
101108d8:	0001883a 	nop
101108dc:	e037883a 	mov	sp,fp
101108e0:	dfc00117 	ldw	ra,4(sp)
101108e4:	df000017 	ldw	fp,0(sp)
101108e8:	dec00204 	addi	sp,sp,8
101108ec:	f800283a 	ret

101108f0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
101108f0:	defff804 	addi	sp,sp,-32
101108f4:	df000715 	stw	fp,28(sp)
101108f8:	df000704 	addi	fp,sp,28
101108fc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10110900:	e0bfff17 	ldw	r2,-4(fp)
10110904:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10110908:	e0bffb17 	ldw	r2,-20(fp)
1011090c:	10800017 	ldw	r2,0(r2)
10110910:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10110914:	e0bffc17 	ldw	r2,-16(fp)
10110918:	10800104 	addi	r2,r2,4
1011091c:	10800037 	ldwio	r2,0(r2)
10110920:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10110924:	e0bffd17 	ldw	r2,-12(fp)
10110928:	1080c00c 	andi	r2,r2,768
1011092c:	10006d26 	beq	r2,zero,10110ae4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10110930:	e0bffd17 	ldw	r2,-12(fp)
10110934:	1080400c 	andi	r2,r2,256
10110938:	10003526 	beq	r2,zero,10110a10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1011093c:	00800074 	movhi	r2,1
10110940:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110944:	e0bffb17 	ldw	r2,-20(fp)
10110948:	10800a17 	ldw	r2,40(r2)
1011094c:	10800044 	addi	r2,r2,1
10110950:	1081ffcc 	andi	r2,r2,2047
10110954:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10110958:	e0bffb17 	ldw	r2,-20(fp)
1011095c:	10c00b17 	ldw	r3,44(r2)
10110960:	e0bffe17 	ldw	r2,-8(fp)
10110964:	18801526 	beq	r3,r2,101109bc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10110968:	e0bffc17 	ldw	r2,-16(fp)
1011096c:	10800037 	ldwio	r2,0(r2)
10110970:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10110974:	e0bff917 	ldw	r2,-28(fp)
10110978:	10a0000c 	andi	r2,r2,32768
1011097c:	10001126 	beq	r2,zero,101109c4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10110980:	e0bffb17 	ldw	r2,-20(fp)
10110984:	10800a17 	ldw	r2,40(r2)
10110988:	e0fff917 	ldw	r3,-28(fp)
1011098c:	1809883a 	mov	r4,r3
10110990:	e0fffb17 	ldw	r3,-20(fp)
10110994:	1885883a 	add	r2,r3,r2
10110998:	10800e04 	addi	r2,r2,56
1011099c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
101109a0:	e0bffb17 	ldw	r2,-20(fp)
101109a4:	10800a17 	ldw	r2,40(r2)
101109a8:	10800044 	addi	r2,r2,1
101109ac:	10c1ffcc 	andi	r3,r2,2047
101109b0:	e0bffb17 	ldw	r2,-20(fp)
101109b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
101109b8:	003fe206 	br	10110944 <__alt_data_end+0xffff0944>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
101109bc:	0001883a 	nop
101109c0:	00000106 	br	101109c8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
101109c4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
101109c8:	e0bff917 	ldw	r2,-28(fp)
101109cc:	10bfffec 	andhi	r2,r2,65535
101109d0:	10000f26 	beq	r2,zero,10110a10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
101109d4:	e0bffb17 	ldw	r2,-20(fp)
101109d8:	10c00817 	ldw	r3,32(r2)
101109dc:	00bfff84 	movi	r2,-2
101109e0:	1886703a 	and	r3,r3,r2
101109e4:	e0bffb17 	ldw	r2,-20(fp)
101109e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
101109ec:	e0bffc17 	ldw	r2,-16(fp)
101109f0:	10800104 	addi	r2,r2,4
101109f4:	1007883a 	mov	r3,r2
101109f8:	e0bffb17 	ldw	r2,-20(fp)
101109fc:	10800817 	ldw	r2,32(r2)
10110a00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10110a04:	e0bffc17 	ldw	r2,-16(fp)
10110a08:	10800104 	addi	r2,r2,4
10110a0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10110a10:	e0bffd17 	ldw	r2,-12(fp)
10110a14:	1080800c 	andi	r2,r2,512
10110a18:	103fbe26 	beq	r2,zero,10110914 <__alt_data_end+0xffff0914>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10110a1c:	e0bffd17 	ldw	r2,-12(fp)
10110a20:	1004d43a 	srli	r2,r2,16
10110a24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10110a28:	00001406 	br	10110a7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10110a2c:	e0bffc17 	ldw	r2,-16(fp)
10110a30:	e0fffb17 	ldw	r3,-20(fp)
10110a34:	18c00d17 	ldw	r3,52(r3)
10110a38:	e13ffb17 	ldw	r4,-20(fp)
10110a3c:	20c7883a 	add	r3,r4,r3
10110a40:	18c20e04 	addi	r3,r3,2104
10110a44:	18c00003 	ldbu	r3,0(r3)
10110a48:	18c03fcc 	andi	r3,r3,255
10110a4c:	18c0201c 	xori	r3,r3,128
10110a50:	18ffe004 	addi	r3,r3,-128
10110a54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110a58:	e0bffb17 	ldw	r2,-20(fp)
10110a5c:	10800d17 	ldw	r2,52(r2)
10110a60:	10800044 	addi	r2,r2,1
10110a64:	10c1ffcc 	andi	r3,r2,2047
10110a68:	e0bffb17 	ldw	r2,-20(fp)
10110a6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10110a70:	e0bffa17 	ldw	r2,-24(fp)
10110a74:	10bfffc4 	addi	r2,r2,-1
10110a78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10110a7c:	e0bffa17 	ldw	r2,-24(fp)
10110a80:	10000526 	beq	r2,zero,10110a98 <altera_avalon_jtag_uart_irq+0x1a8>
10110a84:	e0bffb17 	ldw	r2,-20(fp)
10110a88:	10c00d17 	ldw	r3,52(r2)
10110a8c:	e0bffb17 	ldw	r2,-20(fp)
10110a90:	10800c17 	ldw	r2,48(r2)
10110a94:	18bfe51e 	bne	r3,r2,10110a2c <__alt_data_end+0xffff0a2c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10110a98:	e0bffa17 	ldw	r2,-24(fp)
10110a9c:	103f9d26 	beq	r2,zero,10110914 <__alt_data_end+0xffff0914>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10110aa0:	e0bffb17 	ldw	r2,-20(fp)
10110aa4:	10c00817 	ldw	r3,32(r2)
10110aa8:	00bfff44 	movi	r2,-3
10110aac:	1886703a 	and	r3,r3,r2
10110ab0:	e0bffb17 	ldw	r2,-20(fp)
10110ab4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10110ab8:	e0bffb17 	ldw	r2,-20(fp)
10110abc:	10800017 	ldw	r2,0(r2)
10110ac0:	10800104 	addi	r2,r2,4
10110ac4:	1007883a 	mov	r3,r2
10110ac8:	e0bffb17 	ldw	r2,-20(fp)
10110acc:	10800817 	ldw	r2,32(r2)
10110ad0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10110ad4:	e0bffc17 	ldw	r2,-16(fp)
10110ad8:	10800104 	addi	r2,r2,4
10110adc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10110ae0:	003f8c06 	br	10110914 <__alt_data_end+0xffff0914>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10110ae4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10110ae8:	0001883a 	nop
10110aec:	e037883a 	mov	sp,fp
10110af0:	df000017 	ldw	fp,0(sp)
10110af4:	dec00104 	addi	sp,sp,4
10110af8:	f800283a 	ret

10110afc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10110afc:	defff804 	addi	sp,sp,-32
10110b00:	df000715 	stw	fp,28(sp)
10110b04:	df000704 	addi	fp,sp,28
10110b08:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10110b0c:	e0bffb17 	ldw	r2,-20(fp)
10110b10:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10110b14:	e0bff917 	ldw	r2,-28(fp)
10110b18:	10800017 	ldw	r2,0(r2)
10110b1c:	10800104 	addi	r2,r2,4
10110b20:	10800037 	ldwio	r2,0(r2)
10110b24:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10110b28:	e0bffa17 	ldw	r2,-24(fp)
10110b2c:	1081000c 	andi	r2,r2,1024
10110b30:	10000b26 	beq	r2,zero,10110b60 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10110b34:	e0bff917 	ldw	r2,-28(fp)
10110b38:	10800017 	ldw	r2,0(r2)
10110b3c:	10800104 	addi	r2,r2,4
10110b40:	1007883a 	mov	r3,r2
10110b44:	e0bff917 	ldw	r2,-28(fp)
10110b48:	10800817 	ldw	r2,32(r2)
10110b4c:	10810014 	ori	r2,r2,1024
10110b50:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10110b54:	e0bff917 	ldw	r2,-28(fp)
10110b58:	10000915 	stw	zero,36(r2)
10110b5c:	00000a06 	br	10110b88 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10110b60:	e0bff917 	ldw	r2,-28(fp)
10110b64:	10c00917 	ldw	r3,36(r2)
10110b68:	00a00034 	movhi	r2,32768
10110b6c:	10bfff04 	addi	r2,r2,-4
10110b70:	10c00536 	bltu	r2,r3,10110b88 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10110b74:	e0bff917 	ldw	r2,-28(fp)
10110b78:	10800917 	ldw	r2,36(r2)
10110b7c:	10c00044 	addi	r3,r2,1
10110b80:	e0bff917 	ldw	r2,-28(fp)
10110b84:	10c00915 	stw	r3,36(r2)
10110b88:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10110b8c:	e037883a 	mov	sp,fp
10110b90:	df000017 	ldw	fp,0(sp)
10110b94:	dec00104 	addi	sp,sp,4
10110b98:	f800283a 	ret

10110b9c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10110b9c:	defffd04 	addi	sp,sp,-12
10110ba0:	df000215 	stw	fp,8(sp)
10110ba4:	df000204 	addi	fp,sp,8
10110ba8:	e13ffe15 	stw	r4,-8(fp)
10110bac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10110bb0:	00000506 	br	10110bc8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10110bb4:	e0bfff17 	ldw	r2,-4(fp)
10110bb8:	1090000c 	andi	r2,r2,16384
10110bbc:	10000226 	beq	r2,zero,10110bc8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10110bc0:	00bffd44 	movi	r2,-11
10110bc4:	00000b06 	br	10110bf4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10110bc8:	e0bffe17 	ldw	r2,-8(fp)
10110bcc:	10c00d17 	ldw	r3,52(r2)
10110bd0:	e0bffe17 	ldw	r2,-8(fp)
10110bd4:	10800c17 	ldw	r2,48(r2)
10110bd8:	18800526 	beq	r3,r2,10110bf0 <altera_avalon_jtag_uart_close+0x54>
10110bdc:	e0bffe17 	ldw	r2,-8(fp)
10110be0:	10c00917 	ldw	r3,36(r2)
10110be4:	e0bffe17 	ldw	r2,-8(fp)
10110be8:	10800117 	ldw	r2,4(r2)
10110bec:	18bff136 	bltu	r3,r2,10110bb4 <__alt_data_end+0xffff0bb4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10110bf0:	0005883a 	mov	r2,zero
}
10110bf4:	e037883a 	mov	sp,fp
10110bf8:	df000017 	ldw	fp,0(sp)
10110bfc:	dec00104 	addi	sp,sp,4
10110c00:	f800283a 	ret

10110c04 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10110c04:	defffa04 	addi	sp,sp,-24
10110c08:	df000515 	stw	fp,20(sp)
10110c0c:	df000504 	addi	fp,sp,20
10110c10:	e13ffd15 	stw	r4,-12(fp)
10110c14:	e17ffe15 	stw	r5,-8(fp)
10110c18:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10110c1c:	00bff9c4 	movi	r2,-25
10110c20:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10110c24:	e0bffe17 	ldw	r2,-8(fp)
10110c28:	10da8060 	cmpeqi	r3,r2,27137
10110c2c:	1800031e 	bne	r3,zero,10110c3c <altera_avalon_jtag_uart_ioctl+0x38>
10110c30:	109a80a0 	cmpeqi	r2,r2,27138
10110c34:	1000181e 	bne	r2,zero,10110c98 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10110c38:	00002906 	br	10110ce0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10110c3c:	e0bffd17 	ldw	r2,-12(fp)
10110c40:	10c00117 	ldw	r3,4(r2)
10110c44:	00a00034 	movhi	r2,32768
10110c48:	10bfffc4 	addi	r2,r2,-1
10110c4c:	18802126 	beq	r3,r2,10110cd4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10110c50:	e0bfff17 	ldw	r2,-4(fp)
10110c54:	10800017 	ldw	r2,0(r2)
10110c58:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10110c5c:	e0bffc17 	ldw	r2,-16(fp)
10110c60:	10800090 	cmplti	r2,r2,2
10110c64:	1000061e 	bne	r2,zero,10110c80 <altera_avalon_jtag_uart_ioctl+0x7c>
10110c68:	e0fffc17 	ldw	r3,-16(fp)
10110c6c:	00a00034 	movhi	r2,32768
10110c70:	10bfffc4 	addi	r2,r2,-1
10110c74:	18800226 	beq	r3,r2,10110c80 <altera_avalon_jtag_uart_ioctl+0x7c>
10110c78:	e0bffc17 	ldw	r2,-16(fp)
10110c7c:	00000206 	br	10110c88 <altera_avalon_jtag_uart_ioctl+0x84>
10110c80:	00a00034 	movhi	r2,32768
10110c84:	10bfff84 	addi	r2,r2,-2
10110c88:	e0fffd17 	ldw	r3,-12(fp)
10110c8c:	18800115 	stw	r2,4(r3)
      rc = 0;
10110c90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10110c94:	00000f06 	br	10110cd4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10110c98:	e0bffd17 	ldw	r2,-12(fp)
10110c9c:	10c00117 	ldw	r3,4(r2)
10110ca0:	00a00034 	movhi	r2,32768
10110ca4:	10bfffc4 	addi	r2,r2,-1
10110ca8:	18800c26 	beq	r3,r2,10110cdc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10110cac:	e0bffd17 	ldw	r2,-12(fp)
10110cb0:	10c00917 	ldw	r3,36(r2)
10110cb4:	e0bffd17 	ldw	r2,-12(fp)
10110cb8:	10800117 	ldw	r2,4(r2)
10110cbc:	1885803a 	cmpltu	r2,r3,r2
10110cc0:	10c03fcc 	andi	r3,r2,255
10110cc4:	e0bfff17 	ldw	r2,-4(fp)
10110cc8:	10c00015 	stw	r3,0(r2)
      rc = 0;
10110ccc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10110cd0:	00000206 	br	10110cdc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10110cd4:	0001883a 	nop
10110cd8:	00000106 	br	10110ce0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10110cdc:	0001883a 	nop

  default:
    break;
  }

  return rc;
10110ce0:	e0bffb17 	ldw	r2,-20(fp)
}
10110ce4:	e037883a 	mov	sp,fp
10110ce8:	df000017 	ldw	fp,0(sp)
10110cec:	dec00104 	addi	sp,sp,4
10110cf0:	f800283a 	ret

10110cf4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10110cf4:	defff304 	addi	sp,sp,-52
10110cf8:	dfc00c15 	stw	ra,48(sp)
10110cfc:	df000b15 	stw	fp,44(sp)
10110d00:	df000b04 	addi	fp,sp,44
10110d04:	e13ffc15 	stw	r4,-16(fp)
10110d08:	e17ffd15 	stw	r5,-12(fp)
10110d0c:	e1bffe15 	stw	r6,-8(fp)
10110d10:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10110d14:	e0bffd17 	ldw	r2,-12(fp)
10110d18:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10110d1c:	00004706 	br	10110e3c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10110d20:	e0bffc17 	ldw	r2,-16(fp)
10110d24:	10800a17 	ldw	r2,40(r2)
10110d28:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10110d2c:	e0bffc17 	ldw	r2,-16(fp)
10110d30:	10800b17 	ldw	r2,44(r2)
10110d34:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10110d38:	e0fff717 	ldw	r3,-36(fp)
10110d3c:	e0bff817 	ldw	r2,-32(fp)
10110d40:	18800536 	bltu	r3,r2,10110d58 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10110d44:	e0fff717 	ldw	r3,-36(fp)
10110d48:	e0bff817 	ldw	r2,-32(fp)
10110d4c:	1885c83a 	sub	r2,r3,r2
10110d50:	e0bff615 	stw	r2,-40(fp)
10110d54:	00000406 	br	10110d68 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10110d58:	00c20004 	movi	r3,2048
10110d5c:	e0bff817 	ldw	r2,-32(fp)
10110d60:	1885c83a 	sub	r2,r3,r2
10110d64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10110d68:	e0bff617 	ldw	r2,-40(fp)
10110d6c:	10001e26 	beq	r2,zero,10110de8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10110d70:	e0fffe17 	ldw	r3,-8(fp)
10110d74:	e0bff617 	ldw	r2,-40(fp)
10110d78:	1880022e 	bgeu	r3,r2,10110d84 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10110d7c:	e0bffe17 	ldw	r2,-8(fp)
10110d80:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10110d84:	e0bffc17 	ldw	r2,-16(fp)
10110d88:	10c00e04 	addi	r3,r2,56
10110d8c:	e0bff817 	ldw	r2,-32(fp)
10110d90:	1885883a 	add	r2,r3,r2
10110d94:	e1bff617 	ldw	r6,-40(fp)
10110d98:	100b883a 	mov	r5,r2
10110d9c:	e13ff517 	ldw	r4,-44(fp)
10110da0:	010947c0 	call	1010947c <memcpy>
      ptr   += n;
10110da4:	e0fff517 	ldw	r3,-44(fp)
10110da8:	e0bff617 	ldw	r2,-40(fp)
10110dac:	1885883a 	add	r2,r3,r2
10110db0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10110db4:	e0fffe17 	ldw	r3,-8(fp)
10110db8:	e0bff617 	ldw	r2,-40(fp)
10110dbc:	1885c83a 	sub	r2,r3,r2
10110dc0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110dc4:	e0fff817 	ldw	r3,-32(fp)
10110dc8:	e0bff617 	ldw	r2,-40(fp)
10110dcc:	1885883a 	add	r2,r3,r2
10110dd0:	10c1ffcc 	andi	r3,r2,2047
10110dd4:	e0bffc17 	ldw	r2,-16(fp)
10110dd8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10110ddc:	e0bffe17 	ldw	r2,-8(fp)
10110de0:	00bfcf16 	blt	zero,r2,10110d20 <__alt_data_end+0xffff0d20>
10110de4:	00000106 	br	10110dec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10110de8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10110dec:	e0fff517 	ldw	r3,-44(fp)
10110df0:	e0bffd17 	ldw	r2,-12(fp)
10110df4:	1880141e 	bne	r3,r2,10110e48 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10110df8:	e0bfff17 	ldw	r2,-4(fp)
10110dfc:	1090000c 	andi	r2,r2,16384
10110e00:	1000131e 	bne	r2,zero,10110e50 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10110e04:	0001883a 	nop
10110e08:	e0bffc17 	ldw	r2,-16(fp)
10110e0c:	10c00a17 	ldw	r3,40(r2)
10110e10:	e0bff717 	ldw	r2,-36(fp)
10110e14:	1880051e 	bne	r3,r2,10110e2c <altera_avalon_jtag_uart_read+0x138>
10110e18:	e0bffc17 	ldw	r2,-16(fp)
10110e1c:	10c00917 	ldw	r3,36(r2)
10110e20:	e0bffc17 	ldw	r2,-16(fp)
10110e24:	10800117 	ldw	r2,4(r2)
10110e28:	18bff736 	bltu	r3,r2,10110e08 <__alt_data_end+0xffff0e08>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10110e2c:	e0bffc17 	ldw	r2,-16(fp)
10110e30:	10c00a17 	ldw	r3,40(r2)
10110e34:	e0bff717 	ldw	r2,-36(fp)
10110e38:	18800726 	beq	r3,r2,10110e58 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10110e3c:	e0bffe17 	ldw	r2,-8(fp)
10110e40:	00bfb716 	blt	zero,r2,10110d20 <__alt_data_end+0xffff0d20>
10110e44:	00000506 	br	10110e5c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10110e48:	0001883a 	nop
10110e4c:	00000306 	br	10110e5c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10110e50:	0001883a 	nop
10110e54:	00000106 	br	10110e5c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10110e58:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10110e5c:	e0fff517 	ldw	r3,-44(fp)
10110e60:	e0bffd17 	ldw	r2,-12(fp)
10110e64:	18801826 	beq	r3,r2,10110ec8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110e68:	0005303a 	rdctl	r2,status
10110e6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110e70:	e0fffb17 	ldw	r3,-20(fp)
10110e74:	00bfff84 	movi	r2,-2
10110e78:	1884703a 	and	r2,r3,r2
10110e7c:	1001703a 	wrctl	status,r2
  
  return context;
10110e80:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10110e84:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10110e88:	e0bffc17 	ldw	r2,-16(fp)
10110e8c:	10800817 	ldw	r2,32(r2)
10110e90:	10c00054 	ori	r3,r2,1
10110e94:	e0bffc17 	ldw	r2,-16(fp)
10110e98:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10110e9c:	e0bffc17 	ldw	r2,-16(fp)
10110ea0:	10800017 	ldw	r2,0(r2)
10110ea4:	10800104 	addi	r2,r2,4
10110ea8:	1007883a 	mov	r3,r2
10110eac:	e0bffc17 	ldw	r2,-16(fp)
10110eb0:	10800817 	ldw	r2,32(r2)
10110eb4:	18800035 	stwio	r2,0(r3)
10110eb8:	e0bffa17 	ldw	r2,-24(fp)
10110ebc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110ec0:	e0bff917 	ldw	r2,-28(fp)
10110ec4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10110ec8:	e0fff517 	ldw	r3,-44(fp)
10110ecc:	e0bffd17 	ldw	r2,-12(fp)
10110ed0:	18800426 	beq	r3,r2,10110ee4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10110ed4:	e0fff517 	ldw	r3,-44(fp)
10110ed8:	e0bffd17 	ldw	r2,-12(fp)
10110edc:	1885c83a 	sub	r2,r3,r2
10110ee0:	00000606 	br	10110efc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10110ee4:	e0bfff17 	ldw	r2,-4(fp)
10110ee8:	1090000c 	andi	r2,r2,16384
10110eec:	10000226 	beq	r2,zero,10110ef8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10110ef0:	00bffd44 	movi	r2,-11
10110ef4:	00000106 	br	10110efc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10110ef8:	00bffec4 	movi	r2,-5
}
10110efc:	e037883a 	mov	sp,fp
10110f00:	dfc00117 	ldw	ra,4(sp)
10110f04:	df000017 	ldw	fp,0(sp)
10110f08:	dec00204 	addi	sp,sp,8
10110f0c:	f800283a 	ret

10110f10 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10110f10:	defff304 	addi	sp,sp,-52
10110f14:	dfc00c15 	stw	ra,48(sp)
10110f18:	df000b15 	stw	fp,44(sp)
10110f1c:	df000b04 	addi	fp,sp,44
10110f20:	e13ffc15 	stw	r4,-16(fp)
10110f24:	e17ffd15 	stw	r5,-12(fp)
10110f28:	e1bffe15 	stw	r6,-8(fp)
10110f2c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10110f30:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10110f34:	e0bffd17 	ldw	r2,-12(fp)
10110f38:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10110f3c:	00003706 	br	1011101c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10110f40:	e0bffc17 	ldw	r2,-16(fp)
10110f44:	10800c17 	ldw	r2,48(r2)
10110f48:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10110f4c:	e0bffc17 	ldw	r2,-16(fp)
10110f50:	10800d17 	ldw	r2,52(r2)
10110f54:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10110f58:	e0fff917 	ldw	r3,-28(fp)
10110f5c:	e0bff517 	ldw	r2,-44(fp)
10110f60:	1880062e 	bgeu	r3,r2,10110f7c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10110f64:	e0fff517 	ldw	r3,-44(fp)
10110f68:	e0bff917 	ldw	r2,-28(fp)
10110f6c:	1885c83a 	sub	r2,r3,r2
10110f70:	10bfffc4 	addi	r2,r2,-1
10110f74:	e0bff615 	stw	r2,-40(fp)
10110f78:	00000b06 	br	10110fa8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10110f7c:	e0bff517 	ldw	r2,-44(fp)
10110f80:	10000526 	beq	r2,zero,10110f98 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10110f84:	00c20004 	movi	r3,2048
10110f88:	e0bff917 	ldw	r2,-28(fp)
10110f8c:	1885c83a 	sub	r2,r3,r2
10110f90:	e0bff615 	stw	r2,-40(fp)
10110f94:	00000406 	br	10110fa8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10110f98:	00c1ffc4 	movi	r3,2047
10110f9c:	e0bff917 	ldw	r2,-28(fp)
10110fa0:	1885c83a 	sub	r2,r3,r2
10110fa4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10110fa8:	e0bff617 	ldw	r2,-40(fp)
10110fac:	10001e26 	beq	r2,zero,10111028 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10110fb0:	e0fffe17 	ldw	r3,-8(fp)
10110fb4:	e0bff617 	ldw	r2,-40(fp)
10110fb8:	1880022e 	bgeu	r3,r2,10110fc4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10110fbc:	e0bffe17 	ldw	r2,-8(fp)
10110fc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10110fc4:	e0bffc17 	ldw	r2,-16(fp)
10110fc8:	10c20e04 	addi	r3,r2,2104
10110fcc:	e0bff917 	ldw	r2,-28(fp)
10110fd0:	1885883a 	add	r2,r3,r2
10110fd4:	e1bff617 	ldw	r6,-40(fp)
10110fd8:	e17ffd17 	ldw	r5,-12(fp)
10110fdc:	1009883a 	mov	r4,r2
10110fe0:	010947c0 	call	1010947c <memcpy>
      ptr   += n;
10110fe4:	e0fffd17 	ldw	r3,-12(fp)
10110fe8:	e0bff617 	ldw	r2,-40(fp)
10110fec:	1885883a 	add	r2,r3,r2
10110ff0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10110ff4:	e0fffe17 	ldw	r3,-8(fp)
10110ff8:	e0bff617 	ldw	r2,-40(fp)
10110ffc:	1885c83a 	sub	r2,r3,r2
10111000:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10111004:	e0fff917 	ldw	r3,-28(fp)
10111008:	e0bff617 	ldw	r2,-40(fp)
1011100c:	1885883a 	add	r2,r3,r2
10111010:	10c1ffcc 	andi	r3,r2,2047
10111014:	e0bffc17 	ldw	r2,-16(fp)
10111018:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1011101c:	e0bffe17 	ldw	r2,-8(fp)
10111020:	00bfc716 	blt	zero,r2,10110f40 <__alt_data_end+0xffff0f40>
10111024:	00000106 	br	1011102c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10111028:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011102c:	0005303a 	rdctl	r2,status
10111030:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111034:	e0fffb17 	ldw	r3,-20(fp)
10111038:	00bfff84 	movi	r2,-2
1011103c:	1884703a 	and	r2,r3,r2
10111040:	1001703a 	wrctl	status,r2
  
  return context;
10111044:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10111048:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1011104c:	e0bffc17 	ldw	r2,-16(fp)
10111050:	10800817 	ldw	r2,32(r2)
10111054:	10c00094 	ori	r3,r2,2
10111058:	e0bffc17 	ldw	r2,-16(fp)
1011105c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10111060:	e0bffc17 	ldw	r2,-16(fp)
10111064:	10800017 	ldw	r2,0(r2)
10111068:	10800104 	addi	r2,r2,4
1011106c:	1007883a 	mov	r3,r2
10111070:	e0bffc17 	ldw	r2,-16(fp)
10111074:	10800817 	ldw	r2,32(r2)
10111078:	18800035 	stwio	r2,0(r3)
1011107c:	e0bffa17 	ldw	r2,-24(fp)
10111080:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10111084:	e0bff817 	ldw	r2,-32(fp)
10111088:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1011108c:	e0bffe17 	ldw	r2,-8(fp)
10111090:	0080100e 	bge	zero,r2,101110d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10111094:	e0bfff17 	ldw	r2,-4(fp)
10111098:	1090000c 	andi	r2,r2,16384
1011109c:	1000101e 	bne	r2,zero,101110e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
101110a0:	0001883a 	nop
101110a4:	e0bffc17 	ldw	r2,-16(fp)
101110a8:	10c00d17 	ldw	r3,52(r2)
101110ac:	e0bff517 	ldw	r2,-44(fp)
101110b0:	1880051e 	bne	r3,r2,101110c8 <altera_avalon_jtag_uart_write+0x1b8>
101110b4:	e0bffc17 	ldw	r2,-16(fp)
101110b8:	10c00917 	ldw	r3,36(r2)
101110bc:	e0bffc17 	ldw	r2,-16(fp)
101110c0:	10800117 	ldw	r2,4(r2)
101110c4:	18bff736 	bltu	r3,r2,101110a4 <__alt_data_end+0xffff10a4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
101110c8:	e0bffc17 	ldw	r2,-16(fp)
101110cc:	10800917 	ldw	r2,36(r2)
101110d0:	1000051e 	bne	r2,zero,101110e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
101110d4:	e0bffe17 	ldw	r2,-8(fp)
101110d8:	00bfd016 	blt	zero,r2,1011101c <__alt_data_end+0xffff101c>
101110dc:	00000306 	br	101110ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
101110e0:	0001883a 	nop
101110e4:	00000106 	br	101110ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
101110e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
101110ec:	e0fffd17 	ldw	r3,-12(fp)
101110f0:	e0bff717 	ldw	r2,-36(fp)
101110f4:	18800426 	beq	r3,r2,10111108 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
101110f8:	e0fffd17 	ldw	r3,-12(fp)
101110fc:	e0bff717 	ldw	r2,-36(fp)
10111100:	1885c83a 	sub	r2,r3,r2
10111104:	00000606 	br	10111120 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10111108:	e0bfff17 	ldw	r2,-4(fp)
1011110c:	1090000c 	andi	r2,r2,16384
10111110:	10000226 	beq	r2,zero,1011111c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10111114:	00bffd44 	movi	r2,-11
10111118:	00000106 	br	10111120 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1011111c:	00bffec4 	movi	r2,-5
}
10111120:	e037883a 	mov	sp,fp
10111124:	dfc00117 	ldw	ra,4(sp)
10111128:	df000017 	ldw	fp,0(sp)
1011112c:	dec00204 	addi	sp,sp,8
10111130:	f800283a 	ret

10111134 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10111134:	defff404 	addi	sp,sp,-48
10111138:	df000b15 	stw	fp,44(sp)
1011113c:	df000b04 	addi	fp,sp,44
10111140:	e13ffc15 	stw	r4,-16(fp)
10111144:	e17ffd15 	stw	r5,-12(fp)
10111148:	e1bffe15 	stw	r6,-8(fp)
1011114c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10111150:	e0bffc17 	ldw	r2,-16(fp)
10111154:	10800017 	ldw	r2,0(r2)
10111158:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1011115c:	e0bff517 	ldw	r2,-44(fp)
10111160:	10800217 	ldw	r2,8(r2)
10111164:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10111168:	e0bff617 	ldw	r2,-40(fp)
1011116c:	10bfffc4 	addi	r2,r2,-1
10111170:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10111174:	e0bffb17 	ldw	r2,-20(fp)
10111178:	10800044 	addi	r2,r2,1
1011117c:	e0bffb15 	stw	r2,-20(fp)
10111180:	e0bffb17 	ldw	r2,-20(fp)
10111184:	10800003 	ldbu	r2,0(r2)
10111188:	10803fcc 	andi	r2,r2,255
1011118c:	1080201c 	xori	r2,r2,128
10111190:	10bfe004 	addi	r2,r2,-128
10111194:	103ff71e 	bne	r2,zero,10111174 <__alt_data_end+0xffff1174>
    ;

  return ptr - string;
10111198:	e0fffb17 	ldw	r3,-20(fp)
1011119c:	e0bff617 	ldw	r2,-40(fp)
101111a0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
101111a4:	10800044 	addi	r2,r2,1
101111a8:	1007883a 	mov	r3,r2
101111ac:	e0bffd17 	ldw	r2,-12(fp)
101111b0:	10c5883a 	add	r2,r2,r3
101111b4:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
101111b8:	d0a00d04 	addi	r2,gp,-32716
101111bc:	1007883a 	mov	r3,r2
  r4 = (int)name;
101111c0:	e0bffd17 	ldw	r2,-12(fp)
101111c4:	1009883a 	mov	r4,r2
  r5 = flags;
101111c8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
101111cc:	e1bfff17 	ldw	r6,-4(fp)
101111d0:	e0bffd17 	ldw	r2,-12(fp)
101111d4:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
101111d8:	e0bff917 	ldw	r2,-28(fp)
101111dc:	10bfffc4 	addi	r2,r2,-1
101111e0:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
101111e4:	e0bffa17 	ldw	r2,-24(fp)
101111e8:	10800044 	addi	r2,r2,1
101111ec:	e0bffa15 	stw	r2,-24(fp)
101111f0:	e0bffa17 	ldw	r2,-24(fp)
101111f4:	10800003 	ldbu	r2,0(r2)
101111f8:	10803fcc 	andi	r2,r2,255
101111fc:	1080201c 	xori	r2,r2,128
10111200:	10bfe004 	addi	r2,r2,-128
10111204:	103ff71e 	bne	r2,zero,101111e4 <__alt_data_end+0xffff11e4>
    ;

  return ptr - string;
10111208:	e1fffa17 	ldw	r7,-24(fp)
1011120c:	e0bff917 	ldw	r2,-28(fp)
10111210:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10111214:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10111218:	003da07a 	break	1

  handle = (void *)r2;
1011121c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10111220:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10111224:	e0bff817 	ldw	r2,-32(fp)
10111228:	1000031e 	bne	r2,zero,10111238 <alt_hostfs_open+0x104>
    fd->priv = handle;
1011122c:	e0bffc17 	ldw	r2,-16(fp)
10111230:	e0fff717 	ldw	r3,-36(fp)
10111234:	10c00115 	stw	r3,4(r2)

  return -error;
10111238:	e0bff817 	ldw	r2,-32(fp)
1011123c:	0085c83a 	sub	r2,zero,r2
}
10111240:	e037883a 	mov	sp,fp
10111244:	df000017 	ldw	fp,0(sp)
10111248:	dec00104 	addi	sp,sp,4
1011124c:	f800283a 	ret

10111250 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10111250:	defffd04 	addi	sp,sp,-12
10111254:	df000215 	stw	fp,8(sp)
10111258:	df000204 	addi	fp,sp,8
1011125c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10111260:	d0a01004 	addi	r2,gp,-32704
10111264:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10111268:	e0bfff17 	ldw	r2,-4(fp)
1011126c:	10800117 	ldw	r2,4(r2)
10111270:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10111274:	003da07a 	break	1

  error = r3;
10111278:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1011127c:	e0bffe17 	ldw	r2,-8(fp)
10111280:	0085c83a 	sub	r2,zero,r2
}
10111284:	e037883a 	mov	sp,fp
10111288:	df000017 	ldw	fp,0(sp)
1011128c:	dec00104 	addi	sp,sp,4
10111290:	f800283a 	ret

10111294 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10111294:	defffa04 	addi	sp,sp,-24
10111298:	df000515 	stw	fp,20(sp)
1011129c:	df000504 	addi	fp,sp,20
101112a0:	e13ffd15 	stw	r4,-12(fp)
101112a4:	e17ffe15 	stw	r5,-8(fp)
101112a8:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
101112ac:	d0a01304 	addi	r2,gp,-32692
101112b0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101112b4:	e0bffd17 	ldw	r2,-12(fp)
101112b8:	10800117 	ldw	r2,4(r2)
101112bc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
101112c0:	e0bffe17 	ldw	r2,-8(fp)
101112c4:	100b883a 	mov	r5,r2
  r6 = len;
101112c8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101112cc:	003da07a 	break	1

  rc = r2;
101112d0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101112d4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101112d8:	e0bffc17 	ldw	r2,-16(fp)
101112dc:	10000326 	beq	r2,zero,101112ec <alt_hostfs_read+0x58>
101112e0:	e0bffc17 	ldw	r2,-16(fp)
101112e4:	0085c83a 	sub	r2,zero,r2
101112e8:	00000106 	br	101112f0 <alt_hostfs_read+0x5c>
101112ec:	e0bffb17 	ldw	r2,-20(fp)
}
101112f0:	e037883a 	mov	sp,fp
101112f4:	df000017 	ldw	fp,0(sp)
101112f8:	dec00104 	addi	sp,sp,4
101112fc:	f800283a 	ret

10111300 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10111300:	defffa04 	addi	sp,sp,-24
10111304:	df000515 	stw	fp,20(sp)
10111308:	df000504 	addi	fp,sp,20
1011130c:	e13ffd15 	stw	r4,-12(fp)
10111310:	e17ffe15 	stw	r5,-8(fp)
10111314:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10111318:	d0a01604 	addi	r2,gp,-32680
1011131c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10111320:	e0bffd17 	ldw	r2,-12(fp)
10111324:	10800117 	ldw	r2,4(r2)
10111328:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1011132c:	e0bffe17 	ldw	r2,-8(fp)
10111330:	100b883a 	mov	r5,r2
  r6 = len;
10111334:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10111338:	003da07a 	break	1

  rc = r2;
1011133c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10111340:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10111344:	e0bffc17 	ldw	r2,-16(fp)
10111348:	10000326 	beq	r2,zero,10111358 <alt_hostfs_write+0x58>
1011134c:	e0bffc17 	ldw	r2,-16(fp)
10111350:	0085c83a 	sub	r2,zero,r2
10111354:	00000106 	br	1011135c <alt_hostfs_write+0x5c>
10111358:	e0bffb17 	ldw	r2,-20(fp)
}
1011135c:	e037883a 	mov	sp,fp
10111360:	df000017 	ldw	fp,0(sp)
10111364:	dec00104 	addi	sp,sp,4
10111368:	f800283a 	ret

1011136c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1011136c:	defffa04 	addi	sp,sp,-24
10111370:	df000515 	stw	fp,20(sp)
10111374:	df000504 	addi	fp,sp,20
10111378:	e13ffd15 	stw	r4,-12(fp)
1011137c:	e17ffe15 	stw	r5,-8(fp)
10111380:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10111384:	d0a01904 	addi	r2,gp,-32668
10111388:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1011138c:	e0bffd17 	ldw	r2,-12(fp)
10111390:	10800117 	ldw	r2,4(r2)
10111394:	1009883a 	mov	r4,r2
  r5 = ptr;
10111398:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1011139c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101113a0:	003da07a 	break	1

  rc = r2;
101113a4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101113a8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101113ac:	e0bffc17 	ldw	r2,-16(fp)
101113b0:	10000326 	beq	r2,zero,101113c0 <alt_hostfs_seek+0x54>
101113b4:	e0bffc17 	ldw	r2,-16(fp)
101113b8:	0085c83a 	sub	r2,zero,r2
101113bc:	00000106 	br	101113c4 <alt_hostfs_seek+0x58>
101113c0:	e0bffb17 	ldw	r2,-20(fp)
}
101113c4:	e037883a 	mov	sp,fp
101113c8:	df000017 	ldw	fp,0(sp)
101113cc:	dec00104 	addi	sp,sp,4
101113d0:	f800283a 	ret

101113d4 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
101113d4:	deffe904 	addi	sp,sp,-92
101113d8:	df001615 	stw	fp,88(sp)
101113dc:	df001604 	addi	fp,sp,88
101113e0:	e13ffe15 	stw	r4,-8(fp)
101113e4:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
101113e8:	d0a01c04 	addi	r2,gp,-32656
101113ec:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101113f0:	e0bffe17 	ldw	r2,-8(fp)
101113f4:	10800117 	ldw	r2,4(r2)
101113f8:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
101113fc:	e0bfee04 	addi	r2,fp,-72
10111400:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10111404:	003da07a 	break	1

  rc = r2;
10111408:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1011140c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10111410:	e0bfec17 	ldw	r2,-80(fp)
10111414:	1000621e 	bne	r2,zero,101115a0 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10111418:	e0bfee04 	addi	r2,fp,-72
1011141c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10111420:	e0bfea17 	ldw	r2,-88(fp)
10111424:	10801004 	addi	r2,r2,64
10111428:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1011142c:	00001606 	br	10111488 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10111430:	e0bfea17 	ldw	r2,-88(fp)
10111434:	10800017 	ldw	r2,0(r2)
10111438:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1011143c:	e0bfea17 	ldw	r2,-88(fp)
10111440:	10800017 	ldw	r2,0(r2)
10111444:	10803fec 	andhi	r2,r2,255
10111448:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1011144c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10111450:	e0bfea17 	ldw	r2,-88(fp)
10111454:	10800017 	ldw	r2,0(r2)
10111458:	10bfc00c 	andi	r2,r2,65280
1011145c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10111460:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10111464:	e0bfea17 	ldw	r2,-88(fp)
10111468:	10800017 	ldw	r2,0(r2)
1011146c:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10111470:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10111474:	e0bfea17 	ldw	r2,-88(fp)
10111478:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1011147c:	e0bfea17 	ldw	r2,-88(fp)
10111480:	10800104 	addi	r2,r2,4
10111484:	e0bfea15 	stw	r2,-88(fp)
10111488:	e0ffea17 	ldw	r3,-88(fp)
1011148c:	e0bfed17 	ldw	r2,-76(fp)
10111490:	18bfe736 	bltu	r3,r2,10111430 <__alt_data_end+0xffff1430>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10111494:	e0bfff17 	ldw	r2,-4(fp)
10111498:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1011149c:	e0bfea17 	ldw	r2,-88(fp)
101114a0:	10800f04 	addi	r2,r2,60
101114a4:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
101114a8:	00000506 	br	101114c0 <alt_hostfs_fstat+0xec>
      *ptr = 0;
101114ac:	e0bfea17 	ldw	r2,-88(fp)
101114b0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
101114b4:	e0bfea17 	ldw	r2,-88(fp)
101114b8:	10800104 	addi	r2,r2,4
101114bc:	e0bfea15 	stw	r2,-88(fp)
101114c0:	e0ffea17 	ldw	r3,-88(fp)
101114c4:	e0bfed17 	ldw	r2,-76(fp)
101114c8:	18bff836 	bltu	r3,r2,101114ac <__alt_data_end+0xffff14ac>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
101114cc:	e0bfee17 	ldw	r2,-72(fp)
101114d0:	1007883a 	mov	r3,r2
101114d4:	e0bfff17 	ldw	r2,-4(fp)
101114d8:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101114dc:	e0bfef17 	ldw	r2,-68(fp)
101114e0:	1007883a 	mov	r3,r2
101114e4:	e0bfff17 	ldw	r2,-4(fp)
101114e8:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101114ec:	e0fff017 	ldw	r3,-64(fp)
101114f0:	e0bfff17 	ldw	r2,-4(fp)
101114f4:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101114f8:	e0bff117 	ldw	r2,-60(fp)
101114fc:	1007883a 	mov	r3,r2
10111500:	e0bfff17 	ldw	r2,-4(fp)
10111504:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10111508:	e0bff217 	ldw	r2,-56(fp)
1011150c:	1007883a 	mov	r3,r2
10111510:	e0bfff17 	ldw	r2,-4(fp)
10111514:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10111518:	e0bff317 	ldw	r2,-52(fp)
1011151c:	1007883a 	mov	r3,r2
10111520:	e0bfff17 	ldw	r2,-4(fp)
10111524:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10111528:	e0bff417 	ldw	r2,-48(fp)
1011152c:	1007883a 	mov	r3,r2
10111530:	e0bfff17 	ldw	r2,-4(fp)
10111534:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10111538:	e0bff617 	ldw	r2,-40(fp)
1011153c:	1007883a 	mov	r3,r2
10111540:	e0bfff17 	ldw	r2,-4(fp)
10111544:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10111548:	e0bffb17 	ldw	r2,-20(fp)
1011154c:	1007883a 	mov	r3,r2
10111550:	e0bfff17 	ldw	r2,-4(fp)
10111554:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10111558:	e0bffc17 	ldw	r2,-16(fp)
1011155c:	1007883a 	mov	r3,r2
10111560:	e0bfff17 	ldw	r2,-4(fp)
10111564:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10111568:	e0bffd17 	ldw	r2,-12(fp)
1011156c:	1007883a 	mov	r3,r2
10111570:	e0bfff17 	ldw	r2,-4(fp)
10111574:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10111578:	e0bff817 	ldw	r2,-32(fp)
1011157c:	1007883a 	mov	r3,r2
10111580:	e0bfff17 	ldw	r2,-4(fp)
10111584:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10111588:	e0bffa17 	ldw	r2,-24(fp)
1011158c:	1007883a 	mov	r3,r2
10111590:	e0bfff17 	ldw	r2,-4(fp)
10111594:	10c00c15 	stw	r3,48(r2)

    return rc;
10111598:	e0bfeb17 	ldw	r2,-84(fp)
1011159c:	00000206 	br	101115a8 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
101115a0:	e0bfec17 	ldw	r2,-80(fp)
101115a4:	0085c83a 	sub	r2,zero,r2
}
101115a8:	e037883a 	mov	sp,fp
101115ac:	df000017 	ldw	fp,0(sp)
101115b0:	dec00104 	addi	sp,sp,4
101115b4:	f800283a 	ret

101115b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
101115b8:	defff504 	addi	sp,sp,-44
101115bc:	df000a15 	stw	fp,40(sp)
101115c0:	df000a04 	addi	fp,sp,40
101115c4:	e13ffc15 	stw	r4,-16(fp)
101115c8:	e17ffd15 	stw	r5,-12(fp)
101115cc:	e1bffe15 	stw	r6,-8(fp)
101115d0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101115d4:	e03ff615 	stw	zero,-40(fp)
101115d8:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
101115dc:	10003c26 	beq	r2,zero,101116d0 <alt_alarm_start+0x118>
  {
    if (alarm)
101115e0:	e0bffc17 	ldw	r2,-16(fp)
101115e4:	10003826 	beq	r2,zero,101116c8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
101115e8:	e0bffc17 	ldw	r2,-16(fp)
101115ec:	e0fffe17 	ldw	r3,-8(fp)
101115f0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101115f4:	e0bffc17 	ldw	r2,-16(fp)
101115f8:	e0ffff17 	ldw	r3,-4(fp)
101115fc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10111600:	0005303a 	rdctl	r2,status
10111604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111608:	e0fff917 	ldw	r3,-28(fp)
1011160c:	00bfff84 	movi	r2,-2
10111610:	1884703a 	and	r2,r3,r2
10111614:	1001703a 	wrctl	status,r2
  
  return context;
10111618:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1011161c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10111620:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
10111624:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10111628:	e0fffd17 	ldw	r3,-12(fp)
1011162c:	e0bff617 	ldw	r2,-40(fp)
10111630:	1885883a 	add	r2,r3,r2
10111634:	10c00044 	addi	r3,r2,1
10111638:	e0bffc17 	ldw	r2,-16(fp)
1011163c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10111640:	e0bffc17 	ldw	r2,-16(fp)
10111644:	10c00217 	ldw	r3,8(r2)
10111648:	e0bff617 	ldw	r2,-40(fp)
1011164c:	1880042e 	bgeu	r3,r2,10111660 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10111650:	e0bffc17 	ldw	r2,-16(fp)
10111654:	00c00044 	movi	r3,1
10111658:	10c00405 	stb	r3,16(r2)
1011165c:	00000206 	br	10111668 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10111660:	e0bffc17 	ldw	r2,-16(fp)
10111664:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10111668:	e0bffc17 	ldw	r2,-16(fp)
1011166c:	d0e02004 	addi	r3,gp,-32640
10111670:	e0fffa15 	stw	r3,-24(fp)
10111674:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10111678:	e0bffb17 	ldw	r2,-20(fp)
1011167c:	e0fffa17 	ldw	r3,-24(fp)
10111680:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10111684:	e0bffa17 	ldw	r2,-24(fp)
10111688:	10c00017 	ldw	r3,0(r2)
1011168c:	e0bffb17 	ldw	r2,-20(fp)
10111690:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10111694:	e0bffa17 	ldw	r2,-24(fp)
10111698:	10800017 	ldw	r2,0(r2)
1011169c:	e0fffb17 	ldw	r3,-20(fp)
101116a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101116a4:	e0bffa17 	ldw	r2,-24(fp)
101116a8:	e0fffb17 	ldw	r3,-20(fp)
101116ac:	10c00015 	stw	r3,0(r2)
101116b0:	e0bff817 	ldw	r2,-32(fp)
101116b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101116b8:	e0bff717 	ldw	r2,-36(fp)
101116bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101116c0:	0005883a 	mov	r2,zero
101116c4:	00000306 	br	101116d4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
101116c8:	00bffa84 	movi	r2,-22
101116cc:	00000106 	br	101116d4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101116d0:	00bfde84 	movi	r2,-134
  }
}
101116d4:	e037883a 	mov	sp,fp
101116d8:	df000017 	ldw	fp,0(sp)
101116dc:	dec00104 	addi	sp,sp,4
101116e0:	f800283a 	ret

101116e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
101116e4:	defffa04 	addi	sp,sp,-24
101116e8:	dfc00515 	stw	ra,20(sp)
101116ec:	df000415 	stw	fp,16(sp)
101116f0:	df000404 	addi	fp,sp,16
101116f4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
101116f8:	008000c4 	movi	r2,3
101116fc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10111700:	e0fffd17 	ldw	r3,-12(fp)
10111704:	008003f4 	movhi	r2,15
10111708:	10909004 	addi	r2,r2,16960
1011170c:	1885383a 	mul	r2,r3,r2
10111710:	100b883a 	mov	r5,r2
10111714:	0100bef4 	movhi	r4,763
10111718:	213c2004 	addi	r4,r4,-3968
1011171c:	01026400 	call	10102640 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10111720:	100b883a 	mov	r5,r2
10111724:	01200034 	movhi	r4,32768
10111728:	213fffc4 	addi	r4,r4,-1
1011172c:	01026400 	call	10102640 <__udivsi3>
10111730:	100b883a 	mov	r5,r2
10111734:	e13fff17 	ldw	r4,-4(fp)
10111738:	01026400 	call	10102640 <__udivsi3>
1011173c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10111740:	e0bffe17 	ldw	r2,-8(fp)
10111744:	10002a26 	beq	r2,zero,101117f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10111748:	e03ffc15 	stw	zero,-16(fp)
1011174c:	00001706 	br	101117ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10111750:	00a00034 	movhi	r2,32768
10111754:	10bfffc4 	addi	r2,r2,-1
10111758:	10bfffc4 	addi	r2,r2,-1
1011175c:	103ffe1e 	bne	r2,zero,10111758 <__alt_data_end+0xffff1758>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10111760:	e0fffd17 	ldw	r3,-12(fp)
10111764:	008003f4 	movhi	r2,15
10111768:	10909004 	addi	r2,r2,16960
1011176c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10111770:	100b883a 	mov	r5,r2
10111774:	0100bef4 	movhi	r4,763
10111778:	213c2004 	addi	r4,r4,-3968
1011177c:	01026400 	call	10102640 <__udivsi3>
10111780:	100b883a 	mov	r5,r2
10111784:	01200034 	movhi	r4,32768
10111788:	213fffc4 	addi	r4,r4,-1
1011178c:	01026400 	call	10102640 <__udivsi3>
10111790:	1007883a 	mov	r3,r2
10111794:	e0bfff17 	ldw	r2,-4(fp)
10111798:	10c5c83a 	sub	r2,r2,r3
1011179c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
101117a0:	e0bffc17 	ldw	r2,-16(fp)
101117a4:	10800044 	addi	r2,r2,1
101117a8:	e0bffc15 	stw	r2,-16(fp)
101117ac:	e0fffc17 	ldw	r3,-16(fp)
101117b0:	e0bffe17 	ldw	r2,-8(fp)
101117b4:	18bfe616 	blt	r3,r2,10111750 <__alt_data_end+0xffff1750>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101117b8:	e0fffd17 	ldw	r3,-12(fp)
101117bc:	008003f4 	movhi	r2,15
101117c0:	10909004 	addi	r2,r2,16960
101117c4:	1885383a 	mul	r2,r3,r2
101117c8:	100b883a 	mov	r5,r2
101117cc:	0100bef4 	movhi	r4,763
101117d0:	213c2004 	addi	r4,r4,-3968
101117d4:	01026400 	call	10102640 <__udivsi3>
101117d8:	1007883a 	mov	r3,r2
101117dc:	e0bfff17 	ldw	r2,-4(fp)
101117e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101117e4:	10bfffc4 	addi	r2,r2,-1
101117e8:	103ffe1e 	bne	r2,zero,101117e4 <__alt_data_end+0xffff17e4>
101117ec:	00000d06 	br	10111824 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101117f0:	e0fffd17 	ldw	r3,-12(fp)
101117f4:	008003f4 	movhi	r2,15
101117f8:	10909004 	addi	r2,r2,16960
101117fc:	1885383a 	mul	r2,r3,r2
10111800:	100b883a 	mov	r5,r2
10111804:	0100bef4 	movhi	r4,763
10111808:	213c2004 	addi	r4,r4,-3968
1011180c:	01026400 	call	10102640 <__udivsi3>
10111810:	1007883a 	mov	r3,r2
10111814:	e0bfff17 	ldw	r2,-4(fp)
10111818:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1011181c:	10bfffc4 	addi	r2,r2,-1
10111820:	00bffe16 	blt	zero,r2,1011181c <__alt_data_end+0xffff181c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10111824:	0005883a 	mov	r2,zero
}
10111828:	e037883a 	mov	sp,fp
1011182c:	dfc00117 	ldw	ra,4(sp)
10111830:	df000017 	ldw	fp,0(sp)
10111834:	dec00204 	addi	sp,sp,8
10111838:	f800283a 	ret

1011183c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1011183c:	defffe04 	addi	sp,sp,-8
10111840:	df000115 	stw	fp,4(sp)
10111844:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10111848:	e03fff15 	stw	zero,-4(fp)
1011184c:	00000506 	br	10111864 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10111850:	e0bfff17 	ldw	r2,-4(fp)
10111854:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10111858:	e0bfff17 	ldw	r2,-4(fp)
1011185c:	10800804 	addi	r2,r2,32
10111860:	e0bfff15 	stw	r2,-4(fp)
10111864:	e0bfff17 	ldw	r2,-4(fp)
10111868:	10820030 	cmpltui	r2,r2,2048
1011186c:	103ff81e 	bne	r2,zero,10111850 <__alt_data_end+0xffff1850>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10111870:	0001883a 	nop
10111874:	e037883a 	mov	sp,fp
10111878:	df000017 	ldw	fp,0(sp)
1011187c:	dec00104 	addi	sp,sp,4
10111880:	f800283a 	ret

10111884 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10111884:	defffe04 	addi	sp,sp,-8
10111888:	dfc00115 	stw	ra,4(sp)
1011188c:	df000015 	stw	fp,0(sp)
10111890:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10111894:	d0a00b17 	ldw	r2,-32724(gp)
10111898:	10000326 	beq	r2,zero,101118a8 <alt_get_errno+0x24>
1011189c:	d0a00b17 	ldw	r2,-32724(gp)
101118a0:	103ee83a 	callr	r2
101118a4:	00000106 	br	101118ac <alt_get_errno+0x28>
101118a8:	d0a6f904 	addi	r2,gp,-25628
}
101118ac:	e037883a 	mov	sp,fp
101118b0:	dfc00117 	ldw	ra,4(sp)
101118b4:	df000017 	ldw	fp,0(sp)
101118b8:	dec00204 	addi	sp,sp,8
101118bc:	f800283a 	ret

101118c0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101118c0:	defffa04 	addi	sp,sp,-24
101118c4:	dfc00515 	stw	ra,20(sp)
101118c8:	df000415 	stw	fp,16(sp)
101118cc:	df000404 	addi	fp,sp,16
101118d0:	e13ffe15 	stw	r4,-8(fp)
101118d4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101118d8:	e0bffe17 	ldw	r2,-8(fp)
101118dc:	10000326 	beq	r2,zero,101118ec <alt_dev_llist_insert+0x2c>
101118e0:	e0bffe17 	ldw	r2,-8(fp)
101118e4:	10800217 	ldw	r2,8(r2)
101118e8:	1000061e 	bne	r2,zero,10111904 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
101118ec:	01118840 	call	10111884 <alt_get_errno>
101118f0:	1007883a 	mov	r3,r2
101118f4:	00800584 	movi	r2,22
101118f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
101118fc:	00bffa84 	movi	r2,-22
10111900:	00001306 	br	10111950 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10111904:	e0bffe17 	ldw	r2,-8(fp)
10111908:	e0ffff17 	ldw	r3,-4(fp)
1011190c:	e0fffc15 	stw	r3,-16(fp)
10111910:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10111914:	e0bffd17 	ldw	r2,-12(fp)
10111918:	e0fffc17 	ldw	r3,-16(fp)
1011191c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10111920:	e0bffc17 	ldw	r2,-16(fp)
10111924:	10c00017 	ldw	r3,0(r2)
10111928:	e0bffd17 	ldw	r2,-12(fp)
1011192c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10111930:	e0bffc17 	ldw	r2,-16(fp)
10111934:	10800017 	ldw	r2,0(r2)
10111938:	e0fffd17 	ldw	r3,-12(fp)
1011193c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10111940:	e0bffc17 	ldw	r2,-16(fp)
10111944:	e0fffd17 	ldw	r3,-12(fp)
10111948:	10c00015 	stw	r3,0(r2)

  return 0;  
1011194c:	0005883a 	mov	r2,zero
}
10111950:	e037883a 	mov	sp,fp
10111954:	dfc00117 	ldw	ra,4(sp)
10111958:	df000017 	ldw	fp,0(sp)
1011195c:	dec00204 	addi	sp,sp,8
10111960:	f800283a 	ret

10111964 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10111964:	defffd04 	addi	sp,sp,-12
10111968:	dfc00215 	stw	ra,8(sp)
1011196c:	df000115 	stw	fp,4(sp)
10111970:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10111974:	00840474 	movhi	r2,4113
10111978:	1089de04 	addi	r2,r2,10104
1011197c:	e0bfff15 	stw	r2,-4(fp)
10111980:	00000606 	br	1011199c <_do_ctors+0x38>
        (*ctor) (); 
10111984:	e0bfff17 	ldw	r2,-4(fp)
10111988:	10800017 	ldw	r2,0(r2)
1011198c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10111990:	e0bfff17 	ldw	r2,-4(fp)
10111994:	10bfff04 	addi	r2,r2,-4
10111998:	e0bfff15 	stw	r2,-4(fp)
1011199c:	e0ffff17 	ldw	r3,-4(fp)
101119a0:	00840474 	movhi	r2,4113
101119a4:	1089df04 	addi	r2,r2,10108
101119a8:	18bff62e 	bgeu	r3,r2,10111984 <__alt_data_end+0xffff1984>
        (*ctor) (); 
}
101119ac:	0001883a 	nop
101119b0:	e037883a 	mov	sp,fp
101119b4:	dfc00117 	ldw	ra,4(sp)
101119b8:	df000017 	ldw	fp,0(sp)
101119bc:	dec00204 	addi	sp,sp,8
101119c0:	f800283a 	ret

101119c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
101119c4:	defffd04 	addi	sp,sp,-12
101119c8:	dfc00215 	stw	ra,8(sp)
101119cc:	df000115 	stw	fp,4(sp)
101119d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101119d4:	00840474 	movhi	r2,4113
101119d8:	1089de04 	addi	r2,r2,10104
101119dc:	e0bfff15 	stw	r2,-4(fp)
101119e0:	00000606 	br	101119fc <_do_dtors+0x38>
        (*dtor) (); 
101119e4:	e0bfff17 	ldw	r2,-4(fp)
101119e8:	10800017 	ldw	r2,0(r2)
101119ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101119f0:	e0bfff17 	ldw	r2,-4(fp)
101119f4:	10bfff04 	addi	r2,r2,-4
101119f8:	e0bfff15 	stw	r2,-4(fp)
101119fc:	e0ffff17 	ldw	r3,-4(fp)
10111a00:	00840474 	movhi	r2,4113
10111a04:	1089df04 	addi	r2,r2,10108
10111a08:	18bff62e 	bgeu	r3,r2,101119e4 <__alt_data_end+0xffff19e4>
        (*dtor) (); 
}
10111a0c:	0001883a 	nop
10111a10:	e037883a 	mov	sp,fp
10111a14:	dfc00117 	ldw	ra,4(sp)
10111a18:	df000017 	ldw	fp,0(sp)
10111a1c:	dec00204 	addi	sp,sp,8
10111a20:	f800283a 	ret

10111a24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10111a24:	defffa04 	addi	sp,sp,-24
10111a28:	dfc00515 	stw	ra,20(sp)
10111a2c:	df000415 	stw	fp,16(sp)
10111a30:	df000404 	addi	fp,sp,16
10111a34:	e13ffe15 	stw	r4,-8(fp)
10111a38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10111a3c:	e0bfff17 	ldw	r2,-4(fp)
10111a40:	10800017 	ldw	r2,0(r2)
10111a44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10111a48:	e13ffe17 	ldw	r4,-8(fp)
10111a4c:	0104d500 	call	10104d50 <strlen>
10111a50:	10800044 	addi	r2,r2,1
10111a54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10111a58:	00000d06 	br	10111a90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10111a5c:	e0bffc17 	ldw	r2,-16(fp)
10111a60:	10800217 	ldw	r2,8(r2)
10111a64:	e0fffd17 	ldw	r3,-12(fp)
10111a68:	180d883a 	mov	r6,r3
10111a6c:	e17ffe17 	ldw	r5,-8(fp)
10111a70:	1009883a 	mov	r4,r2
10111a74:	01124340 	call	10112434 <memcmp>
10111a78:	1000021e 	bne	r2,zero,10111a84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10111a7c:	e0bffc17 	ldw	r2,-16(fp)
10111a80:	00000706 	br	10111aa0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10111a84:	e0bffc17 	ldw	r2,-16(fp)
10111a88:	10800017 	ldw	r2,0(r2)
10111a8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10111a90:	e0fffc17 	ldw	r3,-16(fp)
10111a94:	e0bfff17 	ldw	r2,-4(fp)
10111a98:	18bff01e 	bne	r3,r2,10111a5c <__alt_data_end+0xffff1a5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10111a9c:	0005883a 	mov	r2,zero
}
10111aa0:	e037883a 	mov	sp,fp
10111aa4:	dfc00117 	ldw	ra,4(sp)
10111aa8:	df000017 	ldw	fp,0(sp)
10111aac:	dec00204 	addi	sp,sp,8
10111ab0:	f800283a 	ret

10111ab4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10111ab4:	defffb04 	addi	sp,sp,-20
10111ab8:	dfc00415 	stw	ra,16(sp)
10111abc:	df000315 	stw	fp,12(sp)
10111ac0:	df000304 	addi	fp,sp,12
10111ac4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10111ac8:	d0a00617 	ldw	r2,-32744(gp)
10111acc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10111ad0:	00003106 	br	10111b98 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10111ad4:	e0bffd17 	ldw	r2,-12(fp)
10111ad8:	10800217 	ldw	r2,8(r2)
10111adc:	1009883a 	mov	r4,r2
10111ae0:	0104d500 	call	10104d50 <strlen>
10111ae4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10111ae8:	e0bffd17 	ldw	r2,-12(fp)
10111aec:	10c00217 	ldw	r3,8(r2)
10111af0:	e0bffe17 	ldw	r2,-8(fp)
10111af4:	10bfffc4 	addi	r2,r2,-1
10111af8:	1885883a 	add	r2,r3,r2
10111afc:	10800003 	ldbu	r2,0(r2)
10111b00:	10803fcc 	andi	r2,r2,255
10111b04:	1080201c 	xori	r2,r2,128
10111b08:	10bfe004 	addi	r2,r2,-128
10111b0c:	10800bd8 	cmpnei	r2,r2,47
10111b10:	1000031e 	bne	r2,zero,10111b20 <alt_find_file+0x6c>
    {
      len -= 1;
10111b14:	e0bffe17 	ldw	r2,-8(fp)
10111b18:	10bfffc4 	addi	r2,r2,-1
10111b1c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10111b20:	e0bffe17 	ldw	r2,-8(fp)
10111b24:	e0ffff17 	ldw	r3,-4(fp)
10111b28:	1885883a 	add	r2,r3,r2
10111b2c:	10800003 	ldbu	r2,0(r2)
10111b30:	10803fcc 	andi	r2,r2,255
10111b34:	1080201c 	xori	r2,r2,128
10111b38:	10bfe004 	addi	r2,r2,-128
10111b3c:	10800be0 	cmpeqi	r2,r2,47
10111b40:	1000081e 	bne	r2,zero,10111b64 <alt_find_file+0xb0>
10111b44:	e0bffe17 	ldw	r2,-8(fp)
10111b48:	e0ffff17 	ldw	r3,-4(fp)
10111b4c:	1885883a 	add	r2,r3,r2
10111b50:	10800003 	ldbu	r2,0(r2)
10111b54:	10803fcc 	andi	r2,r2,255
10111b58:	1080201c 	xori	r2,r2,128
10111b5c:	10bfe004 	addi	r2,r2,-128
10111b60:	10000a1e 	bne	r2,zero,10111b8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10111b64:	e0bffd17 	ldw	r2,-12(fp)
10111b68:	10800217 	ldw	r2,8(r2)
10111b6c:	e0fffe17 	ldw	r3,-8(fp)
10111b70:	180d883a 	mov	r6,r3
10111b74:	e17fff17 	ldw	r5,-4(fp)
10111b78:	1009883a 	mov	r4,r2
10111b7c:	01124340 	call	10112434 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10111b80:	1000021e 	bne	r2,zero,10111b8c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10111b84:	e0bffd17 	ldw	r2,-12(fp)
10111b88:	00000706 	br	10111ba8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10111b8c:	e0bffd17 	ldw	r2,-12(fp)
10111b90:	10800017 	ldw	r2,0(r2)
10111b94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10111b98:	e0fffd17 	ldw	r3,-12(fp)
10111b9c:	d0a00604 	addi	r2,gp,-32744
10111ba0:	18bfcc1e 	bne	r3,r2,10111ad4 <__alt_data_end+0xffff1ad4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10111ba4:	0005883a 	mov	r2,zero
}
10111ba8:	e037883a 	mov	sp,fp
10111bac:	dfc00117 	ldw	ra,4(sp)
10111bb0:	df000017 	ldw	fp,0(sp)
10111bb4:	dec00204 	addi	sp,sp,8
10111bb8:	f800283a 	ret

10111bbc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10111bbc:	defffc04 	addi	sp,sp,-16
10111bc0:	df000315 	stw	fp,12(sp)
10111bc4:	df000304 	addi	fp,sp,12
10111bc8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10111bcc:	e0bfff17 	ldw	r2,-4(fp)
10111bd0:	10800217 	ldw	r2,8(r2)
10111bd4:	1000021e 	bne	r2,zero,10111be0 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10111bd8:	00bffb44 	movi	r2,-19
10111bdc:	00001306 	br	10111c2c <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10111be0:	e0bfff17 	ldw	r2,-4(fp)
10111be4:	d0e00604 	addi	r3,gp,-32744
10111be8:	e0fffd15 	stw	r3,-12(fp)
10111bec:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10111bf0:	e0bffe17 	ldw	r2,-8(fp)
10111bf4:	e0fffd17 	ldw	r3,-12(fp)
10111bf8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10111bfc:	e0bffd17 	ldw	r2,-12(fp)
10111c00:	10c00017 	ldw	r3,0(r2)
10111c04:	e0bffe17 	ldw	r2,-8(fp)
10111c08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10111c0c:	e0bffd17 	ldw	r2,-12(fp)
10111c10:	10800017 	ldw	r2,0(r2)
10111c14:	e0fffe17 	ldw	r3,-8(fp)
10111c18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10111c1c:	e0bffd17 	ldw	r2,-12(fp)
10111c20:	e0fffe17 	ldw	r3,-8(fp)
10111c24:	10c00015 	stw	r3,0(r2)

  return 0;
10111c28:	0005883a 	mov	r2,zero
} 
10111c2c:	e037883a 	mov	sp,fp
10111c30:	df000017 	ldw	fp,0(sp)
10111c34:	dec00104 	addi	sp,sp,4
10111c38:	f800283a 	ret

10111c3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10111c3c:	defffc04 	addi	sp,sp,-16
10111c40:	df000315 	stw	fp,12(sp)
10111c44:	df000304 	addi	fp,sp,12
10111c48:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10111c4c:	00bffa04 	movi	r2,-24
10111c50:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10111c54:	e03ffd15 	stw	zero,-12(fp)
10111c58:	00001906 	br	10111cc0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
10111c5c:	00840474 	movhi	r2,4113
10111c60:	108d0504 	addi	r2,r2,13332
10111c64:	e0fffd17 	ldw	r3,-12(fp)
10111c68:	18c00324 	muli	r3,r3,12
10111c6c:	10c5883a 	add	r2,r2,r3
10111c70:	10800017 	ldw	r2,0(r2)
10111c74:	10000f1e 	bne	r2,zero,10111cb4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10111c78:	00840474 	movhi	r2,4113
10111c7c:	108d0504 	addi	r2,r2,13332
10111c80:	e0fffd17 	ldw	r3,-12(fp)
10111c84:	18c00324 	muli	r3,r3,12
10111c88:	10c5883a 	add	r2,r2,r3
10111c8c:	e0ffff17 	ldw	r3,-4(fp)
10111c90:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10111c94:	d0e00a17 	ldw	r3,-32728(gp)
10111c98:	e0bffd17 	ldw	r2,-12(fp)
10111c9c:	1880020e 	bge	r3,r2,10111ca8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
10111ca0:	e0bffd17 	ldw	r2,-12(fp)
10111ca4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10111ca8:	e0bffd17 	ldw	r2,-12(fp)
10111cac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10111cb0:	00000606 	br	10111ccc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10111cb4:	e0bffd17 	ldw	r2,-12(fp)
10111cb8:	10800044 	addi	r2,r2,1
10111cbc:	e0bffd15 	stw	r2,-12(fp)
10111cc0:	e0bffd17 	ldw	r2,-12(fp)
10111cc4:	10800810 	cmplti	r2,r2,32
10111cc8:	103fe41e 	bne	r2,zero,10111c5c <__alt_data_end+0xffff1c5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10111ccc:	e0bffe17 	ldw	r2,-8(fp)
}
10111cd0:	e037883a 	mov	sp,fp
10111cd4:	df000017 	ldw	fp,0(sp)
10111cd8:	dec00104 	addi	sp,sp,4
10111cdc:	f800283a 	ret

10111ce0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10111ce0:	defffe04 	addi	sp,sp,-8
10111ce4:	dfc00115 	stw	ra,4(sp)
10111ce8:	df000015 	stw	fp,0(sp)
10111cec:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10111cf0:	01440004 	movi	r5,4096
10111cf4:	0009883a 	mov	r4,zero
10111cf8:	01122bc0 	call	101122bc <alt_icache_flush>
#endif
}
10111cfc:	0001883a 	nop
10111d00:	e037883a 	mov	sp,fp
10111d04:	dfc00117 	ldw	ra,4(sp)
10111d08:	df000017 	ldw	fp,0(sp)
10111d0c:	dec00204 	addi	sp,sp,8
10111d10:	f800283a 	ret

10111d14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10111d14:	defff904 	addi	sp,sp,-28
10111d18:	dfc00615 	stw	ra,24(sp)
10111d1c:	df000515 	stw	fp,20(sp)
10111d20:	df000504 	addi	fp,sp,20
10111d24:	e13ffc15 	stw	r4,-16(fp)
10111d28:	e17ffd15 	stw	r5,-12(fp)
10111d2c:	e1bffe15 	stw	r6,-8(fp)
10111d30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10111d34:	e0800217 	ldw	r2,8(fp)
10111d38:	d8800015 	stw	r2,0(sp)
10111d3c:	e1ffff17 	ldw	r7,-4(fp)
10111d40:	e1bffe17 	ldw	r6,-8(fp)
10111d44:	e17ffd17 	ldw	r5,-12(fp)
10111d48:	e13ffc17 	ldw	r4,-16(fp)
10111d4c:	0111ec40 	call	10111ec4 <alt_iic_isr_register>
}  
10111d50:	e037883a 	mov	sp,fp
10111d54:	dfc00117 	ldw	ra,4(sp)
10111d58:	df000017 	ldw	fp,0(sp)
10111d5c:	dec00204 	addi	sp,sp,8
10111d60:	f800283a 	ret

10111d64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10111d64:	defff904 	addi	sp,sp,-28
10111d68:	df000615 	stw	fp,24(sp)
10111d6c:	df000604 	addi	fp,sp,24
10111d70:	e13ffe15 	stw	r4,-8(fp)
10111d74:	e17fff15 	stw	r5,-4(fp)
10111d78:	e0bfff17 	ldw	r2,-4(fp)
10111d7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10111d80:	0005303a 	rdctl	r2,status
10111d84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111d88:	e0fffb17 	ldw	r3,-20(fp)
10111d8c:	00bfff84 	movi	r2,-2
10111d90:	1884703a 	and	r2,r3,r2
10111d94:	1001703a 	wrctl	status,r2
  
  return context;
10111d98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10111d9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10111da0:	00c00044 	movi	r3,1
10111da4:	e0bffa17 	ldw	r2,-24(fp)
10111da8:	1884983a 	sll	r2,r3,r2
10111dac:	1007883a 	mov	r3,r2
10111db0:	d0a70317 	ldw	r2,-25588(gp)
10111db4:	1884b03a 	or	r2,r3,r2
10111db8:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10111dbc:	d0a70317 	ldw	r2,-25588(gp)
10111dc0:	100170fa 	wrctl	ienable,r2
10111dc4:	e0bffc17 	ldw	r2,-16(fp)
10111dc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10111dcc:	e0bffd17 	ldw	r2,-12(fp)
10111dd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10111dd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10111dd8:	0001883a 	nop
}
10111ddc:	e037883a 	mov	sp,fp
10111de0:	df000017 	ldw	fp,0(sp)
10111de4:	dec00104 	addi	sp,sp,4
10111de8:	f800283a 	ret

10111dec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10111dec:	defff904 	addi	sp,sp,-28
10111df0:	df000615 	stw	fp,24(sp)
10111df4:	df000604 	addi	fp,sp,24
10111df8:	e13ffe15 	stw	r4,-8(fp)
10111dfc:	e17fff15 	stw	r5,-4(fp)
10111e00:	e0bfff17 	ldw	r2,-4(fp)
10111e04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10111e08:	0005303a 	rdctl	r2,status
10111e0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111e10:	e0fffb17 	ldw	r3,-20(fp)
10111e14:	00bfff84 	movi	r2,-2
10111e18:	1884703a 	and	r2,r3,r2
10111e1c:	1001703a 	wrctl	status,r2
  
  return context;
10111e20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10111e24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10111e28:	00c00044 	movi	r3,1
10111e2c:	e0bffa17 	ldw	r2,-24(fp)
10111e30:	1884983a 	sll	r2,r3,r2
10111e34:	0084303a 	nor	r2,zero,r2
10111e38:	1007883a 	mov	r3,r2
10111e3c:	d0a70317 	ldw	r2,-25588(gp)
10111e40:	1884703a 	and	r2,r3,r2
10111e44:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10111e48:	d0a70317 	ldw	r2,-25588(gp)
10111e4c:	100170fa 	wrctl	ienable,r2
10111e50:	e0bffc17 	ldw	r2,-16(fp)
10111e54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10111e58:	e0bffd17 	ldw	r2,-12(fp)
10111e5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10111e60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10111e64:	0001883a 	nop
}
10111e68:	e037883a 	mov	sp,fp
10111e6c:	df000017 	ldw	fp,0(sp)
10111e70:	dec00104 	addi	sp,sp,4
10111e74:	f800283a 	ret

10111e78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10111e78:	defffc04 	addi	sp,sp,-16
10111e7c:	df000315 	stw	fp,12(sp)
10111e80:	df000304 	addi	fp,sp,12
10111e84:	e13ffe15 	stw	r4,-8(fp)
10111e88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10111e8c:	000530fa 	rdctl	r2,ienable
10111e90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10111e94:	00c00044 	movi	r3,1
10111e98:	e0bfff17 	ldw	r2,-4(fp)
10111e9c:	1884983a 	sll	r2,r3,r2
10111ea0:	1007883a 	mov	r3,r2
10111ea4:	e0bffd17 	ldw	r2,-12(fp)
10111ea8:	1884703a 	and	r2,r3,r2
10111eac:	1004c03a 	cmpne	r2,r2,zero
10111eb0:	10803fcc 	andi	r2,r2,255
}
10111eb4:	e037883a 	mov	sp,fp
10111eb8:	df000017 	ldw	fp,0(sp)
10111ebc:	dec00104 	addi	sp,sp,4
10111ec0:	f800283a 	ret

10111ec4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10111ec4:	defff504 	addi	sp,sp,-44
10111ec8:	dfc00a15 	stw	ra,40(sp)
10111ecc:	df000915 	stw	fp,36(sp)
10111ed0:	df000904 	addi	fp,sp,36
10111ed4:	e13ffc15 	stw	r4,-16(fp)
10111ed8:	e17ffd15 	stw	r5,-12(fp)
10111edc:	e1bffe15 	stw	r6,-8(fp)
10111ee0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10111ee4:	00bffa84 	movi	r2,-22
10111ee8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10111eec:	e0bffd17 	ldw	r2,-12(fp)
10111ef0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10111ef4:	e0bff817 	ldw	r2,-32(fp)
10111ef8:	10800808 	cmpgei	r2,r2,32
10111efc:	1000271e 	bne	r2,zero,10111f9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10111f00:	0005303a 	rdctl	r2,status
10111f04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111f08:	e0fffb17 	ldw	r3,-20(fp)
10111f0c:	00bfff84 	movi	r2,-2
10111f10:	1884703a 	and	r2,r3,r2
10111f14:	1001703a 	wrctl	status,r2
  
  return context;
10111f18:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10111f1c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10111f20:	00840474 	movhi	r2,4113
10111f24:	10989804 	addi	r2,r2,25184
10111f28:	e0fff817 	ldw	r3,-32(fp)
10111f2c:	180690fa 	slli	r3,r3,3
10111f30:	10c5883a 	add	r2,r2,r3
10111f34:	e0fffe17 	ldw	r3,-8(fp)
10111f38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10111f3c:	00840474 	movhi	r2,4113
10111f40:	10989804 	addi	r2,r2,25184
10111f44:	e0fff817 	ldw	r3,-32(fp)
10111f48:	180690fa 	slli	r3,r3,3
10111f4c:	10c5883a 	add	r2,r2,r3
10111f50:	10800104 	addi	r2,r2,4
10111f54:	e0ffff17 	ldw	r3,-4(fp)
10111f58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10111f5c:	e0bffe17 	ldw	r2,-8(fp)
10111f60:	10000526 	beq	r2,zero,10111f78 <alt_iic_isr_register+0xb4>
10111f64:	e0bff817 	ldw	r2,-32(fp)
10111f68:	100b883a 	mov	r5,r2
10111f6c:	e13ffc17 	ldw	r4,-16(fp)
10111f70:	0111d640 	call	10111d64 <alt_ic_irq_enable>
10111f74:	00000406 	br	10111f88 <alt_iic_isr_register+0xc4>
10111f78:	e0bff817 	ldw	r2,-32(fp)
10111f7c:	100b883a 	mov	r5,r2
10111f80:	e13ffc17 	ldw	r4,-16(fp)
10111f84:	0111dec0 	call	10111dec <alt_ic_irq_disable>
10111f88:	e0bff715 	stw	r2,-36(fp)
10111f8c:	e0bffa17 	ldw	r2,-24(fp)
10111f90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10111f94:	e0bff917 	ldw	r2,-28(fp)
10111f98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10111f9c:	e0bff717 	ldw	r2,-36(fp)
}
10111fa0:	e037883a 	mov	sp,fp
10111fa4:	dfc00117 	ldw	ra,4(sp)
10111fa8:	df000017 	ldw	fp,0(sp)
10111fac:	dec00204 	addi	sp,sp,8
10111fb0:	f800283a 	ret

10111fb4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10111fb4:	defff904 	addi	sp,sp,-28
10111fb8:	dfc00615 	stw	ra,24(sp)
10111fbc:	df000515 	stw	fp,20(sp)
10111fc0:	df000504 	addi	fp,sp,20
10111fc4:	e13ffc15 	stw	r4,-16(fp)
10111fc8:	e17ffd15 	stw	r5,-12(fp)
10111fcc:	e1bffe15 	stw	r6,-8(fp)
10111fd0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10111fd4:	e1bfff17 	ldw	r6,-4(fp)
10111fd8:	e17ffe17 	ldw	r5,-8(fp)
10111fdc:	e13ffd17 	ldw	r4,-12(fp)
10111fe0:	01101080 	call	10110108 <open>
10111fe4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10111fe8:	e0bffb17 	ldw	r2,-20(fp)
10111fec:	10001c16 	blt	r2,zero,10112060 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10111ff0:	00840474 	movhi	r2,4113
10111ff4:	108d0504 	addi	r2,r2,13332
10111ff8:	e0fffb17 	ldw	r3,-20(fp)
10111ffc:	18c00324 	muli	r3,r3,12
10112000:	10c5883a 	add	r2,r2,r3
10112004:	10c00017 	ldw	r3,0(r2)
10112008:	e0bffc17 	ldw	r2,-16(fp)
1011200c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10112010:	00840474 	movhi	r2,4113
10112014:	108d0504 	addi	r2,r2,13332
10112018:	e0fffb17 	ldw	r3,-20(fp)
1011201c:	18c00324 	muli	r3,r3,12
10112020:	10c5883a 	add	r2,r2,r3
10112024:	10800104 	addi	r2,r2,4
10112028:	10c00017 	ldw	r3,0(r2)
1011202c:	e0bffc17 	ldw	r2,-16(fp)
10112030:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10112034:	00840474 	movhi	r2,4113
10112038:	108d0504 	addi	r2,r2,13332
1011203c:	e0fffb17 	ldw	r3,-20(fp)
10112040:	18c00324 	muli	r3,r3,12
10112044:	10c5883a 	add	r2,r2,r3
10112048:	10800204 	addi	r2,r2,8
1011204c:	10c00017 	ldw	r3,0(r2)
10112050:	e0bffc17 	ldw	r2,-16(fp)
10112054:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10112058:	e13ffb17 	ldw	r4,-20(fp)
1011205c:	01103940 	call	10110394 <alt_release_fd>
  }
} 
10112060:	0001883a 	nop
10112064:	e037883a 	mov	sp,fp
10112068:	dfc00117 	ldw	ra,4(sp)
1011206c:	df000017 	ldw	fp,0(sp)
10112070:	dec00204 	addi	sp,sp,8
10112074:	f800283a 	ret

10112078 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10112078:	defffb04 	addi	sp,sp,-20
1011207c:	dfc00415 	stw	ra,16(sp)
10112080:	df000315 	stw	fp,12(sp)
10112084:	df000304 	addi	fp,sp,12
10112088:	e13ffd15 	stw	r4,-12(fp)
1011208c:	e17ffe15 	stw	r5,-8(fp)
10112090:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10112094:	01c07fc4 	movi	r7,511
10112098:	01800044 	movi	r6,1
1011209c:	e17ffd17 	ldw	r5,-12(fp)
101120a0:	01040474 	movhi	r4,4113
101120a4:	210d0804 	addi	r4,r4,13344
101120a8:	0111fb40 	call	10111fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
101120ac:	01c07fc4 	movi	r7,511
101120b0:	000d883a 	mov	r6,zero
101120b4:	e17ffe17 	ldw	r5,-8(fp)
101120b8:	01040474 	movhi	r4,4113
101120bc:	210d0504 	addi	r4,r4,13332
101120c0:	0111fb40 	call	10111fb4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
101120c4:	01c07fc4 	movi	r7,511
101120c8:	01800044 	movi	r6,1
101120cc:	e17fff17 	ldw	r5,-4(fp)
101120d0:	01040474 	movhi	r4,4113
101120d4:	210d0b04 	addi	r4,r4,13356
101120d8:	0111fb40 	call	10111fb4 <alt_open_fd>
}  
101120dc:	0001883a 	nop
101120e0:	e037883a 	mov	sp,fp
101120e4:	dfc00117 	ldw	ra,4(sp)
101120e8:	df000017 	ldw	fp,0(sp)
101120ec:	dec00204 	addi	sp,sp,8
101120f0:	f800283a 	ret

101120f4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
101120f4:	defffa04 	addi	sp,sp,-24
101120f8:	df000515 	stw	fp,20(sp)
101120fc:	df000504 	addi	fp,sp,20
10112100:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10112104:	0005303a 	rdctl	r2,status
10112108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011210c:	e0fffc17 	ldw	r3,-16(fp)
10112110:	00bfff84 	movi	r2,-2
10112114:	1884703a 	and	r2,r3,r2
10112118:	1001703a 	wrctl	status,r2
  
  return context;
1011211c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10112120:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10112124:	e0bfff17 	ldw	r2,-4(fp)
10112128:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1011212c:	e0bffd17 	ldw	r2,-12(fp)
10112130:	10800017 	ldw	r2,0(r2)
10112134:	e0fffd17 	ldw	r3,-12(fp)
10112138:	18c00117 	ldw	r3,4(r3)
1011213c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10112140:	e0bffd17 	ldw	r2,-12(fp)
10112144:	10800117 	ldw	r2,4(r2)
10112148:	e0fffd17 	ldw	r3,-12(fp)
1011214c:	18c00017 	ldw	r3,0(r3)
10112150:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10112154:	e0bffd17 	ldw	r2,-12(fp)
10112158:	e0fffd17 	ldw	r3,-12(fp)
1011215c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10112160:	e0bffd17 	ldw	r2,-12(fp)
10112164:	e0fffd17 	ldw	r3,-12(fp)
10112168:	10c00015 	stw	r3,0(r2)
1011216c:	e0bffb17 	ldw	r2,-20(fp)
10112170:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10112174:	e0bffe17 	ldw	r2,-8(fp)
10112178:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1011217c:	0001883a 	nop
10112180:	e037883a 	mov	sp,fp
10112184:	df000017 	ldw	fp,0(sp)
10112188:	dec00104 	addi	sp,sp,4
1011218c:	f800283a 	ret

10112190 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10112190:	defffb04 	addi	sp,sp,-20
10112194:	dfc00415 	stw	ra,16(sp)
10112198:	df000315 	stw	fp,12(sp)
1011219c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
101121a0:	d0a02017 	ldw	r2,-32640(gp)
101121a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
101121a8:	d0a70517 	ldw	r2,-25580(gp)
101121ac:	10800044 	addi	r2,r2,1
101121b0:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
101121b4:	00002e06 	br	10112270 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
101121b8:	e0bffd17 	ldw	r2,-12(fp)
101121bc:	10800017 	ldw	r2,0(r2)
101121c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
101121c4:	e0bffd17 	ldw	r2,-12(fp)
101121c8:	10800403 	ldbu	r2,16(r2)
101121cc:	10803fcc 	andi	r2,r2,255
101121d0:	10000426 	beq	r2,zero,101121e4 <alt_tick+0x54>
101121d4:	d0a70517 	ldw	r2,-25580(gp)
101121d8:	1000021e 	bne	r2,zero,101121e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
101121dc:	e0bffd17 	ldw	r2,-12(fp)
101121e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
101121e4:	e0bffd17 	ldw	r2,-12(fp)
101121e8:	10800217 	ldw	r2,8(r2)
101121ec:	d0e70517 	ldw	r3,-25580(gp)
101121f0:	18801d36 	bltu	r3,r2,10112268 <alt_tick+0xd8>
101121f4:	e0bffd17 	ldw	r2,-12(fp)
101121f8:	10800403 	ldbu	r2,16(r2)
101121fc:	10803fcc 	andi	r2,r2,255
10112200:	1000191e 	bne	r2,zero,10112268 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10112204:	e0bffd17 	ldw	r2,-12(fp)
10112208:	10800317 	ldw	r2,12(r2)
1011220c:	e0fffd17 	ldw	r3,-12(fp)
10112210:	18c00517 	ldw	r3,20(r3)
10112214:	1809883a 	mov	r4,r3
10112218:	103ee83a 	callr	r2
1011221c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10112220:	e0bfff17 	ldw	r2,-4(fp)
10112224:	1000031e 	bne	r2,zero,10112234 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10112228:	e13ffd17 	ldw	r4,-12(fp)
1011222c:	01120f40 	call	101120f4 <alt_alarm_stop>
10112230:	00000d06 	br	10112268 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10112234:	e0bffd17 	ldw	r2,-12(fp)
10112238:	10c00217 	ldw	r3,8(r2)
1011223c:	e0bfff17 	ldw	r2,-4(fp)
10112240:	1887883a 	add	r3,r3,r2
10112244:	e0bffd17 	ldw	r2,-12(fp)
10112248:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1011224c:	e0bffd17 	ldw	r2,-12(fp)
10112250:	10c00217 	ldw	r3,8(r2)
10112254:	d0a70517 	ldw	r2,-25580(gp)
10112258:	1880032e 	bgeu	r3,r2,10112268 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1011225c:	e0bffd17 	ldw	r2,-12(fp)
10112260:	00c00044 	movi	r3,1
10112264:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10112268:	e0bffe17 	ldw	r2,-8(fp)
1011226c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10112270:	e0fffd17 	ldw	r3,-12(fp)
10112274:	d0a02004 	addi	r2,gp,-32640
10112278:	18bfcf1e 	bne	r3,r2,101121b8 <__alt_data_end+0xffff21b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1011227c:	0001883a 	nop
}
10112280:	0001883a 	nop
10112284:	e037883a 	mov	sp,fp
10112288:	dfc00117 	ldw	ra,4(sp)
1011228c:	df000017 	ldw	fp,0(sp)
10112290:	dec00204 	addi	sp,sp,8
10112294:	f800283a 	ret

10112298 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10112298:	deffff04 	addi	sp,sp,-4
1011229c:	df000015 	stw	fp,0(sp)
101122a0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
101122a4:	000170fa 	wrctl	ienable,zero
}
101122a8:	0001883a 	nop
101122ac:	e037883a 	mov	sp,fp
101122b0:	df000017 	ldw	fp,0(sp)
101122b4:	dec00104 	addi	sp,sp,4
101122b8:	f800283a 	ret

101122bc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
101122bc:	defffb04 	addi	sp,sp,-20
101122c0:	df000415 	stw	fp,16(sp)
101122c4:	df000404 	addi	fp,sp,16
101122c8:	e13ffe15 	stw	r4,-8(fp)
101122cc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
101122d0:	e0bfff17 	ldw	r2,-4(fp)
101122d4:	10840070 	cmpltui	r2,r2,4097
101122d8:	1000021e 	bne	r2,zero,101122e4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
101122dc:	00840004 	movi	r2,4096
101122e0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
101122e4:	e0fffe17 	ldw	r3,-8(fp)
101122e8:	e0bfff17 	ldw	r2,-4(fp)
101122ec:	1885883a 	add	r2,r3,r2
101122f0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
101122f4:	e0bffe17 	ldw	r2,-8(fp)
101122f8:	e0bffc15 	stw	r2,-16(fp)
101122fc:	00000506 	br	10112314 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10112300:	e0bffc17 	ldw	r2,-16(fp)
10112304:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10112308:	e0bffc17 	ldw	r2,-16(fp)
1011230c:	10800804 	addi	r2,r2,32
10112310:	e0bffc15 	stw	r2,-16(fp)
10112314:	e0fffc17 	ldw	r3,-16(fp)
10112318:	e0bffd17 	ldw	r2,-12(fp)
1011231c:	18bff836 	bltu	r3,r2,10112300 <__alt_data_end+0xffff2300>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10112320:	e0bffe17 	ldw	r2,-8(fp)
10112324:	108007cc 	andi	r2,r2,31
10112328:	10000226 	beq	r2,zero,10112334 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
1011232c:	e0bffc17 	ldw	r2,-16(fp)
10112330:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10112334:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10112338:	0001883a 	nop
1011233c:	e037883a 	mov	sp,fp
10112340:	df000017 	ldw	fp,0(sp)
10112344:	dec00104 	addi	sp,sp,4
10112348:	f800283a 	ret

1011234c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1011234c:	defffe04 	addi	sp,sp,-8
10112350:	df000115 	stw	fp,4(sp)
10112354:	df000104 	addi	fp,sp,4
10112358:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1011235c:	e0bfff17 	ldw	r2,-4(fp)
10112360:	10bffe84 	addi	r2,r2,-6
10112364:	10c00428 	cmpgeui	r3,r2,16
10112368:	18001a1e 	bne	r3,zero,101123d4 <alt_exception_cause_generated_bad_addr+0x88>
1011236c:	100690ba 	slli	r3,r2,2
10112370:	00840474 	movhi	r2,4113
10112374:	1088e104 	addi	r2,r2,9092
10112378:	1885883a 	add	r2,r3,r2
1011237c:	10800017 	ldw	r2,0(r2)
10112380:	1000683a 	jmp	r2
10112384:	101123c4 	addi	zero,r2,17551
10112388:	101123c4 	addi	zero,r2,17551
1011238c:	101123d4 	ori	zero,r2,17551
10112390:	101123d4 	ori	zero,r2,17551
10112394:	101123d4 	ori	zero,r2,17551
10112398:	101123c4 	addi	zero,r2,17551
1011239c:	101123cc 	andi	zero,r2,17551
101123a0:	101123d4 	ori	zero,r2,17551
101123a4:	101123c4 	addi	zero,r2,17551
101123a8:	101123c4 	addi	zero,r2,17551
101123ac:	101123d4 	ori	zero,r2,17551
101123b0:	101123c4 	addi	zero,r2,17551
101123b4:	101123cc 	andi	zero,r2,17551
101123b8:	101123d4 	ori	zero,r2,17551
101123bc:	101123d4 	ori	zero,r2,17551
101123c0:	101123c4 	addi	zero,r2,17551
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
101123c4:	00800044 	movi	r2,1
101123c8:	00000306 	br	101123d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
101123cc:	0005883a 	mov	r2,zero
101123d0:	00000106 	br	101123d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
101123d4:	0005883a 	mov	r2,zero
  }
}
101123d8:	e037883a 	mov	sp,fp
101123dc:	df000017 	ldw	fp,0(sp)
101123e0:	dec00104 	addi	sp,sp,4
101123e4:	f800283a 	ret

101123e8 <atexit>:
101123e8:	200b883a 	mov	r5,r4
101123ec:	000f883a 	mov	r7,zero
101123f0:	000d883a 	mov	r6,zero
101123f4:	0009883a 	mov	r4,zero
101123f8:	01124b01 	jmpi	101124b0 <__register_exitproc>

101123fc <exit>:
101123fc:	defffe04 	addi	sp,sp,-8
10112400:	000b883a 	mov	r5,zero
10112404:	dc000015 	stw	r16,0(sp)
10112408:	dfc00115 	stw	ra,4(sp)
1011240c:	2021883a 	mov	r16,r4
10112410:	01125c80 	call	101125c8 <__call_exitprocs>
10112414:	00840474 	movhi	r2,4113
10112418:	10918704 	addi	r2,r2,17948
1011241c:	11000017 	ldw	r4,0(r2)
10112420:	20800f17 	ldw	r2,60(r4)
10112424:	10000126 	beq	r2,zero,1011242c <exit+0x30>
10112428:	103ee83a 	callr	r2
1011242c:	8009883a 	mov	r4,r16
10112430:	01127480 	call	10112748 <_exit>

10112434 <memcmp>:
10112434:	01c000c4 	movi	r7,3
10112438:	3980192e 	bgeu	r7,r6,101124a0 <memcmp+0x6c>
1011243c:	2144b03a 	or	r2,r4,r5
10112440:	11c4703a 	and	r2,r2,r7
10112444:	10000f26 	beq	r2,zero,10112484 <memcmp+0x50>
10112448:	20800003 	ldbu	r2,0(r4)
1011244c:	28c00003 	ldbu	r3,0(r5)
10112450:	10c0151e 	bne	r2,r3,101124a8 <memcmp+0x74>
10112454:	31bfff84 	addi	r6,r6,-2
10112458:	01ffffc4 	movi	r7,-1
1011245c:	00000406 	br	10112470 <memcmp+0x3c>
10112460:	20800003 	ldbu	r2,0(r4)
10112464:	28c00003 	ldbu	r3,0(r5)
10112468:	31bfffc4 	addi	r6,r6,-1
1011246c:	10c00e1e 	bne	r2,r3,101124a8 <memcmp+0x74>
10112470:	21000044 	addi	r4,r4,1
10112474:	29400044 	addi	r5,r5,1
10112478:	31fff91e 	bne	r6,r7,10112460 <__alt_data_end+0xffff2460>
1011247c:	0005883a 	mov	r2,zero
10112480:	f800283a 	ret
10112484:	20c00017 	ldw	r3,0(r4)
10112488:	28800017 	ldw	r2,0(r5)
1011248c:	18bfee1e 	bne	r3,r2,10112448 <__alt_data_end+0xffff2448>
10112490:	31bfff04 	addi	r6,r6,-4
10112494:	21000104 	addi	r4,r4,4
10112498:	29400104 	addi	r5,r5,4
1011249c:	39bff936 	bltu	r7,r6,10112484 <__alt_data_end+0xffff2484>
101124a0:	303fe91e 	bne	r6,zero,10112448 <__alt_data_end+0xffff2448>
101124a4:	003ff506 	br	1011247c <__alt_data_end+0xffff247c>
101124a8:	10c5c83a 	sub	r2,r2,r3
101124ac:	f800283a 	ret

101124b0 <__register_exitproc>:
101124b0:	defffa04 	addi	sp,sp,-24
101124b4:	dc000315 	stw	r16,12(sp)
101124b8:	04040474 	movhi	r16,4113
101124bc:	84118704 	addi	r16,r16,17948
101124c0:	80c00017 	ldw	r3,0(r16)
101124c4:	dc400415 	stw	r17,16(sp)
101124c8:	dfc00515 	stw	ra,20(sp)
101124cc:	18805217 	ldw	r2,328(r3)
101124d0:	2023883a 	mov	r17,r4
101124d4:	10003726 	beq	r2,zero,101125b4 <__register_exitproc+0x104>
101124d8:	10c00117 	ldw	r3,4(r2)
101124dc:	010007c4 	movi	r4,31
101124e0:	20c00e16 	blt	r4,r3,1011251c <__register_exitproc+0x6c>
101124e4:	1a000044 	addi	r8,r3,1
101124e8:	8800221e 	bne	r17,zero,10112574 <__register_exitproc+0xc4>
101124ec:	18c00084 	addi	r3,r3,2
101124f0:	18c7883a 	add	r3,r3,r3
101124f4:	18c7883a 	add	r3,r3,r3
101124f8:	12000115 	stw	r8,4(r2)
101124fc:	10c7883a 	add	r3,r2,r3
10112500:	19400015 	stw	r5,0(r3)
10112504:	0005883a 	mov	r2,zero
10112508:	dfc00517 	ldw	ra,20(sp)
1011250c:	dc400417 	ldw	r17,16(sp)
10112510:	dc000317 	ldw	r16,12(sp)
10112514:	dec00604 	addi	sp,sp,24
10112518:	f800283a 	ret
1011251c:	00800034 	movhi	r2,0
10112520:	10800004 	addi	r2,r2,0
10112524:	10002626 	beq	r2,zero,101125c0 <__register_exitproc+0x110>
10112528:	01006404 	movi	r4,400
1011252c:	d9400015 	stw	r5,0(sp)
10112530:	d9800115 	stw	r6,4(sp)
10112534:	d9c00215 	stw	r7,8(sp)
10112538:	00000000 	call	10000000 <__reset-0x100000>
1011253c:	d9400017 	ldw	r5,0(sp)
10112540:	d9800117 	ldw	r6,4(sp)
10112544:	d9c00217 	ldw	r7,8(sp)
10112548:	10001d26 	beq	r2,zero,101125c0 <__register_exitproc+0x110>
1011254c:	81000017 	ldw	r4,0(r16)
10112550:	10000115 	stw	zero,4(r2)
10112554:	02000044 	movi	r8,1
10112558:	22405217 	ldw	r9,328(r4)
1011255c:	0007883a 	mov	r3,zero
10112560:	12400015 	stw	r9,0(r2)
10112564:	20805215 	stw	r2,328(r4)
10112568:	10006215 	stw	zero,392(r2)
1011256c:	10006315 	stw	zero,396(r2)
10112570:	883fde26 	beq	r17,zero,101124ec <__alt_data_end+0xffff24ec>
10112574:	18c9883a 	add	r4,r3,r3
10112578:	2109883a 	add	r4,r4,r4
1011257c:	1109883a 	add	r4,r2,r4
10112580:	21802215 	stw	r6,136(r4)
10112584:	01800044 	movi	r6,1
10112588:	12406217 	ldw	r9,392(r2)
1011258c:	30cc983a 	sll	r6,r6,r3
10112590:	4992b03a 	or	r9,r9,r6
10112594:	12406215 	stw	r9,392(r2)
10112598:	21c04215 	stw	r7,264(r4)
1011259c:	01000084 	movi	r4,2
101125a0:	893fd21e 	bne	r17,r4,101124ec <__alt_data_end+0xffff24ec>
101125a4:	11006317 	ldw	r4,396(r2)
101125a8:	218cb03a 	or	r6,r4,r6
101125ac:	11806315 	stw	r6,396(r2)
101125b0:	003fce06 	br	101124ec <__alt_data_end+0xffff24ec>
101125b4:	18805304 	addi	r2,r3,332
101125b8:	18805215 	stw	r2,328(r3)
101125bc:	003fc606 	br	101124d8 <__alt_data_end+0xffff24d8>
101125c0:	00bfffc4 	movi	r2,-1
101125c4:	003fd006 	br	10112508 <__alt_data_end+0xffff2508>

101125c8 <__call_exitprocs>:
101125c8:	defff504 	addi	sp,sp,-44
101125cc:	df000915 	stw	fp,36(sp)
101125d0:	dd400615 	stw	r21,24(sp)
101125d4:	dc800315 	stw	r18,12(sp)
101125d8:	dfc00a15 	stw	ra,40(sp)
101125dc:	ddc00815 	stw	r23,32(sp)
101125e0:	dd800715 	stw	r22,28(sp)
101125e4:	dd000515 	stw	r20,20(sp)
101125e8:	dcc00415 	stw	r19,16(sp)
101125ec:	dc400215 	stw	r17,8(sp)
101125f0:	dc000115 	stw	r16,4(sp)
101125f4:	d9000015 	stw	r4,0(sp)
101125f8:	2839883a 	mov	fp,r5
101125fc:	04800044 	movi	r18,1
10112600:	057fffc4 	movi	r21,-1
10112604:	00840474 	movhi	r2,4113
10112608:	10918704 	addi	r2,r2,17948
1011260c:	12000017 	ldw	r8,0(r2)
10112610:	45005217 	ldw	r20,328(r8)
10112614:	44c05204 	addi	r19,r8,328
10112618:	a0001c26 	beq	r20,zero,1011268c <__call_exitprocs+0xc4>
1011261c:	a0800117 	ldw	r2,4(r20)
10112620:	15ffffc4 	addi	r23,r2,-1
10112624:	b8000d16 	blt	r23,zero,1011265c <__call_exitprocs+0x94>
10112628:	14000044 	addi	r16,r2,1
1011262c:	8421883a 	add	r16,r16,r16
10112630:	8421883a 	add	r16,r16,r16
10112634:	84402004 	addi	r17,r16,128
10112638:	a463883a 	add	r17,r20,r17
1011263c:	a421883a 	add	r16,r20,r16
10112640:	e0001e26 	beq	fp,zero,101126bc <__call_exitprocs+0xf4>
10112644:	80804017 	ldw	r2,256(r16)
10112648:	e0801c26 	beq	fp,r2,101126bc <__call_exitprocs+0xf4>
1011264c:	bdffffc4 	addi	r23,r23,-1
10112650:	843fff04 	addi	r16,r16,-4
10112654:	8c7fff04 	addi	r17,r17,-4
10112658:	bd7ff91e 	bne	r23,r21,10112640 <__alt_data_end+0xffff2640>
1011265c:	00800034 	movhi	r2,0
10112660:	10800004 	addi	r2,r2,0
10112664:	10000926 	beq	r2,zero,1011268c <__call_exitprocs+0xc4>
10112668:	a0800117 	ldw	r2,4(r20)
1011266c:	1000301e 	bne	r2,zero,10112730 <__call_exitprocs+0x168>
10112670:	a0800017 	ldw	r2,0(r20)
10112674:	10003226 	beq	r2,zero,10112740 <__call_exitprocs+0x178>
10112678:	a009883a 	mov	r4,r20
1011267c:	98800015 	stw	r2,0(r19)
10112680:	00000000 	call	10000000 <__reset-0x100000>
10112684:	9d000017 	ldw	r20,0(r19)
10112688:	a03fe41e 	bne	r20,zero,1011261c <__alt_data_end+0xffff261c>
1011268c:	dfc00a17 	ldw	ra,40(sp)
10112690:	df000917 	ldw	fp,36(sp)
10112694:	ddc00817 	ldw	r23,32(sp)
10112698:	dd800717 	ldw	r22,28(sp)
1011269c:	dd400617 	ldw	r21,24(sp)
101126a0:	dd000517 	ldw	r20,20(sp)
101126a4:	dcc00417 	ldw	r19,16(sp)
101126a8:	dc800317 	ldw	r18,12(sp)
101126ac:	dc400217 	ldw	r17,8(sp)
101126b0:	dc000117 	ldw	r16,4(sp)
101126b4:	dec00b04 	addi	sp,sp,44
101126b8:	f800283a 	ret
101126bc:	a0800117 	ldw	r2,4(r20)
101126c0:	80c00017 	ldw	r3,0(r16)
101126c4:	10bfffc4 	addi	r2,r2,-1
101126c8:	15c01426 	beq	r2,r23,1011271c <__call_exitprocs+0x154>
101126cc:	80000015 	stw	zero,0(r16)
101126d0:	183fde26 	beq	r3,zero,1011264c <__alt_data_end+0xffff264c>
101126d4:	95c8983a 	sll	r4,r18,r23
101126d8:	a0806217 	ldw	r2,392(r20)
101126dc:	a5800117 	ldw	r22,4(r20)
101126e0:	2084703a 	and	r2,r4,r2
101126e4:	10000b26 	beq	r2,zero,10112714 <__call_exitprocs+0x14c>
101126e8:	a0806317 	ldw	r2,396(r20)
101126ec:	2088703a 	and	r4,r4,r2
101126f0:	20000c1e 	bne	r4,zero,10112724 <__call_exitprocs+0x15c>
101126f4:	89400017 	ldw	r5,0(r17)
101126f8:	d9000017 	ldw	r4,0(sp)
101126fc:	183ee83a 	callr	r3
10112700:	a0800117 	ldw	r2,4(r20)
10112704:	15bfbf1e 	bne	r2,r22,10112604 <__alt_data_end+0xffff2604>
10112708:	98800017 	ldw	r2,0(r19)
1011270c:	153fcf26 	beq	r2,r20,1011264c <__alt_data_end+0xffff264c>
10112710:	003fbc06 	br	10112604 <__alt_data_end+0xffff2604>
10112714:	183ee83a 	callr	r3
10112718:	003ff906 	br	10112700 <__alt_data_end+0xffff2700>
1011271c:	a5c00115 	stw	r23,4(r20)
10112720:	003feb06 	br	101126d0 <__alt_data_end+0xffff26d0>
10112724:	89000017 	ldw	r4,0(r17)
10112728:	183ee83a 	callr	r3
1011272c:	003ff406 	br	10112700 <__alt_data_end+0xffff2700>
10112730:	a0800017 	ldw	r2,0(r20)
10112734:	a027883a 	mov	r19,r20
10112738:	1029883a 	mov	r20,r2
1011273c:	003fb606 	br	10112618 <__alt_data_end+0xffff2618>
10112740:	0005883a 	mov	r2,zero
10112744:	003ffb06 	br	10112734 <__alt_data_end+0xffff2734>

10112748 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10112748:	defffd04 	addi	sp,sp,-12
1011274c:	df000215 	stw	fp,8(sp)
10112750:	df000204 	addi	fp,sp,8
10112754:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10112758:	0001883a 	nop
1011275c:	e0bfff17 	ldw	r2,-4(fp)
10112760:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10112764:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10112768:	10000226 	beq	r2,zero,10112774 <_exit+0x2c>
    ALT_SIM_FAIL();
1011276c:	002af070 	cmpltui	zero,zero,43969
10112770:	00000106 	br	10112778 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10112774:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10112778:	003fff06 	br	10112778 <__alt_data_end+0xffff2778>
