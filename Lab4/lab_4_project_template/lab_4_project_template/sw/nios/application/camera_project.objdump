
camera_project.elf:     file format elf32-littlenios2
camera_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00011390 memsz 0x00011390 flags r-x
    LOAD off    0x000123b0 vaddr 0x101113b0 paddr 0x10112f14 align 2**12
         filesz 0x00001b64 memsz 0x00001b64 flags rw-
    LOAD off    0x00014a78 vaddr 0x10114a78 paddr 0x10114a78 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010d90  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003dc  10110fd4  10110fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b64  101113b0  10112f14  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10114a78  10114a78  00014a78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10114bd8  10114bd8  00013f14  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013f14  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001168  00000000  00000000  00013f38  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c11d  00000000  00000000  000150a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000aec4  00000000  00000000  000411bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d80c  00000000  00000000  0004c081  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028c8  00000000  00000000  00059890  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000040cc  00000000  00000000  0005c158  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001897c  00000000  00000000  00060224  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00078ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a58  00000000  00000000  00078bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007e042  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007e045  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007e051  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007e052  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007e053  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007e05e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007e069  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0007e074  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000072  00000000  00000000  0007e07e  2**0
                  CONTENTS, READONLY
 26 .jdi          0000596f  00000000  00000000  0007e0f0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002896c1  00000000  00000000  00083a5f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10110fd4 l    d  .rodata	00000000 .rodata
101113b0 l    d  .rwdata	00000000 .rwdata
10114a78 l    d  .bss	00000000 .bss
10114bd8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/hugom/OneDrive/Documents/Cours/Embedded_sys/Lab4/lab_4_project_template/lab_4_project_template/sw/nios/camera_project_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008a4 l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000c8 write_frame_line_blank_reg
101005f4 l     F .text	000000cc write_line_line_blank_reg
101006c0 l     F .text	000000c8 write_line_frame_blank_reg
10100788 l     F .text	0000002c read_frame_width_reg
101007b4 l     F .text	00000030 read_frame_height_reg
101007e4 l     F .text	00000030 read_frame_frame_blank_reg
10100814 l     F .text	00000030 read_frame_line_blank_reg
10100844 l     F .text	00000030 read_line_line_blank_reg
10100874 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 demo_256_MB_memory_access.c
10112e84 l     O .rwdata	00000005 __func__.3036
00000000 l    df *ABS*	00000000 demo_cmos_sensor_output_generator.c
00000000 l    df *ABS*	00000000 main_with_cmos_generator.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 impure.c
101113b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
10102034 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
101110ee l     O .rodata	00000010 zeroes.4404
101045e0 l     F .text	000000bc __sbprintf
101110fe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
101048bc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
101063ec l     F .text	00000008 __fp_unlock
10106400 l     F .text	0000019c __sinit.part.1
1010659c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10111bfc l     O .rwdata	00000020 lc_ctype_charset
10111bdc l     O .rwdata	00000020 lc_message_charset
10111c1c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
1011112c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
101086f8 l     F .text	000000fc __sprint_r.part.0
10111260 l     O .rodata	00000010 blanks.4348
10111250 l     O .rodata	00000010 zeroes.4349
10109c84 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010e298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e3a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e404 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e510 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1010e5f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010e75c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010e848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010ea1c l     F .text	0000003c alt_get_errno
1010ea58 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010ec70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112ebc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1010eebc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010eff0 l     F .text	00000034 alt_dev_reg
10111dfc l     O .rwdata	00001060 jtag_uart_0
10112e5c l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f2d4 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010f4e0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10112ec0 l     O .rwdata	00000009 hcinfo.2538
10112ecc l     O .rwdata	0000000a hcinfo.2551
10112ed8 l     O .rwdata	00000009 hcinfo.2560
10112ee4 l     O .rwdata	0000000a hcinfo.2573
10112ef0 l     O .rwdata	0000000a hcinfo.2586
10112efc l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10110110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110840 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
10114aac g     O .bss	00000004 alt_instruction_exception_handler
10108034 g     F .text	00000074 _mprec_log10
10108120 g     F .text	0000008c __any_on
10106df4 g     F .text	00000054 _isatty_r
10111138 g     O .rodata	00000028 __mprec_tinytens
1010e958 g     F .text	0000007c alt_main
10114ad8 g     O .bss	00000100 alt_irq
10106f24 g     F .text	00000060 _lseek_r
10112f14 g       *ABS*	00000000 __flash_rwdata_start
1010678c g     F .text	000000ac __sflags
1010cdc4 g     F .text	00000088 .hidden __eqdf2
10114bd8 g       *ABS*	00000000 __alt_heap_start
10100ce8 g     F .text	00000084 main3
10108524 g     F .text	0000005c _kill_r
10101ff8 g     F .text	0000003c printf
1010ade4 g     F .text	0000009c _wcrtomb_r
101082ec g     F .text	00000084 _signal_r
10102350 g     F .text	0000005c __sseek
1010673c g     F .text	00000010 __sinit
1010ac8c g     F .text	00000140 __swbuf_r
10106e48 g     F .text	0000007c _setlocale_r
101065a4 g     F .text	00000068 __sfmoreglue
1010e9f8 g     F .text	00000024 __malloc_unlock
1010fb18 g     F .text	0000011c alt_hostfs_open
1010a5cc g     F .text	0000015c memmove
10106724 g     F .text	00000018 _cleanup
101071b0 g     F .text	000000a8 _Balloc
1010ce4c g     F .text	000000dc .hidden __gtdf2
10110b24 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000001c __reset
10100c64 g     F .text	00000084 main2
10100020 g       *ABS*	00000000 __flash_exceptions_start
1010141c g     F .text	0000005c _fstat_r
10114a78 g     O .bss	00000004 errno
101022cc g     F .text	00000008 __seofread
10114a98 g     O .bss	00000004 alt_argv
1011ae84 g       *ABS*	00000000 _gp
1010e4f0 g     F .text	00000020 getpid
10111c7c g     O .rwdata	00000180 alt_fd_list
1010fd50 g     F .text	00000068 alt_hostfs_seek
101102b0 g     F .text	00000090 alt_find_dev
10107068 g     F .text	00000148 memcpy
101063f4 g     F .text	0000000c _cleanup_r
1010e0b0 g     F .text	000000dc .hidden __floatsidf
10110448 g     F .text	00000080 alt_fs_reg
10110904 g     F .text	0000007c alt_io_redirect
1010cf28 g     F .text	000000f4 .hidden __ltdf2
10110fd4 g       *ABS*	00000000 __DTOR_END__
10110bd8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010820c g     F .text	00000074 __fpclassifyd
10107f90 g     F .text	000000a4 __ratio
10109c68 g     F .text	0000001c __vfiprintf_internal
1010f6d8 g     F .text	0000021c altera_avalon_jtag_uart_read
10101fc8 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009cc g     F .text	00000108 cmos_sensor_output_generator_configure
1010bb74 g     F .text	00000064 .hidden __udivsi3
1010e54c g     F .text	000000a4 isatty
10108370 g     F .text	000000bc _raise_r
10100d6c g     F .text	00000068 __assert_func
10111188 g     O .rodata	000000c8 __mprec_tens
10106ec4 g     F .text	0000000c __locale_charset
10110b48 g     F .text	00000090 alt_icache_flush
10114a84 g     O .bss	00000004 __malloc_top_pad
10108580 g     F .text	00000004 _getpid_r
10112e9c g     O .rwdata	00000004 __mb_cur_max
10106ef4 g     F .text	0000000c _localeconv_r
1010a110 g     F .text	000004bc __sfvwrite_r
101075bc g     F .text	0000003c __i2b
1010842c g     F .text	000000a8 __sigtramp_r
10102224 g     F .text	00000054 _sbrk_r
1010fc78 g     F .text	0000006c alt_hostfs_read
101081ac g     F .text	00000060 _read_r
10112eb4 g     O .rwdata	00000004 alt_max_fd
10109e04 g     F .text	000000f0 _fclose_r
101063bc g     F .text	00000030 fflush
10114a80 g     O .bss	00000004 __malloc_max_sbrked_mem
1010bc30 g     F .text	000008ac .hidden __adddf3
10107d38 g     F .text	0000010c __b2d
1010b544 g     F .text	00000538 .hidden __umoddi3
1010e884 g     F .text	000000d4 lseek
10112e8c g     O .rwdata	00000004 _global_impure_ptr
1010a728 g     F .text	00000564 _realloc_r
10114bd8 g       *ABS*	00000000 __bss_end
10110750 g     F .text	000000f0 alt_iic_isr_register
10110a1c g     F .text	00000108 alt_tick
1010afcc g     F .text	00000578 .hidden __udivdi3
1010a06c g     F .text	00000024 _fputwc_r
10111160 g     O .rodata	00000028 __mprec_bigtens
101073a0 g     F .text	00000104 __s2b
101048a4 g     F .text	00000018 abort
1010e18c g     F .text	000000a8 .hidden __floatunsidf
10107a78 g     F .text	00000060 __mcmp
1010675c g     F .text	00000018 __fp_lock_all
10110704 g     F .text	0000004c alt_ic_irq_enabled
10110980 g     F .text	0000009c alt_alarm_stop
10100b0c g     F .text	00000038 cmos_sensor_output_generator_stop
10114aa0 g     O .bss	00000004 alt_irq_active
10100fbc g     F .text	00000444 _fseeko_r
1010fc34 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10111c54 g     O .rwdata	00000028 alt_dev_null
101100c8 g     F .text	00000048 alt_dcache_flush_all
101074a4 g     F .text	00000068 __hi0bits
1010e030 g     F .text	00000080 .hidden __fixdfsi
10100ad4 g     F .text	00000038 cmos_sensor_output_generator_start
10112f14 g       *ABS*	00000000 __ram_rwdata_end
10112eac g     O .rwdata	00000008 alt_dev_list
1010eef8 g     F .text	000000f8 write
101113b0 g       *ABS*	00000000 __ram_rodata_end
1010e440 g     F .text	000000b0 fstat
10100f78 g     F .text	00000024 fprintf
1010e62c g     F .text	00000130 kill
1010cf28 g     F .text	000000f4 .hidden __ledf2
101077f0 g     F .text	00000140 __pow5mult
10114a90 g     O .bss	00000004 __nlocale_changed
1010880c g     F .text	0000145c ___vfiprintf_internal_r
1010bbd8 g     F .text	00000058 .hidden __umodsi3
10114bd8 g       *ABS*	00000000 end
10101400 g     F .text	0000001c fseeko
10100fa0 g     F .text	0000001c fseek
1010f214 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10110fd4 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010e234 g     F .text	00000064 .hidden __clzsi2
1010f8f4 g     F .text	00000224 altera_avalon_jtag_uart_write
1010674c g     F .text	00000004 __sfp_lock_acquire
10106f84 g     F .text	000000e4 memchr
101023cc g     F .text	000021f8 ___vfprintf_internal_r
1010695c g     F .text	00000310 _free_r
101008d8 g     F .text	00000078 cmos_sensor_output_generator_inst
10106ed0 g     F .text	00000010 __locale_mb_cur_max
10110e54 g     F .text	00000180 __call_exitprocs
10114a8c g     O .bss	00000004 __mlocale_changed
10112e94 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10114aa4 g     O .bss	00000004 _alt_tick_rate
10107930 g     F .text	00000148 __lshift
10114aa8 g     O .bss	00000004 _alt_nticks
101084e8 g     F .text	00000018 signal
1010ecac g     F .text	000000fc read
1010f05c g     F .text	00000054 alt_sys_init
10101f68 g     F .text	00000060 _open_r
10110d3c g     F .text	00000118 __register_exitproc
101075f8 g     F .text	000001f8 __multiply
1010f580 g     F .text	00000068 altera_avalon_jtag_uart_close
101113b0 g       *ABS*	00000000 __ram_rwdata_start
10110fd4 g       *ABS*	00000000 __ram_rodata_start
10114ab0 g     O .bss	00000028 __malloc_current_mallinfo
10107e44 g     F .text	0000014c __d2b
1010f0b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101104c8 g     F .text	000000a4 alt_get_fd
10104850 g     F .text	00000054 _close_r
10110cc0 g     F .text	0000007c memcmp
1010f170 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10114bd8 g       *ABS*	00000000 __alt_stack_base
1010f1c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
101046fc g     F .text	00000154 __swsetup_r
1010c4dc g     F .text	000008e8 .hidden __divdf3
1010660c g     F .text	00000118 __sfp
101080a8 g     F .text	00000078 __copybits
101117d4 g     O .rwdata	00000408 __malloc_av_
10106758 g     F .text	00000004 __sinit_lock_release
1010d01c g     F .text	00000718 .hidden __muldf3
10102278 g     F .text	00000054 __sread
10110340 g     F .text	00000108 alt_find_file
1011014c g     F .text	000000a4 alt_dev_llist_insert
1010e9d4 g     F .text	00000024 __malloc_lock
10100f50 g     F .text	00000028 _fprintf_r
1010ee0c g     F .text	000000b0 sbrk
10106360 g     F .text	0000005c _fflush_r
10109d40 g     F .text	000000c4 _calloc_r
10100f38 g     F .text	00000018 fopen
10114a78 g       *ABS*	00000000 __bss_start
10101e40 g     F .text	00000128 memset
10100b44 g     F .text	00000120 main
10114a9c g     O .bss	00000004 alt_envp
10114a7c g     O .bss	00000004 __malloc_max_total_mem
1010f110 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010adcc g     F .text	00000018 __swbuf
101023ac g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10109ef4 g     F .text	00000014 fclose
10104abc g     F .text	00001688 _dtoa_r
10101634 g     F .text	0000080c _malloc_r
1010af40 g     F .text	00000030 __ascii_wctomb
10112eb8 g     O .rwdata	00000004 alt_errno
10100de8 g     F .text	00000020 _fiprintf_r
10108500 g     F .text	00000010 _init_signal
10106c6c g     F .text	000000c4 _fwalk
1010ba7c g     F .text	00000084 .hidden __divsi3
10106838 g     F .text	00000124 _malloc_trim_r
10110fd4 g       *ABS*	00000000 __CTOR_END__
10108584 g     F .text	000000dc strcmp
10110fd4 g       *ABS*	00000000 __flash_rodata_start
10110fd4 g       *ABS*	00000000 __DTOR_LIST__
1010cdc4 g     F .text	00000088 .hidden __nedf2
1010f024 g     F .text	00000038 alt_irq_init
1010eda8 g     F .text	00000064 alt_release_fd
10111270 g     O .rodata	00000100 .hidden __clz_tab
10114a88 g     O .bss	00000004 _PathLocale
10110c74 g     F .text	00000014 atexit
1010469c g     F .text	00000060 _write_r
10106f00 g     F .text	00000018 setlocale
10112e90 g     O .rwdata	00000004 _impure_ptr
10114a94 g     O .bss	00000004 alt_argc
10106144 g     F .text	0000021c __sflush_r
10110250 g     F .text	00000060 _do_dtors
10106eec g     F .text	00000008 __locale_cjk_lang
10100f9c g     F .text	00000004 _fseek_r
10102050 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10107cd4 g     F .text	00000064 __ulp
10106774 g     F .text	00000018 __fp_unlock_all
10112ea4 g     O .rwdata	00000008 alt_fs_list
1010fce4 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10106f18 g     F .text	0000000c localeconv
101105a0 g     F .text	00000050 alt_ic_isr_register
10112f14 g       *ABS*	00000000 _edata
10114bd8 g       *ABS*	00000000 _end
10109f08 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100950 g     F .text	0000007c cmos_sensor_output_generator_init
1010f5e8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10110678 g     F .text	0000008c alt_ic_irq_disable
101022d4 g     F .text	0000007c __swrite
10112e98 g     O .rwdata	00000004 __malloc_trim_threshold
10106ee0 g     F .text	0000000c __locale_msgcharset
10110c88 g     F .text	00000038 exit
10100e08 g     F .text	0000003c fiprintf
101023b4 g     F .text	00000018 _vfiprintf_r
10106d30 g     F .text	000000c4 _fwalk_reent
10107ad8 g     F .text	000001fc __mdiff
1010bb00 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10106750 g     F .text	00000004 __sfp_lock_release
10100e44 g     F .text	000000f4 _fopen_r
1010e3d0 g     F .text	00000034 _exit
1010ff9c g     F .text	0000012c alt_alarm_start
10101478 g     F .text	000001bc __smakebuf_r
10108660 g     F .text	00000098 strlen
10108280 g     F .text	0000006c _init_signal_r
1010eb1c g     F .text	00000154 open
1010ce4c g     F .text	000000dc .hidden __gedf2
10100dd4 g     F .text	00000014 __assert
10112ea0 g     O .rwdata	00000004 __wctomb
101087f4 g     F .text	00000018 __sprint_r
1011056c g     F .text	00000034 alt_icache_flush_all
10112f08 g     O .rwdata	00000004 alt_priority_mask
101105f0 g     F .text	00000088 alt_ic_irq_enable
101045c4 g     F .text	0000001c __vfprintf_internal
1010af70 g     F .text	0000005c _wctomb_r
1010d734 g     F .text	000008fc .hidden __subdf3
1010750c g     F .text	000000b0 __lo0bits
10112f0c g     O .rwdata	00000008 alt_alarm_list
101101f0 g     F .text	00000060 _do_ctors
10108510 g     F .text	00000014 __sigtramp
1010ae80 g     F .text	000000c0 wcrtomb
1010e2d4 g     F .text	000000d0 close
1010e7c4 g     F .text	00000084 alt_load
1010a090 g     F .text	00000080 fputwc
101084d4 g     F .text	00000014 raise
10106754 g     F .text	00000004 __sinit_lock_acquire
10107280 g     F .text	00000120 __multadd
10107258 g     F .text	00000028 _Bfree
1010fdb8 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	1092b604 	addi	r2,r2,19160
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	1092b604 	addi	r2,r2,19160
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70a17 	ldw	r2,-25560(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70a17 	ldw	r2,-25560(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6aba114 	ori	gp,gp,44676
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10929e14 	ori	r2,r2,19064

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d2f614 	ori	r3,r3,19416

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010e7c40 	call	1010e7c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010e9580 	call	1010e958 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	1004c03a 	cmpne	r2,r2,zero
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008a40 	call	101008a4 <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	1004c03a 	cmpne	r2,r2,zero
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008a40 	call	101008a4 <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	1004c03a 	cmpne	r2,r2,zero
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008a40 	call	101008a4 <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	00800044 	movi	r2,1
10100568:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
1010056c:	e0bfff17 	ldw	r2,-4(fp)
10100570:	e0fffc17 	ldw	r3,-16(fp)
10100574:	1885403a 	cmpgeu	r2,r3,r2
10100578:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010057c:	e0bffd03 	ldbu	r2,-12(fp)
10100580:	10000826 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
10100584:	e0bffd43 	ldbu	r2,-11(fp)
10100588:	10000626 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010058c:	e13ffe17 	ldw	r4,-8(fp)
10100590:	01008a40 	call	101008a4 <is_idle>
10100594:	10803fcc 	andi	r2,r2,255
10100598:	10000226 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010059c:	00800044 	movi	r2,1
101005a0:	00000106 	br	101005a8 <write_frame_line_blank_reg+0x7c>
101005a4:	0005883a 	mov	r2,zero
101005a8:	e0bffd85 	stb	r2,-10(fp)
101005ac:	e0bffd83 	ldbu	r2,-10(fp)
101005b0:	1080004c 	andi	r2,r2,1
101005b4:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005b8:	e0bffd83 	ldbu	r2,-10(fp)
101005bc:	10000726 	beq	r2,zero,101005dc <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c0:	e0bffe17 	ldw	r2,-8(fp)
101005c4:	10800017 	ldw	r2,0(r2)
101005c8:	10800304 	addi	r2,r2,12
101005cc:	e0ffff17 	ldw	r3,-4(fp)
101005d0:	10c00035 	stwio	r3,0(r2)
        return true;
101005d4:	00800044 	movi	r2,1
101005d8:	00000106 	br	101005e0 <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
101005dc:	0005883a 	mov	r2,zero
    }
}
101005e0:	e037883a 	mov	sp,fp
101005e4:	dfc00117 	ldw	ra,4(sp)
101005e8:	df000017 	ldw	fp,0(sp)
101005ec:	dec00204 	addi	sp,sp,8
101005f0:	f800283a 	ret

101005f4 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f4:	defffa04 	addi	sp,sp,-24
101005f8:	dfc00515 	stw	ra,20(sp)
101005fc:	df000415 	stw	fp,16(sp)
10100600:	df000404 	addi	fp,sp,16
10100604:	e13ffe15 	stw	r4,-8(fp)
10100608:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
1010060c:	e0bffe17 	ldw	r2,-8(fp)
10100610:	10c00217 	ldw	r3,8(r2)
10100614:	e0bffe17 	ldw	r2,-8(fp)
10100618:	10800317 	ldw	r2,12(r2)
1010061c:	100b883a 	mov	r5,r2
10100620:	1809883a 	mov	r4,r3
10100624:	01002900 	call	10100290 <max>
10100628:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
1010062c:	e0bfff17 	ldw	r2,-4(fp)
10100630:	1004c03a 	cmpne	r2,r2,zero
10100634:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
10100638:	e0bfff17 	ldw	r2,-4(fp)
1010063c:	e0fffc17 	ldw	r3,-16(fp)
10100640:	1885403a 	cmpgeu	r2,r3,r2
10100644:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100648:	e0bffd03 	ldbu	r2,-12(fp)
1010064c:	10000826 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100650:	e0bffd43 	ldbu	r2,-11(fp)
10100654:	10000626 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100658:	e13ffe17 	ldw	r4,-8(fp)
1010065c:	01008a40 	call	101008a4 <is_idle>
10100660:	10803fcc 	andi	r2,r2,255
10100664:	10000226 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100668:	00800044 	movi	r2,1
1010066c:	00000106 	br	10100674 <write_line_line_blank_reg+0x80>
10100670:	0005883a 	mov	r2,zero
10100674:	e0bffd85 	stb	r2,-10(fp)
10100678:	e0bffd83 	ldbu	r2,-10(fp)
1010067c:	1080004c 	andi	r2,r2,1
10100680:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100684:	e0bffd83 	ldbu	r2,-10(fp)
10100688:	10000726 	beq	r2,zero,101006a8 <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
1010068c:	e0bffe17 	ldw	r2,-8(fp)
10100690:	10800017 	ldw	r2,0(r2)
10100694:	10800404 	addi	r2,r2,16
10100698:	e0ffff17 	ldw	r3,-4(fp)
1010069c:	10c00035 	stwio	r3,0(r2)
        return true;
101006a0:	00800044 	movi	r2,1
101006a4:	00000106 	br	101006ac <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006a8:	0005883a 	mov	r2,zero
    }
}
101006ac:	e037883a 	mov	sp,fp
101006b0:	dfc00117 	ldw	ra,4(sp)
101006b4:	df000017 	ldw	fp,0(sp)
101006b8:	dec00204 	addi	sp,sp,8
101006bc:	f800283a 	ret

101006c0 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c0:	defffa04 	addi	sp,sp,-24
101006c4:	dfc00515 	stw	ra,20(sp)
101006c8:	df000415 	stw	fp,16(sp)
101006cc:	df000404 	addi	fp,sp,16
101006d0:	e13ffe15 	stw	r4,-8(fp)
101006d4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006d8:	e0bffe17 	ldw	r2,-8(fp)
101006dc:	10c00217 	ldw	r3,8(r2)
101006e0:	e0bffe17 	ldw	r2,-8(fp)
101006e4:	10800317 	ldw	r2,12(r2)
101006e8:	100b883a 	mov	r5,r2
101006ec:	1809883a 	mov	r4,r3
101006f0:	01002900 	call	10100290 <max>
101006f4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006f8:	00800044 	movi	r2,1
101006fc:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100700:	e0bfff17 	ldw	r2,-4(fp)
10100704:	e0fffc17 	ldw	r3,-16(fp)
10100708:	1885403a 	cmpgeu	r2,r3,r2
1010070c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100710:	e0bffd03 	ldbu	r2,-12(fp)
10100714:	10000826 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100718:	e0bffd43 	ldbu	r2,-11(fp)
1010071c:	10000626 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100720:	e13ffe17 	ldw	r4,-8(fp)
10100724:	01008a40 	call	101008a4 <is_idle>
10100728:	10803fcc 	andi	r2,r2,255
1010072c:	10000226 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100730:	00800044 	movi	r2,1
10100734:	00000106 	br	1010073c <write_line_frame_blank_reg+0x7c>
10100738:	0005883a 	mov	r2,zero
1010073c:	e0bffd85 	stb	r2,-10(fp)
10100740:	e0bffd83 	ldbu	r2,-10(fp)
10100744:	1080004c 	andi	r2,r2,1
10100748:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010074c:	e0bffd83 	ldbu	r2,-10(fp)
10100750:	10000726 	beq	r2,zero,10100770 <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
10100754:	e0bffe17 	ldw	r2,-8(fp)
10100758:	10800017 	ldw	r2,0(r2)
1010075c:	10800504 	addi	r2,r2,20
10100760:	e0ffff17 	ldw	r3,-4(fp)
10100764:	10c00035 	stwio	r3,0(r2)
        return true;
10100768:	00800044 	movi	r2,1
1010076c:	00000106 	br	10100774 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
10100770:	0005883a 	mov	r2,zero
    }
}
10100774:	e037883a 	mov	sp,fp
10100778:	dfc00117 	ldw	ra,4(sp)
1010077c:	df000017 	ldw	fp,0(sp)
10100780:	dec00204 	addi	sp,sp,8
10100784:	f800283a 	ret

10100788 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100788:	defffe04 	addi	sp,sp,-8
1010078c:	df000115 	stw	fp,4(sp)
10100790:	df000104 	addi	fp,sp,4
10100794:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
10100798:	e0bfff17 	ldw	r2,-4(fp)
1010079c:	10800017 	ldw	r2,0(r2)
101007a0:	10800037 	ldwio	r2,0(r2)
}
101007a4:	e037883a 	mov	sp,fp
101007a8:	df000017 	ldw	fp,0(sp)
101007ac:	dec00104 	addi	sp,sp,4
101007b0:	f800283a 	ret

101007b4 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007b4:	defffe04 	addi	sp,sp,-8
101007b8:	df000115 	stw	fp,4(sp)
101007bc:	df000104 	addi	fp,sp,4
101007c0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007c4:	e0bfff17 	ldw	r2,-4(fp)
101007c8:	10800017 	ldw	r2,0(r2)
101007cc:	10800104 	addi	r2,r2,4
101007d0:	10800037 	ldwio	r2,0(r2)
}
101007d4:	e037883a 	mov	sp,fp
101007d8:	df000017 	ldw	fp,0(sp)
101007dc:	dec00104 	addi	sp,sp,4
101007e0:	f800283a 	ret

101007e4 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007e4:	defffe04 	addi	sp,sp,-8
101007e8:	df000115 	stw	fp,4(sp)
101007ec:	df000104 	addi	fp,sp,4
101007f0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007f4:	e0bfff17 	ldw	r2,-4(fp)
101007f8:	10800017 	ldw	r2,0(r2)
101007fc:	10800204 	addi	r2,r2,8
10100800:	10800037 	ldwio	r2,0(r2)
}
10100804:	e037883a 	mov	sp,fp
10100808:	df000017 	ldw	fp,0(sp)
1010080c:	dec00104 	addi	sp,sp,4
10100810:	f800283a 	ret

10100814 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100814:	defffe04 	addi	sp,sp,-8
10100818:	df000115 	stw	fp,4(sp)
1010081c:	df000104 	addi	fp,sp,4
10100820:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
10100824:	e0bfff17 	ldw	r2,-4(fp)
10100828:	10800017 	ldw	r2,0(r2)
1010082c:	10800304 	addi	r2,r2,12
10100830:	10800037 	ldwio	r2,0(r2)
}
10100834:	e037883a 	mov	sp,fp
10100838:	df000017 	ldw	fp,0(sp)
1010083c:	dec00104 	addi	sp,sp,4
10100840:	f800283a 	ret

10100844 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100844:	defffe04 	addi	sp,sp,-8
10100848:	df000115 	stw	fp,4(sp)
1010084c:	df000104 	addi	fp,sp,4
10100850:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	10800017 	ldw	r2,0(r2)
1010085c:	10800404 	addi	r2,r2,16
10100860:	10800037 	ldwio	r2,0(r2)
}
10100864:	e037883a 	mov	sp,fp
10100868:	df000017 	ldw	fp,0(sp)
1010086c:	dec00104 	addi	sp,sp,4
10100870:	f800283a 	ret

10100874 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100874:	defffe04 	addi	sp,sp,-8
10100878:	df000115 	stw	fp,4(sp)
1010087c:	df000104 	addi	fp,sp,4
10100880:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
10100884:	e0bfff17 	ldw	r2,-4(fp)
10100888:	10800017 	ldw	r2,0(r2)
1010088c:	10800504 	addi	r2,r2,20
10100890:	10800037 	ldwio	r2,0(r2)
}
10100894:	e037883a 	mov	sp,fp
10100898:	df000017 	ldw	fp,0(sp)
1010089c:	dec00104 	addi	sp,sp,4
101008a0:	f800283a 	ret

101008a4 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008a4:	defffe04 	addi	sp,sp,-8
101008a8:	df000115 	stw	fp,4(sp)
101008ac:	df000104 	addi	fp,sp,4
101008b0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008b4:	e0bfff17 	ldw	r2,-4(fp)
101008b8:	10800017 	ldw	r2,0(r2)
101008bc:	10800704 	addi	r2,r2,28
101008c0:	10800037 	ldwio	r2,0(r2)
101008c4:	10800060 	cmpeqi	r2,r2,1
}
101008c8:	e037883a 	mov	sp,fp
101008cc:	df000017 	ldw	fp,0(sp)
101008d0:	dec00104 	addi	sp,sp,4
101008d4:	f800283a 	ret

101008d8 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008d8:	defff704 	addi	sp,sp,-36
101008dc:	df000815 	stw	fp,32(sp)
101008e0:	df000804 	addi	fp,sp,32
101008e4:	e13ffc15 	stw	r4,-16(fp)
101008e8:	e17ffd15 	stw	r5,-12(fp)
101008ec:	3005883a 	mov	r2,r6
101008f0:	e1ffff15 	stw	r7,-4(fp)
101008f4:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
101008f8:	e0bffd17 	ldw	r2,-12(fp)
101008fc:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100900:	e0bffe03 	ldbu	r2,-8(fp)
10100904:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100908:	e0bfff17 	ldw	r2,-4(fp)
1010090c:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100910:	e0800117 	ldw	r2,4(fp)
10100914:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100918:	e0bffc17 	ldw	r2,-16(fp)
1010091c:	e0fff817 	ldw	r3,-32(fp)
10100920:	10c00015 	stw	r3,0(r2)
10100924:	e0fff917 	ldw	r3,-28(fp)
10100928:	10c00115 	stw	r3,4(r2)
1010092c:	e0fffa17 	ldw	r3,-24(fp)
10100930:	10c00215 	stw	r3,8(r2)
10100934:	e0fffb17 	ldw	r3,-20(fp)
10100938:	10c00315 	stw	r3,12(r2)
}
1010093c:	e0bffc17 	ldw	r2,-16(fp)
10100940:	e037883a 	mov	sp,fp
10100944:	df000017 	ldw	fp,0(sp)
10100948:	dec00104 	addi	sp,sp,4
1010094c:	f800283a 	ret

10100950 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100950:	defffd04 	addi	sp,sp,-12
10100954:	dfc00215 	stw	ra,8(sp)
10100958:	df000115 	stw	fp,4(sp)
1010095c:	df000104 	addi	fp,sp,4
10100960:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
10100964:	e13fff17 	ldw	r4,-4(fp)
10100968:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
1010096c:	01400044 	movi	r5,1
10100970:	e13fff17 	ldw	r4,-4(fp)
10100974:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100978:	01400044 	movi	r5,1
1010097c:	e13fff17 	ldw	r4,-4(fp)
10100980:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
10100984:	01400044 	movi	r5,1
10100988:	e13fff17 	ldw	r4,-4(fp)
1010098c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100990:	000b883a 	mov	r5,zero
10100994:	e13fff17 	ldw	r4,-4(fp)
10100998:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
1010099c:	01400044 	movi	r5,1
101009a0:	e13fff17 	ldw	r4,-4(fp)
101009a4:	01005f40 	call	101005f4 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009a8:	000b883a 	mov	r5,zero
101009ac:	e13fff17 	ldw	r4,-4(fp)
101009b0:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
}
101009b4:	0001883a 	nop
101009b8:	e037883a 	mov	sp,fp
101009bc:	dfc00117 	ldw	ra,4(sp)
101009c0:	df000017 	ldw	fp,0(sp)
101009c4:	dec00204 	addi	sp,sp,8
101009c8:	f800283a 	ret

101009cc <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009cc:	defff904 	addi	sp,sp,-28
101009d0:	dfc00615 	stw	ra,24(sp)
101009d4:	df000515 	stw	fp,20(sp)
101009d8:	df000504 	addi	fp,sp,20
101009dc:	e13ffc15 	stw	r4,-16(fp)
101009e0:	e17ffd15 	stw	r5,-12(fp)
101009e4:	e1bffe15 	stw	r6,-8(fp)
101009e8:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009ec:	00800044 	movi	r2,1
101009f0:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009f4:	e13ffc17 	ldw	r4,-16(fp)
101009f8:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
101009fc:	e17ffd17 	ldw	r5,-12(fp)
10100a00:	e13ffc17 	ldw	r4,-16(fp)
10100a04:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a08:	e0fffb03 	ldbu	r3,-20(fp)
10100a0c:	10803fcc 	andi	r2,r2,255
10100a10:	1884703a 	and	r2,r3,r2
10100a14:	1004c03a 	cmpne	r2,r2,zero
10100a18:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a1c:	e17ffe17 	ldw	r5,-8(fp)
10100a20:	e13ffc17 	ldw	r4,-16(fp)
10100a24:	01003940 	call	10100394 <write_frame_height_reg>
10100a28:	e0fffb03 	ldbu	r3,-20(fp)
10100a2c:	10803fcc 	andi	r2,r2,255
10100a30:	1884703a 	and	r2,r3,r2
10100a34:	1004c03a 	cmpne	r2,r2,zero
10100a38:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a3c:	e17fff17 	ldw	r5,-4(fp)
10100a40:	e13ffc17 	ldw	r4,-16(fp)
10100a44:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a48:	e0fffb03 	ldbu	r3,-20(fp)
10100a4c:	10803fcc 	andi	r2,r2,255
10100a50:	1884703a 	and	r2,r3,r2
10100a54:	1004c03a 	cmpne	r2,r2,zero
10100a58:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a5c:	e1400217 	ldw	r5,8(fp)
10100a60:	e13ffc17 	ldw	r4,-16(fp)
10100a64:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a68:	e0fffb03 	ldbu	r3,-20(fp)
10100a6c:	10803fcc 	andi	r2,r2,255
10100a70:	1884703a 	and	r2,r3,r2
10100a74:	1004c03a 	cmpne	r2,r2,zero
10100a78:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a7c:	e1400317 	ldw	r5,12(fp)
10100a80:	e13ffc17 	ldw	r4,-16(fp)
10100a84:	01005f40 	call	101005f4 <write_line_line_blank_reg>
10100a88:	e0fffb03 	ldbu	r3,-20(fp)
10100a8c:	10803fcc 	andi	r2,r2,255
10100a90:	1884703a 	and	r2,r3,r2
10100a94:	1004c03a 	cmpne	r2,r2,zero
10100a98:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100a9c:	e1400417 	ldw	r5,16(fp)
10100aa0:	e13ffc17 	ldw	r4,-16(fp)
10100aa4:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
10100aa8:	e0fffb03 	ldbu	r3,-20(fp)
10100aac:	10803fcc 	andi	r2,r2,255
10100ab0:	1884703a 	and	r2,r3,r2
10100ab4:	1004c03a 	cmpne	r2,r2,zero
10100ab8:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100abc:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac0:	e037883a 	mov	sp,fp
10100ac4:	dfc00117 	ldw	ra,4(sp)
10100ac8:	df000017 	ldw	fp,0(sp)
10100acc:	dec00204 	addi	sp,sp,8
10100ad0:	f800283a 	ret

10100ad4 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100ad4:	defffe04 	addi	sp,sp,-8
10100ad8:	df000115 	stw	fp,4(sp)
10100adc:	df000104 	addi	fp,sp,4
10100ae0:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100ae4:	e0bfff17 	ldw	r2,-4(fp)
10100ae8:	10800017 	ldw	r2,0(r2)
10100aec:	10800604 	addi	r2,r2,24
10100af0:	00c00044 	movi	r3,1
10100af4:	10c00035 	stwio	r3,0(r2)
}
10100af8:	0001883a 	nop
10100afc:	e037883a 	mov	sp,fp
10100b00:	df000017 	ldw	fp,0(sp)
10100b04:	dec00104 	addi	sp,sp,4
10100b08:	f800283a 	ret

10100b0c <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b0c:	defffe04 	addi	sp,sp,-8
10100b10:	df000115 	stw	fp,4(sp)
10100b14:	df000104 	addi	fp,sp,4
10100b18:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b1c:	e0bfff17 	ldw	r2,-4(fp)
10100b20:	10800017 	ldw	r2,0(r2)
10100b24:	10800604 	addi	r2,r2,24
10100b28:	0007883a 	mov	r3,zero
10100b2c:	10c00035 	stwio	r3,0(r2)
}
10100b30:	0001883a 	nop
10100b34:	e037883a 	mov	sp,fp
10100b38:	df000017 	ldw	fp,0(sp)
10100b3c:	dec00104 	addi	sp,sp,4
10100b40:	f800283a 	ret

10100b44 <main>:
#define HPS_0_BRIDGES_BASE (0x00000000)            /* address_span_expander base address from system.h (ADAPT TO YOUR DESIGN) */
#define HPS_0_BRIDGES_SPAN (256 * 1024 * 1024) /* address_span_expander span from system.h (ADAPT TO YOUR DESIGN) */

#define ONE_MB (1024 * 1024)

int main(void) {
10100b44:	defff704 	addi	sp,sp,-36
10100b48:	dfc00815 	stw	ra,32(sp)
10100b4c:	df000715 	stw	fp,28(sp)
10100b50:	df000704 	addi	fp,sp,28
    uint32_t megabyte_count = 0;
10100b54:	e03ff915 	stw	zero,-28(fp)

    char* filename = "/mnt/host/image.ppm";
10100b58:	00840474 	movhi	r2,4113
10100b5c:	1083f504 	addi	r2,r2,4052
10100b60:	e0bffb15 	stw	r2,-20(fp)

    FILE *foutput = fopen(filename, "w");
10100b64:	01440474 	movhi	r5,4113
10100b68:	2943fa04 	addi	r5,r5,4072
10100b6c:	e13ffb17 	ldw	r4,-20(fp)
10100b70:	0100f380 	call	10100f38 <fopen>
10100b74:	e0bffc15 	stw	r2,-16(fp)
    if (!foutput) {
10100b78:	e0bffc17 	ldw	r2,-16(fp)
10100b7c:	1000061e 	bne	r2,zero,10100b98 <main+0x54>
     printf("Error: could not open \"%s\" for writing\n", filename);
10100b80:	e17ffb17 	ldw	r5,-20(fp)
10100b84:	01040474 	movhi	r4,4113
10100b88:	2103fb04 	addi	r4,r4,4076
10100b8c:	0101ff80 	call	10101ff8 <printf>
     return false;
10100b90:	0005883a 	mov	r2,zero
10100b94:	00002e06 	br	10100c50 <main+0x10c>
    }

    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10100b98:	e03ffa15 	stw	zero,-24(fp)
10100b9c:	00002806 	br	10100c40 <main+0xfc>

        // Print progress through 256 MB memory available through address span expander
        if ((i % ONE_MB) == 0) {
10100ba0:	e0fffa17 	ldw	r3,-24(fp)
10100ba4:	00800434 	movhi	r2,16
10100ba8:	10bfffc4 	addi	r2,r2,-1
10100bac:	1884703a 	and	r2,r3,r2
10100bb0:	1000071e 	bne	r2,zero,10100bd0 <main+0x8c>
            printf("megabyte_count = %" PRIu32 "\n", megabyte_count);
10100bb4:	e17ff917 	ldw	r5,-28(fp)
10100bb8:	01040474 	movhi	r4,4113
10100bbc:	21040504 	addi	r4,r4,4116
10100bc0:	0101ff80 	call	10101ff8 <printf>
            megabyte_count++;
10100bc4:	e0bff917 	ldw	r2,-28(fp)
10100bc8:	10800044 	addi	r2,r2,1
10100bcc:	e0bff915 	stw	r2,-28(fp)
        }

        uint32_t addr = HPS_0_BRIDGES_BASE + i;
10100bd0:	e0bffa17 	ldw	r2,-24(fp)
10100bd4:	e0bffd15 	stw	r2,-12(fp)

        // Write through address span expander
        uint32_t writedata = i;
10100bd8:	e0bffa17 	ldw	r2,-24(fp)
10100bdc:	e0bffe15 	stw	r2,-8(fp)
        IOWR_32DIRECT(addr, 0, writedata);
10100be0:	e0bffd17 	ldw	r2,-12(fp)
10100be4:	e0fffe17 	ldw	r3,-8(fp)
10100be8:	10c00035 	stwio	r3,0(r2)

        // Read through address span expander
        uint32_t readdata = IORD_32DIRECT(addr, 0);
10100bec:	e0bffd17 	ldw	r2,-12(fp)
10100bf0:	10800037 	ldwio	r2,0(r2)
10100bf4:	e0bfff15 	stw	r2,-4(fp)

        /* Use fprintf function to write to file through file pointer */
        fprintf(foutput,"%" PRIu32 "\n", readdata);
10100bf8:	e1bfff17 	ldw	r6,-4(fp)
10100bfc:	01440474 	movhi	r5,4113
10100c00:	29440b04 	addi	r5,r5,4140
10100c04:	e13ffc17 	ldw	r4,-16(fp)
10100c08:	0100f780 	call	10100f78 <fprintf>

        // Check if read data is equal to written data
        assert(writedata == readdata);
10100c0c:	e0fffe17 	ldw	r3,-8(fp)
10100c10:	e0bfff17 	ldw	r2,-4(fp)
10100c14:	18800726 	beq	r3,r2,10100c34 <main+0xf0>
10100c18:	01c40474 	movhi	r7,4113
10100c1c:	39c40d04 	addi	r7,r7,4148
10100c20:	d1a00004 	addi	r6,gp,-32768
10100c24:	01400bc4 	movi	r5,47
10100c28:	01040474 	movhi	r4,4113
10100c2c:	21041304 	addi	r4,r4,4172
10100c30:	0100d6c0 	call	10100d6c <__assert_func>
    if (!foutput) {
     printf("Error: could not open \"%s\" for writing\n", filename);
     return false;
    }

    for (uint32_t i = 0; i < HPS_0_BRIDGES_SPAN; i += sizeof(uint32_t)) {
10100c34:	e0bffa17 	ldw	r2,-24(fp)
10100c38:	10800104 	addi	r2,r2,4
10100c3c:	e0bffa15 	stw	r2,-24(fp)
10100c40:	e0fffa17 	ldw	r3,-24(fp)
10100c44:	00840034 	movhi	r2,4096
10100c48:	18bfd536 	bltu	r3,r2,10100ba0 <__alt_data_end+0xfffe0ba0>

        // Check if read data is equal to written data
        assert(writedata == readdata);
    }

    return EXIT_SUCCESS;
10100c4c:	0005883a 	mov	r2,zero
}
10100c50:	e037883a 	mov	sp,fp
10100c54:	dfc00117 	ldw	ra,4(sp)
10100c58:	df000017 	ldw	fp,0(sp)
10100c5c:	dec00204 	addi	sp,sp,8
10100c60:	f800283a 	ret

10100c64 <main2>:
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE       (0x10000820) /* cmos_sensor_output_generator base address from system.h (ADAPT TO YOUR DESIGN) */
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH  (12)     /* cmos_sensor_output_generator pix depth from system.h (ADAPT TO YOUR DESIGN) */
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH  (640)    /* cmos_sensor_output_generator max width from system.h (ADAPT TO YOUR DESIGN) */
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT (480)    /* cmos_sensor_output_generator max height from system.h (ADAPT TO YOUR DESIGN) */

int main2(void) {
10100c64:	defff704 	addi	sp,sp,-36
10100c68:	dfc00815 	stw	ra,32(sp)
10100c6c:	df000715 	stw	fp,28(sp)
10100c70:	df000704 	addi	fp,sp,28
    cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100c74:	00807804 	movi	r2,480
10100c78:	d8800015 	stw	r2,0(sp)
10100c7c:	01c0a004 	movi	r7,640
10100c80:	01800304 	movi	r6,12
10100c84:	01440034 	movhi	r5,4096
10100c88:	29420804 	addi	r5,r5,2080
10100c8c:	e13ffc04 	addi	r4,fp,-16
10100c90:	01008d80 	call	101008d8 <cmos_sensor_output_generator_inst>
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
    cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100c94:	e13ffc04 	addi	r4,fp,-16
10100c98:	01009500 	call	10100950 <cmos_sensor_output_generator_init>

    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100c9c:	e13ffc04 	addi	r4,fp,-16
10100ca0:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100ca4:	d8000215 	stw	zero,8(sp)
10100ca8:	00800044 	movi	r2,1
10100cac:	d8800115 	stw	r2,4(sp)
10100cb0:	d8000015 	stw	zero,0(sp)
10100cb4:	01c00044 	movi	r7,1
10100cb8:	01807804 	movi	r6,480
10100cbc:	0140a004 	movi	r5,640
10100cc0:	e13ffc04 	addi	r4,fp,-16
10100cc4:	01009cc0 	call	101009cc <cmos_sensor_output_generator_configure>
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

    cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100cc8:	e13ffc04 	addi	r4,fp,-16
10100ccc:	0100ad40 	call	10100ad4 <cmos_sensor_output_generator_start>

    return EXIT_SUCCESS;
10100cd0:	0005883a 	mov	r2,zero
}
10100cd4:	e037883a 	mov	sp,fp
10100cd8:	dfc00117 	ldw	ra,4(sp)
10100cdc:	df000017 	ldw	fp,0(sp)
10100ce0:	dec00204 	addi	sp,sp,8
10100ce4:	f800283a 	ret

10100ce8 <main3>:
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH  (12)     /* cmos_sensor_output_generator pix depth from system.h (ADAPT TO YOUR DESIGN) */
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH  (640)    /* cmos_sensor_output_generator max width from system.h (ADAPT TO YOUR DESIGN) */
#define CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT (480)    /* cmos_sensor_output_generator max height from system.h (ADAPT TO YOUR DESIGN) */


int main3(void) {
10100ce8:	defff704 	addi	sp,sp,-36
10100cec:	dfc00815 	stw	ra,32(sp)
10100cf0:	df000715 	stw	fp,28(sp)
10100cf4:	df000704 	addi	fp,sp,28
    cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100cf8:	00807804 	movi	r2,480
10100cfc:	d8800015 	stw	r2,0(sp)
10100d00:	01c0a004 	movi	r7,640
10100d04:	01800304 	movi	r6,12
10100d08:	01440034 	movhi	r5,4096
10100d0c:	29420804 	addi	r5,r5,2080
10100d10:	e13ffc04 	addi	r4,fp,-16
10100d14:	01008d80 	call	101008d8 <cmos_sensor_output_generator_inst>
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
                                                                                                      CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
    cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100d18:	e13ffc04 	addi	r4,fp,-16
10100d1c:	01009500 	call	10100950 <cmos_sensor_output_generator_init>

    cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100d20:	e13ffc04 	addi	r4,fp,-16
10100d24:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100d28:	d8000215 	stw	zero,8(sp)
10100d2c:	00800044 	movi	r2,1
10100d30:	d8800115 	stw	r2,4(sp)
10100d34:	d8000015 	stw	zero,0(sp)
10100d38:	01c00044 	movi	r7,1
10100d3c:	01807804 	movi	r6,480
10100d40:	0140a004 	movi	r5,640
10100d44:	e13ffc04 	addi	r4,fp,-16
10100d48:	01009cc0 	call	101009cc <cmos_sensor_output_generator_configure>
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
                                           CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

    cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100d4c:	e13ffc04 	addi	r4,fp,-16
10100d50:	0100ad40 	call	10100ad4 <cmos_sensor_output_generator_start>

    return EXIT_SUCCESS;
10100d54:	0005883a 	mov	r2,zero
}
10100d58:	e037883a 	mov	sp,fp
10100d5c:	dfc00117 	ldw	ra,4(sp)
10100d60:	df000017 	ldw	fp,0(sp)
10100d64:	dec00204 	addi	sp,sp,8
10100d68:	f800283a 	ret

10100d6c <__assert_func>:
10100d6c:	00840474 	movhi	r2,4113
10100d70:	108ba404 	addi	r2,r2,11920
10100d74:	10800017 	ldw	r2,0(r2)
10100d78:	defffc04 	addi	sp,sp,-16
10100d7c:	dfc00315 	stw	ra,12(sp)
10100d80:	2015883a 	mov	r10,r4
10100d84:	2811883a 	mov	r8,r5
10100d88:	3813883a 	mov	r9,r7
10100d8c:	11000317 	ldw	r4,12(r2)
10100d90:	30000c26 	beq	r6,zero,10100dc4 <__assert_func+0x58>
10100d94:	00c40474 	movhi	r3,4113
10100d98:	18c41a04 	addi	r3,r3,4200
10100d9c:	3005883a 	mov	r2,r6
10100da0:	01440474 	movhi	r5,4113
10100da4:	29441e04 	addi	r5,r5,4216
10100da8:	500f883a 	mov	r7,r10
10100dac:	480d883a 	mov	r6,r9
10100db0:	d8c00115 	stw	r3,4(sp)
10100db4:	da000015 	stw	r8,0(sp)
10100db8:	d8800215 	stw	r2,8(sp)
10100dbc:	0100e080 	call	10100e08 <fiprintf>
10100dc0:	01048a40 	call	101048a4 <abort>
10100dc4:	00c40474 	movhi	r3,4113
10100dc8:	18c41d04 	addi	r3,r3,4212
10100dcc:	1805883a 	mov	r2,r3
10100dd0:	003ff306 	br	10100da0 <__alt_data_end+0xfffe0da0>

10100dd4 <__assert>:
10100dd4:	deffff04 	addi	sp,sp,-4
10100dd8:	300f883a 	mov	r7,r6
10100ddc:	000d883a 	mov	r6,zero
10100de0:	dfc00015 	stw	ra,0(sp)
10100de4:	0100d6c0 	call	10100d6c <__assert_func>

10100de8 <_fiprintf_r>:
10100de8:	defffe04 	addi	sp,sp,-8
10100dec:	dfc00015 	stw	ra,0(sp)
10100df0:	d9c00115 	stw	r7,4(sp)
10100df4:	d9c00104 	addi	r7,sp,4
10100df8:	01023b40 	call	101023b4 <_vfiprintf_r>
10100dfc:	dfc00017 	ldw	ra,0(sp)
10100e00:	dec00204 	addi	sp,sp,8
10100e04:	f800283a 	ret

10100e08 <fiprintf>:
10100e08:	defffd04 	addi	sp,sp,-12
10100e0c:	2005883a 	mov	r2,r4
10100e10:	dfc00015 	stw	ra,0(sp)
10100e14:	d9800115 	stw	r6,4(sp)
10100e18:	d9c00215 	stw	r7,8(sp)
10100e1c:	00c40474 	movhi	r3,4113
10100e20:	18cba404 	addi	r3,r3,11920
10100e24:	19000017 	ldw	r4,0(r3)
10100e28:	280d883a 	mov	r6,r5
10100e2c:	d9c00104 	addi	r7,sp,4
10100e30:	100b883a 	mov	r5,r2
10100e34:	01023b40 	call	101023b4 <_vfiprintf_r>
10100e38:	dfc00017 	ldw	ra,0(sp)
10100e3c:	dec00304 	addi	sp,sp,12
10100e40:	f800283a 	ret

10100e44 <_fopen_r>:
10100e44:	defffa04 	addi	sp,sp,-24
10100e48:	3005883a 	mov	r2,r6
10100e4c:	dcc00415 	stw	r19,16(sp)
10100e50:	d80d883a 	mov	r6,sp
10100e54:	2827883a 	mov	r19,r5
10100e58:	100b883a 	mov	r5,r2
10100e5c:	dc800315 	stw	r18,12(sp)
10100e60:	dfc00515 	stw	ra,20(sp)
10100e64:	dc400215 	stw	r17,8(sp)
10100e68:	dc000115 	stw	r16,4(sp)
10100e6c:	2025883a 	mov	r18,r4
10100e70:	010678c0 	call	1010678c <__sflags>
10100e74:	10002726 	beq	r2,zero,10100f14 <_fopen_r+0xd0>
10100e78:	9009883a 	mov	r4,r18
10100e7c:	1023883a 	mov	r17,r2
10100e80:	010660c0 	call	1010660c <__sfp>
10100e84:	1021883a 	mov	r16,r2
10100e88:	10002226 	beq	r2,zero,10100f14 <_fopen_r+0xd0>
10100e8c:	d9800017 	ldw	r6,0(sp)
10100e90:	01c06d84 	movi	r7,438
10100e94:	980b883a 	mov	r5,r19
10100e98:	9009883a 	mov	r4,r18
10100e9c:	0101f680 	call	10101f68 <_open_r>
10100ea0:	10001916 	blt	r2,zero,10100f08 <_fopen_r+0xc4>
10100ea4:	8080038d 	sth	r2,14(r16)
10100ea8:	00840434 	movhi	r2,4112
10100eac:	10889e04 	addi	r2,r2,8824
10100eb0:	80800815 	stw	r2,32(r16)
10100eb4:	00840434 	movhi	r2,4112
10100eb8:	1088b504 	addi	r2,r2,8916
10100ebc:	80800915 	stw	r2,36(r16)
10100ec0:	00840434 	movhi	r2,4112
10100ec4:	1088d404 	addi	r2,r2,9040
10100ec8:	80800a15 	stw	r2,40(r16)
10100ecc:	00840434 	movhi	r2,4112
10100ed0:	1088eb04 	addi	r2,r2,9132
10100ed4:	8440030d 	sth	r17,12(r16)
10100ed8:	84000715 	stw	r16,28(r16)
10100edc:	80800b15 	stw	r2,44(r16)
10100ee0:	8c40400c 	andi	r17,r17,256
10100ee4:	88000d1e 	bne	r17,zero,10100f1c <_fopen_r+0xd8>
10100ee8:	8005883a 	mov	r2,r16
10100eec:	dfc00517 	ldw	ra,20(sp)
10100ef0:	dcc00417 	ldw	r19,16(sp)
10100ef4:	dc800317 	ldw	r18,12(sp)
10100ef8:	dc400217 	ldw	r17,8(sp)
10100efc:	dc000117 	ldw	r16,4(sp)
10100f00:	dec00604 	addi	sp,sp,24
10100f04:	f800283a 	ret
10100f08:	010674c0 	call	1010674c <__sfp_lock_acquire>
10100f0c:	8000030d 	sth	zero,12(r16)
10100f10:	01067500 	call	10106750 <__sfp_lock_release>
10100f14:	0005883a 	mov	r2,zero
10100f18:	003ff406 	br	10100eec <__alt_data_end+0xfffe0eec>
10100f1c:	01c00084 	movi	r7,2
10100f20:	000d883a 	mov	r6,zero
10100f24:	800b883a 	mov	r5,r16
10100f28:	9009883a 	mov	r4,r18
10100f2c:	0100f9c0 	call	10100f9c <_fseek_r>
10100f30:	8005883a 	mov	r2,r16
10100f34:	003fed06 	br	10100eec <__alt_data_end+0xfffe0eec>

10100f38 <fopen>:
10100f38:	00840474 	movhi	r2,4113
10100f3c:	108ba404 	addi	r2,r2,11920
10100f40:	280d883a 	mov	r6,r5
10100f44:	200b883a 	mov	r5,r4
10100f48:	11000017 	ldw	r4,0(r2)
10100f4c:	0100e441 	jmpi	10100e44 <_fopen_r>

10100f50 <_fprintf_r>:
10100f50:	defffe04 	addi	sp,sp,-8
10100f54:	2809883a 	mov	r4,r5
10100f58:	300b883a 	mov	r5,r6
10100f5c:	dfc00015 	stw	ra,0(sp)
10100f60:	d9c00115 	stw	r7,4(sp)
10100f64:	d9800104 	addi	r6,sp,4
10100f68:	01045c40 	call	101045c4 <__vfprintf_internal>
10100f6c:	dfc00017 	ldw	ra,0(sp)
10100f70:	dec00204 	addi	sp,sp,8
10100f74:	f800283a 	ret

10100f78 <fprintf>:
10100f78:	defffd04 	addi	sp,sp,-12
10100f7c:	dfc00015 	stw	ra,0(sp)
10100f80:	d9800115 	stw	r6,4(sp)
10100f84:	d9c00215 	stw	r7,8(sp)
10100f88:	d9800104 	addi	r6,sp,4
10100f8c:	01045c40 	call	101045c4 <__vfprintf_internal>
10100f90:	dfc00017 	ldw	ra,0(sp)
10100f94:	dec00304 	addi	sp,sp,12
10100f98:	f800283a 	ret

10100f9c <_fseek_r>:
10100f9c:	0100fbc1 	jmpi	10100fbc <_fseeko_r>

10100fa0 <fseek>:
10100fa0:	00840474 	movhi	r2,4113
10100fa4:	108ba404 	addi	r2,r2,11920
10100fa8:	300f883a 	mov	r7,r6
10100fac:	280d883a 	mov	r6,r5
10100fb0:	200b883a 	mov	r5,r4
10100fb4:	11000017 	ldw	r4,0(r2)
10100fb8:	0100fbc1 	jmpi	10100fbc <_fseeko_r>

10100fbc <_fseeko_r>:
10100fbc:	deffe804 	addi	sp,sp,-96
10100fc0:	dd401415 	stw	r21,80(sp)
10100fc4:	dc801115 	stw	r18,68(sp)
10100fc8:	dc401015 	stw	r17,64(sp)
10100fcc:	dc000f15 	stw	r16,60(sp)
10100fd0:	dfc01715 	stw	ra,92(sp)
10100fd4:	ddc01615 	stw	r23,88(sp)
10100fd8:	dd801515 	stw	r22,84(sp)
10100fdc:	dd001315 	stw	r20,76(sp)
10100fe0:	dcc01215 	stw	r19,72(sp)
10100fe4:	2023883a 	mov	r17,r4
10100fe8:	2821883a 	mov	r16,r5
10100fec:	302b883a 	mov	r21,r6
10100ff0:	3825883a 	mov	r18,r7
10100ff4:	20000226 	beq	r4,zero,10101000 <_fseeko_r+0x44>
10100ff8:	20800e17 	ldw	r2,56(r4)
10100ffc:	10005a26 	beq	r2,zero,10101168 <_fseeko_r+0x1ac>
10101000:	8080030b 	ldhu	r2,12(r16)
10101004:	00c04204 	movi	r3,264
10101008:	1080420c 	andi	r2,r2,264
1010100c:	10c05b26 	beq	r2,r3,1010117c <_fseeko_r+0x1c0>
10101010:	85000a17 	ldw	r20,40(r16)
10101014:	a000f626 	beq	r20,zero,101013f0 <_fseeko_r+0x434>
10101018:	00800044 	movi	r2,1
1010101c:	90803e26 	beq	r18,r2,10101118 <_fseeko_r+0x15c>
10101020:	00800084 	movi	r2,2
10101024:	90801026 	beq	r18,r2,10101068 <_fseeko_r+0xac>
10101028:	90000f26 	beq	r18,zero,10101068 <_fseeko_r+0xac>
1010102c:	00800584 	movi	r2,22
10101030:	88800015 	stw	r2,0(r17)
10101034:	04ffffc4 	movi	r19,-1
10101038:	9805883a 	mov	r2,r19
1010103c:	dfc01717 	ldw	ra,92(sp)
10101040:	ddc01617 	ldw	r23,88(sp)
10101044:	dd801517 	ldw	r22,84(sp)
10101048:	dd401417 	ldw	r21,80(sp)
1010104c:	dd001317 	ldw	r20,76(sp)
10101050:	dcc01217 	ldw	r19,72(sp)
10101054:	dc801117 	ldw	r18,68(sp)
10101058:	dc401017 	ldw	r17,64(sp)
1010105c:	dc000f17 	ldw	r16,60(sp)
10101060:	dec01804 	addi	sp,sp,96
10101064:	f800283a 	ret
10101068:	80800417 	ldw	r2,16(r16)
1010106c:	002f883a 	mov	r23,zero
10101070:	0027883a 	mov	r19,zero
10101074:	1000cb26 	beq	r2,zero,101013a4 <_fseeko_r+0x3e8>
10101078:	8080030b 	ldhu	r2,12(r16)
1010107c:	10c2068c 	andi	r3,r2,2074
10101080:	1800071e 	bne	r3,zero,101010a0 <_fseeko_r+0xe4>
10101084:	10c1000c 	andi	r3,r2,1024
10101088:	1800451e 	bne	r3,zero,101011a0 <_fseeko_r+0x1e4>
1010108c:	00c40434 	movhi	r3,4112
10101090:	18c8d404 	addi	r3,r3,9040
10101094:	a0c0b726 	beq	r20,r3,10101374 <_fseeko_r+0x3b8>
10101098:	10820014 	ori	r2,r2,2048
1010109c:	8080030d 	sth	r2,12(r16)
101010a0:	800b883a 	mov	r5,r16
101010a4:	8809883a 	mov	r4,r17
101010a8:	01063600 	call	10106360 <_fflush_r>
101010ac:	1027883a 	mov	r19,r2
101010b0:	103fe01e 	bne	r2,zero,10101034 <__alt_data_end+0xfffe1034>
101010b4:	81400717 	ldw	r5,28(r16)
101010b8:	900f883a 	mov	r7,r18
101010bc:	a80d883a 	mov	r6,r21
101010c0:	8809883a 	mov	r4,r17
101010c4:	a03ee83a 	callr	r20
101010c8:	00ffffc4 	movi	r3,-1
101010cc:	10ffd926 	beq	r2,r3,10101034 <__alt_data_end+0xfffe1034>
101010d0:	81400c17 	ldw	r5,48(r16)
101010d4:	28000526 	beq	r5,zero,101010ec <_fseeko_r+0x130>
101010d8:	80801004 	addi	r2,r16,64
101010dc:	28800226 	beq	r5,r2,101010e8 <_fseeko_r+0x12c>
101010e0:	8809883a 	mov	r4,r17
101010e4:	010695c0 	call	1010695c <_free_r>
101010e8:	80000c15 	stw	zero,48(r16)
101010ec:	8080030b 	ldhu	r2,12(r16)
101010f0:	80c00417 	ldw	r3,16(r16)
101010f4:	80000115 	stw	zero,4(r16)
101010f8:	10bdf7cc 	andi	r2,r2,63455
101010fc:	80c00015 	stw	r3,0(r16)
10101100:	8080030d 	sth	r2,12(r16)
10101104:	01800204 	movi	r6,8
10101108:	000b883a 	mov	r5,zero
1010110c:	81001704 	addi	r4,r16,92
10101110:	0101e400 	call	10101e40 <memset>
10101114:	003fc806 	br	10101038 <__alt_data_end+0xfffe1038>
10101118:	800b883a 	mov	r5,r16
1010111c:	8809883a 	mov	r4,r17
10101120:	01063600 	call	10106360 <_fflush_r>
10101124:	8080030b 	ldhu	r2,12(r16)
10101128:	10c4000c 	andi	r3,r2,4096
1010112c:	18008726 	beq	r3,zero,1010134c <_fseeko_r+0x390>
10101130:	84c01417 	ldw	r19,80(r16)
10101134:	10c0010c 	andi	r3,r2,4
10101138:	1800431e 	bne	r3,zero,10101248 <_fseeko_r+0x28c>
1010113c:	1080020c 	andi	r2,r2,8
10101140:	10008026 	beq	r2,zero,10101344 <_fseeko_r+0x388>
10101144:	80c00017 	ldw	r3,0(r16)
10101148:	80800417 	ldw	r2,16(r16)
1010114c:	18000226 	beq	r3,zero,10101158 <_fseeko_r+0x19c>
10101150:	1887c83a 	sub	r3,r3,r2
10101154:	98e7883a 	add	r19,r19,r3
10101158:	aceb883a 	add	r21,r21,r19
1010115c:	05c00044 	movi	r23,1
10101160:	0025883a 	mov	r18,zero
10101164:	003fc306 	br	10101074 <__alt_data_end+0xfffe1074>
10101168:	010673c0 	call	1010673c <__sinit>
1010116c:	8080030b 	ldhu	r2,12(r16)
10101170:	00c04204 	movi	r3,264
10101174:	1080420c 	andi	r2,r2,264
10101178:	10ffa51e 	bne	r2,r3,10101010 <__alt_data_end+0xfffe1010>
1010117c:	800b883a 	mov	r5,r16
10101180:	8809883a 	mov	r4,r17
10101184:	01063600 	call	10106360 <_fflush_r>
10101188:	003fa106 	br	10101010 <__alt_data_end+0xfffe1010>
1010118c:	8080030b 	ldhu	r2,12(r16)
10101190:	00c10004 	movi	r3,1024
10101194:	80c01315 	stw	r3,76(r16)
10101198:	10c4b03a 	or	r2,r2,r3
1010119c:	8080030d 	sth	r2,12(r16)
101011a0:	9000311e 	bne	r18,zero,10101268 <_fseeko_r+0x2ac>
101011a4:	a82d883a 	mov	r22,r21
101011a8:	b800371e 	bne	r23,zero,10101288 <_fseeko_r+0x2cc>
101011ac:	8080030b 	ldhu	r2,12(r16)
101011b0:	1084000c 	andi	r2,r2,4096
101011b4:	10007f26 	beq	r2,zero,101013b4 <_fseeko_r+0x3f8>
101011b8:	80801417 	ldw	r2,80(r16)
101011bc:	81800117 	ldw	r6,4(r16)
101011c0:	81400c17 	ldw	r5,48(r16)
101011c4:	11a7c83a 	sub	r19,r2,r6
101011c8:	28008226 	beq	r5,zero,101013d4 <_fseeko_r+0x418>
101011cc:	81c00f17 	ldw	r7,60(r16)
101011d0:	99e7c83a 	sub	r19,r19,r7
101011d4:	81000e17 	ldw	r4,56(r16)
101011d8:	80800417 	ldw	r2,16(r16)
101011dc:	99a7883a 	add	r19,r19,r6
101011e0:	2087c83a 	sub	r3,r4,r2
101011e4:	98e7c83a 	sub	r19,r19,r3
101011e8:	38c7883a 	add	r3,r7,r3
101011ec:	b4c02b16 	blt	r22,r19,1010129c <_fseeko_r+0x2e0>
101011f0:	98c9883a 	add	r4,r19,r3
101011f4:	b100292e 	bgeu	r22,r4,1010129c <_fseeko_r+0x2e0>
101011f8:	b4e7c83a 	sub	r19,r22,r19
101011fc:	14c5883a 	add	r2,r2,r19
10101200:	1ce7c83a 	sub	r19,r3,r19
10101204:	80800015 	stw	r2,0(r16)
10101208:	84c00115 	stw	r19,4(r16)
1010120c:	28000526 	beq	r5,zero,10101224 <_fseeko_r+0x268>
10101210:	80801004 	addi	r2,r16,64
10101214:	28800226 	beq	r5,r2,10101220 <_fseeko_r+0x264>
10101218:	8809883a 	mov	r4,r17
1010121c:	010695c0 	call	1010695c <_free_r>
10101220:	80000c15 	stw	zero,48(r16)
10101224:	8080030b 	ldhu	r2,12(r16)
10101228:	01800204 	movi	r6,8
1010122c:	000b883a 	mov	r5,zero
10101230:	10bff7cc 	andi	r2,r2,65503
10101234:	8080030d 	sth	r2,12(r16)
10101238:	81001704 	addi	r4,r16,92
1010123c:	0101e400 	call	10101e40 <memset>
10101240:	0027883a 	mov	r19,zero
10101244:	003f7c06 	br	10101038 <__alt_data_end+0xfffe1038>
10101248:	80c00117 	ldw	r3,4(r16)
1010124c:	80800c17 	ldw	r2,48(r16)
10101250:	98e7c83a 	sub	r19,r19,r3
10101254:	10003b26 	beq	r2,zero,10101344 <_fseeko_r+0x388>
10101258:	80c00f17 	ldw	r3,60(r16)
1010125c:	80800417 	ldw	r2,16(r16)
10101260:	98e7c83a 	sub	r19,r19,r3
10101264:	003fbc06 	br	10101158 <__alt_data_end+0xfffe1158>
10101268:	8140038f 	ldh	r5,14(r16)
1010126c:	d80d883a 	mov	r6,sp
10101270:	8809883a 	mov	r4,r17
10101274:	010141c0 	call	1010141c <_fstat_r>
10101278:	103f891e 	bne	r2,zero,101010a0 <__alt_data_end+0xfffe10a0>
1010127c:	dd800417 	ldw	r22,16(sp)
10101280:	adad883a 	add	r22,r21,r22
10101284:	b83fc926 	beq	r23,zero,101011ac <__alt_data_end+0xfffe11ac>
10101288:	81400c17 	ldw	r5,48(r16)
1010128c:	81800117 	ldw	r6,4(r16)
10101290:	28005026 	beq	r5,zero,101013d4 <_fseeko_r+0x418>
10101294:	81c00f17 	ldw	r7,60(r16)
10101298:	003fce06 	br	101011d4 <__alt_data_end+0xfffe11d4>
1010129c:	84c01317 	ldw	r19,76(r16)
101012a0:	81400717 	ldw	r5,28(r16)
101012a4:	000f883a 	mov	r7,zero
101012a8:	04e7c83a 	sub	r19,zero,r19
101012ac:	9da6703a 	and	r19,r19,r22
101012b0:	980d883a 	mov	r6,r19
101012b4:	8809883a 	mov	r4,r17
101012b8:	a03ee83a 	callr	r20
101012bc:	00ffffc4 	movi	r3,-1
101012c0:	10ff7726 	beq	r2,r3,101010a0 <__alt_data_end+0xfffe10a0>
101012c4:	80800417 	ldw	r2,16(r16)
101012c8:	81400c17 	ldw	r5,48(r16)
101012cc:	80000115 	stw	zero,4(r16)
101012d0:	80800015 	stw	r2,0(r16)
101012d4:	28000526 	beq	r5,zero,101012ec <_fseeko_r+0x330>
101012d8:	80801004 	addi	r2,r16,64
101012dc:	28800226 	beq	r5,r2,101012e8 <_fseeko_r+0x32c>
101012e0:	8809883a 	mov	r4,r17
101012e4:	010695c0 	call	1010695c <_free_r>
101012e8:	80000c15 	stw	zero,48(r16)
101012ec:	8080030b 	ldhu	r2,12(r16)
101012f0:	b4e7c83a 	sub	r19,r22,r19
101012f4:	10bff7cc 	andi	r2,r2,65503
101012f8:	8080030d 	sth	r2,12(r16)
101012fc:	98000b26 	beq	r19,zero,1010132c <_fseeko_r+0x370>
10101300:	800b883a 	mov	r5,r16
10101304:	8809883a 	mov	r4,r17
10101308:	01020500 	call	10102050 <__srefill_r>
1010130c:	103f641e 	bne	r2,zero,101010a0 <__alt_data_end+0xfffe10a0>
10101310:	80800117 	ldw	r2,4(r16)
10101314:	14ff6236 	bltu	r2,r19,101010a0 <__alt_data_end+0xfffe10a0>
10101318:	80c00017 	ldw	r3,0(r16)
1010131c:	14c5c83a 	sub	r2,r2,r19
10101320:	80800115 	stw	r2,4(r16)
10101324:	1ce7883a 	add	r19,r3,r19
10101328:	84c00015 	stw	r19,0(r16)
1010132c:	01800204 	movi	r6,8
10101330:	000b883a 	mov	r5,zero
10101334:	81001704 	addi	r4,r16,92
10101338:	0101e400 	call	10101e40 <memset>
1010133c:	0027883a 	mov	r19,zero
10101340:	003f3d06 	br	10101038 <__alt_data_end+0xfffe1038>
10101344:	80800417 	ldw	r2,16(r16)
10101348:	003f8306 	br	10101158 <__alt_data_end+0xfffe1158>
1010134c:	81400717 	ldw	r5,28(r16)
10101350:	900f883a 	mov	r7,r18
10101354:	000d883a 	mov	r6,zero
10101358:	8809883a 	mov	r4,r17
1010135c:	a03ee83a 	callr	r20
10101360:	1027883a 	mov	r19,r2
10101364:	00bfffc4 	movi	r2,-1
10101368:	98bf3226 	beq	r19,r2,10101034 <__alt_data_end+0xfffe1034>
1010136c:	8080030b 	ldhu	r2,12(r16)
10101370:	003f7006 	br	10101134 <__alt_data_end+0xfffe1134>
10101374:	8140038f 	ldh	r5,14(r16)
10101378:	283f4716 	blt	r5,zero,10101098 <__alt_data_end+0xfffe1098>
1010137c:	d80d883a 	mov	r6,sp
10101380:	8809883a 	mov	r4,r17
10101384:	010141c0 	call	1010141c <_fstat_r>
10101388:	1000041e 	bne	r2,zero,1010139c <_fseeko_r+0x3e0>
1010138c:	d8800117 	ldw	r2,4(sp)
10101390:	00e00014 	movui	r3,32768
10101394:	10bc000c 	andi	r2,r2,61440
10101398:	10ff7c26 	beq	r2,r3,1010118c <__alt_data_end+0xfffe118c>
1010139c:	8080030b 	ldhu	r2,12(r16)
101013a0:	003f3d06 	br	10101098 <__alt_data_end+0xfffe1098>
101013a4:	800b883a 	mov	r5,r16
101013a8:	8809883a 	mov	r4,r17
101013ac:	01014780 	call	10101478 <__smakebuf_r>
101013b0:	003f3106 	br	10101078 <__alt_data_end+0xfffe1078>
101013b4:	81400717 	ldw	r5,28(r16)
101013b8:	01c00044 	movi	r7,1
101013bc:	000d883a 	mov	r6,zero
101013c0:	8809883a 	mov	r4,r17
101013c4:	a03ee83a 	callr	r20
101013c8:	00ffffc4 	movi	r3,-1
101013cc:	10ff7b1e 	bne	r2,r3,101011bc <__alt_data_end+0xfffe11bc>
101013d0:	003f3306 	br	101010a0 <__alt_data_end+0xfffe10a0>
101013d4:	80c00017 	ldw	r3,0(r16)
101013d8:	80800417 	ldw	r2,16(r16)
101013dc:	000b883a 	mov	r5,zero
101013e0:	1887c83a 	sub	r3,r3,r2
101013e4:	98e7c83a 	sub	r19,r19,r3
101013e8:	30c7883a 	add	r3,r6,r3
101013ec:	003f7f06 	br	101011ec <__alt_data_end+0xfffe11ec>
101013f0:	00800744 	movi	r2,29
101013f4:	88800015 	stw	r2,0(r17)
101013f8:	04ffffc4 	movi	r19,-1
101013fc:	003f0e06 	br	10101038 <__alt_data_end+0xfffe1038>

10101400 <fseeko>:
10101400:	00840474 	movhi	r2,4113
10101404:	108ba404 	addi	r2,r2,11920
10101408:	300f883a 	mov	r7,r6
1010140c:	280d883a 	mov	r6,r5
10101410:	200b883a 	mov	r5,r4
10101414:	11000017 	ldw	r4,0(r2)
10101418:	0100fbc1 	jmpi	10100fbc <_fseeko_r>

1010141c <_fstat_r>:
1010141c:	defffd04 	addi	sp,sp,-12
10101420:	2805883a 	mov	r2,r5
10101424:	dc000015 	stw	r16,0(sp)
10101428:	04040474 	movhi	r16,4113
1010142c:	dc400115 	stw	r17,4(sp)
10101430:	84129e04 	addi	r16,r16,19064
10101434:	2023883a 	mov	r17,r4
10101438:	300b883a 	mov	r5,r6
1010143c:	1009883a 	mov	r4,r2
10101440:	dfc00215 	stw	ra,8(sp)
10101444:	80000015 	stw	zero,0(r16)
10101448:	010e4400 	call	1010e440 <fstat>
1010144c:	00ffffc4 	movi	r3,-1
10101450:	10c00526 	beq	r2,r3,10101468 <_fstat_r+0x4c>
10101454:	dfc00217 	ldw	ra,8(sp)
10101458:	dc400117 	ldw	r17,4(sp)
1010145c:	dc000017 	ldw	r16,0(sp)
10101460:	dec00304 	addi	sp,sp,12
10101464:	f800283a 	ret
10101468:	80c00017 	ldw	r3,0(r16)
1010146c:	183ff926 	beq	r3,zero,10101454 <__alt_data_end+0xfffe1454>
10101470:	88c00015 	stw	r3,0(r17)
10101474:	003ff706 	br	10101454 <__alt_data_end+0xfffe1454>

10101478 <__smakebuf_r>:
10101478:	2880030b 	ldhu	r2,12(r5)
1010147c:	10c0008c 	andi	r3,r2,2
10101480:	1800411e 	bne	r3,zero,10101588 <__smakebuf_r+0x110>
10101484:	deffec04 	addi	sp,sp,-80
10101488:	dc000f15 	stw	r16,60(sp)
1010148c:	2821883a 	mov	r16,r5
10101490:	2940038f 	ldh	r5,14(r5)
10101494:	dc401015 	stw	r17,64(sp)
10101498:	dfc01315 	stw	ra,76(sp)
1010149c:	dcc01215 	stw	r19,72(sp)
101014a0:	dc801115 	stw	r18,68(sp)
101014a4:	2023883a 	mov	r17,r4
101014a8:	28001c16 	blt	r5,zero,1010151c <__smakebuf_r+0xa4>
101014ac:	d80d883a 	mov	r6,sp
101014b0:	010141c0 	call	1010141c <_fstat_r>
101014b4:	10001816 	blt	r2,zero,10101518 <__smakebuf_r+0xa0>
101014b8:	d8800117 	ldw	r2,4(sp)
101014bc:	00e00014 	movui	r3,32768
101014c0:	10bc000c 	andi	r2,r2,61440
101014c4:	14c80020 	cmpeqi	r19,r2,8192
101014c8:	10c03726 	beq	r2,r3,101015a8 <__smakebuf_r+0x130>
101014cc:	80c0030b 	ldhu	r3,12(r16)
101014d0:	18c20014 	ori	r3,r3,2048
101014d4:	80c0030d 	sth	r3,12(r16)
101014d8:	00c80004 	movi	r3,8192
101014dc:	10c0521e 	bne	r2,r3,10101628 <__smakebuf_r+0x1b0>
101014e0:	8140038f 	ldh	r5,14(r16)
101014e4:	8809883a 	mov	r4,r17
101014e8:	0106df40 	call	10106df4 <_isatty_r>
101014ec:	10004c26 	beq	r2,zero,10101620 <__smakebuf_r+0x1a8>
101014f0:	8080030b 	ldhu	r2,12(r16)
101014f4:	80c010c4 	addi	r3,r16,67
101014f8:	80c00015 	stw	r3,0(r16)
101014fc:	10800054 	ori	r2,r2,1
10101500:	8080030d 	sth	r2,12(r16)
10101504:	00800044 	movi	r2,1
10101508:	80c00415 	stw	r3,16(r16)
1010150c:	80800515 	stw	r2,20(r16)
10101510:	04810004 	movi	r18,1024
10101514:	00000706 	br	10101534 <__smakebuf_r+0xbc>
10101518:	8080030b 	ldhu	r2,12(r16)
1010151c:	10c0200c 	andi	r3,r2,128
10101520:	18001f1e 	bne	r3,zero,101015a0 <__smakebuf_r+0x128>
10101524:	04810004 	movi	r18,1024
10101528:	10820014 	ori	r2,r2,2048
1010152c:	8080030d 	sth	r2,12(r16)
10101530:	0027883a 	mov	r19,zero
10101534:	900b883a 	mov	r5,r18
10101538:	8809883a 	mov	r4,r17
1010153c:	01016340 	call	10101634 <_malloc_r>
10101540:	10002c26 	beq	r2,zero,101015f4 <__smakebuf_r+0x17c>
10101544:	80c0030b 	ldhu	r3,12(r16)
10101548:	01040434 	movhi	r4,4112
1010154c:	2118fd04 	addi	r4,r4,25588
10101550:	89000f15 	stw	r4,60(r17)
10101554:	18c02014 	ori	r3,r3,128
10101558:	80c0030d 	sth	r3,12(r16)
1010155c:	80800015 	stw	r2,0(r16)
10101560:	80800415 	stw	r2,16(r16)
10101564:	84800515 	stw	r18,20(r16)
10101568:	98001a1e 	bne	r19,zero,101015d4 <__smakebuf_r+0x15c>
1010156c:	dfc01317 	ldw	ra,76(sp)
10101570:	dcc01217 	ldw	r19,72(sp)
10101574:	dc801117 	ldw	r18,68(sp)
10101578:	dc401017 	ldw	r17,64(sp)
1010157c:	dc000f17 	ldw	r16,60(sp)
10101580:	dec01404 	addi	sp,sp,80
10101584:	f800283a 	ret
10101588:	288010c4 	addi	r2,r5,67
1010158c:	28800015 	stw	r2,0(r5)
10101590:	28800415 	stw	r2,16(r5)
10101594:	00800044 	movi	r2,1
10101598:	28800515 	stw	r2,20(r5)
1010159c:	f800283a 	ret
101015a0:	04801004 	movi	r18,64
101015a4:	003fe006 	br	10101528 <__alt_data_end+0xfffe1528>
101015a8:	81000a17 	ldw	r4,40(r16)
101015ac:	00c40434 	movhi	r3,4112
101015b0:	18c8d404 	addi	r3,r3,9040
101015b4:	20ffc51e 	bne	r4,r3,101014cc <__alt_data_end+0xfffe14cc>
101015b8:	8080030b 	ldhu	r2,12(r16)
101015bc:	04810004 	movi	r18,1024
101015c0:	84801315 	stw	r18,76(r16)
101015c4:	1484b03a 	or	r2,r2,r18
101015c8:	8080030d 	sth	r2,12(r16)
101015cc:	0027883a 	mov	r19,zero
101015d0:	003fd806 	br	10101534 <__alt_data_end+0xfffe1534>
101015d4:	8140038f 	ldh	r5,14(r16)
101015d8:	8809883a 	mov	r4,r17
101015dc:	0106df40 	call	10106df4 <_isatty_r>
101015e0:	103fe226 	beq	r2,zero,1010156c <__alt_data_end+0xfffe156c>
101015e4:	8080030b 	ldhu	r2,12(r16)
101015e8:	10800054 	ori	r2,r2,1
101015ec:	8080030d 	sth	r2,12(r16)
101015f0:	003fde06 	br	1010156c <__alt_data_end+0xfffe156c>
101015f4:	8080030b 	ldhu	r2,12(r16)
101015f8:	10c0800c 	andi	r3,r2,512
101015fc:	183fdb1e 	bne	r3,zero,1010156c <__alt_data_end+0xfffe156c>
10101600:	10800094 	ori	r2,r2,2
10101604:	80c010c4 	addi	r3,r16,67
10101608:	8080030d 	sth	r2,12(r16)
1010160c:	00800044 	movi	r2,1
10101610:	80c00015 	stw	r3,0(r16)
10101614:	80c00415 	stw	r3,16(r16)
10101618:	80800515 	stw	r2,20(r16)
1010161c:	003fd306 	br	1010156c <__alt_data_end+0xfffe156c>
10101620:	04810004 	movi	r18,1024
10101624:	003fc306 	br	10101534 <__alt_data_end+0xfffe1534>
10101628:	0027883a 	mov	r19,zero
1010162c:	04810004 	movi	r18,1024
10101630:	003fc006 	br	10101534 <__alt_data_end+0xfffe1534>

10101634 <_malloc_r>:
10101634:	defff504 	addi	sp,sp,-44
10101638:	dc800315 	stw	r18,12(sp)
1010163c:	dfc00a15 	stw	ra,40(sp)
10101640:	df000915 	stw	fp,36(sp)
10101644:	ddc00815 	stw	r23,32(sp)
10101648:	dd800715 	stw	r22,28(sp)
1010164c:	dd400615 	stw	r21,24(sp)
10101650:	dd000515 	stw	r20,20(sp)
10101654:	dcc00415 	stw	r19,16(sp)
10101658:	dc400215 	stw	r17,8(sp)
1010165c:	dc000115 	stw	r16,4(sp)
10101660:	288002c4 	addi	r2,r5,11
10101664:	00c00584 	movi	r3,22
10101668:	2025883a 	mov	r18,r4
1010166c:	18807f2e 	bgeu	r3,r2,1010186c <_malloc_r+0x238>
10101670:	047ffe04 	movi	r17,-8
10101674:	1462703a 	and	r17,r2,r17
10101678:	8800a316 	blt	r17,zero,10101908 <_malloc_r+0x2d4>
1010167c:	8940a236 	bltu	r17,r5,10101908 <_malloc_r+0x2d4>
10101680:	010e9d40 	call	1010e9d4 <__malloc_lock>
10101684:	00807dc4 	movi	r2,503
10101688:	1441e92e 	bgeu	r2,r17,10101e30 <_malloc_r+0x7fc>
1010168c:	8804d27a 	srli	r2,r17,9
10101690:	1000a126 	beq	r2,zero,10101918 <_malloc_r+0x2e4>
10101694:	00c00104 	movi	r3,4
10101698:	18811e36 	bltu	r3,r2,10101b14 <_malloc_r+0x4e0>
1010169c:	8804d1ba 	srli	r2,r17,6
101016a0:	12000e44 	addi	r8,r2,57
101016a4:	11c00e04 	addi	r7,r2,56
101016a8:	4209883a 	add	r4,r8,r8
101016ac:	04c40474 	movhi	r19,4113
101016b0:	2109883a 	add	r4,r4,r4
101016b4:	9cc5f504 	addi	r19,r19,6100
101016b8:	2109883a 	add	r4,r4,r4
101016bc:	9909883a 	add	r4,r19,r4
101016c0:	24000117 	ldw	r16,4(r4)
101016c4:	213ffe04 	addi	r4,r4,-8
101016c8:	24009726 	beq	r4,r16,10101928 <_malloc_r+0x2f4>
101016cc:	80800117 	ldw	r2,4(r16)
101016d0:	01bfff04 	movi	r6,-4
101016d4:	014003c4 	movi	r5,15
101016d8:	1184703a 	and	r2,r2,r6
101016dc:	1447c83a 	sub	r3,r2,r17
101016e0:	28c00716 	blt	r5,r3,10101700 <_malloc_r+0xcc>
101016e4:	1800920e 	bge	r3,zero,10101930 <_malloc_r+0x2fc>
101016e8:	84000317 	ldw	r16,12(r16)
101016ec:	24008e26 	beq	r4,r16,10101928 <_malloc_r+0x2f4>
101016f0:	80800117 	ldw	r2,4(r16)
101016f4:	1184703a 	and	r2,r2,r6
101016f8:	1447c83a 	sub	r3,r2,r17
101016fc:	28fff90e 	bge	r5,r3,101016e4 <__alt_data_end+0xfffe16e4>
10101700:	3809883a 	mov	r4,r7
10101704:	01840474 	movhi	r6,4113
10101708:	9c000417 	ldw	r16,16(r19)
1010170c:	3185f504 	addi	r6,r6,6100
10101710:	32000204 	addi	r8,r6,8
10101714:	82013426 	beq	r16,r8,10101be8 <_malloc_r+0x5b4>
10101718:	80c00117 	ldw	r3,4(r16)
1010171c:	00bfff04 	movi	r2,-4
10101720:	188e703a 	and	r7,r3,r2
10101724:	3c45c83a 	sub	r2,r7,r17
10101728:	00c003c4 	movi	r3,15
1010172c:	18811f16 	blt	r3,r2,10101bac <_malloc_r+0x578>
10101730:	32000515 	stw	r8,20(r6)
10101734:	32000415 	stw	r8,16(r6)
10101738:	10007f0e 	bge	r2,zero,10101938 <_malloc_r+0x304>
1010173c:	00807fc4 	movi	r2,511
10101740:	11c0fd36 	bltu	r2,r7,10101b38 <_malloc_r+0x504>
10101744:	3806d0fa 	srli	r3,r7,3
10101748:	01c00044 	movi	r7,1
1010174c:	30800117 	ldw	r2,4(r6)
10101750:	19400044 	addi	r5,r3,1
10101754:	294b883a 	add	r5,r5,r5
10101758:	1807d0ba 	srai	r3,r3,2
1010175c:	294b883a 	add	r5,r5,r5
10101760:	294b883a 	add	r5,r5,r5
10101764:	298b883a 	add	r5,r5,r6
10101768:	38c6983a 	sll	r3,r7,r3
1010176c:	29c00017 	ldw	r7,0(r5)
10101770:	2a7ffe04 	addi	r9,r5,-8
10101774:	1886b03a 	or	r3,r3,r2
10101778:	82400315 	stw	r9,12(r16)
1010177c:	81c00215 	stw	r7,8(r16)
10101780:	30c00115 	stw	r3,4(r6)
10101784:	2c000015 	stw	r16,0(r5)
10101788:	3c000315 	stw	r16,12(r7)
1010178c:	2005d0ba 	srai	r2,r4,2
10101790:	01400044 	movi	r5,1
10101794:	288a983a 	sll	r5,r5,r2
10101798:	19406f36 	bltu	r3,r5,10101958 <_malloc_r+0x324>
1010179c:	28c4703a 	and	r2,r5,r3
101017a0:	10000a1e 	bne	r2,zero,101017cc <_malloc_r+0x198>
101017a4:	00bfff04 	movi	r2,-4
101017a8:	294b883a 	add	r5,r5,r5
101017ac:	2088703a 	and	r4,r4,r2
101017b0:	28c4703a 	and	r2,r5,r3
101017b4:	21000104 	addi	r4,r4,4
101017b8:	1000041e 	bne	r2,zero,101017cc <_malloc_r+0x198>
101017bc:	294b883a 	add	r5,r5,r5
101017c0:	28c4703a 	and	r2,r5,r3
101017c4:	21000104 	addi	r4,r4,4
101017c8:	103ffc26 	beq	r2,zero,101017bc <__alt_data_end+0xfffe17bc>
101017cc:	02bfff04 	movi	r10,-4
101017d0:	024003c4 	movi	r9,15
101017d4:	21800044 	addi	r6,r4,1
101017d8:	318d883a 	add	r6,r6,r6
101017dc:	318d883a 	add	r6,r6,r6
101017e0:	318d883a 	add	r6,r6,r6
101017e4:	998d883a 	add	r6,r19,r6
101017e8:	333ffe04 	addi	r12,r6,-8
101017ec:	2017883a 	mov	r11,r4
101017f0:	31800104 	addi	r6,r6,4
101017f4:	34000017 	ldw	r16,0(r6)
101017f8:	31fffd04 	addi	r7,r6,-12
101017fc:	81c0041e 	bne	r16,r7,10101810 <_malloc_r+0x1dc>
10101800:	0000fb06 	br	10101bf0 <_malloc_r+0x5bc>
10101804:	1801030e 	bge	r3,zero,10101c14 <_malloc_r+0x5e0>
10101808:	84000317 	ldw	r16,12(r16)
1010180c:	81c0f826 	beq	r16,r7,10101bf0 <_malloc_r+0x5bc>
10101810:	80800117 	ldw	r2,4(r16)
10101814:	1284703a 	and	r2,r2,r10
10101818:	1447c83a 	sub	r3,r2,r17
1010181c:	48fff90e 	bge	r9,r3,10101804 <__alt_data_end+0xfffe1804>
10101820:	80800317 	ldw	r2,12(r16)
10101824:	81000217 	ldw	r4,8(r16)
10101828:	89400054 	ori	r5,r17,1
1010182c:	81400115 	stw	r5,4(r16)
10101830:	20800315 	stw	r2,12(r4)
10101834:	11000215 	stw	r4,8(r2)
10101838:	8463883a 	add	r17,r16,r17
1010183c:	9c400515 	stw	r17,20(r19)
10101840:	9c400415 	stw	r17,16(r19)
10101844:	18800054 	ori	r2,r3,1
10101848:	88800115 	stw	r2,4(r17)
1010184c:	8a000315 	stw	r8,12(r17)
10101850:	8a000215 	stw	r8,8(r17)
10101854:	88e3883a 	add	r17,r17,r3
10101858:	88c00015 	stw	r3,0(r17)
1010185c:	9009883a 	mov	r4,r18
10101860:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101864:	80800204 	addi	r2,r16,8
10101868:	00001b06 	br	101018d8 <_malloc_r+0x2a4>
1010186c:	04400404 	movi	r17,16
10101870:	89402536 	bltu	r17,r5,10101908 <_malloc_r+0x2d4>
10101874:	010e9d40 	call	1010e9d4 <__malloc_lock>
10101878:	00800184 	movi	r2,6
1010187c:	01000084 	movi	r4,2
10101880:	04c40474 	movhi	r19,4113
10101884:	1085883a 	add	r2,r2,r2
10101888:	9cc5f504 	addi	r19,r19,6100
1010188c:	1085883a 	add	r2,r2,r2
10101890:	9885883a 	add	r2,r19,r2
10101894:	14000117 	ldw	r16,4(r2)
10101898:	10fffe04 	addi	r3,r2,-8
1010189c:	80c0d926 	beq	r16,r3,10101c04 <_malloc_r+0x5d0>
101018a0:	80c00117 	ldw	r3,4(r16)
101018a4:	81000317 	ldw	r4,12(r16)
101018a8:	00bfff04 	movi	r2,-4
101018ac:	1884703a 	and	r2,r3,r2
101018b0:	81400217 	ldw	r5,8(r16)
101018b4:	8085883a 	add	r2,r16,r2
101018b8:	10c00117 	ldw	r3,4(r2)
101018bc:	29000315 	stw	r4,12(r5)
101018c0:	21400215 	stw	r5,8(r4)
101018c4:	18c00054 	ori	r3,r3,1
101018c8:	10c00115 	stw	r3,4(r2)
101018cc:	9009883a 	mov	r4,r18
101018d0:	010e9f80 	call	1010e9f8 <__malloc_unlock>
101018d4:	80800204 	addi	r2,r16,8
101018d8:	dfc00a17 	ldw	ra,40(sp)
101018dc:	df000917 	ldw	fp,36(sp)
101018e0:	ddc00817 	ldw	r23,32(sp)
101018e4:	dd800717 	ldw	r22,28(sp)
101018e8:	dd400617 	ldw	r21,24(sp)
101018ec:	dd000517 	ldw	r20,20(sp)
101018f0:	dcc00417 	ldw	r19,16(sp)
101018f4:	dc800317 	ldw	r18,12(sp)
101018f8:	dc400217 	ldw	r17,8(sp)
101018fc:	dc000117 	ldw	r16,4(sp)
10101900:	dec00b04 	addi	sp,sp,44
10101904:	f800283a 	ret
10101908:	00800304 	movi	r2,12
1010190c:	90800015 	stw	r2,0(r18)
10101910:	0005883a 	mov	r2,zero
10101914:	003ff006 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101918:	01002004 	movi	r4,128
1010191c:	02001004 	movi	r8,64
10101920:	01c00fc4 	movi	r7,63
10101924:	003f6106 	br	101016ac <__alt_data_end+0xfffe16ac>
10101928:	4009883a 	mov	r4,r8
1010192c:	003f7506 	br	10101704 <__alt_data_end+0xfffe1704>
10101930:	81000317 	ldw	r4,12(r16)
10101934:	003fde06 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101938:	81c5883a 	add	r2,r16,r7
1010193c:	11400117 	ldw	r5,4(r2)
10101940:	9009883a 	mov	r4,r18
10101944:	29400054 	ori	r5,r5,1
10101948:	11400115 	stw	r5,4(r2)
1010194c:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101950:	80800204 	addi	r2,r16,8
10101954:	003fe006 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101958:	9c000217 	ldw	r16,8(r19)
1010195c:	00bfff04 	movi	r2,-4
10101960:	85800117 	ldw	r22,4(r16)
10101964:	b0ac703a 	and	r22,r22,r2
10101968:	b4400336 	bltu	r22,r17,10101978 <_malloc_r+0x344>
1010196c:	b445c83a 	sub	r2,r22,r17
10101970:	00c003c4 	movi	r3,15
10101974:	18805d16 	blt	r3,r2,10101aec <_malloc_r+0x4b8>
10101978:	05c40474 	movhi	r23,4113
1010197c:	00840474 	movhi	r2,4113
10101980:	1092a104 	addi	r2,r2,19076
10101984:	bdcba504 	addi	r23,r23,11924
10101988:	15400017 	ldw	r21,0(r2)
1010198c:	b8c00017 	ldw	r3,0(r23)
10101990:	00bfffc4 	movi	r2,-1
10101994:	858d883a 	add	r6,r16,r22
10101998:	8d6b883a 	add	r21,r17,r21
1010199c:	1880ea26 	beq	r3,r2,10101d48 <_malloc_r+0x714>
101019a0:	ad4403c4 	addi	r21,r21,4111
101019a4:	00bc0004 	movi	r2,-4096
101019a8:	a8aa703a 	and	r21,r21,r2
101019ac:	a80b883a 	mov	r5,r21
101019b0:	9009883a 	mov	r4,r18
101019b4:	d9800015 	stw	r6,0(sp)
101019b8:	01022240 	call	10102224 <_sbrk_r>
101019bc:	1029883a 	mov	r20,r2
101019c0:	00bfffc4 	movi	r2,-1
101019c4:	d9800017 	ldw	r6,0(sp)
101019c8:	a080e826 	beq	r20,r2,10101d6c <_malloc_r+0x738>
101019cc:	a180a636 	bltu	r20,r6,10101c68 <_malloc_r+0x634>
101019d0:	07040474 	movhi	fp,4113
101019d4:	e712ac04 	addi	fp,fp,19120
101019d8:	e0800017 	ldw	r2,0(fp)
101019dc:	a887883a 	add	r3,r21,r2
101019e0:	e0c00015 	stw	r3,0(fp)
101019e4:	3500e626 	beq	r6,r20,10101d80 <_malloc_r+0x74c>
101019e8:	b9000017 	ldw	r4,0(r23)
101019ec:	00bfffc4 	movi	r2,-1
101019f0:	2080ee26 	beq	r4,r2,10101dac <_malloc_r+0x778>
101019f4:	a185c83a 	sub	r2,r20,r6
101019f8:	10c5883a 	add	r2,r2,r3
101019fc:	e0800015 	stw	r2,0(fp)
10101a00:	a0c001cc 	andi	r3,r20,7
10101a04:	1800bc26 	beq	r3,zero,10101cf8 <_malloc_r+0x6c4>
10101a08:	a0e9c83a 	sub	r20,r20,r3
10101a0c:	00840204 	movi	r2,4104
10101a10:	a5000204 	addi	r20,r20,8
10101a14:	10c7c83a 	sub	r3,r2,r3
10101a18:	a545883a 	add	r2,r20,r21
10101a1c:	1083ffcc 	andi	r2,r2,4095
10101a20:	18abc83a 	sub	r21,r3,r2
10101a24:	a80b883a 	mov	r5,r21
10101a28:	9009883a 	mov	r4,r18
10101a2c:	01022240 	call	10102224 <_sbrk_r>
10101a30:	00ffffc4 	movi	r3,-1
10101a34:	10c0e126 	beq	r2,r3,10101dbc <_malloc_r+0x788>
10101a38:	1505c83a 	sub	r2,r2,r20
10101a3c:	1545883a 	add	r2,r2,r21
10101a40:	10800054 	ori	r2,r2,1
10101a44:	e0c00017 	ldw	r3,0(fp)
10101a48:	9d000215 	stw	r20,8(r19)
10101a4c:	a0800115 	stw	r2,4(r20)
10101a50:	a8c7883a 	add	r3,r21,r3
10101a54:	e0c00015 	stw	r3,0(fp)
10101a58:	84c00e26 	beq	r16,r19,10101a94 <_malloc_r+0x460>
10101a5c:	018003c4 	movi	r6,15
10101a60:	3580a72e 	bgeu	r6,r22,10101d00 <_malloc_r+0x6cc>
10101a64:	81400117 	ldw	r5,4(r16)
10101a68:	013ffe04 	movi	r4,-8
10101a6c:	b0bffd04 	addi	r2,r22,-12
10101a70:	1104703a 	and	r2,r2,r4
10101a74:	2900004c 	andi	r4,r5,1
10101a78:	2088b03a 	or	r4,r4,r2
10101a7c:	81000115 	stw	r4,4(r16)
10101a80:	01400144 	movi	r5,5
10101a84:	8089883a 	add	r4,r16,r2
10101a88:	21400115 	stw	r5,4(r4)
10101a8c:	21400215 	stw	r5,8(r4)
10101a90:	3080cd36 	bltu	r6,r2,10101dc8 <_malloc_r+0x794>
10101a94:	00840474 	movhi	r2,4113
10101a98:	1092a004 	addi	r2,r2,19072
10101a9c:	11000017 	ldw	r4,0(r2)
10101aa0:	20c0012e 	bgeu	r4,r3,10101aa8 <_malloc_r+0x474>
10101aa4:	10c00015 	stw	r3,0(r2)
10101aa8:	00840474 	movhi	r2,4113
10101aac:	10929f04 	addi	r2,r2,19068
10101ab0:	11000017 	ldw	r4,0(r2)
10101ab4:	9c000217 	ldw	r16,8(r19)
10101ab8:	20c0012e 	bgeu	r4,r3,10101ac0 <_malloc_r+0x48c>
10101abc:	10c00015 	stw	r3,0(r2)
10101ac0:	80c00117 	ldw	r3,4(r16)
10101ac4:	00bfff04 	movi	r2,-4
10101ac8:	1886703a 	and	r3,r3,r2
10101acc:	1c45c83a 	sub	r2,r3,r17
10101ad0:	1c400236 	bltu	r3,r17,10101adc <_malloc_r+0x4a8>
10101ad4:	00c003c4 	movi	r3,15
10101ad8:	18800416 	blt	r3,r2,10101aec <_malloc_r+0x4b8>
10101adc:	9009883a 	mov	r4,r18
10101ae0:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101ae4:	0005883a 	mov	r2,zero
10101ae8:	003f7b06 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101aec:	88c00054 	ori	r3,r17,1
10101af0:	80c00115 	stw	r3,4(r16)
10101af4:	8463883a 	add	r17,r16,r17
10101af8:	10800054 	ori	r2,r2,1
10101afc:	9c400215 	stw	r17,8(r19)
10101b00:	88800115 	stw	r2,4(r17)
10101b04:	9009883a 	mov	r4,r18
10101b08:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101b0c:	80800204 	addi	r2,r16,8
10101b10:	003f7106 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101b14:	00c00504 	movi	r3,20
10101b18:	18804a2e 	bgeu	r3,r2,10101c44 <_malloc_r+0x610>
10101b1c:	00c01504 	movi	r3,84
10101b20:	18806e36 	bltu	r3,r2,10101cdc <_malloc_r+0x6a8>
10101b24:	8804d33a 	srli	r2,r17,12
10101b28:	12001bc4 	addi	r8,r2,111
10101b2c:	11c01b84 	addi	r7,r2,110
10101b30:	4209883a 	add	r4,r8,r8
10101b34:	003edd06 	br	101016ac <__alt_data_end+0xfffe16ac>
10101b38:	3804d27a 	srli	r2,r7,9
10101b3c:	00c00104 	movi	r3,4
10101b40:	1880442e 	bgeu	r3,r2,10101c54 <_malloc_r+0x620>
10101b44:	00c00504 	movi	r3,20
10101b48:	18808136 	bltu	r3,r2,10101d50 <_malloc_r+0x71c>
10101b4c:	11401704 	addi	r5,r2,92
10101b50:	10c016c4 	addi	r3,r2,91
10101b54:	294b883a 	add	r5,r5,r5
10101b58:	294b883a 	add	r5,r5,r5
10101b5c:	294b883a 	add	r5,r5,r5
10101b60:	994b883a 	add	r5,r19,r5
10101b64:	28800017 	ldw	r2,0(r5)
10101b68:	01840474 	movhi	r6,4113
10101b6c:	297ffe04 	addi	r5,r5,-8
10101b70:	3185f504 	addi	r6,r6,6100
10101b74:	28806526 	beq	r5,r2,10101d0c <_malloc_r+0x6d8>
10101b78:	01bfff04 	movi	r6,-4
10101b7c:	10c00117 	ldw	r3,4(r2)
10101b80:	1986703a 	and	r3,r3,r6
10101b84:	38c0022e 	bgeu	r7,r3,10101b90 <_malloc_r+0x55c>
10101b88:	10800217 	ldw	r2,8(r2)
10101b8c:	28bffb1e 	bne	r5,r2,10101b7c <__alt_data_end+0xfffe1b7c>
10101b90:	11400317 	ldw	r5,12(r2)
10101b94:	98c00117 	ldw	r3,4(r19)
10101b98:	81400315 	stw	r5,12(r16)
10101b9c:	80800215 	stw	r2,8(r16)
10101ba0:	2c000215 	stw	r16,8(r5)
10101ba4:	14000315 	stw	r16,12(r2)
10101ba8:	003ef806 	br	1010178c <__alt_data_end+0xfffe178c>
10101bac:	88c00054 	ori	r3,r17,1
10101bb0:	80c00115 	stw	r3,4(r16)
10101bb4:	8463883a 	add	r17,r16,r17
10101bb8:	34400515 	stw	r17,20(r6)
10101bbc:	34400415 	stw	r17,16(r6)
10101bc0:	10c00054 	ori	r3,r2,1
10101bc4:	8a000315 	stw	r8,12(r17)
10101bc8:	8a000215 	stw	r8,8(r17)
10101bcc:	88c00115 	stw	r3,4(r17)
10101bd0:	88a3883a 	add	r17,r17,r2
10101bd4:	88800015 	stw	r2,0(r17)
10101bd8:	9009883a 	mov	r4,r18
10101bdc:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101be0:	80800204 	addi	r2,r16,8
10101be4:	003f3c06 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101be8:	30c00117 	ldw	r3,4(r6)
10101bec:	003ee706 	br	1010178c <__alt_data_end+0xfffe178c>
10101bf0:	5ac00044 	addi	r11,r11,1
10101bf4:	588000cc 	andi	r2,r11,3
10101bf8:	31800204 	addi	r6,r6,8
10101bfc:	103efd1e 	bne	r2,zero,101017f4 <__alt_data_end+0xfffe17f4>
10101c00:	00002406 	br	10101c94 <_malloc_r+0x660>
10101c04:	14000317 	ldw	r16,12(r2)
10101c08:	143f251e 	bne	r2,r16,101018a0 <__alt_data_end+0xfffe18a0>
10101c0c:	21000084 	addi	r4,r4,2
10101c10:	003ebc06 	br	10101704 <__alt_data_end+0xfffe1704>
10101c14:	8085883a 	add	r2,r16,r2
10101c18:	10c00117 	ldw	r3,4(r2)
10101c1c:	81000317 	ldw	r4,12(r16)
10101c20:	81400217 	ldw	r5,8(r16)
10101c24:	18c00054 	ori	r3,r3,1
10101c28:	10c00115 	stw	r3,4(r2)
10101c2c:	29000315 	stw	r4,12(r5)
10101c30:	21400215 	stw	r5,8(r4)
10101c34:	9009883a 	mov	r4,r18
10101c38:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10101c3c:	80800204 	addi	r2,r16,8
10101c40:	003f2506 	br	101018d8 <__alt_data_end+0xfffe18d8>
10101c44:	12001704 	addi	r8,r2,92
10101c48:	11c016c4 	addi	r7,r2,91
10101c4c:	4209883a 	add	r4,r8,r8
10101c50:	003e9606 	br	101016ac <__alt_data_end+0xfffe16ac>
10101c54:	3804d1ba 	srli	r2,r7,6
10101c58:	11400e44 	addi	r5,r2,57
10101c5c:	10c00e04 	addi	r3,r2,56
10101c60:	294b883a 	add	r5,r5,r5
10101c64:	003fbc06 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101c68:	84ff5926 	beq	r16,r19,101019d0 <__alt_data_end+0xfffe19d0>
10101c6c:	00840474 	movhi	r2,4113
10101c70:	1085f504 	addi	r2,r2,6100
10101c74:	14000217 	ldw	r16,8(r2)
10101c78:	00bfff04 	movi	r2,-4
10101c7c:	80c00117 	ldw	r3,4(r16)
10101c80:	1886703a 	and	r3,r3,r2
10101c84:	003f9106 	br	10101acc <__alt_data_end+0xfffe1acc>
10101c88:	60800217 	ldw	r2,8(r12)
10101c8c:	213fffc4 	addi	r4,r4,-1
10101c90:	1300651e 	bne	r2,r12,10101e28 <_malloc_r+0x7f4>
10101c94:	208000cc 	andi	r2,r4,3
10101c98:	633ffe04 	addi	r12,r12,-8
10101c9c:	103ffa1e 	bne	r2,zero,10101c88 <__alt_data_end+0xfffe1c88>
10101ca0:	98800117 	ldw	r2,4(r19)
10101ca4:	0146303a 	nor	r3,zero,r5
10101ca8:	1884703a 	and	r2,r3,r2
10101cac:	98800115 	stw	r2,4(r19)
10101cb0:	294b883a 	add	r5,r5,r5
10101cb4:	117f2836 	bltu	r2,r5,10101958 <__alt_data_end+0xfffe1958>
10101cb8:	283f2726 	beq	r5,zero,10101958 <__alt_data_end+0xfffe1958>
10101cbc:	2886703a 	and	r3,r5,r2
10101cc0:	5809883a 	mov	r4,r11
10101cc4:	183ec31e 	bne	r3,zero,101017d4 <__alt_data_end+0xfffe17d4>
10101cc8:	294b883a 	add	r5,r5,r5
10101ccc:	2886703a 	and	r3,r5,r2
10101cd0:	21000104 	addi	r4,r4,4
10101cd4:	183ffc26 	beq	r3,zero,10101cc8 <__alt_data_end+0xfffe1cc8>
10101cd8:	003ebe06 	br	101017d4 <__alt_data_end+0xfffe17d4>
10101cdc:	00c05504 	movi	r3,340
10101ce0:	18801236 	bltu	r3,r2,10101d2c <_malloc_r+0x6f8>
10101ce4:	8804d3fa 	srli	r2,r17,15
10101ce8:	12001e04 	addi	r8,r2,120
10101cec:	11c01dc4 	addi	r7,r2,119
10101cf0:	4209883a 	add	r4,r8,r8
10101cf4:	003e6d06 	br	101016ac <__alt_data_end+0xfffe16ac>
10101cf8:	00c40004 	movi	r3,4096
10101cfc:	003f4606 	br	10101a18 <__alt_data_end+0xfffe1a18>
10101d00:	00800044 	movi	r2,1
10101d04:	a0800115 	stw	r2,4(r20)
10101d08:	003f7406 	br	10101adc <__alt_data_end+0xfffe1adc>
10101d0c:	1805d0ba 	srai	r2,r3,2
10101d10:	01c00044 	movi	r7,1
10101d14:	30c00117 	ldw	r3,4(r6)
10101d18:	388e983a 	sll	r7,r7,r2
10101d1c:	2805883a 	mov	r2,r5
10101d20:	38c6b03a 	or	r3,r7,r3
10101d24:	30c00115 	stw	r3,4(r6)
10101d28:	003f9b06 	br	10101b98 <__alt_data_end+0xfffe1b98>
10101d2c:	00c15504 	movi	r3,1364
10101d30:	18801a36 	bltu	r3,r2,10101d9c <_malloc_r+0x768>
10101d34:	8804d4ba 	srli	r2,r17,18
10101d38:	12001f44 	addi	r8,r2,125
10101d3c:	11c01f04 	addi	r7,r2,124
10101d40:	4209883a 	add	r4,r8,r8
10101d44:	003e5906 	br	101016ac <__alt_data_end+0xfffe16ac>
10101d48:	ad400404 	addi	r21,r21,16
10101d4c:	003f1706 	br	101019ac <__alt_data_end+0xfffe19ac>
10101d50:	00c01504 	movi	r3,84
10101d54:	18802336 	bltu	r3,r2,10101de4 <_malloc_r+0x7b0>
10101d58:	3804d33a 	srli	r2,r7,12
10101d5c:	11401bc4 	addi	r5,r2,111
10101d60:	10c01b84 	addi	r3,r2,110
10101d64:	294b883a 	add	r5,r5,r5
10101d68:	003f7b06 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101d6c:	9c000217 	ldw	r16,8(r19)
10101d70:	00bfff04 	movi	r2,-4
10101d74:	80c00117 	ldw	r3,4(r16)
10101d78:	1886703a 	and	r3,r3,r2
10101d7c:	003f5306 	br	10101acc <__alt_data_end+0xfffe1acc>
10101d80:	3083ffcc 	andi	r2,r6,4095
10101d84:	103f181e 	bne	r2,zero,101019e8 <__alt_data_end+0xfffe19e8>
10101d88:	99000217 	ldw	r4,8(r19)
10101d8c:	b545883a 	add	r2,r22,r21
10101d90:	10800054 	ori	r2,r2,1
10101d94:	20800115 	stw	r2,4(r4)
10101d98:	003f3e06 	br	10101a94 <__alt_data_end+0xfffe1a94>
10101d9c:	01003f84 	movi	r4,254
10101da0:	02001fc4 	movi	r8,127
10101da4:	01c01f84 	movi	r7,126
10101da8:	003e4006 	br	101016ac <__alt_data_end+0xfffe16ac>
10101dac:	00840474 	movhi	r2,4113
10101db0:	108ba504 	addi	r2,r2,11924
10101db4:	15000015 	stw	r20,0(r2)
10101db8:	003f1106 	br	10101a00 <__alt_data_end+0xfffe1a00>
10101dbc:	00800044 	movi	r2,1
10101dc0:	002b883a 	mov	r21,zero
10101dc4:	003f1f06 	br	10101a44 <__alt_data_end+0xfffe1a44>
10101dc8:	81400204 	addi	r5,r16,8
10101dcc:	9009883a 	mov	r4,r18
10101dd0:	010695c0 	call	1010695c <_free_r>
10101dd4:	00840474 	movhi	r2,4113
10101dd8:	1092ac04 	addi	r2,r2,19120
10101ddc:	10c00017 	ldw	r3,0(r2)
10101de0:	003f2c06 	br	10101a94 <__alt_data_end+0xfffe1a94>
10101de4:	00c05504 	movi	r3,340
10101de8:	18800536 	bltu	r3,r2,10101e00 <_malloc_r+0x7cc>
10101dec:	3804d3fa 	srli	r2,r7,15
10101df0:	11401e04 	addi	r5,r2,120
10101df4:	10c01dc4 	addi	r3,r2,119
10101df8:	294b883a 	add	r5,r5,r5
10101dfc:	003f5606 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101e00:	00c15504 	movi	r3,1364
10101e04:	18800536 	bltu	r3,r2,10101e1c <_malloc_r+0x7e8>
10101e08:	3804d4ba 	srli	r2,r7,18
10101e0c:	11401f44 	addi	r5,r2,125
10101e10:	10c01f04 	addi	r3,r2,124
10101e14:	294b883a 	add	r5,r5,r5
10101e18:	003f4f06 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101e1c:	01403f84 	movi	r5,254
10101e20:	00c01f84 	movi	r3,126
10101e24:	003f4c06 	br	10101b58 <__alt_data_end+0xfffe1b58>
10101e28:	98800117 	ldw	r2,4(r19)
10101e2c:	003fa006 	br	10101cb0 <__alt_data_end+0xfffe1cb0>
10101e30:	8808d0fa 	srli	r4,r17,3
10101e34:	20800044 	addi	r2,r4,1
10101e38:	1085883a 	add	r2,r2,r2
10101e3c:	003e9006 	br	10101880 <__alt_data_end+0xfffe1880>

10101e40 <memset>:
10101e40:	20c000cc 	andi	r3,r4,3
10101e44:	2005883a 	mov	r2,r4
10101e48:	18004426 	beq	r3,zero,10101f5c <memset+0x11c>
10101e4c:	31ffffc4 	addi	r7,r6,-1
10101e50:	30004026 	beq	r6,zero,10101f54 <memset+0x114>
10101e54:	2813883a 	mov	r9,r5
10101e58:	200d883a 	mov	r6,r4
10101e5c:	2007883a 	mov	r3,r4
10101e60:	00000406 	br	10101e74 <memset+0x34>
10101e64:	3a3fffc4 	addi	r8,r7,-1
10101e68:	31800044 	addi	r6,r6,1
10101e6c:	38003926 	beq	r7,zero,10101f54 <memset+0x114>
10101e70:	400f883a 	mov	r7,r8
10101e74:	18c00044 	addi	r3,r3,1
10101e78:	32400005 	stb	r9,0(r6)
10101e7c:	1a0000cc 	andi	r8,r3,3
10101e80:	403ff81e 	bne	r8,zero,10101e64 <__alt_data_end+0xfffe1e64>
10101e84:	010000c4 	movi	r4,3
10101e88:	21c02d2e 	bgeu	r4,r7,10101f40 <memset+0x100>
10101e8c:	29003fcc 	andi	r4,r5,255
10101e90:	200c923a 	slli	r6,r4,8
10101e94:	3108b03a 	or	r4,r6,r4
10101e98:	200c943a 	slli	r6,r4,16
10101e9c:	218cb03a 	or	r6,r4,r6
10101ea0:	010003c4 	movi	r4,15
10101ea4:	21c0182e 	bgeu	r4,r7,10101f08 <memset+0xc8>
10101ea8:	3b3ffc04 	addi	r12,r7,-16
10101eac:	6018d13a 	srli	r12,r12,4
10101eb0:	1a000104 	addi	r8,r3,4
10101eb4:	1ac00204 	addi	r11,r3,8
10101eb8:	6008913a 	slli	r4,r12,4
10101ebc:	1a800304 	addi	r10,r3,12
10101ec0:	1813883a 	mov	r9,r3
10101ec4:	21000504 	addi	r4,r4,20
10101ec8:	1909883a 	add	r4,r3,r4
10101ecc:	49800015 	stw	r6,0(r9)
10101ed0:	41800015 	stw	r6,0(r8)
10101ed4:	59800015 	stw	r6,0(r11)
10101ed8:	51800015 	stw	r6,0(r10)
10101edc:	42000404 	addi	r8,r8,16
10101ee0:	4a400404 	addi	r9,r9,16
10101ee4:	5ac00404 	addi	r11,r11,16
10101ee8:	52800404 	addi	r10,r10,16
10101eec:	413ff71e 	bne	r8,r4,10101ecc <__alt_data_end+0xfffe1ecc>
10101ef0:	63000044 	addi	r12,r12,1
10101ef4:	6018913a 	slli	r12,r12,4
10101ef8:	39c003cc 	andi	r7,r7,15
10101efc:	010000c4 	movi	r4,3
10101f00:	1b07883a 	add	r3,r3,r12
10101f04:	21c00e2e 	bgeu	r4,r7,10101f40 <memset+0x100>
10101f08:	1813883a 	mov	r9,r3
10101f0c:	3811883a 	mov	r8,r7
10101f10:	010000c4 	movi	r4,3
10101f14:	49800015 	stw	r6,0(r9)
10101f18:	423fff04 	addi	r8,r8,-4
10101f1c:	4a400104 	addi	r9,r9,4
10101f20:	223ffc36 	bltu	r4,r8,10101f14 <__alt_data_end+0xfffe1f14>
10101f24:	393fff04 	addi	r4,r7,-4
10101f28:	2008d0ba 	srli	r4,r4,2
10101f2c:	39c000cc 	andi	r7,r7,3
10101f30:	21000044 	addi	r4,r4,1
10101f34:	2109883a 	add	r4,r4,r4
10101f38:	2109883a 	add	r4,r4,r4
10101f3c:	1907883a 	add	r3,r3,r4
10101f40:	38000526 	beq	r7,zero,10101f58 <memset+0x118>
10101f44:	19cf883a 	add	r7,r3,r7
10101f48:	19400005 	stb	r5,0(r3)
10101f4c:	18c00044 	addi	r3,r3,1
10101f50:	38fffd1e 	bne	r7,r3,10101f48 <__alt_data_end+0xfffe1f48>
10101f54:	f800283a 	ret
10101f58:	f800283a 	ret
10101f5c:	2007883a 	mov	r3,r4
10101f60:	300f883a 	mov	r7,r6
10101f64:	003fc706 	br	10101e84 <__alt_data_end+0xfffe1e84>

10101f68 <_open_r>:
10101f68:	defffd04 	addi	sp,sp,-12
10101f6c:	2805883a 	mov	r2,r5
10101f70:	dc000015 	stw	r16,0(sp)
10101f74:	04040474 	movhi	r16,4113
10101f78:	dc400115 	stw	r17,4(sp)
10101f7c:	300b883a 	mov	r5,r6
10101f80:	84129e04 	addi	r16,r16,19064
10101f84:	2023883a 	mov	r17,r4
10101f88:	380d883a 	mov	r6,r7
10101f8c:	1009883a 	mov	r4,r2
10101f90:	dfc00215 	stw	ra,8(sp)
10101f94:	80000015 	stw	zero,0(r16)
10101f98:	010eb1c0 	call	1010eb1c <open>
10101f9c:	00ffffc4 	movi	r3,-1
10101fa0:	10c00526 	beq	r2,r3,10101fb8 <_open_r+0x50>
10101fa4:	dfc00217 	ldw	ra,8(sp)
10101fa8:	dc400117 	ldw	r17,4(sp)
10101fac:	dc000017 	ldw	r16,0(sp)
10101fb0:	dec00304 	addi	sp,sp,12
10101fb4:	f800283a 	ret
10101fb8:	80c00017 	ldw	r3,0(r16)
10101fbc:	183ff926 	beq	r3,zero,10101fa4 <__alt_data_end+0xfffe1fa4>
10101fc0:	88c00015 	stw	r3,0(r17)
10101fc4:	003ff706 	br	10101fa4 <__alt_data_end+0xfffe1fa4>

10101fc8 <_printf_r>:
10101fc8:	defffd04 	addi	sp,sp,-12
10101fcc:	2805883a 	mov	r2,r5
10101fd0:	dfc00015 	stw	ra,0(sp)
10101fd4:	d9800115 	stw	r6,4(sp)
10101fd8:	d9c00215 	stw	r7,8(sp)
10101fdc:	21400217 	ldw	r5,8(r4)
10101fe0:	d9c00104 	addi	r7,sp,4
10101fe4:	100d883a 	mov	r6,r2
10101fe8:	01023cc0 	call	101023cc <___vfprintf_internal_r>
10101fec:	dfc00017 	ldw	ra,0(sp)
10101ff0:	dec00304 	addi	sp,sp,12
10101ff4:	f800283a 	ret

10101ff8 <printf>:
10101ff8:	defffc04 	addi	sp,sp,-16
10101ffc:	dfc00015 	stw	ra,0(sp)
10102000:	d9400115 	stw	r5,4(sp)
10102004:	d9800215 	stw	r6,8(sp)
10102008:	d9c00315 	stw	r7,12(sp)
1010200c:	00840474 	movhi	r2,4113
10102010:	108ba404 	addi	r2,r2,11920
10102014:	10800017 	ldw	r2,0(r2)
10102018:	200b883a 	mov	r5,r4
1010201c:	d9800104 	addi	r6,sp,4
10102020:	11000217 	ldw	r4,8(r2)
10102024:	01045c40 	call	101045c4 <__vfprintf_internal>
10102028:	dfc00017 	ldw	ra,0(sp)
1010202c:	dec00404 	addi	sp,sp,16
10102030:	f800283a 	ret

10102034 <lflush>:
10102034:	2080030b 	ldhu	r2,12(r4)
10102038:	00c00244 	movi	r3,9
1010203c:	1080024c 	andi	r2,r2,9
10102040:	10c00226 	beq	r2,r3,1010204c <lflush+0x18>
10102044:	0005883a 	mov	r2,zero
10102048:	f800283a 	ret
1010204c:	01063bc1 	jmpi	101063bc <fflush>

10102050 <__srefill_r>:
10102050:	defffc04 	addi	sp,sp,-16
10102054:	dc400115 	stw	r17,4(sp)
10102058:	dc000015 	stw	r16,0(sp)
1010205c:	dfc00315 	stw	ra,12(sp)
10102060:	dc800215 	stw	r18,8(sp)
10102064:	2023883a 	mov	r17,r4
10102068:	2821883a 	mov	r16,r5
1010206c:	20000226 	beq	r4,zero,10102078 <__srefill_r+0x28>
10102070:	20800e17 	ldw	r2,56(r4)
10102074:	10003c26 	beq	r2,zero,10102168 <__srefill_r+0x118>
10102078:	80c0030b 	ldhu	r3,12(r16)
1010207c:	1908000c 	andi	r4,r3,8192
10102080:	1805883a 	mov	r2,r3
10102084:	2000071e 	bne	r4,zero,101020a4 <__srefill_r+0x54>
10102088:	81001917 	ldw	r4,100(r16)
1010208c:	18880014 	ori	r2,r3,8192
10102090:	00f7ffc4 	movi	r3,-8193
10102094:	20c8703a 	and	r4,r4,r3
10102098:	8080030d 	sth	r2,12(r16)
1010209c:	1007883a 	mov	r3,r2
101020a0:	81001915 	stw	r4,100(r16)
101020a4:	80000115 	stw	zero,4(r16)
101020a8:	1100080c 	andi	r4,r2,32
101020ac:	2000571e 	bne	r4,zero,1010220c <__srefill_r+0x1bc>
101020b0:	1100010c 	andi	r4,r2,4
101020b4:	20001f26 	beq	r4,zero,10102134 <__srefill_r+0xe4>
101020b8:	81400c17 	ldw	r5,48(r16)
101020bc:	28000826 	beq	r5,zero,101020e0 <__srefill_r+0x90>
101020c0:	80801004 	addi	r2,r16,64
101020c4:	28800226 	beq	r5,r2,101020d0 <__srefill_r+0x80>
101020c8:	8809883a 	mov	r4,r17
101020cc:	010695c0 	call	1010695c <_free_r>
101020d0:	80800f17 	ldw	r2,60(r16)
101020d4:	80000c15 	stw	zero,48(r16)
101020d8:	80800115 	stw	r2,4(r16)
101020dc:	1000391e 	bne	r2,zero,101021c4 <__srefill_r+0x174>
101020e0:	80800417 	ldw	r2,16(r16)
101020e4:	10004b26 	beq	r2,zero,10102214 <__srefill_r+0x1c4>
101020e8:	8480030b 	ldhu	r18,12(r16)
101020ec:	908000cc 	andi	r2,r18,3
101020f0:	10001f1e 	bne	r2,zero,10102170 <__srefill_r+0x120>
101020f4:	81800417 	ldw	r6,16(r16)
101020f8:	80800817 	ldw	r2,32(r16)
101020fc:	81c00517 	ldw	r7,20(r16)
10102100:	81400717 	ldw	r5,28(r16)
10102104:	81800015 	stw	r6,0(r16)
10102108:	8809883a 	mov	r4,r17
1010210c:	103ee83a 	callr	r2
10102110:	80800115 	stw	r2,4(r16)
10102114:	00800e0e 	bge	zero,r2,10102150 <__srefill_r+0x100>
10102118:	0005883a 	mov	r2,zero
1010211c:	dfc00317 	ldw	ra,12(sp)
10102120:	dc800217 	ldw	r18,8(sp)
10102124:	dc400117 	ldw	r17,4(sp)
10102128:	dc000017 	ldw	r16,0(sp)
1010212c:	dec00404 	addi	sp,sp,16
10102130:	f800283a 	ret
10102134:	1100040c 	andi	r4,r2,16
10102138:	20003026 	beq	r4,zero,101021fc <__srefill_r+0x1ac>
1010213c:	1080020c 	andi	r2,r2,8
10102140:	1000241e 	bne	r2,zero,101021d4 <__srefill_r+0x184>
10102144:	18c00114 	ori	r3,r3,4
10102148:	80c0030d 	sth	r3,12(r16)
1010214c:	003fe406 	br	101020e0 <__alt_data_end+0xfffe20e0>
10102150:	80c0030b 	ldhu	r3,12(r16)
10102154:	1000161e 	bne	r2,zero,101021b0 <__srefill_r+0x160>
10102158:	18c00814 	ori	r3,r3,32
1010215c:	00bfffc4 	movi	r2,-1
10102160:	80c0030d 	sth	r3,12(r16)
10102164:	003fed06 	br	1010211c <__alt_data_end+0xfffe211c>
10102168:	010673c0 	call	1010673c <__sinit>
1010216c:	003fc206 	br	10102078 <__alt_data_end+0xfffe2078>
10102170:	00840474 	movhi	r2,4113
10102174:	108ba304 	addi	r2,r2,11916
10102178:	11000017 	ldw	r4,0(r2)
1010217c:	01440434 	movhi	r5,4112
10102180:	00800044 	movi	r2,1
10102184:	29480d04 	addi	r5,r5,8244
10102188:	8080030d 	sth	r2,12(r16)
1010218c:	0106c6c0 	call	10106c6c <_fwalk>
10102190:	00800244 	movi	r2,9
10102194:	8480030d 	sth	r18,12(r16)
10102198:	9480024c 	andi	r18,r18,9
1010219c:	90bfd51e 	bne	r18,r2,101020f4 <__alt_data_end+0xfffe20f4>
101021a0:	800b883a 	mov	r5,r16
101021a4:	8809883a 	mov	r4,r17
101021a8:	01061440 	call	10106144 <__sflush_r>
101021ac:	003fd106 	br	101020f4 <__alt_data_end+0xfffe20f4>
101021b0:	18c01014 	ori	r3,r3,64
101021b4:	80000115 	stw	zero,4(r16)
101021b8:	00bfffc4 	movi	r2,-1
101021bc:	80c0030d 	sth	r3,12(r16)
101021c0:	003fd606 	br	1010211c <__alt_data_end+0xfffe211c>
101021c4:	80c00e17 	ldw	r3,56(r16)
101021c8:	0005883a 	mov	r2,zero
101021cc:	80c00015 	stw	r3,0(r16)
101021d0:	003fd206 	br	1010211c <__alt_data_end+0xfffe211c>
101021d4:	800b883a 	mov	r5,r16
101021d8:	8809883a 	mov	r4,r17
101021dc:	01063600 	call	10106360 <_fflush_r>
101021e0:	10000a1e 	bne	r2,zero,1010220c <__srefill_r+0x1bc>
101021e4:	8080030b 	ldhu	r2,12(r16)
101021e8:	00fffdc4 	movi	r3,-9
101021ec:	80000215 	stw	zero,8(r16)
101021f0:	1886703a 	and	r3,r3,r2
101021f4:	80000615 	stw	zero,24(r16)
101021f8:	003fd206 	br	10102144 <__alt_data_end+0xfffe2144>
101021fc:	00800244 	movi	r2,9
10102200:	88800015 	stw	r2,0(r17)
10102204:	18c01014 	ori	r3,r3,64
10102208:	80c0030d 	sth	r3,12(r16)
1010220c:	00bfffc4 	movi	r2,-1
10102210:	003fc206 	br	1010211c <__alt_data_end+0xfffe211c>
10102214:	800b883a 	mov	r5,r16
10102218:	8809883a 	mov	r4,r17
1010221c:	01014780 	call	10101478 <__smakebuf_r>
10102220:	003fb106 	br	101020e8 <__alt_data_end+0xfffe20e8>

10102224 <_sbrk_r>:
10102224:	defffd04 	addi	sp,sp,-12
10102228:	dc000015 	stw	r16,0(sp)
1010222c:	04040474 	movhi	r16,4113
10102230:	dc400115 	stw	r17,4(sp)
10102234:	84129e04 	addi	r16,r16,19064
10102238:	2023883a 	mov	r17,r4
1010223c:	2809883a 	mov	r4,r5
10102240:	dfc00215 	stw	ra,8(sp)
10102244:	80000015 	stw	zero,0(r16)
10102248:	010ee0c0 	call	1010ee0c <sbrk>
1010224c:	00ffffc4 	movi	r3,-1
10102250:	10c00526 	beq	r2,r3,10102268 <_sbrk_r+0x44>
10102254:	dfc00217 	ldw	ra,8(sp)
10102258:	dc400117 	ldw	r17,4(sp)
1010225c:	dc000017 	ldw	r16,0(sp)
10102260:	dec00304 	addi	sp,sp,12
10102264:	f800283a 	ret
10102268:	80c00017 	ldw	r3,0(r16)
1010226c:	183ff926 	beq	r3,zero,10102254 <__alt_data_end+0xfffe2254>
10102270:	88c00015 	stw	r3,0(r17)
10102274:	003ff706 	br	10102254 <__alt_data_end+0xfffe2254>

10102278 <__sread>:
10102278:	defffe04 	addi	sp,sp,-8
1010227c:	dc000015 	stw	r16,0(sp)
10102280:	2821883a 	mov	r16,r5
10102284:	2940038f 	ldh	r5,14(r5)
10102288:	dfc00115 	stw	ra,4(sp)
1010228c:	01081ac0 	call	101081ac <_read_r>
10102290:	10000716 	blt	r2,zero,101022b0 <__sread+0x38>
10102294:	80c01417 	ldw	r3,80(r16)
10102298:	1887883a 	add	r3,r3,r2
1010229c:	80c01415 	stw	r3,80(r16)
101022a0:	dfc00117 	ldw	ra,4(sp)
101022a4:	dc000017 	ldw	r16,0(sp)
101022a8:	dec00204 	addi	sp,sp,8
101022ac:	f800283a 	ret
101022b0:	80c0030b 	ldhu	r3,12(r16)
101022b4:	18fbffcc 	andi	r3,r3,61439
101022b8:	80c0030d 	sth	r3,12(r16)
101022bc:	dfc00117 	ldw	ra,4(sp)
101022c0:	dc000017 	ldw	r16,0(sp)
101022c4:	dec00204 	addi	sp,sp,8
101022c8:	f800283a 	ret

101022cc <__seofread>:
101022cc:	0005883a 	mov	r2,zero
101022d0:	f800283a 	ret

101022d4 <__swrite>:
101022d4:	2880030b 	ldhu	r2,12(r5)
101022d8:	defffb04 	addi	sp,sp,-20
101022dc:	dcc00315 	stw	r19,12(sp)
101022e0:	dc800215 	stw	r18,8(sp)
101022e4:	dc400115 	stw	r17,4(sp)
101022e8:	dc000015 	stw	r16,0(sp)
101022ec:	dfc00415 	stw	ra,16(sp)
101022f0:	10c0400c 	andi	r3,r2,256
101022f4:	2821883a 	mov	r16,r5
101022f8:	2023883a 	mov	r17,r4
101022fc:	3025883a 	mov	r18,r6
10102300:	3827883a 	mov	r19,r7
10102304:	18000526 	beq	r3,zero,1010231c <__swrite+0x48>
10102308:	2940038f 	ldh	r5,14(r5)
1010230c:	01c00084 	movi	r7,2
10102310:	000d883a 	mov	r6,zero
10102314:	0106f240 	call	10106f24 <_lseek_r>
10102318:	8080030b 	ldhu	r2,12(r16)
1010231c:	8140038f 	ldh	r5,14(r16)
10102320:	10bbffcc 	andi	r2,r2,61439
10102324:	980f883a 	mov	r7,r19
10102328:	900d883a 	mov	r6,r18
1010232c:	8809883a 	mov	r4,r17
10102330:	8080030d 	sth	r2,12(r16)
10102334:	dfc00417 	ldw	ra,16(sp)
10102338:	dcc00317 	ldw	r19,12(sp)
1010233c:	dc800217 	ldw	r18,8(sp)
10102340:	dc400117 	ldw	r17,4(sp)
10102344:	dc000017 	ldw	r16,0(sp)
10102348:	dec00504 	addi	sp,sp,20
1010234c:	010469c1 	jmpi	1010469c <_write_r>

10102350 <__sseek>:
10102350:	defffe04 	addi	sp,sp,-8
10102354:	dc000015 	stw	r16,0(sp)
10102358:	2821883a 	mov	r16,r5
1010235c:	2940038f 	ldh	r5,14(r5)
10102360:	dfc00115 	stw	ra,4(sp)
10102364:	0106f240 	call	10106f24 <_lseek_r>
10102368:	00ffffc4 	movi	r3,-1
1010236c:	10c00826 	beq	r2,r3,10102390 <__sseek+0x40>
10102370:	80c0030b 	ldhu	r3,12(r16)
10102374:	80801415 	stw	r2,80(r16)
10102378:	18c40014 	ori	r3,r3,4096
1010237c:	80c0030d 	sth	r3,12(r16)
10102380:	dfc00117 	ldw	ra,4(sp)
10102384:	dc000017 	ldw	r16,0(sp)
10102388:	dec00204 	addi	sp,sp,8
1010238c:	f800283a 	ret
10102390:	80c0030b 	ldhu	r3,12(r16)
10102394:	18fbffcc 	andi	r3,r3,61439
10102398:	80c0030d 	sth	r3,12(r16)
1010239c:	dfc00117 	ldw	ra,4(sp)
101023a0:	dc000017 	ldw	r16,0(sp)
101023a4:	dec00204 	addi	sp,sp,8
101023a8:	f800283a 	ret

101023ac <__sclose>:
101023ac:	2940038f 	ldh	r5,14(r5)
101023b0:	01048501 	jmpi	10104850 <_close_r>

101023b4 <_vfiprintf_r>:
101023b4:	deffff04 	addi	sp,sp,-4
101023b8:	dfc00015 	stw	ra,0(sp)
101023bc:	010880c0 	call	1010880c <___vfiprintf_internal_r>
101023c0:	dfc00017 	ldw	ra,0(sp)
101023c4:	dec00104 	addi	sp,sp,4
101023c8:	f800283a 	ret

101023cc <___vfprintf_internal_r>:
101023cc:	deffb804 	addi	sp,sp,-288
101023d0:	dfc04715 	stw	ra,284(sp)
101023d4:	ddc04515 	stw	r23,276(sp)
101023d8:	dd404315 	stw	r21,268(sp)
101023dc:	d9002c15 	stw	r4,176(sp)
101023e0:	282f883a 	mov	r23,r5
101023e4:	302b883a 	mov	r21,r6
101023e8:	d9c02d15 	stw	r7,180(sp)
101023ec:	df004615 	stw	fp,280(sp)
101023f0:	dd804415 	stw	r22,272(sp)
101023f4:	dd004215 	stw	r20,264(sp)
101023f8:	dcc04115 	stw	r19,260(sp)
101023fc:	dc804015 	stw	r18,256(sp)
10102400:	dc403f15 	stw	r17,252(sp)
10102404:	dc003e15 	stw	r16,248(sp)
10102408:	0106ef40 	call	10106ef4 <_localeconv_r>
1010240c:	10800017 	ldw	r2,0(r2)
10102410:	1009883a 	mov	r4,r2
10102414:	d8803415 	stw	r2,208(sp)
10102418:	01086600 	call	10108660 <strlen>
1010241c:	d8803715 	stw	r2,220(sp)
10102420:	d8802c17 	ldw	r2,176(sp)
10102424:	10000226 	beq	r2,zero,10102430 <___vfprintf_internal_r+0x64>
10102428:	10800e17 	ldw	r2,56(r2)
1010242c:	1000f926 	beq	r2,zero,10102814 <___vfprintf_internal_r+0x448>
10102430:	b880030b 	ldhu	r2,12(r23)
10102434:	10c8000c 	andi	r3,r2,8192
10102438:	1800061e 	bne	r3,zero,10102454 <___vfprintf_internal_r+0x88>
1010243c:	b9001917 	ldw	r4,100(r23)
10102440:	00f7ffc4 	movi	r3,-8193
10102444:	10880014 	ori	r2,r2,8192
10102448:	20c6703a 	and	r3,r4,r3
1010244c:	b880030d 	sth	r2,12(r23)
10102450:	b8c01915 	stw	r3,100(r23)
10102454:	10c0020c 	andi	r3,r2,8
10102458:	1800c126 	beq	r3,zero,10102760 <___vfprintf_internal_r+0x394>
1010245c:	b8c00417 	ldw	r3,16(r23)
10102460:	1800bf26 	beq	r3,zero,10102760 <___vfprintf_internal_r+0x394>
10102464:	1080068c 	andi	r2,r2,26
10102468:	00c00284 	movi	r3,10
1010246c:	10c0c426 	beq	r2,r3,10102780 <___vfprintf_internal_r+0x3b4>
10102470:	d8c00404 	addi	r3,sp,16
10102474:	05040474 	movhi	r20,4113
10102478:	d9001e04 	addi	r4,sp,120
1010247c:	a5043b84 	addi	r20,r20,4334
10102480:	d8c01e15 	stw	r3,120(sp)
10102484:	d8002015 	stw	zero,128(sp)
10102488:	d8001f15 	stw	zero,124(sp)
1010248c:	d8003315 	stw	zero,204(sp)
10102490:	d8003615 	stw	zero,216(sp)
10102494:	d8003815 	stw	zero,224(sp)
10102498:	1811883a 	mov	r8,r3
1010249c:	d8003915 	stw	zero,228(sp)
101024a0:	d8003a15 	stw	zero,232(sp)
101024a4:	d8002f15 	stw	zero,188(sp)
101024a8:	d9002815 	stw	r4,160(sp)
101024ac:	a8800007 	ldb	r2,0(r21)
101024b0:	10027b26 	beq	r2,zero,10102ea0 <___vfprintf_internal_r+0xad4>
101024b4:	00c00944 	movi	r3,37
101024b8:	a821883a 	mov	r16,r21
101024bc:	10c0021e 	bne	r2,r3,101024c8 <___vfprintf_internal_r+0xfc>
101024c0:	00001406 	br	10102514 <___vfprintf_internal_r+0x148>
101024c4:	10c00326 	beq	r2,r3,101024d4 <___vfprintf_internal_r+0x108>
101024c8:	84000044 	addi	r16,r16,1
101024cc:	80800007 	ldb	r2,0(r16)
101024d0:	103ffc1e 	bne	r2,zero,101024c4 <__alt_data_end+0xfffe24c4>
101024d4:	8563c83a 	sub	r17,r16,r21
101024d8:	88000e26 	beq	r17,zero,10102514 <___vfprintf_internal_r+0x148>
101024dc:	d8c02017 	ldw	r3,128(sp)
101024e0:	d8801f17 	ldw	r2,124(sp)
101024e4:	45400015 	stw	r21,0(r8)
101024e8:	1c47883a 	add	r3,r3,r17
101024ec:	10800044 	addi	r2,r2,1
101024f0:	d8c02015 	stw	r3,128(sp)
101024f4:	44400115 	stw	r17,4(r8)
101024f8:	d8801f15 	stw	r2,124(sp)
101024fc:	00c001c4 	movi	r3,7
10102500:	1880a716 	blt	r3,r2,101027a0 <___vfprintf_internal_r+0x3d4>
10102504:	42000204 	addi	r8,r8,8
10102508:	d9402f17 	ldw	r5,188(sp)
1010250c:	2c4b883a 	add	r5,r5,r17
10102510:	d9402f15 	stw	r5,188(sp)
10102514:	80800007 	ldb	r2,0(r16)
10102518:	1000a826 	beq	r2,zero,101027bc <___vfprintf_internal_r+0x3f0>
1010251c:	84400047 	ldb	r17,1(r16)
10102520:	00bfffc4 	movi	r2,-1
10102524:	85400044 	addi	r21,r16,1
10102528:	d8002785 	stb	zero,158(sp)
1010252c:	0007883a 	mov	r3,zero
10102530:	000f883a 	mov	r7,zero
10102534:	d8802915 	stw	r2,164(sp)
10102538:	d8003115 	stw	zero,196(sp)
1010253c:	0025883a 	mov	r18,zero
10102540:	01401604 	movi	r5,88
10102544:	01800244 	movi	r6,9
10102548:	02800a84 	movi	r10,42
1010254c:	02401b04 	movi	r9,108
10102550:	ad400044 	addi	r21,r21,1
10102554:	88bff804 	addi	r2,r17,-32
10102558:	28830436 	bltu	r5,r2,1010316c <___vfprintf_internal_r+0xda0>
1010255c:	100490ba 	slli	r2,r2,2
10102560:	01040434 	movhi	r4,4112
10102564:	21095d04 	addi	r4,r4,9588
10102568:	1105883a 	add	r2,r2,r4
1010256c:	10800017 	ldw	r2,0(r2)
10102570:	1000683a 	jmp	r2
10102574:	1010308c 	andi	zero,r2,16578
10102578:	1010316c 	andhi	zero,r2,16581
1010257c:	1010316c 	andhi	zero,r2,16581
10102580:	101030ac 	andhi	zero,r2,16578
10102584:	1010316c 	andhi	zero,r2,16581
10102588:	1010316c 	andhi	zero,r2,16581
1010258c:	1010316c 	andhi	zero,r2,16581
10102590:	1010316c 	andhi	zero,r2,16581
10102594:	1010316c 	andhi	zero,r2,16581
10102598:	1010316c 	andhi	zero,r2,16581
1010259c:	10102820 	cmpeqi	zero,r2,16544
101025a0:	10102fc8 	cmpgei	zero,r2,16575
101025a4:	1010316c 	andhi	zero,r2,16581
101025a8:	101026e8 	cmpgeui	zero,r2,16539
101025ac:	10102848 	cmpgei	zero,r2,16545
101025b0:	1010316c 	andhi	zero,r2,16581
101025b4:	10102888 	cmpgei	zero,r2,16546
101025b8:	10102894 	ori	zero,r2,16546
101025bc:	10102894 	ori	zero,r2,16546
101025c0:	10102894 	ori	zero,r2,16546
101025c4:	10102894 	ori	zero,r2,16546
101025c8:	10102894 	ori	zero,r2,16546
101025cc:	10102894 	ori	zero,r2,16546
101025d0:	10102894 	ori	zero,r2,16546
101025d4:	10102894 	ori	zero,r2,16546
101025d8:	10102894 	ori	zero,r2,16546
101025dc:	1010316c 	andhi	zero,r2,16581
101025e0:	1010316c 	andhi	zero,r2,16581
101025e4:	1010316c 	andhi	zero,r2,16581
101025e8:	1010316c 	andhi	zero,r2,16581
101025ec:	1010316c 	andhi	zero,r2,16581
101025f0:	1010316c 	andhi	zero,r2,16581
101025f4:	1010316c 	andhi	zero,r2,16581
101025f8:	1010316c 	andhi	zero,r2,16581
101025fc:	1010316c 	andhi	zero,r2,16581
10102600:	1010316c 	andhi	zero,r2,16581
10102604:	101028c8 	cmpgei	zero,r2,16547
10102608:	10102984 	addi	zero,r2,16550
1010260c:	1010316c 	andhi	zero,r2,16581
10102610:	10102984 	addi	zero,r2,16550
10102614:	1010316c 	andhi	zero,r2,16581
10102618:	1010316c 	andhi	zero,r2,16581
1010261c:	1010316c 	andhi	zero,r2,16581
10102620:	1010316c 	andhi	zero,r2,16581
10102624:	10102a24 	muli	zero,r2,16552
10102628:	1010316c 	andhi	zero,r2,16581
1010262c:	1010316c 	andhi	zero,r2,16581
10102630:	10102a30 	cmpltui	zero,r2,16552
10102634:	1010316c 	andhi	zero,r2,16581
10102638:	1010316c 	andhi	zero,r2,16581
1010263c:	1010316c 	andhi	zero,r2,16581
10102640:	1010316c 	andhi	zero,r2,16581
10102644:	1010316c 	andhi	zero,r2,16581
10102648:	10102ea8 	cmpgeui	zero,r2,16570
1010264c:	1010316c 	andhi	zero,r2,16581
10102650:	1010316c 	andhi	zero,r2,16581
10102654:	10102f08 	cmpgei	zero,r2,16572
10102658:	1010316c 	andhi	zero,r2,16581
1010265c:	1010316c 	andhi	zero,r2,16581
10102660:	1010316c 	andhi	zero,r2,16581
10102664:	1010316c 	andhi	zero,r2,16581
10102668:	1010316c 	andhi	zero,r2,16581
1010266c:	1010316c 	andhi	zero,r2,16581
10102670:	1010316c 	andhi	zero,r2,16581
10102674:	1010316c 	andhi	zero,r2,16581
10102678:	1010316c 	andhi	zero,r2,16581
1010267c:	1010316c 	andhi	zero,r2,16581
10102680:	10103118 	cmpnei	zero,r2,16580
10102684:	101030b8 	rdprs	zero,r2,16578
10102688:	10102984 	addi	zero,r2,16550
1010268c:	10102984 	addi	zero,r2,16550
10102690:	10102984 	addi	zero,r2,16550
10102694:	101030c8 	cmpgei	zero,r2,16579
10102698:	101030b8 	rdprs	zero,r2,16578
1010269c:	1010316c 	andhi	zero,r2,16581
101026a0:	1010316c 	andhi	zero,r2,16581
101026a4:	101030d4 	ori	zero,r2,16579
101026a8:	1010316c 	andhi	zero,r2,16581
101026ac:	101030e4 	muli	zero,r2,16579
101026b0:	10102fb8 	rdprs	zero,r2,16574
101026b4:	101026f4 	orhi	zero,r2,16539
101026b8:	10102fd8 	cmpnei	zero,r2,16575
101026bc:	1010316c 	andhi	zero,r2,16581
101026c0:	10102fe4 	muli	zero,r2,16575
101026c4:	1010316c 	andhi	zero,r2,16581
101026c8:	10103040 	call	11010304 <__alt_data_end+0xef0304>
101026cc:	1010316c 	andhi	zero,r2,16581
101026d0:	1010316c 	andhi	zero,r2,16581
101026d4:	10103050 	cmplti	zero,r2,16577
101026d8:	d9003117 	ldw	r4,196(sp)
101026dc:	d8802d15 	stw	r2,180(sp)
101026e0:	0109c83a 	sub	r4,zero,r4
101026e4:	d9003115 	stw	r4,196(sp)
101026e8:	94800114 	ori	r18,r18,4
101026ec:	ac400007 	ldb	r17,0(r21)
101026f0:	003f9706 	br	10102550 <__alt_data_end+0xfffe2550>
101026f4:	00800c04 	movi	r2,48
101026f8:	d9002d17 	ldw	r4,180(sp)
101026fc:	d9402917 	ldw	r5,164(sp)
10102700:	d8802705 	stb	r2,156(sp)
10102704:	00801e04 	movi	r2,120
10102708:	d8802745 	stb	r2,157(sp)
1010270c:	d8002785 	stb	zero,158(sp)
10102710:	20c00104 	addi	r3,r4,4
10102714:	24c00017 	ldw	r19,0(r4)
10102718:	002d883a 	mov	r22,zero
1010271c:	90800094 	ori	r2,r18,2
10102720:	28029a16 	blt	r5,zero,1010318c <___vfprintf_internal_r+0xdc0>
10102724:	00bfdfc4 	movi	r2,-129
10102728:	90a4703a 	and	r18,r18,r2
1010272c:	d8c02d15 	stw	r3,180(sp)
10102730:	94800094 	ori	r18,r18,2
10102734:	9802871e 	bne	r19,zero,10103154 <___vfprintf_internal_r+0xd88>
10102738:	00840474 	movhi	r2,4113
1010273c:	10843404 	addi	r2,r2,4304
10102740:	d8803915 	stw	r2,228(sp)
10102744:	04401e04 	movi	r17,120
10102748:	d8802917 	ldw	r2,164(sp)
1010274c:	0039883a 	mov	fp,zero
10102750:	1001e926 	beq	r2,zero,10102ef8 <___vfprintf_internal_r+0xb2c>
10102754:	0027883a 	mov	r19,zero
10102758:	002d883a 	mov	r22,zero
1010275c:	00020506 	br	10102f74 <___vfprintf_internal_r+0xba8>
10102760:	d9002c17 	ldw	r4,176(sp)
10102764:	b80b883a 	mov	r5,r23
10102768:	01046fc0 	call	101046fc <__swsetup_r>
1010276c:	1005ac1e 	bne	r2,zero,10103e20 <___vfprintf_internal_r+0x1a54>
10102770:	b880030b 	ldhu	r2,12(r23)
10102774:	00c00284 	movi	r3,10
10102778:	1080068c 	andi	r2,r2,26
1010277c:	10ff3c1e 	bne	r2,r3,10102470 <__alt_data_end+0xfffe2470>
10102780:	b880038f 	ldh	r2,14(r23)
10102784:	103f3a16 	blt	r2,zero,10102470 <__alt_data_end+0xfffe2470>
10102788:	d9c02d17 	ldw	r7,180(sp)
1010278c:	d9002c17 	ldw	r4,176(sp)
10102790:	a80d883a 	mov	r6,r21
10102794:	b80b883a 	mov	r5,r23
10102798:	01045e00 	call	101045e0 <__sbprintf>
1010279c:	00001106 	br	101027e4 <___vfprintf_internal_r+0x418>
101027a0:	d9002c17 	ldw	r4,176(sp)
101027a4:	d9801e04 	addi	r6,sp,120
101027a8:	b80b883a 	mov	r5,r23
101027ac:	01087f40 	call	101087f4 <__sprint_r>
101027b0:	1000081e 	bne	r2,zero,101027d4 <___vfprintf_internal_r+0x408>
101027b4:	da000404 	addi	r8,sp,16
101027b8:	003f5306 	br	10102508 <__alt_data_end+0xfffe2508>
101027bc:	d8802017 	ldw	r2,128(sp)
101027c0:	10000426 	beq	r2,zero,101027d4 <___vfprintf_internal_r+0x408>
101027c4:	d9002c17 	ldw	r4,176(sp)
101027c8:	d9801e04 	addi	r6,sp,120
101027cc:	b80b883a 	mov	r5,r23
101027d0:	01087f40 	call	101087f4 <__sprint_r>
101027d4:	b880030b 	ldhu	r2,12(r23)
101027d8:	1080100c 	andi	r2,r2,64
101027dc:	1005901e 	bne	r2,zero,10103e20 <___vfprintf_internal_r+0x1a54>
101027e0:	d8802f17 	ldw	r2,188(sp)
101027e4:	dfc04717 	ldw	ra,284(sp)
101027e8:	df004617 	ldw	fp,280(sp)
101027ec:	ddc04517 	ldw	r23,276(sp)
101027f0:	dd804417 	ldw	r22,272(sp)
101027f4:	dd404317 	ldw	r21,268(sp)
101027f8:	dd004217 	ldw	r20,264(sp)
101027fc:	dcc04117 	ldw	r19,260(sp)
10102800:	dc804017 	ldw	r18,256(sp)
10102804:	dc403f17 	ldw	r17,252(sp)
10102808:	dc003e17 	ldw	r16,248(sp)
1010280c:	dec04804 	addi	sp,sp,288
10102810:	f800283a 	ret
10102814:	d9002c17 	ldw	r4,176(sp)
10102818:	010673c0 	call	1010673c <__sinit>
1010281c:	003f0406 	br	10102430 <__alt_data_end+0xfffe2430>
10102820:	d8802d17 	ldw	r2,180(sp)
10102824:	d9002d17 	ldw	r4,180(sp)
10102828:	10800017 	ldw	r2,0(r2)
1010282c:	d8803115 	stw	r2,196(sp)
10102830:	20800104 	addi	r2,r4,4
10102834:	d9003117 	ldw	r4,196(sp)
10102838:	203fa716 	blt	r4,zero,101026d8 <__alt_data_end+0xfffe26d8>
1010283c:	d8802d15 	stw	r2,180(sp)
10102840:	ac400007 	ldb	r17,0(r21)
10102844:	003f4206 	br	10102550 <__alt_data_end+0xfffe2550>
10102848:	ac400007 	ldb	r17,0(r21)
1010284c:	aac00044 	addi	r11,r21,1
10102850:	8a872826 	beq	r17,r10,101044f4 <___vfprintf_internal_r+0x2128>
10102854:	88bff404 	addi	r2,r17,-48
10102858:	0009883a 	mov	r4,zero
1010285c:	30867d36 	bltu	r6,r2,10104254 <___vfprintf_internal_r+0x1e88>
10102860:	5c400007 	ldb	r17,0(r11)
10102864:	210002a4 	muli	r4,r4,10
10102868:	5d400044 	addi	r21,r11,1
1010286c:	a817883a 	mov	r11,r21
10102870:	2089883a 	add	r4,r4,r2
10102874:	88bff404 	addi	r2,r17,-48
10102878:	30bff92e 	bgeu	r6,r2,10102860 <__alt_data_end+0xfffe2860>
1010287c:	2005c916 	blt	r4,zero,10103fa4 <___vfprintf_internal_r+0x1bd8>
10102880:	d9002915 	stw	r4,164(sp)
10102884:	003f3306 	br	10102554 <__alt_data_end+0xfffe2554>
10102888:	94802014 	ori	r18,r18,128
1010288c:	ac400007 	ldb	r17,0(r21)
10102890:	003f2f06 	br	10102550 <__alt_data_end+0xfffe2550>
10102894:	a809883a 	mov	r4,r21
10102898:	d8003115 	stw	zero,196(sp)
1010289c:	88bff404 	addi	r2,r17,-48
101028a0:	0017883a 	mov	r11,zero
101028a4:	24400007 	ldb	r17,0(r4)
101028a8:	5ac002a4 	muli	r11,r11,10
101028ac:	ad400044 	addi	r21,r21,1
101028b0:	a809883a 	mov	r4,r21
101028b4:	12d7883a 	add	r11,r2,r11
101028b8:	88bff404 	addi	r2,r17,-48
101028bc:	30bff92e 	bgeu	r6,r2,101028a4 <__alt_data_end+0xfffe28a4>
101028c0:	dac03115 	stw	r11,196(sp)
101028c4:	003f2306 	br	10102554 <__alt_data_end+0xfffe2554>
101028c8:	18c03fcc 	andi	r3,r3,255
101028cc:	18072b1e 	bne	r3,zero,1010457c <___vfprintf_internal_r+0x21b0>
101028d0:	94800414 	ori	r18,r18,16
101028d4:	9080080c 	andi	r2,r18,32
101028d8:	10037b26 	beq	r2,zero,101036c8 <___vfprintf_internal_r+0x12fc>
101028dc:	d9402d17 	ldw	r5,180(sp)
101028e0:	28800117 	ldw	r2,4(r5)
101028e4:	2cc00017 	ldw	r19,0(r5)
101028e8:	29400204 	addi	r5,r5,8
101028ec:	d9402d15 	stw	r5,180(sp)
101028f0:	102d883a 	mov	r22,r2
101028f4:	10044b16 	blt	r2,zero,10103a24 <___vfprintf_internal_r+0x1658>
101028f8:	d9402917 	ldw	r5,164(sp)
101028fc:	df002783 	ldbu	fp,158(sp)
10102900:	2803bc16 	blt	r5,zero,101037f4 <___vfprintf_internal_r+0x1428>
10102904:	00ffdfc4 	movi	r3,-129
10102908:	9d84b03a 	or	r2,r19,r22
1010290c:	90e4703a 	and	r18,r18,r3
10102910:	10017726 	beq	r2,zero,10102ef0 <___vfprintf_internal_r+0xb24>
10102914:	b0038326 	beq	r22,zero,10103724 <___vfprintf_internal_r+0x1358>
10102918:	dc402a15 	stw	r17,168(sp)
1010291c:	dc001e04 	addi	r16,sp,120
10102920:	b023883a 	mov	r17,r22
10102924:	402d883a 	mov	r22,r8
10102928:	9809883a 	mov	r4,r19
1010292c:	880b883a 	mov	r5,r17
10102930:	01800284 	movi	r6,10
10102934:	000f883a 	mov	r7,zero
10102938:	010b5440 	call	1010b544 <__umoddi3>
1010293c:	10800c04 	addi	r2,r2,48
10102940:	843fffc4 	addi	r16,r16,-1
10102944:	9809883a 	mov	r4,r19
10102948:	880b883a 	mov	r5,r17
1010294c:	80800005 	stb	r2,0(r16)
10102950:	01800284 	movi	r6,10
10102954:	000f883a 	mov	r7,zero
10102958:	010afcc0 	call	1010afcc <__udivdi3>
1010295c:	1027883a 	mov	r19,r2
10102960:	10c4b03a 	or	r2,r2,r3
10102964:	1823883a 	mov	r17,r3
10102968:	103fef1e 	bne	r2,zero,10102928 <__alt_data_end+0xfffe2928>
1010296c:	d8c02817 	ldw	r3,160(sp)
10102970:	dc402a17 	ldw	r17,168(sp)
10102974:	b011883a 	mov	r8,r22
10102978:	1c07c83a 	sub	r3,r3,r16
1010297c:	d8c02e15 	stw	r3,184(sp)
10102980:	00005906 	br	10102ae8 <___vfprintf_internal_r+0x71c>
10102984:	18c03fcc 	andi	r3,r3,255
10102988:	1806fa1e 	bne	r3,zero,10104574 <___vfprintf_internal_r+0x21a8>
1010298c:	9080020c 	andi	r2,r18,8
10102990:	10048a26 	beq	r2,zero,10103bbc <___vfprintf_internal_r+0x17f0>
10102994:	d8c02d17 	ldw	r3,180(sp)
10102998:	d9002d17 	ldw	r4,180(sp)
1010299c:	d9402d17 	ldw	r5,180(sp)
101029a0:	18c00017 	ldw	r3,0(r3)
101029a4:	21000117 	ldw	r4,4(r4)
101029a8:	29400204 	addi	r5,r5,8
101029ac:	d8c03615 	stw	r3,216(sp)
101029b0:	d9003815 	stw	r4,224(sp)
101029b4:	d9402d15 	stw	r5,180(sp)
101029b8:	d9003617 	ldw	r4,216(sp)
101029bc:	d9403817 	ldw	r5,224(sp)
101029c0:	da003d15 	stw	r8,244(sp)
101029c4:	04000044 	movi	r16,1
101029c8:	010820c0 	call	1010820c <__fpclassifyd>
101029cc:	da003d17 	ldw	r8,244(sp)
101029d0:	14041f1e 	bne	r2,r16,10103a50 <___vfprintf_internal_r+0x1684>
101029d4:	d9003617 	ldw	r4,216(sp)
101029d8:	d9403817 	ldw	r5,224(sp)
101029dc:	000d883a 	mov	r6,zero
101029e0:	000f883a 	mov	r7,zero
101029e4:	010cf280 	call	1010cf28 <__ledf2>
101029e8:	da003d17 	ldw	r8,244(sp)
101029ec:	1005be16 	blt	r2,zero,101040e8 <___vfprintf_internal_r+0x1d1c>
101029f0:	df002783 	ldbu	fp,158(sp)
101029f4:	008011c4 	movi	r2,71
101029f8:	1445330e 	bge	r2,r17,10103ec8 <___vfprintf_internal_r+0x1afc>
101029fc:	04040474 	movhi	r16,4113
10102a00:	84042c04 	addi	r16,r16,4272
10102a04:	00c000c4 	movi	r3,3
10102a08:	00bfdfc4 	movi	r2,-129
10102a0c:	d8c02a15 	stw	r3,168(sp)
10102a10:	90a4703a 	and	r18,r18,r2
10102a14:	d8c02e15 	stw	r3,184(sp)
10102a18:	d8002915 	stw	zero,164(sp)
10102a1c:	d8003215 	stw	zero,200(sp)
10102a20:	00003706 	br	10102b00 <___vfprintf_internal_r+0x734>
10102a24:	94800214 	ori	r18,r18,8
10102a28:	ac400007 	ldb	r17,0(r21)
10102a2c:	003ec806 	br	10102550 <__alt_data_end+0xfffe2550>
10102a30:	18c03fcc 	andi	r3,r3,255
10102a34:	1806db1e 	bne	r3,zero,101045a4 <___vfprintf_internal_r+0x21d8>
10102a38:	94800414 	ori	r18,r18,16
10102a3c:	9080080c 	andi	r2,r18,32
10102a40:	1002d826 	beq	r2,zero,101035a4 <___vfprintf_internal_r+0x11d8>
10102a44:	d9402d17 	ldw	r5,180(sp)
10102a48:	d8c02917 	ldw	r3,164(sp)
10102a4c:	d8002785 	stb	zero,158(sp)
10102a50:	28800204 	addi	r2,r5,8
10102a54:	2cc00017 	ldw	r19,0(r5)
10102a58:	2d800117 	ldw	r22,4(r5)
10102a5c:	18048f16 	blt	r3,zero,10103c9c <___vfprintf_internal_r+0x18d0>
10102a60:	013fdfc4 	movi	r4,-129
10102a64:	9d86b03a 	or	r3,r19,r22
10102a68:	d8802d15 	stw	r2,180(sp)
10102a6c:	9124703a 	and	r18,r18,r4
10102a70:	1802d91e 	bne	r3,zero,101035d8 <___vfprintf_internal_r+0x120c>
10102a74:	d8c02917 	ldw	r3,164(sp)
10102a78:	0039883a 	mov	fp,zero
10102a7c:	1805c326 	beq	r3,zero,1010418c <___vfprintf_internal_r+0x1dc0>
10102a80:	0027883a 	mov	r19,zero
10102a84:	002d883a 	mov	r22,zero
10102a88:	dc001e04 	addi	r16,sp,120
10102a8c:	9806d0fa 	srli	r3,r19,3
10102a90:	b008977a 	slli	r4,r22,29
10102a94:	b02cd0fa 	srli	r22,r22,3
10102a98:	9cc001cc 	andi	r19,r19,7
10102a9c:	98800c04 	addi	r2,r19,48
10102aa0:	843fffc4 	addi	r16,r16,-1
10102aa4:	20e6b03a 	or	r19,r4,r3
10102aa8:	80800005 	stb	r2,0(r16)
10102aac:	9d86b03a 	or	r3,r19,r22
10102ab0:	183ff61e 	bne	r3,zero,10102a8c <__alt_data_end+0xfffe2a8c>
10102ab4:	90c0004c 	andi	r3,r18,1
10102ab8:	18013b26 	beq	r3,zero,10102fa8 <___vfprintf_internal_r+0xbdc>
10102abc:	10803fcc 	andi	r2,r2,255
10102ac0:	1080201c 	xori	r2,r2,128
10102ac4:	10bfe004 	addi	r2,r2,-128
10102ac8:	00c00c04 	movi	r3,48
10102acc:	10c13626 	beq	r2,r3,10102fa8 <___vfprintf_internal_r+0xbdc>
10102ad0:	80ffffc5 	stb	r3,-1(r16)
10102ad4:	d8c02817 	ldw	r3,160(sp)
10102ad8:	80bfffc4 	addi	r2,r16,-1
10102adc:	1021883a 	mov	r16,r2
10102ae0:	1887c83a 	sub	r3,r3,r2
10102ae4:	d8c02e15 	stw	r3,184(sp)
10102ae8:	d8802e17 	ldw	r2,184(sp)
10102aec:	d9002917 	ldw	r4,164(sp)
10102af0:	1100010e 	bge	r2,r4,10102af8 <___vfprintf_internal_r+0x72c>
10102af4:	2005883a 	mov	r2,r4
10102af8:	d8802a15 	stw	r2,168(sp)
10102afc:	d8003215 	stw	zero,200(sp)
10102b00:	e7003fcc 	andi	fp,fp,255
10102b04:	e700201c 	xori	fp,fp,128
10102b08:	e73fe004 	addi	fp,fp,-128
10102b0c:	e0000326 	beq	fp,zero,10102b1c <___vfprintf_internal_r+0x750>
10102b10:	d8c02a17 	ldw	r3,168(sp)
10102b14:	18c00044 	addi	r3,r3,1
10102b18:	d8c02a15 	stw	r3,168(sp)
10102b1c:	90c0008c 	andi	r3,r18,2
10102b20:	d8c02b15 	stw	r3,172(sp)
10102b24:	18000326 	beq	r3,zero,10102b34 <___vfprintf_internal_r+0x768>
10102b28:	d8c02a17 	ldw	r3,168(sp)
10102b2c:	18c00084 	addi	r3,r3,2
10102b30:	d8c02a15 	stw	r3,168(sp)
10102b34:	90c0210c 	andi	r3,r18,132
10102b38:	d8c03015 	stw	r3,192(sp)
10102b3c:	1801a31e 	bne	r3,zero,101031cc <___vfprintf_internal_r+0xe00>
10102b40:	d9003117 	ldw	r4,196(sp)
10102b44:	d8c02a17 	ldw	r3,168(sp)
10102b48:	20e7c83a 	sub	r19,r4,r3
10102b4c:	04c19f0e 	bge	zero,r19,101031cc <___vfprintf_internal_r+0xe00>
10102b50:	02400404 	movi	r9,16
10102b54:	d8c02017 	ldw	r3,128(sp)
10102b58:	d8801f17 	ldw	r2,124(sp)
10102b5c:	4cc50d0e 	bge	r9,r19,10103f94 <___vfprintf_internal_r+0x1bc8>
10102b60:	01440474 	movhi	r5,4113
10102b64:	29443f84 	addi	r5,r5,4350
10102b68:	dc403b15 	stw	r17,236(sp)
10102b6c:	d9403515 	stw	r5,212(sp)
10102b70:	9823883a 	mov	r17,r19
10102b74:	482d883a 	mov	r22,r9
10102b78:	9027883a 	mov	r19,r18
10102b7c:	070001c4 	movi	fp,7
10102b80:	8025883a 	mov	r18,r16
10102b84:	dc002c17 	ldw	r16,176(sp)
10102b88:	00000306 	br	10102b98 <___vfprintf_internal_r+0x7cc>
10102b8c:	8c7ffc04 	addi	r17,r17,-16
10102b90:	42000204 	addi	r8,r8,8
10102b94:	b440130e 	bge	r22,r17,10102be4 <___vfprintf_internal_r+0x818>
10102b98:	01040474 	movhi	r4,4113
10102b9c:	18c00404 	addi	r3,r3,16
10102ba0:	10800044 	addi	r2,r2,1
10102ba4:	21043f84 	addi	r4,r4,4350
10102ba8:	41000015 	stw	r4,0(r8)
10102bac:	45800115 	stw	r22,4(r8)
10102bb0:	d8c02015 	stw	r3,128(sp)
10102bb4:	d8801f15 	stw	r2,124(sp)
10102bb8:	e0bff40e 	bge	fp,r2,10102b8c <__alt_data_end+0xfffe2b8c>
10102bbc:	d9801e04 	addi	r6,sp,120
10102bc0:	b80b883a 	mov	r5,r23
10102bc4:	8009883a 	mov	r4,r16
10102bc8:	01087f40 	call	101087f4 <__sprint_r>
10102bcc:	103f011e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10102bd0:	8c7ffc04 	addi	r17,r17,-16
10102bd4:	d8c02017 	ldw	r3,128(sp)
10102bd8:	d8801f17 	ldw	r2,124(sp)
10102bdc:	da000404 	addi	r8,sp,16
10102be0:	b47fed16 	blt	r22,r17,10102b98 <__alt_data_end+0xfffe2b98>
10102be4:	9021883a 	mov	r16,r18
10102be8:	9825883a 	mov	r18,r19
10102bec:	8827883a 	mov	r19,r17
10102bf0:	dc403b17 	ldw	r17,236(sp)
10102bf4:	d9403517 	ldw	r5,212(sp)
10102bf8:	98c7883a 	add	r3,r19,r3
10102bfc:	10800044 	addi	r2,r2,1
10102c00:	41400015 	stw	r5,0(r8)
10102c04:	44c00115 	stw	r19,4(r8)
10102c08:	d8c02015 	stw	r3,128(sp)
10102c0c:	d8801f15 	stw	r2,124(sp)
10102c10:	010001c4 	movi	r4,7
10102c14:	2082a316 	blt	r4,r2,101036a4 <___vfprintf_internal_r+0x12d8>
10102c18:	df002787 	ldb	fp,158(sp)
10102c1c:	42000204 	addi	r8,r8,8
10102c20:	e0000c26 	beq	fp,zero,10102c54 <___vfprintf_internal_r+0x888>
10102c24:	d8801f17 	ldw	r2,124(sp)
10102c28:	d9002784 	addi	r4,sp,158
10102c2c:	18c00044 	addi	r3,r3,1
10102c30:	10800044 	addi	r2,r2,1
10102c34:	41000015 	stw	r4,0(r8)
10102c38:	01000044 	movi	r4,1
10102c3c:	41000115 	stw	r4,4(r8)
10102c40:	d8c02015 	stw	r3,128(sp)
10102c44:	d8801f15 	stw	r2,124(sp)
10102c48:	010001c4 	movi	r4,7
10102c4c:	20823c16 	blt	r4,r2,10103540 <___vfprintf_internal_r+0x1174>
10102c50:	42000204 	addi	r8,r8,8
10102c54:	d8802b17 	ldw	r2,172(sp)
10102c58:	10000c26 	beq	r2,zero,10102c8c <___vfprintf_internal_r+0x8c0>
10102c5c:	d8801f17 	ldw	r2,124(sp)
10102c60:	d9002704 	addi	r4,sp,156
10102c64:	18c00084 	addi	r3,r3,2
10102c68:	10800044 	addi	r2,r2,1
10102c6c:	41000015 	stw	r4,0(r8)
10102c70:	01000084 	movi	r4,2
10102c74:	41000115 	stw	r4,4(r8)
10102c78:	d8c02015 	stw	r3,128(sp)
10102c7c:	d8801f15 	stw	r2,124(sp)
10102c80:	010001c4 	movi	r4,7
10102c84:	20823616 	blt	r4,r2,10103560 <___vfprintf_internal_r+0x1194>
10102c88:	42000204 	addi	r8,r8,8
10102c8c:	d9003017 	ldw	r4,192(sp)
10102c90:	00802004 	movi	r2,128
10102c94:	20819926 	beq	r4,r2,101032fc <___vfprintf_internal_r+0xf30>
10102c98:	d9402917 	ldw	r5,164(sp)
10102c9c:	d8802e17 	ldw	r2,184(sp)
10102ca0:	28adc83a 	sub	r22,r5,r2
10102ca4:	0580310e 	bge	zero,r22,10102d6c <___vfprintf_internal_r+0x9a0>
10102ca8:	07000404 	movi	fp,16
10102cac:	d8801f17 	ldw	r2,124(sp)
10102cb0:	e584140e 	bge	fp,r22,10103d04 <___vfprintf_internal_r+0x1938>
10102cb4:	01440474 	movhi	r5,4113
10102cb8:	29443b84 	addi	r5,r5,4334
10102cbc:	dc402915 	stw	r17,164(sp)
10102cc0:	d9402b15 	stw	r5,172(sp)
10102cc4:	b023883a 	mov	r17,r22
10102cc8:	04c001c4 	movi	r19,7
10102ccc:	a82d883a 	mov	r22,r21
10102cd0:	902b883a 	mov	r21,r18
10102cd4:	8025883a 	mov	r18,r16
10102cd8:	dc002c17 	ldw	r16,176(sp)
10102cdc:	00000306 	br	10102cec <___vfprintf_internal_r+0x920>
10102ce0:	8c7ffc04 	addi	r17,r17,-16
10102ce4:	42000204 	addi	r8,r8,8
10102ce8:	e440110e 	bge	fp,r17,10102d30 <___vfprintf_internal_r+0x964>
10102cec:	18c00404 	addi	r3,r3,16
10102cf0:	10800044 	addi	r2,r2,1
10102cf4:	45000015 	stw	r20,0(r8)
10102cf8:	47000115 	stw	fp,4(r8)
10102cfc:	d8c02015 	stw	r3,128(sp)
10102d00:	d8801f15 	stw	r2,124(sp)
10102d04:	98bff60e 	bge	r19,r2,10102ce0 <__alt_data_end+0xfffe2ce0>
10102d08:	d9801e04 	addi	r6,sp,120
10102d0c:	b80b883a 	mov	r5,r23
10102d10:	8009883a 	mov	r4,r16
10102d14:	01087f40 	call	101087f4 <__sprint_r>
10102d18:	103eae1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10102d1c:	8c7ffc04 	addi	r17,r17,-16
10102d20:	d8c02017 	ldw	r3,128(sp)
10102d24:	d8801f17 	ldw	r2,124(sp)
10102d28:	da000404 	addi	r8,sp,16
10102d2c:	e47fef16 	blt	fp,r17,10102cec <__alt_data_end+0xfffe2cec>
10102d30:	9021883a 	mov	r16,r18
10102d34:	a825883a 	mov	r18,r21
10102d38:	b02b883a 	mov	r21,r22
10102d3c:	882d883a 	mov	r22,r17
10102d40:	dc402917 	ldw	r17,164(sp)
10102d44:	d9002b17 	ldw	r4,172(sp)
10102d48:	1d87883a 	add	r3,r3,r22
10102d4c:	10800044 	addi	r2,r2,1
10102d50:	41000015 	stw	r4,0(r8)
10102d54:	45800115 	stw	r22,4(r8)
10102d58:	d8c02015 	stw	r3,128(sp)
10102d5c:	d8801f15 	stw	r2,124(sp)
10102d60:	010001c4 	movi	r4,7
10102d64:	2081ee16 	blt	r4,r2,10103520 <___vfprintf_internal_r+0x1154>
10102d68:	42000204 	addi	r8,r8,8
10102d6c:	9080400c 	andi	r2,r18,256
10102d70:	1001181e 	bne	r2,zero,101031d4 <___vfprintf_internal_r+0xe08>
10102d74:	d9402e17 	ldw	r5,184(sp)
10102d78:	d8801f17 	ldw	r2,124(sp)
10102d7c:	44000015 	stw	r16,0(r8)
10102d80:	1947883a 	add	r3,r3,r5
10102d84:	10800044 	addi	r2,r2,1
10102d88:	41400115 	stw	r5,4(r8)
10102d8c:	d8c02015 	stw	r3,128(sp)
10102d90:	d8801f15 	stw	r2,124(sp)
10102d94:	010001c4 	movi	r4,7
10102d98:	2081d316 	blt	r4,r2,101034e8 <___vfprintf_internal_r+0x111c>
10102d9c:	42000204 	addi	r8,r8,8
10102da0:	9480010c 	andi	r18,r18,4
10102da4:	90003226 	beq	r18,zero,10102e70 <___vfprintf_internal_r+0xaa4>
10102da8:	d9403117 	ldw	r5,196(sp)
10102dac:	d8802a17 	ldw	r2,168(sp)
10102db0:	28a1c83a 	sub	r16,r5,r2
10102db4:	04002e0e 	bge	zero,r16,10102e70 <___vfprintf_internal_r+0xaa4>
10102db8:	04400404 	movi	r17,16
10102dbc:	d8801f17 	ldw	r2,124(sp)
10102dc0:	8c04a20e 	bge	r17,r16,1010404c <___vfprintf_internal_r+0x1c80>
10102dc4:	01440474 	movhi	r5,4113
10102dc8:	29443f84 	addi	r5,r5,4350
10102dcc:	d9403515 	stw	r5,212(sp)
10102dd0:	048001c4 	movi	r18,7
10102dd4:	dcc02c17 	ldw	r19,176(sp)
10102dd8:	00000306 	br	10102de8 <___vfprintf_internal_r+0xa1c>
10102ddc:	843ffc04 	addi	r16,r16,-16
10102de0:	42000204 	addi	r8,r8,8
10102de4:	8c00130e 	bge	r17,r16,10102e34 <___vfprintf_internal_r+0xa68>
10102de8:	01040474 	movhi	r4,4113
10102dec:	18c00404 	addi	r3,r3,16
10102df0:	10800044 	addi	r2,r2,1
10102df4:	21043f84 	addi	r4,r4,4350
10102df8:	41000015 	stw	r4,0(r8)
10102dfc:	44400115 	stw	r17,4(r8)
10102e00:	d8c02015 	stw	r3,128(sp)
10102e04:	d8801f15 	stw	r2,124(sp)
10102e08:	90bff40e 	bge	r18,r2,10102ddc <__alt_data_end+0xfffe2ddc>
10102e0c:	d9801e04 	addi	r6,sp,120
10102e10:	b80b883a 	mov	r5,r23
10102e14:	9809883a 	mov	r4,r19
10102e18:	01087f40 	call	101087f4 <__sprint_r>
10102e1c:	103e6d1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10102e20:	843ffc04 	addi	r16,r16,-16
10102e24:	d8c02017 	ldw	r3,128(sp)
10102e28:	d8801f17 	ldw	r2,124(sp)
10102e2c:	da000404 	addi	r8,sp,16
10102e30:	8c3fed16 	blt	r17,r16,10102de8 <__alt_data_end+0xfffe2de8>
10102e34:	d9403517 	ldw	r5,212(sp)
10102e38:	1c07883a 	add	r3,r3,r16
10102e3c:	10800044 	addi	r2,r2,1
10102e40:	41400015 	stw	r5,0(r8)
10102e44:	44000115 	stw	r16,4(r8)
10102e48:	d8c02015 	stw	r3,128(sp)
10102e4c:	d8801f15 	stw	r2,124(sp)
10102e50:	010001c4 	movi	r4,7
10102e54:	2080060e 	bge	r4,r2,10102e70 <___vfprintf_internal_r+0xaa4>
10102e58:	d9002c17 	ldw	r4,176(sp)
10102e5c:	d9801e04 	addi	r6,sp,120
10102e60:	b80b883a 	mov	r5,r23
10102e64:	01087f40 	call	101087f4 <__sprint_r>
10102e68:	103e5a1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10102e6c:	d8c02017 	ldw	r3,128(sp)
10102e70:	d8803117 	ldw	r2,196(sp)
10102e74:	d9002a17 	ldw	r4,168(sp)
10102e78:	1100010e 	bge	r2,r4,10102e80 <___vfprintf_internal_r+0xab4>
10102e7c:	2005883a 	mov	r2,r4
10102e80:	d9402f17 	ldw	r5,188(sp)
10102e84:	288b883a 	add	r5,r5,r2
10102e88:	d9402f15 	stw	r5,188(sp)
10102e8c:	18019e1e 	bne	r3,zero,10103508 <___vfprintf_internal_r+0x113c>
10102e90:	a8800007 	ldb	r2,0(r21)
10102e94:	d8001f15 	stw	zero,124(sp)
10102e98:	da000404 	addi	r8,sp,16
10102e9c:	103d851e 	bne	r2,zero,101024b4 <__alt_data_end+0xfffe24b4>
10102ea0:	a821883a 	mov	r16,r21
10102ea4:	003d9b06 	br	10102514 <__alt_data_end+0xfffe2514>
10102ea8:	18c03fcc 	andi	r3,r3,255
10102eac:	1805c11e 	bne	r3,zero,101045b4 <___vfprintf_internal_r+0x21e8>
10102eb0:	94800414 	ori	r18,r18,16
10102eb4:	9080080c 	andi	r2,r18,32
10102eb8:	10020c26 	beq	r2,zero,101036ec <___vfprintf_internal_r+0x1320>
10102ebc:	d8802d17 	ldw	r2,180(sp)
10102ec0:	d9002917 	ldw	r4,164(sp)
10102ec4:	d8002785 	stb	zero,158(sp)
10102ec8:	10c00204 	addi	r3,r2,8
10102ecc:	14c00017 	ldw	r19,0(r2)
10102ed0:	15800117 	ldw	r22,4(r2)
10102ed4:	20040f16 	blt	r4,zero,10103f14 <___vfprintf_internal_r+0x1b48>
10102ed8:	013fdfc4 	movi	r4,-129
10102edc:	9d84b03a 	or	r2,r19,r22
10102ee0:	d8c02d15 	stw	r3,180(sp)
10102ee4:	9124703a 	and	r18,r18,r4
10102ee8:	0039883a 	mov	fp,zero
10102eec:	103e891e 	bne	r2,zero,10102914 <__alt_data_end+0xfffe2914>
10102ef0:	d9002917 	ldw	r4,164(sp)
10102ef4:	2002c11e 	bne	r4,zero,101039fc <___vfprintf_internal_r+0x1630>
10102ef8:	d8002915 	stw	zero,164(sp)
10102efc:	d8002e15 	stw	zero,184(sp)
10102f00:	dc001e04 	addi	r16,sp,120
10102f04:	003ef806 	br	10102ae8 <__alt_data_end+0xfffe2ae8>
10102f08:	18c03fcc 	andi	r3,r3,255
10102f0c:	18059d1e 	bne	r3,zero,10104584 <___vfprintf_internal_r+0x21b8>
10102f10:	01440474 	movhi	r5,4113
10102f14:	29442f04 	addi	r5,r5,4284
10102f18:	d9403915 	stw	r5,228(sp)
10102f1c:	9080080c 	andi	r2,r18,32
10102f20:	10005226 	beq	r2,zero,1010306c <___vfprintf_internal_r+0xca0>
10102f24:	d8802d17 	ldw	r2,180(sp)
10102f28:	14c00017 	ldw	r19,0(r2)
10102f2c:	15800117 	ldw	r22,4(r2)
10102f30:	10800204 	addi	r2,r2,8
10102f34:	d8802d15 	stw	r2,180(sp)
10102f38:	9080004c 	andi	r2,r18,1
10102f3c:	10019026 	beq	r2,zero,10103580 <___vfprintf_internal_r+0x11b4>
10102f40:	9d84b03a 	or	r2,r19,r22
10102f44:	10036926 	beq	r2,zero,10103cec <___vfprintf_internal_r+0x1920>
10102f48:	d8c02917 	ldw	r3,164(sp)
10102f4c:	00800c04 	movi	r2,48
10102f50:	d8802705 	stb	r2,156(sp)
10102f54:	dc402745 	stb	r17,157(sp)
10102f58:	d8002785 	stb	zero,158(sp)
10102f5c:	90800094 	ori	r2,r18,2
10102f60:	18045d16 	blt	r3,zero,101040d8 <___vfprintf_internal_r+0x1d0c>
10102f64:	00bfdfc4 	movi	r2,-129
10102f68:	90a4703a 	and	r18,r18,r2
10102f6c:	94800094 	ori	r18,r18,2
10102f70:	0039883a 	mov	fp,zero
10102f74:	d9003917 	ldw	r4,228(sp)
10102f78:	dc001e04 	addi	r16,sp,120
10102f7c:	988003cc 	andi	r2,r19,15
10102f80:	b006973a 	slli	r3,r22,28
10102f84:	2085883a 	add	r2,r4,r2
10102f88:	9826d13a 	srli	r19,r19,4
10102f8c:	10800003 	ldbu	r2,0(r2)
10102f90:	b02cd13a 	srli	r22,r22,4
10102f94:	843fffc4 	addi	r16,r16,-1
10102f98:	1ce6b03a 	or	r19,r3,r19
10102f9c:	80800005 	stb	r2,0(r16)
10102fa0:	9d84b03a 	or	r2,r19,r22
10102fa4:	103ff51e 	bne	r2,zero,10102f7c <__alt_data_end+0xfffe2f7c>
10102fa8:	d8c02817 	ldw	r3,160(sp)
10102fac:	1c07c83a 	sub	r3,r3,r16
10102fb0:	d8c02e15 	stw	r3,184(sp)
10102fb4:	003ecc06 	br	10102ae8 <__alt_data_end+0xfffe2ae8>
10102fb8:	18c03fcc 	andi	r3,r3,255
10102fbc:	183e9f26 	beq	r3,zero,10102a3c <__alt_data_end+0xfffe2a3c>
10102fc0:	d9c02785 	stb	r7,158(sp)
10102fc4:	003e9d06 	br	10102a3c <__alt_data_end+0xfffe2a3c>
10102fc8:	00c00044 	movi	r3,1
10102fcc:	01c00ac4 	movi	r7,43
10102fd0:	ac400007 	ldb	r17,0(r21)
10102fd4:	003d5e06 	br	10102550 <__alt_data_end+0xfffe2550>
10102fd8:	94800814 	ori	r18,r18,32
10102fdc:	ac400007 	ldb	r17,0(r21)
10102fe0:	003d5b06 	br	10102550 <__alt_data_end+0xfffe2550>
10102fe4:	d8c02d17 	ldw	r3,180(sp)
10102fe8:	d8002785 	stb	zero,158(sp)
10102fec:	1c000017 	ldw	r16,0(r3)
10102ff0:	1cc00104 	addi	r19,r3,4
10102ff4:	80041926 	beq	r16,zero,1010405c <___vfprintf_internal_r+0x1c90>
10102ff8:	d9002917 	ldw	r4,164(sp)
10102ffc:	2003d016 	blt	r4,zero,10103f40 <___vfprintf_internal_r+0x1b74>
10103000:	200d883a 	mov	r6,r4
10103004:	000b883a 	mov	r5,zero
10103008:	8009883a 	mov	r4,r16
1010300c:	da003d15 	stw	r8,244(sp)
10103010:	0106f840 	call	10106f84 <memchr>
10103014:	da003d17 	ldw	r8,244(sp)
10103018:	10045426 	beq	r2,zero,1010416c <___vfprintf_internal_r+0x1da0>
1010301c:	1405c83a 	sub	r2,r2,r16
10103020:	d8802e15 	stw	r2,184(sp)
10103024:	1003cc16 	blt	r2,zero,10103f58 <___vfprintf_internal_r+0x1b8c>
10103028:	df002783 	ldbu	fp,158(sp)
1010302c:	d8802a15 	stw	r2,168(sp)
10103030:	dcc02d15 	stw	r19,180(sp)
10103034:	d8002915 	stw	zero,164(sp)
10103038:	d8003215 	stw	zero,200(sp)
1010303c:	003eb006 	br	10102b00 <__alt_data_end+0xfffe2b00>
10103040:	18c03fcc 	andi	r3,r3,255
10103044:	183f9b26 	beq	r3,zero,10102eb4 <__alt_data_end+0xfffe2eb4>
10103048:	d9c02785 	stb	r7,158(sp)
1010304c:	003f9906 	br	10102eb4 <__alt_data_end+0xfffe2eb4>
10103050:	18c03fcc 	andi	r3,r3,255
10103054:	1805551e 	bne	r3,zero,101045ac <___vfprintf_internal_r+0x21e0>
10103058:	01440474 	movhi	r5,4113
1010305c:	29443404 	addi	r5,r5,4304
10103060:	d9403915 	stw	r5,228(sp)
10103064:	9080080c 	andi	r2,r18,32
10103068:	103fae1e 	bne	r2,zero,10102f24 <__alt_data_end+0xfffe2f24>
1010306c:	9080040c 	andi	r2,r18,16
10103070:	1002de26 	beq	r2,zero,10103bec <___vfprintf_internal_r+0x1820>
10103074:	d8c02d17 	ldw	r3,180(sp)
10103078:	002d883a 	mov	r22,zero
1010307c:	1cc00017 	ldw	r19,0(r3)
10103080:	18c00104 	addi	r3,r3,4
10103084:	d8c02d15 	stw	r3,180(sp)
10103088:	003fab06 	br	10102f38 <__alt_data_end+0xfffe2f38>
1010308c:	38803fcc 	andi	r2,r7,255
10103090:	1080201c 	xori	r2,r2,128
10103094:	10bfe004 	addi	r2,r2,-128
10103098:	1002d21e 	bne	r2,zero,10103be4 <___vfprintf_internal_r+0x1818>
1010309c:	00c00044 	movi	r3,1
101030a0:	01c00804 	movi	r7,32
101030a4:	ac400007 	ldb	r17,0(r21)
101030a8:	003d2906 	br	10102550 <__alt_data_end+0xfffe2550>
101030ac:	94800054 	ori	r18,r18,1
101030b0:	ac400007 	ldb	r17,0(r21)
101030b4:	003d2606 	br	10102550 <__alt_data_end+0xfffe2550>
101030b8:	18c03fcc 	andi	r3,r3,255
101030bc:	183e0526 	beq	r3,zero,101028d4 <__alt_data_end+0xfffe28d4>
101030c0:	d9c02785 	stb	r7,158(sp)
101030c4:	003e0306 	br	101028d4 <__alt_data_end+0xfffe28d4>
101030c8:	94801014 	ori	r18,r18,64
101030cc:	ac400007 	ldb	r17,0(r21)
101030d0:	003d1f06 	br	10102550 <__alt_data_end+0xfffe2550>
101030d4:	ac400007 	ldb	r17,0(r21)
101030d8:	8a438726 	beq	r17,r9,10103ef8 <___vfprintf_internal_r+0x1b2c>
101030dc:	94800414 	ori	r18,r18,16
101030e0:	003d1b06 	br	10102550 <__alt_data_end+0xfffe2550>
101030e4:	18c03fcc 	andi	r3,r3,255
101030e8:	1805341e 	bne	r3,zero,101045bc <___vfprintf_internal_r+0x21f0>
101030ec:	9080080c 	andi	r2,r18,32
101030f0:	1002cd26 	beq	r2,zero,10103c28 <___vfprintf_internal_r+0x185c>
101030f4:	d9402d17 	ldw	r5,180(sp)
101030f8:	d9002f17 	ldw	r4,188(sp)
101030fc:	28800017 	ldw	r2,0(r5)
10103100:	2007d7fa 	srai	r3,r4,31
10103104:	29400104 	addi	r5,r5,4
10103108:	d9402d15 	stw	r5,180(sp)
1010310c:	11000015 	stw	r4,0(r2)
10103110:	10c00115 	stw	r3,4(r2)
10103114:	003ce506 	br	101024ac <__alt_data_end+0xfffe24ac>
10103118:	d8c02d17 	ldw	r3,180(sp)
1010311c:	d9002d17 	ldw	r4,180(sp)
10103120:	d8002785 	stb	zero,158(sp)
10103124:	18800017 	ldw	r2,0(r3)
10103128:	21000104 	addi	r4,r4,4
1010312c:	00c00044 	movi	r3,1
10103130:	d8c02a15 	stw	r3,168(sp)
10103134:	d8801405 	stb	r2,80(sp)
10103138:	d9002d15 	stw	r4,180(sp)
1010313c:	d8c02e15 	stw	r3,184(sp)
10103140:	d8002915 	stw	zero,164(sp)
10103144:	d8003215 	stw	zero,200(sp)
10103148:	dc001404 	addi	r16,sp,80
1010314c:	0039883a 	mov	fp,zero
10103150:	003e7206 	br	10102b1c <__alt_data_end+0xfffe2b1c>
10103154:	01040474 	movhi	r4,4113
10103158:	21043404 	addi	r4,r4,4304
1010315c:	0039883a 	mov	fp,zero
10103160:	d9003915 	stw	r4,228(sp)
10103164:	04401e04 	movi	r17,120
10103168:	003f8206 	br	10102f74 <__alt_data_end+0xfffe2f74>
1010316c:	18c03fcc 	andi	r3,r3,255
10103170:	1805061e 	bne	r3,zero,1010458c <___vfprintf_internal_r+0x21c0>
10103174:	883d9126 	beq	r17,zero,101027bc <__alt_data_end+0xfffe27bc>
10103178:	00c00044 	movi	r3,1
1010317c:	d8c02a15 	stw	r3,168(sp)
10103180:	dc401405 	stb	r17,80(sp)
10103184:	d8002785 	stb	zero,158(sp)
10103188:	003fec06 	br	1010313c <__alt_data_end+0xfffe313c>
1010318c:	01440474 	movhi	r5,4113
10103190:	29443404 	addi	r5,r5,4304
10103194:	d9403915 	stw	r5,228(sp)
10103198:	d8c02d15 	stw	r3,180(sp)
1010319c:	1025883a 	mov	r18,r2
101031a0:	04401e04 	movi	r17,120
101031a4:	9d84b03a 	or	r2,r19,r22
101031a8:	1000fc1e 	bne	r2,zero,1010359c <___vfprintf_internal_r+0x11d0>
101031ac:	0039883a 	mov	fp,zero
101031b0:	00800084 	movi	r2,2
101031b4:	10803fcc 	andi	r2,r2,255
101031b8:	00c00044 	movi	r3,1
101031bc:	10c20f26 	beq	r2,r3,101039fc <___vfprintf_internal_r+0x1630>
101031c0:	00c00084 	movi	r3,2
101031c4:	10fd6326 	beq	r2,r3,10102754 <__alt_data_end+0xfffe2754>
101031c8:	003e2d06 	br	10102a80 <__alt_data_end+0xfffe2a80>
101031cc:	d8c02017 	ldw	r3,128(sp)
101031d0:	003e9306 	br	10102c20 <__alt_data_end+0xfffe2c20>
101031d4:	00801944 	movi	r2,101
101031d8:	14407e0e 	bge	r2,r17,101033d4 <___vfprintf_internal_r+0x1008>
101031dc:	d9003617 	ldw	r4,216(sp)
101031e0:	d9403817 	ldw	r5,224(sp)
101031e4:	000d883a 	mov	r6,zero
101031e8:	000f883a 	mov	r7,zero
101031ec:	d8c03c15 	stw	r3,240(sp)
101031f0:	da003d15 	stw	r8,244(sp)
101031f4:	010cdc40 	call	1010cdc4 <__eqdf2>
101031f8:	d8c03c17 	ldw	r3,240(sp)
101031fc:	da003d17 	ldw	r8,244(sp)
10103200:	1000f71e 	bne	r2,zero,101035e0 <___vfprintf_internal_r+0x1214>
10103204:	d8801f17 	ldw	r2,124(sp)
10103208:	01040474 	movhi	r4,4113
1010320c:	21043b04 	addi	r4,r4,4332
10103210:	18c00044 	addi	r3,r3,1
10103214:	10800044 	addi	r2,r2,1
10103218:	41000015 	stw	r4,0(r8)
1010321c:	01000044 	movi	r4,1
10103220:	41000115 	stw	r4,4(r8)
10103224:	d8c02015 	stw	r3,128(sp)
10103228:	d8801f15 	stw	r2,124(sp)
1010322c:	010001c4 	movi	r4,7
10103230:	2082b816 	blt	r4,r2,10103d14 <___vfprintf_internal_r+0x1948>
10103234:	42000204 	addi	r8,r8,8
10103238:	d8802617 	ldw	r2,152(sp)
1010323c:	d9403317 	ldw	r5,204(sp)
10103240:	11400216 	blt	r2,r5,1010324c <___vfprintf_internal_r+0xe80>
10103244:	9080004c 	andi	r2,r18,1
10103248:	103ed526 	beq	r2,zero,10102da0 <__alt_data_end+0xfffe2da0>
1010324c:	d8803717 	ldw	r2,220(sp)
10103250:	d9003417 	ldw	r4,208(sp)
10103254:	d9403717 	ldw	r5,220(sp)
10103258:	1887883a 	add	r3,r3,r2
1010325c:	d8801f17 	ldw	r2,124(sp)
10103260:	41000015 	stw	r4,0(r8)
10103264:	41400115 	stw	r5,4(r8)
10103268:	10800044 	addi	r2,r2,1
1010326c:	d8c02015 	stw	r3,128(sp)
10103270:	d8801f15 	stw	r2,124(sp)
10103274:	010001c4 	movi	r4,7
10103278:	20832916 	blt	r4,r2,10103f20 <___vfprintf_internal_r+0x1b54>
1010327c:	42000204 	addi	r8,r8,8
10103280:	d8803317 	ldw	r2,204(sp)
10103284:	143fffc4 	addi	r16,r2,-1
10103288:	043ec50e 	bge	zero,r16,10102da0 <__alt_data_end+0xfffe2da0>
1010328c:	04400404 	movi	r17,16
10103290:	d8801f17 	ldw	r2,124(sp)
10103294:	8c00880e 	bge	r17,r16,101034b8 <___vfprintf_internal_r+0x10ec>
10103298:	01440474 	movhi	r5,4113
1010329c:	29443b84 	addi	r5,r5,4334
101032a0:	d9402b15 	stw	r5,172(sp)
101032a4:	058001c4 	movi	r22,7
101032a8:	dcc02c17 	ldw	r19,176(sp)
101032ac:	00000306 	br	101032bc <___vfprintf_internal_r+0xef0>
101032b0:	42000204 	addi	r8,r8,8
101032b4:	843ffc04 	addi	r16,r16,-16
101032b8:	8c00820e 	bge	r17,r16,101034c4 <___vfprintf_internal_r+0x10f8>
101032bc:	18c00404 	addi	r3,r3,16
101032c0:	10800044 	addi	r2,r2,1
101032c4:	45000015 	stw	r20,0(r8)
101032c8:	44400115 	stw	r17,4(r8)
101032cc:	d8c02015 	stw	r3,128(sp)
101032d0:	d8801f15 	stw	r2,124(sp)
101032d4:	b0bff60e 	bge	r22,r2,101032b0 <__alt_data_end+0xfffe32b0>
101032d8:	d9801e04 	addi	r6,sp,120
101032dc:	b80b883a 	mov	r5,r23
101032e0:	9809883a 	mov	r4,r19
101032e4:	01087f40 	call	101087f4 <__sprint_r>
101032e8:	103d3a1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101032ec:	d8c02017 	ldw	r3,128(sp)
101032f0:	d8801f17 	ldw	r2,124(sp)
101032f4:	da000404 	addi	r8,sp,16
101032f8:	003fee06 	br	101032b4 <__alt_data_end+0xfffe32b4>
101032fc:	d9403117 	ldw	r5,196(sp)
10103300:	d8802a17 	ldw	r2,168(sp)
10103304:	28adc83a 	sub	r22,r5,r2
10103308:	05be630e 	bge	zero,r22,10102c98 <__alt_data_end+0xfffe2c98>
1010330c:	07000404 	movi	fp,16
10103310:	d8801f17 	ldw	r2,124(sp)
10103314:	e5838f0e 	bge	fp,r22,10104154 <___vfprintf_internal_r+0x1d88>
10103318:	01440474 	movhi	r5,4113
1010331c:	29443b84 	addi	r5,r5,4334
10103320:	dc403015 	stw	r17,192(sp)
10103324:	d9402b15 	stw	r5,172(sp)
10103328:	b023883a 	mov	r17,r22
1010332c:	04c001c4 	movi	r19,7
10103330:	a82d883a 	mov	r22,r21
10103334:	902b883a 	mov	r21,r18
10103338:	8025883a 	mov	r18,r16
1010333c:	dc002c17 	ldw	r16,176(sp)
10103340:	00000306 	br	10103350 <___vfprintf_internal_r+0xf84>
10103344:	8c7ffc04 	addi	r17,r17,-16
10103348:	42000204 	addi	r8,r8,8
1010334c:	e440110e 	bge	fp,r17,10103394 <___vfprintf_internal_r+0xfc8>
10103350:	18c00404 	addi	r3,r3,16
10103354:	10800044 	addi	r2,r2,1
10103358:	45000015 	stw	r20,0(r8)
1010335c:	47000115 	stw	fp,4(r8)
10103360:	d8c02015 	stw	r3,128(sp)
10103364:	d8801f15 	stw	r2,124(sp)
10103368:	98bff60e 	bge	r19,r2,10103344 <__alt_data_end+0xfffe3344>
1010336c:	d9801e04 	addi	r6,sp,120
10103370:	b80b883a 	mov	r5,r23
10103374:	8009883a 	mov	r4,r16
10103378:	01087f40 	call	101087f4 <__sprint_r>
1010337c:	103d151e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103380:	8c7ffc04 	addi	r17,r17,-16
10103384:	d8c02017 	ldw	r3,128(sp)
10103388:	d8801f17 	ldw	r2,124(sp)
1010338c:	da000404 	addi	r8,sp,16
10103390:	e47fef16 	blt	fp,r17,10103350 <__alt_data_end+0xfffe3350>
10103394:	9021883a 	mov	r16,r18
10103398:	a825883a 	mov	r18,r21
1010339c:	b02b883a 	mov	r21,r22
101033a0:	882d883a 	mov	r22,r17
101033a4:	dc403017 	ldw	r17,192(sp)
101033a8:	d9002b17 	ldw	r4,172(sp)
101033ac:	1d87883a 	add	r3,r3,r22
101033b0:	10800044 	addi	r2,r2,1
101033b4:	41000015 	stw	r4,0(r8)
101033b8:	45800115 	stw	r22,4(r8)
101033bc:	d8c02015 	stw	r3,128(sp)
101033c0:	d8801f15 	stw	r2,124(sp)
101033c4:	010001c4 	movi	r4,7
101033c8:	20818e16 	blt	r4,r2,10103a04 <___vfprintf_internal_r+0x1638>
101033cc:	42000204 	addi	r8,r8,8
101033d0:	003e3106 	br	10102c98 <__alt_data_end+0xfffe2c98>
101033d4:	d9403317 	ldw	r5,204(sp)
101033d8:	00800044 	movi	r2,1
101033dc:	18c00044 	addi	r3,r3,1
101033e0:	1141530e 	bge	r2,r5,10103930 <___vfprintf_internal_r+0x1564>
101033e4:	dc401f17 	ldw	r17,124(sp)
101033e8:	00800044 	movi	r2,1
101033ec:	40800115 	stw	r2,4(r8)
101033f0:	8c400044 	addi	r17,r17,1
101033f4:	44000015 	stw	r16,0(r8)
101033f8:	d8c02015 	stw	r3,128(sp)
101033fc:	dc401f15 	stw	r17,124(sp)
10103400:	008001c4 	movi	r2,7
10103404:	14416b16 	blt	r2,r17,101039b4 <___vfprintf_internal_r+0x15e8>
10103408:	42000204 	addi	r8,r8,8
1010340c:	d8803717 	ldw	r2,220(sp)
10103410:	d9003417 	ldw	r4,208(sp)
10103414:	8c400044 	addi	r17,r17,1
10103418:	10c7883a 	add	r3,r2,r3
1010341c:	40800115 	stw	r2,4(r8)
10103420:	41000015 	stw	r4,0(r8)
10103424:	d8c02015 	stw	r3,128(sp)
10103428:	dc401f15 	stw	r17,124(sp)
1010342c:	008001c4 	movi	r2,7
10103430:	14416916 	blt	r2,r17,101039d8 <___vfprintf_internal_r+0x160c>
10103434:	45800204 	addi	r22,r8,8
10103438:	d9003617 	ldw	r4,216(sp)
1010343c:	d9403817 	ldw	r5,224(sp)
10103440:	000d883a 	mov	r6,zero
10103444:	000f883a 	mov	r7,zero
10103448:	d8c03c15 	stw	r3,240(sp)
1010344c:	010cdc40 	call	1010cdc4 <__eqdf2>
10103450:	d8c03c17 	ldw	r3,240(sp)
10103454:	1000bc26 	beq	r2,zero,10103748 <___vfprintf_internal_r+0x137c>
10103458:	d9403317 	ldw	r5,204(sp)
1010345c:	84000044 	addi	r16,r16,1
10103460:	8c400044 	addi	r17,r17,1
10103464:	28bfffc4 	addi	r2,r5,-1
10103468:	1887883a 	add	r3,r3,r2
1010346c:	b0800115 	stw	r2,4(r22)
10103470:	b4000015 	stw	r16,0(r22)
10103474:	d8c02015 	stw	r3,128(sp)
10103478:	dc401f15 	stw	r17,124(sp)
1010347c:	008001c4 	movi	r2,7
10103480:	14414316 	blt	r2,r17,10103990 <___vfprintf_internal_r+0x15c4>
10103484:	b5800204 	addi	r22,r22,8
10103488:	d9003a17 	ldw	r4,232(sp)
1010348c:	df0022c4 	addi	fp,sp,139
10103490:	8c400044 	addi	r17,r17,1
10103494:	20c7883a 	add	r3,r4,r3
10103498:	b7000015 	stw	fp,0(r22)
1010349c:	b1000115 	stw	r4,4(r22)
101034a0:	d8c02015 	stw	r3,128(sp)
101034a4:	dc401f15 	stw	r17,124(sp)
101034a8:	008001c4 	movi	r2,7
101034ac:	14400e16 	blt	r2,r17,101034e8 <___vfprintf_internal_r+0x111c>
101034b0:	b2000204 	addi	r8,r22,8
101034b4:	003e3a06 	br	10102da0 <__alt_data_end+0xfffe2da0>
101034b8:	01040474 	movhi	r4,4113
101034bc:	21043b84 	addi	r4,r4,4334
101034c0:	d9002b15 	stw	r4,172(sp)
101034c4:	d9002b17 	ldw	r4,172(sp)
101034c8:	1c07883a 	add	r3,r3,r16
101034cc:	44000115 	stw	r16,4(r8)
101034d0:	41000015 	stw	r4,0(r8)
101034d4:	10800044 	addi	r2,r2,1
101034d8:	d8c02015 	stw	r3,128(sp)
101034dc:	d8801f15 	stw	r2,124(sp)
101034e0:	010001c4 	movi	r4,7
101034e4:	20be2d0e 	bge	r4,r2,10102d9c <__alt_data_end+0xfffe2d9c>
101034e8:	d9002c17 	ldw	r4,176(sp)
101034ec:	d9801e04 	addi	r6,sp,120
101034f0:	b80b883a 	mov	r5,r23
101034f4:	01087f40 	call	101087f4 <__sprint_r>
101034f8:	103cb61e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101034fc:	d8c02017 	ldw	r3,128(sp)
10103500:	da000404 	addi	r8,sp,16
10103504:	003e2606 	br	10102da0 <__alt_data_end+0xfffe2da0>
10103508:	d9002c17 	ldw	r4,176(sp)
1010350c:	d9801e04 	addi	r6,sp,120
10103510:	b80b883a 	mov	r5,r23
10103514:	01087f40 	call	101087f4 <__sprint_r>
10103518:	103e5d26 	beq	r2,zero,10102e90 <__alt_data_end+0xfffe2e90>
1010351c:	003cad06 	br	101027d4 <__alt_data_end+0xfffe27d4>
10103520:	d9002c17 	ldw	r4,176(sp)
10103524:	d9801e04 	addi	r6,sp,120
10103528:	b80b883a 	mov	r5,r23
1010352c:	01087f40 	call	101087f4 <__sprint_r>
10103530:	103ca81e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103534:	d8c02017 	ldw	r3,128(sp)
10103538:	da000404 	addi	r8,sp,16
1010353c:	003e0b06 	br	10102d6c <__alt_data_end+0xfffe2d6c>
10103540:	d9002c17 	ldw	r4,176(sp)
10103544:	d9801e04 	addi	r6,sp,120
10103548:	b80b883a 	mov	r5,r23
1010354c:	01087f40 	call	101087f4 <__sprint_r>
10103550:	103ca01e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103554:	d8c02017 	ldw	r3,128(sp)
10103558:	da000404 	addi	r8,sp,16
1010355c:	003dbd06 	br	10102c54 <__alt_data_end+0xfffe2c54>
10103560:	d9002c17 	ldw	r4,176(sp)
10103564:	d9801e04 	addi	r6,sp,120
10103568:	b80b883a 	mov	r5,r23
1010356c:	01087f40 	call	101087f4 <__sprint_r>
10103570:	103c981e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103574:	d8c02017 	ldw	r3,128(sp)
10103578:	da000404 	addi	r8,sp,16
1010357c:	003dc306 	br	10102c8c <__alt_data_end+0xfffe2c8c>
10103580:	d8802917 	ldw	r2,164(sp)
10103584:	d8002785 	stb	zero,158(sp)
10103588:	103f0616 	blt	r2,zero,101031a4 <__alt_data_end+0xfffe31a4>
1010358c:	00ffdfc4 	movi	r3,-129
10103590:	9d84b03a 	or	r2,r19,r22
10103594:	90e4703a 	and	r18,r18,r3
10103598:	103c6b26 	beq	r2,zero,10102748 <__alt_data_end+0xfffe2748>
1010359c:	0039883a 	mov	fp,zero
101035a0:	003e7406 	br	10102f74 <__alt_data_end+0xfffe2f74>
101035a4:	9080040c 	andi	r2,r18,16
101035a8:	1001b326 	beq	r2,zero,10103c78 <___vfprintf_internal_r+0x18ac>
101035ac:	d9002d17 	ldw	r4,180(sp)
101035b0:	d9402917 	ldw	r5,164(sp)
101035b4:	d8002785 	stb	zero,158(sp)
101035b8:	20800104 	addi	r2,r4,4
101035bc:	24c00017 	ldw	r19,0(r4)
101035c0:	002d883a 	mov	r22,zero
101035c4:	2801b516 	blt	r5,zero,10103c9c <___vfprintf_internal_r+0x18d0>
101035c8:	00ffdfc4 	movi	r3,-129
101035cc:	d8802d15 	stw	r2,180(sp)
101035d0:	90e4703a 	and	r18,r18,r3
101035d4:	983d2726 	beq	r19,zero,10102a74 <__alt_data_end+0xfffe2a74>
101035d8:	0039883a 	mov	fp,zero
101035dc:	003d2a06 	br	10102a88 <__alt_data_end+0xfffe2a88>
101035e0:	dc402617 	ldw	r17,152(sp)
101035e4:	0441d30e 	bge	zero,r17,10103d34 <___vfprintf_internal_r+0x1968>
101035e8:	dc403217 	ldw	r17,200(sp)
101035ec:	d8803317 	ldw	r2,204(sp)
101035f0:	1440010e 	bge	r2,r17,101035f8 <___vfprintf_internal_r+0x122c>
101035f4:	1023883a 	mov	r17,r2
101035f8:	04400a0e 	bge	zero,r17,10103624 <___vfprintf_internal_r+0x1258>
101035fc:	d8801f17 	ldw	r2,124(sp)
10103600:	1c47883a 	add	r3,r3,r17
10103604:	44000015 	stw	r16,0(r8)
10103608:	10800044 	addi	r2,r2,1
1010360c:	44400115 	stw	r17,4(r8)
10103610:	d8c02015 	stw	r3,128(sp)
10103614:	d8801f15 	stw	r2,124(sp)
10103618:	010001c4 	movi	r4,7
1010361c:	20826516 	blt	r4,r2,10103fb4 <___vfprintf_internal_r+0x1be8>
10103620:	42000204 	addi	r8,r8,8
10103624:	88026116 	blt	r17,zero,10103fac <___vfprintf_internal_r+0x1be0>
10103628:	d9003217 	ldw	r4,200(sp)
1010362c:	2463c83a 	sub	r17,r4,r17
10103630:	04407b0e 	bge	zero,r17,10103820 <___vfprintf_internal_r+0x1454>
10103634:	05800404 	movi	r22,16
10103638:	d8801f17 	ldw	r2,124(sp)
1010363c:	b4419d0e 	bge	r22,r17,10103cb4 <___vfprintf_internal_r+0x18e8>
10103640:	01040474 	movhi	r4,4113
10103644:	21043b84 	addi	r4,r4,4334
10103648:	d9002b15 	stw	r4,172(sp)
1010364c:	070001c4 	movi	fp,7
10103650:	dcc02c17 	ldw	r19,176(sp)
10103654:	00000306 	br	10103664 <___vfprintf_internal_r+0x1298>
10103658:	42000204 	addi	r8,r8,8
1010365c:	8c7ffc04 	addi	r17,r17,-16
10103660:	b441970e 	bge	r22,r17,10103cc0 <___vfprintf_internal_r+0x18f4>
10103664:	18c00404 	addi	r3,r3,16
10103668:	10800044 	addi	r2,r2,1
1010366c:	45000015 	stw	r20,0(r8)
10103670:	45800115 	stw	r22,4(r8)
10103674:	d8c02015 	stw	r3,128(sp)
10103678:	d8801f15 	stw	r2,124(sp)
1010367c:	e0bff60e 	bge	fp,r2,10103658 <__alt_data_end+0xfffe3658>
10103680:	d9801e04 	addi	r6,sp,120
10103684:	b80b883a 	mov	r5,r23
10103688:	9809883a 	mov	r4,r19
1010368c:	01087f40 	call	101087f4 <__sprint_r>
10103690:	103c501e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103694:	d8c02017 	ldw	r3,128(sp)
10103698:	d8801f17 	ldw	r2,124(sp)
1010369c:	da000404 	addi	r8,sp,16
101036a0:	003fee06 	br	1010365c <__alt_data_end+0xfffe365c>
101036a4:	d9002c17 	ldw	r4,176(sp)
101036a8:	d9801e04 	addi	r6,sp,120
101036ac:	b80b883a 	mov	r5,r23
101036b0:	01087f40 	call	101087f4 <__sprint_r>
101036b4:	103c471e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101036b8:	d8c02017 	ldw	r3,128(sp)
101036bc:	df002787 	ldb	fp,158(sp)
101036c0:	da000404 	addi	r8,sp,16
101036c4:	003d5606 	br	10102c20 <__alt_data_end+0xfffe2c20>
101036c8:	9080040c 	andi	r2,r18,16
101036cc:	10016126 	beq	r2,zero,10103c54 <___vfprintf_internal_r+0x1888>
101036d0:	d8802d17 	ldw	r2,180(sp)
101036d4:	14c00017 	ldw	r19,0(r2)
101036d8:	10800104 	addi	r2,r2,4
101036dc:	d8802d15 	stw	r2,180(sp)
101036e0:	982dd7fa 	srai	r22,r19,31
101036e4:	b005883a 	mov	r2,r22
101036e8:	003c8206 	br	101028f4 <__alt_data_end+0xfffe28f4>
101036ec:	9080040c 	andi	r2,r18,16
101036f0:	10003526 	beq	r2,zero,101037c8 <___vfprintf_internal_r+0x13fc>
101036f4:	d9402d17 	ldw	r5,180(sp)
101036f8:	d8c02917 	ldw	r3,164(sp)
101036fc:	d8002785 	stb	zero,158(sp)
10103700:	28800104 	addi	r2,r5,4
10103704:	2cc00017 	ldw	r19,0(r5)
10103708:	002d883a 	mov	r22,zero
1010370c:	18003716 	blt	r3,zero,101037ec <___vfprintf_internal_r+0x1420>
10103710:	00ffdfc4 	movi	r3,-129
10103714:	d8802d15 	stw	r2,180(sp)
10103718:	90e4703a 	and	r18,r18,r3
1010371c:	0039883a 	mov	fp,zero
10103720:	983df326 	beq	r19,zero,10102ef0 <__alt_data_end+0xfffe2ef0>
10103724:	00800244 	movi	r2,9
10103728:	14fc7b36 	bltu	r2,r19,10102918 <__alt_data_end+0xfffe2918>
1010372c:	d8c02817 	ldw	r3,160(sp)
10103730:	dc001dc4 	addi	r16,sp,119
10103734:	9cc00c04 	addi	r19,r19,48
10103738:	1c07c83a 	sub	r3,r3,r16
1010373c:	dcc01dc5 	stb	r19,119(sp)
10103740:	d8c02e15 	stw	r3,184(sp)
10103744:	003ce806 	br	10102ae8 <__alt_data_end+0xfffe2ae8>
10103748:	d8803317 	ldw	r2,204(sp)
1010374c:	143fffc4 	addi	r16,r2,-1
10103750:	043f4d0e 	bge	zero,r16,10103488 <__alt_data_end+0xfffe3488>
10103754:	07000404 	movi	fp,16
10103758:	e400810e 	bge	fp,r16,10103960 <___vfprintf_internal_r+0x1594>
1010375c:	01440474 	movhi	r5,4113
10103760:	29443b84 	addi	r5,r5,4334
10103764:	d9402b15 	stw	r5,172(sp)
10103768:	01c001c4 	movi	r7,7
1010376c:	dcc02c17 	ldw	r19,176(sp)
10103770:	00000306 	br	10103780 <___vfprintf_internal_r+0x13b4>
10103774:	b5800204 	addi	r22,r22,8
10103778:	843ffc04 	addi	r16,r16,-16
1010377c:	e4007b0e 	bge	fp,r16,1010396c <___vfprintf_internal_r+0x15a0>
10103780:	18c00404 	addi	r3,r3,16
10103784:	8c400044 	addi	r17,r17,1
10103788:	b5000015 	stw	r20,0(r22)
1010378c:	b7000115 	stw	fp,4(r22)
10103790:	d8c02015 	stw	r3,128(sp)
10103794:	dc401f15 	stw	r17,124(sp)
10103798:	3c7ff60e 	bge	r7,r17,10103774 <__alt_data_end+0xfffe3774>
1010379c:	d9801e04 	addi	r6,sp,120
101037a0:	b80b883a 	mov	r5,r23
101037a4:	9809883a 	mov	r4,r19
101037a8:	d9c03c15 	stw	r7,240(sp)
101037ac:	01087f40 	call	101087f4 <__sprint_r>
101037b0:	d9c03c17 	ldw	r7,240(sp)
101037b4:	103c071e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101037b8:	d8c02017 	ldw	r3,128(sp)
101037bc:	dc401f17 	ldw	r17,124(sp)
101037c0:	dd800404 	addi	r22,sp,16
101037c4:	003fec06 	br	10103778 <__alt_data_end+0xfffe3778>
101037c8:	9080100c 	andi	r2,r18,64
101037cc:	d8002785 	stb	zero,158(sp)
101037d0:	10010e26 	beq	r2,zero,10103c0c <___vfprintf_internal_r+0x1840>
101037d4:	d9002d17 	ldw	r4,180(sp)
101037d8:	d9402917 	ldw	r5,164(sp)
101037dc:	002d883a 	mov	r22,zero
101037e0:	20800104 	addi	r2,r4,4
101037e4:	24c0000b 	ldhu	r19,0(r4)
101037e8:	283fc90e 	bge	r5,zero,10103710 <__alt_data_end+0xfffe3710>
101037ec:	d8802d15 	stw	r2,180(sp)
101037f0:	0039883a 	mov	fp,zero
101037f4:	9d84b03a 	or	r2,r19,r22
101037f8:	103c461e 	bne	r2,zero,10102914 <__alt_data_end+0xfffe2914>
101037fc:	00800044 	movi	r2,1
10103800:	003e6c06 	br	101031b4 <__alt_data_end+0xfffe31b4>
10103804:	d9002c17 	ldw	r4,176(sp)
10103808:	d9801e04 	addi	r6,sp,120
1010380c:	b80b883a 	mov	r5,r23
10103810:	01087f40 	call	101087f4 <__sprint_r>
10103814:	103bef1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103818:	d8c02017 	ldw	r3,128(sp)
1010381c:	da000404 	addi	r8,sp,16
10103820:	d9003217 	ldw	r4,200(sp)
10103824:	d8802617 	ldw	r2,152(sp)
10103828:	d9403317 	ldw	r5,204(sp)
1010382c:	8123883a 	add	r17,r16,r4
10103830:	11400216 	blt	r2,r5,1010383c <___vfprintf_internal_r+0x1470>
10103834:	9100004c 	andi	r4,r18,1
10103838:	20000d26 	beq	r4,zero,10103870 <___vfprintf_internal_r+0x14a4>
1010383c:	d9003717 	ldw	r4,220(sp)
10103840:	d9403417 	ldw	r5,208(sp)
10103844:	1907883a 	add	r3,r3,r4
10103848:	d9001f17 	ldw	r4,124(sp)
1010384c:	41400015 	stw	r5,0(r8)
10103850:	d9403717 	ldw	r5,220(sp)
10103854:	21000044 	addi	r4,r4,1
10103858:	d8c02015 	stw	r3,128(sp)
1010385c:	41400115 	stw	r5,4(r8)
10103860:	d9001f15 	stw	r4,124(sp)
10103864:	014001c4 	movi	r5,7
10103868:	2901e816 	blt	r5,r4,1010400c <___vfprintf_internal_r+0x1c40>
1010386c:	42000204 	addi	r8,r8,8
10103870:	d9003317 	ldw	r4,204(sp)
10103874:	8121883a 	add	r16,r16,r4
10103878:	2085c83a 	sub	r2,r4,r2
1010387c:	8461c83a 	sub	r16,r16,r17
10103880:	1400010e 	bge	r2,r16,10103888 <___vfprintf_internal_r+0x14bc>
10103884:	1021883a 	mov	r16,r2
10103888:	04000a0e 	bge	zero,r16,101038b4 <___vfprintf_internal_r+0x14e8>
1010388c:	d9001f17 	ldw	r4,124(sp)
10103890:	1c07883a 	add	r3,r3,r16
10103894:	44400015 	stw	r17,0(r8)
10103898:	21000044 	addi	r4,r4,1
1010389c:	44000115 	stw	r16,4(r8)
101038a0:	d8c02015 	stw	r3,128(sp)
101038a4:	d9001f15 	stw	r4,124(sp)
101038a8:	014001c4 	movi	r5,7
101038ac:	2901fb16 	blt	r5,r4,1010409c <___vfprintf_internal_r+0x1cd0>
101038b0:	42000204 	addi	r8,r8,8
101038b4:	8001f716 	blt	r16,zero,10104094 <___vfprintf_internal_r+0x1cc8>
101038b8:	1421c83a 	sub	r16,r2,r16
101038bc:	043d380e 	bge	zero,r16,10102da0 <__alt_data_end+0xfffe2da0>
101038c0:	04400404 	movi	r17,16
101038c4:	d8801f17 	ldw	r2,124(sp)
101038c8:	8c3efb0e 	bge	r17,r16,101034b8 <__alt_data_end+0xfffe34b8>
101038cc:	01440474 	movhi	r5,4113
101038d0:	29443b84 	addi	r5,r5,4334
101038d4:	d9402b15 	stw	r5,172(sp)
101038d8:	058001c4 	movi	r22,7
101038dc:	dcc02c17 	ldw	r19,176(sp)
101038e0:	00000306 	br	101038f0 <___vfprintf_internal_r+0x1524>
101038e4:	42000204 	addi	r8,r8,8
101038e8:	843ffc04 	addi	r16,r16,-16
101038ec:	8c3ef50e 	bge	r17,r16,101034c4 <__alt_data_end+0xfffe34c4>
101038f0:	18c00404 	addi	r3,r3,16
101038f4:	10800044 	addi	r2,r2,1
101038f8:	45000015 	stw	r20,0(r8)
101038fc:	44400115 	stw	r17,4(r8)
10103900:	d8c02015 	stw	r3,128(sp)
10103904:	d8801f15 	stw	r2,124(sp)
10103908:	b0bff60e 	bge	r22,r2,101038e4 <__alt_data_end+0xfffe38e4>
1010390c:	d9801e04 	addi	r6,sp,120
10103910:	b80b883a 	mov	r5,r23
10103914:	9809883a 	mov	r4,r19
10103918:	01087f40 	call	101087f4 <__sprint_r>
1010391c:	103bad1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103920:	d8c02017 	ldw	r3,128(sp)
10103924:	d8801f17 	ldw	r2,124(sp)
10103928:	da000404 	addi	r8,sp,16
1010392c:	003fee06 	br	101038e8 <__alt_data_end+0xfffe38e8>
10103930:	9088703a 	and	r4,r18,r2
10103934:	203eab1e 	bne	r4,zero,101033e4 <__alt_data_end+0xfffe33e4>
10103938:	dc401f17 	ldw	r17,124(sp)
1010393c:	40800115 	stw	r2,4(r8)
10103940:	44000015 	stw	r16,0(r8)
10103944:	8c400044 	addi	r17,r17,1
10103948:	d8c02015 	stw	r3,128(sp)
1010394c:	dc401f15 	stw	r17,124(sp)
10103950:	008001c4 	movi	r2,7
10103954:	14400e16 	blt	r2,r17,10103990 <___vfprintf_internal_r+0x15c4>
10103958:	45800204 	addi	r22,r8,8
1010395c:	003eca06 	br	10103488 <__alt_data_end+0xfffe3488>
10103960:	01040474 	movhi	r4,4113
10103964:	21043b84 	addi	r4,r4,4334
10103968:	d9002b15 	stw	r4,172(sp)
1010396c:	d8802b17 	ldw	r2,172(sp)
10103970:	1c07883a 	add	r3,r3,r16
10103974:	8c400044 	addi	r17,r17,1
10103978:	b0800015 	stw	r2,0(r22)
1010397c:	b4000115 	stw	r16,4(r22)
10103980:	d8c02015 	stw	r3,128(sp)
10103984:	dc401f15 	stw	r17,124(sp)
10103988:	008001c4 	movi	r2,7
1010398c:	147ebd0e 	bge	r2,r17,10103484 <__alt_data_end+0xfffe3484>
10103990:	d9002c17 	ldw	r4,176(sp)
10103994:	d9801e04 	addi	r6,sp,120
10103998:	b80b883a 	mov	r5,r23
1010399c:	01087f40 	call	101087f4 <__sprint_r>
101039a0:	103b8c1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101039a4:	d8c02017 	ldw	r3,128(sp)
101039a8:	dc401f17 	ldw	r17,124(sp)
101039ac:	dd800404 	addi	r22,sp,16
101039b0:	003eb506 	br	10103488 <__alt_data_end+0xfffe3488>
101039b4:	d9002c17 	ldw	r4,176(sp)
101039b8:	d9801e04 	addi	r6,sp,120
101039bc:	b80b883a 	mov	r5,r23
101039c0:	01087f40 	call	101087f4 <__sprint_r>
101039c4:	103b831e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101039c8:	d8c02017 	ldw	r3,128(sp)
101039cc:	dc401f17 	ldw	r17,124(sp)
101039d0:	da000404 	addi	r8,sp,16
101039d4:	003e8d06 	br	1010340c <__alt_data_end+0xfffe340c>
101039d8:	d9002c17 	ldw	r4,176(sp)
101039dc:	d9801e04 	addi	r6,sp,120
101039e0:	b80b883a 	mov	r5,r23
101039e4:	01087f40 	call	101087f4 <__sprint_r>
101039e8:	103b7a1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101039ec:	d8c02017 	ldw	r3,128(sp)
101039f0:	dc401f17 	ldw	r17,124(sp)
101039f4:	dd800404 	addi	r22,sp,16
101039f8:	003e8f06 	br	10103438 <__alt_data_end+0xfffe3438>
101039fc:	0027883a 	mov	r19,zero
10103a00:	003f4a06 	br	1010372c <__alt_data_end+0xfffe372c>
10103a04:	d9002c17 	ldw	r4,176(sp)
10103a08:	d9801e04 	addi	r6,sp,120
10103a0c:	b80b883a 	mov	r5,r23
10103a10:	01087f40 	call	101087f4 <__sprint_r>
10103a14:	103b6f1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103a18:	d8c02017 	ldw	r3,128(sp)
10103a1c:	da000404 	addi	r8,sp,16
10103a20:	003c9d06 	br	10102c98 <__alt_data_end+0xfffe2c98>
10103a24:	04e7c83a 	sub	r19,zero,r19
10103a28:	9804c03a 	cmpne	r2,r19,zero
10103a2c:	05adc83a 	sub	r22,zero,r22
10103a30:	b0adc83a 	sub	r22,r22,r2
10103a34:	d8802917 	ldw	r2,164(sp)
10103a38:	07000b44 	movi	fp,45
10103a3c:	df002785 	stb	fp,158(sp)
10103a40:	10017b16 	blt	r2,zero,10104030 <___vfprintf_internal_r+0x1c64>
10103a44:	00bfdfc4 	movi	r2,-129
10103a48:	90a4703a 	and	r18,r18,r2
10103a4c:	003bb106 	br	10102914 <__alt_data_end+0xfffe2914>
10103a50:	d9003617 	ldw	r4,216(sp)
10103a54:	d9403817 	ldw	r5,224(sp)
10103a58:	da003d15 	stw	r8,244(sp)
10103a5c:	010820c0 	call	1010820c <__fpclassifyd>
10103a60:	da003d17 	ldw	r8,244(sp)
10103a64:	1000f026 	beq	r2,zero,10103e28 <___vfprintf_internal_r+0x1a5c>
10103a68:	d9002917 	ldw	r4,164(sp)
10103a6c:	05bff7c4 	movi	r22,-33
10103a70:	00bfffc4 	movi	r2,-1
10103a74:	8dac703a 	and	r22,r17,r22
10103a78:	20820026 	beq	r4,r2,1010427c <___vfprintf_internal_r+0x1eb0>
10103a7c:	008011c4 	movi	r2,71
10103a80:	b081f726 	beq	r22,r2,10104260 <___vfprintf_internal_r+0x1e94>
10103a84:	d9003817 	ldw	r4,224(sp)
10103a88:	90c04014 	ori	r3,r18,256
10103a8c:	d8c02b15 	stw	r3,172(sp)
10103a90:	20021516 	blt	r4,zero,101042e8 <___vfprintf_internal_r+0x1f1c>
10103a94:	dcc03817 	ldw	r19,224(sp)
10103a98:	d8002a05 	stb	zero,168(sp)
10103a9c:	00801984 	movi	r2,102
10103aa0:	8881f926 	beq	r17,r2,10104288 <___vfprintf_internal_r+0x1ebc>
10103aa4:	00801184 	movi	r2,70
10103aa8:	88821c26 	beq	r17,r2,1010431c <___vfprintf_internal_r+0x1f50>
10103aac:	00801144 	movi	r2,69
10103ab0:	b081ef26 	beq	r22,r2,10104270 <___vfprintf_internal_r+0x1ea4>
10103ab4:	d8c02917 	ldw	r3,164(sp)
10103ab8:	d8802104 	addi	r2,sp,132
10103abc:	d8800315 	stw	r2,12(sp)
10103ac0:	d9403617 	ldw	r5,216(sp)
10103ac4:	d8802504 	addi	r2,sp,148
10103ac8:	d9002c17 	ldw	r4,176(sp)
10103acc:	d8800215 	stw	r2,8(sp)
10103ad0:	d8802604 	addi	r2,sp,152
10103ad4:	d8c00015 	stw	r3,0(sp)
10103ad8:	d8800115 	stw	r2,4(sp)
10103adc:	01c00084 	movi	r7,2
10103ae0:	980d883a 	mov	r6,r19
10103ae4:	d8c03c15 	stw	r3,240(sp)
10103ae8:	da003d15 	stw	r8,244(sp)
10103aec:	0104abc0 	call	10104abc <_dtoa_r>
10103af0:	1021883a 	mov	r16,r2
10103af4:	008019c4 	movi	r2,103
10103af8:	d8c03c17 	ldw	r3,240(sp)
10103afc:	da003d17 	ldw	r8,244(sp)
10103b00:	88817126 	beq	r17,r2,101040c8 <___vfprintf_internal_r+0x1cfc>
10103b04:	008011c4 	movi	r2,71
10103b08:	88829226 	beq	r17,r2,10104554 <___vfprintf_internal_r+0x2188>
10103b0c:	80f9883a 	add	fp,r16,r3
10103b10:	d9003617 	ldw	r4,216(sp)
10103b14:	000d883a 	mov	r6,zero
10103b18:	000f883a 	mov	r7,zero
10103b1c:	980b883a 	mov	r5,r19
10103b20:	da003d15 	stw	r8,244(sp)
10103b24:	010cdc40 	call	1010cdc4 <__eqdf2>
10103b28:	da003d17 	ldw	r8,244(sp)
10103b2c:	10018d26 	beq	r2,zero,10104164 <___vfprintf_internal_r+0x1d98>
10103b30:	d8802117 	ldw	r2,132(sp)
10103b34:	1700062e 	bgeu	r2,fp,10103b50 <___vfprintf_internal_r+0x1784>
10103b38:	01000c04 	movi	r4,48
10103b3c:	10c00044 	addi	r3,r2,1
10103b40:	d8c02115 	stw	r3,132(sp)
10103b44:	11000005 	stb	r4,0(r2)
10103b48:	d8802117 	ldw	r2,132(sp)
10103b4c:	173ffb36 	bltu	r2,fp,10103b3c <__alt_data_end+0xfffe3b3c>
10103b50:	1405c83a 	sub	r2,r2,r16
10103b54:	d8803315 	stw	r2,204(sp)
10103b58:	008011c4 	movi	r2,71
10103b5c:	b0817626 	beq	r22,r2,10104138 <___vfprintf_internal_r+0x1d6c>
10103b60:	00801944 	movi	r2,101
10103b64:	1442810e 	bge	r2,r17,1010456c <___vfprintf_internal_r+0x21a0>
10103b68:	d8c02617 	ldw	r3,152(sp)
10103b6c:	00801984 	movi	r2,102
10103b70:	d8c03215 	stw	r3,200(sp)
10103b74:	8881fe26 	beq	r17,r2,10104370 <___vfprintf_internal_r+0x1fa4>
10103b78:	d8c03217 	ldw	r3,200(sp)
10103b7c:	d9003317 	ldw	r4,204(sp)
10103b80:	1901dd16 	blt	r3,r4,101042f8 <___vfprintf_internal_r+0x1f2c>
10103b84:	9480004c 	andi	r18,r18,1
10103b88:	90022b1e 	bne	r18,zero,10104438 <___vfprintf_internal_r+0x206c>
10103b8c:	1805883a 	mov	r2,r3
10103b90:	18028016 	blt	r3,zero,10104594 <___vfprintf_internal_r+0x21c8>
10103b94:	d8c03217 	ldw	r3,200(sp)
10103b98:	044019c4 	movi	r17,103
10103b9c:	d8c02e15 	stw	r3,184(sp)
10103ba0:	df002a07 	ldb	fp,168(sp)
10103ba4:	e001531e 	bne	fp,zero,101040f4 <___vfprintf_internal_r+0x1d28>
10103ba8:	df002783 	ldbu	fp,158(sp)
10103bac:	d8802a15 	stw	r2,168(sp)
10103bb0:	dc802b17 	ldw	r18,172(sp)
10103bb4:	d8002915 	stw	zero,164(sp)
10103bb8:	003bd106 	br	10102b00 <__alt_data_end+0xfffe2b00>
10103bbc:	d8802d17 	ldw	r2,180(sp)
10103bc0:	d8c02d17 	ldw	r3,180(sp)
10103bc4:	d9002d17 	ldw	r4,180(sp)
10103bc8:	10800017 	ldw	r2,0(r2)
10103bcc:	18c00117 	ldw	r3,4(r3)
10103bd0:	21000204 	addi	r4,r4,8
10103bd4:	d8803615 	stw	r2,216(sp)
10103bd8:	d8c03815 	stw	r3,224(sp)
10103bdc:	d9002d15 	stw	r4,180(sp)
10103be0:	003b7506 	br	101029b8 <__alt_data_end+0xfffe29b8>
10103be4:	ac400007 	ldb	r17,0(r21)
10103be8:	003a5906 	br	10102550 <__alt_data_end+0xfffe2550>
10103bec:	9080100c 	andi	r2,r18,64
10103bf0:	1000a826 	beq	r2,zero,10103e94 <___vfprintf_internal_r+0x1ac8>
10103bf4:	d9002d17 	ldw	r4,180(sp)
10103bf8:	002d883a 	mov	r22,zero
10103bfc:	24c0000b 	ldhu	r19,0(r4)
10103c00:	21000104 	addi	r4,r4,4
10103c04:	d9002d15 	stw	r4,180(sp)
10103c08:	003ccb06 	br	10102f38 <__alt_data_end+0xfffe2f38>
10103c0c:	d8c02d17 	ldw	r3,180(sp)
10103c10:	d9002917 	ldw	r4,164(sp)
10103c14:	002d883a 	mov	r22,zero
10103c18:	18800104 	addi	r2,r3,4
10103c1c:	1cc00017 	ldw	r19,0(r3)
10103c20:	203ebb0e 	bge	r4,zero,10103710 <__alt_data_end+0xfffe3710>
10103c24:	003ef106 	br	101037ec <__alt_data_end+0xfffe37ec>
10103c28:	9080040c 	andi	r2,r18,16
10103c2c:	1000921e 	bne	r2,zero,10103e78 <___vfprintf_internal_r+0x1aac>
10103c30:	9480100c 	andi	r18,r18,64
10103c34:	90013926 	beq	r18,zero,1010411c <___vfprintf_internal_r+0x1d50>
10103c38:	d9002d17 	ldw	r4,180(sp)
10103c3c:	d9402f17 	ldw	r5,188(sp)
10103c40:	20800017 	ldw	r2,0(r4)
10103c44:	21000104 	addi	r4,r4,4
10103c48:	d9002d15 	stw	r4,180(sp)
10103c4c:	1140000d 	sth	r5,0(r2)
10103c50:	003a1606 	br	101024ac <__alt_data_end+0xfffe24ac>
10103c54:	9080100c 	andi	r2,r18,64
10103c58:	10008026 	beq	r2,zero,10103e5c <___vfprintf_internal_r+0x1a90>
10103c5c:	d8c02d17 	ldw	r3,180(sp)
10103c60:	1cc0000f 	ldh	r19,0(r3)
10103c64:	18c00104 	addi	r3,r3,4
10103c68:	d8c02d15 	stw	r3,180(sp)
10103c6c:	982dd7fa 	srai	r22,r19,31
10103c70:	b005883a 	mov	r2,r22
10103c74:	003b1f06 	br	101028f4 <__alt_data_end+0xfffe28f4>
10103c78:	9080100c 	andi	r2,r18,64
10103c7c:	d8002785 	stb	zero,158(sp)
10103c80:	10008a1e 	bne	r2,zero,10103eac <___vfprintf_internal_r+0x1ae0>
10103c84:	d9402d17 	ldw	r5,180(sp)
10103c88:	d8c02917 	ldw	r3,164(sp)
10103c8c:	002d883a 	mov	r22,zero
10103c90:	28800104 	addi	r2,r5,4
10103c94:	2cc00017 	ldw	r19,0(r5)
10103c98:	183e4b0e 	bge	r3,zero,101035c8 <__alt_data_end+0xfffe35c8>
10103c9c:	9d86b03a 	or	r3,r19,r22
10103ca0:	d8802d15 	stw	r2,180(sp)
10103ca4:	183e4c1e 	bne	r3,zero,101035d8 <__alt_data_end+0xfffe35d8>
10103ca8:	0039883a 	mov	fp,zero
10103cac:	0005883a 	mov	r2,zero
10103cb0:	003d4006 	br	101031b4 <__alt_data_end+0xfffe31b4>
10103cb4:	01440474 	movhi	r5,4113
10103cb8:	29443b84 	addi	r5,r5,4334
10103cbc:	d9402b15 	stw	r5,172(sp)
10103cc0:	d9402b17 	ldw	r5,172(sp)
10103cc4:	1c47883a 	add	r3,r3,r17
10103cc8:	10800044 	addi	r2,r2,1
10103ccc:	41400015 	stw	r5,0(r8)
10103cd0:	44400115 	stw	r17,4(r8)
10103cd4:	d8c02015 	stw	r3,128(sp)
10103cd8:	d8801f15 	stw	r2,124(sp)
10103cdc:	010001c4 	movi	r4,7
10103ce0:	20bec816 	blt	r4,r2,10103804 <__alt_data_end+0xfffe3804>
10103ce4:	42000204 	addi	r8,r8,8
10103ce8:	003ecd06 	br	10103820 <__alt_data_end+0xfffe3820>
10103cec:	d9002917 	ldw	r4,164(sp)
10103cf0:	d8002785 	stb	zero,158(sp)
10103cf4:	203d2d16 	blt	r4,zero,101031ac <__alt_data_end+0xfffe31ac>
10103cf8:	00bfdfc4 	movi	r2,-129
10103cfc:	90a4703a 	and	r18,r18,r2
10103d00:	003a9106 	br	10102748 <__alt_data_end+0xfffe2748>
10103d04:	01040474 	movhi	r4,4113
10103d08:	21043b84 	addi	r4,r4,4334
10103d0c:	d9002b15 	stw	r4,172(sp)
10103d10:	003c0c06 	br	10102d44 <__alt_data_end+0xfffe2d44>
10103d14:	d9002c17 	ldw	r4,176(sp)
10103d18:	d9801e04 	addi	r6,sp,120
10103d1c:	b80b883a 	mov	r5,r23
10103d20:	01087f40 	call	101087f4 <__sprint_r>
10103d24:	103aab1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103d28:	d8c02017 	ldw	r3,128(sp)
10103d2c:	da000404 	addi	r8,sp,16
10103d30:	003d4106 	br	10103238 <__alt_data_end+0xfffe3238>
10103d34:	d8801f17 	ldw	r2,124(sp)
10103d38:	01440474 	movhi	r5,4113
10103d3c:	01000044 	movi	r4,1
10103d40:	18c00044 	addi	r3,r3,1
10103d44:	10800044 	addi	r2,r2,1
10103d48:	29443b04 	addi	r5,r5,4332
10103d4c:	41000115 	stw	r4,4(r8)
10103d50:	41400015 	stw	r5,0(r8)
10103d54:	d8c02015 	stw	r3,128(sp)
10103d58:	d8801f15 	stw	r2,124(sp)
10103d5c:	010001c4 	movi	r4,7
10103d60:	20805c16 	blt	r4,r2,10103ed4 <___vfprintf_internal_r+0x1b08>
10103d64:	42000204 	addi	r8,r8,8
10103d68:	8800041e 	bne	r17,zero,10103d7c <___vfprintf_internal_r+0x19b0>
10103d6c:	d8803317 	ldw	r2,204(sp)
10103d70:	1000021e 	bne	r2,zero,10103d7c <___vfprintf_internal_r+0x19b0>
10103d74:	9080004c 	andi	r2,r18,1
10103d78:	103c0926 	beq	r2,zero,10102da0 <__alt_data_end+0xfffe2da0>
10103d7c:	d9003717 	ldw	r4,220(sp)
10103d80:	d8801f17 	ldw	r2,124(sp)
10103d84:	d9403417 	ldw	r5,208(sp)
10103d88:	20c7883a 	add	r3,r4,r3
10103d8c:	10800044 	addi	r2,r2,1
10103d90:	41000115 	stw	r4,4(r8)
10103d94:	41400015 	stw	r5,0(r8)
10103d98:	d8c02015 	stw	r3,128(sp)
10103d9c:	d8801f15 	stw	r2,124(sp)
10103da0:	010001c4 	movi	r4,7
10103da4:	20812116 	blt	r4,r2,1010422c <___vfprintf_internal_r+0x1e60>
10103da8:	42000204 	addi	r8,r8,8
10103dac:	0463c83a 	sub	r17,zero,r17
10103db0:	0440730e 	bge	zero,r17,10103f80 <___vfprintf_internal_r+0x1bb4>
10103db4:	05800404 	movi	r22,16
10103db8:	b440860e 	bge	r22,r17,10103fd4 <___vfprintf_internal_r+0x1c08>
10103dbc:	01440474 	movhi	r5,4113
10103dc0:	29443b84 	addi	r5,r5,4334
10103dc4:	d9402b15 	stw	r5,172(sp)
10103dc8:	070001c4 	movi	fp,7
10103dcc:	dcc02c17 	ldw	r19,176(sp)
10103dd0:	00000306 	br	10103de0 <___vfprintf_internal_r+0x1a14>
10103dd4:	42000204 	addi	r8,r8,8
10103dd8:	8c7ffc04 	addi	r17,r17,-16
10103ddc:	b440800e 	bge	r22,r17,10103fe0 <___vfprintf_internal_r+0x1c14>
10103de0:	18c00404 	addi	r3,r3,16
10103de4:	10800044 	addi	r2,r2,1
10103de8:	45000015 	stw	r20,0(r8)
10103dec:	45800115 	stw	r22,4(r8)
10103df0:	d8c02015 	stw	r3,128(sp)
10103df4:	d8801f15 	stw	r2,124(sp)
10103df8:	e0bff60e 	bge	fp,r2,10103dd4 <__alt_data_end+0xfffe3dd4>
10103dfc:	d9801e04 	addi	r6,sp,120
10103e00:	b80b883a 	mov	r5,r23
10103e04:	9809883a 	mov	r4,r19
10103e08:	01087f40 	call	101087f4 <__sprint_r>
10103e0c:	103a711e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103e10:	d8c02017 	ldw	r3,128(sp)
10103e14:	d8801f17 	ldw	r2,124(sp)
10103e18:	da000404 	addi	r8,sp,16
10103e1c:	003fee06 	br	10103dd8 <__alt_data_end+0xfffe3dd8>
10103e20:	00bfffc4 	movi	r2,-1
10103e24:	003a6f06 	br	101027e4 <__alt_data_end+0xfffe27e4>
10103e28:	008011c4 	movi	r2,71
10103e2c:	1440b816 	blt	r2,r17,10104110 <___vfprintf_internal_r+0x1d44>
10103e30:	04040474 	movhi	r16,4113
10103e34:	84042d04 	addi	r16,r16,4276
10103e38:	00c000c4 	movi	r3,3
10103e3c:	00bfdfc4 	movi	r2,-129
10103e40:	d8c02a15 	stw	r3,168(sp)
10103e44:	90a4703a 	and	r18,r18,r2
10103e48:	df002783 	ldbu	fp,158(sp)
10103e4c:	d8c02e15 	stw	r3,184(sp)
10103e50:	d8002915 	stw	zero,164(sp)
10103e54:	d8003215 	stw	zero,200(sp)
10103e58:	003b2906 	br	10102b00 <__alt_data_end+0xfffe2b00>
10103e5c:	d9002d17 	ldw	r4,180(sp)
10103e60:	24c00017 	ldw	r19,0(r4)
10103e64:	21000104 	addi	r4,r4,4
10103e68:	d9002d15 	stw	r4,180(sp)
10103e6c:	982dd7fa 	srai	r22,r19,31
10103e70:	b005883a 	mov	r2,r22
10103e74:	003a9f06 	br	101028f4 <__alt_data_end+0xfffe28f4>
10103e78:	d9402d17 	ldw	r5,180(sp)
10103e7c:	d8c02f17 	ldw	r3,188(sp)
10103e80:	28800017 	ldw	r2,0(r5)
10103e84:	29400104 	addi	r5,r5,4
10103e88:	d9402d15 	stw	r5,180(sp)
10103e8c:	10c00015 	stw	r3,0(r2)
10103e90:	00398606 	br	101024ac <__alt_data_end+0xfffe24ac>
10103e94:	d9402d17 	ldw	r5,180(sp)
10103e98:	002d883a 	mov	r22,zero
10103e9c:	2cc00017 	ldw	r19,0(r5)
10103ea0:	29400104 	addi	r5,r5,4
10103ea4:	d9402d15 	stw	r5,180(sp)
10103ea8:	003c2306 	br	10102f38 <__alt_data_end+0xfffe2f38>
10103eac:	d8c02d17 	ldw	r3,180(sp)
10103eb0:	d9002917 	ldw	r4,164(sp)
10103eb4:	002d883a 	mov	r22,zero
10103eb8:	18800104 	addi	r2,r3,4
10103ebc:	1cc0000b 	ldhu	r19,0(r3)
10103ec0:	203dc10e 	bge	r4,zero,101035c8 <__alt_data_end+0xfffe35c8>
10103ec4:	003f7506 	br	10103c9c <__alt_data_end+0xfffe3c9c>
10103ec8:	04040474 	movhi	r16,4113
10103ecc:	84042b04 	addi	r16,r16,4268
10103ed0:	003acc06 	br	10102a04 <__alt_data_end+0xfffe2a04>
10103ed4:	d9002c17 	ldw	r4,176(sp)
10103ed8:	d9801e04 	addi	r6,sp,120
10103edc:	b80b883a 	mov	r5,r23
10103ee0:	01087f40 	call	101087f4 <__sprint_r>
10103ee4:	103a3b1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103ee8:	dc402617 	ldw	r17,152(sp)
10103eec:	d8c02017 	ldw	r3,128(sp)
10103ef0:	da000404 	addi	r8,sp,16
10103ef4:	003f9c06 	br	10103d68 <__alt_data_end+0xfffe3d68>
10103ef8:	ac400043 	ldbu	r17,1(r21)
10103efc:	94800814 	ori	r18,r18,32
10103f00:	ad400044 	addi	r21,r21,1
10103f04:	8c403fcc 	andi	r17,r17,255
10103f08:	8c40201c 	xori	r17,r17,128
10103f0c:	8c7fe004 	addi	r17,r17,-128
10103f10:	00398f06 	br	10102550 <__alt_data_end+0xfffe2550>
10103f14:	d8c02d15 	stw	r3,180(sp)
10103f18:	0039883a 	mov	fp,zero
10103f1c:	003e3506 	br	101037f4 <__alt_data_end+0xfffe37f4>
10103f20:	d9002c17 	ldw	r4,176(sp)
10103f24:	d9801e04 	addi	r6,sp,120
10103f28:	b80b883a 	mov	r5,r23
10103f2c:	01087f40 	call	101087f4 <__sprint_r>
10103f30:	103a281e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103f34:	d8c02017 	ldw	r3,128(sp)
10103f38:	da000404 	addi	r8,sp,16
10103f3c:	003cd006 	br	10103280 <__alt_data_end+0xfffe3280>
10103f40:	8009883a 	mov	r4,r16
10103f44:	da003d15 	stw	r8,244(sp)
10103f48:	01086600 	call	10108660 <strlen>
10103f4c:	d8802e15 	stw	r2,184(sp)
10103f50:	da003d17 	ldw	r8,244(sp)
10103f54:	103c340e 	bge	r2,zero,10103028 <__alt_data_end+0xfffe3028>
10103f58:	0005883a 	mov	r2,zero
10103f5c:	003c3206 	br	10103028 <__alt_data_end+0xfffe3028>
10103f60:	d9002c17 	ldw	r4,176(sp)
10103f64:	d9801e04 	addi	r6,sp,120
10103f68:	b80b883a 	mov	r5,r23
10103f6c:	01087f40 	call	101087f4 <__sprint_r>
10103f70:	103a181e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103f74:	d8c02017 	ldw	r3,128(sp)
10103f78:	d8801f17 	ldw	r2,124(sp)
10103f7c:	da000404 	addi	r8,sp,16
10103f80:	d9403317 	ldw	r5,204(sp)
10103f84:	10800044 	addi	r2,r2,1
10103f88:	44000015 	stw	r16,0(r8)
10103f8c:	28c7883a 	add	r3,r5,r3
10103f90:	003b7d06 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103f94:	01040474 	movhi	r4,4113
10103f98:	21043f84 	addi	r4,r4,4350
10103f9c:	d9003515 	stw	r4,212(sp)
10103fa0:	003b1406 	br	10102bf4 <__alt_data_end+0xfffe2bf4>
10103fa4:	013fffc4 	movi	r4,-1
10103fa8:	003a3506 	br	10102880 <__alt_data_end+0xfffe2880>
10103fac:	0023883a 	mov	r17,zero
10103fb0:	003d9d06 	br	10103628 <__alt_data_end+0xfffe3628>
10103fb4:	d9002c17 	ldw	r4,176(sp)
10103fb8:	d9801e04 	addi	r6,sp,120
10103fbc:	b80b883a 	mov	r5,r23
10103fc0:	01087f40 	call	101087f4 <__sprint_r>
10103fc4:	103a031e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10103fc8:	d8c02017 	ldw	r3,128(sp)
10103fcc:	da000404 	addi	r8,sp,16
10103fd0:	003d9406 	br	10103624 <__alt_data_end+0xfffe3624>
10103fd4:	01040474 	movhi	r4,4113
10103fd8:	21043b84 	addi	r4,r4,4334
10103fdc:	d9002b15 	stw	r4,172(sp)
10103fe0:	d9002b17 	ldw	r4,172(sp)
10103fe4:	1c47883a 	add	r3,r3,r17
10103fe8:	10800044 	addi	r2,r2,1
10103fec:	41000015 	stw	r4,0(r8)
10103ff0:	44400115 	stw	r17,4(r8)
10103ff4:	d8c02015 	stw	r3,128(sp)
10103ff8:	d8801f15 	stw	r2,124(sp)
10103ffc:	010001c4 	movi	r4,7
10104000:	20bfd716 	blt	r4,r2,10103f60 <__alt_data_end+0xfffe3f60>
10104004:	42000204 	addi	r8,r8,8
10104008:	003fdd06 	br	10103f80 <__alt_data_end+0xfffe3f80>
1010400c:	d9002c17 	ldw	r4,176(sp)
10104010:	d9801e04 	addi	r6,sp,120
10104014:	b80b883a 	mov	r5,r23
10104018:	01087f40 	call	101087f4 <__sprint_r>
1010401c:	1039ed1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10104020:	d8802617 	ldw	r2,152(sp)
10104024:	d8c02017 	ldw	r3,128(sp)
10104028:	da000404 	addi	r8,sp,16
1010402c:	003e1006 	br	10103870 <__alt_data_end+0xfffe3870>
10104030:	00800044 	movi	r2,1
10104034:	10803fcc 	andi	r2,r2,255
10104038:	00c00044 	movi	r3,1
1010403c:	10fa3526 	beq	r2,r3,10102914 <__alt_data_end+0xfffe2914>
10104040:	00c00084 	movi	r3,2
10104044:	10fbcb26 	beq	r2,r3,10102f74 <__alt_data_end+0xfffe2f74>
10104048:	003a8f06 	br	10102a88 <__alt_data_end+0xfffe2a88>
1010404c:	01040474 	movhi	r4,4113
10104050:	21043f84 	addi	r4,r4,4350
10104054:	d9003515 	stw	r4,212(sp)
10104058:	003b7606 	br	10102e34 <__alt_data_end+0xfffe2e34>
1010405c:	d8802917 	ldw	r2,164(sp)
10104060:	00c00184 	movi	r3,6
10104064:	1880012e 	bgeu	r3,r2,1010406c <___vfprintf_internal_r+0x1ca0>
10104068:	1805883a 	mov	r2,r3
1010406c:	d8802e15 	stw	r2,184(sp)
10104070:	1000ef16 	blt	r2,zero,10104430 <___vfprintf_internal_r+0x2064>
10104074:	04040474 	movhi	r16,4113
10104078:	d8802a15 	stw	r2,168(sp)
1010407c:	dcc02d15 	stw	r19,180(sp)
10104080:	d8002915 	stw	zero,164(sp)
10104084:	d8003215 	stw	zero,200(sp)
10104088:	84043904 	addi	r16,r16,4324
1010408c:	0039883a 	mov	fp,zero
10104090:	003aa206 	br	10102b1c <__alt_data_end+0xfffe2b1c>
10104094:	0021883a 	mov	r16,zero
10104098:	003e0706 	br	101038b8 <__alt_data_end+0xfffe38b8>
1010409c:	d9002c17 	ldw	r4,176(sp)
101040a0:	d9801e04 	addi	r6,sp,120
101040a4:	b80b883a 	mov	r5,r23
101040a8:	01087f40 	call	101087f4 <__sprint_r>
101040ac:	1039c91e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
101040b0:	d8802617 	ldw	r2,152(sp)
101040b4:	d9403317 	ldw	r5,204(sp)
101040b8:	d8c02017 	ldw	r3,128(sp)
101040bc:	da000404 	addi	r8,sp,16
101040c0:	2885c83a 	sub	r2,r5,r2
101040c4:	003dfb06 	br	101038b4 <__alt_data_end+0xfffe38b4>
101040c8:	9080004c 	andi	r2,r18,1
101040cc:	103e8f1e 	bne	r2,zero,10103b0c <__alt_data_end+0xfffe3b0c>
101040d0:	d8802117 	ldw	r2,132(sp)
101040d4:	003e9e06 	br	10103b50 <__alt_data_end+0xfffe3b50>
101040d8:	1025883a 	mov	r18,r2
101040dc:	0039883a 	mov	fp,zero
101040e0:	00800084 	movi	r2,2
101040e4:	003fd306 	br	10104034 <__alt_data_end+0xfffe4034>
101040e8:	07000b44 	movi	fp,45
101040ec:	df002785 	stb	fp,158(sp)
101040f0:	003a4006 	br	101029f4 <__alt_data_end+0xfffe29f4>
101040f4:	00c00b44 	movi	r3,45
101040f8:	d8c02785 	stb	r3,158(sp)
101040fc:	d8802a15 	stw	r2,168(sp)
10104100:	dc802b17 	ldw	r18,172(sp)
10104104:	d8002915 	stw	zero,164(sp)
10104108:	07000b44 	movi	fp,45
1010410c:	003a8006 	br	10102b10 <__alt_data_end+0xfffe2b10>
10104110:	04040474 	movhi	r16,4113
10104114:	84042e04 	addi	r16,r16,4280
10104118:	003f4706 	br	10103e38 <__alt_data_end+0xfffe3e38>
1010411c:	d8c02d17 	ldw	r3,180(sp)
10104120:	d9002f17 	ldw	r4,188(sp)
10104124:	18800017 	ldw	r2,0(r3)
10104128:	18c00104 	addi	r3,r3,4
1010412c:	d8c02d15 	stw	r3,180(sp)
10104130:	11000015 	stw	r4,0(r2)
10104134:	0038dd06 	br	101024ac <__alt_data_end+0xfffe24ac>
10104138:	dd802617 	ldw	r22,152(sp)
1010413c:	00bfff44 	movi	r2,-3
10104140:	b0801c16 	blt	r22,r2,101041b4 <___vfprintf_internal_r+0x1de8>
10104144:	d9402917 	ldw	r5,164(sp)
10104148:	2d801a16 	blt	r5,r22,101041b4 <___vfprintf_internal_r+0x1de8>
1010414c:	dd803215 	stw	r22,200(sp)
10104150:	003e8906 	br	10103b78 <__alt_data_end+0xfffe3b78>
10104154:	01040474 	movhi	r4,4113
10104158:	21043b84 	addi	r4,r4,4334
1010415c:	d9002b15 	stw	r4,172(sp)
10104160:	003c9106 	br	101033a8 <__alt_data_end+0xfffe33a8>
10104164:	e005883a 	mov	r2,fp
10104168:	003e7906 	br	10103b50 <__alt_data_end+0xfffe3b50>
1010416c:	d9402917 	ldw	r5,164(sp)
10104170:	df002783 	ldbu	fp,158(sp)
10104174:	dcc02d15 	stw	r19,180(sp)
10104178:	d9402a15 	stw	r5,168(sp)
1010417c:	d9402e15 	stw	r5,184(sp)
10104180:	d8002915 	stw	zero,164(sp)
10104184:	d8003215 	stw	zero,200(sp)
10104188:	003a5d06 	br	10102b00 <__alt_data_end+0xfffe2b00>
1010418c:	9080004c 	andi	r2,r18,1
10104190:	0039883a 	mov	fp,zero
10104194:	10000426 	beq	r2,zero,101041a8 <___vfprintf_internal_r+0x1ddc>
10104198:	00800c04 	movi	r2,48
1010419c:	dc001dc4 	addi	r16,sp,119
101041a0:	d8801dc5 	stb	r2,119(sp)
101041a4:	003b8006 	br	10102fa8 <__alt_data_end+0xfffe2fa8>
101041a8:	d8002e15 	stw	zero,184(sp)
101041ac:	dc001e04 	addi	r16,sp,120
101041b0:	003a4d06 	br	10102ae8 <__alt_data_end+0xfffe2ae8>
101041b4:	8c7fff84 	addi	r17,r17,-2
101041b8:	b5bfffc4 	addi	r22,r22,-1
101041bc:	dd802615 	stw	r22,152(sp)
101041c0:	dc4022c5 	stb	r17,139(sp)
101041c4:	b000bf16 	blt	r22,zero,101044c4 <___vfprintf_internal_r+0x20f8>
101041c8:	00800ac4 	movi	r2,43
101041cc:	d8802305 	stb	r2,140(sp)
101041d0:	00800244 	movi	r2,9
101041d4:	15807016 	blt	r2,r22,10104398 <___vfprintf_internal_r+0x1fcc>
101041d8:	00800c04 	movi	r2,48
101041dc:	b5800c04 	addi	r22,r22,48
101041e0:	d8802345 	stb	r2,141(sp)
101041e4:	dd802385 	stb	r22,142(sp)
101041e8:	d88023c4 	addi	r2,sp,143
101041ec:	df0022c4 	addi	fp,sp,139
101041f0:	d8c03317 	ldw	r3,204(sp)
101041f4:	1739c83a 	sub	fp,r2,fp
101041f8:	d9003317 	ldw	r4,204(sp)
101041fc:	e0c7883a 	add	r3,fp,r3
10104200:	df003a15 	stw	fp,232(sp)
10104204:	d8c02e15 	stw	r3,184(sp)
10104208:	00800044 	movi	r2,1
1010420c:	1100b30e 	bge	r2,r4,101044dc <___vfprintf_internal_r+0x2110>
10104210:	d8c02e17 	ldw	r3,184(sp)
10104214:	18c00044 	addi	r3,r3,1
10104218:	d8c02e15 	stw	r3,184(sp)
1010421c:	1805883a 	mov	r2,r3
10104220:	1800ac16 	blt	r3,zero,101044d4 <___vfprintf_internal_r+0x2108>
10104224:	d8003215 	stw	zero,200(sp)
10104228:	003e5d06 	br	10103ba0 <__alt_data_end+0xfffe3ba0>
1010422c:	d9002c17 	ldw	r4,176(sp)
10104230:	d9801e04 	addi	r6,sp,120
10104234:	b80b883a 	mov	r5,r23
10104238:	01087f40 	call	101087f4 <__sprint_r>
1010423c:	1039651e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10104240:	dc402617 	ldw	r17,152(sp)
10104244:	d8c02017 	ldw	r3,128(sp)
10104248:	d8801f17 	ldw	r2,124(sp)
1010424c:	da000404 	addi	r8,sp,16
10104250:	003ed606 	br	10103dac <__alt_data_end+0xfffe3dac>
10104254:	582b883a 	mov	r21,r11
10104258:	d8002915 	stw	zero,164(sp)
1010425c:	0038bd06 	br	10102554 <__alt_data_end+0xfffe2554>
10104260:	d8802917 	ldw	r2,164(sp)
10104264:	103e071e 	bne	r2,zero,10103a84 <__alt_data_end+0xfffe3a84>
10104268:	dc002915 	stw	r16,164(sp)
1010426c:	003e0506 	br	10103a84 <__alt_data_end+0xfffe3a84>
10104270:	d9002917 	ldw	r4,164(sp)
10104274:	20c00044 	addi	r3,r4,1
10104278:	003e0f06 	br	10103ab8 <__alt_data_end+0xfffe3ab8>
1010427c:	01400184 	movi	r5,6
10104280:	d9402915 	stw	r5,164(sp)
10104284:	003dff06 	br	10103a84 <__alt_data_end+0xfffe3a84>
10104288:	d8802104 	addi	r2,sp,132
1010428c:	d8800315 	stw	r2,12(sp)
10104290:	d8802504 	addi	r2,sp,148
10104294:	d8800215 	stw	r2,8(sp)
10104298:	d8802604 	addi	r2,sp,152
1010429c:	d8800115 	stw	r2,4(sp)
101042a0:	d8802917 	ldw	r2,164(sp)
101042a4:	d9403617 	ldw	r5,216(sp)
101042a8:	d9002c17 	ldw	r4,176(sp)
101042ac:	d8800015 	stw	r2,0(sp)
101042b0:	01c000c4 	movi	r7,3
101042b4:	980d883a 	mov	r6,r19
101042b8:	da003d15 	stw	r8,244(sp)
101042bc:	0104abc0 	call	10104abc <_dtoa_r>
101042c0:	d8c02917 	ldw	r3,164(sp)
101042c4:	da003d17 	ldw	r8,244(sp)
101042c8:	1021883a 	mov	r16,r2
101042cc:	10f9883a 	add	fp,r2,r3
101042d0:	81000007 	ldb	r4,0(r16)
101042d4:	00800c04 	movi	r2,48
101042d8:	20805e26 	beq	r4,r2,10104454 <___vfprintf_internal_r+0x2088>
101042dc:	d8c02617 	ldw	r3,152(sp)
101042e0:	e0f9883a 	add	fp,fp,r3
101042e4:	003e0a06 	br	10103b10 <__alt_data_end+0xfffe3b10>
101042e8:	00c00b44 	movi	r3,45
101042ec:	24e0003c 	xorhi	r19,r4,32768
101042f0:	d8c02a05 	stb	r3,168(sp)
101042f4:	003de906 	br	10103a9c <__alt_data_end+0xfffe3a9c>
101042f8:	d8c03217 	ldw	r3,200(sp)
101042fc:	00c07a0e 	bge	zero,r3,101044e8 <___vfprintf_internal_r+0x211c>
10104300:	00800044 	movi	r2,1
10104304:	d9003317 	ldw	r4,204(sp)
10104308:	1105883a 	add	r2,r2,r4
1010430c:	d8802e15 	stw	r2,184(sp)
10104310:	10004e16 	blt	r2,zero,1010444c <___vfprintf_internal_r+0x2080>
10104314:	044019c4 	movi	r17,103
10104318:	003e2106 	br	10103ba0 <__alt_data_end+0xfffe3ba0>
1010431c:	d9002917 	ldw	r4,164(sp)
10104320:	d8802104 	addi	r2,sp,132
10104324:	d8800315 	stw	r2,12(sp)
10104328:	d9000015 	stw	r4,0(sp)
1010432c:	d8802504 	addi	r2,sp,148
10104330:	d9403617 	ldw	r5,216(sp)
10104334:	d9002c17 	ldw	r4,176(sp)
10104338:	d8800215 	stw	r2,8(sp)
1010433c:	d8802604 	addi	r2,sp,152
10104340:	d8800115 	stw	r2,4(sp)
10104344:	01c000c4 	movi	r7,3
10104348:	980d883a 	mov	r6,r19
1010434c:	da003d15 	stw	r8,244(sp)
10104350:	0104abc0 	call	10104abc <_dtoa_r>
10104354:	d8c02917 	ldw	r3,164(sp)
10104358:	da003d17 	ldw	r8,244(sp)
1010435c:	1021883a 	mov	r16,r2
10104360:	00801184 	movi	r2,70
10104364:	80f9883a 	add	fp,r16,r3
10104368:	88bfd926 	beq	r17,r2,101042d0 <__alt_data_end+0xfffe42d0>
1010436c:	003de806 	br	10103b10 <__alt_data_end+0xfffe3b10>
10104370:	d9002917 	ldw	r4,164(sp)
10104374:	00c04d0e 	bge	zero,r3,101044ac <___vfprintf_internal_r+0x20e0>
10104378:	2000441e 	bne	r4,zero,1010448c <___vfprintf_internal_r+0x20c0>
1010437c:	9480004c 	andi	r18,r18,1
10104380:	9000421e 	bne	r18,zero,1010448c <___vfprintf_internal_r+0x20c0>
10104384:	1805883a 	mov	r2,r3
10104388:	18007016 	blt	r3,zero,1010454c <___vfprintf_internal_r+0x2180>
1010438c:	d8c03217 	ldw	r3,200(sp)
10104390:	d8c02e15 	stw	r3,184(sp)
10104394:	003e0206 	br	10103ba0 <__alt_data_end+0xfffe3ba0>
10104398:	df0022c4 	addi	fp,sp,139
1010439c:	dc002915 	stw	r16,164(sp)
101043a0:	4027883a 	mov	r19,r8
101043a4:	e021883a 	mov	r16,fp
101043a8:	b009883a 	mov	r4,r22
101043ac:	01400284 	movi	r5,10
101043b0:	010bb000 	call	1010bb00 <__modsi3>
101043b4:	10800c04 	addi	r2,r2,48
101043b8:	843fffc4 	addi	r16,r16,-1
101043bc:	b009883a 	mov	r4,r22
101043c0:	01400284 	movi	r5,10
101043c4:	80800005 	stb	r2,0(r16)
101043c8:	010ba7c0 	call	1010ba7c <__divsi3>
101043cc:	102d883a 	mov	r22,r2
101043d0:	00800244 	movi	r2,9
101043d4:	15bff416 	blt	r2,r22,101043a8 <__alt_data_end+0xfffe43a8>
101043d8:	9811883a 	mov	r8,r19
101043dc:	b0800c04 	addi	r2,r22,48
101043e0:	8027883a 	mov	r19,r16
101043e4:	997fffc4 	addi	r5,r19,-1
101043e8:	98bfffc5 	stb	r2,-1(r19)
101043ec:	dc002917 	ldw	r16,164(sp)
101043f0:	2f006a2e 	bgeu	r5,fp,1010459c <___vfprintf_internal_r+0x21d0>
101043f4:	d9c02384 	addi	r7,sp,142
101043f8:	3ccfc83a 	sub	r7,r7,r19
101043fc:	d9002344 	addi	r4,sp,141
10104400:	e1cf883a 	add	r7,fp,r7
10104404:	00000106 	br	1010440c <___vfprintf_internal_r+0x2040>
10104408:	28800003 	ldbu	r2,0(r5)
1010440c:	20800005 	stb	r2,0(r4)
10104410:	21000044 	addi	r4,r4,1
10104414:	29400044 	addi	r5,r5,1
10104418:	393ffb1e 	bne	r7,r4,10104408 <__alt_data_end+0xfffe4408>
1010441c:	d8802304 	addi	r2,sp,140
10104420:	14c5c83a 	sub	r2,r2,r19
10104424:	d8c02344 	addi	r3,sp,141
10104428:	1885883a 	add	r2,r3,r2
1010442c:	003f7006 	br	101041f0 <__alt_data_end+0xfffe41f0>
10104430:	0005883a 	mov	r2,zero
10104434:	003f0f06 	br	10104074 <__alt_data_end+0xfffe4074>
10104438:	d8c03217 	ldw	r3,200(sp)
1010443c:	18c00044 	addi	r3,r3,1
10104440:	d8c02e15 	stw	r3,184(sp)
10104444:	1805883a 	mov	r2,r3
10104448:	183fb20e 	bge	r3,zero,10104314 <__alt_data_end+0xfffe4314>
1010444c:	0005883a 	mov	r2,zero
10104450:	003fb006 	br	10104314 <__alt_data_end+0xfffe4314>
10104454:	d9003617 	ldw	r4,216(sp)
10104458:	000d883a 	mov	r6,zero
1010445c:	000f883a 	mov	r7,zero
10104460:	980b883a 	mov	r5,r19
10104464:	d8c03c15 	stw	r3,240(sp)
10104468:	da003d15 	stw	r8,244(sp)
1010446c:	010cdc40 	call	1010cdc4 <__eqdf2>
10104470:	d8c03c17 	ldw	r3,240(sp)
10104474:	da003d17 	ldw	r8,244(sp)
10104478:	103f9826 	beq	r2,zero,101042dc <__alt_data_end+0xfffe42dc>
1010447c:	00800044 	movi	r2,1
10104480:	10c7c83a 	sub	r3,r2,r3
10104484:	d8c02615 	stw	r3,152(sp)
10104488:	003f9506 	br	101042e0 <__alt_data_end+0xfffe42e0>
1010448c:	d9002917 	ldw	r4,164(sp)
10104490:	d8c03217 	ldw	r3,200(sp)
10104494:	20800044 	addi	r2,r4,1
10104498:	1885883a 	add	r2,r3,r2
1010449c:	d8802e15 	stw	r2,184(sp)
101044a0:	103dbf0e 	bge	r2,zero,10103ba0 <__alt_data_end+0xfffe3ba0>
101044a4:	0005883a 	mov	r2,zero
101044a8:	003dbd06 	br	10103ba0 <__alt_data_end+0xfffe3ba0>
101044ac:	2000211e 	bne	r4,zero,10104534 <___vfprintf_internal_r+0x2168>
101044b0:	9480004c 	andi	r18,r18,1
101044b4:	90001f1e 	bne	r18,zero,10104534 <___vfprintf_internal_r+0x2168>
101044b8:	00800044 	movi	r2,1
101044bc:	d8802e15 	stw	r2,184(sp)
101044c0:	003db706 	br	10103ba0 <__alt_data_end+0xfffe3ba0>
101044c4:	00800b44 	movi	r2,45
101044c8:	05adc83a 	sub	r22,zero,r22
101044cc:	d8802305 	stb	r2,140(sp)
101044d0:	003f3f06 	br	101041d0 <__alt_data_end+0xfffe41d0>
101044d4:	0005883a 	mov	r2,zero
101044d8:	003f5206 	br	10104224 <__alt_data_end+0xfffe4224>
101044dc:	90a4703a 	and	r18,r18,r2
101044e0:	903f4e26 	beq	r18,zero,1010421c <__alt_data_end+0xfffe421c>
101044e4:	003f4a06 	br	10104210 <__alt_data_end+0xfffe4210>
101044e8:	00800084 	movi	r2,2
101044ec:	10c5c83a 	sub	r2,r2,r3
101044f0:	003f8406 	br	10104304 <__alt_data_end+0xfffe4304>
101044f4:	d8802d17 	ldw	r2,180(sp)
101044f8:	d9002d17 	ldw	r4,180(sp)
101044fc:	ac400043 	ldbu	r17,1(r21)
10104500:	10800017 	ldw	r2,0(r2)
10104504:	582b883a 	mov	r21,r11
10104508:	d8802915 	stw	r2,164(sp)
1010450c:	20800104 	addi	r2,r4,4
10104510:	d9002917 	ldw	r4,164(sp)
10104514:	d8802d15 	stw	r2,180(sp)
10104518:	203e7a0e 	bge	r4,zero,10103f04 <__alt_data_end+0xfffe3f04>
1010451c:	8c403fcc 	andi	r17,r17,255
10104520:	00bfffc4 	movi	r2,-1
10104524:	8c40201c 	xori	r17,r17,128
10104528:	d8802915 	stw	r2,164(sp)
1010452c:	8c7fe004 	addi	r17,r17,-128
10104530:	00380706 	br	10102550 <__alt_data_end+0xfffe2550>
10104534:	d8c02917 	ldw	r3,164(sp)
10104538:	18c00084 	addi	r3,r3,2
1010453c:	d8c02e15 	stw	r3,184(sp)
10104540:	1805883a 	mov	r2,r3
10104544:	183d960e 	bge	r3,zero,10103ba0 <__alt_data_end+0xfffe3ba0>
10104548:	003fd606 	br	101044a4 <__alt_data_end+0xfffe44a4>
1010454c:	0005883a 	mov	r2,zero
10104550:	003f8e06 	br	1010438c <__alt_data_end+0xfffe438c>
10104554:	9080004c 	andi	r2,r18,1
10104558:	103f811e 	bne	r2,zero,10104360 <__alt_data_end+0xfffe4360>
1010455c:	d8802117 	ldw	r2,132(sp)
10104560:	1405c83a 	sub	r2,r2,r16
10104564:	d8803315 	stw	r2,204(sp)
10104568:	b47ef326 	beq	r22,r17,10104138 <__alt_data_end+0xfffe4138>
1010456c:	dd802617 	ldw	r22,152(sp)
10104570:	003f1106 	br	101041b8 <__alt_data_end+0xfffe41b8>
10104574:	d9c02785 	stb	r7,158(sp)
10104578:	00390406 	br	1010298c <__alt_data_end+0xfffe298c>
1010457c:	d9c02785 	stb	r7,158(sp)
10104580:	0038d306 	br	101028d0 <__alt_data_end+0xfffe28d0>
10104584:	d9c02785 	stb	r7,158(sp)
10104588:	003a6106 	br	10102f10 <__alt_data_end+0xfffe2f10>
1010458c:	d9c02785 	stb	r7,158(sp)
10104590:	003af806 	br	10103174 <__alt_data_end+0xfffe3174>
10104594:	0005883a 	mov	r2,zero
10104598:	003d7e06 	br	10103b94 <__alt_data_end+0xfffe3b94>
1010459c:	d8802344 	addi	r2,sp,141
101045a0:	003f1306 	br	101041f0 <__alt_data_end+0xfffe41f0>
101045a4:	d9c02785 	stb	r7,158(sp)
101045a8:	00392306 	br	10102a38 <__alt_data_end+0xfffe2a38>
101045ac:	d9c02785 	stb	r7,158(sp)
101045b0:	003aa906 	br	10103058 <__alt_data_end+0xfffe3058>
101045b4:	d9c02785 	stb	r7,158(sp)
101045b8:	003a3d06 	br	10102eb0 <__alt_data_end+0xfffe2eb0>
101045bc:	d9c02785 	stb	r7,158(sp)
101045c0:	003aca06 	br	101030ec <__alt_data_end+0xfffe30ec>

101045c4 <__vfprintf_internal>:
101045c4:	00840474 	movhi	r2,4113
101045c8:	108ba404 	addi	r2,r2,11920
101045cc:	300f883a 	mov	r7,r6
101045d0:	280d883a 	mov	r6,r5
101045d4:	200b883a 	mov	r5,r4
101045d8:	11000017 	ldw	r4,0(r2)
101045dc:	01023cc1 	jmpi	101023cc <___vfprintf_internal_r>

101045e0 <__sbprintf>:
101045e0:	2880030b 	ldhu	r2,12(r5)
101045e4:	2ac01917 	ldw	r11,100(r5)
101045e8:	2a80038b 	ldhu	r10,14(r5)
101045ec:	2a400717 	ldw	r9,28(r5)
101045f0:	2a000917 	ldw	r8,36(r5)
101045f4:	defee204 	addi	sp,sp,-1144
101045f8:	00c10004 	movi	r3,1024
101045fc:	dc011a15 	stw	r16,1128(sp)
10104600:	10bfff4c 	andi	r2,r2,65533
10104604:	2821883a 	mov	r16,r5
10104608:	d8cb883a 	add	r5,sp,r3
1010460c:	dc811c15 	stw	r18,1136(sp)
10104610:	dc411b15 	stw	r17,1132(sp)
10104614:	dfc11d15 	stw	ra,1140(sp)
10104618:	2025883a 	mov	r18,r4
1010461c:	d881030d 	sth	r2,1036(sp)
10104620:	dac11915 	stw	r11,1124(sp)
10104624:	da81038d 	sth	r10,1038(sp)
10104628:	da410715 	stw	r9,1052(sp)
1010462c:	da010915 	stw	r8,1060(sp)
10104630:	dec10015 	stw	sp,1024(sp)
10104634:	dec10415 	stw	sp,1040(sp)
10104638:	d8c10215 	stw	r3,1032(sp)
1010463c:	d8c10515 	stw	r3,1044(sp)
10104640:	d8010615 	stw	zero,1048(sp)
10104644:	01023cc0 	call	101023cc <___vfprintf_internal_r>
10104648:	1023883a 	mov	r17,r2
1010464c:	10000416 	blt	r2,zero,10104660 <__sbprintf+0x80>
10104650:	d9410004 	addi	r5,sp,1024
10104654:	9009883a 	mov	r4,r18
10104658:	01063600 	call	10106360 <_fflush_r>
1010465c:	10000d1e 	bne	r2,zero,10104694 <__sbprintf+0xb4>
10104660:	d881030b 	ldhu	r2,1036(sp)
10104664:	1080100c 	andi	r2,r2,64
10104668:	10000326 	beq	r2,zero,10104678 <__sbprintf+0x98>
1010466c:	8080030b 	ldhu	r2,12(r16)
10104670:	10801014 	ori	r2,r2,64
10104674:	8080030d 	sth	r2,12(r16)
10104678:	8805883a 	mov	r2,r17
1010467c:	dfc11d17 	ldw	ra,1140(sp)
10104680:	dc811c17 	ldw	r18,1136(sp)
10104684:	dc411b17 	ldw	r17,1132(sp)
10104688:	dc011a17 	ldw	r16,1128(sp)
1010468c:	dec11e04 	addi	sp,sp,1144
10104690:	f800283a 	ret
10104694:	047fffc4 	movi	r17,-1
10104698:	003ff106 	br	10104660 <__alt_data_end+0xfffe4660>

1010469c <_write_r>:
1010469c:	defffd04 	addi	sp,sp,-12
101046a0:	2805883a 	mov	r2,r5
101046a4:	dc000015 	stw	r16,0(sp)
101046a8:	04040474 	movhi	r16,4113
101046ac:	dc400115 	stw	r17,4(sp)
101046b0:	300b883a 	mov	r5,r6
101046b4:	84129e04 	addi	r16,r16,19064
101046b8:	2023883a 	mov	r17,r4
101046bc:	380d883a 	mov	r6,r7
101046c0:	1009883a 	mov	r4,r2
101046c4:	dfc00215 	stw	ra,8(sp)
101046c8:	80000015 	stw	zero,0(r16)
101046cc:	010eef80 	call	1010eef8 <write>
101046d0:	00ffffc4 	movi	r3,-1
101046d4:	10c00526 	beq	r2,r3,101046ec <_write_r+0x50>
101046d8:	dfc00217 	ldw	ra,8(sp)
101046dc:	dc400117 	ldw	r17,4(sp)
101046e0:	dc000017 	ldw	r16,0(sp)
101046e4:	dec00304 	addi	sp,sp,12
101046e8:	f800283a 	ret
101046ec:	80c00017 	ldw	r3,0(r16)
101046f0:	183ff926 	beq	r3,zero,101046d8 <__alt_data_end+0xfffe46d8>
101046f4:	88c00015 	stw	r3,0(r17)
101046f8:	003ff706 	br	101046d8 <__alt_data_end+0xfffe46d8>

101046fc <__swsetup_r>:
101046fc:	00840474 	movhi	r2,4113
10104700:	defffd04 	addi	sp,sp,-12
10104704:	108ba404 	addi	r2,r2,11920
10104708:	dc400115 	stw	r17,4(sp)
1010470c:	2023883a 	mov	r17,r4
10104710:	11000017 	ldw	r4,0(r2)
10104714:	dc000015 	stw	r16,0(sp)
10104718:	dfc00215 	stw	ra,8(sp)
1010471c:	2821883a 	mov	r16,r5
10104720:	20000226 	beq	r4,zero,1010472c <__swsetup_r+0x30>
10104724:	20800e17 	ldw	r2,56(r4)
10104728:	10003126 	beq	r2,zero,101047f0 <__swsetup_r+0xf4>
1010472c:	8080030b 	ldhu	r2,12(r16)
10104730:	10c0020c 	andi	r3,r2,8
10104734:	1009883a 	mov	r4,r2
10104738:	18000f26 	beq	r3,zero,10104778 <__swsetup_r+0x7c>
1010473c:	80c00417 	ldw	r3,16(r16)
10104740:	18001526 	beq	r3,zero,10104798 <__swsetup_r+0x9c>
10104744:	1100004c 	andi	r4,r2,1
10104748:	20001c1e 	bne	r4,zero,101047bc <__swsetup_r+0xc0>
1010474c:	1080008c 	andi	r2,r2,2
10104750:	1000291e 	bne	r2,zero,101047f8 <__swsetup_r+0xfc>
10104754:	80800517 	ldw	r2,20(r16)
10104758:	80800215 	stw	r2,8(r16)
1010475c:	18001c26 	beq	r3,zero,101047d0 <__swsetup_r+0xd4>
10104760:	0005883a 	mov	r2,zero
10104764:	dfc00217 	ldw	ra,8(sp)
10104768:	dc400117 	ldw	r17,4(sp)
1010476c:	dc000017 	ldw	r16,0(sp)
10104770:	dec00304 	addi	sp,sp,12
10104774:	f800283a 	ret
10104778:	2080040c 	andi	r2,r4,16
1010477c:	10002e26 	beq	r2,zero,10104838 <__swsetup_r+0x13c>
10104780:	2080010c 	andi	r2,r4,4
10104784:	10001e1e 	bne	r2,zero,10104800 <__swsetup_r+0x104>
10104788:	80c00417 	ldw	r3,16(r16)
1010478c:	20800214 	ori	r2,r4,8
10104790:	8080030d 	sth	r2,12(r16)
10104794:	183feb1e 	bne	r3,zero,10104744 <__alt_data_end+0xfffe4744>
10104798:	1100a00c 	andi	r4,r2,640
1010479c:	01408004 	movi	r5,512
101047a0:	217fe826 	beq	r4,r5,10104744 <__alt_data_end+0xfffe4744>
101047a4:	800b883a 	mov	r5,r16
101047a8:	8809883a 	mov	r4,r17
101047ac:	01014780 	call	10101478 <__smakebuf_r>
101047b0:	8080030b 	ldhu	r2,12(r16)
101047b4:	80c00417 	ldw	r3,16(r16)
101047b8:	003fe206 	br	10104744 <__alt_data_end+0xfffe4744>
101047bc:	80800517 	ldw	r2,20(r16)
101047c0:	80000215 	stw	zero,8(r16)
101047c4:	0085c83a 	sub	r2,zero,r2
101047c8:	80800615 	stw	r2,24(r16)
101047cc:	183fe41e 	bne	r3,zero,10104760 <__alt_data_end+0xfffe4760>
101047d0:	80c0030b 	ldhu	r3,12(r16)
101047d4:	0005883a 	mov	r2,zero
101047d8:	1900200c 	andi	r4,r3,128
101047dc:	203fe126 	beq	r4,zero,10104764 <__alt_data_end+0xfffe4764>
101047e0:	18c01014 	ori	r3,r3,64
101047e4:	80c0030d 	sth	r3,12(r16)
101047e8:	00bfffc4 	movi	r2,-1
101047ec:	003fdd06 	br	10104764 <__alt_data_end+0xfffe4764>
101047f0:	010673c0 	call	1010673c <__sinit>
101047f4:	003fcd06 	br	1010472c <__alt_data_end+0xfffe472c>
101047f8:	0005883a 	mov	r2,zero
101047fc:	003fd606 	br	10104758 <__alt_data_end+0xfffe4758>
10104800:	81400c17 	ldw	r5,48(r16)
10104804:	28000626 	beq	r5,zero,10104820 <__swsetup_r+0x124>
10104808:	80801004 	addi	r2,r16,64
1010480c:	28800326 	beq	r5,r2,1010481c <__swsetup_r+0x120>
10104810:	8809883a 	mov	r4,r17
10104814:	010695c0 	call	1010695c <_free_r>
10104818:	8100030b 	ldhu	r4,12(r16)
1010481c:	80000c15 	stw	zero,48(r16)
10104820:	80c00417 	ldw	r3,16(r16)
10104824:	00bff6c4 	movi	r2,-37
10104828:	1108703a 	and	r4,r2,r4
1010482c:	80000115 	stw	zero,4(r16)
10104830:	80c00015 	stw	r3,0(r16)
10104834:	003fd506 	br	1010478c <__alt_data_end+0xfffe478c>
10104838:	00800244 	movi	r2,9
1010483c:	88800015 	stw	r2,0(r17)
10104840:	20801014 	ori	r2,r4,64
10104844:	8080030d 	sth	r2,12(r16)
10104848:	00bfffc4 	movi	r2,-1
1010484c:	003fc506 	br	10104764 <__alt_data_end+0xfffe4764>

10104850 <_close_r>:
10104850:	defffd04 	addi	sp,sp,-12
10104854:	dc000015 	stw	r16,0(sp)
10104858:	04040474 	movhi	r16,4113
1010485c:	dc400115 	stw	r17,4(sp)
10104860:	84129e04 	addi	r16,r16,19064
10104864:	2023883a 	mov	r17,r4
10104868:	2809883a 	mov	r4,r5
1010486c:	dfc00215 	stw	ra,8(sp)
10104870:	80000015 	stw	zero,0(r16)
10104874:	010e2d40 	call	1010e2d4 <close>
10104878:	00ffffc4 	movi	r3,-1
1010487c:	10c00526 	beq	r2,r3,10104894 <_close_r+0x44>
10104880:	dfc00217 	ldw	ra,8(sp)
10104884:	dc400117 	ldw	r17,4(sp)
10104888:	dc000017 	ldw	r16,0(sp)
1010488c:	dec00304 	addi	sp,sp,12
10104890:	f800283a 	ret
10104894:	80c00017 	ldw	r3,0(r16)
10104898:	183ff926 	beq	r3,zero,10104880 <__alt_data_end+0xfffe4880>
1010489c:	88c00015 	stw	r3,0(r17)
101048a0:	003ff706 	br	10104880 <__alt_data_end+0xfffe4880>

101048a4 <abort>:
101048a4:	deffff04 	addi	sp,sp,-4
101048a8:	01000184 	movi	r4,6
101048ac:	dfc00015 	stw	ra,0(sp)
101048b0:	01084d40 	call	101084d4 <raise>
101048b4:	01000044 	movi	r4,1
101048b8:	010e3d00 	call	1010e3d0 <_exit>

101048bc <quorem>:
101048bc:	defff704 	addi	sp,sp,-36
101048c0:	dc800215 	stw	r18,8(sp)
101048c4:	20800417 	ldw	r2,16(r4)
101048c8:	2c800417 	ldw	r18,16(r5)
101048cc:	dfc00815 	stw	ra,32(sp)
101048d0:	ddc00715 	stw	r23,28(sp)
101048d4:	dd800615 	stw	r22,24(sp)
101048d8:	dd400515 	stw	r21,20(sp)
101048dc:	dd000415 	stw	r20,16(sp)
101048e0:	dcc00315 	stw	r19,12(sp)
101048e4:	dc400115 	stw	r17,4(sp)
101048e8:	dc000015 	stw	r16,0(sp)
101048ec:	14807116 	blt	r2,r18,10104ab4 <quorem+0x1f8>
101048f0:	94bfffc4 	addi	r18,r18,-1
101048f4:	94ad883a 	add	r22,r18,r18
101048f8:	b5ad883a 	add	r22,r22,r22
101048fc:	2c400504 	addi	r17,r5,20
10104900:	8da9883a 	add	r20,r17,r22
10104904:	25400504 	addi	r21,r4,20
10104908:	282f883a 	mov	r23,r5
1010490c:	adad883a 	add	r22,r21,r22
10104910:	a1400017 	ldw	r5,0(r20)
10104914:	2021883a 	mov	r16,r4
10104918:	b1000017 	ldw	r4,0(r22)
1010491c:	29400044 	addi	r5,r5,1
10104920:	010bb740 	call	1010bb74 <__udivsi3>
10104924:	1027883a 	mov	r19,r2
10104928:	10002c26 	beq	r2,zero,101049dc <quorem+0x120>
1010492c:	a813883a 	mov	r9,r21
10104930:	880b883a 	mov	r5,r17
10104934:	0009883a 	mov	r4,zero
10104938:	000d883a 	mov	r6,zero
1010493c:	2a000017 	ldw	r8,0(r5)
10104940:	49c00017 	ldw	r7,0(r9)
10104944:	29400104 	addi	r5,r5,4
10104948:	40bfffcc 	andi	r2,r8,65535
1010494c:	14c5383a 	mul	r2,r2,r19
10104950:	4010d43a 	srli	r8,r8,16
10104954:	38ffffcc 	andi	r3,r7,65535
10104958:	1105883a 	add	r2,r2,r4
1010495c:	1008d43a 	srli	r4,r2,16
10104960:	44d1383a 	mul	r8,r8,r19
10104964:	198d883a 	add	r6,r3,r6
10104968:	10ffffcc 	andi	r3,r2,65535
1010496c:	30c7c83a 	sub	r3,r6,r3
10104970:	380ed43a 	srli	r7,r7,16
10104974:	4105883a 	add	r2,r8,r4
10104978:	180dd43a 	srai	r6,r3,16
1010497c:	113fffcc 	andi	r4,r2,65535
10104980:	390fc83a 	sub	r7,r7,r4
10104984:	398d883a 	add	r6,r7,r6
10104988:	300e943a 	slli	r7,r6,16
1010498c:	18ffffcc 	andi	r3,r3,65535
10104990:	1008d43a 	srli	r4,r2,16
10104994:	38ceb03a 	or	r7,r7,r3
10104998:	49c00015 	stw	r7,0(r9)
1010499c:	300dd43a 	srai	r6,r6,16
101049a0:	4a400104 	addi	r9,r9,4
101049a4:	a17fe52e 	bgeu	r20,r5,1010493c <__alt_data_end+0xfffe493c>
101049a8:	b0800017 	ldw	r2,0(r22)
101049ac:	10000b1e 	bne	r2,zero,101049dc <quorem+0x120>
101049b0:	b0bfff04 	addi	r2,r22,-4
101049b4:	a880082e 	bgeu	r21,r2,101049d8 <quorem+0x11c>
101049b8:	b0ffff17 	ldw	r3,-4(r22)
101049bc:	18000326 	beq	r3,zero,101049cc <quorem+0x110>
101049c0:	00000506 	br	101049d8 <quorem+0x11c>
101049c4:	10c00017 	ldw	r3,0(r2)
101049c8:	1800031e 	bne	r3,zero,101049d8 <quorem+0x11c>
101049cc:	10bfff04 	addi	r2,r2,-4
101049d0:	94bfffc4 	addi	r18,r18,-1
101049d4:	a8bffb36 	bltu	r21,r2,101049c4 <__alt_data_end+0xfffe49c4>
101049d8:	84800415 	stw	r18,16(r16)
101049dc:	b80b883a 	mov	r5,r23
101049e0:	8009883a 	mov	r4,r16
101049e4:	0107a780 	call	10107a78 <__mcmp>
101049e8:	10002616 	blt	r2,zero,10104a84 <quorem+0x1c8>
101049ec:	9cc00044 	addi	r19,r19,1
101049f0:	a805883a 	mov	r2,r21
101049f4:	000b883a 	mov	r5,zero
101049f8:	11000017 	ldw	r4,0(r2)
101049fc:	89800017 	ldw	r6,0(r17)
10104a00:	10800104 	addi	r2,r2,4
10104a04:	20ffffcc 	andi	r3,r4,65535
10104a08:	194b883a 	add	r5,r3,r5
10104a0c:	30ffffcc 	andi	r3,r6,65535
10104a10:	28c7c83a 	sub	r3,r5,r3
10104a14:	300cd43a 	srli	r6,r6,16
10104a18:	2008d43a 	srli	r4,r4,16
10104a1c:	180bd43a 	srai	r5,r3,16
10104a20:	18ffffcc 	andi	r3,r3,65535
10104a24:	2189c83a 	sub	r4,r4,r6
10104a28:	2149883a 	add	r4,r4,r5
10104a2c:	200c943a 	slli	r6,r4,16
10104a30:	8c400104 	addi	r17,r17,4
10104a34:	200bd43a 	srai	r5,r4,16
10104a38:	30c6b03a 	or	r3,r6,r3
10104a3c:	10ffff15 	stw	r3,-4(r2)
10104a40:	a47fed2e 	bgeu	r20,r17,101049f8 <__alt_data_end+0xfffe49f8>
10104a44:	9485883a 	add	r2,r18,r18
10104a48:	1085883a 	add	r2,r2,r2
10104a4c:	a887883a 	add	r3,r21,r2
10104a50:	18800017 	ldw	r2,0(r3)
10104a54:	10000b1e 	bne	r2,zero,10104a84 <quorem+0x1c8>
10104a58:	18bfff04 	addi	r2,r3,-4
10104a5c:	a880082e 	bgeu	r21,r2,10104a80 <quorem+0x1c4>
10104a60:	18ffff17 	ldw	r3,-4(r3)
10104a64:	18000326 	beq	r3,zero,10104a74 <quorem+0x1b8>
10104a68:	00000506 	br	10104a80 <quorem+0x1c4>
10104a6c:	10c00017 	ldw	r3,0(r2)
10104a70:	1800031e 	bne	r3,zero,10104a80 <quorem+0x1c4>
10104a74:	10bfff04 	addi	r2,r2,-4
10104a78:	94bfffc4 	addi	r18,r18,-1
10104a7c:	a8bffb36 	bltu	r21,r2,10104a6c <__alt_data_end+0xfffe4a6c>
10104a80:	84800415 	stw	r18,16(r16)
10104a84:	9805883a 	mov	r2,r19
10104a88:	dfc00817 	ldw	ra,32(sp)
10104a8c:	ddc00717 	ldw	r23,28(sp)
10104a90:	dd800617 	ldw	r22,24(sp)
10104a94:	dd400517 	ldw	r21,20(sp)
10104a98:	dd000417 	ldw	r20,16(sp)
10104a9c:	dcc00317 	ldw	r19,12(sp)
10104aa0:	dc800217 	ldw	r18,8(sp)
10104aa4:	dc400117 	ldw	r17,4(sp)
10104aa8:	dc000017 	ldw	r16,0(sp)
10104aac:	dec00904 	addi	sp,sp,36
10104ab0:	f800283a 	ret
10104ab4:	0005883a 	mov	r2,zero
10104ab8:	003ff306 	br	10104a88 <__alt_data_end+0xfffe4a88>

10104abc <_dtoa_r>:
10104abc:	20801017 	ldw	r2,64(r4)
10104ac0:	deffde04 	addi	sp,sp,-136
10104ac4:	df002015 	stw	fp,128(sp)
10104ac8:	dcc01b15 	stw	r19,108(sp)
10104acc:	dc801a15 	stw	r18,104(sp)
10104ad0:	dc401915 	stw	r17,100(sp)
10104ad4:	dc001815 	stw	r16,96(sp)
10104ad8:	dfc02115 	stw	ra,132(sp)
10104adc:	ddc01f15 	stw	r23,124(sp)
10104ae0:	dd801e15 	stw	r22,120(sp)
10104ae4:	dd401d15 	stw	r21,116(sp)
10104ae8:	dd001c15 	stw	r20,112(sp)
10104aec:	d9c00315 	stw	r7,12(sp)
10104af0:	2039883a 	mov	fp,r4
10104af4:	3023883a 	mov	r17,r6
10104af8:	2825883a 	mov	r18,r5
10104afc:	dc002417 	ldw	r16,144(sp)
10104b00:	3027883a 	mov	r19,r6
10104b04:	10000826 	beq	r2,zero,10104b28 <_dtoa_r+0x6c>
10104b08:	21801117 	ldw	r6,68(r4)
10104b0c:	00c00044 	movi	r3,1
10104b10:	100b883a 	mov	r5,r2
10104b14:	1986983a 	sll	r3,r3,r6
10104b18:	11800115 	stw	r6,4(r2)
10104b1c:	10c00215 	stw	r3,8(r2)
10104b20:	01072580 	call	10107258 <_Bfree>
10104b24:	e0001015 	stw	zero,64(fp)
10104b28:	88002e16 	blt	r17,zero,10104be4 <_dtoa_r+0x128>
10104b2c:	80000015 	stw	zero,0(r16)
10104b30:	889ffc2c 	andhi	r2,r17,32752
10104b34:	00dffc34 	movhi	r3,32752
10104b38:	10c01c26 	beq	r2,r3,10104bac <_dtoa_r+0xf0>
10104b3c:	000d883a 	mov	r6,zero
10104b40:	000f883a 	mov	r7,zero
10104b44:	9009883a 	mov	r4,r18
10104b48:	980b883a 	mov	r5,r19
10104b4c:	010cdc40 	call	1010cdc4 <__eqdf2>
10104b50:	10002b1e 	bne	r2,zero,10104c00 <_dtoa_r+0x144>
10104b54:	d9c02317 	ldw	r7,140(sp)
10104b58:	00800044 	movi	r2,1
10104b5c:	38800015 	stw	r2,0(r7)
10104b60:	d8802517 	ldw	r2,148(sp)
10104b64:	10019e26 	beq	r2,zero,101051e0 <_dtoa_r+0x724>
10104b68:	d8c02517 	ldw	r3,148(sp)
10104b6c:	00840474 	movhi	r2,4113
10104b70:	10843b44 	addi	r2,r2,4333
10104b74:	18800015 	stw	r2,0(r3)
10104b78:	10bfffc4 	addi	r2,r2,-1
10104b7c:	dfc02117 	ldw	ra,132(sp)
10104b80:	df002017 	ldw	fp,128(sp)
10104b84:	ddc01f17 	ldw	r23,124(sp)
10104b88:	dd801e17 	ldw	r22,120(sp)
10104b8c:	dd401d17 	ldw	r21,116(sp)
10104b90:	dd001c17 	ldw	r20,112(sp)
10104b94:	dcc01b17 	ldw	r19,108(sp)
10104b98:	dc801a17 	ldw	r18,104(sp)
10104b9c:	dc401917 	ldw	r17,100(sp)
10104ba0:	dc001817 	ldw	r16,96(sp)
10104ba4:	dec02204 	addi	sp,sp,136
10104ba8:	f800283a 	ret
10104bac:	d8c02317 	ldw	r3,140(sp)
10104bb0:	0089c3c4 	movi	r2,9999
10104bb4:	18800015 	stw	r2,0(r3)
10104bb8:	90017726 	beq	r18,zero,10105198 <_dtoa_r+0x6dc>
10104bbc:	00840474 	movhi	r2,4113
10104bc0:	10844704 	addi	r2,r2,4380
10104bc4:	d9002517 	ldw	r4,148(sp)
10104bc8:	203fec26 	beq	r4,zero,10104b7c <__alt_data_end+0xfffe4b7c>
10104bcc:	10c000c7 	ldb	r3,3(r2)
10104bd0:	1801781e 	bne	r3,zero,101051b4 <_dtoa_r+0x6f8>
10104bd4:	10c000c4 	addi	r3,r2,3
10104bd8:	d9802517 	ldw	r6,148(sp)
10104bdc:	30c00015 	stw	r3,0(r6)
10104be0:	003fe606 	br	10104b7c <__alt_data_end+0xfffe4b7c>
10104be4:	04e00034 	movhi	r19,32768
10104be8:	9cffffc4 	addi	r19,r19,-1
10104bec:	00800044 	movi	r2,1
10104bf0:	8ce6703a 	and	r19,r17,r19
10104bf4:	80800015 	stw	r2,0(r16)
10104bf8:	9823883a 	mov	r17,r19
10104bfc:	003fcc06 	br	10104b30 <__alt_data_end+0xfffe4b30>
10104c00:	d8800204 	addi	r2,sp,8
10104c04:	d8800015 	stw	r2,0(sp)
10104c08:	d9c00104 	addi	r7,sp,4
10104c0c:	900b883a 	mov	r5,r18
10104c10:	980d883a 	mov	r6,r19
10104c14:	e009883a 	mov	r4,fp
10104c18:	8820d53a 	srli	r16,r17,20
10104c1c:	0107e440 	call	10107e44 <__d2b>
10104c20:	d8800915 	stw	r2,36(sp)
10104c24:	8001651e 	bne	r16,zero,101051bc <_dtoa_r+0x700>
10104c28:	dd800217 	ldw	r22,8(sp)
10104c2c:	dc000117 	ldw	r16,4(sp)
10104c30:	00800804 	movi	r2,32
10104c34:	b421883a 	add	r16,r22,r16
10104c38:	80c10c84 	addi	r3,r16,1074
10104c3c:	10c2d10e 	bge	r2,r3,10105784 <_dtoa_r+0xcc8>
10104c40:	00801004 	movi	r2,64
10104c44:	81010484 	addi	r4,r16,1042
10104c48:	10c7c83a 	sub	r3,r2,r3
10104c4c:	9108d83a 	srl	r4,r18,r4
10104c50:	88e2983a 	sll	r17,r17,r3
10104c54:	2448b03a 	or	r4,r4,r17
10104c58:	010e18c0 	call	1010e18c <__floatunsidf>
10104c5c:	017f8434 	movhi	r5,65040
10104c60:	01800044 	movi	r6,1
10104c64:	1009883a 	mov	r4,r2
10104c68:	194b883a 	add	r5,r3,r5
10104c6c:	843fffc4 	addi	r16,r16,-1
10104c70:	d9801115 	stw	r6,68(sp)
10104c74:	000d883a 	mov	r6,zero
10104c78:	01cffe34 	movhi	r7,16376
10104c7c:	010d7340 	call	1010d734 <__subdf3>
10104c80:	0198dbf4 	movhi	r6,25455
10104c84:	01cff4f4 	movhi	r7,16339
10104c88:	3190d844 	addi	r6,r6,17249
10104c8c:	39e1e9c4 	addi	r7,r7,-30809
10104c90:	1009883a 	mov	r4,r2
10104c94:	180b883a 	mov	r5,r3
10104c98:	010d01c0 	call	1010d01c <__muldf3>
10104c9c:	01a2d874 	movhi	r6,35681
10104ca0:	01cff1f4 	movhi	r7,16327
10104ca4:	31b22cc4 	addi	r6,r6,-14157
10104ca8:	39e28a04 	addi	r7,r7,-30168
10104cac:	180b883a 	mov	r5,r3
10104cb0:	1009883a 	mov	r4,r2
10104cb4:	010bc300 	call	1010bc30 <__adddf3>
10104cb8:	8009883a 	mov	r4,r16
10104cbc:	1029883a 	mov	r20,r2
10104cc0:	1823883a 	mov	r17,r3
10104cc4:	010e0b00 	call	1010e0b0 <__floatsidf>
10104cc8:	019427f4 	movhi	r6,20639
10104ccc:	01cff4f4 	movhi	r7,16339
10104cd0:	319e7ec4 	addi	r6,r6,31227
10104cd4:	39d104c4 	addi	r7,r7,17427
10104cd8:	1009883a 	mov	r4,r2
10104cdc:	180b883a 	mov	r5,r3
10104ce0:	010d01c0 	call	1010d01c <__muldf3>
10104ce4:	100d883a 	mov	r6,r2
10104ce8:	180f883a 	mov	r7,r3
10104cec:	a009883a 	mov	r4,r20
10104cf0:	880b883a 	mov	r5,r17
10104cf4:	010bc300 	call	1010bc30 <__adddf3>
10104cf8:	1009883a 	mov	r4,r2
10104cfc:	180b883a 	mov	r5,r3
10104d00:	1029883a 	mov	r20,r2
10104d04:	1823883a 	mov	r17,r3
10104d08:	010e0300 	call	1010e030 <__fixdfsi>
10104d0c:	000d883a 	mov	r6,zero
10104d10:	000f883a 	mov	r7,zero
10104d14:	a009883a 	mov	r4,r20
10104d18:	880b883a 	mov	r5,r17
10104d1c:	d8800515 	stw	r2,20(sp)
10104d20:	010cf280 	call	1010cf28 <__ledf2>
10104d24:	10028716 	blt	r2,zero,10105744 <_dtoa_r+0xc88>
10104d28:	d8c00517 	ldw	r3,20(sp)
10104d2c:	00800584 	movi	r2,22
10104d30:	10c27536 	bltu	r2,r3,10105708 <_dtoa_r+0xc4c>
10104d34:	180490fa 	slli	r2,r3,3
10104d38:	00c40474 	movhi	r3,4113
10104d3c:	18c46204 	addi	r3,r3,4488
10104d40:	1885883a 	add	r2,r3,r2
10104d44:	11000017 	ldw	r4,0(r2)
10104d48:	11400117 	ldw	r5,4(r2)
10104d4c:	900d883a 	mov	r6,r18
10104d50:	980f883a 	mov	r7,r19
10104d54:	010ce4c0 	call	1010ce4c <__gedf2>
10104d58:	00828d0e 	bge	zero,r2,10105790 <_dtoa_r+0xcd4>
10104d5c:	d9000517 	ldw	r4,20(sp)
10104d60:	d8000e15 	stw	zero,56(sp)
10104d64:	213fffc4 	addi	r4,r4,-1
10104d68:	d9000515 	stw	r4,20(sp)
10104d6c:	b42dc83a 	sub	r22,r22,r16
10104d70:	b5bfffc4 	addi	r22,r22,-1
10104d74:	b0026f16 	blt	r22,zero,10105734 <_dtoa_r+0xc78>
10104d78:	d8000815 	stw	zero,32(sp)
10104d7c:	d9c00517 	ldw	r7,20(sp)
10104d80:	38026416 	blt	r7,zero,10105714 <_dtoa_r+0xc58>
10104d84:	b1ed883a 	add	r22,r22,r7
10104d88:	d9c00d15 	stw	r7,52(sp)
10104d8c:	d8000a15 	stw	zero,40(sp)
10104d90:	d9800317 	ldw	r6,12(sp)
10104d94:	00800244 	movi	r2,9
10104d98:	11811436 	bltu	r2,r6,101051ec <_dtoa_r+0x730>
10104d9c:	00800144 	movi	r2,5
10104da0:	1184e10e 	bge	r2,r6,10106128 <_dtoa_r+0x166c>
10104da4:	31bfff04 	addi	r6,r6,-4
10104da8:	d9800315 	stw	r6,12(sp)
10104dac:	0023883a 	mov	r17,zero
10104db0:	d9800317 	ldw	r6,12(sp)
10104db4:	008000c4 	movi	r2,3
10104db8:	30836726 	beq	r6,r2,10105b58 <_dtoa_r+0x109c>
10104dbc:	1183410e 	bge	r2,r6,10105ac4 <_dtoa_r+0x1008>
10104dc0:	d9c00317 	ldw	r7,12(sp)
10104dc4:	00800104 	movi	r2,4
10104dc8:	38827c26 	beq	r7,r2,101057bc <_dtoa_r+0xd00>
10104dcc:	00800144 	movi	r2,5
10104dd0:	3884c41e 	bne	r7,r2,101060e4 <_dtoa_r+0x1628>
10104dd4:	00800044 	movi	r2,1
10104dd8:	d8800b15 	stw	r2,44(sp)
10104ddc:	d8c00517 	ldw	r3,20(sp)
10104de0:	d9002217 	ldw	r4,136(sp)
10104de4:	1907883a 	add	r3,r3,r4
10104de8:	19800044 	addi	r6,r3,1
10104dec:	d8c00c15 	stw	r3,48(sp)
10104df0:	d9800615 	stw	r6,24(sp)
10104df4:	0183a40e 	bge	zero,r6,10105c88 <_dtoa_r+0x11cc>
10104df8:	d9800617 	ldw	r6,24(sp)
10104dfc:	3021883a 	mov	r16,r6
10104e00:	e0001115 	stw	zero,68(fp)
10104e04:	008005c4 	movi	r2,23
10104e08:	1184c92e 	bgeu	r2,r6,10106130 <_dtoa_r+0x1674>
10104e0c:	00c00044 	movi	r3,1
10104e10:	00800104 	movi	r2,4
10104e14:	1085883a 	add	r2,r2,r2
10104e18:	11000504 	addi	r4,r2,20
10104e1c:	180b883a 	mov	r5,r3
10104e20:	18c00044 	addi	r3,r3,1
10104e24:	313ffb2e 	bgeu	r6,r4,10104e14 <__alt_data_end+0xfffe4e14>
10104e28:	e1401115 	stw	r5,68(fp)
10104e2c:	e009883a 	mov	r4,fp
10104e30:	01071b00 	call	101071b0 <_Balloc>
10104e34:	d8800715 	stw	r2,28(sp)
10104e38:	e0801015 	stw	r2,64(fp)
10104e3c:	00800384 	movi	r2,14
10104e40:	1400f736 	bltu	r2,r16,10105220 <_dtoa_r+0x764>
10104e44:	8800f626 	beq	r17,zero,10105220 <_dtoa_r+0x764>
10104e48:	d9c00517 	ldw	r7,20(sp)
10104e4c:	01c39a0e 	bge	zero,r7,10105cb8 <_dtoa_r+0x11fc>
10104e50:	388003cc 	andi	r2,r7,15
10104e54:	100490fa 	slli	r2,r2,3
10104e58:	382bd13a 	srai	r21,r7,4
10104e5c:	00c40474 	movhi	r3,4113
10104e60:	18c46204 	addi	r3,r3,4488
10104e64:	1885883a 	add	r2,r3,r2
10104e68:	a8c0040c 	andi	r3,r21,16
10104e6c:	12400017 	ldw	r9,0(r2)
10104e70:	12000117 	ldw	r8,4(r2)
10104e74:	18037926 	beq	r3,zero,10105c5c <_dtoa_r+0x11a0>
10104e78:	00840474 	movhi	r2,4113
10104e7c:	10845804 	addi	r2,r2,4448
10104e80:	11800817 	ldw	r6,32(r2)
10104e84:	11c00917 	ldw	r7,36(r2)
10104e88:	9009883a 	mov	r4,r18
10104e8c:	980b883a 	mov	r5,r19
10104e90:	da001715 	stw	r8,92(sp)
10104e94:	da401615 	stw	r9,88(sp)
10104e98:	010c4dc0 	call	1010c4dc <__divdf3>
10104e9c:	da001717 	ldw	r8,92(sp)
10104ea0:	da401617 	ldw	r9,88(sp)
10104ea4:	ad4003cc 	andi	r21,r21,15
10104ea8:	040000c4 	movi	r16,3
10104eac:	1023883a 	mov	r17,r2
10104eb0:	1829883a 	mov	r20,r3
10104eb4:	a8001126 	beq	r21,zero,10104efc <_dtoa_r+0x440>
10104eb8:	05c40474 	movhi	r23,4113
10104ebc:	bdc45804 	addi	r23,r23,4448
10104ec0:	4805883a 	mov	r2,r9
10104ec4:	4007883a 	mov	r3,r8
10104ec8:	a980004c 	andi	r6,r21,1
10104ecc:	1009883a 	mov	r4,r2
10104ed0:	a82bd07a 	srai	r21,r21,1
10104ed4:	180b883a 	mov	r5,r3
10104ed8:	30000426 	beq	r6,zero,10104eec <_dtoa_r+0x430>
10104edc:	b9800017 	ldw	r6,0(r23)
10104ee0:	b9c00117 	ldw	r7,4(r23)
10104ee4:	84000044 	addi	r16,r16,1
10104ee8:	010d01c0 	call	1010d01c <__muldf3>
10104eec:	bdc00204 	addi	r23,r23,8
10104ef0:	a83ff51e 	bne	r21,zero,10104ec8 <__alt_data_end+0xfffe4ec8>
10104ef4:	1013883a 	mov	r9,r2
10104ef8:	1811883a 	mov	r8,r3
10104efc:	480d883a 	mov	r6,r9
10104f00:	400f883a 	mov	r7,r8
10104f04:	8809883a 	mov	r4,r17
10104f08:	a00b883a 	mov	r5,r20
10104f0c:	010c4dc0 	call	1010c4dc <__divdf3>
10104f10:	d8800f15 	stw	r2,60(sp)
10104f14:	d8c01015 	stw	r3,64(sp)
10104f18:	d8c00e17 	ldw	r3,56(sp)
10104f1c:	18000626 	beq	r3,zero,10104f38 <_dtoa_r+0x47c>
10104f20:	d9000f17 	ldw	r4,60(sp)
10104f24:	d9401017 	ldw	r5,64(sp)
10104f28:	000d883a 	mov	r6,zero
10104f2c:	01cffc34 	movhi	r7,16368
10104f30:	010cf280 	call	1010cf28 <__ledf2>
10104f34:	10040b16 	blt	r2,zero,10105f64 <_dtoa_r+0x14a8>
10104f38:	8009883a 	mov	r4,r16
10104f3c:	010e0b00 	call	1010e0b0 <__floatsidf>
10104f40:	d9800f17 	ldw	r6,60(sp)
10104f44:	d9c01017 	ldw	r7,64(sp)
10104f48:	1009883a 	mov	r4,r2
10104f4c:	180b883a 	mov	r5,r3
10104f50:	010d01c0 	call	1010d01c <__muldf3>
10104f54:	000d883a 	mov	r6,zero
10104f58:	01d00734 	movhi	r7,16412
10104f5c:	1009883a 	mov	r4,r2
10104f60:	180b883a 	mov	r5,r3
10104f64:	010bc300 	call	1010bc30 <__adddf3>
10104f68:	1021883a 	mov	r16,r2
10104f6c:	d8800617 	ldw	r2,24(sp)
10104f70:	047f3034 	movhi	r17,64704
10104f74:	1c63883a 	add	r17,r3,r17
10104f78:	10031826 	beq	r2,zero,10105bdc <_dtoa_r+0x1120>
10104f7c:	d8c00517 	ldw	r3,20(sp)
10104f80:	db000617 	ldw	r12,24(sp)
10104f84:	d8c01315 	stw	r3,76(sp)
10104f88:	d9000b17 	ldw	r4,44(sp)
10104f8c:	20038f26 	beq	r4,zero,10105dcc <_dtoa_r+0x1310>
10104f90:	60bfffc4 	addi	r2,r12,-1
10104f94:	100490fa 	slli	r2,r2,3
10104f98:	00c40474 	movhi	r3,4113
10104f9c:	18c46204 	addi	r3,r3,4488
10104fa0:	1885883a 	add	r2,r3,r2
10104fa4:	11800017 	ldw	r6,0(r2)
10104fa8:	11c00117 	ldw	r7,4(r2)
10104fac:	d8800717 	ldw	r2,28(sp)
10104fb0:	0009883a 	mov	r4,zero
10104fb4:	014ff834 	movhi	r5,16352
10104fb8:	db001615 	stw	r12,88(sp)
10104fbc:	15c00044 	addi	r23,r2,1
10104fc0:	010c4dc0 	call	1010c4dc <__divdf3>
10104fc4:	800d883a 	mov	r6,r16
10104fc8:	880f883a 	mov	r7,r17
10104fcc:	1009883a 	mov	r4,r2
10104fd0:	180b883a 	mov	r5,r3
10104fd4:	010d7340 	call	1010d734 <__subdf3>
10104fd8:	d9401017 	ldw	r5,64(sp)
10104fdc:	d9000f17 	ldw	r4,60(sp)
10104fe0:	102b883a 	mov	r21,r2
10104fe4:	d8c01215 	stw	r3,72(sp)
10104fe8:	010e0300 	call	1010e030 <__fixdfsi>
10104fec:	1009883a 	mov	r4,r2
10104ff0:	1029883a 	mov	r20,r2
10104ff4:	010e0b00 	call	1010e0b0 <__floatsidf>
10104ff8:	d9000f17 	ldw	r4,60(sp)
10104ffc:	d9401017 	ldw	r5,64(sp)
10105000:	100d883a 	mov	r6,r2
10105004:	180f883a 	mov	r7,r3
10105008:	010d7340 	call	1010d734 <__subdf3>
1010500c:	1823883a 	mov	r17,r3
10105010:	d8c00717 	ldw	r3,28(sp)
10105014:	d9401217 	ldw	r5,72(sp)
10105018:	a2000c04 	addi	r8,r20,48
1010501c:	1021883a 	mov	r16,r2
10105020:	1a000005 	stb	r8,0(r3)
10105024:	800d883a 	mov	r6,r16
10105028:	880f883a 	mov	r7,r17
1010502c:	a809883a 	mov	r4,r21
10105030:	4029883a 	mov	r20,r8
10105034:	010ce4c0 	call	1010ce4c <__gedf2>
10105038:	00841d16 	blt	zero,r2,101060b0 <_dtoa_r+0x15f4>
1010503c:	800d883a 	mov	r6,r16
10105040:	880f883a 	mov	r7,r17
10105044:	0009883a 	mov	r4,zero
10105048:	014ffc34 	movhi	r5,16368
1010504c:	010d7340 	call	1010d734 <__subdf3>
10105050:	d9401217 	ldw	r5,72(sp)
10105054:	100d883a 	mov	r6,r2
10105058:	180f883a 	mov	r7,r3
1010505c:	a809883a 	mov	r4,r21
10105060:	010ce4c0 	call	1010ce4c <__gedf2>
10105064:	db001617 	ldw	r12,88(sp)
10105068:	00840e16 	blt	zero,r2,101060a4 <_dtoa_r+0x15e8>
1010506c:	00800044 	movi	r2,1
10105070:	13006b0e 	bge	r2,r12,10105220 <_dtoa_r+0x764>
10105074:	d9000717 	ldw	r4,28(sp)
10105078:	dd800f15 	stw	r22,60(sp)
1010507c:	dcc01015 	stw	r19,64(sp)
10105080:	2319883a 	add	r12,r4,r12
10105084:	dcc01217 	ldw	r19,72(sp)
10105088:	602d883a 	mov	r22,r12
1010508c:	dc801215 	stw	r18,72(sp)
10105090:	b825883a 	mov	r18,r23
10105094:	00000906 	br	101050bc <_dtoa_r+0x600>
10105098:	010d7340 	call	1010d734 <__subdf3>
1010509c:	a80d883a 	mov	r6,r21
101050a0:	980f883a 	mov	r7,r19
101050a4:	1009883a 	mov	r4,r2
101050a8:	180b883a 	mov	r5,r3
101050ac:	010cf280 	call	1010cf28 <__ledf2>
101050b0:	1003e816 	blt	r2,zero,10106054 <_dtoa_r+0x1598>
101050b4:	b825883a 	mov	r18,r23
101050b8:	bd83e926 	beq	r23,r22,10106060 <_dtoa_r+0x15a4>
101050bc:	a809883a 	mov	r4,r21
101050c0:	980b883a 	mov	r5,r19
101050c4:	000d883a 	mov	r6,zero
101050c8:	01d00934 	movhi	r7,16420
101050cc:	010d01c0 	call	1010d01c <__muldf3>
101050d0:	000d883a 	mov	r6,zero
101050d4:	01d00934 	movhi	r7,16420
101050d8:	8009883a 	mov	r4,r16
101050dc:	880b883a 	mov	r5,r17
101050e0:	102b883a 	mov	r21,r2
101050e4:	1827883a 	mov	r19,r3
101050e8:	010d01c0 	call	1010d01c <__muldf3>
101050ec:	180b883a 	mov	r5,r3
101050f0:	1009883a 	mov	r4,r2
101050f4:	1821883a 	mov	r16,r3
101050f8:	1023883a 	mov	r17,r2
101050fc:	010e0300 	call	1010e030 <__fixdfsi>
10105100:	1009883a 	mov	r4,r2
10105104:	1029883a 	mov	r20,r2
10105108:	010e0b00 	call	1010e0b0 <__floatsidf>
1010510c:	8809883a 	mov	r4,r17
10105110:	800b883a 	mov	r5,r16
10105114:	100d883a 	mov	r6,r2
10105118:	180f883a 	mov	r7,r3
1010511c:	010d7340 	call	1010d734 <__subdf3>
10105120:	a5000c04 	addi	r20,r20,48
10105124:	a80d883a 	mov	r6,r21
10105128:	980f883a 	mov	r7,r19
1010512c:	1009883a 	mov	r4,r2
10105130:	180b883a 	mov	r5,r3
10105134:	95000005 	stb	r20,0(r18)
10105138:	1021883a 	mov	r16,r2
1010513c:	1823883a 	mov	r17,r3
10105140:	010cf280 	call	1010cf28 <__ledf2>
10105144:	bdc00044 	addi	r23,r23,1
10105148:	800d883a 	mov	r6,r16
1010514c:	880f883a 	mov	r7,r17
10105150:	0009883a 	mov	r4,zero
10105154:	014ffc34 	movhi	r5,16368
10105158:	103fcf0e 	bge	r2,zero,10105098 <__alt_data_end+0xfffe5098>
1010515c:	d8c01317 	ldw	r3,76(sp)
10105160:	d8c00515 	stw	r3,20(sp)
10105164:	d9400917 	ldw	r5,36(sp)
10105168:	e009883a 	mov	r4,fp
1010516c:	01072580 	call	10107258 <_Bfree>
10105170:	d9000517 	ldw	r4,20(sp)
10105174:	d9802317 	ldw	r6,140(sp)
10105178:	d9c02517 	ldw	r7,148(sp)
1010517c:	b8000005 	stb	zero,0(r23)
10105180:	20800044 	addi	r2,r4,1
10105184:	30800015 	stw	r2,0(r6)
10105188:	3802aa26 	beq	r7,zero,10105c34 <_dtoa_r+0x1178>
1010518c:	3dc00015 	stw	r23,0(r7)
10105190:	d8800717 	ldw	r2,28(sp)
10105194:	003e7906 	br	10104b7c <__alt_data_end+0xfffe4b7c>
10105198:	00800434 	movhi	r2,16
1010519c:	10bfffc4 	addi	r2,r2,-1
101051a0:	88a2703a 	and	r17,r17,r2
101051a4:	883e851e 	bne	r17,zero,10104bbc <__alt_data_end+0xfffe4bbc>
101051a8:	00840474 	movhi	r2,4113
101051ac:	10844404 	addi	r2,r2,4368
101051b0:	003e8406 	br	10104bc4 <__alt_data_end+0xfffe4bc4>
101051b4:	10c00204 	addi	r3,r2,8
101051b8:	003e8706 	br	10104bd8 <__alt_data_end+0xfffe4bd8>
101051bc:	01400434 	movhi	r5,16
101051c0:	297fffc4 	addi	r5,r5,-1
101051c4:	994a703a 	and	r5,r19,r5
101051c8:	9009883a 	mov	r4,r18
101051cc:	843f0044 	addi	r16,r16,-1023
101051d0:	294ffc34 	orhi	r5,r5,16368
101051d4:	dd800217 	ldw	r22,8(sp)
101051d8:	d8001115 	stw	zero,68(sp)
101051dc:	003ea506 	br	10104c74 <__alt_data_end+0xfffe4c74>
101051e0:	00840474 	movhi	r2,4113
101051e4:	10843b04 	addi	r2,r2,4332
101051e8:	003e6406 	br	10104b7c <__alt_data_end+0xfffe4b7c>
101051ec:	e0001115 	stw	zero,68(fp)
101051f0:	000b883a 	mov	r5,zero
101051f4:	e009883a 	mov	r4,fp
101051f8:	01071b00 	call	101071b0 <_Balloc>
101051fc:	01bfffc4 	movi	r6,-1
10105200:	01c00044 	movi	r7,1
10105204:	d8800715 	stw	r2,28(sp)
10105208:	d9800c15 	stw	r6,48(sp)
1010520c:	e0801015 	stw	r2,64(fp)
10105210:	d8000315 	stw	zero,12(sp)
10105214:	d9c00b15 	stw	r7,44(sp)
10105218:	d9800615 	stw	r6,24(sp)
1010521c:	d8002215 	stw	zero,136(sp)
10105220:	d8800117 	ldw	r2,4(sp)
10105224:	10008916 	blt	r2,zero,1010544c <_dtoa_r+0x990>
10105228:	d9000517 	ldw	r4,20(sp)
1010522c:	00c00384 	movi	r3,14
10105230:	19008616 	blt	r3,r4,1010544c <_dtoa_r+0x990>
10105234:	200490fa 	slli	r2,r4,3
10105238:	00c40474 	movhi	r3,4113
1010523c:	d9802217 	ldw	r6,136(sp)
10105240:	18c46204 	addi	r3,r3,4488
10105244:	1885883a 	add	r2,r3,r2
10105248:	14000017 	ldw	r16,0(r2)
1010524c:	14400117 	ldw	r17,4(r2)
10105250:	30016316 	blt	r6,zero,101057e0 <_dtoa_r+0xd24>
10105254:	800d883a 	mov	r6,r16
10105258:	880f883a 	mov	r7,r17
1010525c:	9009883a 	mov	r4,r18
10105260:	980b883a 	mov	r5,r19
10105264:	010c4dc0 	call	1010c4dc <__divdf3>
10105268:	180b883a 	mov	r5,r3
1010526c:	1009883a 	mov	r4,r2
10105270:	010e0300 	call	1010e030 <__fixdfsi>
10105274:	1009883a 	mov	r4,r2
10105278:	102b883a 	mov	r21,r2
1010527c:	010e0b00 	call	1010e0b0 <__floatsidf>
10105280:	800d883a 	mov	r6,r16
10105284:	880f883a 	mov	r7,r17
10105288:	1009883a 	mov	r4,r2
1010528c:	180b883a 	mov	r5,r3
10105290:	010d01c0 	call	1010d01c <__muldf3>
10105294:	100d883a 	mov	r6,r2
10105298:	180f883a 	mov	r7,r3
1010529c:	9009883a 	mov	r4,r18
101052a0:	980b883a 	mov	r5,r19
101052a4:	010d7340 	call	1010d734 <__subdf3>
101052a8:	d9c00717 	ldw	r7,28(sp)
101052ac:	1009883a 	mov	r4,r2
101052b0:	a8800c04 	addi	r2,r21,48
101052b4:	38800005 	stb	r2,0(r7)
101052b8:	3dc00044 	addi	r23,r7,1
101052bc:	d9c00617 	ldw	r7,24(sp)
101052c0:	01800044 	movi	r6,1
101052c4:	180b883a 	mov	r5,r3
101052c8:	2005883a 	mov	r2,r4
101052cc:	39803826 	beq	r7,r6,101053b0 <_dtoa_r+0x8f4>
101052d0:	000d883a 	mov	r6,zero
101052d4:	01d00934 	movhi	r7,16420
101052d8:	010d01c0 	call	1010d01c <__muldf3>
101052dc:	000d883a 	mov	r6,zero
101052e0:	000f883a 	mov	r7,zero
101052e4:	1009883a 	mov	r4,r2
101052e8:	180b883a 	mov	r5,r3
101052ec:	1025883a 	mov	r18,r2
101052f0:	1827883a 	mov	r19,r3
101052f4:	010cdc40 	call	1010cdc4 <__eqdf2>
101052f8:	103f9a26 	beq	r2,zero,10105164 <__alt_data_end+0xfffe5164>
101052fc:	d9c00617 	ldw	r7,24(sp)
10105300:	d8c00717 	ldw	r3,28(sp)
10105304:	b829883a 	mov	r20,r23
10105308:	38bfffc4 	addi	r2,r7,-1
1010530c:	18ad883a 	add	r22,r3,r2
10105310:	00000a06 	br	1010533c <_dtoa_r+0x880>
10105314:	010d01c0 	call	1010d01c <__muldf3>
10105318:	000d883a 	mov	r6,zero
1010531c:	000f883a 	mov	r7,zero
10105320:	1009883a 	mov	r4,r2
10105324:	180b883a 	mov	r5,r3
10105328:	1025883a 	mov	r18,r2
1010532c:	1827883a 	mov	r19,r3
10105330:	b829883a 	mov	r20,r23
10105334:	010cdc40 	call	1010cdc4 <__eqdf2>
10105338:	103f8a26 	beq	r2,zero,10105164 <__alt_data_end+0xfffe5164>
1010533c:	800d883a 	mov	r6,r16
10105340:	880f883a 	mov	r7,r17
10105344:	9009883a 	mov	r4,r18
10105348:	980b883a 	mov	r5,r19
1010534c:	010c4dc0 	call	1010c4dc <__divdf3>
10105350:	180b883a 	mov	r5,r3
10105354:	1009883a 	mov	r4,r2
10105358:	010e0300 	call	1010e030 <__fixdfsi>
1010535c:	1009883a 	mov	r4,r2
10105360:	102b883a 	mov	r21,r2
10105364:	010e0b00 	call	1010e0b0 <__floatsidf>
10105368:	800d883a 	mov	r6,r16
1010536c:	880f883a 	mov	r7,r17
10105370:	1009883a 	mov	r4,r2
10105374:	180b883a 	mov	r5,r3
10105378:	010d01c0 	call	1010d01c <__muldf3>
1010537c:	100d883a 	mov	r6,r2
10105380:	180f883a 	mov	r7,r3
10105384:	9009883a 	mov	r4,r18
10105388:	980b883a 	mov	r5,r19
1010538c:	010d7340 	call	1010d734 <__subdf3>
10105390:	aa000c04 	addi	r8,r21,48
10105394:	a2000005 	stb	r8,0(r20)
10105398:	000d883a 	mov	r6,zero
1010539c:	01d00934 	movhi	r7,16420
101053a0:	1009883a 	mov	r4,r2
101053a4:	180b883a 	mov	r5,r3
101053a8:	a5c00044 	addi	r23,r20,1
101053ac:	b53fd91e 	bne	r22,r20,10105314 <__alt_data_end+0xfffe5314>
101053b0:	100d883a 	mov	r6,r2
101053b4:	180f883a 	mov	r7,r3
101053b8:	1009883a 	mov	r4,r2
101053bc:	180b883a 	mov	r5,r3
101053c0:	010bc300 	call	1010bc30 <__adddf3>
101053c4:	100d883a 	mov	r6,r2
101053c8:	180f883a 	mov	r7,r3
101053cc:	8009883a 	mov	r4,r16
101053d0:	880b883a 	mov	r5,r17
101053d4:	1027883a 	mov	r19,r2
101053d8:	1825883a 	mov	r18,r3
101053dc:	010cf280 	call	1010cf28 <__ledf2>
101053e0:	10000816 	blt	r2,zero,10105404 <_dtoa_r+0x948>
101053e4:	980d883a 	mov	r6,r19
101053e8:	900f883a 	mov	r7,r18
101053ec:	8009883a 	mov	r4,r16
101053f0:	880b883a 	mov	r5,r17
101053f4:	010cdc40 	call	1010cdc4 <__eqdf2>
101053f8:	103f5a1e 	bne	r2,zero,10105164 <__alt_data_end+0xfffe5164>
101053fc:	ad40004c 	andi	r21,r21,1
10105400:	a83f5826 	beq	r21,zero,10105164 <__alt_data_end+0xfffe5164>
10105404:	bd3fffc3 	ldbu	r20,-1(r23)
10105408:	b8bfffc4 	addi	r2,r23,-1
1010540c:	1007883a 	mov	r3,r2
10105410:	01400e44 	movi	r5,57
10105414:	d9800717 	ldw	r6,28(sp)
10105418:	00000506 	br	10105430 <_dtoa_r+0x974>
1010541c:	18ffffc4 	addi	r3,r3,-1
10105420:	11824726 	beq	r2,r6,10105d40 <_dtoa_r+0x1284>
10105424:	1d000003 	ldbu	r20,0(r3)
10105428:	102f883a 	mov	r23,r2
1010542c:	10bfffc4 	addi	r2,r2,-1
10105430:	a1003fcc 	andi	r4,r20,255
10105434:	2100201c 	xori	r4,r4,128
10105438:	213fe004 	addi	r4,r4,-128
1010543c:	217ff726 	beq	r4,r5,1010541c <__alt_data_end+0xfffe541c>
10105440:	a2000044 	addi	r8,r20,1
10105444:	12000005 	stb	r8,0(r2)
10105448:	003f4606 	br	10105164 <__alt_data_end+0xfffe5164>
1010544c:	d9000b17 	ldw	r4,44(sp)
10105450:	2000c826 	beq	r4,zero,10105774 <_dtoa_r+0xcb8>
10105454:	d9800317 	ldw	r6,12(sp)
10105458:	00c00044 	movi	r3,1
1010545c:	1980f90e 	bge	r3,r6,10105844 <_dtoa_r+0xd88>
10105460:	d8800617 	ldw	r2,24(sp)
10105464:	d8c00a17 	ldw	r3,40(sp)
10105468:	157fffc4 	addi	r21,r2,-1
1010546c:	1d41f316 	blt	r3,r21,10105c3c <_dtoa_r+0x1180>
10105470:	1d6bc83a 	sub	r21,r3,r21
10105474:	d9c00617 	ldw	r7,24(sp)
10105478:	3802aa16 	blt	r7,zero,10105f24 <_dtoa_r+0x1468>
1010547c:	dd000817 	ldw	r20,32(sp)
10105480:	d8800617 	ldw	r2,24(sp)
10105484:	d8c00817 	ldw	r3,32(sp)
10105488:	01400044 	movi	r5,1
1010548c:	e009883a 	mov	r4,fp
10105490:	1887883a 	add	r3,r3,r2
10105494:	d8c00815 	stw	r3,32(sp)
10105498:	b0ad883a 	add	r22,r22,r2
1010549c:	01075bc0 	call	101075bc <__i2b>
101054a0:	1023883a 	mov	r17,r2
101054a4:	a0000826 	beq	r20,zero,101054c8 <_dtoa_r+0xa0c>
101054a8:	0580070e 	bge	zero,r22,101054c8 <_dtoa_r+0xa0c>
101054ac:	a005883a 	mov	r2,r20
101054b0:	b500b916 	blt	r22,r20,10105798 <_dtoa_r+0xcdc>
101054b4:	d9000817 	ldw	r4,32(sp)
101054b8:	a0a9c83a 	sub	r20,r20,r2
101054bc:	b0adc83a 	sub	r22,r22,r2
101054c0:	2089c83a 	sub	r4,r4,r2
101054c4:	d9000815 	stw	r4,32(sp)
101054c8:	d9800a17 	ldw	r6,40(sp)
101054cc:	0181810e 	bge	zero,r6,10105ad4 <_dtoa_r+0x1018>
101054d0:	d9c00b17 	ldw	r7,44(sp)
101054d4:	3800b326 	beq	r7,zero,101057a4 <_dtoa_r+0xce8>
101054d8:	a800b226 	beq	r21,zero,101057a4 <_dtoa_r+0xce8>
101054dc:	880b883a 	mov	r5,r17
101054e0:	a80d883a 	mov	r6,r21
101054e4:	e009883a 	mov	r4,fp
101054e8:	01077f00 	call	101077f0 <__pow5mult>
101054ec:	d9800917 	ldw	r6,36(sp)
101054f0:	100b883a 	mov	r5,r2
101054f4:	e009883a 	mov	r4,fp
101054f8:	1023883a 	mov	r17,r2
101054fc:	01075f80 	call	101075f8 <__multiply>
10105500:	1021883a 	mov	r16,r2
10105504:	d8800a17 	ldw	r2,40(sp)
10105508:	d9400917 	ldw	r5,36(sp)
1010550c:	e009883a 	mov	r4,fp
10105510:	1545c83a 	sub	r2,r2,r21
10105514:	d8800a15 	stw	r2,40(sp)
10105518:	01072580 	call	10107258 <_Bfree>
1010551c:	d8c00a17 	ldw	r3,40(sp)
10105520:	18009f1e 	bne	r3,zero,101057a0 <_dtoa_r+0xce4>
10105524:	05c00044 	movi	r23,1
10105528:	e009883a 	mov	r4,fp
1010552c:	b80b883a 	mov	r5,r23
10105530:	01075bc0 	call	101075bc <__i2b>
10105534:	d9000d17 	ldw	r4,52(sp)
10105538:	102b883a 	mov	r21,r2
1010553c:	2000ce26 	beq	r4,zero,10105878 <_dtoa_r+0xdbc>
10105540:	200d883a 	mov	r6,r4
10105544:	100b883a 	mov	r5,r2
10105548:	e009883a 	mov	r4,fp
1010554c:	01077f00 	call	101077f0 <__pow5mult>
10105550:	d9800317 	ldw	r6,12(sp)
10105554:	102b883a 	mov	r21,r2
10105558:	b981810e 	bge	r23,r6,10105b60 <_dtoa_r+0x10a4>
1010555c:	0027883a 	mov	r19,zero
10105560:	a8800417 	ldw	r2,16(r21)
10105564:	05c00804 	movi	r23,32
10105568:	10800104 	addi	r2,r2,4
1010556c:	1085883a 	add	r2,r2,r2
10105570:	1085883a 	add	r2,r2,r2
10105574:	a885883a 	add	r2,r21,r2
10105578:	11000017 	ldw	r4,0(r2)
1010557c:	01074a40 	call	101074a4 <__hi0bits>
10105580:	b885c83a 	sub	r2,r23,r2
10105584:	1585883a 	add	r2,r2,r22
10105588:	108007cc 	andi	r2,r2,31
1010558c:	1000b326 	beq	r2,zero,1010585c <_dtoa_r+0xda0>
10105590:	00c00804 	movi	r3,32
10105594:	1887c83a 	sub	r3,r3,r2
10105598:	01000104 	movi	r4,4
1010559c:	20c2cd0e 	bge	r4,r3,101060d4 <_dtoa_r+0x1618>
101055a0:	00c00704 	movi	r3,28
101055a4:	1885c83a 	sub	r2,r3,r2
101055a8:	d8c00817 	ldw	r3,32(sp)
101055ac:	a0a9883a 	add	r20,r20,r2
101055b0:	b0ad883a 	add	r22,r22,r2
101055b4:	1887883a 	add	r3,r3,r2
101055b8:	d8c00815 	stw	r3,32(sp)
101055bc:	d9800817 	ldw	r6,32(sp)
101055c0:	0180040e 	bge	zero,r6,101055d4 <_dtoa_r+0xb18>
101055c4:	800b883a 	mov	r5,r16
101055c8:	e009883a 	mov	r4,fp
101055cc:	01079300 	call	10107930 <__lshift>
101055d0:	1021883a 	mov	r16,r2
101055d4:	0580050e 	bge	zero,r22,101055ec <_dtoa_r+0xb30>
101055d8:	a80b883a 	mov	r5,r21
101055dc:	b00d883a 	mov	r6,r22
101055e0:	e009883a 	mov	r4,fp
101055e4:	01079300 	call	10107930 <__lshift>
101055e8:	102b883a 	mov	r21,r2
101055ec:	d9c00e17 	ldw	r7,56(sp)
101055f0:	3801211e 	bne	r7,zero,10105a78 <_dtoa_r+0xfbc>
101055f4:	d9800617 	ldw	r6,24(sp)
101055f8:	0181380e 	bge	zero,r6,10105adc <_dtoa_r+0x1020>
101055fc:	d8c00b17 	ldw	r3,44(sp)
10105600:	1800ab1e 	bne	r3,zero,101058b0 <_dtoa_r+0xdf4>
10105604:	dc800717 	ldw	r18,28(sp)
10105608:	dcc00617 	ldw	r19,24(sp)
1010560c:	9029883a 	mov	r20,r18
10105610:	00000206 	br	1010561c <_dtoa_r+0xb60>
10105614:	01072800 	call	10107280 <__multadd>
10105618:	1021883a 	mov	r16,r2
1010561c:	a80b883a 	mov	r5,r21
10105620:	8009883a 	mov	r4,r16
10105624:	01048bc0 	call	101048bc <quorem>
10105628:	10800c04 	addi	r2,r2,48
1010562c:	90800005 	stb	r2,0(r18)
10105630:	94800044 	addi	r18,r18,1
10105634:	9507c83a 	sub	r3,r18,r20
10105638:	000f883a 	mov	r7,zero
1010563c:	01800284 	movi	r6,10
10105640:	800b883a 	mov	r5,r16
10105644:	e009883a 	mov	r4,fp
10105648:	1cfff216 	blt	r3,r19,10105614 <__alt_data_end+0xfffe5614>
1010564c:	1011883a 	mov	r8,r2
10105650:	d8800617 	ldw	r2,24(sp)
10105654:	0082370e 	bge	zero,r2,10105f34 <_dtoa_r+0x1478>
10105658:	d9000717 	ldw	r4,28(sp)
1010565c:	0025883a 	mov	r18,zero
10105660:	20af883a 	add	r23,r4,r2
10105664:	01800044 	movi	r6,1
10105668:	800b883a 	mov	r5,r16
1010566c:	e009883a 	mov	r4,fp
10105670:	da001715 	stw	r8,92(sp)
10105674:	01079300 	call	10107930 <__lshift>
10105678:	a80b883a 	mov	r5,r21
1010567c:	1009883a 	mov	r4,r2
10105680:	d8800915 	stw	r2,36(sp)
10105684:	0107a780 	call	10107a78 <__mcmp>
10105688:	da001717 	ldw	r8,92(sp)
1010568c:	0081800e 	bge	zero,r2,10105c90 <_dtoa_r+0x11d4>
10105690:	b93fffc3 	ldbu	r4,-1(r23)
10105694:	b8bfffc4 	addi	r2,r23,-1
10105698:	1007883a 	mov	r3,r2
1010569c:	01800e44 	movi	r6,57
101056a0:	d9c00717 	ldw	r7,28(sp)
101056a4:	00000506 	br	101056bc <_dtoa_r+0xc00>
101056a8:	18ffffc4 	addi	r3,r3,-1
101056ac:	11c12326 	beq	r2,r7,10105b3c <_dtoa_r+0x1080>
101056b0:	19000003 	ldbu	r4,0(r3)
101056b4:	102f883a 	mov	r23,r2
101056b8:	10bfffc4 	addi	r2,r2,-1
101056bc:	21403fcc 	andi	r5,r4,255
101056c0:	2940201c 	xori	r5,r5,128
101056c4:	297fe004 	addi	r5,r5,-128
101056c8:	29bff726 	beq	r5,r6,101056a8 <__alt_data_end+0xfffe56a8>
101056cc:	21000044 	addi	r4,r4,1
101056d0:	11000005 	stb	r4,0(r2)
101056d4:	a80b883a 	mov	r5,r21
101056d8:	e009883a 	mov	r4,fp
101056dc:	01072580 	call	10107258 <_Bfree>
101056e0:	883ea026 	beq	r17,zero,10105164 <__alt_data_end+0xfffe5164>
101056e4:	90000426 	beq	r18,zero,101056f8 <_dtoa_r+0xc3c>
101056e8:	94400326 	beq	r18,r17,101056f8 <_dtoa_r+0xc3c>
101056ec:	900b883a 	mov	r5,r18
101056f0:	e009883a 	mov	r4,fp
101056f4:	01072580 	call	10107258 <_Bfree>
101056f8:	880b883a 	mov	r5,r17
101056fc:	e009883a 	mov	r4,fp
10105700:	01072580 	call	10107258 <_Bfree>
10105704:	003e9706 	br	10105164 <__alt_data_end+0xfffe5164>
10105708:	01800044 	movi	r6,1
1010570c:	d9800e15 	stw	r6,56(sp)
10105710:	003d9606 	br	10104d6c <__alt_data_end+0xfffe4d6c>
10105714:	d8800817 	ldw	r2,32(sp)
10105718:	d8c00517 	ldw	r3,20(sp)
1010571c:	d8000d15 	stw	zero,52(sp)
10105720:	10c5c83a 	sub	r2,r2,r3
10105724:	00c9c83a 	sub	r4,zero,r3
10105728:	d8800815 	stw	r2,32(sp)
1010572c:	d9000a15 	stw	r4,40(sp)
10105730:	003d9706 	br	10104d90 <__alt_data_end+0xfffe4d90>
10105734:	05adc83a 	sub	r22,zero,r22
10105738:	dd800815 	stw	r22,32(sp)
1010573c:	002d883a 	mov	r22,zero
10105740:	003d8e06 	br	10104d7c <__alt_data_end+0xfffe4d7c>
10105744:	d9000517 	ldw	r4,20(sp)
10105748:	010e0b00 	call	1010e0b0 <__floatsidf>
1010574c:	100d883a 	mov	r6,r2
10105750:	180f883a 	mov	r7,r3
10105754:	a009883a 	mov	r4,r20
10105758:	880b883a 	mov	r5,r17
1010575c:	010cdc40 	call	1010cdc4 <__eqdf2>
10105760:	103d7126 	beq	r2,zero,10104d28 <__alt_data_end+0xfffe4d28>
10105764:	d9c00517 	ldw	r7,20(sp)
10105768:	39ffffc4 	addi	r7,r7,-1
1010576c:	d9c00515 	stw	r7,20(sp)
10105770:	003d6d06 	br	10104d28 <__alt_data_end+0xfffe4d28>
10105774:	dd400a17 	ldw	r21,40(sp)
10105778:	dd000817 	ldw	r20,32(sp)
1010577c:	0023883a 	mov	r17,zero
10105780:	003f4806 	br	101054a4 <__alt_data_end+0xfffe54a4>
10105784:	10e3c83a 	sub	r17,r2,r3
10105788:	9448983a 	sll	r4,r18,r17
1010578c:	003d3206 	br	10104c58 <__alt_data_end+0xfffe4c58>
10105790:	d8000e15 	stw	zero,56(sp)
10105794:	003d7506 	br	10104d6c <__alt_data_end+0xfffe4d6c>
10105798:	b005883a 	mov	r2,r22
1010579c:	003f4506 	br	101054b4 <__alt_data_end+0xfffe54b4>
101057a0:	dc000915 	stw	r16,36(sp)
101057a4:	d9800a17 	ldw	r6,40(sp)
101057a8:	d9400917 	ldw	r5,36(sp)
101057ac:	e009883a 	mov	r4,fp
101057b0:	01077f00 	call	101077f0 <__pow5mult>
101057b4:	1021883a 	mov	r16,r2
101057b8:	003f5a06 	br	10105524 <__alt_data_end+0xfffe5524>
101057bc:	01c00044 	movi	r7,1
101057c0:	d9c00b15 	stw	r7,44(sp)
101057c4:	d8802217 	ldw	r2,136(sp)
101057c8:	0081280e 	bge	zero,r2,10105c6c <_dtoa_r+0x11b0>
101057cc:	100d883a 	mov	r6,r2
101057d0:	1021883a 	mov	r16,r2
101057d4:	d8800c15 	stw	r2,48(sp)
101057d8:	d8800615 	stw	r2,24(sp)
101057dc:	003d8806 	br	10104e00 <__alt_data_end+0xfffe4e00>
101057e0:	d8800617 	ldw	r2,24(sp)
101057e4:	00be9b16 	blt	zero,r2,10105254 <__alt_data_end+0xfffe5254>
101057e8:	10010f1e 	bne	r2,zero,10105c28 <_dtoa_r+0x116c>
101057ec:	880b883a 	mov	r5,r17
101057f0:	000d883a 	mov	r6,zero
101057f4:	01d00534 	movhi	r7,16404
101057f8:	8009883a 	mov	r4,r16
101057fc:	010d01c0 	call	1010d01c <__muldf3>
10105800:	900d883a 	mov	r6,r18
10105804:	980f883a 	mov	r7,r19
10105808:	1009883a 	mov	r4,r2
1010580c:	180b883a 	mov	r5,r3
10105810:	010ce4c0 	call	1010ce4c <__gedf2>
10105814:	002b883a 	mov	r21,zero
10105818:	0023883a 	mov	r17,zero
1010581c:	1000bf16 	blt	r2,zero,10105b1c <_dtoa_r+0x1060>
10105820:	d9802217 	ldw	r6,136(sp)
10105824:	ddc00717 	ldw	r23,28(sp)
10105828:	018c303a 	nor	r6,zero,r6
1010582c:	d9800515 	stw	r6,20(sp)
10105830:	a80b883a 	mov	r5,r21
10105834:	e009883a 	mov	r4,fp
10105838:	01072580 	call	10107258 <_Bfree>
1010583c:	883e4926 	beq	r17,zero,10105164 <__alt_data_end+0xfffe5164>
10105840:	003fad06 	br	101056f8 <__alt_data_end+0xfffe56f8>
10105844:	d9c01117 	ldw	r7,68(sp)
10105848:	3801bc26 	beq	r7,zero,10105f3c <_dtoa_r+0x1480>
1010584c:	10810cc4 	addi	r2,r2,1075
10105850:	dd400a17 	ldw	r21,40(sp)
10105854:	dd000817 	ldw	r20,32(sp)
10105858:	003f0a06 	br	10105484 <__alt_data_end+0xfffe5484>
1010585c:	00800704 	movi	r2,28
10105860:	d9000817 	ldw	r4,32(sp)
10105864:	a0a9883a 	add	r20,r20,r2
10105868:	b0ad883a 	add	r22,r22,r2
1010586c:	2089883a 	add	r4,r4,r2
10105870:	d9000815 	stw	r4,32(sp)
10105874:	003f5106 	br	101055bc <__alt_data_end+0xfffe55bc>
10105878:	d8c00317 	ldw	r3,12(sp)
1010587c:	b8c1fc0e 	bge	r23,r3,10106070 <_dtoa_r+0x15b4>
10105880:	0027883a 	mov	r19,zero
10105884:	b805883a 	mov	r2,r23
10105888:	003f3e06 	br	10105584 <__alt_data_end+0xfffe5584>
1010588c:	880b883a 	mov	r5,r17
10105890:	e009883a 	mov	r4,fp
10105894:	000f883a 	mov	r7,zero
10105898:	01800284 	movi	r6,10
1010589c:	01072800 	call	10107280 <__multadd>
101058a0:	d9000c17 	ldw	r4,48(sp)
101058a4:	1023883a 	mov	r17,r2
101058a8:	0102040e 	bge	zero,r4,101060bc <_dtoa_r+0x1600>
101058ac:	d9000615 	stw	r4,24(sp)
101058b0:	0500050e 	bge	zero,r20,101058c8 <_dtoa_r+0xe0c>
101058b4:	880b883a 	mov	r5,r17
101058b8:	a00d883a 	mov	r6,r20
101058bc:	e009883a 	mov	r4,fp
101058c0:	01079300 	call	10107930 <__lshift>
101058c4:	1023883a 	mov	r17,r2
101058c8:	9801241e 	bne	r19,zero,10105d5c <_dtoa_r+0x12a0>
101058cc:	8829883a 	mov	r20,r17
101058d0:	d9000617 	ldw	r4,24(sp)
101058d4:	dcc00717 	ldw	r19,28(sp)
101058d8:	9480004c 	andi	r18,r18,1
101058dc:	20bfffc4 	addi	r2,r4,-1
101058e0:	9885883a 	add	r2,r19,r2
101058e4:	d8800415 	stw	r2,16(sp)
101058e8:	dc800615 	stw	r18,24(sp)
101058ec:	a80b883a 	mov	r5,r21
101058f0:	8009883a 	mov	r4,r16
101058f4:	01048bc0 	call	101048bc <quorem>
101058f8:	880b883a 	mov	r5,r17
101058fc:	8009883a 	mov	r4,r16
10105900:	102f883a 	mov	r23,r2
10105904:	0107a780 	call	10107a78 <__mcmp>
10105908:	a80b883a 	mov	r5,r21
1010590c:	a00d883a 	mov	r6,r20
10105910:	e009883a 	mov	r4,fp
10105914:	102d883a 	mov	r22,r2
10105918:	0107ad80 	call	10107ad8 <__mdiff>
1010591c:	1007883a 	mov	r3,r2
10105920:	10800317 	ldw	r2,12(r2)
10105924:	bc800c04 	addi	r18,r23,48
10105928:	180b883a 	mov	r5,r3
1010592c:	10004e1e 	bne	r2,zero,10105a68 <_dtoa_r+0xfac>
10105930:	8009883a 	mov	r4,r16
10105934:	d8c01615 	stw	r3,88(sp)
10105938:	0107a780 	call	10107a78 <__mcmp>
1010593c:	d8c01617 	ldw	r3,88(sp)
10105940:	e009883a 	mov	r4,fp
10105944:	d8801615 	stw	r2,88(sp)
10105948:	180b883a 	mov	r5,r3
1010594c:	01072580 	call	10107258 <_Bfree>
10105950:	d8801617 	ldw	r2,88(sp)
10105954:	1000041e 	bne	r2,zero,10105968 <_dtoa_r+0xeac>
10105958:	d9800317 	ldw	r6,12(sp)
1010595c:	3000021e 	bne	r6,zero,10105968 <_dtoa_r+0xeac>
10105960:	d8c00617 	ldw	r3,24(sp)
10105964:	18003726 	beq	r3,zero,10105a44 <_dtoa_r+0xf88>
10105968:	b0002016 	blt	r22,zero,101059ec <_dtoa_r+0xf30>
1010596c:	b000041e 	bne	r22,zero,10105980 <_dtoa_r+0xec4>
10105970:	d9000317 	ldw	r4,12(sp)
10105974:	2000021e 	bne	r4,zero,10105980 <_dtoa_r+0xec4>
10105978:	d8c00617 	ldw	r3,24(sp)
1010597c:	18001b26 	beq	r3,zero,101059ec <_dtoa_r+0xf30>
10105980:	00810716 	blt	zero,r2,10105da0 <_dtoa_r+0x12e4>
10105984:	d8c00417 	ldw	r3,16(sp)
10105988:	9d800044 	addi	r22,r19,1
1010598c:	9c800005 	stb	r18,0(r19)
10105990:	b02f883a 	mov	r23,r22
10105994:	98c10626 	beq	r19,r3,10105db0 <_dtoa_r+0x12f4>
10105998:	800b883a 	mov	r5,r16
1010599c:	000f883a 	mov	r7,zero
101059a0:	01800284 	movi	r6,10
101059a4:	e009883a 	mov	r4,fp
101059a8:	01072800 	call	10107280 <__multadd>
101059ac:	1021883a 	mov	r16,r2
101059b0:	000f883a 	mov	r7,zero
101059b4:	01800284 	movi	r6,10
101059b8:	880b883a 	mov	r5,r17
101059bc:	e009883a 	mov	r4,fp
101059c0:	8d002526 	beq	r17,r20,10105a58 <_dtoa_r+0xf9c>
101059c4:	01072800 	call	10107280 <__multadd>
101059c8:	a00b883a 	mov	r5,r20
101059cc:	000f883a 	mov	r7,zero
101059d0:	01800284 	movi	r6,10
101059d4:	e009883a 	mov	r4,fp
101059d8:	1023883a 	mov	r17,r2
101059dc:	01072800 	call	10107280 <__multadd>
101059e0:	1029883a 	mov	r20,r2
101059e4:	b027883a 	mov	r19,r22
101059e8:	003fc006 	br	101058ec <__alt_data_end+0xfffe58ec>
101059ec:	9011883a 	mov	r8,r18
101059f0:	00800e0e 	bge	zero,r2,10105a2c <_dtoa_r+0xf70>
101059f4:	800b883a 	mov	r5,r16
101059f8:	01800044 	movi	r6,1
101059fc:	e009883a 	mov	r4,fp
10105a00:	da001715 	stw	r8,92(sp)
10105a04:	01079300 	call	10107930 <__lshift>
10105a08:	a80b883a 	mov	r5,r21
10105a0c:	1009883a 	mov	r4,r2
10105a10:	1021883a 	mov	r16,r2
10105a14:	0107a780 	call	10107a78 <__mcmp>
10105a18:	da001717 	ldw	r8,92(sp)
10105a1c:	0081960e 	bge	zero,r2,10106078 <_dtoa_r+0x15bc>
10105a20:	00800e44 	movi	r2,57
10105a24:	40817026 	beq	r8,r2,10105fe8 <_dtoa_r+0x152c>
10105a28:	ba000c44 	addi	r8,r23,49
10105a2c:	8825883a 	mov	r18,r17
10105a30:	9dc00044 	addi	r23,r19,1
10105a34:	9a000005 	stb	r8,0(r19)
10105a38:	a023883a 	mov	r17,r20
10105a3c:	dc000915 	stw	r16,36(sp)
10105a40:	003f2406 	br	101056d4 <__alt_data_end+0xfffe56d4>
10105a44:	00800e44 	movi	r2,57
10105a48:	9011883a 	mov	r8,r18
10105a4c:	90816626 	beq	r18,r2,10105fe8 <_dtoa_r+0x152c>
10105a50:	05bff516 	blt	zero,r22,10105a28 <__alt_data_end+0xfffe5a28>
10105a54:	003ff506 	br	10105a2c <__alt_data_end+0xfffe5a2c>
10105a58:	01072800 	call	10107280 <__multadd>
10105a5c:	1023883a 	mov	r17,r2
10105a60:	1029883a 	mov	r20,r2
10105a64:	003fdf06 	br	101059e4 <__alt_data_end+0xfffe59e4>
10105a68:	e009883a 	mov	r4,fp
10105a6c:	01072580 	call	10107258 <_Bfree>
10105a70:	00800044 	movi	r2,1
10105a74:	003fbc06 	br	10105968 <__alt_data_end+0xfffe5968>
10105a78:	a80b883a 	mov	r5,r21
10105a7c:	8009883a 	mov	r4,r16
10105a80:	0107a780 	call	10107a78 <__mcmp>
10105a84:	103edb0e 	bge	r2,zero,101055f4 <__alt_data_end+0xfffe55f4>
10105a88:	800b883a 	mov	r5,r16
10105a8c:	000f883a 	mov	r7,zero
10105a90:	01800284 	movi	r6,10
10105a94:	e009883a 	mov	r4,fp
10105a98:	01072800 	call	10107280 <__multadd>
10105a9c:	1021883a 	mov	r16,r2
10105aa0:	d8800517 	ldw	r2,20(sp)
10105aa4:	d8c00b17 	ldw	r3,44(sp)
10105aa8:	10bfffc4 	addi	r2,r2,-1
10105aac:	d8800515 	stw	r2,20(sp)
10105ab0:	183f761e 	bne	r3,zero,1010588c <__alt_data_end+0xfffe588c>
10105ab4:	d9000c17 	ldw	r4,48(sp)
10105ab8:	0101730e 	bge	zero,r4,10106088 <_dtoa_r+0x15cc>
10105abc:	d9000615 	stw	r4,24(sp)
10105ac0:	003ed006 	br	10105604 <__alt_data_end+0xfffe5604>
10105ac4:	00800084 	movi	r2,2
10105ac8:	3081861e 	bne	r6,r2,101060e4 <_dtoa_r+0x1628>
10105acc:	d8000b15 	stw	zero,44(sp)
10105ad0:	003f3c06 	br	101057c4 <__alt_data_end+0xfffe57c4>
10105ad4:	dc000917 	ldw	r16,36(sp)
10105ad8:	003e9206 	br	10105524 <__alt_data_end+0xfffe5524>
10105adc:	d9c00317 	ldw	r7,12(sp)
10105ae0:	00800084 	movi	r2,2
10105ae4:	11fec50e 	bge	r2,r7,101055fc <__alt_data_end+0xfffe55fc>
10105ae8:	d9000617 	ldw	r4,24(sp)
10105aec:	20013c1e 	bne	r4,zero,10105fe0 <_dtoa_r+0x1524>
10105af0:	a80b883a 	mov	r5,r21
10105af4:	000f883a 	mov	r7,zero
10105af8:	01800144 	movi	r6,5
10105afc:	e009883a 	mov	r4,fp
10105b00:	01072800 	call	10107280 <__multadd>
10105b04:	100b883a 	mov	r5,r2
10105b08:	8009883a 	mov	r4,r16
10105b0c:	102b883a 	mov	r21,r2
10105b10:	0107a780 	call	10107a78 <__mcmp>
10105b14:	dc000915 	stw	r16,36(sp)
10105b18:	00bf410e 	bge	zero,r2,10105820 <__alt_data_end+0xfffe5820>
10105b1c:	d9c00717 	ldw	r7,28(sp)
10105b20:	00800c44 	movi	r2,49
10105b24:	38800005 	stb	r2,0(r7)
10105b28:	d8800517 	ldw	r2,20(sp)
10105b2c:	3dc00044 	addi	r23,r7,1
10105b30:	10800044 	addi	r2,r2,1
10105b34:	d8800515 	stw	r2,20(sp)
10105b38:	003f3d06 	br	10105830 <__alt_data_end+0xfffe5830>
10105b3c:	d9800517 	ldw	r6,20(sp)
10105b40:	d9c00717 	ldw	r7,28(sp)
10105b44:	00800c44 	movi	r2,49
10105b48:	31800044 	addi	r6,r6,1
10105b4c:	d9800515 	stw	r6,20(sp)
10105b50:	38800005 	stb	r2,0(r7)
10105b54:	003edf06 	br	101056d4 <__alt_data_end+0xfffe56d4>
10105b58:	d8000b15 	stw	zero,44(sp)
10105b5c:	003c9f06 	br	10104ddc <__alt_data_end+0xfffe4ddc>
10105b60:	903e7e1e 	bne	r18,zero,1010555c <__alt_data_end+0xfffe555c>
10105b64:	00800434 	movhi	r2,16
10105b68:	10bfffc4 	addi	r2,r2,-1
10105b6c:	9884703a 	and	r2,r19,r2
10105b70:	1000ea1e 	bne	r2,zero,10105f1c <_dtoa_r+0x1460>
10105b74:	9cdffc2c 	andhi	r19,r19,32752
10105b78:	9800e826 	beq	r19,zero,10105f1c <_dtoa_r+0x1460>
10105b7c:	d9c00817 	ldw	r7,32(sp)
10105b80:	b5800044 	addi	r22,r22,1
10105b84:	04c00044 	movi	r19,1
10105b88:	39c00044 	addi	r7,r7,1
10105b8c:	d9c00815 	stw	r7,32(sp)
10105b90:	d8800d17 	ldw	r2,52(sp)
10105b94:	103e721e 	bne	r2,zero,10105560 <__alt_data_end+0xfffe5560>
10105b98:	00800044 	movi	r2,1
10105b9c:	003e7906 	br	10105584 <__alt_data_end+0xfffe5584>
10105ba0:	8009883a 	mov	r4,r16
10105ba4:	010e0b00 	call	1010e0b0 <__floatsidf>
10105ba8:	d9800f17 	ldw	r6,60(sp)
10105bac:	d9c01017 	ldw	r7,64(sp)
10105bb0:	1009883a 	mov	r4,r2
10105bb4:	180b883a 	mov	r5,r3
10105bb8:	010d01c0 	call	1010d01c <__muldf3>
10105bbc:	000d883a 	mov	r6,zero
10105bc0:	01d00734 	movhi	r7,16412
10105bc4:	1009883a 	mov	r4,r2
10105bc8:	180b883a 	mov	r5,r3
10105bcc:	010bc300 	call	1010bc30 <__adddf3>
10105bd0:	047f3034 	movhi	r17,64704
10105bd4:	1021883a 	mov	r16,r2
10105bd8:	1c63883a 	add	r17,r3,r17
10105bdc:	d9000f17 	ldw	r4,60(sp)
10105be0:	d9401017 	ldw	r5,64(sp)
10105be4:	000d883a 	mov	r6,zero
10105be8:	01d00534 	movhi	r7,16404
10105bec:	010d7340 	call	1010d734 <__subdf3>
10105bf0:	800d883a 	mov	r6,r16
10105bf4:	880f883a 	mov	r7,r17
10105bf8:	1009883a 	mov	r4,r2
10105bfc:	180b883a 	mov	r5,r3
10105c00:	102b883a 	mov	r21,r2
10105c04:	1829883a 	mov	r20,r3
10105c08:	010ce4c0 	call	1010ce4c <__gedf2>
10105c0c:	00806c16 	blt	zero,r2,10105dc0 <_dtoa_r+0x1304>
10105c10:	89e0003c 	xorhi	r7,r17,32768
10105c14:	800d883a 	mov	r6,r16
10105c18:	a809883a 	mov	r4,r21
10105c1c:	a00b883a 	mov	r5,r20
10105c20:	010cf280 	call	1010cf28 <__ledf2>
10105c24:	103d7e0e 	bge	r2,zero,10105220 <__alt_data_end+0xfffe5220>
10105c28:	002b883a 	mov	r21,zero
10105c2c:	0023883a 	mov	r17,zero
10105c30:	003efb06 	br	10105820 <__alt_data_end+0xfffe5820>
10105c34:	d8800717 	ldw	r2,28(sp)
10105c38:	003bd006 	br	10104b7c <__alt_data_end+0xfffe4b7c>
10105c3c:	d9000a17 	ldw	r4,40(sp)
10105c40:	d9800d17 	ldw	r6,52(sp)
10105c44:	dd400a15 	stw	r21,40(sp)
10105c48:	a905c83a 	sub	r2,r21,r4
10105c4c:	308d883a 	add	r6,r6,r2
10105c50:	d9800d15 	stw	r6,52(sp)
10105c54:	002b883a 	mov	r21,zero
10105c58:	003e0606 	br	10105474 <__alt_data_end+0xfffe5474>
10105c5c:	9023883a 	mov	r17,r18
10105c60:	9829883a 	mov	r20,r19
10105c64:	04000084 	movi	r16,2
10105c68:	003c9206 	br	10104eb4 <__alt_data_end+0xfffe4eb4>
10105c6c:	04000044 	movi	r16,1
10105c70:	dc000c15 	stw	r16,48(sp)
10105c74:	dc000615 	stw	r16,24(sp)
10105c78:	dc002215 	stw	r16,136(sp)
10105c7c:	e0001115 	stw	zero,68(fp)
10105c80:	000b883a 	mov	r5,zero
10105c84:	003c6906 	br	10104e2c <__alt_data_end+0xfffe4e2c>
10105c88:	3021883a 	mov	r16,r6
10105c8c:	003ffb06 	br	10105c7c <__alt_data_end+0xfffe5c7c>
10105c90:	1000021e 	bne	r2,zero,10105c9c <_dtoa_r+0x11e0>
10105c94:	4200004c 	andi	r8,r8,1
10105c98:	403e7d1e 	bne	r8,zero,10105690 <__alt_data_end+0xfffe5690>
10105c9c:	01000c04 	movi	r4,48
10105ca0:	00000106 	br	10105ca8 <_dtoa_r+0x11ec>
10105ca4:	102f883a 	mov	r23,r2
10105ca8:	b8bfffc4 	addi	r2,r23,-1
10105cac:	10c00007 	ldb	r3,0(r2)
10105cb0:	193ffc26 	beq	r3,r4,10105ca4 <__alt_data_end+0xfffe5ca4>
10105cb4:	003e8706 	br	101056d4 <__alt_data_end+0xfffe56d4>
10105cb8:	d8800517 	ldw	r2,20(sp)
10105cbc:	00a3c83a 	sub	r17,zero,r2
10105cc0:	8800a426 	beq	r17,zero,10105f54 <_dtoa_r+0x1498>
10105cc4:	888003cc 	andi	r2,r17,15
10105cc8:	100490fa 	slli	r2,r2,3
10105ccc:	00c40474 	movhi	r3,4113
10105cd0:	18c46204 	addi	r3,r3,4488
10105cd4:	1885883a 	add	r2,r3,r2
10105cd8:	11800017 	ldw	r6,0(r2)
10105cdc:	11c00117 	ldw	r7,4(r2)
10105ce0:	9009883a 	mov	r4,r18
10105ce4:	980b883a 	mov	r5,r19
10105ce8:	8823d13a 	srai	r17,r17,4
10105cec:	010d01c0 	call	1010d01c <__muldf3>
10105cf0:	d8800f15 	stw	r2,60(sp)
10105cf4:	d8c01015 	stw	r3,64(sp)
10105cf8:	8800e826 	beq	r17,zero,1010609c <_dtoa_r+0x15e0>
10105cfc:	05040474 	movhi	r20,4113
10105d00:	a5045804 	addi	r20,r20,4448
10105d04:	04000084 	movi	r16,2
10105d08:	8980004c 	andi	r6,r17,1
10105d0c:	1009883a 	mov	r4,r2
10105d10:	8823d07a 	srai	r17,r17,1
10105d14:	180b883a 	mov	r5,r3
10105d18:	30000426 	beq	r6,zero,10105d2c <_dtoa_r+0x1270>
10105d1c:	a1800017 	ldw	r6,0(r20)
10105d20:	a1c00117 	ldw	r7,4(r20)
10105d24:	84000044 	addi	r16,r16,1
10105d28:	010d01c0 	call	1010d01c <__muldf3>
10105d2c:	a5000204 	addi	r20,r20,8
10105d30:	883ff51e 	bne	r17,zero,10105d08 <__alt_data_end+0xfffe5d08>
10105d34:	d8800f15 	stw	r2,60(sp)
10105d38:	d8c01015 	stw	r3,64(sp)
10105d3c:	003c7606 	br	10104f18 <__alt_data_end+0xfffe4f18>
10105d40:	00c00c04 	movi	r3,48
10105d44:	10c00005 	stb	r3,0(r2)
10105d48:	d8c00517 	ldw	r3,20(sp)
10105d4c:	bd3fffc3 	ldbu	r20,-1(r23)
10105d50:	18c00044 	addi	r3,r3,1
10105d54:	d8c00515 	stw	r3,20(sp)
10105d58:	003db906 	br	10105440 <__alt_data_end+0xfffe5440>
10105d5c:	89400117 	ldw	r5,4(r17)
10105d60:	e009883a 	mov	r4,fp
10105d64:	01071b00 	call	101071b0 <_Balloc>
10105d68:	89800417 	ldw	r6,16(r17)
10105d6c:	89400304 	addi	r5,r17,12
10105d70:	11000304 	addi	r4,r2,12
10105d74:	31800084 	addi	r6,r6,2
10105d78:	318d883a 	add	r6,r6,r6
10105d7c:	318d883a 	add	r6,r6,r6
10105d80:	1027883a 	mov	r19,r2
10105d84:	01070680 	call	10107068 <memcpy>
10105d88:	01800044 	movi	r6,1
10105d8c:	980b883a 	mov	r5,r19
10105d90:	e009883a 	mov	r4,fp
10105d94:	01079300 	call	10107930 <__lshift>
10105d98:	1029883a 	mov	r20,r2
10105d9c:	003ecc06 	br	101058d0 <__alt_data_end+0xfffe58d0>
10105da0:	00800e44 	movi	r2,57
10105da4:	90809026 	beq	r18,r2,10105fe8 <_dtoa_r+0x152c>
10105da8:	92000044 	addi	r8,r18,1
10105dac:	003f1f06 	br	10105a2c <__alt_data_end+0xfffe5a2c>
10105db0:	9011883a 	mov	r8,r18
10105db4:	8825883a 	mov	r18,r17
10105db8:	a023883a 	mov	r17,r20
10105dbc:	003e2906 	br	10105664 <__alt_data_end+0xfffe5664>
10105dc0:	002b883a 	mov	r21,zero
10105dc4:	0023883a 	mov	r17,zero
10105dc8:	003f5406 	br	10105b1c <__alt_data_end+0xfffe5b1c>
10105dcc:	61bfffc4 	addi	r6,r12,-1
10105dd0:	300490fa 	slli	r2,r6,3
10105dd4:	00c40474 	movhi	r3,4113
10105dd8:	18c46204 	addi	r3,r3,4488
10105ddc:	1885883a 	add	r2,r3,r2
10105de0:	11000017 	ldw	r4,0(r2)
10105de4:	11400117 	ldw	r5,4(r2)
10105de8:	d8800717 	ldw	r2,28(sp)
10105dec:	880f883a 	mov	r7,r17
10105df0:	d9801215 	stw	r6,72(sp)
10105df4:	800d883a 	mov	r6,r16
10105df8:	db001615 	stw	r12,88(sp)
10105dfc:	15c00044 	addi	r23,r2,1
10105e00:	010d01c0 	call	1010d01c <__muldf3>
10105e04:	d9401017 	ldw	r5,64(sp)
10105e08:	d9000f17 	ldw	r4,60(sp)
10105e0c:	d8c01515 	stw	r3,84(sp)
10105e10:	d8801415 	stw	r2,80(sp)
10105e14:	010e0300 	call	1010e030 <__fixdfsi>
10105e18:	1009883a 	mov	r4,r2
10105e1c:	1021883a 	mov	r16,r2
10105e20:	010e0b00 	call	1010e0b0 <__floatsidf>
10105e24:	d9000f17 	ldw	r4,60(sp)
10105e28:	d9401017 	ldw	r5,64(sp)
10105e2c:	100d883a 	mov	r6,r2
10105e30:	180f883a 	mov	r7,r3
10105e34:	010d7340 	call	1010d734 <__subdf3>
10105e38:	1829883a 	mov	r20,r3
10105e3c:	d8c00717 	ldw	r3,28(sp)
10105e40:	84000c04 	addi	r16,r16,48
10105e44:	1023883a 	mov	r17,r2
10105e48:	1c000005 	stb	r16,0(r3)
10105e4c:	db001617 	ldw	r12,88(sp)
10105e50:	00800044 	movi	r2,1
10105e54:	60802226 	beq	r12,r2,10105ee0 <_dtoa_r+0x1424>
10105e58:	d9c00717 	ldw	r7,28(sp)
10105e5c:	8805883a 	mov	r2,r17
10105e60:	b82b883a 	mov	r21,r23
10105e64:	3b19883a 	add	r12,r7,r12
10105e68:	6023883a 	mov	r17,r12
10105e6c:	a007883a 	mov	r3,r20
10105e70:	dc800f15 	stw	r18,60(sp)
10105e74:	000d883a 	mov	r6,zero
10105e78:	01d00934 	movhi	r7,16420
10105e7c:	1009883a 	mov	r4,r2
10105e80:	180b883a 	mov	r5,r3
10105e84:	010d01c0 	call	1010d01c <__muldf3>
10105e88:	180b883a 	mov	r5,r3
10105e8c:	1009883a 	mov	r4,r2
10105e90:	1829883a 	mov	r20,r3
10105e94:	1025883a 	mov	r18,r2
10105e98:	010e0300 	call	1010e030 <__fixdfsi>
10105e9c:	1009883a 	mov	r4,r2
10105ea0:	1021883a 	mov	r16,r2
10105ea4:	010e0b00 	call	1010e0b0 <__floatsidf>
10105ea8:	100d883a 	mov	r6,r2
10105eac:	180f883a 	mov	r7,r3
10105eb0:	9009883a 	mov	r4,r18
10105eb4:	a00b883a 	mov	r5,r20
10105eb8:	84000c04 	addi	r16,r16,48
10105ebc:	010d7340 	call	1010d734 <__subdf3>
10105ec0:	ad400044 	addi	r21,r21,1
10105ec4:	ac3fffc5 	stb	r16,-1(r21)
10105ec8:	ac7fea1e 	bne	r21,r17,10105e74 <__alt_data_end+0xfffe5e74>
10105ecc:	1023883a 	mov	r17,r2
10105ed0:	d8801217 	ldw	r2,72(sp)
10105ed4:	dc800f17 	ldw	r18,60(sp)
10105ed8:	1829883a 	mov	r20,r3
10105edc:	b8af883a 	add	r23,r23,r2
10105ee0:	d9001417 	ldw	r4,80(sp)
10105ee4:	d9401517 	ldw	r5,84(sp)
10105ee8:	000d883a 	mov	r6,zero
10105eec:	01cff834 	movhi	r7,16352
10105ef0:	010bc300 	call	1010bc30 <__adddf3>
10105ef4:	880d883a 	mov	r6,r17
10105ef8:	a00f883a 	mov	r7,r20
10105efc:	1009883a 	mov	r4,r2
10105f00:	180b883a 	mov	r5,r3
10105f04:	010cf280 	call	1010cf28 <__ledf2>
10105f08:	10003e0e 	bge	r2,zero,10106004 <_dtoa_r+0x1548>
10105f0c:	d9001317 	ldw	r4,76(sp)
10105f10:	bd3fffc3 	ldbu	r20,-1(r23)
10105f14:	d9000515 	stw	r4,20(sp)
10105f18:	003d3b06 	br	10105408 <__alt_data_end+0xfffe5408>
10105f1c:	0027883a 	mov	r19,zero
10105f20:	003f1b06 	br	10105b90 <__alt_data_end+0xfffe5b90>
10105f24:	d8800817 	ldw	r2,32(sp)
10105f28:	11e9c83a 	sub	r20,r2,r7
10105f2c:	0005883a 	mov	r2,zero
10105f30:	003d5406 	br	10105484 <__alt_data_end+0xfffe5484>
10105f34:	00800044 	movi	r2,1
10105f38:	003dc706 	br	10105658 <__alt_data_end+0xfffe5658>
10105f3c:	d8c00217 	ldw	r3,8(sp)
10105f40:	00800d84 	movi	r2,54
10105f44:	dd400a17 	ldw	r21,40(sp)
10105f48:	10c5c83a 	sub	r2,r2,r3
10105f4c:	dd000817 	ldw	r20,32(sp)
10105f50:	003d4c06 	br	10105484 <__alt_data_end+0xfffe5484>
10105f54:	dc800f15 	stw	r18,60(sp)
10105f58:	dcc01015 	stw	r19,64(sp)
10105f5c:	04000084 	movi	r16,2
10105f60:	003bed06 	br	10104f18 <__alt_data_end+0xfffe4f18>
10105f64:	d9000617 	ldw	r4,24(sp)
10105f68:	203f0d26 	beq	r4,zero,10105ba0 <__alt_data_end+0xfffe5ba0>
10105f6c:	d9800c17 	ldw	r6,48(sp)
10105f70:	01bcab0e 	bge	zero,r6,10105220 <__alt_data_end+0xfffe5220>
10105f74:	d9401017 	ldw	r5,64(sp)
10105f78:	d9000f17 	ldw	r4,60(sp)
10105f7c:	000d883a 	mov	r6,zero
10105f80:	01d00934 	movhi	r7,16420
10105f84:	010d01c0 	call	1010d01c <__muldf3>
10105f88:	81000044 	addi	r4,r16,1
10105f8c:	d8800f15 	stw	r2,60(sp)
10105f90:	d8c01015 	stw	r3,64(sp)
10105f94:	010e0b00 	call	1010e0b0 <__floatsidf>
10105f98:	d9800f17 	ldw	r6,60(sp)
10105f9c:	d9c01017 	ldw	r7,64(sp)
10105fa0:	1009883a 	mov	r4,r2
10105fa4:	180b883a 	mov	r5,r3
10105fa8:	010d01c0 	call	1010d01c <__muldf3>
10105fac:	01d00734 	movhi	r7,16412
10105fb0:	000d883a 	mov	r6,zero
10105fb4:	1009883a 	mov	r4,r2
10105fb8:	180b883a 	mov	r5,r3
10105fbc:	010bc300 	call	1010bc30 <__adddf3>
10105fc0:	d9c00517 	ldw	r7,20(sp)
10105fc4:	047f3034 	movhi	r17,64704
10105fc8:	1021883a 	mov	r16,r2
10105fcc:	39ffffc4 	addi	r7,r7,-1
10105fd0:	d9c01315 	stw	r7,76(sp)
10105fd4:	1c63883a 	add	r17,r3,r17
10105fd8:	db000c17 	ldw	r12,48(sp)
10105fdc:	003bea06 	br	10104f88 <__alt_data_end+0xfffe4f88>
10105fe0:	dc000915 	stw	r16,36(sp)
10105fe4:	003e0e06 	br	10105820 <__alt_data_end+0xfffe5820>
10105fe8:	01000e44 	movi	r4,57
10105fec:	8825883a 	mov	r18,r17
10105ff0:	9dc00044 	addi	r23,r19,1
10105ff4:	99000005 	stb	r4,0(r19)
10105ff8:	a023883a 	mov	r17,r20
10105ffc:	dc000915 	stw	r16,36(sp)
10106000:	003da406 	br	10105694 <__alt_data_end+0xfffe5694>
10106004:	d9801417 	ldw	r6,80(sp)
10106008:	d9c01517 	ldw	r7,84(sp)
1010600c:	0009883a 	mov	r4,zero
10106010:	014ff834 	movhi	r5,16352
10106014:	010d7340 	call	1010d734 <__subdf3>
10106018:	880d883a 	mov	r6,r17
1010601c:	a00f883a 	mov	r7,r20
10106020:	1009883a 	mov	r4,r2
10106024:	180b883a 	mov	r5,r3
10106028:	010ce4c0 	call	1010ce4c <__gedf2>
1010602c:	00bc7c0e 	bge	zero,r2,10105220 <__alt_data_end+0xfffe5220>
10106030:	01000c04 	movi	r4,48
10106034:	00000106 	br	1010603c <_dtoa_r+0x1580>
10106038:	102f883a 	mov	r23,r2
1010603c:	b8bfffc4 	addi	r2,r23,-1
10106040:	10c00007 	ldb	r3,0(r2)
10106044:	193ffc26 	beq	r3,r4,10106038 <__alt_data_end+0xfffe6038>
10106048:	d9801317 	ldw	r6,76(sp)
1010604c:	d9800515 	stw	r6,20(sp)
10106050:	003c4406 	br	10105164 <__alt_data_end+0xfffe5164>
10106054:	d9801317 	ldw	r6,76(sp)
10106058:	d9800515 	stw	r6,20(sp)
1010605c:	003cea06 	br	10105408 <__alt_data_end+0xfffe5408>
10106060:	dd800f17 	ldw	r22,60(sp)
10106064:	dcc01017 	ldw	r19,64(sp)
10106068:	dc801217 	ldw	r18,72(sp)
1010606c:	003c6c06 	br	10105220 <__alt_data_end+0xfffe5220>
10106070:	903e031e 	bne	r18,zero,10105880 <__alt_data_end+0xfffe5880>
10106074:	003ebb06 	br	10105b64 <__alt_data_end+0xfffe5b64>
10106078:	103e6c1e 	bne	r2,zero,10105a2c <__alt_data_end+0xfffe5a2c>
1010607c:	4080004c 	andi	r2,r8,1
10106080:	103e6a26 	beq	r2,zero,10105a2c <__alt_data_end+0xfffe5a2c>
10106084:	003e6606 	br	10105a20 <__alt_data_end+0xfffe5a20>
10106088:	d8c00317 	ldw	r3,12(sp)
1010608c:	00800084 	movi	r2,2
10106090:	10c02916 	blt	r2,r3,10106138 <_dtoa_r+0x167c>
10106094:	d9000c17 	ldw	r4,48(sp)
10106098:	003e8806 	br	10105abc <__alt_data_end+0xfffe5abc>
1010609c:	04000084 	movi	r16,2
101060a0:	003b9d06 	br	10104f18 <__alt_data_end+0xfffe4f18>
101060a4:	d9001317 	ldw	r4,76(sp)
101060a8:	d9000515 	stw	r4,20(sp)
101060ac:	003cd606 	br	10105408 <__alt_data_end+0xfffe5408>
101060b0:	d8801317 	ldw	r2,76(sp)
101060b4:	d8800515 	stw	r2,20(sp)
101060b8:	003c2a06 	br	10105164 <__alt_data_end+0xfffe5164>
101060bc:	d9800317 	ldw	r6,12(sp)
101060c0:	00800084 	movi	r2,2
101060c4:	11801516 	blt	r2,r6,1010611c <_dtoa_r+0x1660>
101060c8:	d9c00c17 	ldw	r7,48(sp)
101060cc:	d9c00615 	stw	r7,24(sp)
101060d0:	003df706 	br	101058b0 <__alt_data_end+0xfffe58b0>
101060d4:	193d3926 	beq	r3,r4,101055bc <__alt_data_end+0xfffe55bc>
101060d8:	00c00f04 	movi	r3,60
101060dc:	1885c83a 	sub	r2,r3,r2
101060e0:	003ddf06 	br	10105860 <__alt_data_end+0xfffe5860>
101060e4:	e009883a 	mov	r4,fp
101060e8:	e0001115 	stw	zero,68(fp)
101060ec:	000b883a 	mov	r5,zero
101060f0:	01071b00 	call	101071b0 <_Balloc>
101060f4:	d8800715 	stw	r2,28(sp)
101060f8:	d8c00717 	ldw	r3,28(sp)
101060fc:	00bfffc4 	movi	r2,-1
10106100:	01000044 	movi	r4,1
10106104:	d8800c15 	stw	r2,48(sp)
10106108:	e0c01015 	stw	r3,64(fp)
1010610c:	d9000b15 	stw	r4,44(sp)
10106110:	d8800615 	stw	r2,24(sp)
10106114:	d8002215 	stw	zero,136(sp)
10106118:	003c4106 	br	10105220 <__alt_data_end+0xfffe5220>
1010611c:	d8c00c17 	ldw	r3,48(sp)
10106120:	d8c00615 	stw	r3,24(sp)
10106124:	003e7006 	br	10105ae8 <__alt_data_end+0xfffe5ae8>
10106128:	04400044 	movi	r17,1
1010612c:	003b2006 	br	10104db0 <__alt_data_end+0xfffe4db0>
10106130:	000b883a 	mov	r5,zero
10106134:	003b3d06 	br	10104e2c <__alt_data_end+0xfffe4e2c>
10106138:	d8800c17 	ldw	r2,48(sp)
1010613c:	d8800615 	stw	r2,24(sp)
10106140:	003e6906 	br	10105ae8 <__alt_data_end+0xfffe5ae8>

10106144 <__sflush_r>:
10106144:	2880030b 	ldhu	r2,12(r5)
10106148:	defffb04 	addi	sp,sp,-20
1010614c:	dcc00315 	stw	r19,12(sp)
10106150:	dc400115 	stw	r17,4(sp)
10106154:	dfc00415 	stw	ra,16(sp)
10106158:	dc800215 	stw	r18,8(sp)
1010615c:	dc000015 	stw	r16,0(sp)
10106160:	10c0020c 	andi	r3,r2,8
10106164:	2823883a 	mov	r17,r5
10106168:	2027883a 	mov	r19,r4
1010616c:	1800311e 	bne	r3,zero,10106234 <__sflush_r+0xf0>
10106170:	28c00117 	ldw	r3,4(r5)
10106174:	10820014 	ori	r2,r2,2048
10106178:	2880030d 	sth	r2,12(r5)
1010617c:	00c04b0e 	bge	zero,r3,101062ac <__sflush_r+0x168>
10106180:	8a000a17 	ldw	r8,40(r17)
10106184:	40002326 	beq	r8,zero,10106214 <__sflush_r+0xd0>
10106188:	9c000017 	ldw	r16,0(r19)
1010618c:	10c4000c 	andi	r3,r2,4096
10106190:	98000015 	stw	zero,0(r19)
10106194:	18004826 	beq	r3,zero,101062b8 <__sflush_r+0x174>
10106198:	89801417 	ldw	r6,80(r17)
1010619c:	10c0010c 	andi	r3,r2,4
101061a0:	18000626 	beq	r3,zero,101061bc <__sflush_r+0x78>
101061a4:	88c00117 	ldw	r3,4(r17)
101061a8:	88800c17 	ldw	r2,48(r17)
101061ac:	30cdc83a 	sub	r6,r6,r3
101061b0:	10000226 	beq	r2,zero,101061bc <__sflush_r+0x78>
101061b4:	88800f17 	ldw	r2,60(r17)
101061b8:	308dc83a 	sub	r6,r6,r2
101061bc:	89400717 	ldw	r5,28(r17)
101061c0:	000f883a 	mov	r7,zero
101061c4:	9809883a 	mov	r4,r19
101061c8:	403ee83a 	callr	r8
101061cc:	00ffffc4 	movi	r3,-1
101061d0:	10c04426 	beq	r2,r3,101062e4 <__sflush_r+0x1a0>
101061d4:	88c0030b 	ldhu	r3,12(r17)
101061d8:	89000417 	ldw	r4,16(r17)
101061dc:	88000115 	stw	zero,4(r17)
101061e0:	197dffcc 	andi	r5,r3,63487
101061e4:	8940030d 	sth	r5,12(r17)
101061e8:	89000015 	stw	r4,0(r17)
101061ec:	18c4000c 	andi	r3,r3,4096
101061f0:	18002c1e 	bne	r3,zero,101062a4 <__sflush_r+0x160>
101061f4:	89400c17 	ldw	r5,48(r17)
101061f8:	9c000015 	stw	r16,0(r19)
101061fc:	28000526 	beq	r5,zero,10106214 <__sflush_r+0xd0>
10106200:	88801004 	addi	r2,r17,64
10106204:	28800226 	beq	r5,r2,10106210 <__sflush_r+0xcc>
10106208:	9809883a 	mov	r4,r19
1010620c:	010695c0 	call	1010695c <_free_r>
10106210:	88000c15 	stw	zero,48(r17)
10106214:	0005883a 	mov	r2,zero
10106218:	dfc00417 	ldw	ra,16(sp)
1010621c:	dcc00317 	ldw	r19,12(sp)
10106220:	dc800217 	ldw	r18,8(sp)
10106224:	dc400117 	ldw	r17,4(sp)
10106228:	dc000017 	ldw	r16,0(sp)
1010622c:	dec00504 	addi	sp,sp,20
10106230:	f800283a 	ret
10106234:	2c800417 	ldw	r18,16(r5)
10106238:	903ff626 	beq	r18,zero,10106214 <__alt_data_end+0xfffe6214>
1010623c:	2c000017 	ldw	r16,0(r5)
10106240:	108000cc 	andi	r2,r2,3
10106244:	2c800015 	stw	r18,0(r5)
10106248:	84a1c83a 	sub	r16,r16,r18
1010624c:	1000131e 	bne	r2,zero,1010629c <__sflush_r+0x158>
10106250:	28800517 	ldw	r2,20(r5)
10106254:	88800215 	stw	r2,8(r17)
10106258:	04000316 	blt	zero,r16,10106268 <__sflush_r+0x124>
1010625c:	003fed06 	br	10106214 <__alt_data_end+0xfffe6214>
10106260:	90a5883a 	add	r18,r18,r2
10106264:	043feb0e 	bge	zero,r16,10106214 <__alt_data_end+0xfffe6214>
10106268:	88800917 	ldw	r2,36(r17)
1010626c:	89400717 	ldw	r5,28(r17)
10106270:	800f883a 	mov	r7,r16
10106274:	900d883a 	mov	r6,r18
10106278:	9809883a 	mov	r4,r19
1010627c:	103ee83a 	callr	r2
10106280:	80a1c83a 	sub	r16,r16,r2
10106284:	00bff616 	blt	zero,r2,10106260 <__alt_data_end+0xfffe6260>
10106288:	88c0030b 	ldhu	r3,12(r17)
1010628c:	00bfffc4 	movi	r2,-1
10106290:	18c01014 	ori	r3,r3,64
10106294:	88c0030d 	sth	r3,12(r17)
10106298:	003fdf06 	br	10106218 <__alt_data_end+0xfffe6218>
1010629c:	0005883a 	mov	r2,zero
101062a0:	003fec06 	br	10106254 <__alt_data_end+0xfffe6254>
101062a4:	88801415 	stw	r2,80(r17)
101062a8:	003fd206 	br	101061f4 <__alt_data_end+0xfffe61f4>
101062ac:	28c00f17 	ldw	r3,60(r5)
101062b0:	00ffb316 	blt	zero,r3,10106180 <__alt_data_end+0xfffe6180>
101062b4:	003fd706 	br	10106214 <__alt_data_end+0xfffe6214>
101062b8:	89400717 	ldw	r5,28(r17)
101062bc:	000d883a 	mov	r6,zero
101062c0:	01c00044 	movi	r7,1
101062c4:	9809883a 	mov	r4,r19
101062c8:	403ee83a 	callr	r8
101062cc:	100d883a 	mov	r6,r2
101062d0:	00bfffc4 	movi	r2,-1
101062d4:	30801426 	beq	r6,r2,10106328 <__sflush_r+0x1e4>
101062d8:	8880030b 	ldhu	r2,12(r17)
101062dc:	8a000a17 	ldw	r8,40(r17)
101062e0:	003fae06 	br	1010619c <__alt_data_end+0xfffe619c>
101062e4:	98c00017 	ldw	r3,0(r19)
101062e8:	183fba26 	beq	r3,zero,101061d4 <__alt_data_end+0xfffe61d4>
101062ec:	01000744 	movi	r4,29
101062f0:	19000626 	beq	r3,r4,1010630c <__sflush_r+0x1c8>
101062f4:	01000584 	movi	r4,22
101062f8:	19000426 	beq	r3,r4,1010630c <__sflush_r+0x1c8>
101062fc:	88c0030b 	ldhu	r3,12(r17)
10106300:	18c01014 	ori	r3,r3,64
10106304:	88c0030d 	sth	r3,12(r17)
10106308:	003fc306 	br	10106218 <__alt_data_end+0xfffe6218>
1010630c:	8880030b 	ldhu	r2,12(r17)
10106310:	88c00417 	ldw	r3,16(r17)
10106314:	88000115 	stw	zero,4(r17)
10106318:	10bdffcc 	andi	r2,r2,63487
1010631c:	8880030d 	sth	r2,12(r17)
10106320:	88c00015 	stw	r3,0(r17)
10106324:	003fb306 	br	101061f4 <__alt_data_end+0xfffe61f4>
10106328:	98800017 	ldw	r2,0(r19)
1010632c:	103fea26 	beq	r2,zero,101062d8 <__alt_data_end+0xfffe62d8>
10106330:	00c00744 	movi	r3,29
10106334:	10c00226 	beq	r2,r3,10106340 <__sflush_r+0x1fc>
10106338:	00c00584 	movi	r3,22
1010633c:	10c0031e 	bne	r2,r3,1010634c <__sflush_r+0x208>
10106340:	9c000015 	stw	r16,0(r19)
10106344:	0005883a 	mov	r2,zero
10106348:	003fb306 	br	10106218 <__alt_data_end+0xfffe6218>
1010634c:	88c0030b 	ldhu	r3,12(r17)
10106350:	3005883a 	mov	r2,r6
10106354:	18c01014 	ori	r3,r3,64
10106358:	88c0030d 	sth	r3,12(r17)
1010635c:	003fae06 	br	10106218 <__alt_data_end+0xfffe6218>

10106360 <_fflush_r>:
10106360:	defffd04 	addi	sp,sp,-12
10106364:	dc000115 	stw	r16,4(sp)
10106368:	dfc00215 	stw	ra,8(sp)
1010636c:	2021883a 	mov	r16,r4
10106370:	20000226 	beq	r4,zero,1010637c <_fflush_r+0x1c>
10106374:	20800e17 	ldw	r2,56(r4)
10106378:	10000c26 	beq	r2,zero,101063ac <_fflush_r+0x4c>
1010637c:	2880030f 	ldh	r2,12(r5)
10106380:	1000051e 	bne	r2,zero,10106398 <_fflush_r+0x38>
10106384:	0005883a 	mov	r2,zero
10106388:	dfc00217 	ldw	ra,8(sp)
1010638c:	dc000117 	ldw	r16,4(sp)
10106390:	dec00304 	addi	sp,sp,12
10106394:	f800283a 	ret
10106398:	8009883a 	mov	r4,r16
1010639c:	dfc00217 	ldw	ra,8(sp)
101063a0:	dc000117 	ldw	r16,4(sp)
101063a4:	dec00304 	addi	sp,sp,12
101063a8:	01061441 	jmpi	10106144 <__sflush_r>
101063ac:	d9400015 	stw	r5,0(sp)
101063b0:	010673c0 	call	1010673c <__sinit>
101063b4:	d9400017 	ldw	r5,0(sp)
101063b8:	003ff006 	br	1010637c <__alt_data_end+0xfffe637c>

101063bc <fflush>:
101063bc:	20000526 	beq	r4,zero,101063d4 <fflush+0x18>
101063c0:	00840474 	movhi	r2,4113
101063c4:	108ba404 	addi	r2,r2,11920
101063c8:	200b883a 	mov	r5,r4
101063cc:	11000017 	ldw	r4,0(r2)
101063d0:	01063601 	jmpi	10106360 <_fflush_r>
101063d4:	00840474 	movhi	r2,4113
101063d8:	108ba304 	addi	r2,r2,11916
101063dc:	11000017 	ldw	r4,0(r2)
101063e0:	01440434 	movhi	r5,4112
101063e4:	2958d804 	addi	r5,r5,25440
101063e8:	0106d301 	jmpi	10106d30 <_fwalk_reent>

101063ec <__fp_unlock>:
101063ec:	0005883a 	mov	r2,zero
101063f0:	f800283a 	ret

101063f4 <_cleanup_r>:
101063f4:	01440474 	movhi	r5,4113
101063f8:	29678104 	addi	r5,r5,-25084
101063fc:	0106d301 	jmpi	10106d30 <_fwalk_reent>

10106400 <__sinit.part.1>:
10106400:	defff704 	addi	sp,sp,-36
10106404:	00c40434 	movhi	r3,4112
10106408:	dfc00815 	stw	ra,32(sp)
1010640c:	ddc00715 	stw	r23,28(sp)
10106410:	dd800615 	stw	r22,24(sp)
10106414:	dd400515 	stw	r21,20(sp)
10106418:	dd000415 	stw	r20,16(sp)
1010641c:	dcc00315 	stw	r19,12(sp)
10106420:	dc800215 	stw	r18,8(sp)
10106424:	dc400115 	stw	r17,4(sp)
10106428:	dc000015 	stw	r16,0(sp)
1010642c:	18d8fd04 	addi	r3,r3,25588
10106430:	24000117 	ldw	r16,4(r4)
10106434:	20c00f15 	stw	r3,60(r4)
10106438:	2080bb04 	addi	r2,r4,748
1010643c:	00c000c4 	movi	r3,3
10106440:	20c0b915 	stw	r3,740(r4)
10106444:	2080ba15 	stw	r2,744(r4)
10106448:	2000b815 	stw	zero,736(r4)
1010644c:	05c00204 	movi	r23,8
10106450:	00800104 	movi	r2,4
10106454:	2025883a 	mov	r18,r4
10106458:	b80d883a 	mov	r6,r23
1010645c:	81001704 	addi	r4,r16,92
10106460:	000b883a 	mov	r5,zero
10106464:	80000015 	stw	zero,0(r16)
10106468:	80000115 	stw	zero,4(r16)
1010646c:	80000215 	stw	zero,8(r16)
10106470:	8080030d 	sth	r2,12(r16)
10106474:	80001915 	stw	zero,100(r16)
10106478:	8000038d 	sth	zero,14(r16)
1010647c:	80000415 	stw	zero,16(r16)
10106480:	80000515 	stw	zero,20(r16)
10106484:	80000615 	stw	zero,24(r16)
10106488:	0101e400 	call	10101e40 <memset>
1010648c:	05840434 	movhi	r22,4112
10106490:	94400217 	ldw	r17,8(r18)
10106494:	05440434 	movhi	r21,4112
10106498:	05040434 	movhi	r20,4112
1010649c:	04c40434 	movhi	r19,4112
101064a0:	b5889e04 	addi	r22,r22,8824
101064a4:	ad48b504 	addi	r21,r21,8916
101064a8:	a508d404 	addi	r20,r20,9040
101064ac:	9cc8eb04 	addi	r19,r19,9132
101064b0:	85800815 	stw	r22,32(r16)
101064b4:	85400915 	stw	r21,36(r16)
101064b8:	85000a15 	stw	r20,40(r16)
101064bc:	84c00b15 	stw	r19,44(r16)
101064c0:	84000715 	stw	r16,28(r16)
101064c4:	00800284 	movi	r2,10
101064c8:	8880030d 	sth	r2,12(r17)
101064cc:	00800044 	movi	r2,1
101064d0:	b80d883a 	mov	r6,r23
101064d4:	89001704 	addi	r4,r17,92
101064d8:	000b883a 	mov	r5,zero
101064dc:	88000015 	stw	zero,0(r17)
101064e0:	88000115 	stw	zero,4(r17)
101064e4:	88000215 	stw	zero,8(r17)
101064e8:	88001915 	stw	zero,100(r17)
101064ec:	8880038d 	sth	r2,14(r17)
101064f0:	88000415 	stw	zero,16(r17)
101064f4:	88000515 	stw	zero,20(r17)
101064f8:	88000615 	stw	zero,24(r17)
101064fc:	0101e400 	call	10101e40 <memset>
10106500:	94000317 	ldw	r16,12(r18)
10106504:	00800484 	movi	r2,18
10106508:	8c400715 	stw	r17,28(r17)
1010650c:	8d800815 	stw	r22,32(r17)
10106510:	8d400915 	stw	r21,36(r17)
10106514:	8d000a15 	stw	r20,40(r17)
10106518:	8cc00b15 	stw	r19,44(r17)
1010651c:	8080030d 	sth	r2,12(r16)
10106520:	00800084 	movi	r2,2
10106524:	80000015 	stw	zero,0(r16)
10106528:	80000115 	stw	zero,4(r16)
1010652c:	80000215 	stw	zero,8(r16)
10106530:	80001915 	stw	zero,100(r16)
10106534:	8080038d 	sth	r2,14(r16)
10106538:	80000415 	stw	zero,16(r16)
1010653c:	80000515 	stw	zero,20(r16)
10106540:	80000615 	stw	zero,24(r16)
10106544:	b80d883a 	mov	r6,r23
10106548:	000b883a 	mov	r5,zero
1010654c:	81001704 	addi	r4,r16,92
10106550:	0101e400 	call	10101e40 <memset>
10106554:	00800044 	movi	r2,1
10106558:	84000715 	stw	r16,28(r16)
1010655c:	85800815 	stw	r22,32(r16)
10106560:	85400915 	stw	r21,36(r16)
10106564:	85000a15 	stw	r20,40(r16)
10106568:	84c00b15 	stw	r19,44(r16)
1010656c:	90800e15 	stw	r2,56(r18)
10106570:	dfc00817 	ldw	ra,32(sp)
10106574:	ddc00717 	ldw	r23,28(sp)
10106578:	dd800617 	ldw	r22,24(sp)
1010657c:	dd400517 	ldw	r21,20(sp)
10106580:	dd000417 	ldw	r20,16(sp)
10106584:	dcc00317 	ldw	r19,12(sp)
10106588:	dc800217 	ldw	r18,8(sp)
1010658c:	dc400117 	ldw	r17,4(sp)
10106590:	dc000017 	ldw	r16,0(sp)
10106594:	dec00904 	addi	sp,sp,36
10106598:	f800283a 	ret

1010659c <__fp_lock>:
1010659c:	0005883a 	mov	r2,zero
101065a0:	f800283a 	ret

101065a4 <__sfmoreglue>:
101065a4:	defffc04 	addi	sp,sp,-16
101065a8:	dc400115 	stw	r17,4(sp)
101065ac:	2c7fffc4 	addi	r17,r5,-1
101065b0:	8c401a24 	muli	r17,r17,104
101065b4:	dc800215 	stw	r18,8(sp)
101065b8:	2825883a 	mov	r18,r5
101065bc:	89401d04 	addi	r5,r17,116
101065c0:	dc000015 	stw	r16,0(sp)
101065c4:	dfc00315 	stw	ra,12(sp)
101065c8:	01016340 	call	10101634 <_malloc_r>
101065cc:	1021883a 	mov	r16,r2
101065d0:	10000726 	beq	r2,zero,101065f0 <__sfmoreglue+0x4c>
101065d4:	11000304 	addi	r4,r2,12
101065d8:	10000015 	stw	zero,0(r2)
101065dc:	14800115 	stw	r18,4(r2)
101065e0:	11000215 	stw	r4,8(r2)
101065e4:	89801a04 	addi	r6,r17,104
101065e8:	000b883a 	mov	r5,zero
101065ec:	0101e400 	call	10101e40 <memset>
101065f0:	8005883a 	mov	r2,r16
101065f4:	dfc00317 	ldw	ra,12(sp)
101065f8:	dc800217 	ldw	r18,8(sp)
101065fc:	dc400117 	ldw	r17,4(sp)
10106600:	dc000017 	ldw	r16,0(sp)
10106604:	dec00404 	addi	sp,sp,16
10106608:	f800283a 	ret

1010660c <__sfp>:
1010660c:	defffb04 	addi	sp,sp,-20
10106610:	dc000015 	stw	r16,0(sp)
10106614:	04040474 	movhi	r16,4113
10106618:	840ba304 	addi	r16,r16,11916
1010661c:	dcc00315 	stw	r19,12(sp)
10106620:	2027883a 	mov	r19,r4
10106624:	81000017 	ldw	r4,0(r16)
10106628:	dfc00415 	stw	ra,16(sp)
1010662c:	dc800215 	stw	r18,8(sp)
10106630:	20800e17 	ldw	r2,56(r4)
10106634:	dc400115 	stw	r17,4(sp)
10106638:	1000021e 	bne	r2,zero,10106644 <__sfp+0x38>
1010663c:	01064000 	call	10106400 <__sinit.part.1>
10106640:	81000017 	ldw	r4,0(r16)
10106644:	2480b804 	addi	r18,r4,736
10106648:	047fffc4 	movi	r17,-1
1010664c:	91000117 	ldw	r4,4(r18)
10106650:	94000217 	ldw	r16,8(r18)
10106654:	213fffc4 	addi	r4,r4,-1
10106658:	20000a16 	blt	r4,zero,10106684 <__sfp+0x78>
1010665c:	8080030f 	ldh	r2,12(r16)
10106660:	10000c26 	beq	r2,zero,10106694 <__sfp+0x88>
10106664:	80c01d04 	addi	r3,r16,116
10106668:	00000206 	br	10106674 <__sfp+0x68>
1010666c:	18bfe60f 	ldh	r2,-104(r3)
10106670:	10000826 	beq	r2,zero,10106694 <__sfp+0x88>
10106674:	213fffc4 	addi	r4,r4,-1
10106678:	1c3ffd04 	addi	r16,r3,-12
1010667c:	18c01a04 	addi	r3,r3,104
10106680:	247ffa1e 	bne	r4,r17,1010666c <__alt_data_end+0xfffe666c>
10106684:	90800017 	ldw	r2,0(r18)
10106688:	10001d26 	beq	r2,zero,10106700 <__sfp+0xf4>
1010668c:	1025883a 	mov	r18,r2
10106690:	003fee06 	br	1010664c <__alt_data_end+0xfffe664c>
10106694:	00bfffc4 	movi	r2,-1
10106698:	8080038d 	sth	r2,14(r16)
1010669c:	00800044 	movi	r2,1
101066a0:	8080030d 	sth	r2,12(r16)
101066a4:	80001915 	stw	zero,100(r16)
101066a8:	80000015 	stw	zero,0(r16)
101066ac:	80000215 	stw	zero,8(r16)
101066b0:	80000115 	stw	zero,4(r16)
101066b4:	80000415 	stw	zero,16(r16)
101066b8:	80000515 	stw	zero,20(r16)
101066bc:	80000615 	stw	zero,24(r16)
101066c0:	01800204 	movi	r6,8
101066c4:	000b883a 	mov	r5,zero
101066c8:	81001704 	addi	r4,r16,92
101066cc:	0101e400 	call	10101e40 <memset>
101066d0:	8005883a 	mov	r2,r16
101066d4:	80000c15 	stw	zero,48(r16)
101066d8:	80000d15 	stw	zero,52(r16)
101066dc:	80001115 	stw	zero,68(r16)
101066e0:	80001215 	stw	zero,72(r16)
101066e4:	dfc00417 	ldw	ra,16(sp)
101066e8:	dcc00317 	ldw	r19,12(sp)
101066ec:	dc800217 	ldw	r18,8(sp)
101066f0:	dc400117 	ldw	r17,4(sp)
101066f4:	dc000017 	ldw	r16,0(sp)
101066f8:	dec00504 	addi	sp,sp,20
101066fc:	f800283a 	ret
10106700:	01400104 	movi	r5,4
10106704:	9809883a 	mov	r4,r19
10106708:	01065a40 	call	101065a4 <__sfmoreglue>
1010670c:	90800015 	stw	r2,0(r18)
10106710:	103fde1e 	bne	r2,zero,1010668c <__alt_data_end+0xfffe668c>
10106714:	00800304 	movi	r2,12
10106718:	98800015 	stw	r2,0(r19)
1010671c:	0005883a 	mov	r2,zero
10106720:	003ff006 	br	101066e4 <__alt_data_end+0xfffe66e4>

10106724 <_cleanup>:
10106724:	00840474 	movhi	r2,4113
10106728:	108ba304 	addi	r2,r2,11916
1010672c:	11000017 	ldw	r4,0(r2)
10106730:	01440474 	movhi	r5,4113
10106734:	29678104 	addi	r5,r5,-25084
10106738:	0106d301 	jmpi	10106d30 <_fwalk_reent>

1010673c <__sinit>:
1010673c:	20800e17 	ldw	r2,56(r4)
10106740:	10000126 	beq	r2,zero,10106748 <__sinit+0xc>
10106744:	f800283a 	ret
10106748:	01064001 	jmpi	10106400 <__sinit.part.1>

1010674c <__sfp_lock_acquire>:
1010674c:	f800283a 	ret

10106750 <__sfp_lock_release>:
10106750:	f800283a 	ret

10106754 <__sinit_lock_acquire>:
10106754:	f800283a 	ret

10106758 <__sinit_lock_release>:
10106758:	f800283a 	ret

1010675c <__fp_lock_all>:
1010675c:	00840474 	movhi	r2,4113
10106760:	108ba404 	addi	r2,r2,11920
10106764:	11000017 	ldw	r4,0(r2)
10106768:	01440434 	movhi	r5,4112
1010676c:	29596704 	addi	r5,r5,26012
10106770:	0106c6c1 	jmpi	10106c6c <_fwalk>

10106774 <__fp_unlock_all>:
10106774:	00840474 	movhi	r2,4113
10106778:	108ba404 	addi	r2,r2,11920
1010677c:	11000017 	ldw	r4,0(r2)
10106780:	01440434 	movhi	r5,4112
10106784:	2958fb04 	addi	r5,r5,25580
10106788:	0106c6c1 	jmpi	10106c6c <_fwalk>

1010678c <__sflags>:
1010678c:	28800007 	ldb	r2,0(r5)
10106790:	00c01c84 	movi	r3,114
10106794:	10c02426 	beq	r2,r3,10106828 <__sflags+0x9c>
10106798:	00c01dc4 	movi	r3,119
1010679c:	10c01e26 	beq	r2,r3,10106818 <__sflags+0x8c>
101067a0:	00c01844 	movi	r3,97
101067a4:	10c00426 	beq	r2,r3,101067b8 <__sflags+0x2c>
101067a8:	00800584 	movi	r2,22
101067ac:	20800015 	stw	r2,0(r4)
101067b0:	0005883a 	mov	r2,zero
101067b4:	f800283a 	ret
101067b8:	02c08204 	movi	r11,520
101067bc:	01000044 	movi	r4,1
101067c0:	00804204 	movi	r2,264
101067c4:	01c00ac4 	movi	r7,43
101067c8:	02bff8c4 	movi	r10,-29
101067cc:	027fff04 	movi	r9,-4
101067d0:	02001e04 	movi	r8,120
101067d4:	29400044 	addi	r5,r5,1
101067d8:	28c00007 	ldb	r3,0(r5)
101067dc:	18000626 	beq	r3,zero,101067f8 <__sflags+0x6c>
101067e0:	19c00826 	beq	r3,r7,10106804 <__sflags+0x78>
101067e4:	1a3ffb1e 	bne	r3,r8,101067d4 <__alt_data_end+0xfffe67d4>
101067e8:	29400044 	addi	r5,r5,1
101067ec:	28c00007 	ldb	r3,0(r5)
101067f0:	21020014 	ori	r4,r4,2048
101067f4:	183ffa1e 	bne	r3,zero,101067e0 <__alt_data_end+0xfffe67e0>
101067f8:	22c8b03a 	or	r4,r4,r11
101067fc:	31000015 	stw	r4,0(r6)
10106800:	f800283a 	ret
10106804:	1284703a 	and	r2,r2,r10
10106808:	2248703a 	and	r4,r4,r9
1010680c:	10800414 	ori	r2,r2,16
10106810:	21000094 	ori	r4,r4,2
10106814:	003fef06 	br	101067d4 <__alt_data_end+0xfffe67d4>
10106818:	02c18004 	movi	r11,1536
1010681c:	01000044 	movi	r4,1
10106820:	00800204 	movi	r2,8
10106824:	003fe706 	br	101067c4 <__alt_data_end+0xfffe67c4>
10106828:	0017883a 	mov	r11,zero
1010682c:	0009883a 	mov	r4,zero
10106830:	00800104 	movi	r2,4
10106834:	003fe306 	br	101067c4 <__alt_data_end+0xfffe67c4>

10106838 <_malloc_trim_r>:
10106838:	defffb04 	addi	sp,sp,-20
1010683c:	dcc00315 	stw	r19,12(sp)
10106840:	04c40474 	movhi	r19,4113
10106844:	dc800215 	stw	r18,8(sp)
10106848:	dc400115 	stw	r17,4(sp)
1010684c:	dc000015 	stw	r16,0(sp)
10106850:	dfc00415 	stw	ra,16(sp)
10106854:	2821883a 	mov	r16,r5
10106858:	9cc5f504 	addi	r19,r19,6100
1010685c:	2025883a 	mov	r18,r4
10106860:	010e9d40 	call	1010e9d4 <__malloc_lock>
10106864:	98800217 	ldw	r2,8(r19)
10106868:	14400117 	ldw	r17,4(r2)
1010686c:	00bfff04 	movi	r2,-4
10106870:	88a2703a 	and	r17,r17,r2
10106874:	8c21c83a 	sub	r16,r17,r16
10106878:	8403fbc4 	addi	r16,r16,4079
1010687c:	8020d33a 	srli	r16,r16,12
10106880:	0083ffc4 	movi	r2,4095
10106884:	843fffc4 	addi	r16,r16,-1
10106888:	8020933a 	slli	r16,r16,12
1010688c:	1400060e 	bge	r2,r16,101068a8 <_malloc_trim_r+0x70>
10106890:	000b883a 	mov	r5,zero
10106894:	9009883a 	mov	r4,r18
10106898:	01022240 	call	10102224 <_sbrk_r>
1010689c:	98c00217 	ldw	r3,8(r19)
101068a0:	1c47883a 	add	r3,r3,r17
101068a4:	10c00a26 	beq	r2,r3,101068d0 <_malloc_trim_r+0x98>
101068a8:	9009883a 	mov	r4,r18
101068ac:	010e9f80 	call	1010e9f8 <__malloc_unlock>
101068b0:	0005883a 	mov	r2,zero
101068b4:	dfc00417 	ldw	ra,16(sp)
101068b8:	dcc00317 	ldw	r19,12(sp)
101068bc:	dc800217 	ldw	r18,8(sp)
101068c0:	dc400117 	ldw	r17,4(sp)
101068c4:	dc000017 	ldw	r16,0(sp)
101068c8:	dec00504 	addi	sp,sp,20
101068cc:	f800283a 	ret
101068d0:	040bc83a 	sub	r5,zero,r16
101068d4:	9009883a 	mov	r4,r18
101068d8:	01022240 	call	10102224 <_sbrk_r>
101068dc:	00ffffc4 	movi	r3,-1
101068e0:	10c00d26 	beq	r2,r3,10106918 <_malloc_trim_r+0xe0>
101068e4:	00c40474 	movhi	r3,4113
101068e8:	18d2ac04 	addi	r3,r3,19120
101068ec:	18800017 	ldw	r2,0(r3)
101068f0:	99000217 	ldw	r4,8(r19)
101068f4:	8c23c83a 	sub	r17,r17,r16
101068f8:	8c400054 	ori	r17,r17,1
101068fc:	1421c83a 	sub	r16,r2,r16
10106900:	24400115 	stw	r17,4(r4)
10106904:	9009883a 	mov	r4,r18
10106908:	1c000015 	stw	r16,0(r3)
1010690c:	010e9f80 	call	1010e9f8 <__malloc_unlock>
10106910:	00800044 	movi	r2,1
10106914:	003fe706 	br	101068b4 <__alt_data_end+0xfffe68b4>
10106918:	000b883a 	mov	r5,zero
1010691c:	9009883a 	mov	r4,r18
10106920:	01022240 	call	10102224 <_sbrk_r>
10106924:	99000217 	ldw	r4,8(r19)
10106928:	014003c4 	movi	r5,15
1010692c:	1107c83a 	sub	r3,r2,r4
10106930:	28ffdd0e 	bge	r5,r3,101068a8 <__alt_data_end+0xfffe68a8>
10106934:	01440474 	movhi	r5,4113
10106938:	294ba504 	addi	r5,r5,11924
1010693c:	29400017 	ldw	r5,0(r5)
10106940:	18c00054 	ori	r3,r3,1
10106944:	20c00115 	stw	r3,4(r4)
10106948:	00c40474 	movhi	r3,4113
1010694c:	1145c83a 	sub	r2,r2,r5
10106950:	18d2ac04 	addi	r3,r3,19120
10106954:	18800015 	stw	r2,0(r3)
10106958:	003fd306 	br	101068a8 <__alt_data_end+0xfffe68a8>

1010695c <_free_r>:
1010695c:	28004126 	beq	r5,zero,10106a64 <_free_r+0x108>
10106960:	defffd04 	addi	sp,sp,-12
10106964:	dc400115 	stw	r17,4(sp)
10106968:	dc000015 	stw	r16,0(sp)
1010696c:	2023883a 	mov	r17,r4
10106970:	2821883a 	mov	r16,r5
10106974:	dfc00215 	stw	ra,8(sp)
10106978:	010e9d40 	call	1010e9d4 <__malloc_lock>
1010697c:	81ffff17 	ldw	r7,-4(r16)
10106980:	00bfff84 	movi	r2,-2
10106984:	01040474 	movhi	r4,4113
10106988:	81bffe04 	addi	r6,r16,-8
1010698c:	3884703a 	and	r2,r7,r2
10106990:	2105f504 	addi	r4,r4,6100
10106994:	308b883a 	add	r5,r6,r2
10106998:	2a400117 	ldw	r9,4(r5)
1010699c:	22000217 	ldw	r8,8(r4)
101069a0:	00ffff04 	movi	r3,-4
101069a4:	48c6703a 	and	r3,r9,r3
101069a8:	2a005726 	beq	r5,r8,10106b08 <_free_r+0x1ac>
101069ac:	28c00115 	stw	r3,4(r5)
101069b0:	39c0004c 	andi	r7,r7,1
101069b4:	3800091e 	bne	r7,zero,101069dc <_free_r+0x80>
101069b8:	823ffe17 	ldw	r8,-8(r16)
101069bc:	22400204 	addi	r9,r4,8
101069c0:	320dc83a 	sub	r6,r6,r8
101069c4:	31c00217 	ldw	r7,8(r6)
101069c8:	1205883a 	add	r2,r2,r8
101069cc:	3a406526 	beq	r7,r9,10106b64 <_free_r+0x208>
101069d0:	32000317 	ldw	r8,12(r6)
101069d4:	3a000315 	stw	r8,12(r7)
101069d8:	41c00215 	stw	r7,8(r8)
101069dc:	28cf883a 	add	r7,r5,r3
101069e0:	39c00117 	ldw	r7,4(r7)
101069e4:	39c0004c 	andi	r7,r7,1
101069e8:	38003a26 	beq	r7,zero,10106ad4 <_free_r+0x178>
101069ec:	10c00054 	ori	r3,r2,1
101069f0:	30c00115 	stw	r3,4(r6)
101069f4:	3087883a 	add	r3,r6,r2
101069f8:	18800015 	stw	r2,0(r3)
101069fc:	00c07fc4 	movi	r3,511
10106a00:	18801936 	bltu	r3,r2,10106a68 <_free_r+0x10c>
10106a04:	1004d0fa 	srli	r2,r2,3
10106a08:	01c00044 	movi	r7,1
10106a0c:	21400117 	ldw	r5,4(r4)
10106a10:	10c00044 	addi	r3,r2,1
10106a14:	18c7883a 	add	r3,r3,r3
10106a18:	1005d0ba 	srai	r2,r2,2
10106a1c:	18c7883a 	add	r3,r3,r3
10106a20:	18c7883a 	add	r3,r3,r3
10106a24:	1907883a 	add	r3,r3,r4
10106a28:	3884983a 	sll	r2,r7,r2
10106a2c:	19c00017 	ldw	r7,0(r3)
10106a30:	1a3ffe04 	addi	r8,r3,-8
10106a34:	1144b03a 	or	r2,r2,r5
10106a38:	32000315 	stw	r8,12(r6)
10106a3c:	31c00215 	stw	r7,8(r6)
10106a40:	20800115 	stw	r2,4(r4)
10106a44:	19800015 	stw	r6,0(r3)
10106a48:	39800315 	stw	r6,12(r7)
10106a4c:	8809883a 	mov	r4,r17
10106a50:	dfc00217 	ldw	ra,8(sp)
10106a54:	dc400117 	ldw	r17,4(sp)
10106a58:	dc000017 	ldw	r16,0(sp)
10106a5c:	dec00304 	addi	sp,sp,12
10106a60:	010e9f81 	jmpi	1010e9f8 <__malloc_unlock>
10106a64:	f800283a 	ret
10106a68:	100ad27a 	srli	r5,r2,9
10106a6c:	00c00104 	movi	r3,4
10106a70:	19404a36 	bltu	r3,r5,10106b9c <_free_r+0x240>
10106a74:	100ad1ba 	srli	r5,r2,6
10106a78:	28c00e44 	addi	r3,r5,57
10106a7c:	18c7883a 	add	r3,r3,r3
10106a80:	29400e04 	addi	r5,r5,56
10106a84:	18c7883a 	add	r3,r3,r3
10106a88:	18c7883a 	add	r3,r3,r3
10106a8c:	1909883a 	add	r4,r3,r4
10106a90:	20c00017 	ldw	r3,0(r4)
10106a94:	01c40474 	movhi	r7,4113
10106a98:	213ffe04 	addi	r4,r4,-8
10106a9c:	39c5f504 	addi	r7,r7,6100
10106aa0:	20c04426 	beq	r4,r3,10106bb4 <_free_r+0x258>
10106aa4:	01ffff04 	movi	r7,-4
10106aa8:	19400117 	ldw	r5,4(r3)
10106aac:	29ca703a 	and	r5,r5,r7
10106ab0:	1140022e 	bgeu	r2,r5,10106abc <_free_r+0x160>
10106ab4:	18c00217 	ldw	r3,8(r3)
10106ab8:	20fffb1e 	bne	r4,r3,10106aa8 <__alt_data_end+0xfffe6aa8>
10106abc:	19000317 	ldw	r4,12(r3)
10106ac0:	31000315 	stw	r4,12(r6)
10106ac4:	30c00215 	stw	r3,8(r6)
10106ac8:	21800215 	stw	r6,8(r4)
10106acc:	19800315 	stw	r6,12(r3)
10106ad0:	003fde06 	br	10106a4c <__alt_data_end+0xfffe6a4c>
10106ad4:	29c00217 	ldw	r7,8(r5)
10106ad8:	10c5883a 	add	r2,r2,r3
10106adc:	00c40474 	movhi	r3,4113
10106ae0:	18c5f704 	addi	r3,r3,6108
10106ae4:	38c03b26 	beq	r7,r3,10106bd4 <_free_r+0x278>
10106ae8:	2a000317 	ldw	r8,12(r5)
10106aec:	11400054 	ori	r5,r2,1
10106af0:	3087883a 	add	r3,r6,r2
10106af4:	3a000315 	stw	r8,12(r7)
10106af8:	41c00215 	stw	r7,8(r8)
10106afc:	31400115 	stw	r5,4(r6)
10106b00:	18800015 	stw	r2,0(r3)
10106b04:	003fbd06 	br	101069fc <__alt_data_end+0xfffe69fc>
10106b08:	39c0004c 	andi	r7,r7,1
10106b0c:	10c5883a 	add	r2,r2,r3
10106b10:	3800071e 	bne	r7,zero,10106b30 <_free_r+0x1d4>
10106b14:	81fffe17 	ldw	r7,-8(r16)
10106b18:	31cdc83a 	sub	r6,r6,r7
10106b1c:	30c00317 	ldw	r3,12(r6)
10106b20:	31400217 	ldw	r5,8(r6)
10106b24:	11c5883a 	add	r2,r2,r7
10106b28:	28c00315 	stw	r3,12(r5)
10106b2c:	19400215 	stw	r5,8(r3)
10106b30:	10c00054 	ori	r3,r2,1
10106b34:	30c00115 	stw	r3,4(r6)
10106b38:	00c40474 	movhi	r3,4113
10106b3c:	18cba604 	addi	r3,r3,11928
10106b40:	18c00017 	ldw	r3,0(r3)
10106b44:	21800215 	stw	r6,8(r4)
10106b48:	10ffc036 	bltu	r2,r3,10106a4c <__alt_data_end+0xfffe6a4c>
10106b4c:	00840474 	movhi	r2,4113
10106b50:	1092a104 	addi	r2,r2,19076
10106b54:	11400017 	ldw	r5,0(r2)
10106b58:	8809883a 	mov	r4,r17
10106b5c:	01068380 	call	10106838 <_malloc_trim_r>
10106b60:	003fba06 	br	10106a4c <__alt_data_end+0xfffe6a4c>
10106b64:	28c9883a 	add	r4,r5,r3
10106b68:	21000117 	ldw	r4,4(r4)
10106b6c:	2100004c 	andi	r4,r4,1
10106b70:	2000391e 	bne	r4,zero,10106c58 <_free_r+0x2fc>
10106b74:	29c00217 	ldw	r7,8(r5)
10106b78:	29000317 	ldw	r4,12(r5)
10106b7c:	1885883a 	add	r2,r3,r2
10106b80:	10c00054 	ori	r3,r2,1
10106b84:	39000315 	stw	r4,12(r7)
10106b88:	21c00215 	stw	r7,8(r4)
10106b8c:	30c00115 	stw	r3,4(r6)
10106b90:	308d883a 	add	r6,r6,r2
10106b94:	30800015 	stw	r2,0(r6)
10106b98:	003fac06 	br	10106a4c <__alt_data_end+0xfffe6a4c>
10106b9c:	00c00504 	movi	r3,20
10106ba0:	19401536 	bltu	r3,r5,10106bf8 <_free_r+0x29c>
10106ba4:	28c01704 	addi	r3,r5,92
10106ba8:	18c7883a 	add	r3,r3,r3
10106bac:	294016c4 	addi	r5,r5,91
10106bb0:	003fb406 	br	10106a84 <__alt_data_end+0xfffe6a84>
10106bb4:	280bd0ba 	srai	r5,r5,2
10106bb8:	00c00044 	movi	r3,1
10106bbc:	38800117 	ldw	r2,4(r7)
10106bc0:	194a983a 	sll	r5,r3,r5
10106bc4:	2007883a 	mov	r3,r4
10106bc8:	2884b03a 	or	r2,r5,r2
10106bcc:	38800115 	stw	r2,4(r7)
10106bd0:	003fbb06 	br	10106ac0 <__alt_data_end+0xfffe6ac0>
10106bd4:	21800515 	stw	r6,20(r4)
10106bd8:	21800415 	stw	r6,16(r4)
10106bdc:	10c00054 	ori	r3,r2,1
10106be0:	31c00315 	stw	r7,12(r6)
10106be4:	31c00215 	stw	r7,8(r6)
10106be8:	30c00115 	stw	r3,4(r6)
10106bec:	308d883a 	add	r6,r6,r2
10106bf0:	30800015 	stw	r2,0(r6)
10106bf4:	003f9506 	br	10106a4c <__alt_data_end+0xfffe6a4c>
10106bf8:	00c01504 	movi	r3,84
10106bfc:	19400536 	bltu	r3,r5,10106c14 <_free_r+0x2b8>
10106c00:	100ad33a 	srli	r5,r2,12
10106c04:	28c01bc4 	addi	r3,r5,111
10106c08:	18c7883a 	add	r3,r3,r3
10106c0c:	29401b84 	addi	r5,r5,110
10106c10:	003f9c06 	br	10106a84 <__alt_data_end+0xfffe6a84>
10106c14:	00c05504 	movi	r3,340
10106c18:	19400536 	bltu	r3,r5,10106c30 <_free_r+0x2d4>
10106c1c:	100ad3fa 	srli	r5,r2,15
10106c20:	28c01e04 	addi	r3,r5,120
10106c24:	18c7883a 	add	r3,r3,r3
10106c28:	29401dc4 	addi	r5,r5,119
10106c2c:	003f9506 	br	10106a84 <__alt_data_end+0xfffe6a84>
10106c30:	00c15504 	movi	r3,1364
10106c34:	19400536 	bltu	r3,r5,10106c4c <_free_r+0x2f0>
10106c38:	100ad4ba 	srli	r5,r2,18
10106c3c:	28c01f44 	addi	r3,r5,125
10106c40:	18c7883a 	add	r3,r3,r3
10106c44:	29401f04 	addi	r5,r5,124
10106c48:	003f8e06 	br	10106a84 <__alt_data_end+0xfffe6a84>
10106c4c:	00c03f84 	movi	r3,254
10106c50:	01401f84 	movi	r5,126
10106c54:	003f8b06 	br	10106a84 <__alt_data_end+0xfffe6a84>
10106c58:	10c00054 	ori	r3,r2,1
10106c5c:	30c00115 	stw	r3,4(r6)
10106c60:	308d883a 	add	r6,r6,r2
10106c64:	30800015 	stw	r2,0(r6)
10106c68:	003f7806 	br	10106a4c <__alt_data_end+0xfffe6a4c>

10106c6c <_fwalk>:
10106c6c:	defff704 	addi	sp,sp,-36
10106c70:	dd000415 	stw	r20,16(sp)
10106c74:	dfc00815 	stw	ra,32(sp)
10106c78:	ddc00715 	stw	r23,28(sp)
10106c7c:	dd800615 	stw	r22,24(sp)
10106c80:	dd400515 	stw	r21,20(sp)
10106c84:	dcc00315 	stw	r19,12(sp)
10106c88:	dc800215 	stw	r18,8(sp)
10106c8c:	dc400115 	stw	r17,4(sp)
10106c90:	dc000015 	stw	r16,0(sp)
10106c94:	2500b804 	addi	r20,r4,736
10106c98:	a0002326 	beq	r20,zero,10106d28 <_fwalk+0xbc>
10106c9c:	282b883a 	mov	r21,r5
10106ca0:	002f883a 	mov	r23,zero
10106ca4:	05800044 	movi	r22,1
10106ca8:	04ffffc4 	movi	r19,-1
10106cac:	a4400117 	ldw	r17,4(r20)
10106cb0:	a4800217 	ldw	r18,8(r20)
10106cb4:	8c7fffc4 	addi	r17,r17,-1
10106cb8:	88000d16 	blt	r17,zero,10106cf0 <_fwalk+0x84>
10106cbc:	94000304 	addi	r16,r18,12
10106cc0:	94800384 	addi	r18,r18,14
10106cc4:	8080000b 	ldhu	r2,0(r16)
10106cc8:	8c7fffc4 	addi	r17,r17,-1
10106ccc:	813ffd04 	addi	r4,r16,-12
10106cd0:	b080042e 	bgeu	r22,r2,10106ce4 <_fwalk+0x78>
10106cd4:	9080000f 	ldh	r2,0(r18)
10106cd8:	14c00226 	beq	r2,r19,10106ce4 <_fwalk+0x78>
10106cdc:	a83ee83a 	callr	r21
10106ce0:	b8aeb03a 	or	r23,r23,r2
10106ce4:	84001a04 	addi	r16,r16,104
10106ce8:	94801a04 	addi	r18,r18,104
10106cec:	8cfff51e 	bne	r17,r19,10106cc4 <__alt_data_end+0xfffe6cc4>
10106cf0:	a5000017 	ldw	r20,0(r20)
10106cf4:	a03fed1e 	bne	r20,zero,10106cac <__alt_data_end+0xfffe6cac>
10106cf8:	b805883a 	mov	r2,r23
10106cfc:	dfc00817 	ldw	ra,32(sp)
10106d00:	ddc00717 	ldw	r23,28(sp)
10106d04:	dd800617 	ldw	r22,24(sp)
10106d08:	dd400517 	ldw	r21,20(sp)
10106d0c:	dd000417 	ldw	r20,16(sp)
10106d10:	dcc00317 	ldw	r19,12(sp)
10106d14:	dc800217 	ldw	r18,8(sp)
10106d18:	dc400117 	ldw	r17,4(sp)
10106d1c:	dc000017 	ldw	r16,0(sp)
10106d20:	dec00904 	addi	sp,sp,36
10106d24:	f800283a 	ret
10106d28:	002f883a 	mov	r23,zero
10106d2c:	003ff206 	br	10106cf8 <__alt_data_end+0xfffe6cf8>

10106d30 <_fwalk_reent>:
10106d30:	defff704 	addi	sp,sp,-36
10106d34:	dd000415 	stw	r20,16(sp)
10106d38:	dfc00815 	stw	ra,32(sp)
10106d3c:	ddc00715 	stw	r23,28(sp)
10106d40:	dd800615 	stw	r22,24(sp)
10106d44:	dd400515 	stw	r21,20(sp)
10106d48:	dcc00315 	stw	r19,12(sp)
10106d4c:	dc800215 	stw	r18,8(sp)
10106d50:	dc400115 	stw	r17,4(sp)
10106d54:	dc000015 	stw	r16,0(sp)
10106d58:	2500b804 	addi	r20,r4,736
10106d5c:	a0002326 	beq	r20,zero,10106dec <_fwalk_reent+0xbc>
10106d60:	282b883a 	mov	r21,r5
10106d64:	2027883a 	mov	r19,r4
10106d68:	002f883a 	mov	r23,zero
10106d6c:	05800044 	movi	r22,1
10106d70:	04bfffc4 	movi	r18,-1
10106d74:	a4400117 	ldw	r17,4(r20)
10106d78:	a4000217 	ldw	r16,8(r20)
10106d7c:	8c7fffc4 	addi	r17,r17,-1
10106d80:	88000c16 	blt	r17,zero,10106db4 <_fwalk_reent+0x84>
10106d84:	84000304 	addi	r16,r16,12
10106d88:	8080000b 	ldhu	r2,0(r16)
10106d8c:	8c7fffc4 	addi	r17,r17,-1
10106d90:	817ffd04 	addi	r5,r16,-12
10106d94:	b080052e 	bgeu	r22,r2,10106dac <_fwalk_reent+0x7c>
10106d98:	8080008f 	ldh	r2,2(r16)
10106d9c:	9809883a 	mov	r4,r19
10106da0:	14800226 	beq	r2,r18,10106dac <_fwalk_reent+0x7c>
10106da4:	a83ee83a 	callr	r21
10106da8:	b8aeb03a 	or	r23,r23,r2
10106dac:	84001a04 	addi	r16,r16,104
10106db0:	8cbff51e 	bne	r17,r18,10106d88 <__alt_data_end+0xfffe6d88>
10106db4:	a5000017 	ldw	r20,0(r20)
10106db8:	a03fee1e 	bne	r20,zero,10106d74 <__alt_data_end+0xfffe6d74>
10106dbc:	b805883a 	mov	r2,r23
10106dc0:	dfc00817 	ldw	ra,32(sp)
10106dc4:	ddc00717 	ldw	r23,28(sp)
10106dc8:	dd800617 	ldw	r22,24(sp)
10106dcc:	dd400517 	ldw	r21,20(sp)
10106dd0:	dd000417 	ldw	r20,16(sp)
10106dd4:	dcc00317 	ldw	r19,12(sp)
10106dd8:	dc800217 	ldw	r18,8(sp)
10106ddc:	dc400117 	ldw	r17,4(sp)
10106de0:	dc000017 	ldw	r16,0(sp)
10106de4:	dec00904 	addi	sp,sp,36
10106de8:	f800283a 	ret
10106dec:	002f883a 	mov	r23,zero
10106df0:	003ff206 	br	10106dbc <__alt_data_end+0xfffe6dbc>

10106df4 <_isatty_r>:
10106df4:	defffd04 	addi	sp,sp,-12
10106df8:	dc000015 	stw	r16,0(sp)
10106dfc:	04040474 	movhi	r16,4113
10106e00:	dc400115 	stw	r17,4(sp)
10106e04:	84129e04 	addi	r16,r16,19064
10106e08:	2023883a 	mov	r17,r4
10106e0c:	2809883a 	mov	r4,r5
10106e10:	dfc00215 	stw	ra,8(sp)
10106e14:	80000015 	stw	zero,0(r16)
10106e18:	010e54c0 	call	1010e54c <isatty>
10106e1c:	00ffffc4 	movi	r3,-1
10106e20:	10c00526 	beq	r2,r3,10106e38 <_isatty_r+0x44>
10106e24:	dfc00217 	ldw	ra,8(sp)
10106e28:	dc400117 	ldw	r17,4(sp)
10106e2c:	dc000017 	ldw	r16,0(sp)
10106e30:	dec00304 	addi	sp,sp,12
10106e34:	f800283a 	ret
10106e38:	80c00017 	ldw	r3,0(r16)
10106e3c:	183ff926 	beq	r3,zero,10106e24 <__alt_data_end+0xfffe6e24>
10106e40:	88c00015 	stw	r3,0(r17)
10106e44:	003ff706 	br	10106e24 <__alt_data_end+0xfffe6e24>

10106e48 <_setlocale_r>:
10106e48:	30001b26 	beq	r6,zero,10106eb8 <_setlocale_r+0x70>
10106e4c:	01440474 	movhi	r5,4113
10106e50:	defffe04 	addi	sp,sp,-8
10106e54:	29444804 	addi	r5,r5,4384
10106e58:	3009883a 	mov	r4,r6
10106e5c:	dc000015 	stw	r16,0(sp)
10106e60:	dfc00115 	stw	ra,4(sp)
10106e64:	3021883a 	mov	r16,r6
10106e68:	01085840 	call	10108584 <strcmp>
10106e6c:	1000061e 	bne	r2,zero,10106e88 <_setlocale_r+0x40>
10106e70:	00840474 	movhi	r2,4113
10106e74:	10842a04 	addi	r2,r2,4264
10106e78:	dfc00117 	ldw	ra,4(sp)
10106e7c:	dc000017 	ldw	r16,0(sp)
10106e80:	dec00204 	addi	sp,sp,8
10106e84:	f800283a 	ret
10106e88:	01440474 	movhi	r5,4113
10106e8c:	29442a04 	addi	r5,r5,4264
10106e90:	8009883a 	mov	r4,r16
10106e94:	01085840 	call	10108584 <strcmp>
10106e98:	103ff526 	beq	r2,zero,10106e70 <__alt_data_end+0xfffe6e70>
10106e9c:	01440474 	movhi	r5,4113
10106ea0:	29441d04 	addi	r5,r5,4212
10106ea4:	8009883a 	mov	r4,r16
10106ea8:	01085840 	call	10108584 <strcmp>
10106eac:	103ff026 	beq	r2,zero,10106e70 <__alt_data_end+0xfffe6e70>
10106eb0:	0005883a 	mov	r2,zero
10106eb4:	003ff006 	br	10106e78 <__alt_data_end+0xfffe6e78>
10106eb8:	00840474 	movhi	r2,4113
10106ebc:	10842a04 	addi	r2,r2,4264
10106ec0:	f800283a 	ret

10106ec4 <__locale_charset>:
10106ec4:	00840474 	movhi	r2,4113
10106ec8:	1086ff04 	addi	r2,r2,7164
10106ecc:	f800283a 	ret

10106ed0 <__locale_mb_cur_max>:
10106ed0:	00840474 	movhi	r2,4113
10106ed4:	108ba704 	addi	r2,r2,11932
10106ed8:	10800017 	ldw	r2,0(r2)
10106edc:	f800283a 	ret

10106ee0 <__locale_msgcharset>:
10106ee0:	00840474 	movhi	r2,4113
10106ee4:	1086f704 	addi	r2,r2,7132
10106ee8:	f800283a 	ret

10106eec <__locale_cjk_lang>:
10106eec:	0005883a 	mov	r2,zero
10106ef0:	f800283a 	ret

10106ef4 <_localeconv_r>:
10106ef4:	00840474 	movhi	r2,4113
10106ef8:	10870704 	addi	r2,r2,7196
10106efc:	f800283a 	ret

10106f00 <setlocale>:
10106f00:	00840474 	movhi	r2,4113
10106f04:	108ba404 	addi	r2,r2,11920
10106f08:	280d883a 	mov	r6,r5
10106f0c:	200b883a 	mov	r5,r4
10106f10:	11000017 	ldw	r4,0(r2)
10106f14:	0106e481 	jmpi	10106e48 <_setlocale_r>

10106f18 <localeconv>:
10106f18:	00840474 	movhi	r2,4113
10106f1c:	10870704 	addi	r2,r2,7196
10106f20:	f800283a 	ret

10106f24 <_lseek_r>:
10106f24:	defffd04 	addi	sp,sp,-12
10106f28:	2805883a 	mov	r2,r5
10106f2c:	dc000015 	stw	r16,0(sp)
10106f30:	04040474 	movhi	r16,4113
10106f34:	dc400115 	stw	r17,4(sp)
10106f38:	300b883a 	mov	r5,r6
10106f3c:	84129e04 	addi	r16,r16,19064
10106f40:	2023883a 	mov	r17,r4
10106f44:	380d883a 	mov	r6,r7
10106f48:	1009883a 	mov	r4,r2
10106f4c:	dfc00215 	stw	ra,8(sp)
10106f50:	80000015 	stw	zero,0(r16)
10106f54:	010e8840 	call	1010e884 <lseek>
10106f58:	00ffffc4 	movi	r3,-1
10106f5c:	10c00526 	beq	r2,r3,10106f74 <_lseek_r+0x50>
10106f60:	dfc00217 	ldw	ra,8(sp)
10106f64:	dc400117 	ldw	r17,4(sp)
10106f68:	dc000017 	ldw	r16,0(sp)
10106f6c:	dec00304 	addi	sp,sp,12
10106f70:	f800283a 	ret
10106f74:	80c00017 	ldw	r3,0(r16)
10106f78:	183ff926 	beq	r3,zero,10106f60 <__alt_data_end+0xfffe6f60>
10106f7c:	88c00015 	stw	r3,0(r17)
10106f80:	003ff706 	br	10106f60 <__alt_data_end+0xfffe6f60>

10106f84 <memchr>:
10106f84:	208000cc 	andi	r2,r4,3
10106f88:	280f883a 	mov	r7,r5
10106f8c:	10003426 	beq	r2,zero,10107060 <memchr+0xdc>
10106f90:	30bfffc4 	addi	r2,r6,-1
10106f94:	30001a26 	beq	r6,zero,10107000 <memchr+0x7c>
10106f98:	20c00003 	ldbu	r3,0(r4)
10106f9c:	29803fcc 	andi	r6,r5,255
10106fa0:	30c0051e 	bne	r6,r3,10106fb8 <memchr+0x34>
10106fa4:	00001806 	br	10107008 <memchr+0x84>
10106fa8:	10001526 	beq	r2,zero,10107000 <memchr+0x7c>
10106fac:	20c00003 	ldbu	r3,0(r4)
10106fb0:	10bfffc4 	addi	r2,r2,-1
10106fb4:	30c01426 	beq	r6,r3,10107008 <memchr+0x84>
10106fb8:	21000044 	addi	r4,r4,1
10106fbc:	20c000cc 	andi	r3,r4,3
10106fc0:	183ff91e 	bne	r3,zero,10106fa8 <__alt_data_end+0xfffe6fa8>
10106fc4:	020000c4 	movi	r8,3
10106fc8:	40801136 	bltu	r8,r2,10107010 <memchr+0x8c>
10106fcc:	10000c26 	beq	r2,zero,10107000 <memchr+0x7c>
10106fd0:	20c00003 	ldbu	r3,0(r4)
10106fd4:	29403fcc 	andi	r5,r5,255
10106fd8:	28c00b26 	beq	r5,r3,10107008 <memchr+0x84>
10106fdc:	20c00044 	addi	r3,r4,1
10106fe0:	39803fcc 	andi	r6,r7,255
10106fe4:	2089883a 	add	r4,r4,r2
10106fe8:	00000306 	br	10106ff8 <memchr+0x74>
10106fec:	18c00044 	addi	r3,r3,1
10106ff0:	197fffc3 	ldbu	r5,-1(r3)
10106ff4:	31400526 	beq	r6,r5,1010700c <memchr+0x88>
10106ff8:	1805883a 	mov	r2,r3
10106ffc:	20fffb1e 	bne	r4,r3,10106fec <__alt_data_end+0xfffe6fec>
10107000:	0005883a 	mov	r2,zero
10107004:	f800283a 	ret
10107008:	2005883a 	mov	r2,r4
1010700c:	f800283a 	ret
10107010:	28c03fcc 	andi	r3,r5,255
10107014:	1812923a 	slli	r9,r3,8
10107018:	02ffbff4 	movhi	r11,65279
1010701c:	02a02074 	movhi	r10,32897
10107020:	48d2b03a 	or	r9,r9,r3
10107024:	4806943a 	slli	r3,r9,16
10107028:	5affbfc4 	addi	r11,r11,-257
1010702c:	52a02004 	addi	r10,r10,-32640
10107030:	48d2b03a 	or	r9,r9,r3
10107034:	20c00017 	ldw	r3,0(r4)
10107038:	48c6f03a 	xor	r3,r9,r3
1010703c:	1acd883a 	add	r6,r3,r11
10107040:	00c6303a 	nor	r3,zero,r3
10107044:	30c6703a 	and	r3,r6,r3
10107048:	1a86703a 	and	r3,r3,r10
1010704c:	183fe01e 	bne	r3,zero,10106fd0 <__alt_data_end+0xfffe6fd0>
10107050:	10bfff04 	addi	r2,r2,-4
10107054:	21000104 	addi	r4,r4,4
10107058:	40bff636 	bltu	r8,r2,10107034 <__alt_data_end+0xfffe7034>
1010705c:	003fdb06 	br	10106fcc <__alt_data_end+0xfffe6fcc>
10107060:	3005883a 	mov	r2,r6
10107064:	003fd706 	br	10106fc4 <__alt_data_end+0xfffe6fc4>

10107068 <memcpy>:
10107068:	defffd04 	addi	sp,sp,-12
1010706c:	dfc00215 	stw	ra,8(sp)
10107070:	dc400115 	stw	r17,4(sp)
10107074:	dc000015 	stw	r16,0(sp)
10107078:	00c003c4 	movi	r3,15
1010707c:	2005883a 	mov	r2,r4
10107080:	1980452e 	bgeu	r3,r6,10107198 <memcpy+0x130>
10107084:	2906b03a 	or	r3,r5,r4
10107088:	18c000cc 	andi	r3,r3,3
1010708c:	1800441e 	bne	r3,zero,101071a0 <memcpy+0x138>
10107090:	347ffc04 	addi	r17,r6,-16
10107094:	8822d13a 	srli	r17,r17,4
10107098:	28c00104 	addi	r3,r5,4
1010709c:	23400104 	addi	r13,r4,4
101070a0:	8820913a 	slli	r16,r17,4
101070a4:	2b000204 	addi	r12,r5,8
101070a8:	22c00204 	addi	r11,r4,8
101070ac:	84000504 	addi	r16,r16,20
101070b0:	2a800304 	addi	r10,r5,12
101070b4:	22400304 	addi	r9,r4,12
101070b8:	2c21883a 	add	r16,r5,r16
101070bc:	2811883a 	mov	r8,r5
101070c0:	200f883a 	mov	r7,r4
101070c4:	41000017 	ldw	r4,0(r8)
101070c8:	1fc00017 	ldw	ra,0(r3)
101070cc:	63c00017 	ldw	r15,0(r12)
101070d0:	39000015 	stw	r4,0(r7)
101070d4:	53800017 	ldw	r14,0(r10)
101070d8:	6fc00015 	stw	ra,0(r13)
101070dc:	5bc00015 	stw	r15,0(r11)
101070e0:	4b800015 	stw	r14,0(r9)
101070e4:	18c00404 	addi	r3,r3,16
101070e8:	39c00404 	addi	r7,r7,16
101070ec:	42000404 	addi	r8,r8,16
101070f0:	6b400404 	addi	r13,r13,16
101070f4:	63000404 	addi	r12,r12,16
101070f8:	5ac00404 	addi	r11,r11,16
101070fc:	52800404 	addi	r10,r10,16
10107100:	4a400404 	addi	r9,r9,16
10107104:	1c3fef1e 	bne	r3,r16,101070c4 <__alt_data_end+0xfffe70c4>
10107108:	89c00044 	addi	r7,r17,1
1010710c:	380e913a 	slli	r7,r7,4
10107110:	310003cc 	andi	r4,r6,15
10107114:	02c000c4 	movi	r11,3
10107118:	11c7883a 	add	r3,r2,r7
1010711c:	29cb883a 	add	r5,r5,r7
10107120:	5900212e 	bgeu	r11,r4,101071a8 <memcpy+0x140>
10107124:	1813883a 	mov	r9,r3
10107128:	2811883a 	mov	r8,r5
1010712c:	200f883a 	mov	r7,r4
10107130:	42800017 	ldw	r10,0(r8)
10107134:	4a400104 	addi	r9,r9,4
10107138:	39ffff04 	addi	r7,r7,-4
1010713c:	4abfff15 	stw	r10,-4(r9)
10107140:	42000104 	addi	r8,r8,4
10107144:	59fffa36 	bltu	r11,r7,10107130 <__alt_data_end+0xfffe7130>
10107148:	213fff04 	addi	r4,r4,-4
1010714c:	2008d0ba 	srli	r4,r4,2
10107150:	318000cc 	andi	r6,r6,3
10107154:	21000044 	addi	r4,r4,1
10107158:	2109883a 	add	r4,r4,r4
1010715c:	2109883a 	add	r4,r4,r4
10107160:	1907883a 	add	r3,r3,r4
10107164:	290b883a 	add	r5,r5,r4
10107168:	30000626 	beq	r6,zero,10107184 <memcpy+0x11c>
1010716c:	198d883a 	add	r6,r3,r6
10107170:	29c00003 	ldbu	r7,0(r5)
10107174:	18c00044 	addi	r3,r3,1
10107178:	29400044 	addi	r5,r5,1
1010717c:	19ffffc5 	stb	r7,-1(r3)
10107180:	19bffb1e 	bne	r3,r6,10107170 <__alt_data_end+0xfffe7170>
10107184:	dfc00217 	ldw	ra,8(sp)
10107188:	dc400117 	ldw	r17,4(sp)
1010718c:	dc000017 	ldw	r16,0(sp)
10107190:	dec00304 	addi	sp,sp,12
10107194:	f800283a 	ret
10107198:	2007883a 	mov	r3,r4
1010719c:	003ff206 	br	10107168 <__alt_data_end+0xfffe7168>
101071a0:	2007883a 	mov	r3,r4
101071a4:	003ff106 	br	1010716c <__alt_data_end+0xfffe716c>
101071a8:	200d883a 	mov	r6,r4
101071ac:	003fee06 	br	10107168 <__alt_data_end+0xfffe7168>

101071b0 <_Balloc>:
101071b0:	20801317 	ldw	r2,76(r4)
101071b4:	defffc04 	addi	sp,sp,-16
101071b8:	dc400115 	stw	r17,4(sp)
101071bc:	dc000015 	stw	r16,0(sp)
101071c0:	dfc00315 	stw	ra,12(sp)
101071c4:	dc800215 	stw	r18,8(sp)
101071c8:	2023883a 	mov	r17,r4
101071cc:	2821883a 	mov	r16,r5
101071d0:	10000f26 	beq	r2,zero,10107210 <_Balloc+0x60>
101071d4:	8407883a 	add	r3,r16,r16
101071d8:	18c7883a 	add	r3,r3,r3
101071dc:	10c7883a 	add	r3,r2,r3
101071e0:	18800017 	ldw	r2,0(r3)
101071e4:	10001126 	beq	r2,zero,1010722c <_Balloc+0x7c>
101071e8:	11000017 	ldw	r4,0(r2)
101071ec:	19000015 	stw	r4,0(r3)
101071f0:	10000415 	stw	zero,16(r2)
101071f4:	10000315 	stw	zero,12(r2)
101071f8:	dfc00317 	ldw	ra,12(sp)
101071fc:	dc800217 	ldw	r18,8(sp)
10107200:	dc400117 	ldw	r17,4(sp)
10107204:	dc000017 	ldw	r16,0(sp)
10107208:	dec00404 	addi	sp,sp,16
1010720c:	f800283a 	ret
10107210:	01800844 	movi	r6,33
10107214:	01400104 	movi	r5,4
10107218:	0109d400 	call	10109d40 <_calloc_r>
1010721c:	88801315 	stw	r2,76(r17)
10107220:	103fec1e 	bne	r2,zero,101071d4 <__alt_data_end+0xfffe71d4>
10107224:	0005883a 	mov	r2,zero
10107228:	003ff306 	br	101071f8 <__alt_data_end+0xfffe71f8>
1010722c:	01400044 	movi	r5,1
10107230:	2c24983a 	sll	r18,r5,r16
10107234:	8809883a 	mov	r4,r17
10107238:	91800144 	addi	r6,r18,5
1010723c:	318d883a 	add	r6,r6,r6
10107240:	318d883a 	add	r6,r6,r6
10107244:	0109d400 	call	10109d40 <_calloc_r>
10107248:	103ff626 	beq	r2,zero,10107224 <__alt_data_end+0xfffe7224>
1010724c:	14000115 	stw	r16,4(r2)
10107250:	14800215 	stw	r18,8(r2)
10107254:	003fe606 	br	101071f0 <__alt_data_end+0xfffe71f0>

10107258 <_Bfree>:
10107258:	28000826 	beq	r5,zero,1010727c <_Bfree+0x24>
1010725c:	28c00117 	ldw	r3,4(r5)
10107260:	20801317 	ldw	r2,76(r4)
10107264:	18c7883a 	add	r3,r3,r3
10107268:	18c7883a 	add	r3,r3,r3
1010726c:	10c5883a 	add	r2,r2,r3
10107270:	10c00017 	ldw	r3,0(r2)
10107274:	28c00015 	stw	r3,0(r5)
10107278:	11400015 	stw	r5,0(r2)
1010727c:	f800283a 	ret

10107280 <__multadd>:
10107280:	defffa04 	addi	sp,sp,-24
10107284:	dc800315 	stw	r18,12(sp)
10107288:	dc400215 	stw	r17,8(sp)
1010728c:	dc000115 	stw	r16,4(sp)
10107290:	2823883a 	mov	r17,r5
10107294:	2c000417 	ldw	r16,16(r5)
10107298:	dfc00515 	stw	ra,20(sp)
1010729c:	dcc00415 	stw	r19,16(sp)
101072a0:	2025883a 	mov	r18,r4
101072a4:	29400504 	addi	r5,r5,20
101072a8:	0011883a 	mov	r8,zero
101072ac:	28c00017 	ldw	r3,0(r5)
101072b0:	29400104 	addi	r5,r5,4
101072b4:	42000044 	addi	r8,r8,1
101072b8:	18bfffcc 	andi	r2,r3,65535
101072bc:	1185383a 	mul	r2,r2,r6
101072c0:	1806d43a 	srli	r3,r3,16
101072c4:	11cf883a 	add	r7,r2,r7
101072c8:	3808d43a 	srli	r4,r7,16
101072cc:	1987383a 	mul	r3,r3,r6
101072d0:	38bfffcc 	andi	r2,r7,65535
101072d4:	1907883a 	add	r3,r3,r4
101072d8:	1808943a 	slli	r4,r3,16
101072dc:	180ed43a 	srli	r7,r3,16
101072e0:	2085883a 	add	r2,r4,r2
101072e4:	28bfff15 	stw	r2,-4(r5)
101072e8:	443ff016 	blt	r8,r16,101072ac <__alt_data_end+0xfffe72ac>
101072ec:	38000926 	beq	r7,zero,10107314 <__multadd+0x94>
101072f0:	88800217 	ldw	r2,8(r17)
101072f4:	80800f0e 	bge	r16,r2,10107334 <__multadd+0xb4>
101072f8:	80800144 	addi	r2,r16,5
101072fc:	1085883a 	add	r2,r2,r2
10107300:	1085883a 	add	r2,r2,r2
10107304:	8885883a 	add	r2,r17,r2
10107308:	11c00015 	stw	r7,0(r2)
1010730c:	84000044 	addi	r16,r16,1
10107310:	8c000415 	stw	r16,16(r17)
10107314:	8805883a 	mov	r2,r17
10107318:	dfc00517 	ldw	ra,20(sp)
1010731c:	dcc00417 	ldw	r19,16(sp)
10107320:	dc800317 	ldw	r18,12(sp)
10107324:	dc400217 	ldw	r17,8(sp)
10107328:	dc000117 	ldw	r16,4(sp)
1010732c:	dec00604 	addi	sp,sp,24
10107330:	f800283a 	ret
10107334:	89400117 	ldw	r5,4(r17)
10107338:	9009883a 	mov	r4,r18
1010733c:	d9c00015 	stw	r7,0(sp)
10107340:	29400044 	addi	r5,r5,1
10107344:	01071b00 	call	101071b0 <_Balloc>
10107348:	89800417 	ldw	r6,16(r17)
1010734c:	89400304 	addi	r5,r17,12
10107350:	11000304 	addi	r4,r2,12
10107354:	31800084 	addi	r6,r6,2
10107358:	318d883a 	add	r6,r6,r6
1010735c:	318d883a 	add	r6,r6,r6
10107360:	1027883a 	mov	r19,r2
10107364:	01070680 	call	10107068 <memcpy>
10107368:	d9c00017 	ldw	r7,0(sp)
1010736c:	88000a26 	beq	r17,zero,10107398 <__multadd+0x118>
10107370:	88c00117 	ldw	r3,4(r17)
10107374:	90801317 	ldw	r2,76(r18)
10107378:	18c7883a 	add	r3,r3,r3
1010737c:	18c7883a 	add	r3,r3,r3
10107380:	10c5883a 	add	r2,r2,r3
10107384:	10c00017 	ldw	r3,0(r2)
10107388:	88c00015 	stw	r3,0(r17)
1010738c:	14400015 	stw	r17,0(r2)
10107390:	9823883a 	mov	r17,r19
10107394:	003fd806 	br	101072f8 <__alt_data_end+0xfffe72f8>
10107398:	9823883a 	mov	r17,r19
1010739c:	003fd606 	br	101072f8 <__alt_data_end+0xfffe72f8>

101073a0 <__s2b>:
101073a0:	defff904 	addi	sp,sp,-28
101073a4:	dc400115 	stw	r17,4(sp)
101073a8:	dc000015 	stw	r16,0(sp)
101073ac:	2023883a 	mov	r17,r4
101073b0:	2821883a 	mov	r16,r5
101073b4:	39000204 	addi	r4,r7,8
101073b8:	01400244 	movi	r5,9
101073bc:	dcc00315 	stw	r19,12(sp)
101073c0:	dc800215 	stw	r18,8(sp)
101073c4:	dfc00615 	stw	ra,24(sp)
101073c8:	dd400515 	stw	r21,20(sp)
101073cc:	dd000415 	stw	r20,16(sp)
101073d0:	3825883a 	mov	r18,r7
101073d4:	3027883a 	mov	r19,r6
101073d8:	010ba7c0 	call	1010ba7c <__divsi3>
101073dc:	00c00044 	movi	r3,1
101073e0:	000b883a 	mov	r5,zero
101073e4:	1880030e 	bge	r3,r2,101073f4 <__s2b+0x54>
101073e8:	18c7883a 	add	r3,r3,r3
101073ec:	29400044 	addi	r5,r5,1
101073f0:	18bffd16 	blt	r3,r2,101073e8 <__alt_data_end+0xfffe73e8>
101073f4:	8809883a 	mov	r4,r17
101073f8:	01071b00 	call	101071b0 <_Balloc>
101073fc:	d8c00717 	ldw	r3,28(sp)
10107400:	10c00515 	stw	r3,20(r2)
10107404:	00c00044 	movi	r3,1
10107408:	10c00415 	stw	r3,16(r2)
1010740c:	00c00244 	movi	r3,9
10107410:	1cc0210e 	bge	r3,r19,10107498 <__s2b+0xf8>
10107414:	80eb883a 	add	r21,r16,r3
10107418:	a829883a 	mov	r20,r21
1010741c:	84e1883a 	add	r16,r16,r19
10107420:	a1c00007 	ldb	r7,0(r20)
10107424:	01800284 	movi	r6,10
10107428:	a5000044 	addi	r20,r20,1
1010742c:	100b883a 	mov	r5,r2
10107430:	39fff404 	addi	r7,r7,-48
10107434:	8809883a 	mov	r4,r17
10107438:	01072800 	call	10107280 <__multadd>
1010743c:	a43ff81e 	bne	r20,r16,10107420 <__alt_data_end+0xfffe7420>
10107440:	ace1883a 	add	r16,r21,r19
10107444:	843ffe04 	addi	r16,r16,-8
10107448:	9c800a0e 	bge	r19,r18,10107474 <__s2b+0xd4>
1010744c:	94e5c83a 	sub	r18,r18,r19
10107450:	84a5883a 	add	r18,r16,r18
10107454:	81c00007 	ldb	r7,0(r16)
10107458:	01800284 	movi	r6,10
1010745c:	84000044 	addi	r16,r16,1
10107460:	100b883a 	mov	r5,r2
10107464:	39fff404 	addi	r7,r7,-48
10107468:	8809883a 	mov	r4,r17
1010746c:	01072800 	call	10107280 <__multadd>
10107470:	84bff81e 	bne	r16,r18,10107454 <__alt_data_end+0xfffe7454>
10107474:	dfc00617 	ldw	ra,24(sp)
10107478:	dd400517 	ldw	r21,20(sp)
1010747c:	dd000417 	ldw	r20,16(sp)
10107480:	dcc00317 	ldw	r19,12(sp)
10107484:	dc800217 	ldw	r18,8(sp)
10107488:	dc400117 	ldw	r17,4(sp)
1010748c:	dc000017 	ldw	r16,0(sp)
10107490:	dec00704 	addi	sp,sp,28
10107494:	f800283a 	ret
10107498:	84000284 	addi	r16,r16,10
1010749c:	1827883a 	mov	r19,r3
101074a0:	003fe906 	br	10107448 <__alt_data_end+0xfffe7448>

101074a4 <__hi0bits>:
101074a4:	20bfffec 	andhi	r2,r4,65535
101074a8:	1000141e 	bne	r2,zero,101074fc <__hi0bits+0x58>
101074ac:	2008943a 	slli	r4,r4,16
101074b0:	00800404 	movi	r2,16
101074b4:	20ffc02c 	andhi	r3,r4,65280
101074b8:	1800021e 	bne	r3,zero,101074c4 <__hi0bits+0x20>
101074bc:	2008923a 	slli	r4,r4,8
101074c0:	10800204 	addi	r2,r2,8
101074c4:	20fc002c 	andhi	r3,r4,61440
101074c8:	1800021e 	bne	r3,zero,101074d4 <__hi0bits+0x30>
101074cc:	2008913a 	slli	r4,r4,4
101074d0:	10800104 	addi	r2,r2,4
101074d4:	20f0002c 	andhi	r3,r4,49152
101074d8:	1800031e 	bne	r3,zero,101074e8 <__hi0bits+0x44>
101074dc:	2109883a 	add	r4,r4,r4
101074e0:	10800084 	addi	r2,r2,2
101074e4:	2109883a 	add	r4,r4,r4
101074e8:	20000316 	blt	r4,zero,101074f8 <__hi0bits+0x54>
101074ec:	2110002c 	andhi	r4,r4,16384
101074f0:	2000041e 	bne	r4,zero,10107504 <__hi0bits+0x60>
101074f4:	00800804 	movi	r2,32
101074f8:	f800283a 	ret
101074fc:	0005883a 	mov	r2,zero
10107500:	003fec06 	br	101074b4 <__alt_data_end+0xfffe74b4>
10107504:	10800044 	addi	r2,r2,1
10107508:	f800283a 	ret

1010750c <__lo0bits>:
1010750c:	20c00017 	ldw	r3,0(r4)
10107510:	188001cc 	andi	r2,r3,7
10107514:	10000826 	beq	r2,zero,10107538 <__lo0bits+0x2c>
10107518:	1880004c 	andi	r2,r3,1
1010751c:	1000211e 	bne	r2,zero,101075a4 <__lo0bits+0x98>
10107520:	1880008c 	andi	r2,r3,2
10107524:	1000211e 	bne	r2,zero,101075ac <__lo0bits+0xa0>
10107528:	1806d0ba 	srli	r3,r3,2
1010752c:	00800084 	movi	r2,2
10107530:	20c00015 	stw	r3,0(r4)
10107534:	f800283a 	ret
10107538:	18bfffcc 	andi	r2,r3,65535
1010753c:	10001326 	beq	r2,zero,1010758c <__lo0bits+0x80>
10107540:	0005883a 	mov	r2,zero
10107544:	19403fcc 	andi	r5,r3,255
10107548:	2800021e 	bne	r5,zero,10107554 <__lo0bits+0x48>
1010754c:	1806d23a 	srli	r3,r3,8
10107550:	10800204 	addi	r2,r2,8
10107554:	194003cc 	andi	r5,r3,15
10107558:	2800021e 	bne	r5,zero,10107564 <__lo0bits+0x58>
1010755c:	1806d13a 	srli	r3,r3,4
10107560:	10800104 	addi	r2,r2,4
10107564:	194000cc 	andi	r5,r3,3
10107568:	2800021e 	bne	r5,zero,10107574 <__lo0bits+0x68>
1010756c:	1806d0ba 	srli	r3,r3,2
10107570:	10800084 	addi	r2,r2,2
10107574:	1940004c 	andi	r5,r3,1
10107578:	2800081e 	bne	r5,zero,1010759c <__lo0bits+0x90>
1010757c:	1806d07a 	srli	r3,r3,1
10107580:	1800051e 	bne	r3,zero,10107598 <__lo0bits+0x8c>
10107584:	00800804 	movi	r2,32
10107588:	f800283a 	ret
1010758c:	1806d43a 	srli	r3,r3,16
10107590:	00800404 	movi	r2,16
10107594:	003feb06 	br	10107544 <__alt_data_end+0xfffe7544>
10107598:	10800044 	addi	r2,r2,1
1010759c:	20c00015 	stw	r3,0(r4)
101075a0:	f800283a 	ret
101075a4:	0005883a 	mov	r2,zero
101075a8:	f800283a 	ret
101075ac:	1806d07a 	srli	r3,r3,1
101075b0:	00800044 	movi	r2,1
101075b4:	20c00015 	stw	r3,0(r4)
101075b8:	f800283a 	ret

101075bc <__i2b>:
101075bc:	defffd04 	addi	sp,sp,-12
101075c0:	dc000015 	stw	r16,0(sp)
101075c4:	04000044 	movi	r16,1
101075c8:	dc400115 	stw	r17,4(sp)
101075cc:	2823883a 	mov	r17,r5
101075d0:	800b883a 	mov	r5,r16
101075d4:	dfc00215 	stw	ra,8(sp)
101075d8:	01071b00 	call	101071b0 <_Balloc>
101075dc:	14400515 	stw	r17,20(r2)
101075e0:	14000415 	stw	r16,16(r2)
101075e4:	dfc00217 	ldw	ra,8(sp)
101075e8:	dc400117 	ldw	r17,4(sp)
101075ec:	dc000017 	ldw	r16,0(sp)
101075f0:	dec00304 	addi	sp,sp,12
101075f4:	f800283a 	ret

101075f8 <__multiply>:
101075f8:	defffa04 	addi	sp,sp,-24
101075fc:	dcc00315 	stw	r19,12(sp)
10107600:	dc800215 	stw	r18,8(sp)
10107604:	34c00417 	ldw	r19,16(r6)
10107608:	2c800417 	ldw	r18,16(r5)
1010760c:	dd000415 	stw	r20,16(sp)
10107610:	dc400115 	stw	r17,4(sp)
10107614:	dfc00515 	stw	ra,20(sp)
10107618:	dc000015 	stw	r16,0(sp)
1010761c:	2829883a 	mov	r20,r5
10107620:	3023883a 	mov	r17,r6
10107624:	94c0050e 	bge	r18,r19,1010763c <__multiply+0x44>
10107628:	9007883a 	mov	r3,r18
1010762c:	3029883a 	mov	r20,r6
10107630:	9825883a 	mov	r18,r19
10107634:	2823883a 	mov	r17,r5
10107638:	1827883a 	mov	r19,r3
1010763c:	a0800217 	ldw	r2,8(r20)
10107640:	94e1883a 	add	r16,r18,r19
10107644:	a1400117 	ldw	r5,4(r20)
10107648:	1400010e 	bge	r2,r16,10107650 <__multiply+0x58>
1010764c:	29400044 	addi	r5,r5,1
10107650:	01071b00 	call	101071b0 <_Balloc>
10107654:	8415883a 	add	r10,r16,r16
10107658:	12c00504 	addi	r11,r2,20
1010765c:	5295883a 	add	r10,r10,r10
10107660:	5a95883a 	add	r10,r11,r10
10107664:	5807883a 	mov	r3,r11
10107668:	5a80032e 	bgeu	r11,r10,10107678 <__multiply+0x80>
1010766c:	18000015 	stw	zero,0(r3)
10107670:	18c00104 	addi	r3,r3,4
10107674:	1abffd36 	bltu	r3,r10,1010766c <__alt_data_end+0xfffe766c>
10107678:	9ce7883a 	add	r19,r19,r19
1010767c:	94a5883a 	add	r18,r18,r18
10107680:	89800504 	addi	r6,r17,20
10107684:	9ce7883a 	add	r19,r19,r19
10107688:	a3400504 	addi	r13,r20,20
1010768c:	94a5883a 	add	r18,r18,r18
10107690:	34d9883a 	add	r12,r6,r19
10107694:	6c93883a 	add	r9,r13,r18
10107698:	3300422e 	bgeu	r6,r12,101077a4 <__multiply+0x1ac>
1010769c:	37c00017 	ldw	ra,0(r6)
101076a0:	fbffffcc 	andi	r15,ra,65535
101076a4:	78001b26 	beq	r15,zero,10107714 <__multiply+0x11c>
101076a8:	5811883a 	mov	r8,r11
101076ac:	681d883a 	mov	r14,r13
101076b0:	000f883a 	mov	r7,zero
101076b4:	71000017 	ldw	r4,0(r14)
101076b8:	40c00017 	ldw	r3,0(r8)
101076bc:	73800104 	addi	r14,r14,4
101076c0:	217fffcc 	andi	r5,r4,65535
101076c4:	2bcb383a 	mul	r5,r5,r15
101076c8:	2008d43a 	srli	r4,r4,16
101076cc:	1c7fffcc 	andi	r17,r3,65535
101076d0:	2c4b883a 	add	r5,r5,r17
101076d4:	29cb883a 	add	r5,r5,r7
101076d8:	23c9383a 	mul	r4,r4,r15
101076dc:	1806d43a 	srli	r3,r3,16
101076e0:	280ed43a 	srli	r7,r5,16
101076e4:	297fffcc 	andi	r5,r5,65535
101076e8:	20c7883a 	add	r3,r4,r3
101076ec:	19c7883a 	add	r3,r3,r7
101076f0:	1808943a 	slli	r4,r3,16
101076f4:	4023883a 	mov	r17,r8
101076f8:	180ed43a 	srli	r7,r3,16
101076fc:	214ab03a 	or	r5,r4,r5
10107700:	41400015 	stw	r5,0(r8)
10107704:	42000104 	addi	r8,r8,4
10107708:	727fea36 	bltu	r14,r9,101076b4 <__alt_data_end+0xfffe76b4>
1010770c:	89c00115 	stw	r7,4(r17)
10107710:	37c00017 	ldw	ra,0(r6)
10107714:	f83ed43a 	srli	ra,ra,16
10107718:	f8001f26 	beq	ra,zero,10107798 <__multiply+0x1a0>
1010771c:	58c00017 	ldw	r3,0(r11)
10107720:	681d883a 	mov	r14,r13
10107724:	581f883a 	mov	r15,r11
10107728:	1811883a 	mov	r8,r3
1010772c:	5825883a 	mov	r18,r11
10107730:	000f883a 	mov	r7,zero
10107734:	00000106 	br	1010773c <__multiply+0x144>
10107738:	8825883a 	mov	r18,r17
1010773c:	7140000b 	ldhu	r5,0(r14)
10107740:	4010d43a 	srli	r8,r8,16
10107744:	193fffcc 	andi	r4,r3,65535
10107748:	2fcb383a 	mul	r5,r5,ra
1010774c:	7bc00104 	addi	r15,r15,4
10107750:	73800104 	addi	r14,r14,4
10107754:	2a0b883a 	add	r5,r5,r8
10107758:	29cb883a 	add	r5,r5,r7
1010775c:	2806943a 	slli	r3,r5,16
10107760:	94400104 	addi	r17,r18,4
10107764:	280ad43a 	srli	r5,r5,16
10107768:	1908b03a 	or	r4,r3,r4
1010776c:	793fff15 	stw	r4,-4(r15)
10107770:	70ffff17 	ldw	r3,-4(r14)
10107774:	8a000017 	ldw	r8,0(r17)
10107778:	1806d43a 	srli	r3,r3,16
1010777c:	413fffcc 	andi	r4,r8,65535
10107780:	1fc7383a 	mul	r3,r3,ra
10107784:	1907883a 	add	r3,r3,r4
10107788:	1947883a 	add	r3,r3,r5
1010778c:	180ed43a 	srli	r7,r3,16
10107790:	727fe936 	bltu	r14,r9,10107738 <__alt_data_end+0xfffe7738>
10107794:	90c00115 	stw	r3,4(r18)
10107798:	31800104 	addi	r6,r6,4
1010779c:	5ac00104 	addi	r11,r11,4
101077a0:	333fbe36 	bltu	r6,r12,1010769c <__alt_data_end+0xfffe769c>
101077a4:	0400090e 	bge	zero,r16,101077cc <__multiply+0x1d4>
101077a8:	50ffff17 	ldw	r3,-4(r10)
101077ac:	52bfff04 	addi	r10,r10,-4
101077b0:	18000326 	beq	r3,zero,101077c0 <__multiply+0x1c8>
101077b4:	00000506 	br	101077cc <__multiply+0x1d4>
101077b8:	50c00017 	ldw	r3,0(r10)
101077bc:	1800031e 	bne	r3,zero,101077cc <__multiply+0x1d4>
101077c0:	843fffc4 	addi	r16,r16,-1
101077c4:	52bfff04 	addi	r10,r10,-4
101077c8:	803ffb1e 	bne	r16,zero,101077b8 <__alt_data_end+0xfffe77b8>
101077cc:	14000415 	stw	r16,16(r2)
101077d0:	dfc00517 	ldw	ra,20(sp)
101077d4:	dd000417 	ldw	r20,16(sp)
101077d8:	dcc00317 	ldw	r19,12(sp)
101077dc:	dc800217 	ldw	r18,8(sp)
101077e0:	dc400117 	ldw	r17,4(sp)
101077e4:	dc000017 	ldw	r16,0(sp)
101077e8:	dec00604 	addi	sp,sp,24
101077ec:	f800283a 	ret

101077f0 <__pow5mult>:
101077f0:	defffa04 	addi	sp,sp,-24
101077f4:	dcc00315 	stw	r19,12(sp)
101077f8:	dc000015 	stw	r16,0(sp)
101077fc:	dfc00515 	stw	ra,20(sp)
10107800:	dd000415 	stw	r20,16(sp)
10107804:	dc800215 	stw	r18,8(sp)
10107808:	dc400115 	stw	r17,4(sp)
1010780c:	308000cc 	andi	r2,r6,3
10107810:	3021883a 	mov	r16,r6
10107814:	2027883a 	mov	r19,r4
10107818:	10002f1e 	bne	r2,zero,101078d8 <__pow5mult+0xe8>
1010781c:	2825883a 	mov	r18,r5
10107820:	8021d0ba 	srai	r16,r16,2
10107824:	80001a26 	beq	r16,zero,10107890 <__pow5mult+0xa0>
10107828:	9c401217 	ldw	r17,72(r19)
1010782c:	8800061e 	bne	r17,zero,10107848 <__pow5mult+0x58>
10107830:	00003406 	br	10107904 <__pow5mult+0x114>
10107834:	8021d07a 	srai	r16,r16,1
10107838:	80001526 	beq	r16,zero,10107890 <__pow5mult+0xa0>
1010783c:	88800017 	ldw	r2,0(r17)
10107840:	10001c26 	beq	r2,zero,101078b4 <__pow5mult+0xc4>
10107844:	1023883a 	mov	r17,r2
10107848:	8080004c 	andi	r2,r16,1
1010784c:	103ff926 	beq	r2,zero,10107834 <__alt_data_end+0xfffe7834>
10107850:	880d883a 	mov	r6,r17
10107854:	900b883a 	mov	r5,r18
10107858:	9809883a 	mov	r4,r19
1010785c:	01075f80 	call	101075f8 <__multiply>
10107860:	90001b26 	beq	r18,zero,101078d0 <__pow5mult+0xe0>
10107864:	91000117 	ldw	r4,4(r18)
10107868:	98c01317 	ldw	r3,76(r19)
1010786c:	8021d07a 	srai	r16,r16,1
10107870:	2109883a 	add	r4,r4,r4
10107874:	2109883a 	add	r4,r4,r4
10107878:	1907883a 	add	r3,r3,r4
1010787c:	19000017 	ldw	r4,0(r3)
10107880:	91000015 	stw	r4,0(r18)
10107884:	1c800015 	stw	r18,0(r3)
10107888:	1025883a 	mov	r18,r2
1010788c:	803feb1e 	bne	r16,zero,1010783c <__alt_data_end+0xfffe783c>
10107890:	9005883a 	mov	r2,r18
10107894:	dfc00517 	ldw	ra,20(sp)
10107898:	dd000417 	ldw	r20,16(sp)
1010789c:	dcc00317 	ldw	r19,12(sp)
101078a0:	dc800217 	ldw	r18,8(sp)
101078a4:	dc400117 	ldw	r17,4(sp)
101078a8:	dc000017 	ldw	r16,0(sp)
101078ac:	dec00604 	addi	sp,sp,24
101078b0:	f800283a 	ret
101078b4:	880d883a 	mov	r6,r17
101078b8:	880b883a 	mov	r5,r17
101078bc:	9809883a 	mov	r4,r19
101078c0:	01075f80 	call	101075f8 <__multiply>
101078c4:	88800015 	stw	r2,0(r17)
101078c8:	10000015 	stw	zero,0(r2)
101078cc:	003fdd06 	br	10107844 <__alt_data_end+0xfffe7844>
101078d0:	1025883a 	mov	r18,r2
101078d4:	003fd706 	br	10107834 <__alt_data_end+0xfffe7834>
101078d8:	10bfffc4 	addi	r2,r2,-1
101078dc:	1085883a 	add	r2,r2,r2
101078e0:	00c40474 	movhi	r3,4113
101078e4:	18c44b04 	addi	r3,r3,4396
101078e8:	1085883a 	add	r2,r2,r2
101078ec:	1885883a 	add	r2,r3,r2
101078f0:	11800017 	ldw	r6,0(r2)
101078f4:	000f883a 	mov	r7,zero
101078f8:	01072800 	call	10107280 <__multadd>
101078fc:	1025883a 	mov	r18,r2
10107900:	003fc706 	br	10107820 <__alt_data_end+0xfffe7820>
10107904:	05000044 	movi	r20,1
10107908:	a00b883a 	mov	r5,r20
1010790c:	9809883a 	mov	r4,r19
10107910:	01071b00 	call	101071b0 <_Balloc>
10107914:	1023883a 	mov	r17,r2
10107918:	00809c44 	movi	r2,625
1010791c:	88800515 	stw	r2,20(r17)
10107920:	8d000415 	stw	r20,16(r17)
10107924:	9c401215 	stw	r17,72(r19)
10107928:	88000015 	stw	zero,0(r17)
1010792c:	003fc606 	br	10107848 <__alt_data_end+0xfffe7848>

10107930 <__lshift>:
10107930:	defff904 	addi	sp,sp,-28
10107934:	dd400515 	stw	r21,20(sp)
10107938:	dcc00315 	stw	r19,12(sp)
1010793c:	302bd17a 	srai	r21,r6,5
10107940:	2cc00417 	ldw	r19,16(r5)
10107944:	28800217 	ldw	r2,8(r5)
10107948:	dd000415 	stw	r20,16(sp)
1010794c:	ace7883a 	add	r19,r21,r19
10107950:	dc800215 	stw	r18,8(sp)
10107954:	dc400115 	stw	r17,4(sp)
10107958:	dc000015 	stw	r16,0(sp)
1010795c:	dfc00615 	stw	ra,24(sp)
10107960:	9c000044 	addi	r16,r19,1
10107964:	2823883a 	mov	r17,r5
10107968:	3029883a 	mov	r20,r6
1010796c:	2025883a 	mov	r18,r4
10107970:	29400117 	ldw	r5,4(r5)
10107974:	1400030e 	bge	r2,r16,10107984 <__lshift+0x54>
10107978:	1085883a 	add	r2,r2,r2
1010797c:	29400044 	addi	r5,r5,1
10107980:	143ffd16 	blt	r2,r16,10107978 <__alt_data_end+0xfffe7978>
10107984:	9009883a 	mov	r4,r18
10107988:	01071b00 	call	101071b0 <_Balloc>
1010798c:	10c00504 	addi	r3,r2,20
10107990:	0540070e 	bge	zero,r21,101079b0 <__lshift+0x80>
10107994:	ad6b883a 	add	r21,r21,r21
10107998:	ad6b883a 	add	r21,r21,r21
1010799c:	1809883a 	mov	r4,r3
101079a0:	1d47883a 	add	r3,r3,r21
101079a4:	20000015 	stw	zero,0(r4)
101079a8:	21000104 	addi	r4,r4,4
101079ac:	193ffd1e 	bne	r3,r4,101079a4 <__alt_data_end+0xfffe79a4>
101079b0:	8a000417 	ldw	r8,16(r17)
101079b4:	89000504 	addi	r4,r17,20
101079b8:	a18007cc 	andi	r6,r20,31
101079bc:	4211883a 	add	r8,r8,r8
101079c0:	4211883a 	add	r8,r8,r8
101079c4:	2211883a 	add	r8,r4,r8
101079c8:	30002326 	beq	r6,zero,10107a58 <__lshift+0x128>
101079cc:	02400804 	movi	r9,32
101079d0:	4993c83a 	sub	r9,r9,r6
101079d4:	000b883a 	mov	r5,zero
101079d8:	21c00017 	ldw	r7,0(r4)
101079dc:	1815883a 	mov	r10,r3
101079e0:	18c00104 	addi	r3,r3,4
101079e4:	398e983a 	sll	r7,r7,r6
101079e8:	21000104 	addi	r4,r4,4
101079ec:	394ab03a 	or	r5,r7,r5
101079f0:	197fff15 	stw	r5,-4(r3)
101079f4:	217fff17 	ldw	r5,-4(r4)
101079f8:	2a4ad83a 	srl	r5,r5,r9
101079fc:	223ff636 	bltu	r4,r8,101079d8 <__alt_data_end+0xfffe79d8>
10107a00:	51400115 	stw	r5,4(r10)
10107a04:	28001a1e 	bne	r5,zero,10107a70 <__lshift+0x140>
10107a08:	843fffc4 	addi	r16,r16,-1
10107a0c:	14000415 	stw	r16,16(r2)
10107a10:	88000826 	beq	r17,zero,10107a34 <__lshift+0x104>
10107a14:	89000117 	ldw	r4,4(r17)
10107a18:	90c01317 	ldw	r3,76(r18)
10107a1c:	2109883a 	add	r4,r4,r4
10107a20:	2109883a 	add	r4,r4,r4
10107a24:	1907883a 	add	r3,r3,r4
10107a28:	19000017 	ldw	r4,0(r3)
10107a2c:	89000015 	stw	r4,0(r17)
10107a30:	1c400015 	stw	r17,0(r3)
10107a34:	dfc00617 	ldw	ra,24(sp)
10107a38:	dd400517 	ldw	r21,20(sp)
10107a3c:	dd000417 	ldw	r20,16(sp)
10107a40:	dcc00317 	ldw	r19,12(sp)
10107a44:	dc800217 	ldw	r18,8(sp)
10107a48:	dc400117 	ldw	r17,4(sp)
10107a4c:	dc000017 	ldw	r16,0(sp)
10107a50:	dec00704 	addi	sp,sp,28
10107a54:	f800283a 	ret
10107a58:	21400017 	ldw	r5,0(r4)
10107a5c:	18c00104 	addi	r3,r3,4
10107a60:	21000104 	addi	r4,r4,4
10107a64:	197fff15 	stw	r5,-4(r3)
10107a68:	223ffb36 	bltu	r4,r8,10107a58 <__alt_data_end+0xfffe7a58>
10107a6c:	003fe606 	br	10107a08 <__alt_data_end+0xfffe7a08>
10107a70:	9c000084 	addi	r16,r19,2
10107a74:	003fe406 	br	10107a08 <__alt_data_end+0xfffe7a08>

10107a78 <__mcmp>:
10107a78:	20800417 	ldw	r2,16(r4)
10107a7c:	28c00417 	ldw	r3,16(r5)
10107a80:	10c5c83a 	sub	r2,r2,r3
10107a84:	1000111e 	bne	r2,zero,10107acc <__mcmp+0x54>
10107a88:	18c7883a 	add	r3,r3,r3
10107a8c:	18c7883a 	add	r3,r3,r3
10107a90:	21000504 	addi	r4,r4,20
10107a94:	29400504 	addi	r5,r5,20
10107a98:	20c5883a 	add	r2,r4,r3
10107a9c:	28cb883a 	add	r5,r5,r3
10107aa0:	00000106 	br	10107aa8 <__mcmp+0x30>
10107aa4:	20800a2e 	bgeu	r4,r2,10107ad0 <__mcmp+0x58>
10107aa8:	10bfff04 	addi	r2,r2,-4
10107aac:	297fff04 	addi	r5,r5,-4
10107ab0:	11800017 	ldw	r6,0(r2)
10107ab4:	28c00017 	ldw	r3,0(r5)
10107ab8:	30fffa26 	beq	r6,r3,10107aa4 <__alt_data_end+0xfffe7aa4>
10107abc:	30c00236 	bltu	r6,r3,10107ac8 <__mcmp+0x50>
10107ac0:	00800044 	movi	r2,1
10107ac4:	f800283a 	ret
10107ac8:	00bfffc4 	movi	r2,-1
10107acc:	f800283a 	ret
10107ad0:	0005883a 	mov	r2,zero
10107ad4:	f800283a 	ret

10107ad8 <__mdiff>:
10107ad8:	28c00417 	ldw	r3,16(r5)
10107adc:	30800417 	ldw	r2,16(r6)
10107ae0:	defffa04 	addi	sp,sp,-24
10107ae4:	dcc00315 	stw	r19,12(sp)
10107ae8:	dc800215 	stw	r18,8(sp)
10107aec:	dfc00515 	stw	ra,20(sp)
10107af0:	dd000415 	stw	r20,16(sp)
10107af4:	dc400115 	stw	r17,4(sp)
10107af8:	dc000015 	stw	r16,0(sp)
10107afc:	1887c83a 	sub	r3,r3,r2
10107b00:	2825883a 	mov	r18,r5
10107b04:	3027883a 	mov	r19,r6
10107b08:	1800141e 	bne	r3,zero,10107b5c <__mdiff+0x84>
10107b0c:	1085883a 	add	r2,r2,r2
10107b10:	1085883a 	add	r2,r2,r2
10107b14:	2a000504 	addi	r8,r5,20
10107b18:	34000504 	addi	r16,r6,20
10107b1c:	4087883a 	add	r3,r8,r2
10107b20:	8085883a 	add	r2,r16,r2
10107b24:	00000106 	br	10107b2c <__mdiff+0x54>
10107b28:	40c0592e 	bgeu	r8,r3,10107c90 <__mdiff+0x1b8>
10107b2c:	18ffff04 	addi	r3,r3,-4
10107b30:	10bfff04 	addi	r2,r2,-4
10107b34:	19c00017 	ldw	r7,0(r3)
10107b38:	11400017 	ldw	r5,0(r2)
10107b3c:	397ffa26 	beq	r7,r5,10107b28 <__alt_data_end+0xfffe7b28>
10107b40:	3940592e 	bgeu	r7,r5,10107ca8 <__mdiff+0x1d0>
10107b44:	9005883a 	mov	r2,r18
10107b48:	4023883a 	mov	r17,r8
10107b4c:	9825883a 	mov	r18,r19
10107b50:	05000044 	movi	r20,1
10107b54:	1027883a 	mov	r19,r2
10107b58:	00000406 	br	10107b6c <__mdiff+0x94>
10107b5c:	18005616 	blt	r3,zero,10107cb8 <__mdiff+0x1e0>
10107b60:	34400504 	addi	r17,r6,20
10107b64:	2c000504 	addi	r16,r5,20
10107b68:	0029883a 	mov	r20,zero
10107b6c:	91400117 	ldw	r5,4(r18)
10107b70:	01071b00 	call	101071b0 <_Balloc>
10107b74:	92400417 	ldw	r9,16(r18)
10107b78:	9b000417 	ldw	r12,16(r19)
10107b7c:	12c00504 	addi	r11,r2,20
10107b80:	4a51883a 	add	r8,r9,r9
10107b84:	6319883a 	add	r12,r12,r12
10107b88:	4211883a 	add	r8,r8,r8
10107b8c:	6319883a 	add	r12,r12,r12
10107b90:	15000315 	stw	r20,12(r2)
10107b94:	8211883a 	add	r8,r16,r8
10107b98:	8b19883a 	add	r12,r17,r12
10107b9c:	0007883a 	mov	r3,zero
10107ba0:	81400017 	ldw	r5,0(r16)
10107ba4:	89c00017 	ldw	r7,0(r17)
10107ba8:	59800104 	addi	r6,r11,4
10107bac:	293fffcc 	andi	r4,r5,65535
10107bb0:	20c7883a 	add	r3,r4,r3
10107bb4:	393fffcc 	andi	r4,r7,65535
10107bb8:	1909c83a 	sub	r4,r3,r4
10107bbc:	280ad43a 	srli	r5,r5,16
10107bc0:	380ed43a 	srli	r7,r7,16
10107bc4:	2007d43a 	srai	r3,r4,16
10107bc8:	213fffcc 	andi	r4,r4,65535
10107bcc:	29cbc83a 	sub	r5,r5,r7
10107bd0:	28c7883a 	add	r3,r5,r3
10107bd4:	180a943a 	slli	r5,r3,16
10107bd8:	8c400104 	addi	r17,r17,4
10107bdc:	84000104 	addi	r16,r16,4
10107be0:	2908b03a 	or	r4,r5,r4
10107be4:	59000015 	stw	r4,0(r11)
10107be8:	1807d43a 	srai	r3,r3,16
10107bec:	3015883a 	mov	r10,r6
10107bf0:	3017883a 	mov	r11,r6
10107bf4:	8b3fea36 	bltu	r17,r12,10107ba0 <__alt_data_end+0xfffe7ba0>
10107bf8:	8200162e 	bgeu	r16,r8,10107c54 <__mdiff+0x17c>
10107bfc:	8017883a 	mov	r11,r16
10107c00:	59400017 	ldw	r5,0(r11)
10107c04:	31800104 	addi	r6,r6,4
10107c08:	5ac00104 	addi	r11,r11,4
10107c0c:	293fffcc 	andi	r4,r5,65535
10107c10:	20c7883a 	add	r3,r4,r3
10107c14:	280ed43a 	srli	r7,r5,16
10107c18:	180bd43a 	srai	r5,r3,16
10107c1c:	193fffcc 	andi	r4,r3,65535
10107c20:	3947883a 	add	r3,r7,r5
10107c24:	180a943a 	slli	r5,r3,16
10107c28:	1807d43a 	srai	r3,r3,16
10107c2c:	2908b03a 	or	r4,r5,r4
10107c30:	313fff15 	stw	r4,-4(r6)
10107c34:	5a3ff236 	bltu	r11,r8,10107c00 <__alt_data_end+0xfffe7c00>
10107c38:	0406303a 	nor	r3,zero,r16
10107c3c:	1a07883a 	add	r3,r3,r8
10107c40:	1806d0ba 	srli	r3,r3,2
10107c44:	18c00044 	addi	r3,r3,1
10107c48:	18c7883a 	add	r3,r3,r3
10107c4c:	18c7883a 	add	r3,r3,r3
10107c50:	50d5883a 	add	r10,r10,r3
10107c54:	50ffff04 	addi	r3,r10,-4
10107c58:	2000041e 	bne	r4,zero,10107c6c <__mdiff+0x194>
10107c5c:	18ffff04 	addi	r3,r3,-4
10107c60:	19000017 	ldw	r4,0(r3)
10107c64:	4a7fffc4 	addi	r9,r9,-1
10107c68:	203ffc26 	beq	r4,zero,10107c5c <__alt_data_end+0xfffe7c5c>
10107c6c:	12400415 	stw	r9,16(r2)
10107c70:	dfc00517 	ldw	ra,20(sp)
10107c74:	dd000417 	ldw	r20,16(sp)
10107c78:	dcc00317 	ldw	r19,12(sp)
10107c7c:	dc800217 	ldw	r18,8(sp)
10107c80:	dc400117 	ldw	r17,4(sp)
10107c84:	dc000017 	ldw	r16,0(sp)
10107c88:	dec00604 	addi	sp,sp,24
10107c8c:	f800283a 	ret
10107c90:	000b883a 	mov	r5,zero
10107c94:	01071b00 	call	101071b0 <_Balloc>
10107c98:	00c00044 	movi	r3,1
10107c9c:	10c00415 	stw	r3,16(r2)
10107ca0:	10000515 	stw	zero,20(r2)
10107ca4:	003ff206 	br	10107c70 <__alt_data_end+0xfffe7c70>
10107ca8:	8023883a 	mov	r17,r16
10107cac:	0029883a 	mov	r20,zero
10107cb0:	4021883a 	mov	r16,r8
10107cb4:	003fad06 	br	10107b6c <__alt_data_end+0xfffe7b6c>
10107cb8:	9005883a 	mov	r2,r18
10107cbc:	94400504 	addi	r17,r18,20
10107cc0:	9c000504 	addi	r16,r19,20
10107cc4:	9825883a 	mov	r18,r19
10107cc8:	05000044 	movi	r20,1
10107ccc:	1027883a 	mov	r19,r2
10107cd0:	003fa606 	br	10107b6c <__alt_data_end+0xfffe7b6c>

10107cd4 <__ulp>:
10107cd4:	295ffc2c 	andhi	r5,r5,32752
10107cd8:	00bf3034 	movhi	r2,64704
10107cdc:	2887883a 	add	r3,r5,r2
10107ce0:	00c0020e 	bge	zero,r3,10107cec <__ulp+0x18>
10107ce4:	0005883a 	mov	r2,zero
10107ce8:	f800283a 	ret
10107cec:	00c7c83a 	sub	r3,zero,r3
10107cf0:	1807d53a 	srai	r3,r3,20
10107cf4:	008004c4 	movi	r2,19
10107cf8:	10c00b0e 	bge	r2,r3,10107d28 <__ulp+0x54>
10107cfc:	18bffb04 	addi	r2,r3,-20
10107d00:	01000784 	movi	r4,30
10107d04:	0007883a 	mov	r3,zero
10107d08:	20800516 	blt	r4,r2,10107d20 <__ulp+0x4c>
10107d0c:	010007c4 	movi	r4,31
10107d10:	2089c83a 	sub	r4,r4,r2
10107d14:	00800044 	movi	r2,1
10107d18:	1104983a 	sll	r2,r2,r4
10107d1c:	f800283a 	ret
10107d20:	00800044 	movi	r2,1
10107d24:	f800283a 	ret
10107d28:	01400234 	movhi	r5,8
10107d2c:	28c7d83a 	sra	r3,r5,r3
10107d30:	0005883a 	mov	r2,zero
10107d34:	f800283a 	ret

10107d38 <__b2d>:
10107d38:	defffa04 	addi	sp,sp,-24
10107d3c:	dc000015 	stw	r16,0(sp)
10107d40:	24000417 	ldw	r16,16(r4)
10107d44:	dc400115 	stw	r17,4(sp)
10107d48:	24400504 	addi	r17,r4,20
10107d4c:	8421883a 	add	r16,r16,r16
10107d50:	8421883a 	add	r16,r16,r16
10107d54:	8c21883a 	add	r16,r17,r16
10107d58:	dc800215 	stw	r18,8(sp)
10107d5c:	84bfff17 	ldw	r18,-4(r16)
10107d60:	dd000415 	stw	r20,16(sp)
10107d64:	dcc00315 	stw	r19,12(sp)
10107d68:	9009883a 	mov	r4,r18
10107d6c:	2829883a 	mov	r20,r5
10107d70:	dfc00515 	stw	ra,20(sp)
10107d74:	01074a40 	call	101074a4 <__hi0bits>
10107d78:	00c00804 	movi	r3,32
10107d7c:	1889c83a 	sub	r4,r3,r2
10107d80:	a1000015 	stw	r4,0(r20)
10107d84:	01000284 	movi	r4,10
10107d88:	84ffff04 	addi	r19,r16,-4
10107d8c:	20801216 	blt	r4,r2,10107dd8 <__b2d+0xa0>
10107d90:	018002c4 	movi	r6,11
10107d94:	308dc83a 	sub	r6,r6,r2
10107d98:	9186d83a 	srl	r3,r18,r6
10107d9c:	18cffc34 	orhi	r3,r3,16368
10107da0:	8cc0212e 	bgeu	r17,r19,10107e28 <__b2d+0xf0>
10107da4:	813ffe17 	ldw	r4,-8(r16)
10107da8:	218cd83a 	srl	r6,r4,r6
10107dac:	10800544 	addi	r2,r2,21
10107db0:	9084983a 	sll	r2,r18,r2
10107db4:	1184b03a 	or	r2,r2,r6
10107db8:	dfc00517 	ldw	ra,20(sp)
10107dbc:	dd000417 	ldw	r20,16(sp)
10107dc0:	dcc00317 	ldw	r19,12(sp)
10107dc4:	dc800217 	ldw	r18,8(sp)
10107dc8:	dc400117 	ldw	r17,4(sp)
10107dcc:	dc000017 	ldw	r16,0(sp)
10107dd0:	dec00604 	addi	sp,sp,24
10107dd4:	f800283a 	ret
10107dd8:	8cc00f2e 	bgeu	r17,r19,10107e18 <__b2d+0xe0>
10107ddc:	117ffd44 	addi	r5,r2,-11
10107de0:	80bffe17 	ldw	r2,-8(r16)
10107de4:	28000e26 	beq	r5,zero,10107e20 <__b2d+0xe8>
10107de8:	1949c83a 	sub	r4,r3,r5
10107dec:	9164983a 	sll	r18,r18,r5
10107df0:	1106d83a 	srl	r3,r2,r4
10107df4:	81bffe04 	addi	r6,r16,-8
10107df8:	948ffc34 	orhi	r18,r18,16368
10107dfc:	90c6b03a 	or	r3,r18,r3
10107e00:	89800e2e 	bgeu	r17,r6,10107e3c <__b2d+0x104>
10107e04:	81bffd17 	ldw	r6,-12(r16)
10107e08:	1144983a 	sll	r2,r2,r5
10107e0c:	310ad83a 	srl	r5,r6,r4
10107e10:	2884b03a 	or	r2,r5,r2
10107e14:	003fe806 	br	10107db8 <__alt_data_end+0xfffe7db8>
10107e18:	10bffd44 	addi	r2,r2,-11
10107e1c:	1000041e 	bne	r2,zero,10107e30 <__b2d+0xf8>
10107e20:	90cffc34 	orhi	r3,r18,16368
10107e24:	003fe406 	br	10107db8 <__alt_data_end+0xfffe7db8>
10107e28:	000d883a 	mov	r6,zero
10107e2c:	003fdf06 	br	10107dac <__alt_data_end+0xfffe7dac>
10107e30:	90a4983a 	sll	r18,r18,r2
10107e34:	0005883a 	mov	r2,zero
10107e38:	003ff906 	br	10107e20 <__alt_data_end+0xfffe7e20>
10107e3c:	1144983a 	sll	r2,r2,r5
10107e40:	003fdd06 	br	10107db8 <__alt_data_end+0xfffe7db8>

10107e44 <__d2b>:
10107e44:	defff804 	addi	sp,sp,-32
10107e48:	dc000215 	stw	r16,8(sp)
10107e4c:	3021883a 	mov	r16,r6
10107e50:	dc400315 	stw	r17,12(sp)
10107e54:	8022907a 	slli	r17,r16,1
10107e58:	dd000615 	stw	r20,24(sp)
10107e5c:	2829883a 	mov	r20,r5
10107e60:	01400044 	movi	r5,1
10107e64:	dcc00515 	stw	r19,20(sp)
10107e68:	dc800415 	stw	r18,16(sp)
10107e6c:	dfc00715 	stw	ra,28(sp)
10107e70:	3825883a 	mov	r18,r7
10107e74:	8822d57a 	srli	r17,r17,21
10107e78:	01071b00 	call	101071b0 <_Balloc>
10107e7c:	1027883a 	mov	r19,r2
10107e80:	00800434 	movhi	r2,16
10107e84:	10bfffc4 	addi	r2,r2,-1
10107e88:	808c703a 	and	r6,r16,r2
10107e8c:	88000126 	beq	r17,zero,10107e94 <__d2b+0x50>
10107e90:	31800434 	orhi	r6,r6,16
10107e94:	d9800015 	stw	r6,0(sp)
10107e98:	a0002426 	beq	r20,zero,10107f2c <__d2b+0xe8>
10107e9c:	d9000104 	addi	r4,sp,4
10107ea0:	dd000115 	stw	r20,4(sp)
10107ea4:	010750c0 	call	1010750c <__lo0bits>
10107ea8:	d8c00017 	ldw	r3,0(sp)
10107eac:	10002f1e 	bne	r2,zero,10107f6c <__d2b+0x128>
10107eb0:	d9000117 	ldw	r4,4(sp)
10107eb4:	99000515 	stw	r4,20(r19)
10107eb8:	1821003a 	cmpeq	r16,r3,zero
10107ebc:	01000084 	movi	r4,2
10107ec0:	2421c83a 	sub	r16,r4,r16
10107ec4:	98c00615 	stw	r3,24(r19)
10107ec8:	9c000415 	stw	r16,16(r19)
10107ecc:	88001f1e 	bne	r17,zero,10107f4c <__d2b+0x108>
10107ed0:	10bef384 	addi	r2,r2,-1074
10107ed4:	90800015 	stw	r2,0(r18)
10107ed8:	00900034 	movhi	r2,16384
10107edc:	10bfffc4 	addi	r2,r2,-1
10107ee0:	8085883a 	add	r2,r16,r2
10107ee4:	1085883a 	add	r2,r2,r2
10107ee8:	1085883a 	add	r2,r2,r2
10107eec:	9885883a 	add	r2,r19,r2
10107ef0:	11000517 	ldw	r4,20(r2)
10107ef4:	8020917a 	slli	r16,r16,5
10107ef8:	01074a40 	call	101074a4 <__hi0bits>
10107efc:	d8c00817 	ldw	r3,32(sp)
10107f00:	8085c83a 	sub	r2,r16,r2
10107f04:	18800015 	stw	r2,0(r3)
10107f08:	9805883a 	mov	r2,r19
10107f0c:	dfc00717 	ldw	ra,28(sp)
10107f10:	dd000617 	ldw	r20,24(sp)
10107f14:	dcc00517 	ldw	r19,20(sp)
10107f18:	dc800417 	ldw	r18,16(sp)
10107f1c:	dc400317 	ldw	r17,12(sp)
10107f20:	dc000217 	ldw	r16,8(sp)
10107f24:	dec00804 	addi	sp,sp,32
10107f28:	f800283a 	ret
10107f2c:	d809883a 	mov	r4,sp
10107f30:	010750c0 	call	1010750c <__lo0bits>
10107f34:	d8c00017 	ldw	r3,0(sp)
10107f38:	04000044 	movi	r16,1
10107f3c:	9c000415 	stw	r16,16(r19)
10107f40:	98c00515 	stw	r3,20(r19)
10107f44:	10800804 	addi	r2,r2,32
10107f48:	883fe126 	beq	r17,zero,10107ed0 <__alt_data_end+0xfffe7ed0>
10107f4c:	00c00d44 	movi	r3,53
10107f50:	8c7ef344 	addi	r17,r17,-1075
10107f54:	88a3883a 	add	r17,r17,r2
10107f58:	1885c83a 	sub	r2,r3,r2
10107f5c:	d8c00817 	ldw	r3,32(sp)
10107f60:	94400015 	stw	r17,0(r18)
10107f64:	18800015 	stw	r2,0(r3)
10107f68:	003fe706 	br	10107f08 <__alt_data_end+0xfffe7f08>
10107f6c:	01000804 	movi	r4,32
10107f70:	2089c83a 	sub	r4,r4,r2
10107f74:	1908983a 	sll	r4,r3,r4
10107f78:	d9400117 	ldw	r5,4(sp)
10107f7c:	1886d83a 	srl	r3,r3,r2
10107f80:	2148b03a 	or	r4,r4,r5
10107f84:	99000515 	stw	r4,20(r19)
10107f88:	d8c00015 	stw	r3,0(sp)
10107f8c:	003fca06 	br	10107eb8 <__alt_data_end+0xfffe7eb8>

10107f90 <__ratio>:
10107f90:	defff904 	addi	sp,sp,-28
10107f94:	dc400315 	stw	r17,12(sp)
10107f98:	2823883a 	mov	r17,r5
10107f9c:	d9400104 	addi	r5,sp,4
10107fa0:	dfc00615 	stw	ra,24(sp)
10107fa4:	dcc00515 	stw	r19,20(sp)
10107fa8:	dc800415 	stw	r18,16(sp)
10107fac:	2027883a 	mov	r19,r4
10107fb0:	dc000215 	stw	r16,8(sp)
10107fb4:	0107d380 	call	10107d38 <__b2d>
10107fb8:	d80b883a 	mov	r5,sp
10107fbc:	8809883a 	mov	r4,r17
10107fc0:	1025883a 	mov	r18,r2
10107fc4:	1821883a 	mov	r16,r3
10107fc8:	0107d380 	call	10107d38 <__b2d>
10107fcc:	8a000417 	ldw	r8,16(r17)
10107fd0:	99000417 	ldw	r4,16(r19)
10107fd4:	d9400117 	ldw	r5,4(sp)
10107fd8:	2209c83a 	sub	r4,r4,r8
10107fdc:	2010917a 	slli	r8,r4,5
10107fe0:	d9000017 	ldw	r4,0(sp)
10107fe4:	2909c83a 	sub	r4,r5,r4
10107fe8:	4109883a 	add	r4,r8,r4
10107fec:	01000e0e 	bge	zero,r4,10108028 <__ratio+0x98>
10107ff0:	2008953a 	slli	r4,r4,20
10107ff4:	2421883a 	add	r16,r4,r16
10107ff8:	100d883a 	mov	r6,r2
10107ffc:	180f883a 	mov	r7,r3
10108000:	9009883a 	mov	r4,r18
10108004:	800b883a 	mov	r5,r16
10108008:	010c4dc0 	call	1010c4dc <__divdf3>
1010800c:	dfc00617 	ldw	ra,24(sp)
10108010:	dcc00517 	ldw	r19,20(sp)
10108014:	dc800417 	ldw	r18,16(sp)
10108018:	dc400317 	ldw	r17,12(sp)
1010801c:	dc000217 	ldw	r16,8(sp)
10108020:	dec00704 	addi	sp,sp,28
10108024:	f800283a 	ret
10108028:	2008953a 	slli	r4,r4,20
1010802c:	1907c83a 	sub	r3,r3,r4
10108030:	003ff106 	br	10107ff8 <__alt_data_end+0xfffe7ff8>

10108034 <_mprec_log10>:
10108034:	defffe04 	addi	sp,sp,-8
10108038:	dc000015 	stw	r16,0(sp)
1010803c:	dfc00115 	stw	ra,4(sp)
10108040:	008005c4 	movi	r2,23
10108044:	2021883a 	mov	r16,r4
10108048:	11000d0e 	bge	r2,r4,10108080 <_mprec_log10+0x4c>
1010804c:	0005883a 	mov	r2,zero
10108050:	00cffc34 	movhi	r3,16368
10108054:	843fffc4 	addi	r16,r16,-1
10108058:	000d883a 	mov	r6,zero
1010805c:	01d00934 	movhi	r7,16420
10108060:	1009883a 	mov	r4,r2
10108064:	180b883a 	mov	r5,r3
10108068:	010d01c0 	call	1010d01c <__muldf3>
1010806c:	803ff91e 	bne	r16,zero,10108054 <__alt_data_end+0xfffe8054>
10108070:	dfc00117 	ldw	ra,4(sp)
10108074:	dc000017 	ldw	r16,0(sp)
10108078:	dec00204 	addi	sp,sp,8
1010807c:	f800283a 	ret
10108080:	202090fa 	slli	r16,r4,3
10108084:	00840474 	movhi	r2,4113
10108088:	10846204 	addi	r2,r2,4488
1010808c:	1421883a 	add	r16,r2,r16
10108090:	80800017 	ldw	r2,0(r16)
10108094:	80c00117 	ldw	r3,4(r16)
10108098:	dfc00117 	ldw	ra,4(sp)
1010809c:	dc000017 	ldw	r16,0(sp)
101080a0:	dec00204 	addi	sp,sp,8
101080a4:	f800283a 	ret

101080a8 <__copybits>:
101080a8:	297fffc4 	addi	r5,r5,-1
101080ac:	280fd17a 	srai	r7,r5,5
101080b0:	30c00417 	ldw	r3,16(r6)
101080b4:	30800504 	addi	r2,r6,20
101080b8:	39c00044 	addi	r7,r7,1
101080bc:	18c7883a 	add	r3,r3,r3
101080c0:	39cf883a 	add	r7,r7,r7
101080c4:	18c7883a 	add	r3,r3,r3
101080c8:	39cf883a 	add	r7,r7,r7
101080cc:	10c7883a 	add	r3,r2,r3
101080d0:	21cf883a 	add	r7,r4,r7
101080d4:	10c00d2e 	bgeu	r2,r3,1010810c <__copybits+0x64>
101080d8:	200b883a 	mov	r5,r4
101080dc:	12000017 	ldw	r8,0(r2)
101080e0:	29400104 	addi	r5,r5,4
101080e4:	10800104 	addi	r2,r2,4
101080e8:	2a3fff15 	stw	r8,-4(r5)
101080ec:	10fffb36 	bltu	r2,r3,101080dc <__alt_data_end+0xfffe80dc>
101080f0:	1985c83a 	sub	r2,r3,r6
101080f4:	10bffac4 	addi	r2,r2,-21
101080f8:	1004d0ba 	srli	r2,r2,2
101080fc:	10800044 	addi	r2,r2,1
10108100:	1085883a 	add	r2,r2,r2
10108104:	1085883a 	add	r2,r2,r2
10108108:	2089883a 	add	r4,r4,r2
1010810c:	21c0032e 	bgeu	r4,r7,1010811c <__copybits+0x74>
10108110:	20000015 	stw	zero,0(r4)
10108114:	21000104 	addi	r4,r4,4
10108118:	21fffd36 	bltu	r4,r7,10108110 <__alt_data_end+0xfffe8110>
1010811c:	f800283a 	ret

10108120 <__any_on>:
10108120:	20c00417 	ldw	r3,16(r4)
10108124:	2805d17a 	srai	r2,r5,5
10108128:	21000504 	addi	r4,r4,20
1010812c:	18800d0e 	bge	r3,r2,10108164 <__any_on+0x44>
10108130:	18c7883a 	add	r3,r3,r3
10108134:	18c7883a 	add	r3,r3,r3
10108138:	20c7883a 	add	r3,r4,r3
1010813c:	20c0192e 	bgeu	r4,r3,101081a4 <__any_on+0x84>
10108140:	18bfff17 	ldw	r2,-4(r3)
10108144:	18ffff04 	addi	r3,r3,-4
10108148:	1000041e 	bne	r2,zero,1010815c <__any_on+0x3c>
1010814c:	20c0142e 	bgeu	r4,r3,101081a0 <__any_on+0x80>
10108150:	18ffff04 	addi	r3,r3,-4
10108154:	19400017 	ldw	r5,0(r3)
10108158:	283ffc26 	beq	r5,zero,1010814c <__alt_data_end+0xfffe814c>
1010815c:	00800044 	movi	r2,1
10108160:	f800283a 	ret
10108164:	10c00a0e 	bge	r2,r3,10108190 <__any_on+0x70>
10108168:	1085883a 	add	r2,r2,r2
1010816c:	1085883a 	add	r2,r2,r2
10108170:	294007cc 	andi	r5,r5,31
10108174:	2087883a 	add	r3,r4,r2
10108178:	283ff026 	beq	r5,zero,1010813c <__alt_data_end+0xfffe813c>
1010817c:	19800017 	ldw	r6,0(r3)
10108180:	3144d83a 	srl	r2,r6,r5
10108184:	114a983a 	sll	r5,r2,r5
10108188:	317ff41e 	bne	r6,r5,1010815c <__alt_data_end+0xfffe815c>
1010818c:	003feb06 	br	1010813c <__alt_data_end+0xfffe813c>
10108190:	1085883a 	add	r2,r2,r2
10108194:	1085883a 	add	r2,r2,r2
10108198:	2087883a 	add	r3,r4,r2
1010819c:	003fe706 	br	1010813c <__alt_data_end+0xfffe813c>
101081a0:	f800283a 	ret
101081a4:	0005883a 	mov	r2,zero
101081a8:	f800283a 	ret

101081ac <_read_r>:
101081ac:	defffd04 	addi	sp,sp,-12
101081b0:	2805883a 	mov	r2,r5
101081b4:	dc000015 	stw	r16,0(sp)
101081b8:	04040474 	movhi	r16,4113
101081bc:	dc400115 	stw	r17,4(sp)
101081c0:	300b883a 	mov	r5,r6
101081c4:	84129e04 	addi	r16,r16,19064
101081c8:	2023883a 	mov	r17,r4
101081cc:	380d883a 	mov	r6,r7
101081d0:	1009883a 	mov	r4,r2
101081d4:	dfc00215 	stw	ra,8(sp)
101081d8:	80000015 	stw	zero,0(r16)
101081dc:	010ecac0 	call	1010ecac <read>
101081e0:	00ffffc4 	movi	r3,-1
101081e4:	10c00526 	beq	r2,r3,101081fc <_read_r+0x50>
101081e8:	dfc00217 	ldw	ra,8(sp)
101081ec:	dc400117 	ldw	r17,4(sp)
101081f0:	dc000017 	ldw	r16,0(sp)
101081f4:	dec00304 	addi	sp,sp,12
101081f8:	f800283a 	ret
101081fc:	80c00017 	ldw	r3,0(r16)
10108200:	183ff926 	beq	r3,zero,101081e8 <__alt_data_end+0xfffe81e8>
10108204:	88c00015 	stw	r3,0(r17)
10108208:	003ff706 	br	101081e8 <__alt_data_end+0xfffe81e8>

1010820c <__fpclassifyd>:
1010820c:	00a00034 	movhi	r2,32768
10108210:	10bfffc4 	addi	r2,r2,-1
10108214:	2884703a 	and	r2,r5,r2
10108218:	10000726 	beq	r2,zero,10108238 <__fpclassifyd+0x2c>
1010821c:	00fffc34 	movhi	r3,65520
10108220:	019ff834 	movhi	r6,32736
10108224:	28c7883a 	add	r3,r5,r3
10108228:	31bfffc4 	addi	r6,r6,-1
1010822c:	30c00536 	bltu	r6,r3,10108244 <__fpclassifyd+0x38>
10108230:	00800104 	movi	r2,4
10108234:	f800283a 	ret
10108238:	2000021e 	bne	r4,zero,10108244 <__fpclassifyd+0x38>
1010823c:	00800084 	movi	r2,2
10108240:	f800283a 	ret
10108244:	00dffc34 	movhi	r3,32752
10108248:	019ff834 	movhi	r6,32736
1010824c:	28cb883a 	add	r5,r5,r3
10108250:	31bfffc4 	addi	r6,r6,-1
10108254:	317ff62e 	bgeu	r6,r5,10108230 <__alt_data_end+0xfffe8230>
10108258:	01400434 	movhi	r5,16
1010825c:	297fffc4 	addi	r5,r5,-1
10108260:	28800236 	bltu	r5,r2,1010826c <__fpclassifyd+0x60>
10108264:	008000c4 	movi	r2,3
10108268:	f800283a 	ret
1010826c:	10c00226 	beq	r2,r3,10108278 <__fpclassifyd+0x6c>
10108270:	0005883a 	mov	r2,zero
10108274:	f800283a 	ret
10108278:	2005003a 	cmpeq	r2,r4,zero
1010827c:	f800283a 	ret

10108280 <_init_signal_r>:
10108280:	2080b717 	ldw	r2,732(r4)
10108284:	10000226 	beq	r2,zero,10108290 <_init_signal_r+0x10>
10108288:	0005883a 	mov	r2,zero
1010828c:	f800283a 	ret
10108290:	defffe04 	addi	sp,sp,-8
10108294:	01402004 	movi	r5,128
10108298:	dc000015 	stw	r16,0(sp)
1010829c:	dfc00115 	stw	ra,4(sp)
101082a0:	2021883a 	mov	r16,r4
101082a4:	01016340 	call	10101634 <_malloc_r>
101082a8:	8080b715 	stw	r2,732(r16)
101082ac:	10000d26 	beq	r2,zero,101082e4 <_init_signal_r+0x64>
101082b0:	0007883a 	mov	r3,zero
101082b4:	01002004 	movi	r4,128
101082b8:	00000106 	br	101082c0 <_init_signal_r+0x40>
101082bc:	8080b717 	ldw	r2,732(r16)
101082c0:	10c5883a 	add	r2,r2,r3
101082c4:	10000015 	stw	zero,0(r2)
101082c8:	18c00104 	addi	r3,r3,4
101082cc:	193ffb1e 	bne	r3,r4,101082bc <__alt_data_end+0xfffe82bc>
101082d0:	0005883a 	mov	r2,zero
101082d4:	dfc00117 	ldw	ra,4(sp)
101082d8:	dc000017 	ldw	r16,0(sp)
101082dc:	dec00204 	addi	sp,sp,8
101082e0:	f800283a 	ret
101082e4:	00bfffc4 	movi	r2,-1
101082e8:	003ffa06 	br	101082d4 <__alt_data_end+0xfffe82d4>

101082ec <_signal_r>:
101082ec:	00c007c4 	movi	r3,31
101082f0:	19401536 	bltu	r3,r5,10108348 <_signal_r+0x5c>
101082f4:	2080b717 	ldw	r2,732(r4)
101082f8:	defffc04 	addi	sp,sp,-16
101082fc:	dc800215 	stw	r18,8(sp)
10108300:	dc400115 	stw	r17,4(sp)
10108304:	dc000015 	stw	r16,0(sp)
10108308:	dfc00315 	stw	ra,12(sp)
1010830c:	3023883a 	mov	r17,r6
10108310:	2021883a 	mov	r16,r4
10108314:	2825883a 	mov	r18,r5
10108318:	10000f26 	beq	r2,zero,10108358 <_signal_r+0x6c>
1010831c:	948b883a 	add	r5,r18,r18
10108320:	294b883a 	add	r5,r5,r5
10108324:	114b883a 	add	r5,r2,r5
10108328:	28800017 	ldw	r2,0(r5)
1010832c:	2c400015 	stw	r17,0(r5)
10108330:	dfc00317 	ldw	ra,12(sp)
10108334:	dc800217 	ldw	r18,8(sp)
10108338:	dc400117 	ldw	r17,4(sp)
1010833c:	dc000017 	ldw	r16,0(sp)
10108340:	dec00404 	addi	sp,sp,16
10108344:	f800283a 	ret
10108348:	00c00584 	movi	r3,22
1010834c:	20c00015 	stw	r3,0(r4)
10108350:	00bfffc4 	movi	r2,-1
10108354:	f800283a 	ret
10108358:	01082800 	call	10108280 <_init_signal_r>
1010835c:	1000021e 	bne	r2,zero,10108368 <_signal_r+0x7c>
10108360:	8080b717 	ldw	r2,732(r16)
10108364:	003fed06 	br	1010831c <__alt_data_end+0xfffe831c>
10108368:	00bfffc4 	movi	r2,-1
1010836c:	003ff006 	br	10108330 <__alt_data_end+0xfffe8330>

10108370 <_raise_r>:
10108370:	008007c4 	movi	r2,31
10108374:	11402936 	bltu	r2,r5,1010841c <_raise_r+0xac>
10108378:	20c0b717 	ldw	r3,732(r4)
1010837c:	defffd04 	addi	sp,sp,-12
10108380:	dc400115 	stw	r17,4(sp)
10108384:	dc000015 	stw	r16,0(sp)
10108388:	dfc00215 	stw	ra,8(sp)
1010838c:	2021883a 	mov	r16,r4
10108390:	2823883a 	mov	r17,r5
10108394:	18001726 	beq	r3,zero,101083f4 <_raise_r+0x84>
10108398:	2945883a 	add	r2,r5,r5
1010839c:	1085883a 	add	r2,r2,r2
101083a0:	1887883a 	add	r3,r3,r2
101083a4:	19800017 	ldw	r6,0(r3)
101083a8:	30001226 	beq	r6,zero,101083f4 <_raise_r+0x84>
101083ac:	00800044 	movi	r2,1
101083b0:	30800e26 	beq	r6,r2,101083ec <_raise_r+0x7c>
101083b4:	013fffc4 	movi	r4,-1
101083b8:	31000926 	beq	r6,r4,101083e0 <_raise_r+0x70>
101083bc:	18000015 	stw	zero,0(r3)
101083c0:	2809883a 	mov	r4,r5
101083c4:	303ee83a 	callr	r6
101083c8:	0005883a 	mov	r2,zero
101083cc:	dfc00217 	ldw	ra,8(sp)
101083d0:	dc400117 	ldw	r17,4(sp)
101083d4:	dc000017 	ldw	r16,0(sp)
101083d8:	dec00304 	addi	sp,sp,12
101083dc:	f800283a 	ret
101083e0:	00c00584 	movi	r3,22
101083e4:	80c00015 	stw	r3,0(r16)
101083e8:	003ff806 	br	101083cc <__alt_data_end+0xfffe83cc>
101083ec:	0005883a 	mov	r2,zero
101083f0:	003ff606 	br	101083cc <__alt_data_end+0xfffe83cc>
101083f4:	8009883a 	mov	r4,r16
101083f8:	01085800 	call	10108580 <_getpid_r>
101083fc:	880d883a 	mov	r6,r17
10108400:	100b883a 	mov	r5,r2
10108404:	8009883a 	mov	r4,r16
10108408:	dfc00217 	ldw	ra,8(sp)
1010840c:	dc400117 	ldw	r17,4(sp)
10108410:	dc000017 	ldw	r16,0(sp)
10108414:	dec00304 	addi	sp,sp,12
10108418:	01085241 	jmpi	10108524 <_kill_r>
1010841c:	00800584 	movi	r2,22
10108420:	20800015 	stw	r2,0(r4)
10108424:	00bfffc4 	movi	r2,-1
10108428:	f800283a 	ret

1010842c <__sigtramp_r>:
1010842c:	008007c4 	movi	r2,31
10108430:	11402436 	bltu	r2,r5,101084c4 <__sigtramp_r+0x98>
10108434:	20c0b717 	ldw	r3,732(r4)
10108438:	defffd04 	addi	sp,sp,-12
1010843c:	dc400115 	stw	r17,4(sp)
10108440:	dc000015 	stw	r16,0(sp)
10108444:	dfc00215 	stw	ra,8(sp)
10108448:	2021883a 	mov	r16,r4
1010844c:	2823883a 	mov	r17,r5
10108450:	18001826 	beq	r3,zero,101084b4 <__sigtramp_r+0x88>
10108454:	8c45883a 	add	r2,r17,r17
10108458:	1085883a 	add	r2,r2,r2
1010845c:	1885883a 	add	r2,r3,r2
10108460:	10c00017 	ldw	r3,0(r2)
10108464:	18001126 	beq	r3,zero,101084ac <__sigtramp_r+0x80>
10108468:	013fffc4 	movi	r4,-1
1010846c:	19000d26 	beq	r3,r4,101084a4 <__sigtramp_r+0x78>
10108470:	01000044 	movi	r4,1
10108474:	19000926 	beq	r3,r4,1010849c <__sigtramp_r+0x70>
10108478:	10000015 	stw	zero,0(r2)
1010847c:	8809883a 	mov	r4,r17
10108480:	183ee83a 	callr	r3
10108484:	0005883a 	mov	r2,zero
10108488:	dfc00217 	ldw	ra,8(sp)
1010848c:	dc400117 	ldw	r17,4(sp)
10108490:	dc000017 	ldw	r16,0(sp)
10108494:	dec00304 	addi	sp,sp,12
10108498:	f800283a 	ret
1010849c:	008000c4 	movi	r2,3
101084a0:	003ff906 	br	10108488 <__alt_data_end+0xfffe8488>
101084a4:	00800084 	movi	r2,2
101084a8:	003ff706 	br	10108488 <__alt_data_end+0xfffe8488>
101084ac:	00800044 	movi	r2,1
101084b0:	003ff506 	br	10108488 <__alt_data_end+0xfffe8488>
101084b4:	01082800 	call	10108280 <_init_signal_r>
101084b8:	1000041e 	bne	r2,zero,101084cc <__sigtramp_r+0xa0>
101084bc:	80c0b717 	ldw	r3,732(r16)
101084c0:	003fe406 	br	10108454 <__alt_data_end+0xfffe8454>
101084c4:	00bfffc4 	movi	r2,-1
101084c8:	f800283a 	ret
101084cc:	00bfffc4 	movi	r2,-1
101084d0:	003fed06 	br	10108488 <__alt_data_end+0xfffe8488>

101084d4 <raise>:
101084d4:	00840474 	movhi	r2,4113
101084d8:	108ba404 	addi	r2,r2,11920
101084dc:	200b883a 	mov	r5,r4
101084e0:	11000017 	ldw	r4,0(r2)
101084e4:	01083701 	jmpi	10108370 <_raise_r>

101084e8 <signal>:
101084e8:	00840474 	movhi	r2,4113
101084ec:	108ba404 	addi	r2,r2,11920
101084f0:	280d883a 	mov	r6,r5
101084f4:	200b883a 	mov	r5,r4
101084f8:	11000017 	ldw	r4,0(r2)
101084fc:	01082ec1 	jmpi	101082ec <_signal_r>

10108500 <_init_signal>:
10108500:	00840474 	movhi	r2,4113
10108504:	108ba404 	addi	r2,r2,11920
10108508:	11000017 	ldw	r4,0(r2)
1010850c:	01082801 	jmpi	10108280 <_init_signal_r>

10108510 <__sigtramp>:
10108510:	00840474 	movhi	r2,4113
10108514:	108ba404 	addi	r2,r2,11920
10108518:	200b883a 	mov	r5,r4
1010851c:	11000017 	ldw	r4,0(r2)
10108520:	010842c1 	jmpi	1010842c <__sigtramp_r>

10108524 <_kill_r>:
10108524:	defffd04 	addi	sp,sp,-12
10108528:	2805883a 	mov	r2,r5
1010852c:	dc000015 	stw	r16,0(sp)
10108530:	04040474 	movhi	r16,4113
10108534:	dc400115 	stw	r17,4(sp)
10108538:	84129e04 	addi	r16,r16,19064
1010853c:	2023883a 	mov	r17,r4
10108540:	300b883a 	mov	r5,r6
10108544:	1009883a 	mov	r4,r2
10108548:	dfc00215 	stw	ra,8(sp)
1010854c:	80000015 	stw	zero,0(r16)
10108550:	010e62c0 	call	1010e62c <kill>
10108554:	00ffffc4 	movi	r3,-1
10108558:	10c00526 	beq	r2,r3,10108570 <_kill_r+0x4c>
1010855c:	dfc00217 	ldw	ra,8(sp)
10108560:	dc400117 	ldw	r17,4(sp)
10108564:	dc000017 	ldw	r16,0(sp)
10108568:	dec00304 	addi	sp,sp,12
1010856c:	f800283a 	ret
10108570:	80c00017 	ldw	r3,0(r16)
10108574:	183ff926 	beq	r3,zero,1010855c <__alt_data_end+0xfffe855c>
10108578:	88c00015 	stw	r3,0(r17)
1010857c:	003ff706 	br	1010855c <__alt_data_end+0xfffe855c>

10108580 <_getpid_r>:
10108580:	010e4f01 	jmpi	1010e4f0 <getpid>

10108584 <strcmp>:
10108584:	2144b03a 	or	r2,r4,r5
10108588:	108000cc 	andi	r2,r2,3
1010858c:	1000171e 	bne	r2,zero,101085ec <strcmp+0x68>
10108590:	20800017 	ldw	r2,0(r4)
10108594:	28c00017 	ldw	r3,0(r5)
10108598:	10c0141e 	bne	r2,r3,101085ec <strcmp+0x68>
1010859c:	027fbff4 	movhi	r9,65279
101085a0:	4a7fbfc4 	addi	r9,r9,-257
101085a4:	0086303a 	nor	r3,zero,r2
101085a8:	02202074 	movhi	r8,32897
101085ac:	1245883a 	add	r2,r2,r9
101085b0:	42202004 	addi	r8,r8,-32640
101085b4:	10c4703a 	and	r2,r2,r3
101085b8:	1204703a 	and	r2,r2,r8
101085bc:	10000226 	beq	r2,zero,101085c8 <strcmp+0x44>
101085c0:	00002306 	br	10108650 <strcmp+0xcc>
101085c4:	1000221e 	bne	r2,zero,10108650 <strcmp+0xcc>
101085c8:	21000104 	addi	r4,r4,4
101085cc:	20c00017 	ldw	r3,0(r4)
101085d0:	29400104 	addi	r5,r5,4
101085d4:	29800017 	ldw	r6,0(r5)
101085d8:	1a4f883a 	add	r7,r3,r9
101085dc:	00c4303a 	nor	r2,zero,r3
101085e0:	3884703a 	and	r2,r7,r2
101085e4:	1204703a 	and	r2,r2,r8
101085e8:	19bff626 	beq	r3,r6,101085c4 <__alt_data_end+0xfffe85c4>
101085ec:	20800003 	ldbu	r2,0(r4)
101085f0:	10c03fcc 	andi	r3,r2,255
101085f4:	18c0201c 	xori	r3,r3,128
101085f8:	18ffe004 	addi	r3,r3,-128
101085fc:	18000c26 	beq	r3,zero,10108630 <strcmp+0xac>
10108600:	29800007 	ldb	r6,0(r5)
10108604:	19800326 	beq	r3,r6,10108614 <strcmp+0x90>
10108608:	00001306 	br	10108658 <strcmp+0xd4>
1010860c:	29800007 	ldb	r6,0(r5)
10108610:	11800b1e 	bne	r2,r6,10108640 <strcmp+0xbc>
10108614:	21000044 	addi	r4,r4,1
10108618:	20c00003 	ldbu	r3,0(r4)
1010861c:	29400044 	addi	r5,r5,1
10108620:	18803fcc 	andi	r2,r3,255
10108624:	1080201c 	xori	r2,r2,128
10108628:	10bfe004 	addi	r2,r2,-128
1010862c:	103ff71e 	bne	r2,zero,1010860c <__alt_data_end+0xfffe860c>
10108630:	0007883a 	mov	r3,zero
10108634:	28800003 	ldbu	r2,0(r5)
10108638:	1885c83a 	sub	r2,r3,r2
1010863c:	f800283a 	ret
10108640:	28800003 	ldbu	r2,0(r5)
10108644:	18c03fcc 	andi	r3,r3,255
10108648:	1885c83a 	sub	r2,r3,r2
1010864c:	f800283a 	ret
10108650:	0005883a 	mov	r2,zero
10108654:	f800283a 	ret
10108658:	10c03fcc 	andi	r3,r2,255
1010865c:	003ff506 	br	10108634 <__alt_data_end+0xfffe8634>

10108660 <strlen>:
10108660:	208000cc 	andi	r2,r4,3
10108664:	10002026 	beq	r2,zero,101086e8 <strlen+0x88>
10108668:	20800007 	ldb	r2,0(r4)
1010866c:	10002026 	beq	r2,zero,101086f0 <strlen+0x90>
10108670:	2005883a 	mov	r2,r4
10108674:	00000206 	br	10108680 <strlen+0x20>
10108678:	10c00007 	ldb	r3,0(r2)
1010867c:	18001826 	beq	r3,zero,101086e0 <strlen+0x80>
10108680:	10800044 	addi	r2,r2,1
10108684:	10c000cc 	andi	r3,r2,3
10108688:	183ffb1e 	bne	r3,zero,10108678 <__alt_data_end+0xfffe8678>
1010868c:	10c00017 	ldw	r3,0(r2)
10108690:	01ffbff4 	movhi	r7,65279
10108694:	39ffbfc4 	addi	r7,r7,-257
10108698:	00ca303a 	nor	r5,zero,r3
1010869c:	01a02074 	movhi	r6,32897
101086a0:	19c7883a 	add	r3,r3,r7
101086a4:	31a02004 	addi	r6,r6,-32640
101086a8:	1946703a 	and	r3,r3,r5
101086ac:	1986703a 	and	r3,r3,r6
101086b0:	1800091e 	bne	r3,zero,101086d8 <strlen+0x78>
101086b4:	10800104 	addi	r2,r2,4
101086b8:	10c00017 	ldw	r3,0(r2)
101086bc:	19cb883a 	add	r5,r3,r7
101086c0:	00c6303a 	nor	r3,zero,r3
101086c4:	28c6703a 	and	r3,r5,r3
101086c8:	1986703a 	and	r3,r3,r6
101086cc:	183ff926 	beq	r3,zero,101086b4 <__alt_data_end+0xfffe86b4>
101086d0:	00000106 	br	101086d8 <strlen+0x78>
101086d4:	10800044 	addi	r2,r2,1
101086d8:	10c00007 	ldb	r3,0(r2)
101086dc:	183ffd1e 	bne	r3,zero,101086d4 <__alt_data_end+0xfffe86d4>
101086e0:	1105c83a 	sub	r2,r2,r4
101086e4:	f800283a 	ret
101086e8:	2005883a 	mov	r2,r4
101086ec:	003fe706 	br	1010868c <__alt_data_end+0xfffe868c>
101086f0:	0005883a 	mov	r2,zero
101086f4:	f800283a 	ret

101086f8 <__sprint_r.part.0>:
101086f8:	28801917 	ldw	r2,100(r5)
101086fc:	defff604 	addi	sp,sp,-40
10108700:	dd400515 	stw	r21,20(sp)
10108704:	dfc00915 	stw	ra,36(sp)
10108708:	df000815 	stw	fp,32(sp)
1010870c:	ddc00715 	stw	r23,28(sp)
10108710:	dd800615 	stw	r22,24(sp)
10108714:	dd000415 	stw	r20,16(sp)
10108718:	dcc00315 	stw	r19,12(sp)
1010871c:	dc800215 	stw	r18,8(sp)
10108720:	dc400115 	stw	r17,4(sp)
10108724:	dc000015 	stw	r16,0(sp)
10108728:	1088000c 	andi	r2,r2,8192
1010872c:	302b883a 	mov	r21,r6
10108730:	10002e26 	beq	r2,zero,101087ec <__sprint_r.part.0+0xf4>
10108734:	30800217 	ldw	r2,8(r6)
10108738:	35800017 	ldw	r22,0(r6)
1010873c:	10002926 	beq	r2,zero,101087e4 <__sprint_r.part.0+0xec>
10108740:	2827883a 	mov	r19,r5
10108744:	2029883a 	mov	r20,r4
10108748:	b5c00104 	addi	r23,r22,4
1010874c:	04bfffc4 	movi	r18,-1
10108750:	bc400017 	ldw	r17,0(r23)
10108754:	b4000017 	ldw	r16,0(r22)
10108758:	0039883a 	mov	fp,zero
1010875c:	8822d0ba 	srli	r17,r17,2
10108760:	8800031e 	bne	r17,zero,10108770 <__sprint_r.part.0+0x78>
10108764:	00001806 	br	101087c8 <__sprint_r.part.0+0xd0>
10108768:	84000104 	addi	r16,r16,4
1010876c:	8f001526 	beq	r17,fp,101087c4 <__sprint_r.part.0+0xcc>
10108770:	81400017 	ldw	r5,0(r16)
10108774:	980d883a 	mov	r6,r19
10108778:	a009883a 	mov	r4,r20
1010877c:	010a06c0 	call	1010a06c <_fputwc_r>
10108780:	e7000044 	addi	fp,fp,1
10108784:	14bff81e 	bne	r2,r18,10108768 <__alt_data_end+0xfffe8768>
10108788:	9005883a 	mov	r2,r18
1010878c:	a8000215 	stw	zero,8(r21)
10108790:	a8000115 	stw	zero,4(r21)
10108794:	dfc00917 	ldw	ra,36(sp)
10108798:	df000817 	ldw	fp,32(sp)
1010879c:	ddc00717 	ldw	r23,28(sp)
101087a0:	dd800617 	ldw	r22,24(sp)
101087a4:	dd400517 	ldw	r21,20(sp)
101087a8:	dd000417 	ldw	r20,16(sp)
101087ac:	dcc00317 	ldw	r19,12(sp)
101087b0:	dc800217 	ldw	r18,8(sp)
101087b4:	dc400117 	ldw	r17,4(sp)
101087b8:	dc000017 	ldw	r16,0(sp)
101087bc:	dec00a04 	addi	sp,sp,40
101087c0:	f800283a 	ret
101087c4:	a8800217 	ldw	r2,8(r21)
101087c8:	8c63883a 	add	r17,r17,r17
101087cc:	8c63883a 	add	r17,r17,r17
101087d0:	1445c83a 	sub	r2,r2,r17
101087d4:	a8800215 	stw	r2,8(r21)
101087d8:	b5800204 	addi	r22,r22,8
101087dc:	bdc00204 	addi	r23,r23,8
101087e0:	103fdb1e 	bne	r2,zero,10108750 <__alt_data_end+0xfffe8750>
101087e4:	0005883a 	mov	r2,zero
101087e8:	003fe806 	br	1010878c <__alt_data_end+0xfffe878c>
101087ec:	010a1100 	call	1010a110 <__sfvwrite_r>
101087f0:	003fe606 	br	1010878c <__alt_data_end+0xfffe878c>

101087f4 <__sprint_r>:
101087f4:	30c00217 	ldw	r3,8(r6)
101087f8:	18000126 	beq	r3,zero,10108800 <__sprint_r+0xc>
101087fc:	01086f81 	jmpi	101086f8 <__sprint_r.part.0>
10108800:	30000115 	stw	zero,4(r6)
10108804:	0005883a 	mov	r2,zero
10108808:	f800283a 	ret

1010880c <___vfiprintf_internal_r>:
1010880c:	deffc904 	addi	sp,sp,-220
10108810:	df003515 	stw	fp,212(sp)
10108814:	dd003115 	stw	r20,196(sp)
10108818:	dfc03615 	stw	ra,216(sp)
1010881c:	ddc03415 	stw	r23,208(sp)
10108820:	dd803315 	stw	r22,204(sp)
10108824:	dd403215 	stw	r21,200(sp)
10108828:	dcc03015 	stw	r19,192(sp)
1010882c:	dc802f15 	stw	r18,188(sp)
10108830:	dc402e15 	stw	r17,184(sp)
10108834:	dc002d15 	stw	r16,180(sp)
10108838:	d9002015 	stw	r4,128(sp)
1010883c:	d9c02215 	stw	r7,136(sp)
10108840:	2829883a 	mov	r20,r5
10108844:	3039883a 	mov	fp,r6
10108848:	20000226 	beq	r4,zero,10108854 <___vfiprintf_internal_r+0x48>
1010884c:	20800e17 	ldw	r2,56(r4)
10108850:	1000cf26 	beq	r2,zero,10108b90 <___vfiprintf_internal_r+0x384>
10108854:	a080030b 	ldhu	r2,12(r20)
10108858:	10c8000c 	andi	r3,r2,8192
1010885c:	1800061e 	bne	r3,zero,10108878 <___vfiprintf_internal_r+0x6c>
10108860:	a1001917 	ldw	r4,100(r20)
10108864:	00f7ffc4 	movi	r3,-8193
10108868:	10880014 	ori	r2,r2,8192
1010886c:	20c6703a 	and	r3,r4,r3
10108870:	a080030d 	sth	r2,12(r20)
10108874:	a0c01915 	stw	r3,100(r20)
10108878:	10c0020c 	andi	r3,r2,8
1010887c:	1800a926 	beq	r3,zero,10108b24 <___vfiprintf_internal_r+0x318>
10108880:	a0c00417 	ldw	r3,16(r20)
10108884:	1800a726 	beq	r3,zero,10108b24 <___vfiprintf_internal_r+0x318>
10108888:	1080068c 	andi	r2,r2,26
1010888c:	00c00284 	movi	r3,10
10108890:	10c0ac26 	beq	r2,r3,10108b44 <___vfiprintf_internal_r+0x338>
10108894:	da801a04 	addi	r10,sp,104
10108898:	da801e15 	stw	r10,120(sp)
1010889c:	d8801e17 	ldw	r2,120(sp)
101088a0:	da8019c4 	addi	r10,sp,103
101088a4:	05840474 	movhi	r22,4113
101088a8:	05c40474 	movhi	r23,4113
101088ac:	da801f15 	stw	r10,124(sp)
101088b0:	1295c83a 	sub	r10,r2,r10
101088b4:	b5849804 	addi	r22,r22,4704
101088b8:	bdc49404 	addi	r23,r23,4688
101088bc:	dec01a15 	stw	sp,104(sp)
101088c0:	d8001c15 	stw	zero,112(sp)
101088c4:	d8001b15 	stw	zero,108(sp)
101088c8:	d8002615 	stw	zero,152(sp)
101088cc:	d8002315 	stw	zero,140(sp)
101088d0:	da802715 	stw	r10,156(sp)
101088d4:	d811883a 	mov	r8,sp
101088d8:	dd002115 	stw	r20,132(sp)
101088dc:	e021883a 	mov	r16,fp
101088e0:	80800007 	ldb	r2,0(r16)
101088e4:	1003ea26 	beq	r2,zero,10109890 <___vfiprintf_internal_r+0x1084>
101088e8:	00c00944 	movi	r3,37
101088ec:	8025883a 	mov	r18,r16
101088f0:	10c0021e 	bne	r2,r3,101088fc <___vfiprintf_internal_r+0xf0>
101088f4:	00001606 	br	10108950 <___vfiprintf_internal_r+0x144>
101088f8:	10c00326 	beq	r2,r3,10108908 <___vfiprintf_internal_r+0xfc>
101088fc:	94800044 	addi	r18,r18,1
10108900:	90800007 	ldb	r2,0(r18)
10108904:	103ffc1e 	bne	r2,zero,101088f8 <__alt_data_end+0xfffe88f8>
10108908:	9423c83a 	sub	r17,r18,r16
1010890c:	88001026 	beq	r17,zero,10108950 <___vfiprintf_internal_r+0x144>
10108910:	d8c01c17 	ldw	r3,112(sp)
10108914:	d8801b17 	ldw	r2,108(sp)
10108918:	44000015 	stw	r16,0(r8)
1010891c:	88c7883a 	add	r3,r17,r3
10108920:	10800044 	addi	r2,r2,1
10108924:	44400115 	stw	r17,4(r8)
10108928:	d8c01c15 	stw	r3,112(sp)
1010892c:	d8801b15 	stw	r2,108(sp)
10108930:	010001c4 	movi	r4,7
10108934:	2080760e 	bge	r4,r2,10108b10 <___vfiprintf_internal_r+0x304>
10108938:	1803821e 	bne	r3,zero,10109744 <___vfiprintf_internal_r+0xf38>
1010893c:	da802317 	ldw	r10,140(sp)
10108940:	d8001b15 	stw	zero,108(sp)
10108944:	d811883a 	mov	r8,sp
10108948:	5455883a 	add	r10,r10,r17
1010894c:	da802315 	stw	r10,140(sp)
10108950:	90800007 	ldb	r2,0(r18)
10108954:	10044626 	beq	r2,zero,10109a70 <___vfiprintf_internal_r+0x1264>
10108958:	90c00047 	ldb	r3,1(r18)
1010895c:	94000044 	addi	r16,r18,1
10108960:	d8001d85 	stb	zero,118(sp)
10108964:	0009883a 	mov	r4,zero
10108968:	000f883a 	mov	r7,zero
1010896c:	027fffc4 	movi	r9,-1
10108970:	0023883a 	mov	r17,zero
10108974:	0029883a 	mov	r20,zero
10108978:	01401604 	movi	r5,88
1010897c:	01800244 	movi	r6,9
10108980:	03400a84 	movi	r13,42
10108984:	03001b04 	movi	r12,108
10108988:	84000044 	addi	r16,r16,1
1010898c:	18bff804 	addi	r2,r3,-32
10108990:	28827336 	bltu	r5,r2,10109360 <___vfiprintf_internal_r+0xb54>
10108994:	100490ba 	slli	r2,r2,2
10108998:	02840474 	movhi	r10,4113
1010899c:	52a26b04 	addi	r10,r10,-30292
101089a0:	1285883a 	add	r2,r2,r10
101089a4:	10800017 	ldw	r2,0(r2)
101089a8:	1000683a 	jmp	r2
101089ac:	10109094 	ori	zero,r2,16962
101089b0:	10109360 	cmpeqi	zero,r2,16973
101089b4:	10109360 	cmpeqi	zero,r2,16973
101089b8:	101090b4 	orhi	zero,r2,16962
101089bc:	10109360 	cmpeqi	zero,r2,16973
101089c0:	10109360 	cmpeqi	zero,r2,16973
101089c4:	10109360 	cmpeqi	zero,r2,16973
101089c8:	10109360 	cmpeqi	zero,r2,16973
101089cc:	10109360 	cmpeqi	zero,r2,16973
101089d0:	10109360 	cmpeqi	zero,r2,16973
101089d4:	1010929c 	xori	zero,r2,16970
101089d8:	101092b8 	rdprs	zero,r2,16970
101089dc:	10109360 	cmpeqi	zero,r2,16973
101089e0:	10108ba0 	cmpeqi	zero,r2,16942
101089e4:	101092c8 	cmpgei	zero,r2,16971
101089e8:	10109360 	cmpeqi	zero,r2,16973
101089ec:	101090c0 	call	1101090c <__alt_data_end+0xef090c>
101089f0:	101090cc 	andi	zero,r2,16963
101089f4:	101090cc 	andi	zero,r2,16963
101089f8:	101090cc 	andi	zero,r2,16963
101089fc:	101090cc 	andi	zero,r2,16963
10108a00:	101090cc 	andi	zero,r2,16963
10108a04:	101090cc 	andi	zero,r2,16963
10108a08:	101090cc 	andi	zero,r2,16963
10108a0c:	101090cc 	andi	zero,r2,16963
10108a10:	101090cc 	andi	zero,r2,16963
10108a14:	10109360 	cmpeqi	zero,r2,16973
10108a18:	10109360 	cmpeqi	zero,r2,16973
10108a1c:	10109360 	cmpeqi	zero,r2,16973
10108a20:	10109360 	cmpeqi	zero,r2,16973
10108a24:	10109360 	cmpeqi	zero,r2,16973
10108a28:	10109360 	cmpeqi	zero,r2,16973
10108a2c:	10109360 	cmpeqi	zero,r2,16973
10108a30:	10109360 	cmpeqi	zero,r2,16973
10108a34:	10109360 	cmpeqi	zero,r2,16973
10108a38:	10109360 	cmpeqi	zero,r2,16973
10108a3c:	101090f8 	rdprs	zero,r2,16963
10108a40:	10109360 	cmpeqi	zero,r2,16973
10108a44:	10109360 	cmpeqi	zero,r2,16973
10108a48:	10109360 	cmpeqi	zero,r2,16973
10108a4c:	10109360 	cmpeqi	zero,r2,16973
10108a50:	10109360 	cmpeqi	zero,r2,16973
10108a54:	10109360 	cmpeqi	zero,r2,16973
10108a58:	10109360 	cmpeqi	zero,r2,16973
10108a5c:	10109360 	cmpeqi	zero,r2,16973
10108a60:	10109360 	cmpeqi	zero,r2,16973
10108a64:	10109360 	cmpeqi	zero,r2,16973
10108a68:	10109130 	cmpltui	zero,r2,16964
10108a6c:	10109360 	cmpeqi	zero,r2,16973
10108a70:	10109360 	cmpeqi	zero,r2,16973
10108a74:	10109360 	cmpeqi	zero,r2,16973
10108a78:	10109360 	cmpeqi	zero,r2,16973
10108a7c:	10109360 	cmpeqi	zero,r2,16973
10108a80:	10109188 	cmpgei	zero,r2,16966
10108a84:	10109360 	cmpeqi	zero,r2,16973
10108a88:	10109360 	cmpeqi	zero,r2,16973
10108a8c:	101091f8 	rdprs	zero,r2,16967
10108a90:	10109360 	cmpeqi	zero,r2,16973
10108a94:	10109360 	cmpeqi	zero,r2,16973
10108a98:	10109360 	cmpeqi	zero,r2,16973
10108a9c:	10109360 	cmpeqi	zero,r2,16973
10108aa0:	10109360 	cmpeqi	zero,r2,16973
10108aa4:	10109360 	cmpeqi	zero,r2,16973
10108aa8:	10109360 	cmpeqi	zero,r2,16973
10108aac:	10109360 	cmpeqi	zero,r2,16973
10108ab0:	10109360 	cmpeqi	zero,r2,16973
10108ab4:	10109360 	cmpeqi	zero,r2,16973
10108ab8:	10108fa4 	muli	zero,r2,16958
10108abc:	10108fd0 	cmplti	zero,r2,16959
10108ac0:	10109360 	cmpeqi	zero,r2,16973
10108ac4:	10109360 	cmpeqi	zero,r2,16973
10108ac8:	10109360 	cmpeqi	zero,r2,16973
10108acc:	10109308 	cmpgei	zero,r2,16972
10108ad0:	10108fd0 	cmplti	zero,r2,16959
10108ad4:	10109360 	cmpeqi	zero,r2,16973
10108ad8:	10109360 	cmpeqi	zero,r2,16973
10108adc:	10108e64 	muli	zero,r2,16953
10108ae0:	10109360 	cmpeqi	zero,r2,16973
10108ae4:	10108e74 	orhi	zero,r2,16953
10108ae8:	10108eb0 	cmpltui	zero,r2,16954
10108aec:	10108bac 	andhi	zero,r2,16942
10108af0:	10108e58 	cmpnei	zero,r2,16953
10108af4:	10109360 	cmpeqi	zero,r2,16973
10108af8:	10109234 	orhi	zero,r2,16968
10108afc:	10109360 	cmpeqi	zero,r2,16973
10108b00:	1010928c 	andi	zero,r2,16970
10108b04:	10109360 	cmpeqi	zero,r2,16973
10108b08:	10109360 	cmpeqi	zero,r2,16973
10108b0c:	10108f50 	cmplti	zero,r2,16957
10108b10:	42000204 	addi	r8,r8,8
10108b14:	da802317 	ldw	r10,140(sp)
10108b18:	5455883a 	add	r10,r10,r17
10108b1c:	da802315 	stw	r10,140(sp)
10108b20:	003f8b06 	br	10108950 <__alt_data_end+0xfffe8950>
10108b24:	d9002017 	ldw	r4,128(sp)
10108b28:	a00b883a 	mov	r5,r20
10108b2c:	01046fc0 	call	101046fc <__swsetup_r>
10108b30:	1003b11e 	bne	r2,zero,101099f8 <___vfiprintf_internal_r+0x11ec>
10108b34:	a080030b 	ldhu	r2,12(r20)
10108b38:	00c00284 	movi	r3,10
10108b3c:	1080068c 	andi	r2,r2,26
10108b40:	10ff541e 	bne	r2,r3,10108894 <__alt_data_end+0xfffe8894>
10108b44:	a080038f 	ldh	r2,14(r20)
10108b48:	103f5216 	blt	r2,zero,10108894 <__alt_data_end+0xfffe8894>
10108b4c:	d9c02217 	ldw	r7,136(sp)
10108b50:	d9002017 	ldw	r4,128(sp)
10108b54:	e00d883a 	mov	r6,fp
10108b58:	a00b883a 	mov	r5,r20
10108b5c:	0109c840 	call	10109c84 <__sbprintf>
10108b60:	dfc03617 	ldw	ra,216(sp)
10108b64:	df003517 	ldw	fp,212(sp)
10108b68:	ddc03417 	ldw	r23,208(sp)
10108b6c:	dd803317 	ldw	r22,204(sp)
10108b70:	dd403217 	ldw	r21,200(sp)
10108b74:	dd003117 	ldw	r20,196(sp)
10108b78:	dcc03017 	ldw	r19,192(sp)
10108b7c:	dc802f17 	ldw	r18,188(sp)
10108b80:	dc402e17 	ldw	r17,184(sp)
10108b84:	dc002d17 	ldw	r16,180(sp)
10108b88:	dec03704 	addi	sp,sp,220
10108b8c:	f800283a 	ret
10108b90:	010673c0 	call	1010673c <__sinit>
10108b94:	003f2f06 	br	10108854 <__alt_data_end+0xfffe8854>
10108b98:	0463c83a 	sub	r17,zero,r17
10108b9c:	d8802215 	stw	r2,136(sp)
10108ba0:	a5000114 	ori	r20,r20,4
10108ba4:	80c00007 	ldb	r3,0(r16)
10108ba8:	003f7706 	br	10108988 <__alt_data_end+0xfffe8988>
10108bac:	00800c04 	movi	r2,48
10108bb0:	da802217 	ldw	r10,136(sp)
10108bb4:	d8801d05 	stb	r2,116(sp)
10108bb8:	00801e04 	movi	r2,120
10108bbc:	d8801d45 	stb	r2,117(sp)
10108bc0:	d8001d85 	stb	zero,118(sp)
10108bc4:	50c00104 	addi	r3,r10,4
10108bc8:	54800017 	ldw	r18,0(r10)
10108bcc:	0027883a 	mov	r19,zero
10108bd0:	a0800094 	ori	r2,r20,2
10108bd4:	48030b16 	blt	r9,zero,10109804 <___vfiprintf_internal_r+0xff8>
10108bd8:	00bfdfc4 	movi	r2,-129
10108bdc:	a096703a 	and	r11,r20,r2
10108be0:	d8c02215 	stw	r3,136(sp)
10108be4:	5d000094 	ori	r20,r11,2
10108be8:	90032b1e 	bne	r18,zero,10109898 <___vfiprintf_internal_r+0x108c>
10108bec:	00840474 	movhi	r2,4113
10108bf0:	10843404 	addi	r2,r2,4304
10108bf4:	d8802615 	stw	r2,152(sp)
10108bf8:	0039883a 	mov	fp,zero
10108bfc:	48017b1e 	bne	r9,zero,101091ec <___vfiprintf_internal_r+0x9e0>
10108c00:	0013883a 	mov	r9,zero
10108c04:	0027883a 	mov	r19,zero
10108c08:	dd401a04 	addi	r21,sp,104
10108c0c:	4825883a 	mov	r18,r9
10108c10:	4cc0010e 	bge	r9,r19,10108c18 <___vfiprintf_internal_r+0x40c>
10108c14:	9825883a 	mov	r18,r19
10108c18:	e7003fcc 	andi	fp,fp,255
10108c1c:	e700201c 	xori	fp,fp,128
10108c20:	e73fe004 	addi	fp,fp,-128
10108c24:	e0000126 	beq	fp,zero,10108c2c <___vfiprintf_internal_r+0x420>
10108c28:	94800044 	addi	r18,r18,1
10108c2c:	a380008c 	andi	r14,r20,2
10108c30:	70000126 	beq	r14,zero,10108c38 <___vfiprintf_internal_r+0x42c>
10108c34:	94800084 	addi	r18,r18,2
10108c38:	a700210c 	andi	fp,r20,132
10108c3c:	e001df1e 	bne	fp,zero,101093bc <___vfiprintf_internal_r+0xbb0>
10108c40:	8c87c83a 	sub	r3,r17,r18
10108c44:	00c1dd0e 	bge	zero,r3,101093bc <___vfiprintf_internal_r+0xbb0>
10108c48:	01c00404 	movi	r7,16
10108c4c:	d8801c17 	ldw	r2,112(sp)
10108c50:	38c3ad0e 	bge	r7,r3,10109b08 <___vfiprintf_internal_r+0x12fc>
10108c54:	02840474 	movhi	r10,4113
10108c58:	52849804 	addi	r10,r10,4704
10108c5c:	dc002915 	stw	r16,164(sp)
10108c60:	d9801b17 	ldw	r6,108(sp)
10108c64:	da802415 	stw	r10,144(sp)
10108c68:	03c001c4 	movi	r15,7
10108c6c:	da402515 	stw	r9,148(sp)
10108c70:	db802815 	stw	r14,160(sp)
10108c74:	1821883a 	mov	r16,r3
10108c78:	00000506 	br	10108c90 <___vfiprintf_internal_r+0x484>
10108c7c:	31400084 	addi	r5,r6,2
10108c80:	42000204 	addi	r8,r8,8
10108c84:	200d883a 	mov	r6,r4
10108c88:	843ffc04 	addi	r16,r16,-16
10108c8c:	3c000d0e 	bge	r7,r16,10108cc4 <___vfiprintf_internal_r+0x4b8>
10108c90:	10800404 	addi	r2,r2,16
10108c94:	31000044 	addi	r4,r6,1
10108c98:	45800015 	stw	r22,0(r8)
10108c9c:	41c00115 	stw	r7,4(r8)
10108ca0:	d8801c15 	stw	r2,112(sp)
10108ca4:	d9001b15 	stw	r4,108(sp)
10108ca8:	793ff40e 	bge	r15,r4,10108c7c <__alt_data_end+0xfffe8c7c>
10108cac:	1001b51e 	bne	r2,zero,10109384 <___vfiprintf_internal_r+0xb78>
10108cb0:	843ffc04 	addi	r16,r16,-16
10108cb4:	000d883a 	mov	r6,zero
10108cb8:	01400044 	movi	r5,1
10108cbc:	d811883a 	mov	r8,sp
10108cc0:	3c3ff316 	blt	r7,r16,10108c90 <__alt_data_end+0xfffe8c90>
10108cc4:	8007883a 	mov	r3,r16
10108cc8:	da402517 	ldw	r9,148(sp)
10108ccc:	db802817 	ldw	r14,160(sp)
10108cd0:	dc002917 	ldw	r16,164(sp)
10108cd4:	da802417 	ldw	r10,144(sp)
10108cd8:	1885883a 	add	r2,r3,r2
10108cdc:	40c00115 	stw	r3,4(r8)
10108ce0:	42800015 	stw	r10,0(r8)
10108ce4:	d8801c15 	stw	r2,112(sp)
10108ce8:	d9401b15 	stw	r5,108(sp)
10108cec:	00c001c4 	movi	r3,7
10108cf0:	19426016 	blt	r3,r5,10109674 <___vfiprintf_internal_r+0xe68>
10108cf4:	d8c01d87 	ldb	r3,118(sp)
10108cf8:	42000204 	addi	r8,r8,8
10108cfc:	29000044 	addi	r4,r5,1
10108d00:	1801b31e 	bne	r3,zero,101093d0 <___vfiprintf_internal_r+0xbc4>
10108d04:	7001c026 	beq	r14,zero,10109408 <___vfiprintf_internal_r+0xbfc>
10108d08:	d8c01d04 	addi	r3,sp,116
10108d0c:	10800084 	addi	r2,r2,2
10108d10:	40c00015 	stw	r3,0(r8)
10108d14:	00c00084 	movi	r3,2
10108d18:	40c00115 	stw	r3,4(r8)
10108d1c:	d8801c15 	stw	r2,112(sp)
10108d20:	d9001b15 	stw	r4,108(sp)
10108d24:	00c001c4 	movi	r3,7
10108d28:	1902650e 	bge	r3,r4,101096c0 <___vfiprintf_internal_r+0xeb4>
10108d2c:	10029a1e 	bne	r2,zero,10109798 <___vfiprintf_internal_r+0xf8c>
10108d30:	00c02004 	movi	r3,128
10108d34:	01000044 	movi	r4,1
10108d38:	000b883a 	mov	r5,zero
10108d3c:	d811883a 	mov	r8,sp
10108d40:	e0c1b31e 	bne	fp,r3,10109410 <___vfiprintf_internal_r+0xc04>
10108d44:	8cb9c83a 	sub	fp,r17,r18
10108d48:	0701b10e 	bge	zero,fp,10109410 <___vfiprintf_internal_r+0xc04>
10108d4c:	01c00404 	movi	r7,16
10108d50:	3f03890e 	bge	r7,fp,10109b78 <___vfiprintf_internal_r+0x136c>
10108d54:	00c40474 	movhi	r3,4113
10108d58:	18c49404 	addi	r3,r3,4688
10108d5c:	d8c02415 	stw	r3,144(sp)
10108d60:	8007883a 	mov	r3,r16
10108d64:	034001c4 	movi	r13,7
10108d68:	e021883a 	mov	r16,fp
10108d6c:	da402515 	stw	r9,148(sp)
10108d70:	1839883a 	mov	fp,r3
10108d74:	00000506 	br	10108d8c <___vfiprintf_internal_r+0x580>
10108d78:	29800084 	addi	r6,r5,2
10108d7c:	42000204 	addi	r8,r8,8
10108d80:	180b883a 	mov	r5,r3
10108d84:	843ffc04 	addi	r16,r16,-16
10108d88:	3c000d0e 	bge	r7,r16,10108dc0 <___vfiprintf_internal_r+0x5b4>
10108d8c:	10800404 	addi	r2,r2,16
10108d90:	28c00044 	addi	r3,r5,1
10108d94:	45c00015 	stw	r23,0(r8)
10108d98:	41c00115 	stw	r7,4(r8)
10108d9c:	d8801c15 	stw	r2,112(sp)
10108da0:	d8c01b15 	stw	r3,108(sp)
10108da4:	68fff40e 	bge	r13,r3,10108d78 <__alt_data_end+0xfffe8d78>
10108da8:	1002241e 	bne	r2,zero,1010963c <___vfiprintf_internal_r+0xe30>
10108dac:	843ffc04 	addi	r16,r16,-16
10108db0:	01800044 	movi	r6,1
10108db4:	000b883a 	mov	r5,zero
10108db8:	d811883a 	mov	r8,sp
10108dbc:	3c3ff316 	blt	r7,r16,10108d8c <__alt_data_end+0xfffe8d8c>
10108dc0:	da402517 	ldw	r9,148(sp)
10108dc4:	e007883a 	mov	r3,fp
10108dc8:	8039883a 	mov	fp,r16
10108dcc:	1821883a 	mov	r16,r3
10108dd0:	d8c02417 	ldw	r3,144(sp)
10108dd4:	1705883a 	add	r2,r2,fp
10108dd8:	47000115 	stw	fp,4(r8)
10108ddc:	40c00015 	stw	r3,0(r8)
10108de0:	d8801c15 	stw	r2,112(sp)
10108de4:	d9801b15 	stw	r6,108(sp)
10108de8:	00c001c4 	movi	r3,7
10108dec:	19827616 	blt	r3,r6,101097c8 <___vfiprintf_internal_r+0xfbc>
10108df0:	4cf9c83a 	sub	fp,r9,r19
10108df4:	42000204 	addi	r8,r8,8
10108df8:	31000044 	addi	r4,r6,1
10108dfc:	300b883a 	mov	r5,r6
10108e00:	07018516 	blt	zero,fp,10109418 <___vfiprintf_internal_r+0xc0c>
10108e04:	9885883a 	add	r2,r19,r2
10108e08:	45400015 	stw	r21,0(r8)
10108e0c:	44c00115 	stw	r19,4(r8)
10108e10:	d8801c15 	stw	r2,112(sp)
10108e14:	d9001b15 	stw	r4,108(sp)
10108e18:	00c001c4 	movi	r3,7
10108e1c:	1901dd0e 	bge	r3,r4,10109594 <___vfiprintf_internal_r+0xd88>
10108e20:	1002401e 	bne	r2,zero,10109724 <___vfiprintf_internal_r+0xf18>
10108e24:	d8001b15 	stw	zero,108(sp)
10108e28:	a2c0010c 	andi	r11,r20,4
10108e2c:	58000226 	beq	r11,zero,10108e38 <___vfiprintf_internal_r+0x62c>
10108e30:	8ca7c83a 	sub	r19,r17,r18
10108e34:	04c2f216 	blt	zero,r19,10109a00 <___vfiprintf_internal_r+0x11f4>
10108e38:	8c80010e 	bge	r17,r18,10108e40 <___vfiprintf_internal_r+0x634>
10108e3c:	9023883a 	mov	r17,r18
10108e40:	da802317 	ldw	r10,140(sp)
10108e44:	5455883a 	add	r10,r10,r17
10108e48:	da802315 	stw	r10,140(sp)
10108e4c:	d8001b15 	stw	zero,108(sp)
10108e50:	d811883a 	mov	r8,sp
10108e54:	003ea206 	br	101088e0 <__alt_data_end+0xfffe88e0>
10108e58:	a5000814 	ori	r20,r20,32
10108e5c:	80c00007 	ldb	r3,0(r16)
10108e60:	003ec906 	br	10108988 <__alt_data_end+0xfffe8988>
10108e64:	80c00007 	ldb	r3,0(r16)
10108e68:	1b030926 	beq	r3,r12,10109a90 <___vfiprintf_internal_r+0x1284>
10108e6c:	a5000414 	ori	r20,r20,16
10108e70:	003ec506 	br	10108988 <__alt_data_end+0xfffe8988>
10108e74:	21003fcc 	andi	r4,r4,255
10108e78:	20035e1e 	bne	r4,zero,10109bf4 <___vfiprintf_internal_r+0x13e8>
10108e7c:	a080080c 	andi	r2,r20,32
10108e80:	1002a526 	beq	r2,zero,10109918 <___vfiprintf_internal_r+0x110c>
10108e84:	da802217 	ldw	r10,136(sp)
10108e88:	50800017 	ldw	r2,0(r10)
10108e8c:	da802317 	ldw	r10,140(sp)
10108e90:	5007d7fa 	srai	r3,r10,31
10108e94:	da802217 	ldw	r10,136(sp)
10108e98:	10c00115 	stw	r3,4(r2)
10108e9c:	52800104 	addi	r10,r10,4
10108ea0:	da802215 	stw	r10,136(sp)
10108ea4:	da802317 	ldw	r10,140(sp)
10108ea8:	12800015 	stw	r10,0(r2)
10108eac:	003e8c06 	br	101088e0 <__alt_data_end+0xfffe88e0>
10108eb0:	21003fcc 	andi	r4,r4,255
10108eb4:	2003511e 	bne	r4,zero,10109bfc <___vfiprintf_internal_r+0x13f0>
10108eb8:	a080080c 	andi	r2,r20,32
10108ebc:	1000a126 	beq	r2,zero,10109144 <___vfiprintf_internal_r+0x938>
10108ec0:	da802217 	ldw	r10,136(sp)
10108ec4:	d8001d85 	stb	zero,118(sp)
10108ec8:	50800204 	addi	r2,r10,8
10108ecc:	54800017 	ldw	r18,0(r10)
10108ed0:	54c00117 	ldw	r19,4(r10)
10108ed4:	4802b416 	blt	r9,zero,101099a8 <___vfiprintf_internal_r+0x119c>
10108ed8:	013fdfc4 	movi	r4,-129
10108edc:	94c6b03a 	or	r3,r18,r19
10108ee0:	d8802215 	stw	r2,136(sp)
10108ee4:	a128703a 	and	r20,r20,r4
10108ee8:	1800a226 	beq	r3,zero,10109174 <___vfiprintf_internal_r+0x968>
10108eec:	0039883a 	mov	fp,zero
10108ef0:	dd401a04 	addi	r21,sp,104
10108ef4:	9006d0fa 	srli	r3,r18,3
10108ef8:	9808977a 	slli	r4,r19,29
10108efc:	9826d0fa 	srli	r19,r19,3
10108f00:	948001cc 	andi	r18,r18,7
10108f04:	90800c04 	addi	r2,r18,48
10108f08:	ad7fffc4 	addi	r21,r21,-1
10108f0c:	20e4b03a 	or	r18,r4,r3
10108f10:	a8800005 	stb	r2,0(r21)
10108f14:	94c6b03a 	or	r3,r18,r19
10108f18:	183ff61e 	bne	r3,zero,10108ef4 <__alt_data_end+0xfffe8ef4>
10108f1c:	a0c0004c 	andi	r3,r20,1
10108f20:	18005926 	beq	r3,zero,10109088 <___vfiprintf_internal_r+0x87c>
10108f24:	10803fcc 	andi	r2,r2,255
10108f28:	1080201c 	xori	r2,r2,128
10108f2c:	10bfe004 	addi	r2,r2,-128
10108f30:	00c00c04 	movi	r3,48
10108f34:	10c05426 	beq	r2,r3,10109088 <___vfiprintf_internal_r+0x87c>
10108f38:	da801e17 	ldw	r10,120(sp)
10108f3c:	a8bfffc4 	addi	r2,r21,-1
10108f40:	a8ffffc5 	stb	r3,-1(r21)
10108f44:	50a7c83a 	sub	r19,r10,r2
10108f48:	102b883a 	mov	r21,r2
10108f4c:	003f2f06 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10108f50:	21003fcc 	andi	r4,r4,255
10108f54:	2003421e 	bne	r4,zero,10109c60 <___vfiprintf_internal_r+0x1454>
10108f58:	00840474 	movhi	r2,4113
10108f5c:	10843404 	addi	r2,r2,4304
10108f60:	d8802615 	stw	r2,152(sp)
10108f64:	a080080c 	andi	r2,r20,32
10108f68:	1000aa26 	beq	r2,zero,10109214 <___vfiprintf_internal_r+0xa08>
10108f6c:	da802217 	ldw	r10,136(sp)
10108f70:	54800017 	ldw	r18,0(r10)
10108f74:	54c00117 	ldw	r19,4(r10)
10108f78:	52800204 	addi	r10,r10,8
10108f7c:	da802215 	stw	r10,136(sp)
10108f80:	a080004c 	andi	r2,r20,1
10108f84:	1001d226 	beq	r2,zero,101096d0 <___vfiprintf_internal_r+0xec4>
10108f88:	94c4b03a 	or	r2,r18,r19
10108f8c:	1002351e 	bne	r2,zero,10109864 <___vfiprintf_internal_r+0x1058>
10108f90:	d8001d85 	stb	zero,118(sp)
10108f94:	48022216 	blt	r9,zero,10109820 <___vfiprintf_internal_r+0x1014>
10108f98:	00bfdfc4 	movi	r2,-129
10108f9c:	a0a8703a 	and	r20,r20,r2
10108fa0:	003f1506 	br	10108bf8 <__alt_data_end+0xfffe8bf8>
10108fa4:	da802217 	ldw	r10,136(sp)
10108fa8:	04800044 	movi	r18,1
10108fac:	d8001d85 	stb	zero,118(sp)
10108fb0:	50800017 	ldw	r2,0(r10)
10108fb4:	52800104 	addi	r10,r10,4
10108fb8:	da802215 	stw	r10,136(sp)
10108fbc:	d8801005 	stb	r2,64(sp)
10108fc0:	9027883a 	mov	r19,r18
10108fc4:	dd401004 	addi	r21,sp,64
10108fc8:	0013883a 	mov	r9,zero
10108fcc:	003f1706 	br	10108c2c <__alt_data_end+0xfffe8c2c>
10108fd0:	21003fcc 	andi	r4,r4,255
10108fd4:	2003201e 	bne	r4,zero,10109c58 <___vfiprintf_internal_r+0x144c>
10108fd8:	a080080c 	andi	r2,r20,32
10108fdc:	10004b26 	beq	r2,zero,1010910c <___vfiprintf_internal_r+0x900>
10108fe0:	da802217 	ldw	r10,136(sp)
10108fe4:	50800117 	ldw	r2,4(r10)
10108fe8:	54800017 	ldw	r18,0(r10)
10108fec:	52800204 	addi	r10,r10,8
10108ff0:	da802215 	stw	r10,136(sp)
10108ff4:	1027883a 	mov	r19,r2
10108ff8:	10022c16 	blt	r2,zero,101098ac <___vfiprintf_internal_r+0x10a0>
10108ffc:	df001d83 	ldbu	fp,118(sp)
10109000:	48007216 	blt	r9,zero,101091cc <___vfiprintf_internal_r+0x9c0>
10109004:	00ffdfc4 	movi	r3,-129
10109008:	94c4b03a 	or	r2,r18,r19
1010900c:	a0e8703a 	and	r20,r20,r3
10109010:	1000cc26 	beq	r2,zero,10109344 <___vfiprintf_internal_r+0xb38>
10109014:	98021026 	beq	r19,zero,10109858 <___vfiprintf_internal_r+0x104c>
10109018:	dc402415 	stw	r17,144(sp)
1010901c:	dc002515 	stw	r16,148(sp)
10109020:	9823883a 	mov	r17,r19
10109024:	9021883a 	mov	r16,r18
10109028:	dd401a04 	addi	r21,sp,104
1010902c:	4825883a 	mov	r18,r9
10109030:	4027883a 	mov	r19,r8
10109034:	8009883a 	mov	r4,r16
10109038:	880b883a 	mov	r5,r17
1010903c:	01800284 	movi	r6,10
10109040:	000f883a 	mov	r7,zero
10109044:	010b5440 	call	1010b544 <__umoddi3>
10109048:	10800c04 	addi	r2,r2,48
1010904c:	ad7fffc4 	addi	r21,r21,-1
10109050:	8009883a 	mov	r4,r16
10109054:	880b883a 	mov	r5,r17
10109058:	a8800005 	stb	r2,0(r21)
1010905c:	01800284 	movi	r6,10
10109060:	000f883a 	mov	r7,zero
10109064:	010afcc0 	call	1010afcc <__udivdi3>
10109068:	1021883a 	mov	r16,r2
1010906c:	10c4b03a 	or	r2,r2,r3
10109070:	1823883a 	mov	r17,r3
10109074:	103fef1e 	bne	r2,zero,10109034 <__alt_data_end+0xfffe9034>
10109078:	dc402417 	ldw	r17,144(sp)
1010907c:	dc002517 	ldw	r16,148(sp)
10109080:	9013883a 	mov	r9,r18
10109084:	9811883a 	mov	r8,r19
10109088:	da801e17 	ldw	r10,120(sp)
1010908c:	5567c83a 	sub	r19,r10,r21
10109090:	003ede06 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109094:	38803fcc 	andi	r2,r7,255
10109098:	1080201c 	xori	r2,r2,128
1010909c:	10bfe004 	addi	r2,r2,-128
101090a0:	1002371e 	bne	r2,zero,10109980 <___vfiprintf_internal_r+0x1174>
101090a4:	01000044 	movi	r4,1
101090a8:	01c00804 	movi	r7,32
101090ac:	80c00007 	ldb	r3,0(r16)
101090b0:	003e3506 	br	10108988 <__alt_data_end+0xfffe8988>
101090b4:	a5000054 	ori	r20,r20,1
101090b8:	80c00007 	ldb	r3,0(r16)
101090bc:	003e3206 	br	10108988 <__alt_data_end+0xfffe8988>
101090c0:	a5002014 	ori	r20,r20,128
101090c4:	80c00007 	ldb	r3,0(r16)
101090c8:	003e2f06 	br	10108988 <__alt_data_end+0xfffe8988>
101090cc:	8015883a 	mov	r10,r16
101090d0:	0023883a 	mov	r17,zero
101090d4:	18bff404 	addi	r2,r3,-48
101090d8:	50c00007 	ldb	r3,0(r10)
101090dc:	8c4002a4 	muli	r17,r17,10
101090e0:	84000044 	addi	r16,r16,1
101090e4:	8015883a 	mov	r10,r16
101090e8:	1463883a 	add	r17,r2,r17
101090ec:	18bff404 	addi	r2,r3,-48
101090f0:	30bff92e 	bgeu	r6,r2,101090d8 <__alt_data_end+0xfffe90d8>
101090f4:	003e2506 	br	1010898c <__alt_data_end+0xfffe898c>
101090f8:	21003fcc 	andi	r4,r4,255
101090fc:	2002d41e 	bne	r4,zero,10109c50 <___vfiprintf_internal_r+0x1444>
10109100:	a5000414 	ori	r20,r20,16
10109104:	a080080c 	andi	r2,r20,32
10109108:	103fb51e 	bne	r2,zero,10108fe0 <__alt_data_end+0xfffe8fe0>
1010910c:	a080040c 	andi	r2,r20,16
10109110:	1001f826 	beq	r2,zero,101098f4 <___vfiprintf_internal_r+0x10e8>
10109114:	da802217 	ldw	r10,136(sp)
10109118:	54800017 	ldw	r18,0(r10)
1010911c:	52800104 	addi	r10,r10,4
10109120:	da802215 	stw	r10,136(sp)
10109124:	9027d7fa 	srai	r19,r18,31
10109128:	9805883a 	mov	r2,r19
1010912c:	003fb206 	br	10108ff8 <__alt_data_end+0xfffe8ff8>
10109130:	21003fcc 	andi	r4,r4,255
10109134:	2002c41e 	bne	r4,zero,10109c48 <___vfiprintf_internal_r+0x143c>
10109138:	a5000414 	ori	r20,r20,16
1010913c:	a080080c 	andi	r2,r20,32
10109140:	103f5f1e 	bne	r2,zero,10108ec0 <__alt_data_end+0xfffe8ec0>
10109144:	a080040c 	andi	r2,r20,16
10109148:	10020f26 	beq	r2,zero,10109988 <___vfiprintf_internal_r+0x117c>
1010914c:	da802217 	ldw	r10,136(sp)
10109150:	d8001d85 	stb	zero,118(sp)
10109154:	0027883a 	mov	r19,zero
10109158:	50800104 	addi	r2,r10,4
1010915c:	54800017 	ldw	r18,0(r10)
10109160:	48021116 	blt	r9,zero,101099a8 <___vfiprintf_internal_r+0x119c>
10109164:	00ffdfc4 	movi	r3,-129
10109168:	d8802215 	stw	r2,136(sp)
1010916c:	a0e8703a 	and	r20,r20,r3
10109170:	903f5e1e 	bne	r18,zero,10108eec <__alt_data_end+0xfffe8eec>
10109174:	0039883a 	mov	fp,zero
10109178:	4802a626 	beq	r9,zero,10109c14 <___vfiprintf_internal_r+0x1408>
1010917c:	0025883a 	mov	r18,zero
10109180:	0027883a 	mov	r19,zero
10109184:	003f5a06 	br	10108ef0 <__alt_data_end+0xfffe8ef0>
10109188:	21003fcc 	andi	r4,r4,255
1010918c:	20029f1e 	bne	r4,zero,10109c0c <___vfiprintf_internal_r+0x1400>
10109190:	a5000414 	ori	r20,r20,16
10109194:	a080080c 	andi	r2,r20,32
10109198:	10005e1e 	bne	r2,zero,10109314 <___vfiprintf_internal_r+0xb08>
1010919c:	a080040c 	andi	r2,r20,16
101091a0:	1001a21e 	bne	r2,zero,1010982c <___vfiprintf_internal_r+0x1020>
101091a4:	a080100c 	andi	r2,r20,64
101091a8:	d8001d85 	stb	zero,118(sp)
101091ac:	da802217 	ldw	r10,136(sp)
101091b0:	1002231e 	bne	r2,zero,10109a40 <___vfiprintf_internal_r+0x1234>
101091b4:	50800104 	addi	r2,r10,4
101091b8:	54800017 	ldw	r18,0(r10)
101091bc:	0027883a 	mov	r19,zero
101091c0:	4801a00e 	bge	r9,zero,10109844 <___vfiprintf_internal_r+0x1038>
101091c4:	d8802215 	stw	r2,136(sp)
101091c8:	0039883a 	mov	fp,zero
101091cc:	94c4b03a 	or	r2,r18,r19
101091d0:	103f901e 	bne	r2,zero,10109014 <__alt_data_end+0xfffe9014>
101091d4:	00800044 	movi	r2,1
101091d8:	10803fcc 	andi	r2,r2,255
101091dc:	00c00044 	movi	r3,1
101091e0:	10c05926 	beq	r2,r3,10109348 <___vfiprintf_internal_r+0xb3c>
101091e4:	00c00084 	movi	r3,2
101091e8:	10ffe41e 	bne	r2,r3,1010917c <__alt_data_end+0xfffe917c>
101091ec:	0025883a 	mov	r18,zero
101091f0:	0027883a 	mov	r19,zero
101091f4:	00013d06 	br	101096ec <___vfiprintf_internal_r+0xee0>
101091f8:	21003fcc 	andi	r4,r4,255
101091fc:	2002811e 	bne	r4,zero,10109c04 <___vfiprintf_internal_r+0x13f8>
10109200:	00840474 	movhi	r2,4113
10109204:	10842f04 	addi	r2,r2,4284
10109208:	d8802615 	stw	r2,152(sp)
1010920c:	a080080c 	andi	r2,r20,32
10109210:	103f561e 	bne	r2,zero,10108f6c <__alt_data_end+0xfffe8f6c>
10109214:	a080040c 	andi	r2,r20,16
10109218:	1001d126 	beq	r2,zero,10109960 <___vfiprintf_internal_r+0x1154>
1010921c:	da802217 	ldw	r10,136(sp)
10109220:	0027883a 	mov	r19,zero
10109224:	54800017 	ldw	r18,0(r10)
10109228:	52800104 	addi	r10,r10,4
1010922c:	da802215 	stw	r10,136(sp)
10109230:	003f5306 	br	10108f80 <__alt_data_end+0xfffe8f80>
10109234:	da802217 	ldw	r10,136(sp)
10109238:	d8001d85 	stb	zero,118(sp)
1010923c:	55400017 	ldw	r21,0(r10)
10109240:	50c00104 	addi	r3,r10,4
10109244:	a8024226 	beq	r21,zero,10109b50 <___vfiprintf_internal_r+0x1344>
10109248:	48021816 	blt	r9,zero,10109aac <___vfiprintf_internal_r+0x12a0>
1010924c:	480d883a 	mov	r6,r9
10109250:	000b883a 	mov	r5,zero
10109254:	a809883a 	mov	r4,r21
10109258:	d8c02a15 	stw	r3,168(sp)
1010925c:	da002b15 	stw	r8,172(sp)
10109260:	da402c15 	stw	r9,176(sp)
10109264:	0106f840 	call	10106f84 <memchr>
10109268:	d8c02a17 	ldw	r3,168(sp)
1010926c:	da002b17 	ldw	r8,172(sp)
10109270:	da402c17 	ldw	r9,176(sp)
10109274:	10024826 	beq	r2,zero,10109b98 <___vfiprintf_internal_r+0x138c>
10109278:	1567c83a 	sub	r19,r2,r21
1010927c:	df001d83 	ldbu	fp,118(sp)
10109280:	d8c02215 	stw	r3,136(sp)
10109284:	0013883a 	mov	r9,zero
10109288:	003e6006 	br	10108c0c <__alt_data_end+0xfffe8c0c>
1010928c:	21003fcc 	andi	r4,r4,255
10109290:	203fc026 	beq	r4,zero,10109194 <__alt_data_end+0xfffe9194>
10109294:	d9c01d85 	stb	r7,118(sp)
10109298:	003fbe06 	br	10109194 <__alt_data_end+0xfffe9194>
1010929c:	da802217 	ldw	r10,136(sp)
101092a0:	54400017 	ldw	r17,0(r10)
101092a4:	50800104 	addi	r2,r10,4
101092a8:	883e3b16 	blt	r17,zero,10108b98 <__alt_data_end+0xfffe8b98>
101092ac:	d8802215 	stw	r2,136(sp)
101092b0:	80c00007 	ldb	r3,0(r16)
101092b4:	003db406 	br	10108988 <__alt_data_end+0xfffe8988>
101092b8:	01000044 	movi	r4,1
101092bc:	01c00ac4 	movi	r7,43
101092c0:	80c00007 	ldb	r3,0(r16)
101092c4:	003db006 	br	10108988 <__alt_data_end+0xfffe8988>
101092c8:	80c00007 	ldb	r3,0(r16)
101092cc:	82800044 	addi	r10,r16,1
101092d0:	1b423c26 	beq	r3,r13,10109bc4 <___vfiprintf_internal_r+0x13b8>
101092d4:	18bff404 	addi	r2,r3,-48
101092d8:	0013883a 	mov	r9,zero
101092dc:	30822b36 	bltu	r6,r2,10109b8c <___vfiprintf_internal_r+0x1380>
101092e0:	50c00007 	ldb	r3,0(r10)
101092e4:	4a4002a4 	muli	r9,r9,10
101092e8:	54000044 	addi	r16,r10,1
101092ec:	8015883a 	mov	r10,r16
101092f0:	4893883a 	add	r9,r9,r2
101092f4:	18bff404 	addi	r2,r3,-48
101092f8:	30bff92e 	bgeu	r6,r2,101092e0 <__alt_data_end+0xfffe92e0>
101092fc:	483da30e 	bge	r9,zero,1010898c <__alt_data_end+0xfffe898c>
10109300:	027fffc4 	movi	r9,-1
10109304:	003da106 	br	1010898c <__alt_data_end+0xfffe898c>
10109308:	a5001014 	ori	r20,r20,64
1010930c:	80c00007 	ldb	r3,0(r16)
10109310:	003d9d06 	br	10108988 <__alt_data_end+0xfffe8988>
10109314:	da802217 	ldw	r10,136(sp)
10109318:	d8001d85 	stb	zero,118(sp)
1010931c:	50c00204 	addi	r3,r10,8
10109320:	54800017 	ldw	r18,0(r10)
10109324:	54c00117 	ldw	r19,4(r10)
10109328:	4801ca16 	blt	r9,zero,10109a54 <___vfiprintf_internal_r+0x1248>
1010932c:	013fdfc4 	movi	r4,-129
10109330:	94c4b03a 	or	r2,r18,r19
10109334:	d8c02215 	stw	r3,136(sp)
10109338:	a128703a 	and	r20,r20,r4
1010933c:	0039883a 	mov	fp,zero
10109340:	103f341e 	bne	r2,zero,10109014 <__alt_data_end+0xfffe9014>
10109344:	483e2e26 	beq	r9,zero,10108c00 <__alt_data_end+0xfffe8c00>
10109348:	0025883a 	mov	r18,zero
1010934c:	94800c04 	addi	r18,r18,48
10109350:	dc8019c5 	stb	r18,103(sp)
10109354:	dcc02717 	ldw	r19,156(sp)
10109358:	dd4019c4 	addi	r21,sp,103
1010935c:	003e2b06 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109360:	21003fcc 	andi	r4,r4,255
10109364:	2002361e 	bne	r4,zero,10109c40 <___vfiprintf_internal_r+0x1434>
10109368:	1801c126 	beq	r3,zero,10109a70 <___vfiprintf_internal_r+0x1264>
1010936c:	04800044 	movi	r18,1
10109370:	d8c01005 	stb	r3,64(sp)
10109374:	d8001d85 	stb	zero,118(sp)
10109378:	9027883a 	mov	r19,r18
1010937c:	dd401004 	addi	r21,sp,64
10109380:	003f1106 	br	10108fc8 <__alt_data_end+0xfffe8fc8>
10109384:	d9402117 	ldw	r5,132(sp)
10109388:	d9002017 	ldw	r4,128(sp)
1010938c:	d9801a04 	addi	r6,sp,104
10109390:	d9c02b15 	stw	r7,172(sp)
10109394:	dbc02a15 	stw	r15,168(sp)
10109398:	01086f80 	call	101086f8 <__sprint_r.part.0>
1010939c:	d9c02b17 	ldw	r7,172(sp)
101093a0:	dbc02a17 	ldw	r15,168(sp)
101093a4:	10006d1e 	bne	r2,zero,1010955c <___vfiprintf_internal_r+0xd50>
101093a8:	d9801b17 	ldw	r6,108(sp)
101093ac:	d8801c17 	ldw	r2,112(sp)
101093b0:	d811883a 	mov	r8,sp
101093b4:	31400044 	addi	r5,r6,1
101093b8:	003e3306 	br	10108c88 <__alt_data_end+0xfffe8c88>
101093bc:	d9401b17 	ldw	r5,108(sp)
101093c0:	d8801c17 	ldw	r2,112(sp)
101093c4:	29000044 	addi	r4,r5,1
101093c8:	d8c01d87 	ldb	r3,118(sp)
101093cc:	183e4d26 	beq	r3,zero,10108d04 <__alt_data_end+0xfffe8d04>
101093d0:	00c00044 	movi	r3,1
101093d4:	d9401d84 	addi	r5,sp,118
101093d8:	10c5883a 	add	r2,r2,r3
101093dc:	41400015 	stw	r5,0(r8)
101093e0:	40c00115 	stw	r3,4(r8)
101093e4:	d8801c15 	stw	r2,112(sp)
101093e8:	d9001b15 	stw	r4,108(sp)
101093ec:	014001c4 	movi	r5,7
101093f0:	2900a90e 	bge	r5,r4,10109698 <___vfiprintf_internal_r+0xe8c>
101093f4:	1000da1e 	bne	r2,zero,10109760 <___vfiprintf_internal_r+0xf54>
101093f8:	7000ab1e 	bne	r14,zero,101096a8 <___vfiprintf_internal_r+0xe9c>
101093fc:	000b883a 	mov	r5,zero
10109400:	1809883a 	mov	r4,r3
10109404:	d811883a 	mov	r8,sp
10109408:	00c02004 	movi	r3,128
1010940c:	e0fe4d26 	beq	fp,r3,10108d44 <__alt_data_end+0xfffe8d44>
10109410:	4cf9c83a 	sub	fp,r9,r19
10109414:	073e7b0e 	bge	zero,fp,10108e04 <__alt_data_end+0xfffe8e04>
10109418:	01c00404 	movi	r7,16
1010941c:	3f01900e 	bge	r7,fp,10109a60 <___vfiprintf_internal_r+0x1254>
10109420:	00c40474 	movhi	r3,4113
10109424:	18c49404 	addi	r3,r3,4688
10109428:	d8c02415 	stw	r3,144(sp)
1010942c:	034001c4 	movi	r13,7
10109430:	00000506 	br	10109448 <___vfiprintf_internal_r+0xc3c>
10109434:	29000084 	addi	r4,r5,2
10109438:	42000204 	addi	r8,r8,8
1010943c:	180b883a 	mov	r5,r3
10109440:	e73ffc04 	addi	fp,fp,-16
10109444:	3f000d0e 	bge	r7,fp,1010947c <___vfiprintf_internal_r+0xc70>
10109448:	10800404 	addi	r2,r2,16
1010944c:	28c00044 	addi	r3,r5,1
10109450:	45c00015 	stw	r23,0(r8)
10109454:	41c00115 	stw	r7,4(r8)
10109458:	d8801c15 	stw	r2,112(sp)
1010945c:	d8c01b15 	stw	r3,108(sp)
10109460:	68fff40e 	bge	r13,r3,10109434 <__alt_data_end+0xfffe9434>
10109464:	1000101e 	bne	r2,zero,101094a8 <___vfiprintf_internal_r+0xc9c>
10109468:	e73ffc04 	addi	fp,fp,-16
1010946c:	01000044 	movi	r4,1
10109470:	000b883a 	mov	r5,zero
10109474:	d811883a 	mov	r8,sp
10109478:	3f3ff316 	blt	r7,fp,10109448 <__alt_data_end+0xfffe9448>
1010947c:	da802417 	ldw	r10,144(sp)
10109480:	1705883a 	add	r2,r2,fp
10109484:	47000115 	stw	fp,4(r8)
10109488:	42800015 	stw	r10,0(r8)
1010948c:	d8801c15 	stw	r2,112(sp)
10109490:	d9001b15 	stw	r4,108(sp)
10109494:	00c001c4 	movi	r3,7
10109498:	19003616 	blt	r3,r4,10109574 <___vfiprintf_internal_r+0xd68>
1010949c:	42000204 	addi	r8,r8,8
101094a0:	21000044 	addi	r4,r4,1
101094a4:	003e5706 	br	10108e04 <__alt_data_end+0xfffe8e04>
101094a8:	d9402117 	ldw	r5,132(sp)
101094ac:	d9002017 	ldw	r4,128(sp)
101094b0:	d9801a04 	addi	r6,sp,104
101094b4:	d9c02b15 	stw	r7,172(sp)
101094b8:	db402a15 	stw	r13,168(sp)
101094bc:	01086f80 	call	101086f8 <__sprint_r.part.0>
101094c0:	d9c02b17 	ldw	r7,172(sp)
101094c4:	db402a17 	ldw	r13,168(sp)
101094c8:	1000241e 	bne	r2,zero,1010955c <___vfiprintf_internal_r+0xd50>
101094cc:	d9401b17 	ldw	r5,108(sp)
101094d0:	d8801c17 	ldw	r2,112(sp)
101094d4:	d811883a 	mov	r8,sp
101094d8:	29000044 	addi	r4,r5,1
101094dc:	003fd806 	br	10109440 <__alt_data_end+0xfffe9440>
101094e0:	d9401b17 	ldw	r5,108(sp)
101094e4:	00c40474 	movhi	r3,4113
101094e8:	18c49804 	addi	r3,r3,4704
101094ec:	d8c02415 	stw	r3,144(sp)
101094f0:	29400044 	addi	r5,r5,1
101094f4:	d8c02417 	ldw	r3,144(sp)
101094f8:	14c5883a 	add	r2,r2,r19
101094fc:	44c00115 	stw	r19,4(r8)
10109500:	40c00015 	stw	r3,0(r8)
10109504:	d8801c15 	stw	r2,112(sp)
10109508:	d9401b15 	stw	r5,108(sp)
1010950c:	00c001c4 	movi	r3,7
10109510:	1940070e 	bge	r3,r5,10109530 <___vfiprintf_internal_r+0xd24>
10109514:	103e4826 	beq	r2,zero,10108e38 <__alt_data_end+0xfffe8e38>
10109518:	d9402117 	ldw	r5,132(sp)
1010951c:	d9002017 	ldw	r4,128(sp)
10109520:	d9801a04 	addi	r6,sp,104
10109524:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109528:	10000c1e 	bne	r2,zero,1010955c <___vfiprintf_internal_r+0xd50>
1010952c:	d8801c17 	ldw	r2,112(sp)
10109530:	8c80010e 	bge	r17,r18,10109538 <___vfiprintf_internal_r+0xd2c>
10109534:	9023883a 	mov	r17,r18
10109538:	da802317 	ldw	r10,140(sp)
1010953c:	5455883a 	add	r10,r10,r17
10109540:	da802315 	stw	r10,140(sp)
10109544:	103e4126 	beq	r2,zero,10108e4c <__alt_data_end+0xfffe8e4c>
10109548:	d9402117 	ldw	r5,132(sp)
1010954c:	d9002017 	ldw	r4,128(sp)
10109550:	d9801a04 	addi	r6,sp,104
10109554:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109558:	103e3c26 	beq	r2,zero,10108e4c <__alt_data_end+0xfffe8e4c>
1010955c:	dd002117 	ldw	r20,132(sp)
10109560:	a080030b 	ldhu	r2,12(r20)
10109564:	1080100c 	andi	r2,r2,64
10109568:	1001231e 	bne	r2,zero,101099f8 <___vfiprintf_internal_r+0x11ec>
1010956c:	d8802317 	ldw	r2,140(sp)
10109570:	003d7b06 	br	10108b60 <__alt_data_end+0xfffe8b60>
10109574:	1000991e 	bne	r2,zero,101097dc <___vfiprintf_internal_r+0xfd0>
10109578:	00c00044 	movi	r3,1
1010957c:	9805883a 	mov	r2,r19
10109580:	dd400015 	stw	r21,0(sp)
10109584:	dcc00115 	stw	r19,4(sp)
10109588:	dcc01c15 	stw	r19,112(sp)
1010958c:	d8c01b15 	stw	r3,108(sp)
10109590:	d811883a 	mov	r8,sp
10109594:	42000204 	addi	r8,r8,8
10109598:	a2c0010c 	andi	r11,r20,4
1010959c:	583fe426 	beq	r11,zero,10109530 <__alt_data_end+0xfffe9530>
101095a0:	8ca7c83a 	sub	r19,r17,r18
101095a4:	04ffe20e 	bge	zero,r19,10109530 <__alt_data_end+0xfffe9530>
101095a8:	01c00404 	movi	r7,16
101095ac:	3cffcc0e 	bge	r7,r19,101094e0 <__alt_data_end+0xfffe94e0>
101095b0:	02840474 	movhi	r10,4113
101095b4:	52849804 	addi	r10,r10,4704
101095b8:	d9001b17 	ldw	r4,108(sp)
101095bc:	da802415 	stw	r10,144(sp)
101095c0:	382b883a 	mov	r21,r7
101095c4:	050001c4 	movi	r20,7
101095c8:	df002017 	ldw	fp,128(sp)
101095cc:	00000506 	br	101095e4 <___vfiprintf_internal_r+0xdd8>
101095d0:	21400084 	addi	r5,r4,2
101095d4:	42000204 	addi	r8,r8,8
101095d8:	1809883a 	mov	r4,r3
101095dc:	9cfffc04 	addi	r19,r19,-16
101095e0:	acffc40e 	bge	r21,r19,101094f4 <__alt_data_end+0xfffe94f4>
101095e4:	10800404 	addi	r2,r2,16
101095e8:	20c00044 	addi	r3,r4,1
101095ec:	45800015 	stw	r22,0(r8)
101095f0:	45400115 	stw	r21,4(r8)
101095f4:	d8801c15 	stw	r2,112(sp)
101095f8:	d8c01b15 	stw	r3,108(sp)
101095fc:	a0fff40e 	bge	r20,r3,101095d0 <__alt_data_end+0xfffe95d0>
10109600:	1000041e 	bne	r2,zero,10109614 <___vfiprintf_internal_r+0xe08>
10109604:	01400044 	movi	r5,1
10109608:	0009883a 	mov	r4,zero
1010960c:	d811883a 	mov	r8,sp
10109610:	003ff206 	br	101095dc <__alt_data_end+0xfffe95dc>
10109614:	d9402117 	ldw	r5,132(sp)
10109618:	d9801a04 	addi	r6,sp,104
1010961c:	e009883a 	mov	r4,fp
10109620:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109624:	103fcd1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109628:	d9001b17 	ldw	r4,108(sp)
1010962c:	d8801c17 	ldw	r2,112(sp)
10109630:	d811883a 	mov	r8,sp
10109634:	21400044 	addi	r5,r4,1
10109638:	003fe806 	br	101095dc <__alt_data_end+0xfffe95dc>
1010963c:	d9402117 	ldw	r5,132(sp)
10109640:	d9002017 	ldw	r4,128(sp)
10109644:	d9801a04 	addi	r6,sp,104
10109648:	d9c02b15 	stw	r7,172(sp)
1010964c:	db402a15 	stw	r13,168(sp)
10109650:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109654:	d9c02b17 	ldw	r7,172(sp)
10109658:	db402a17 	ldw	r13,168(sp)
1010965c:	103fbf1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109660:	d9401b17 	ldw	r5,108(sp)
10109664:	d8801c17 	ldw	r2,112(sp)
10109668:	d811883a 	mov	r8,sp
1010966c:	29800044 	addi	r6,r5,1
10109670:	003dc406 	br	10108d84 <__alt_data_end+0xfffe8d84>
10109674:	1000d21e 	bne	r2,zero,101099c0 <___vfiprintf_internal_r+0x11b4>
10109678:	d8c01d87 	ldb	r3,118(sp)
1010967c:	18009526 	beq	r3,zero,101098d4 <___vfiprintf_internal_r+0x10c8>
10109680:	00800044 	movi	r2,1
10109684:	d8c01d84 	addi	r3,sp,118
10109688:	1009883a 	mov	r4,r2
1010968c:	d8c00015 	stw	r3,0(sp)
10109690:	d8800115 	stw	r2,4(sp)
10109694:	d811883a 	mov	r8,sp
10109698:	200b883a 	mov	r5,r4
1010969c:	42000204 	addi	r8,r8,8
101096a0:	21000044 	addi	r4,r4,1
101096a4:	003d9706 	br	10108d04 <__alt_data_end+0xfffe8d04>
101096a8:	d9001d04 	addi	r4,sp,116
101096ac:	00800084 	movi	r2,2
101096b0:	d9000015 	stw	r4,0(sp)
101096b4:	d8800115 	stw	r2,4(sp)
101096b8:	1809883a 	mov	r4,r3
101096bc:	d811883a 	mov	r8,sp
101096c0:	200b883a 	mov	r5,r4
101096c4:	42000204 	addi	r8,r8,8
101096c8:	21000044 	addi	r4,r4,1
101096cc:	003f4e06 	br	10109408 <__alt_data_end+0xfffe9408>
101096d0:	d8001d85 	stb	zero,118(sp)
101096d4:	48005016 	blt	r9,zero,10109818 <___vfiprintf_internal_r+0x100c>
101096d8:	00ffdfc4 	movi	r3,-129
101096dc:	94c4b03a 	or	r2,r18,r19
101096e0:	a0e8703a 	and	r20,r20,r3
101096e4:	103d4426 	beq	r2,zero,10108bf8 <__alt_data_end+0xfffe8bf8>
101096e8:	0039883a 	mov	fp,zero
101096ec:	d9002617 	ldw	r4,152(sp)
101096f0:	dd401a04 	addi	r21,sp,104
101096f4:	908003cc 	andi	r2,r18,15
101096f8:	9806973a 	slli	r3,r19,28
101096fc:	2085883a 	add	r2,r4,r2
10109700:	9024d13a 	srli	r18,r18,4
10109704:	10800003 	ldbu	r2,0(r2)
10109708:	9826d13a 	srli	r19,r19,4
1010970c:	ad7fffc4 	addi	r21,r21,-1
10109710:	1ca4b03a 	or	r18,r3,r18
10109714:	a8800005 	stb	r2,0(r21)
10109718:	94c4b03a 	or	r2,r18,r19
1010971c:	103ff51e 	bne	r2,zero,101096f4 <__alt_data_end+0xfffe96f4>
10109720:	003e5906 	br	10109088 <__alt_data_end+0xfffe9088>
10109724:	d9402117 	ldw	r5,132(sp)
10109728:	d9002017 	ldw	r4,128(sp)
1010972c:	d9801a04 	addi	r6,sp,104
10109730:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109734:	103f891e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109738:	d8801c17 	ldw	r2,112(sp)
1010973c:	d811883a 	mov	r8,sp
10109740:	003f9506 	br	10109598 <__alt_data_end+0xfffe9598>
10109744:	d9402117 	ldw	r5,132(sp)
10109748:	d9002017 	ldw	r4,128(sp)
1010974c:	d9801a04 	addi	r6,sp,104
10109750:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109754:	103f811e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109758:	d811883a 	mov	r8,sp
1010975c:	003ced06 	br	10108b14 <__alt_data_end+0xfffe8b14>
10109760:	d9402117 	ldw	r5,132(sp)
10109764:	d9002017 	ldw	r4,128(sp)
10109768:	d9801a04 	addi	r6,sp,104
1010976c:	da402c15 	stw	r9,176(sp)
10109770:	db802a15 	stw	r14,168(sp)
10109774:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109778:	da402c17 	ldw	r9,176(sp)
1010977c:	db802a17 	ldw	r14,168(sp)
10109780:	103f761e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109784:	d9401b17 	ldw	r5,108(sp)
10109788:	d8801c17 	ldw	r2,112(sp)
1010978c:	d811883a 	mov	r8,sp
10109790:	29000044 	addi	r4,r5,1
10109794:	003d5b06 	br	10108d04 <__alt_data_end+0xfffe8d04>
10109798:	d9402117 	ldw	r5,132(sp)
1010979c:	d9002017 	ldw	r4,128(sp)
101097a0:	d9801a04 	addi	r6,sp,104
101097a4:	da402c15 	stw	r9,176(sp)
101097a8:	01086f80 	call	101086f8 <__sprint_r.part.0>
101097ac:	da402c17 	ldw	r9,176(sp)
101097b0:	103f6a1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
101097b4:	d9401b17 	ldw	r5,108(sp)
101097b8:	d8801c17 	ldw	r2,112(sp)
101097bc:	d811883a 	mov	r8,sp
101097c0:	29000044 	addi	r4,r5,1
101097c4:	003f1006 	br	10109408 <__alt_data_end+0xfffe9408>
101097c8:	1000c31e 	bne	r2,zero,10109ad8 <___vfiprintf_internal_r+0x12cc>
101097cc:	01000044 	movi	r4,1
101097d0:	000b883a 	mov	r5,zero
101097d4:	d811883a 	mov	r8,sp
101097d8:	003f0d06 	br	10109410 <__alt_data_end+0xfffe9410>
101097dc:	d9402117 	ldw	r5,132(sp)
101097e0:	d9002017 	ldw	r4,128(sp)
101097e4:	d9801a04 	addi	r6,sp,104
101097e8:	01086f80 	call	101086f8 <__sprint_r.part.0>
101097ec:	103f5b1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
101097f0:	d9001b17 	ldw	r4,108(sp)
101097f4:	d8801c17 	ldw	r2,112(sp)
101097f8:	d811883a 	mov	r8,sp
101097fc:	21000044 	addi	r4,r4,1
10109800:	003d8006 	br	10108e04 <__alt_data_end+0xfffe8e04>
10109804:	01040474 	movhi	r4,4113
10109808:	21043404 	addi	r4,r4,4304
1010980c:	d9002615 	stw	r4,152(sp)
10109810:	d8c02215 	stw	r3,136(sp)
10109814:	1029883a 	mov	r20,r2
10109818:	94c4b03a 	or	r2,r18,r19
1010981c:	103fb21e 	bne	r2,zero,101096e8 <__alt_data_end+0xfffe96e8>
10109820:	0039883a 	mov	fp,zero
10109824:	00800084 	movi	r2,2
10109828:	003e6b06 	br	101091d8 <__alt_data_end+0xfffe91d8>
1010982c:	da802217 	ldw	r10,136(sp)
10109830:	d8001d85 	stb	zero,118(sp)
10109834:	0027883a 	mov	r19,zero
10109838:	50800104 	addi	r2,r10,4
1010983c:	54800017 	ldw	r18,0(r10)
10109840:	483e6016 	blt	r9,zero,101091c4 <__alt_data_end+0xfffe91c4>
10109844:	00ffdfc4 	movi	r3,-129
10109848:	d8802215 	stw	r2,136(sp)
1010984c:	a0e8703a 	and	r20,r20,r3
10109850:	0039883a 	mov	fp,zero
10109854:	903ebb26 	beq	r18,zero,10109344 <__alt_data_end+0xfffe9344>
10109858:	00800244 	movi	r2,9
1010985c:	14bdee36 	bltu	r2,r18,10109018 <__alt_data_end+0xfffe9018>
10109860:	003eba06 	br	1010934c <__alt_data_end+0xfffe934c>
10109864:	00800c04 	movi	r2,48
10109868:	d8c01d45 	stb	r3,117(sp)
1010986c:	d8801d05 	stb	r2,116(sp)
10109870:	d8001d85 	stb	zero,118(sp)
10109874:	a0c00094 	ori	r3,r20,2
10109878:	4800a916 	blt	r9,zero,10109b20 <___vfiprintf_internal_r+0x1314>
1010987c:	00bfdfc4 	movi	r2,-129
10109880:	a096703a 	and	r11,r20,r2
10109884:	5d000094 	ori	r20,r11,2
10109888:	0039883a 	mov	fp,zero
1010988c:	003f9706 	br	101096ec <__alt_data_end+0xfffe96ec>
10109890:	8025883a 	mov	r18,r16
10109894:	003c2e06 	br	10108950 <__alt_data_end+0xfffe8950>
10109898:	00840474 	movhi	r2,4113
1010989c:	10843404 	addi	r2,r2,4304
101098a0:	0039883a 	mov	fp,zero
101098a4:	d8802615 	stw	r2,152(sp)
101098a8:	003f9006 	br	101096ec <__alt_data_end+0xfffe96ec>
101098ac:	04a5c83a 	sub	r18,zero,r18
101098b0:	07000b44 	movi	fp,45
101098b4:	9004c03a 	cmpne	r2,r18,zero
101098b8:	04e7c83a 	sub	r19,zero,r19
101098bc:	df001d85 	stb	fp,118(sp)
101098c0:	98a7c83a 	sub	r19,r19,r2
101098c4:	48009f16 	blt	r9,zero,10109b44 <___vfiprintf_internal_r+0x1338>
101098c8:	00bfdfc4 	movi	r2,-129
101098cc:	a0a8703a 	and	r20,r20,r2
101098d0:	003dd006 	br	10109014 <__alt_data_end+0xfffe9014>
101098d4:	70004c26 	beq	r14,zero,10109a08 <___vfiprintf_internal_r+0x11fc>
101098d8:	00800084 	movi	r2,2
101098dc:	d8c01d04 	addi	r3,sp,116
101098e0:	d8c00015 	stw	r3,0(sp)
101098e4:	d8800115 	stw	r2,4(sp)
101098e8:	01000044 	movi	r4,1
101098ec:	d811883a 	mov	r8,sp
101098f0:	003f7306 	br	101096c0 <__alt_data_end+0xfffe96c0>
101098f4:	a080100c 	andi	r2,r20,64
101098f8:	da802217 	ldw	r10,136(sp)
101098fc:	103e0626 	beq	r2,zero,10109118 <__alt_data_end+0xfffe9118>
10109900:	5480000f 	ldh	r18,0(r10)
10109904:	52800104 	addi	r10,r10,4
10109908:	da802215 	stw	r10,136(sp)
1010990c:	9027d7fa 	srai	r19,r18,31
10109910:	9805883a 	mov	r2,r19
10109914:	003db806 	br	10108ff8 <__alt_data_end+0xfffe8ff8>
10109918:	a080040c 	andi	r2,r20,16
1010991c:	1000091e 	bne	r2,zero,10109944 <___vfiprintf_internal_r+0x1138>
10109920:	a2c0100c 	andi	r11,r20,64
10109924:	58000726 	beq	r11,zero,10109944 <___vfiprintf_internal_r+0x1138>
10109928:	da802217 	ldw	r10,136(sp)
1010992c:	50800017 	ldw	r2,0(r10)
10109930:	52800104 	addi	r10,r10,4
10109934:	da802215 	stw	r10,136(sp)
10109938:	da802317 	ldw	r10,140(sp)
1010993c:	1280000d 	sth	r10,0(r2)
10109940:	003be706 	br	101088e0 <__alt_data_end+0xfffe88e0>
10109944:	da802217 	ldw	r10,136(sp)
10109948:	50800017 	ldw	r2,0(r10)
1010994c:	52800104 	addi	r10,r10,4
10109950:	da802215 	stw	r10,136(sp)
10109954:	da802317 	ldw	r10,140(sp)
10109958:	12800015 	stw	r10,0(r2)
1010995c:	003be006 	br	101088e0 <__alt_data_end+0xfffe88e0>
10109960:	a080100c 	andi	r2,r20,64
10109964:	da802217 	ldw	r10,136(sp)
10109968:	10003026 	beq	r2,zero,10109a2c <___vfiprintf_internal_r+0x1220>
1010996c:	5480000b 	ldhu	r18,0(r10)
10109970:	52800104 	addi	r10,r10,4
10109974:	0027883a 	mov	r19,zero
10109978:	da802215 	stw	r10,136(sp)
1010997c:	003d8006 	br	10108f80 <__alt_data_end+0xfffe8f80>
10109980:	80c00007 	ldb	r3,0(r16)
10109984:	003c0006 	br	10108988 <__alt_data_end+0xfffe8988>
10109988:	a080100c 	andi	r2,r20,64
1010998c:	d8001d85 	stb	zero,118(sp)
10109990:	da802217 	ldw	r10,136(sp)
10109994:	1000201e 	bne	r2,zero,10109a18 <___vfiprintf_internal_r+0x120c>
10109998:	50800104 	addi	r2,r10,4
1010999c:	54800017 	ldw	r18,0(r10)
101099a0:	0027883a 	mov	r19,zero
101099a4:	483def0e 	bge	r9,zero,10109164 <__alt_data_end+0xfffe9164>
101099a8:	94c6b03a 	or	r3,r18,r19
101099ac:	d8802215 	stw	r2,136(sp)
101099b0:	183d4e1e 	bne	r3,zero,10108eec <__alt_data_end+0xfffe8eec>
101099b4:	0039883a 	mov	fp,zero
101099b8:	0005883a 	mov	r2,zero
101099bc:	003e0606 	br	101091d8 <__alt_data_end+0xfffe91d8>
101099c0:	d9402117 	ldw	r5,132(sp)
101099c4:	d9002017 	ldw	r4,128(sp)
101099c8:	d9801a04 	addi	r6,sp,104
101099cc:	da402c15 	stw	r9,176(sp)
101099d0:	db802a15 	stw	r14,168(sp)
101099d4:	01086f80 	call	101086f8 <__sprint_r.part.0>
101099d8:	da402c17 	ldw	r9,176(sp)
101099dc:	db802a17 	ldw	r14,168(sp)
101099e0:	103ede1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
101099e4:	d9401b17 	ldw	r5,108(sp)
101099e8:	d8801c17 	ldw	r2,112(sp)
101099ec:	d811883a 	mov	r8,sp
101099f0:	29000044 	addi	r4,r5,1
101099f4:	003e7406 	br	101093c8 <__alt_data_end+0xfffe93c8>
101099f8:	00bfffc4 	movi	r2,-1
101099fc:	003c5806 	br	10108b60 <__alt_data_end+0xfffe8b60>
10109a00:	d811883a 	mov	r8,sp
10109a04:	003ee806 	br	101095a8 <__alt_data_end+0xfffe95a8>
10109a08:	000b883a 	mov	r5,zero
10109a0c:	01000044 	movi	r4,1
10109a10:	d811883a 	mov	r8,sp
10109a14:	003e7c06 	br	10109408 <__alt_data_end+0xfffe9408>
10109a18:	50800104 	addi	r2,r10,4
10109a1c:	5480000b 	ldhu	r18,0(r10)
10109a20:	0027883a 	mov	r19,zero
10109a24:	483dcf0e 	bge	r9,zero,10109164 <__alt_data_end+0xfffe9164>
10109a28:	003fdf06 	br	101099a8 <__alt_data_end+0xfffe99a8>
10109a2c:	54800017 	ldw	r18,0(r10)
10109a30:	52800104 	addi	r10,r10,4
10109a34:	0027883a 	mov	r19,zero
10109a38:	da802215 	stw	r10,136(sp)
10109a3c:	003d5006 	br	10108f80 <__alt_data_end+0xfffe8f80>
10109a40:	50800104 	addi	r2,r10,4
10109a44:	5480000b 	ldhu	r18,0(r10)
10109a48:	0027883a 	mov	r19,zero
10109a4c:	483f7d0e 	bge	r9,zero,10109844 <__alt_data_end+0xfffe9844>
10109a50:	003ddc06 	br	101091c4 <__alt_data_end+0xfffe91c4>
10109a54:	d8c02215 	stw	r3,136(sp)
10109a58:	0039883a 	mov	fp,zero
10109a5c:	003ddb06 	br	101091cc <__alt_data_end+0xfffe91cc>
10109a60:	02840474 	movhi	r10,4113
10109a64:	52849404 	addi	r10,r10,4688
10109a68:	da802415 	stw	r10,144(sp)
10109a6c:	003e8306 	br	1010947c <__alt_data_end+0xfffe947c>
10109a70:	d8801c17 	ldw	r2,112(sp)
10109a74:	dd002117 	ldw	r20,132(sp)
10109a78:	103eb926 	beq	r2,zero,10109560 <__alt_data_end+0xfffe9560>
10109a7c:	d9002017 	ldw	r4,128(sp)
10109a80:	d9801a04 	addi	r6,sp,104
10109a84:	a00b883a 	mov	r5,r20
10109a88:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109a8c:	003eb406 	br	10109560 <__alt_data_end+0xfffe9560>
10109a90:	80c00043 	ldbu	r3,1(r16)
10109a94:	a5000814 	ori	r20,r20,32
10109a98:	84000044 	addi	r16,r16,1
10109a9c:	18c03fcc 	andi	r3,r3,255
10109aa0:	18c0201c 	xori	r3,r3,128
10109aa4:	18ffe004 	addi	r3,r3,-128
10109aa8:	003bb706 	br	10108988 <__alt_data_end+0xfffe8988>
10109aac:	a809883a 	mov	r4,r21
10109ab0:	d8c02a15 	stw	r3,168(sp)
10109ab4:	da002b15 	stw	r8,172(sp)
10109ab8:	01086600 	call	10108660 <strlen>
10109abc:	d8c02a17 	ldw	r3,168(sp)
10109ac0:	1027883a 	mov	r19,r2
10109ac4:	df001d83 	ldbu	fp,118(sp)
10109ac8:	d8c02215 	stw	r3,136(sp)
10109acc:	0013883a 	mov	r9,zero
10109ad0:	da002b17 	ldw	r8,172(sp)
10109ad4:	003c4d06 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109ad8:	d9402117 	ldw	r5,132(sp)
10109adc:	d9002017 	ldw	r4,128(sp)
10109ae0:	d9801a04 	addi	r6,sp,104
10109ae4:	da402c15 	stw	r9,176(sp)
10109ae8:	01086f80 	call	101086f8 <__sprint_r.part.0>
10109aec:	da402c17 	ldw	r9,176(sp)
10109af0:	103e9a1e 	bne	r2,zero,1010955c <__alt_data_end+0xfffe955c>
10109af4:	d9401b17 	ldw	r5,108(sp)
10109af8:	d8801c17 	ldw	r2,112(sp)
10109afc:	d811883a 	mov	r8,sp
10109b00:	29000044 	addi	r4,r5,1
10109b04:	003e4206 	br	10109410 <__alt_data_end+0xfffe9410>
10109b08:	d9401b17 	ldw	r5,108(sp)
10109b0c:	01040474 	movhi	r4,4113
10109b10:	21049804 	addi	r4,r4,4704
10109b14:	d9002415 	stw	r4,144(sp)
10109b18:	29400044 	addi	r5,r5,1
10109b1c:	003c6d06 	br	10108cd4 <__alt_data_end+0xfffe8cd4>
10109b20:	0039883a 	mov	fp,zero
10109b24:	00800084 	movi	r2,2
10109b28:	10803fcc 	andi	r2,r2,255
10109b2c:	01000044 	movi	r4,1
10109b30:	11001e26 	beq	r2,r4,10109bac <___vfiprintf_internal_r+0x13a0>
10109b34:	01000084 	movi	r4,2
10109b38:	11001e1e 	bne	r2,r4,10109bb4 <___vfiprintf_internal_r+0x13a8>
10109b3c:	1829883a 	mov	r20,r3
10109b40:	003eea06 	br	101096ec <__alt_data_end+0xfffe96ec>
10109b44:	a007883a 	mov	r3,r20
10109b48:	00800044 	movi	r2,1
10109b4c:	003ff606 	br	10109b28 <__alt_data_end+0xfffe9b28>
10109b50:	00800184 	movi	r2,6
10109b54:	1240012e 	bgeu	r2,r9,10109b5c <___vfiprintf_internal_r+0x1350>
10109b58:	1013883a 	mov	r9,r2
10109b5c:	4827883a 	mov	r19,r9
10109b60:	4825883a 	mov	r18,r9
10109b64:	48001516 	blt	r9,zero,10109bbc <___vfiprintf_internal_r+0x13b0>
10109b68:	05440474 	movhi	r21,4113
10109b6c:	d8c02215 	stw	r3,136(sp)
10109b70:	ad443904 	addi	r21,r21,4324
10109b74:	003d1406 	br	10108fc8 <__alt_data_end+0xfffe8fc8>
10109b78:	02840474 	movhi	r10,4113
10109b7c:	52849404 	addi	r10,r10,4688
10109b80:	da802415 	stw	r10,144(sp)
10109b84:	200d883a 	mov	r6,r4
10109b88:	003c9106 	br	10108dd0 <__alt_data_end+0xfffe8dd0>
10109b8c:	5021883a 	mov	r16,r10
10109b90:	0013883a 	mov	r9,zero
10109b94:	003b7d06 	br	1010898c <__alt_data_end+0xfffe898c>
10109b98:	4827883a 	mov	r19,r9
10109b9c:	df001d83 	ldbu	fp,118(sp)
10109ba0:	d8c02215 	stw	r3,136(sp)
10109ba4:	0013883a 	mov	r9,zero
10109ba8:	003c1806 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109bac:	1829883a 	mov	r20,r3
10109bb0:	003d1806 	br	10109014 <__alt_data_end+0xfffe9014>
10109bb4:	1829883a 	mov	r20,r3
10109bb8:	003ccd06 	br	10108ef0 <__alt_data_end+0xfffe8ef0>
10109bbc:	0025883a 	mov	r18,zero
10109bc0:	003fe906 	br	10109b68 <__alt_data_end+0xfffe9b68>
10109bc4:	d8802217 	ldw	r2,136(sp)
10109bc8:	80c00043 	ldbu	r3,1(r16)
10109bcc:	5021883a 	mov	r16,r10
10109bd0:	12400017 	ldw	r9,0(r2)
10109bd4:	10800104 	addi	r2,r2,4
10109bd8:	d8802215 	stw	r2,136(sp)
10109bdc:	483faf0e 	bge	r9,zero,10109a9c <__alt_data_end+0xfffe9a9c>
10109be0:	18c03fcc 	andi	r3,r3,255
10109be4:	18c0201c 	xori	r3,r3,128
10109be8:	027fffc4 	movi	r9,-1
10109bec:	18ffe004 	addi	r3,r3,-128
10109bf0:	003b6506 	br	10108988 <__alt_data_end+0xfffe8988>
10109bf4:	d9c01d85 	stb	r7,118(sp)
10109bf8:	003ca006 	br	10108e7c <__alt_data_end+0xfffe8e7c>
10109bfc:	d9c01d85 	stb	r7,118(sp)
10109c00:	003cad06 	br	10108eb8 <__alt_data_end+0xfffe8eb8>
10109c04:	d9c01d85 	stb	r7,118(sp)
10109c08:	003d7d06 	br	10109200 <__alt_data_end+0xfffe9200>
10109c0c:	d9c01d85 	stb	r7,118(sp)
10109c10:	003d5f06 	br	10109190 <__alt_data_end+0xfffe9190>
10109c14:	a080004c 	andi	r2,r20,1
10109c18:	0039883a 	mov	fp,zero
10109c1c:	10000526 	beq	r2,zero,10109c34 <___vfiprintf_internal_r+0x1428>
10109c20:	00800c04 	movi	r2,48
10109c24:	d88019c5 	stb	r2,103(sp)
10109c28:	dcc02717 	ldw	r19,156(sp)
10109c2c:	dd4019c4 	addi	r21,sp,103
10109c30:	003bf606 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109c34:	0027883a 	mov	r19,zero
10109c38:	dd401a04 	addi	r21,sp,104
10109c3c:	003bf306 	br	10108c0c <__alt_data_end+0xfffe8c0c>
10109c40:	d9c01d85 	stb	r7,118(sp)
10109c44:	003dc806 	br	10109368 <__alt_data_end+0xfffe9368>
10109c48:	d9c01d85 	stb	r7,118(sp)
10109c4c:	003d3a06 	br	10109138 <__alt_data_end+0xfffe9138>
10109c50:	d9c01d85 	stb	r7,118(sp)
10109c54:	003d2a06 	br	10109100 <__alt_data_end+0xfffe9100>
10109c58:	d9c01d85 	stb	r7,118(sp)
10109c5c:	003cde06 	br	10108fd8 <__alt_data_end+0xfffe8fd8>
10109c60:	d9c01d85 	stb	r7,118(sp)
10109c64:	003cbc06 	br	10108f58 <__alt_data_end+0xfffe8f58>

10109c68 <__vfiprintf_internal>:
10109c68:	00840474 	movhi	r2,4113
10109c6c:	108ba404 	addi	r2,r2,11920
10109c70:	300f883a 	mov	r7,r6
10109c74:	280d883a 	mov	r6,r5
10109c78:	200b883a 	mov	r5,r4
10109c7c:	11000017 	ldw	r4,0(r2)
10109c80:	010880c1 	jmpi	1010880c <___vfiprintf_internal_r>

10109c84 <__sbprintf>:
10109c84:	2880030b 	ldhu	r2,12(r5)
10109c88:	2ac01917 	ldw	r11,100(r5)
10109c8c:	2a80038b 	ldhu	r10,14(r5)
10109c90:	2a400717 	ldw	r9,28(r5)
10109c94:	2a000917 	ldw	r8,36(r5)
10109c98:	defee204 	addi	sp,sp,-1144
10109c9c:	00c10004 	movi	r3,1024
10109ca0:	dc011a15 	stw	r16,1128(sp)
10109ca4:	10bfff4c 	andi	r2,r2,65533
10109ca8:	2821883a 	mov	r16,r5
10109cac:	d8cb883a 	add	r5,sp,r3
10109cb0:	dc811c15 	stw	r18,1136(sp)
10109cb4:	dc411b15 	stw	r17,1132(sp)
10109cb8:	dfc11d15 	stw	ra,1140(sp)
10109cbc:	2025883a 	mov	r18,r4
10109cc0:	d881030d 	sth	r2,1036(sp)
10109cc4:	dac11915 	stw	r11,1124(sp)
10109cc8:	da81038d 	sth	r10,1038(sp)
10109ccc:	da410715 	stw	r9,1052(sp)
10109cd0:	da010915 	stw	r8,1060(sp)
10109cd4:	dec10015 	stw	sp,1024(sp)
10109cd8:	dec10415 	stw	sp,1040(sp)
10109cdc:	d8c10215 	stw	r3,1032(sp)
10109ce0:	d8c10515 	stw	r3,1044(sp)
10109ce4:	d8010615 	stw	zero,1048(sp)
10109ce8:	010880c0 	call	1010880c <___vfiprintf_internal_r>
10109cec:	1023883a 	mov	r17,r2
10109cf0:	10000416 	blt	r2,zero,10109d04 <__sbprintf+0x80>
10109cf4:	d9410004 	addi	r5,sp,1024
10109cf8:	9009883a 	mov	r4,r18
10109cfc:	01063600 	call	10106360 <_fflush_r>
10109d00:	10000d1e 	bne	r2,zero,10109d38 <__sbprintf+0xb4>
10109d04:	d881030b 	ldhu	r2,1036(sp)
10109d08:	1080100c 	andi	r2,r2,64
10109d0c:	10000326 	beq	r2,zero,10109d1c <__sbprintf+0x98>
10109d10:	8080030b 	ldhu	r2,12(r16)
10109d14:	10801014 	ori	r2,r2,64
10109d18:	8080030d 	sth	r2,12(r16)
10109d1c:	8805883a 	mov	r2,r17
10109d20:	dfc11d17 	ldw	ra,1140(sp)
10109d24:	dc811c17 	ldw	r18,1136(sp)
10109d28:	dc411b17 	ldw	r17,1132(sp)
10109d2c:	dc011a17 	ldw	r16,1128(sp)
10109d30:	dec11e04 	addi	sp,sp,1144
10109d34:	f800283a 	ret
10109d38:	047fffc4 	movi	r17,-1
10109d3c:	003ff106 	br	10109d04 <__alt_data_end+0xfffe9d04>

10109d40 <_calloc_r>:
10109d40:	298b383a 	mul	r5,r5,r6
10109d44:	defffe04 	addi	sp,sp,-8
10109d48:	dfc00115 	stw	ra,4(sp)
10109d4c:	dc000015 	stw	r16,0(sp)
10109d50:	01016340 	call	10101634 <_malloc_r>
10109d54:	10002926 	beq	r2,zero,10109dfc <_calloc_r+0xbc>
10109d58:	11bfff17 	ldw	r6,-4(r2)
10109d5c:	1021883a 	mov	r16,r2
10109d60:	00bfff04 	movi	r2,-4
10109d64:	308c703a 	and	r6,r6,r2
10109d68:	00c00904 	movi	r3,36
10109d6c:	308d883a 	add	r6,r6,r2
10109d70:	19801636 	bltu	r3,r6,10109dcc <_calloc_r+0x8c>
10109d74:	008004c4 	movi	r2,19
10109d78:	11800b2e 	bgeu	r2,r6,10109da8 <_calloc_r+0x68>
10109d7c:	80000015 	stw	zero,0(r16)
10109d80:	80000115 	stw	zero,4(r16)
10109d84:	008006c4 	movi	r2,27
10109d88:	11801a2e 	bgeu	r2,r6,10109df4 <_calloc_r+0xb4>
10109d8c:	80000215 	stw	zero,8(r16)
10109d90:	80000315 	stw	zero,12(r16)
10109d94:	30c0151e 	bne	r6,r3,10109dec <_calloc_r+0xac>
10109d98:	80000415 	stw	zero,16(r16)
10109d9c:	80800604 	addi	r2,r16,24
10109da0:	80000515 	stw	zero,20(r16)
10109da4:	00000106 	br	10109dac <_calloc_r+0x6c>
10109da8:	8005883a 	mov	r2,r16
10109dac:	10000015 	stw	zero,0(r2)
10109db0:	10000115 	stw	zero,4(r2)
10109db4:	10000215 	stw	zero,8(r2)
10109db8:	8005883a 	mov	r2,r16
10109dbc:	dfc00117 	ldw	ra,4(sp)
10109dc0:	dc000017 	ldw	r16,0(sp)
10109dc4:	dec00204 	addi	sp,sp,8
10109dc8:	f800283a 	ret
10109dcc:	000b883a 	mov	r5,zero
10109dd0:	8009883a 	mov	r4,r16
10109dd4:	0101e400 	call	10101e40 <memset>
10109dd8:	8005883a 	mov	r2,r16
10109ddc:	dfc00117 	ldw	ra,4(sp)
10109de0:	dc000017 	ldw	r16,0(sp)
10109de4:	dec00204 	addi	sp,sp,8
10109de8:	f800283a 	ret
10109dec:	80800404 	addi	r2,r16,16
10109df0:	003fee06 	br	10109dac <__alt_data_end+0xfffe9dac>
10109df4:	80800204 	addi	r2,r16,8
10109df8:	003fec06 	br	10109dac <__alt_data_end+0xfffe9dac>
10109dfc:	0005883a 	mov	r2,zero
10109e00:	003fee06 	br	10109dbc <__alt_data_end+0xfffe9dbc>

10109e04 <_fclose_r>:
10109e04:	28003926 	beq	r5,zero,10109eec <_fclose_r+0xe8>
10109e08:	defffc04 	addi	sp,sp,-16
10109e0c:	dc400115 	stw	r17,4(sp)
10109e10:	dc000015 	stw	r16,0(sp)
10109e14:	dfc00315 	stw	ra,12(sp)
10109e18:	dc800215 	stw	r18,8(sp)
10109e1c:	2023883a 	mov	r17,r4
10109e20:	2821883a 	mov	r16,r5
10109e24:	20000226 	beq	r4,zero,10109e30 <_fclose_r+0x2c>
10109e28:	20800e17 	ldw	r2,56(r4)
10109e2c:	10002726 	beq	r2,zero,10109ecc <_fclose_r+0xc8>
10109e30:	8080030f 	ldh	r2,12(r16)
10109e34:	1000071e 	bne	r2,zero,10109e54 <_fclose_r+0x50>
10109e38:	0005883a 	mov	r2,zero
10109e3c:	dfc00317 	ldw	ra,12(sp)
10109e40:	dc800217 	ldw	r18,8(sp)
10109e44:	dc400117 	ldw	r17,4(sp)
10109e48:	dc000017 	ldw	r16,0(sp)
10109e4c:	dec00404 	addi	sp,sp,16
10109e50:	f800283a 	ret
10109e54:	800b883a 	mov	r5,r16
10109e58:	8809883a 	mov	r4,r17
10109e5c:	01061440 	call	10106144 <__sflush_r>
10109e60:	1025883a 	mov	r18,r2
10109e64:	80800b17 	ldw	r2,44(r16)
10109e68:	10000426 	beq	r2,zero,10109e7c <_fclose_r+0x78>
10109e6c:	81400717 	ldw	r5,28(r16)
10109e70:	8809883a 	mov	r4,r17
10109e74:	103ee83a 	callr	r2
10109e78:	10001616 	blt	r2,zero,10109ed4 <_fclose_r+0xd0>
10109e7c:	8080030b 	ldhu	r2,12(r16)
10109e80:	1080200c 	andi	r2,r2,128
10109e84:	1000151e 	bne	r2,zero,10109edc <_fclose_r+0xd8>
10109e88:	81400c17 	ldw	r5,48(r16)
10109e8c:	28000526 	beq	r5,zero,10109ea4 <_fclose_r+0xa0>
10109e90:	80801004 	addi	r2,r16,64
10109e94:	28800226 	beq	r5,r2,10109ea0 <_fclose_r+0x9c>
10109e98:	8809883a 	mov	r4,r17
10109e9c:	010695c0 	call	1010695c <_free_r>
10109ea0:	80000c15 	stw	zero,48(r16)
10109ea4:	81401117 	ldw	r5,68(r16)
10109ea8:	28000326 	beq	r5,zero,10109eb8 <_fclose_r+0xb4>
10109eac:	8809883a 	mov	r4,r17
10109eb0:	010695c0 	call	1010695c <_free_r>
10109eb4:	80001115 	stw	zero,68(r16)
10109eb8:	010674c0 	call	1010674c <__sfp_lock_acquire>
10109ebc:	8000030d 	sth	zero,12(r16)
10109ec0:	01067500 	call	10106750 <__sfp_lock_release>
10109ec4:	9005883a 	mov	r2,r18
10109ec8:	003fdc06 	br	10109e3c <__alt_data_end+0xfffe9e3c>
10109ecc:	010673c0 	call	1010673c <__sinit>
10109ed0:	003fd706 	br	10109e30 <__alt_data_end+0xfffe9e30>
10109ed4:	04bfffc4 	movi	r18,-1
10109ed8:	003fe806 	br	10109e7c <__alt_data_end+0xfffe9e7c>
10109edc:	81400417 	ldw	r5,16(r16)
10109ee0:	8809883a 	mov	r4,r17
10109ee4:	010695c0 	call	1010695c <_free_r>
10109ee8:	003fe706 	br	10109e88 <__alt_data_end+0xfffe9e88>
10109eec:	0005883a 	mov	r2,zero
10109ef0:	f800283a 	ret

10109ef4 <fclose>:
10109ef4:	00840474 	movhi	r2,4113
10109ef8:	108ba404 	addi	r2,r2,11920
10109efc:	200b883a 	mov	r5,r4
10109f00:	11000017 	ldw	r4,0(r2)
10109f04:	0109e041 	jmpi	10109e04 <_fclose_r>

10109f08 <__fputwc>:
10109f08:	defff804 	addi	sp,sp,-32
10109f0c:	dcc00415 	stw	r19,16(sp)
10109f10:	dc800315 	stw	r18,12(sp)
10109f14:	dc000115 	stw	r16,4(sp)
10109f18:	dfc00715 	stw	ra,28(sp)
10109f1c:	dd400615 	stw	r21,24(sp)
10109f20:	dd000515 	stw	r20,20(sp)
10109f24:	dc400215 	stw	r17,8(sp)
10109f28:	2027883a 	mov	r19,r4
10109f2c:	2825883a 	mov	r18,r5
10109f30:	3021883a 	mov	r16,r6
10109f34:	0106ed00 	call	10106ed0 <__locale_mb_cur_max>
10109f38:	00c00044 	movi	r3,1
10109f3c:	10c03e26 	beq	r2,r3,1010a038 <__fputwc+0x130>
10109f40:	81c01704 	addi	r7,r16,92
10109f44:	900d883a 	mov	r6,r18
10109f48:	d80b883a 	mov	r5,sp
10109f4c:	9809883a 	mov	r4,r19
10109f50:	010ade40 	call	1010ade4 <_wcrtomb_r>
10109f54:	1029883a 	mov	r20,r2
10109f58:	00bfffc4 	movi	r2,-1
10109f5c:	a0802026 	beq	r20,r2,10109fe0 <__fputwc+0xd8>
10109f60:	d9400003 	ldbu	r5,0(sp)
10109f64:	a0001c26 	beq	r20,zero,10109fd8 <__fputwc+0xd0>
10109f68:	0023883a 	mov	r17,zero
10109f6c:	05400284 	movi	r21,10
10109f70:	00000906 	br	10109f98 <__fputwc+0x90>
10109f74:	80800017 	ldw	r2,0(r16)
10109f78:	11400005 	stb	r5,0(r2)
10109f7c:	80c00017 	ldw	r3,0(r16)
10109f80:	18c00044 	addi	r3,r3,1
10109f84:	80c00015 	stw	r3,0(r16)
10109f88:	8c400044 	addi	r17,r17,1
10109f8c:	dc45883a 	add	r2,sp,r17
10109f90:	8d00112e 	bgeu	r17,r20,10109fd8 <__fputwc+0xd0>
10109f94:	11400003 	ldbu	r5,0(r2)
10109f98:	80c00217 	ldw	r3,8(r16)
10109f9c:	18ffffc4 	addi	r3,r3,-1
10109fa0:	80c00215 	stw	r3,8(r16)
10109fa4:	183ff30e 	bge	r3,zero,10109f74 <__alt_data_end+0xfffe9f74>
10109fa8:	80800617 	ldw	r2,24(r16)
10109fac:	18801916 	blt	r3,r2,1010a014 <__fputwc+0x10c>
10109fb0:	80800017 	ldw	r2,0(r16)
10109fb4:	11400005 	stb	r5,0(r2)
10109fb8:	80800017 	ldw	r2,0(r16)
10109fbc:	10c00003 	ldbu	r3,0(r2)
10109fc0:	10800044 	addi	r2,r2,1
10109fc4:	1d402326 	beq	r3,r21,1010a054 <__fputwc+0x14c>
10109fc8:	80800015 	stw	r2,0(r16)
10109fcc:	8c400044 	addi	r17,r17,1
10109fd0:	dc45883a 	add	r2,sp,r17
10109fd4:	8d3fef36 	bltu	r17,r20,10109f94 <__alt_data_end+0xfffe9f94>
10109fd8:	9005883a 	mov	r2,r18
10109fdc:	00000406 	br	10109ff0 <__fputwc+0xe8>
10109fe0:	80c0030b 	ldhu	r3,12(r16)
10109fe4:	a005883a 	mov	r2,r20
10109fe8:	18c01014 	ori	r3,r3,64
10109fec:	80c0030d 	sth	r3,12(r16)
10109ff0:	dfc00717 	ldw	ra,28(sp)
10109ff4:	dd400617 	ldw	r21,24(sp)
10109ff8:	dd000517 	ldw	r20,20(sp)
10109ffc:	dcc00417 	ldw	r19,16(sp)
1010a000:	dc800317 	ldw	r18,12(sp)
1010a004:	dc400217 	ldw	r17,8(sp)
1010a008:	dc000117 	ldw	r16,4(sp)
1010a00c:	dec00804 	addi	sp,sp,32
1010a010:	f800283a 	ret
1010a014:	800d883a 	mov	r6,r16
1010a018:	29403fcc 	andi	r5,r5,255
1010a01c:	9809883a 	mov	r4,r19
1010a020:	010ac8c0 	call	1010ac8c <__swbuf_r>
1010a024:	10bfffe0 	cmpeqi	r2,r2,-1
1010a028:	10803fcc 	andi	r2,r2,255
1010a02c:	103fd626 	beq	r2,zero,10109f88 <__alt_data_end+0xfffe9f88>
1010a030:	00bfffc4 	movi	r2,-1
1010a034:	003fee06 	br	10109ff0 <__alt_data_end+0xfffe9ff0>
1010a038:	90ffffc4 	addi	r3,r18,-1
1010a03c:	01003f84 	movi	r4,254
1010a040:	20ffbf36 	bltu	r4,r3,10109f40 <__alt_data_end+0xfffe9f40>
1010a044:	900b883a 	mov	r5,r18
1010a048:	dc800005 	stb	r18,0(sp)
1010a04c:	1029883a 	mov	r20,r2
1010a050:	003fc506 	br	10109f68 <__alt_data_end+0xfffe9f68>
1010a054:	800d883a 	mov	r6,r16
1010a058:	a80b883a 	mov	r5,r21
1010a05c:	9809883a 	mov	r4,r19
1010a060:	010ac8c0 	call	1010ac8c <__swbuf_r>
1010a064:	10bfffe0 	cmpeqi	r2,r2,-1
1010a068:	003fef06 	br	1010a028 <__alt_data_end+0xfffea028>

1010a06c <_fputwc_r>:
1010a06c:	3080030b 	ldhu	r2,12(r6)
1010a070:	10c8000c 	andi	r3,r2,8192
1010a074:	1800051e 	bne	r3,zero,1010a08c <_fputwc_r+0x20>
1010a078:	30c01917 	ldw	r3,100(r6)
1010a07c:	10880014 	ori	r2,r2,8192
1010a080:	3080030d 	sth	r2,12(r6)
1010a084:	18880014 	ori	r2,r3,8192
1010a088:	30801915 	stw	r2,100(r6)
1010a08c:	0109f081 	jmpi	10109f08 <__fputwc>

1010a090 <fputwc>:
1010a090:	00840474 	movhi	r2,4113
1010a094:	defffc04 	addi	sp,sp,-16
1010a098:	108ba404 	addi	r2,r2,11920
1010a09c:	dc000115 	stw	r16,4(sp)
1010a0a0:	14000017 	ldw	r16,0(r2)
1010a0a4:	dc400215 	stw	r17,8(sp)
1010a0a8:	dfc00315 	stw	ra,12(sp)
1010a0ac:	2023883a 	mov	r17,r4
1010a0b0:	80000226 	beq	r16,zero,1010a0bc <fputwc+0x2c>
1010a0b4:	80800e17 	ldw	r2,56(r16)
1010a0b8:	10001026 	beq	r2,zero,1010a0fc <fputwc+0x6c>
1010a0bc:	2880030b 	ldhu	r2,12(r5)
1010a0c0:	10c8000c 	andi	r3,r2,8192
1010a0c4:	1800051e 	bne	r3,zero,1010a0dc <fputwc+0x4c>
1010a0c8:	28c01917 	ldw	r3,100(r5)
1010a0cc:	10880014 	ori	r2,r2,8192
1010a0d0:	2880030d 	sth	r2,12(r5)
1010a0d4:	18880014 	ori	r2,r3,8192
1010a0d8:	28801915 	stw	r2,100(r5)
1010a0dc:	280d883a 	mov	r6,r5
1010a0e0:	8009883a 	mov	r4,r16
1010a0e4:	880b883a 	mov	r5,r17
1010a0e8:	dfc00317 	ldw	ra,12(sp)
1010a0ec:	dc400217 	ldw	r17,8(sp)
1010a0f0:	dc000117 	ldw	r16,4(sp)
1010a0f4:	dec00404 	addi	sp,sp,16
1010a0f8:	0109f081 	jmpi	10109f08 <__fputwc>
1010a0fc:	8009883a 	mov	r4,r16
1010a100:	d9400015 	stw	r5,0(sp)
1010a104:	010673c0 	call	1010673c <__sinit>
1010a108:	d9400017 	ldw	r5,0(sp)
1010a10c:	003feb06 	br	1010a0bc <__alt_data_end+0xfffea0bc>

1010a110 <__sfvwrite_r>:
1010a110:	30800217 	ldw	r2,8(r6)
1010a114:	10006726 	beq	r2,zero,1010a2b4 <__sfvwrite_r+0x1a4>
1010a118:	28c0030b 	ldhu	r3,12(r5)
1010a11c:	defff404 	addi	sp,sp,-48
1010a120:	dd400715 	stw	r21,28(sp)
1010a124:	dd000615 	stw	r20,24(sp)
1010a128:	dc000215 	stw	r16,8(sp)
1010a12c:	dfc00b15 	stw	ra,44(sp)
1010a130:	df000a15 	stw	fp,40(sp)
1010a134:	ddc00915 	stw	r23,36(sp)
1010a138:	dd800815 	stw	r22,32(sp)
1010a13c:	dcc00515 	stw	r19,20(sp)
1010a140:	dc800415 	stw	r18,16(sp)
1010a144:	dc400315 	stw	r17,12(sp)
1010a148:	1880020c 	andi	r2,r3,8
1010a14c:	2821883a 	mov	r16,r5
1010a150:	202b883a 	mov	r21,r4
1010a154:	3029883a 	mov	r20,r6
1010a158:	10002726 	beq	r2,zero,1010a1f8 <__sfvwrite_r+0xe8>
1010a15c:	28800417 	ldw	r2,16(r5)
1010a160:	10002526 	beq	r2,zero,1010a1f8 <__sfvwrite_r+0xe8>
1010a164:	1880008c 	andi	r2,r3,2
1010a168:	a4400017 	ldw	r17,0(r20)
1010a16c:	10002a26 	beq	r2,zero,1010a218 <__sfvwrite_r+0x108>
1010a170:	05a00034 	movhi	r22,32768
1010a174:	0027883a 	mov	r19,zero
1010a178:	0025883a 	mov	r18,zero
1010a17c:	b5bf0004 	addi	r22,r22,-1024
1010a180:	980d883a 	mov	r6,r19
1010a184:	a809883a 	mov	r4,r21
1010a188:	90004626 	beq	r18,zero,1010a2a4 <__sfvwrite_r+0x194>
1010a18c:	900f883a 	mov	r7,r18
1010a190:	b480022e 	bgeu	r22,r18,1010a19c <__sfvwrite_r+0x8c>
1010a194:	01e00034 	movhi	r7,32768
1010a198:	39ff0004 	addi	r7,r7,-1024
1010a19c:	80800917 	ldw	r2,36(r16)
1010a1a0:	81400717 	ldw	r5,28(r16)
1010a1a4:	103ee83a 	callr	r2
1010a1a8:	0080570e 	bge	zero,r2,1010a308 <__sfvwrite_r+0x1f8>
1010a1ac:	a0c00217 	ldw	r3,8(r20)
1010a1b0:	98a7883a 	add	r19,r19,r2
1010a1b4:	90a5c83a 	sub	r18,r18,r2
1010a1b8:	1885c83a 	sub	r2,r3,r2
1010a1bc:	a0800215 	stw	r2,8(r20)
1010a1c0:	103fef1e 	bne	r2,zero,1010a180 <__alt_data_end+0xfffea180>
1010a1c4:	0005883a 	mov	r2,zero
1010a1c8:	dfc00b17 	ldw	ra,44(sp)
1010a1cc:	df000a17 	ldw	fp,40(sp)
1010a1d0:	ddc00917 	ldw	r23,36(sp)
1010a1d4:	dd800817 	ldw	r22,32(sp)
1010a1d8:	dd400717 	ldw	r21,28(sp)
1010a1dc:	dd000617 	ldw	r20,24(sp)
1010a1e0:	dcc00517 	ldw	r19,20(sp)
1010a1e4:	dc800417 	ldw	r18,16(sp)
1010a1e8:	dc400317 	ldw	r17,12(sp)
1010a1ec:	dc000217 	ldw	r16,8(sp)
1010a1f0:	dec00c04 	addi	sp,sp,48
1010a1f4:	f800283a 	ret
1010a1f8:	800b883a 	mov	r5,r16
1010a1fc:	a809883a 	mov	r4,r21
1010a200:	01046fc0 	call	101046fc <__swsetup_r>
1010a204:	1000eb1e 	bne	r2,zero,1010a5b4 <__sfvwrite_r+0x4a4>
1010a208:	80c0030b 	ldhu	r3,12(r16)
1010a20c:	a4400017 	ldw	r17,0(r20)
1010a210:	1880008c 	andi	r2,r3,2
1010a214:	103fd61e 	bne	r2,zero,1010a170 <__alt_data_end+0xfffea170>
1010a218:	1880004c 	andi	r2,r3,1
1010a21c:	10003f1e 	bne	r2,zero,1010a31c <__sfvwrite_r+0x20c>
1010a220:	0039883a 	mov	fp,zero
1010a224:	0025883a 	mov	r18,zero
1010a228:	90001a26 	beq	r18,zero,1010a294 <__sfvwrite_r+0x184>
1010a22c:	1880800c 	andi	r2,r3,512
1010a230:	84c00217 	ldw	r19,8(r16)
1010a234:	10002126 	beq	r2,zero,1010a2bc <__sfvwrite_r+0x1ac>
1010a238:	982f883a 	mov	r23,r19
1010a23c:	94c09336 	bltu	r18,r19,1010a48c <__sfvwrite_r+0x37c>
1010a240:	1881200c 	andi	r2,r3,1152
1010a244:	10009e1e 	bne	r2,zero,1010a4c0 <__sfvwrite_r+0x3b0>
1010a248:	81000017 	ldw	r4,0(r16)
1010a24c:	b80d883a 	mov	r6,r23
1010a250:	e00b883a 	mov	r5,fp
1010a254:	010a5cc0 	call	1010a5cc <memmove>
1010a258:	80c00217 	ldw	r3,8(r16)
1010a25c:	81000017 	ldw	r4,0(r16)
1010a260:	9005883a 	mov	r2,r18
1010a264:	1ce7c83a 	sub	r19,r3,r19
1010a268:	25cf883a 	add	r7,r4,r23
1010a26c:	84c00215 	stw	r19,8(r16)
1010a270:	81c00015 	stw	r7,0(r16)
1010a274:	a0c00217 	ldw	r3,8(r20)
1010a278:	e0b9883a 	add	fp,fp,r2
1010a27c:	90a5c83a 	sub	r18,r18,r2
1010a280:	18a7c83a 	sub	r19,r3,r2
1010a284:	a4c00215 	stw	r19,8(r20)
1010a288:	983fce26 	beq	r19,zero,1010a1c4 <__alt_data_end+0xfffea1c4>
1010a28c:	80c0030b 	ldhu	r3,12(r16)
1010a290:	903fe61e 	bne	r18,zero,1010a22c <__alt_data_end+0xfffea22c>
1010a294:	8f000017 	ldw	fp,0(r17)
1010a298:	8c800117 	ldw	r18,4(r17)
1010a29c:	8c400204 	addi	r17,r17,8
1010a2a0:	003fe106 	br	1010a228 <__alt_data_end+0xfffea228>
1010a2a4:	8cc00017 	ldw	r19,0(r17)
1010a2a8:	8c800117 	ldw	r18,4(r17)
1010a2ac:	8c400204 	addi	r17,r17,8
1010a2b0:	003fb306 	br	1010a180 <__alt_data_end+0xfffea180>
1010a2b4:	0005883a 	mov	r2,zero
1010a2b8:	f800283a 	ret
1010a2bc:	81000017 	ldw	r4,0(r16)
1010a2c0:	80800417 	ldw	r2,16(r16)
1010a2c4:	11005736 	bltu	r2,r4,1010a424 <__sfvwrite_r+0x314>
1010a2c8:	85c00517 	ldw	r23,20(r16)
1010a2cc:	95c05536 	bltu	r18,r23,1010a424 <__sfvwrite_r+0x314>
1010a2d0:	00a00034 	movhi	r2,32768
1010a2d4:	10bfffc4 	addi	r2,r2,-1
1010a2d8:	9009883a 	mov	r4,r18
1010a2dc:	1480012e 	bgeu	r2,r18,1010a2e4 <__sfvwrite_r+0x1d4>
1010a2e0:	1009883a 	mov	r4,r2
1010a2e4:	b80b883a 	mov	r5,r23
1010a2e8:	010ba7c0 	call	1010ba7c <__divsi3>
1010a2ec:	15cf383a 	mul	r7,r2,r23
1010a2f0:	81400717 	ldw	r5,28(r16)
1010a2f4:	80800917 	ldw	r2,36(r16)
1010a2f8:	e00d883a 	mov	r6,fp
1010a2fc:	a809883a 	mov	r4,r21
1010a300:	103ee83a 	callr	r2
1010a304:	00bfdb16 	blt	zero,r2,1010a274 <__alt_data_end+0xfffea274>
1010a308:	8080030b 	ldhu	r2,12(r16)
1010a30c:	10801014 	ori	r2,r2,64
1010a310:	8080030d 	sth	r2,12(r16)
1010a314:	00bfffc4 	movi	r2,-1
1010a318:	003fab06 	br	1010a1c8 <__alt_data_end+0xfffea1c8>
1010a31c:	0027883a 	mov	r19,zero
1010a320:	0011883a 	mov	r8,zero
1010a324:	0039883a 	mov	fp,zero
1010a328:	0025883a 	mov	r18,zero
1010a32c:	90001f26 	beq	r18,zero,1010a3ac <__sfvwrite_r+0x29c>
1010a330:	40005a26 	beq	r8,zero,1010a49c <__sfvwrite_r+0x38c>
1010a334:	982d883a 	mov	r22,r19
1010a338:	94c0012e 	bgeu	r18,r19,1010a340 <__sfvwrite_r+0x230>
1010a33c:	902d883a 	mov	r22,r18
1010a340:	81000017 	ldw	r4,0(r16)
1010a344:	80800417 	ldw	r2,16(r16)
1010a348:	b02f883a 	mov	r23,r22
1010a34c:	81c00517 	ldw	r7,20(r16)
1010a350:	1100032e 	bgeu	r2,r4,1010a360 <__sfvwrite_r+0x250>
1010a354:	80c00217 	ldw	r3,8(r16)
1010a358:	38c7883a 	add	r3,r7,r3
1010a35c:	1d801816 	blt	r3,r22,1010a3c0 <__sfvwrite_r+0x2b0>
1010a360:	b1c03e16 	blt	r22,r7,1010a45c <__sfvwrite_r+0x34c>
1010a364:	80800917 	ldw	r2,36(r16)
1010a368:	81400717 	ldw	r5,28(r16)
1010a36c:	e00d883a 	mov	r6,fp
1010a370:	da000115 	stw	r8,4(sp)
1010a374:	a809883a 	mov	r4,r21
1010a378:	103ee83a 	callr	r2
1010a37c:	102f883a 	mov	r23,r2
1010a380:	da000117 	ldw	r8,4(sp)
1010a384:	00bfe00e 	bge	zero,r2,1010a308 <__alt_data_end+0xfffea308>
1010a388:	9de7c83a 	sub	r19,r19,r23
1010a38c:	98001f26 	beq	r19,zero,1010a40c <__sfvwrite_r+0x2fc>
1010a390:	a0800217 	ldw	r2,8(r20)
1010a394:	e5f9883a 	add	fp,fp,r23
1010a398:	95e5c83a 	sub	r18,r18,r23
1010a39c:	15efc83a 	sub	r23,r2,r23
1010a3a0:	a5c00215 	stw	r23,8(r20)
1010a3a4:	b83f8726 	beq	r23,zero,1010a1c4 <__alt_data_end+0xfffea1c4>
1010a3a8:	903fe11e 	bne	r18,zero,1010a330 <__alt_data_end+0xfffea330>
1010a3ac:	8f000017 	ldw	fp,0(r17)
1010a3b0:	8c800117 	ldw	r18,4(r17)
1010a3b4:	0011883a 	mov	r8,zero
1010a3b8:	8c400204 	addi	r17,r17,8
1010a3bc:	003fdb06 	br	1010a32c <__alt_data_end+0xfffea32c>
1010a3c0:	180d883a 	mov	r6,r3
1010a3c4:	e00b883a 	mov	r5,fp
1010a3c8:	da000115 	stw	r8,4(sp)
1010a3cc:	d8c00015 	stw	r3,0(sp)
1010a3d0:	010a5cc0 	call	1010a5cc <memmove>
1010a3d4:	d8c00017 	ldw	r3,0(sp)
1010a3d8:	80800017 	ldw	r2,0(r16)
1010a3dc:	800b883a 	mov	r5,r16
1010a3e0:	a809883a 	mov	r4,r21
1010a3e4:	10c5883a 	add	r2,r2,r3
1010a3e8:	80800015 	stw	r2,0(r16)
1010a3ec:	d8c00015 	stw	r3,0(sp)
1010a3f0:	01063600 	call	10106360 <_fflush_r>
1010a3f4:	d8c00017 	ldw	r3,0(sp)
1010a3f8:	da000117 	ldw	r8,4(sp)
1010a3fc:	103fc21e 	bne	r2,zero,1010a308 <__alt_data_end+0xfffea308>
1010a400:	182f883a 	mov	r23,r3
1010a404:	9de7c83a 	sub	r19,r19,r23
1010a408:	983fe11e 	bne	r19,zero,1010a390 <__alt_data_end+0xfffea390>
1010a40c:	800b883a 	mov	r5,r16
1010a410:	a809883a 	mov	r4,r21
1010a414:	01063600 	call	10106360 <_fflush_r>
1010a418:	103fbb1e 	bne	r2,zero,1010a308 <__alt_data_end+0xfffea308>
1010a41c:	0011883a 	mov	r8,zero
1010a420:	003fdb06 	br	1010a390 <__alt_data_end+0xfffea390>
1010a424:	94c0012e 	bgeu	r18,r19,1010a42c <__sfvwrite_r+0x31c>
1010a428:	9027883a 	mov	r19,r18
1010a42c:	980d883a 	mov	r6,r19
1010a430:	e00b883a 	mov	r5,fp
1010a434:	010a5cc0 	call	1010a5cc <memmove>
1010a438:	80800217 	ldw	r2,8(r16)
1010a43c:	80c00017 	ldw	r3,0(r16)
1010a440:	14c5c83a 	sub	r2,r2,r19
1010a444:	1cc7883a 	add	r3,r3,r19
1010a448:	80800215 	stw	r2,8(r16)
1010a44c:	80c00015 	stw	r3,0(r16)
1010a450:	10004326 	beq	r2,zero,1010a560 <__sfvwrite_r+0x450>
1010a454:	9805883a 	mov	r2,r19
1010a458:	003f8606 	br	1010a274 <__alt_data_end+0xfffea274>
1010a45c:	b00d883a 	mov	r6,r22
1010a460:	e00b883a 	mov	r5,fp
1010a464:	da000115 	stw	r8,4(sp)
1010a468:	010a5cc0 	call	1010a5cc <memmove>
1010a46c:	80800217 	ldw	r2,8(r16)
1010a470:	80c00017 	ldw	r3,0(r16)
1010a474:	da000117 	ldw	r8,4(sp)
1010a478:	1585c83a 	sub	r2,r2,r22
1010a47c:	1dad883a 	add	r22,r3,r22
1010a480:	80800215 	stw	r2,8(r16)
1010a484:	85800015 	stw	r22,0(r16)
1010a488:	003fbf06 	br	1010a388 <__alt_data_end+0xfffea388>
1010a48c:	81000017 	ldw	r4,0(r16)
1010a490:	9027883a 	mov	r19,r18
1010a494:	902f883a 	mov	r23,r18
1010a498:	003f6c06 	br	1010a24c <__alt_data_end+0xfffea24c>
1010a49c:	900d883a 	mov	r6,r18
1010a4a0:	01400284 	movi	r5,10
1010a4a4:	e009883a 	mov	r4,fp
1010a4a8:	0106f840 	call	10106f84 <memchr>
1010a4ac:	10003e26 	beq	r2,zero,1010a5a8 <__sfvwrite_r+0x498>
1010a4b0:	10800044 	addi	r2,r2,1
1010a4b4:	1727c83a 	sub	r19,r2,fp
1010a4b8:	02000044 	movi	r8,1
1010a4bc:	003f9d06 	br	1010a334 <__alt_data_end+0xfffea334>
1010a4c0:	80800517 	ldw	r2,20(r16)
1010a4c4:	81400417 	ldw	r5,16(r16)
1010a4c8:	81c00017 	ldw	r7,0(r16)
1010a4cc:	10a7883a 	add	r19,r2,r2
1010a4d0:	9885883a 	add	r2,r19,r2
1010a4d4:	1026d7fa 	srli	r19,r2,31
1010a4d8:	396dc83a 	sub	r22,r7,r5
1010a4dc:	b1000044 	addi	r4,r22,1
1010a4e0:	9885883a 	add	r2,r19,r2
1010a4e4:	1027d07a 	srai	r19,r2,1
1010a4e8:	2485883a 	add	r2,r4,r18
1010a4ec:	980d883a 	mov	r6,r19
1010a4f0:	9880022e 	bgeu	r19,r2,1010a4fc <__sfvwrite_r+0x3ec>
1010a4f4:	1027883a 	mov	r19,r2
1010a4f8:	100d883a 	mov	r6,r2
1010a4fc:	18c1000c 	andi	r3,r3,1024
1010a500:	18001c26 	beq	r3,zero,1010a574 <__sfvwrite_r+0x464>
1010a504:	300b883a 	mov	r5,r6
1010a508:	a809883a 	mov	r4,r21
1010a50c:	01016340 	call	10101634 <_malloc_r>
1010a510:	102f883a 	mov	r23,r2
1010a514:	10002926 	beq	r2,zero,1010a5bc <__sfvwrite_r+0x4ac>
1010a518:	81400417 	ldw	r5,16(r16)
1010a51c:	b00d883a 	mov	r6,r22
1010a520:	1009883a 	mov	r4,r2
1010a524:	01070680 	call	10107068 <memcpy>
1010a528:	8080030b 	ldhu	r2,12(r16)
1010a52c:	00fedfc4 	movi	r3,-1153
1010a530:	10c4703a 	and	r2,r2,r3
1010a534:	10802014 	ori	r2,r2,128
1010a538:	8080030d 	sth	r2,12(r16)
1010a53c:	bd89883a 	add	r4,r23,r22
1010a540:	9d8fc83a 	sub	r7,r19,r22
1010a544:	85c00415 	stw	r23,16(r16)
1010a548:	84c00515 	stw	r19,20(r16)
1010a54c:	81000015 	stw	r4,0(r16)
1010a550:	9027883a 	mov	r19,r18
1010a554:	81c00215 	stw	r7,8(r16)
1010a558:	902f883a 	mov	r23,r18
1010a55c:	003f3b06 	br	1010a24c <__alt_data_end+0xfffea24c>
1010a560:	800b883a 	mov	r5,r16
1010a564:	a809883a 	mov	r4,r21
1010a568:	01063600 	call	10106360 <_fflush_r>
1010a56c:	103fb926 	beq	r2,zero,1010a454 <__alt_data_end+0xfffea454>
1010a570:	003f6506 	br	1010a308 <__alt_data_end+0xfffea308>
1010a574:	a809883a 	mov	r4,r21
1010a578:	010a7280 	call	1010a728 <_realloc_r>
1010a57c:	102f883a 	mov	r23,r2
1010a580:	103fee1e 	bne	r2,zero,1010a53c <__alt_data_end+0xfffea53c>
1010a584:	81400417 	ldw	r5,16(r16)
1010a588:	a809883a 	mov	r4,r21
1010a58c:	010695c0 	call	1010695c <_free_r>
1010a590:	8080030b 	ldhu	r2,12(r16)
1010a594:	00ffdfc4 	movi	r3,-129
1010a598:	1884703a 	and	r2,r3,r2
1010a59c:	00c00304 	movi	r3,12
1010a5a0:	a8c00015 	stw	r3,0(r21)
1010a5a4:	003f5906 	br	1010a30c <__alt_data_end+0xfffea30c>
1010a5a8:	94c00044 	addi	r19,r18,1
1010a5ac:	02000044 	movi	r8,1
1010a5b0:	003f6006 	br	1010a334 <__alt_data_end+0xfffea334>
1010a5b4:	00bfffc4 	movi	r2,-1
1010a5b8:	003f0306 	br	1010a1c8 <__alt_data_end+0xfffea1c8>
1010a5bc:	00800304 	movi	r2,12
1010a5c0:	a8800015 	stw	r2,0(r21)
1010a5c4:	8080030b 	ldhu	r2,12(r16)
1010a5c8:	003f5006 	br	1010a30c <__alt_data_end+0xfffea30c>

1010a5cc <memmove>:
1010a5cc:	2005883a 	mov	r2,r4
1010a5d0:	29000b2e 	bgeu	r5,r4,1010a600 <memmove+0x34>
1010a5d4:	298f883a 	add	r7,r5,r6
1010a5d8:	21c0092e 	bgeu	r4,r7,1010a600 <memmove+0x34>
1010a5dc:	2187883a 	add	r3,r4,r6
1010a5e0:	198bc83a 	sub	r5,r3,r6
1010a5e4:	30004826 	beq	r6,zero,1010a708 <memmove+0x13c>
1010a5e8:	39ffffc4 	addi	r7,r7,-1
1010a5ec:	39000003 	ldbu	r4,0(r7)
1010a5f0:	18ffffc4 	addi	r3,r3,-1
1010a5f4:	19000005 	stb	r4,0(r3)
1010a5f8:	28fffb1e 	bne	r5,r3,1010a5e8 <__alt_data_end+0xfffea5e8>
1010a5fc:	f800283a 	ret
1010a600:	00c003c4 	movi	r3,15
1010a604:	1980412e 	bgeu	r3,r6,1010a70c <memmove+0x140>
1010a608:	2886b03a 	or	r3,r5,r2
1010a60c:	18c000cc 	andi	r3,r3,3
1010a610:	1800401e 	bne	r3,zero,1010a714 <memmove+0x148>
1010a614:	33fffc04 	addi	r15,r6,-16
1010a618:	781ed13a 	srli	r15,r15,4
1010a61c:	28c00104 	addi	r3,r5,4
1010a620:	13400104 	addi	r13,r2,4
1010a624:	781c913a 	slli	r14,r15,4
1010a628:	2b000204 	addi	r12,r5,8
1010a62c:	12c00204 	addi	r11,r2,8
1010a630:	73800504 	addi	r14,r14,20
1010a634:	2a800304 	addi	r10,r5,12
1010a638:	12400304 	addi	r9,r2,12
1010a63c:	2b9d883a 	add	r14,r5,r14
1010a640:	2811883a 	mov	r8,r5
1010a644:	100f883a 	mov	r7,r2
1010a648:	41000017 	ldw	r4,0(r8)
1010a64c:	39c00404 	addi	r7,r7,16
1010a650:	18c00404 	addi	r3,r3,16
1010a654:	393ffc15 	stw	r4,-16(r7)
1010a658:	193ffc17 	ldw	r4,-16(r3)
1010a65c:	6b400404 	addi	r13,r13,16
1010a660:	5ac00404 	addi	r11,r11,16
1010a664:	693ffc15 	stw	r4,-16(r13)
1010a668:	61000017 	ldw	r4,0(r12)
1010a66c:	4a400404 	addi	r9,r9,16
1010a670:	42000404 	addi	r8,r8,16
1010a674:	593ffc15 	stw	r4,-16(r11)
1010a678:	51000017 	ldw	r4,0(r10)
1010a67c:	63000404 	addi	r12,r12,16
1010a680:	52800404 	addi	r10,r10,16
1010a684:	493ffc15 	stw	r4,-16(r9)
1010a688:	1bbfef1e 	bne	r3,r14,1010a648 <__alt_data_end+0xfffea648>
1010a68c:	79000044 	addi	r4,r15,1
1010a690:	2008913a 	slli	r4,r4,4
1010a694:	328003cc 	andi	r10,r6,15
1010a698:	02c000c4 	movi	r11,3
1010a69c:	1107883a 	add	r3,r2,r4
1010a6a0:	290b883a 	add	r5,r5,r4
1010a6a4:	5a801e2e 	bgeu	r11,r10,1010a720 <memmove+0x154>
1010a6a8:	1813883a 	mov	r9,r3
1010a6ac:	2811883a 	mov	r8,r5
1010a6b0:	500f883a 	mov	r7,r10
1010a6b4:	41000017 	ldw	r4,0(r8)
1010a6b8:	4a400104 	addi	r9,r9,4
1010a6bc:	39ffff04 	addi	r7,r7,-4
1010a6c0:	493fff15 	stw	r4,-4(r9)
1010a6c4:	42000104 	addi	r8,r8,4
1010a6c8:	59fffa36 	bltu	r11,r7,1010a6b4 <__alt_data_end+0xfffea6b4>
1010a6cc:	513fff04 	addi	r4,r10,-4
1010a6d0:	2008d0ba 	srli	r4,r4,2
1010a6d4:	318000cc 	andi	r6,r6,3
1010a6d8:	21000044 	addi	r4,r4,1
1010a6dc:	2109883a 	add	r4,r4,r4
1010a6e0:	2109883a 	add	r4,r4,r4
1010a6e4:	1907883a 	add	r3,r3,r4
1010a6e8:	290b883a 	add	r5,r5,r4
1010a6ec:	30000b26 	beq	r6,zero,1010a71c <memmove+0x150>
1010a6f0:	198d883a 	add	r6,r3,r6
1010a6f4:	29c00003 	ldbu	r7,0(r5)
1010a6f8:	18c00044 	addi	r3,r3,1
1010a6fc:	29400044 	addi	r5,r5,1
1010a700:	19ffffc5 	stb	r7,-1(r3)
1010a704:	19bffb1e 	bne	r3,r6,1010a6f4 <__alt_data_end+0xfffea6f4>
1010a708:	f800283a 	ret
1010a70c:	1007883a 	mov	r3,r2
1010a710:	003ff606 	br	1010a6ec <__alt_data_end+0xfffea6ec>
1010a714:	1007883a 	mov	r3,r2
1010a718:	003ff506 	br	1010a6f0 <__alt_data_end+0xfffea6f0>
1010a71c:	f800283a 	ret
1010a720:	500d883a 	mov	r6,r10
1010a724:	003ff106 	br	1010a6ec <__alt_data_end+0xfffea6ec>

1010a728 <_realloc_r>:
1010a728:	defff604 	addi	sp,sp,-40
1010a72c:	dc800215 	stw	r18,8(sp)
1010a730:	dfc00915 	stw	ra,36(sp)
1010a734:	df000815 	stw	fp,32(sp)
1010a738:	ddc00715 	stw	r23,28(sp)
1010a73c:	dd800615 	stw	r22,24(sp)
1010a740:	dd400515 	stw	r21,20(sp)
1010a744:	dd000415 	stw	r20,16(sp)
1010a748:	dcc00315 	stw	r19,12(sp)
1010a74c:	dc400115 	stw	r17,4(sp)
1010a750:	dc000015 	stw	r16,0(sp)
1010a754:	3025883a 	mov	r18,r6
1010a758:	2800b726 	beq	r5,zero,1010aa38 <_realloc_r+0x310>
1010a75c:	282b883a 	mov	r21,r5
1010a760:	2029883a 	mov	r20,r4
1010a764:	010e9d40 	call	1010e9d4 <__malloc_lock>
1010a768:	a8bfff17 	ldw	r2,-4(r21)
1010a76c:	043fff04 	movi	r16,-4
1010a770:	90c002c4 	addi	r3,r18,11
1010a774:	01000584 	movi	r4,22
1010a778:	acfffe04 	addi	r19,r21,-8
1010a77c:	1420703a 	and	r16,r2,r16
1010a780:	20c0332e 	bgeu	r4,r3,1010a850 <_realloc_r+0x128>
1010a784:	047ffe04 	movi	r17,-8
1010a788:	1c62703a 	and	r17,r3,r17
1010a78c:	8807883a 	mov	r3,r17
1010a790:	88005816 	blt	r17,zero,1010a8f4 <_realloc_r+0x1cc>
1010a794:	8c805736 	bltu	r17,r18,1010a8f4 <_realloc_r+0x1cc>
1010a798:	80c0300e 	bge	r16,r3,1010a85c <_realloc_r+0x134>
1010a79c:	07040474 	movhi	fp,4113
1010a7a0:	e705f504 	addi	fp,fp,6100
1010a7a4:	e1c00217 	ldw	r7,8(fp)
1010a7a8:	9c09883a 	add	r4,r19,r16
1010a7ac:	22000117 	ldw	r8,4(r4)
1010a7b0:	21c06326 	beq	r4,r7,1010a940 <_realloc_r+0x218>
1010a7b4:	017fff84 	movi	r5,-2
1010a7b8:	414a703a 	and	r5,r8,r5
1010a7bc:	214b883a 	add	r5,r4,r5
1010a7c0:	29800117 	ldw	r6,4(r5)
1010a7c4:	3180004c 	andi	r6,r6,1
1010a7c8:	30003f26 	beq	r6,zero,1010a8c8 <_realloc_r+0x1a0>
1010a7cc:	1080004c 	andi	r2,r2,1
1010a7d0:	10008326 	beq	r2,zero,1010a9e0 <_realloc_r+0x2b8>
1010a7d4:	900b883a 	mov	r5,r18
1010a7d8:	a009883a 	mov	r4,r20
1010a7dc:	01016340 	call	10101634 <_malloc_r>
1010a7e0:	1025883a 	mov	r18,r2
1010a7e4:	10011e26 	beq	r2,zero,1010ac60 <_realloc_r+0x538>
1010a7e8:	a93fff17 	ldw	r4,-4(r21)
1010a7ec:	10fffe04 	addi	r3,r2,-8
1010a7f0:	00bfff84 	movi	r2,-2
1010a7f4:	2084703a 	and	r2,r4,r2
1010a7f8:	9885883a 	add	r2,r19,r2
1010a7fc:	1880ee26 	beq	r3,r2,1010abb8 <_realloc_r+0x490>
1010a800:	81bfff04 	addi	r6,r16,-4
1010a804:	00800904 	movi	r2,36
1010a808:	1180b836 	bltu	r2,r6,1010aaec <_realloc_r+0x3c4>
1010a80c:	00c004c4 	movi	r3,19
1010a810:	19809636 	bltu	r3,r6,1010aa6c <_realloc_r+0x344>
1010a814:	9005883a 	mov	r2,r18
1010a818:	a807883a 	mov	r3,r21
1010a81c:	19000017 	ldw	r4,0(r3)
1010a820:	11000015 	stw	r4,0(r2)
1010a824:	19000117 	ldw	r4,4(r3)
1010a828:	11000115 	stw	r4,4(r2)
1010a82c:	18c00217 	ldw	r3,8(r3)
1010a830:	10c00215 	stw	r3,8(r2)
1010a834:	a80b883a 	mov	r5,r21
1010a838:	a009883a 	mov	r4,r20
1010a83c:	010695c0 	call	1010695c <_free_r>
1010a840:	a009883a 	mov	r4,r20
1010a844:	010e9f80 	call	1010e9f8 <__malloc_unlock>
1010a848:	9005883a 	mov	r2,r18
1010a84c:	00001206 	br	1010a898 <_realloc_r+0x170>
1010a850:	00c00404 	movi	r3,16
1010a854:	1823883a 	mov	r17,r3
1010a858:	003fce06 	br	1010a794 <__alt_data_end+0xfffea794>
1010a85c:	a825883a 	mov	r18,r21
1010a860:	8445c83a 	sub	r2,r16,r17
1010a864:	00c003c4 	movi	r3,15
1010a868:	18802636 	bltu	r3,r2,1010a904 <_realloc_r+0x1dc>
1010a86c:	99800117 	ldw	r6,4(r19)
1010a870:	9c07883a 	add	r3,r19,r16
1010a874:	3180004c 	andi	r6,r6,1
1010a878:	3420b03a 	or	r16,r6,r16
1010a87c:	9c000115 	stw	r16,4(r19)
1010a880:	18800117 	ldw	r2,4(r3)
1010a884:	10800054 	ori	r2,r2,1
1010a888:	18800115 	stw	r2,4(r3)
1010a88c:	a009883a 	mov	r4,r20
1010a890:	010e9f80 	call	1010e9f8 <__malloc_unlock>
1010a894:	9005883a 	mov	r2,r18
1010a898:	dfc00917 	ldw	ra,36(sp)
1010a89c:	df000817 	ldw	fp,32(sp)
1010a8a0:	ddc00717 	ldw	r23,28(sp)
1010a8a4:	dd800617 	ldw	r22,24(sp)
1010a8a8:	dd400517 	ldw	r21,20(sp)
1010a8ac:	dd000417 	ldw	r20,16(sp)
1010a8b0:	dcc00317 	ldw	r19,12(sp)
1010a8b4:	dc800217 	ldw	r18,8(sp)
1010a8b8:	dc400117 	ldw	r17,4(sp)
1010a8bc:	dc000017 	ldw	r16,0(sp)
1010a8c0:	dec00a04 	addi	sp,sp,40
1010a8c4:	f800283a 	ret
1010a8c8:	017fff04 	movi	r5,-4
1010a8cc:	414a703a 	and	r5,r8,r5
1010a8d0:	814d883a 	add	r6,r16,r5
1010a8d4:	30c01f16 	blt	r6,r3,1010a954 <_realloc_r+0x22c>
1010a8d8:	20800317 	ldw	r2,12(r4)
1010a8dc:	20c00217 	ldw	r3,8(r4)
1010a8e0:	a825883a 	mov	r18,r21
1010a8e4:	3021883a 	mov	r16,r6
1010a8e8:	18800315 	stw	r2,12(r3)
1010a8ec:	10c00215 	stw	r3,8(r2)
1010a8f0:	003fdb06 	br	1010a860 <__alt_data_end+0xfffea860>
1010a8f4:	00800304 	movi	r2,12
1010a8f8:	a0800015 	stw	r2,0(r20)
1010a8fc:	0005883a 	mov	r2,zero
1010a900:	003fe506 	br	1010a898 <__alt_data_end+0xfffea898>
1010a904:	98c00117 	ldw	r3,4(r19)
1010a908:	9c4b883a 	add	r5,r19,r17
1010a90c:	11000054 	ori	r4,r2,1
1010a910:	18c0004c 	andi	r3,r3,1
1010a914:	1c62b03a 	or	r17,r3,r17
1010a918:	9c400115 	stw	r17,4(r19)
1010a91c:	29000115 	stw	r4,4(r5)
1010a920:	2885883a 	add	r2,r5,r2
1010a924:	10c00117 	ldw	r3,4(r2)
1010a928:	29400204 	addi	r5,r5,8
1010a92c:	a009883a 	mov	r4,r20
1010a930:	18c00054 	ori	r3,r3,1
1010a934:	10c00115 	stw	r3,4(r2)
1010a938:	010695c0 	call	1010695c <_free_r>
1010a93c:	003fd306 	br	1010a88c <__alt_data_end+0xfffea88c>
1010a940:	017fff04 	movi	r5,-4
1010a944:	414a703a 	and	r5,r8,r5
1010a948:	89800404 	addi	r6,r17,16
1010a94c:	8151883a 	add	r8,r16,r5
1010a950:	4180590e 	bge	r8,r6,1010aab8 <_realloc_r+0x390>
1010a954:	1080004c 	andi	r2,r2,1
1010a958:	103f9e1e 	bne	r2,zero,1010a7d4 <__alt_data_end+0xfffea7d4>
1010a95c:	adbffe17 	ldw	r22,-8(r21)
1010a960:	00bfff04 	movi	r2,-4
1010a964:	9dadc83a 	sub	r22,r19,r22
1010a968:	b1800117 	ldw	r6,4(r22)
1010a96c:	3084703a 	and	r2,r6,r2
1010a970:	20002026 	beq	r4,zero,1010a9f4 <_realloc_r+0x2cc>
1010a974:	80af883a 	add	r23,r16,r2
1010a978:	b96f883a 	add	r23,r23,r5
1010a97c:	21c05f26 	beq	r4,r7,1010aafc <_realloc_r+0x3d4>
1010a980:	b8c01c16 	blt	r23,r3,1010a9f4 <_realloc_r+0x2cc>
1010a984:	20800317 	ldw	r2,12(r4)
1010a988:	20c00217 	ldw	r3,8(r4)
1010a98c:	81bfff04 	addi	r6,r16,-4
1010a990:	01000904 	movi	r4,36
1010a994:	18800315 	stw	r2,12(r3)
1010a998:	10c00215 	stw	r3,8(r2)
1010a99c:	b0c00217 	ldw	r3,8(r22)
1010a9a0:	b0800317 	ldw	r2,12(r22)
1010a9a4:	b4800204 	addi	r18,r22,8
1010a9a8:	18800315 	stw	r2,12(r3)
1010a9ac:	10c00215 	stw	r3,8(r2)
1010a9b0:	21801b36 	bltu	r4,r6,1010aa20 <_realloc_r+0x2f8>
1010a9b4:	008004c4 	movi	r2,19
1010a9b8:	1180352e 	bgeu	r2,r6,1010aa90 <_realloc_r+0x368>
1010a9bc:	a8800017 	ldw	r2,0(r21)
1010a9c0:	b0800215 	stw	r2,8(r22)
1010a9c4:	a8800117 	ldw	r2,4(r21)
1010a9c8:	b0800315 	stw	r2,12(r22)
1010a9cc:	008006c4 	movi	r2,27
1010a9d0:	11807f36 	bltu	r2,r6,1010abd0 <_realloc_r+0x4a8>
1010a9d4:	b0800404 	addi	r2,r22,16
1010a9d8:	ad400204 	addi	r21,r21,8
1010a9dc:	00002d06 	br	1010aa94 <_realloc_r+0x36c>
1010a9e0:	adbffe17 	ldw	r22,-8(r21)
1010a9e4:	00bfff04 	movi	r2,-4
1010a9e8:	9dadc83a 	sub	r22,r19,r22
1010a9ec:	b1000117 	ldw	r4,4(r22)
1010a9f0:	2084703a 	and	r2,r4,r2
1010a9f4:	b03f7726 	beq	r22,zero,1010a7d4 <__alt_data_end+0xfffea7d4>
1010a9f8:	80af883a 	add	r23,r16,r2
1010a9fc:	b8ff7516 	blt	r23,r3,1010a7d4 <__alt_data_end+0xfffea7d4>
1010aa00:	b0800317 	ldw	r2,12(r22)
1010aa04:	b0c00217 	ldw	r3,8(r22)
1010aa08:	81bfff04 	addi	r6,r16,-4
1010aa0c:	01000904 	movi	r4,36
1010aa10:	18800315 	stw	r2,12(r3)
1010aa14:	10c00215 	stw	r3,8(r2)
1010aa18:	b4800204 	addi	r18,r22,8
1010aa1c:	21bfe52e 	bgeu	r4,r6,1010a9b4 <__alt_data_end+0xfffea9b4>
1010aa20:	a80b883a 	mov	r5,r21
1010aa24:	9009883a 	mov	r4,r18
1010aa28:	010a5cc0 	call	1010a5cc <memmove>
1010aa2c:	b821883a 	mov	r16,r23
1010aa30:	b027883a 	mov	r19,r22
1010aa34:	003f8a06 	br	1010a860 <__alt_data_end+0xfffea860>
1010aa38:	300b883a 	mov	r5,r6
1010aa3c:	dfc00917 	ldw	ra,36(sp)
1010aa40:	df000817 	ldw	fp,32(sp)
1010aa44:	ddc00717 	ldw	r23,28(sp)
1010aa48:	dd800617 	ldw	r22,24(sp)
1010aa4c:	dd400517 	ldw	r21,20(sp)
1010aa50:	dd000417 	ldw	r20,16(sp)
1010aa54:	dcc00317 	ldw	r19,12(sp)
1010aa58:	dc800217 	ldw	r18,8(sp)
1010aa5c:	dc400117 	ldw	r17,4(sp)
1010aa60:	dc000017 	ldw	r16,0(sp)
1010aa64:	dec00a04 	addi	sp,sp,40
1010aa68:	01016341 	jmpi	10101634 <_malloc_r>
1010aa6c:	a8c00017 	ldw	r3,0(r21)
1010aa70:	90c00015 	stw	r3,0(r18)
1010aa74:	a8c00117 	ldw	r3,4(r21)
1010aa78:	90c00115 	stw	r3,4(r18)
1010aa7c:	00c006c4 	movi	r3,27
1010aa80:	19804536 	bltu	r3,r6,1010ab98 <_realloc_r+0x470>
1010aa84:	90800204 	addi	r2,r18,8
1010aa88:	a8c00204 	addi	r3,r21,8
1010aa8c:	003f6306 	br	1010a81c <__alt_data_end+0xfffea81c>
1010aa90:	9005883a 	mov	r2,r18
1010aa94:	a8c00017 	ldw	r3,0(r21)
1010aa98:	b821883a 	mov	r16,r23
1010aa9c:	b027883a 	mov	r19,r22
1010aaa0:	10c00015 	stw	r3,0(r2)
1010aaa4:	a8c00117 	ldw	r3,4(r21)
1010aaa8:	10c00115 	stw	r3,4(r2)
1010aaac:	a8c00217 	ldw	r3,8(r21)
1010aab0:	10c00215 	stw	r3,8(r2)
1010aab4:	003f6a06 	br	1010a860 <__alt_data_end+0xfffea860>
1010aab8:	9c67883a 	add	r19,r19,r17
1010aabc:	4445c83a 	sub	r2,r8,r17
1010aac0:	e4c00215 	stw	r19,8(fp)
1010aac4:	10800054 	ori	r2,r2,1
1010aac8:	98800115 	stw	r2,4(r19)
1010aacc:	a8bfff17 	ldw	r2,-4(r21)
1010aad0:	a009883a 	mov	r4,r20
1010aad4:	1080004c 	andi	r2,r2,1
1010aad8:	1462b03a 	or	r17,r2,r17
1010aadc:	ac7fff15 	stw	r17,-4(r21)
1010aae0:	010e9f80 	call	1010e9f8 <__malloc_unlock>
1010aae4:	a805883a 	mov	r2,r21
1010aae8:	003f6b06 	br	1010a898 <__alt_data_end+0xfffea898>
1010aaec:	a80b883a 	mov	r5,r21
1010aaf0:	9009883a 	mov	r4,r18
1010aaf4:	010a5cc0 	call	1010a5cc <memmove>
1010aaf8:	003f4e06 	br	1010a834 <__alt_data_end+0xfffea834>
1010aafc:	89000404 	addi	r4,r17,16
1010ab00:	b93fbc16 	blt	r23,r4,1010a9f4 <__alt_data_end+0xfffea9f4>
1010ab04:	b0800317 	ldw	r2,12(r22)
1010ab08:	b0c00217 	ldw	r3,8(r22)
1010ab0c:	81bfff04 	addi	r6,r16,-4
1010ab10:	01000904 	movi	r4,36
1010ab14:	18800315 	stw	r2,12(r3)
1010ab18:	10c00215 	stw	r3,8(r2)
1010ab1c:	b4800204 	addi	r18,r22,8
1010ab20:	21804336 	bltu	r4,r6,1010ac30 <_realloc_r+0x508>
1010ab24:	008004c4 	movi	r2,19
1010ab28:	11803f2e 	bgeu	r2,r6,1010ac28 <_realloc_r+0x500>
1010ab2c:	a8800017 	ldw	r2,0(r21)
1010ab30:	b0800215 	stw	r2,8(r22)
1010ab34:	a8800117 	ldw	r2,4(r21)
1010ab38:	b0800315 	stw	r2,12(r22)
1010ab3c:	008006c4 	movi	r2,27
1010ab40:	11803f36 	bltu	r2,r6,1010ac40 <_realloc_r+0x518>
1010ab44:	b0800404 	addi	r2,r22,16
1010ab48:	ad400204 	addi	r21,r21,8
1010ab4c:	a8c00017 	ldw	r3,0(r21)
1010ab50:	10c00015 	stw	r3,0(r2)
1010ab54:	a8c00117 	ldw	r3,4(r21)
1010ab58:	10c00115 	stw	r3,4(r2)
1010ab5c:	a8c00217 	ldw	r3,8(r21)
1010ab60:	10c00215 	stw	r3,8(r2)
1010ab64:	b447883a 	add	r3,r22,r17
1010ab68:	bc45c83a 	sub	r2,r23,r17
1010ab6c:	e0c00215 	stw	r3,8(fp)
1010ab70:	10800054 	ori	r2,r2,1
1010ab74:	18800115 	stw	r2,4(r3)
1010ab78:	b0800117 	ldw	r2,4(r22)
1010ab7c:	a009883a 	mov	r4,r20
1010ab80:	1080004c 	andi	r2,r2,1
1010ab84:	1462b03a 	or	r17,r2,r17
1010ab88:	b4400115 	stw	r17,4(r22)
1010ab8c:	010e9f80 	call	1010e9f8 <__malloc_unlock>
1010ab90:	9005883a 	mov	r2,r18
1010ab94:	003f4006 	br	1010a898 <__alt_data_end+0xfffea898>
1010ab98:	a8c00217 	ldw	r3,8(r21)
1010ab9c:	90c00215 	stw	r3,8(r18)
1010aba0:	a8c00317 	ldw	r3,12(r21)
1010aba4:	90c00315 	stw	r3,12(r18)
1010aba8:	30801126 	beq	r6,r2,1010abf0 <_realloc_r+0x4c8>
1010abac:	90800404 	addi	r2,r18,16
1010abb0:	a8c00404 	addi	r3,r21,16
1010abb4:	003f1906 	br	1010a81c <__alt_data_end+0xfffea81c>
1010abb8:	90ffff17 	ldw	r3,-4(r18)
1010abbc:	00bfff04 	movi	r2,-4
1010abc0:	a825883a 	mov	r18,r21
1010abc4:	1884703a 	and	r2,r3,r2
1010abc8:	80a1883a 	add	r16,r16,r2
1010abcc:	003f2406 	br	1010a860 <__alt_data_end+0xfffea860>
1010abd0:	a8800217 	ldw	r2,8(r21)
1010abd4:	b0800415 	stw	r2,16(r22)
1010abd8:	a8800317 	ldw	r2,12(r21)
1010abdc:	b0800515 	stw	r2,20(r22)
1010abe0:	31000a26 	beq	r6,r4,1010ac0c <_realloc_r+0x4e4>
1010abe4:	b0800604 	addi	r2,r22,24
1010abe8:	ad400404 	addi	r21,r21,16
1010abec:	003fa906 	br	1010aa94 <__alt_data_end+0xfffeaa94>
1010abf0:	a9000417 	ldw	r4,16(r21)
1010abf4:	90800604 	addi	r2,r18,24
1010abf8:	a8c00604 	addi	r3,r21,24
1010abfc:	91000415 	stw	r4,16(r18)
1010ac00:	a9000517 	ldw	r4,20(r21)
1010ac04:	91000515 	stw	r4,20(r18)
1010ac08:	003f0406 	br	1010a81c <__alt_data_end+0xfffea81c>
1010ac0c:	a8c00417 	ldw	r3,16(r21)
1010ac10:	ad400604 	addi	r21,r21,24
1010ac14:	b0800804 	addi	r2,r22,32
1010ac18:	b0c00615 	stw	r3,24(r22)
1010ac1c:	a8ffff17 	ldw	r3,-4(r21)
1010ac20:	b0c00715 	stw	r3,28(r22)
1010ac24:	003f9b06 	br	1010aa94 <__alt_data_end+0xfffeaa94>
1010ac28:	9005883a 	mov	r2,r18
1010ac2c:	003fc706 	br	1010ab4c <__alt_data_end+0xfffeab4c>
1010ac30:	a80b883a 	mov	r5,r21
1010ac34:	9009883a 	mov	r4,r18
1010ac38:	010a5cc0 	call	1010a5cc <memmove>
1010ac3c:	003fc906 	br	1010ab64 <__alt_data_end+0xfffeab64>
1010ac40:	a8800217 	ldw	r2,8(r21)
1010ac44:	b0800415 	stw	r2,16(r22)
1010ac48:	a8800317 	ldw	r2,12(r21)
1010ac4c:	b0800515 	stw	r2,20(r22)
1010ac50:	31000726 	beq	r6,r4,1010ac70 <_realloc_r+0x548>
1010ac54:	b0800604 	addi	r2,r22,24
1010ac58:	ad400404 	addi	r21,r21,16
1010ac5c:	003fbb06 	br	1010ab4c <__alt_data_end+0xfffeab4c>
1010ac60:	a009883a 	mov	r4,r20
1010ac64:	010e9f80 	call	1010e9f8 <__malloc_unlock>
1010ac68:	0005883a 	mov	r2,zero
1010ac6c:	003f0a06 	br	1010a898 <__alt_data_end+0xfffea898>
1010ac70:	a8c00417 	ldw	r3,16(r21)
1010ac74:	ad400604 	addi	r21,r21,24
1010ac78:	b0800804 	addi	r2,r22,32
1010ac7c:	b0c00615 	stw	r3,24(r22)
1010ac80:	a8ffff17 	ldw	r3,-4(r21)
1010ac84:	b0c00715 	stw	r3,28(r22)
1010ac88:	003fb006 	br	1010ab4c <__alt_data_end+0xfffeab4c>

1010ac8c <__swbuf_r>:
1010ac8c:	defffb04 	addi	sp,sp,-20
1010ac90:	dcc00315 	stw	r19,12(sp)
1010ac94:	dc800215 	stw	r18,8(sp)
1010ac98:	dc000015 	stw	r16,0(sp)
1010ac9c:	dfc00415 	stw	ra,16(sp)
1010aca0:	dc400115 	stw	r17,4(sp)
1010aca4:	2025883a 	mov	r18,r4
1010aca8:	2827883a 	mov	r19,r5
1010acac:	3021883a 	mov	r16,r6
1010acb0:	20000226 	beq	r4,zero,1010acbc <__swbuf_r+0x30>
1010acb4:	20800e17 	ldw	r2,56(r4)
1010acb8:	10004226 	beq	r2,zero,1010adc4 <__swbuf_r+0x138>
1010acbc:	80800617 	ldw	r2,24(r16)
1010acc0:	8100030b 	ldhu	r4,12(r16)
1010acc4:	80800215 	stw	r2,8(r16)
1010acc8:	2080020c 	andi	r2,r4,8
1010accc:	10003626 	beq	r2,zero,1010ada8 <__swbuf_r+0x11c>
1010acd0:	80c00417 	ldw	r3,16(r16)
1010acd4:	18003426 	beq	r3,zero,1010ada8 <__swbuf_r+0x11c>
1010acd8:	2088000c 	andi	r2,r4,8192
1010acdc:	9c403fcc 	andi	r17,r19,255
1010ace0:	10001a26 	beq	r2,zero,1010ad4c <__swbuf_r+0xc0>
1010ace4:	80800017 	ldw	r2,0(r16)
1010ace8:	81000517 	ldw	r4,20(r16)
1010acec:	10c7c83a 	sub	r3,r2,r3
1010acf0:	1900200e 	bge	r3,r4,1010ad74 <__swbuf_r+0xe8>
1010acf4:	18c00044 	addi	r3,r3,1
1010acf8:	81000217 	ldw	r4,8(r16)
1010acfc:	11400044 	addi	r5,r2,1
1010ad00:	81400015 	stw	r5,0(r16)
1010ad04:	213fffc4 	addi	r4,r4,-1
1010ad08:	81000215 	stw	r4,8(r16)
1010ad0c:	14c00005 	stb	r19,0(r2)
1010ad10:	80800517 	ldw	r2,20(r16)
1010ad14:	10c01e26 	beq	r2,r3,1010ad90 <__swbuf_r+0x104>
1010ad18:	8080030b 	ldhu	r2,12(r16)
1010ad1c:	1080004c 	andi	r2,r2,1
1010ad20:	10000226 	beq	r2,zero,1010ad2c <__swbuf_r+0xa0>
1010ad24:	00800284 	movi	r2,10
1010ad28:	88801926 	beq	r17,r2,1010ad90 <__swbuf_r+0x104>
1010ad2c:	8805883a 	mov	r2,r17
1010ad30:	dfc00417 	ldw	ra,16(sp)
1010ad34:	dcc00317 	ldw	r19,12(sp)
1010ad38:	dc800217 	ldw	r18,8(sp)
1010ad3c:	dc400117 	ldw	r17,4(sp)
1010ad40:	dc000017 	ldw	r16,0(sp)
1010ad44:	dec00504 	addi	sp,sp,20
1010ad48:	f800283a 	ret
1010ad4c:	81401917 	ldw	r5,100(r16)
1010ad50:	00b7ffc4 	movi	r2,-8193
1010ad54:	21080014 	ori	r4,r4,8192
1010ad58:	2884703a 	and	r2,r5,r2
1010ad5c:	80801915 	stw	r2,100(r16)
1010ad60:	80800017 	ldw	r2,0(r16)
1010ad64:	8100030d 	sth	r4,12(r16)
1010ad68:	81000517 	ldw	r4,20(r16)
1010ad6c:	10c7c83a 	sub	r3,r2,r3
1010ad70:	193fe016 	blt	r3,r4,1010acf4 <__alt_data_end+0xfffeacf4>
1010ad74:	800b883a 	mov	r5,r16
1010ad78:	9009883a 	mov	r4,r18
1010ad7c:	01063600 	call	10106360 <_fflush_r>
1010ad80:	1000071e 	bne	r2,zero,1010ada0 <__swbuf_r+0x114>
1010ad84:	80800017 	ldw	r2,0(r16)
1010ad88:	00c00044 	movi	r3,1
1010ad8c:	003fda06 	br	1010acf8 <__alt_data_end+0xfffeacf8>
1010ad90:	800b883a 	mov	r5,r16
1010ad94:	9009883a 	mov	r4,r18
1010ad98:	01063600 	call	10106360 <_fflush_r>
1010ad9c:	103fe326 	beq	r2,zero,1010ad2c <__alt_data_end+0xfffead2c>
1010ada0:	00bfffc4 	movi	r2,-1
1010ada4:	003fe206 	br	1010ad30 <__alt_data_end+0xfffead30>
1010ada8:	800b883a 	mov	r5,r16
1010adac:	9009883a 	mov	r4,r18
1010adb0:	01046fc0 	call	101046fc <__swsetup_r>
1010adb4:	103ffa1e 	bne	r2,zero,1010ada0 <__alt_data_end+0xfffeada0>
1010adb8:	8100030b 	ldhu	r4,12(r16)
1010adbc:	80c00417 	ldw	r3,16(r16)
1010adc0:	003fc506 	br	1010acd8 <__alt_data_end+0xfffeacd8>
1010adc4:	010673c0 	call	1010673c <__sinit>
1010adc8:	003fbc06 	br	1010acbc <__alt_data_end+0xfffeacbc>

1010adcc <__swbuf>:
1010adcc:	00840474 	movhi	r2,4113
1010add0:	108ba404 	addi	r2,r2,11920
1010add4:	280d883a 	mov	r6,r5
1010add8:	200b883a 	mov	r5,r4
1010addc:	11000017 	ldw	r4,0(r2)
1010ade0:	010ac8c1 	jmpi	1010ac8c <__swbuf_r>

1010ade4 <_wcrtomb_r>:
1010ade4:	defff604 	addi	sp,sp,-40
1010ade8:	00840474 	movhi	r2,4113
1010adec:	dc800815 	stw	r18,32(sp)
1010adf0:	dc400715 	stw	r17,28(sp)
1010adf4:	dc000615 	stw	r16,24(sp)
1010adf8:	108ba804 	addi	r2,r2,11936
1010adfc:	dfc00915 	stw	ra,36(sp)
1010ae00:	2021883a 	mov	r16,r4
1010ae04:	3823883a 	mov	r17,r7
1010ae08:	14800017 	ldw	r18,0(r2)
1010ae0c:	28001426 	beq	r5,zero,1010ae60 <_wcrtomb_r+0x7c>
1010ae10:	d9400415 	stw	r5,16(sp)
1010ae14:	d9800515 	stw	r6,20(sp)
1010ae18:	0106ec40 	call	10106ec4 <__locale_charset>
1010ae1c:	d9800517 	ldw	r6,20(sp)
1010ae20:	d9400417 	ldw	r5,16(sp)
1010ae24:	100f883a 	mov	r7,r2
1010ae28:	dc400015 	stw	r17,0(sp)
1010ae2c:	8009883a 	mov	r4,r16
1010ae30:	903ee83a 	callr	r18
1010ae34:	00ffffc4 	movi	r3,-1
1010ae38:	10c0031e 	bne	r2,r3,1010ae48 <_wcrtomb_r+0x64>
1010ae3c:	88000015 	stw	zero,0(r17)
1010ae40:	00c02284 	movi	r3,138
1010ae44:	80c00015 	stw	r3,0(r16)
1010ae48:	dfc00917 	ldw	ra,36(sp)
1010ae4c:	dc800817 	ldw	r18,32(sp)
1010ae50:	dc400717 	ldw	r17,28(sp)
1010ae54:	dc000617 	ldw	r16,24(sp)
1010ae58:	dec00a04 	addi	sp,sp,40
1010ae5c:	f800283a 	ret
1010ae60:	0106ec40 	call	10106ec4 <__locale_charset>
1010ae64:	100f883a 	mov	r7,r2
1010ae68:	dc400015 	stw	r17,0(sp)
1010ae6c:	000d883a 	mov	r6,zero
1010ae70:	d9400104 	addi	r5,sp,4
1010ae74:	8009883a 	mov	r4,r16
1010ae78:	903ee83a 	callr	r18
1010ae7c:	003fed06 	br	1010ae34 <__alt_data_end+0xfffeae34>

1010ae80 <wcrtomb>:
1010ae80:	defff604 	addi	sp,sp,-40
1010ae84:	00840474 	movhi	r2,4113
1010ae88:	dc800615 	stw	r18,24(sp)
1010ae8c:	dc400515 	stw	r17,20(sp)
1010ae90:	108ba404 	addi	r2,r2,11920
1010ae94:	dfc00915 	stw	ra,36(sp)
1010ae98:	dd000815 	stw	r20,32(sp)
1010ae9c:	dcc00715 	stw	r19,28(sp)
1010aea0:	dc000415 	stw	r16,16(sp)
1010aea4:	3025883a 	mov	r18,r6
1010aea8:	14400017 	ldw	r17,0(r2)
1010aeac:	20001926 	beq	r4,zero,1010af14 <wcrtomb+0x94>
1010aeb0:	00840474 	movhi	r2,4113
1010aeb4:	108ba804 	addi	r2,r2,11936
1010aeb8:	15000017 	ldw	r20,0(r2)
1010aebc:	2021883a 	mov	r16,r4
1010aec0:	2827883a 	mov	r19,r5
1010aec4:	0106ec40 	call	10106ec4 <__locale_charset>
1010aec8:	100f883a 	mov	r7,r2
1010aecc:	dc800015 	stw	r18,0(sp)
1010aed0:	980d883a 	mov	r6,r19
1010aed4:	800b883a 	mov	r5,r16
1010aed8:	8809883a 	mov	r4,r17
1010aedc:	a03ee83a 	callr	r20
1010aee0:	00ffffc4 	movi	r3,-1
1010aee4:	10c0031e 	bne	r2,r3,1010aef4 <wcrtomb+0x74>
1010aee8:	90000015 	stw	zero,0(r18)
1010aeec:	00c02284 	movi	r3,138
1010aef0:	88c00015 	stw	r3,0(r17)
1010aef4:	dfc00917 	ldw	ra,36(sp)
1010aef8:	dd000817 	ldw	r20,32(sp)
1010aefc:	dcc00717 	ldw	r19,28(sp)
1010af00:	dc800617 	ldw	r18,24(sp)
1010af04:	dc400517 	ldw	r17,20(sp)
1010af08:	dc000417 	ldw	r16,16(sp)
1010af0c:	dec00a04 	addi	sp,sp,40
1010af10:	f800283a 	ret
1010af14:	00840474 	movhi	r2,4113
1010af18:	108ba804 	addi	r2,r2,11936
1010af1c:	14000017 	ldw	r16,0(r2)
1010af20:	0106ec40 	call	10106ec4 <__locale_charset>
1010af24:	100f883a 	mov	r7,r2
1010af28:	dc800015 	stw	r18,0(sp)
1010af2c:	000d883a 	mov	r6,zero
1010af30:	d9400104 	addi	r5,sp,4
1010af34:	8809883a 	mov	r4,r17
1010af38:	803ee83a 	callr	r16
1010af3c:	003fe806 	br	1010aee0 <__alt_data_end+0xfffeaee0>

1010af40 <__ascii_wctomb>:
1010af40:	28000526 	beq	r5,zero,1010af58 <__ascii_wctomb+0x18>
1010af44:	00803fc4 	movi	r2,255
1010af48:	11800536 	bltu	r2,r6,1010af60 <__ascii_wctomb+0x20>
1010af4c:	29800005 	stb	r6,0(r5)
1010af50:	00800044 	movi	r2,1
1010af54:	f800283a 	ret
1010af58:	0005883a 	mov	r2,zero
1010af5c:	f800283a 	ret
1010af60:	00802284 	movi	r2,138
1010af64:	20800015 	stw	r2,0(r4)
1010af68:	00bfffc4 	movi	r2,-1
1010af6c:	f800283a 	ret

1010af70 <_wctomb_r>:
1010af70:	00840474 	movhi	r2,4113
1010af74:	defff904 	addi	sp,sp,-28
1010af78:	108ba804 	addi	r2,r2,11936
1010af7c:	dfc00615 	stw	ra,24(sp)
1010af80:	dc400515 	stw	r17,20(sp)
1010af84:	dc000415 	stw	r16,16(sp)
1010af88:	3823883a 	mov	r17,r7
1010af8c:	14000017 	ldw	r16,0(r2)
1010af90:	d9000115 	stw	r4,4(sp)
1010af94:	d9400215 	stw	r5,8(sp)
1010af98:	d9800315 	stw	r6,12(sp)
1010af9c:	0106ec40 	call	10106ec4 <__locale_charset>
1010afa0:	d9800317 	ldw	r6,12(sp)
1010afa4:	d9400217 	ldw	r5,8(sp)
1010afa8:	d9000117 	ldw	r4,4(sp)
1010afac:	100f883a 	mov	r7,r2
1010afb0:	dc400015 	stw	r17,0(sp)
1010afb4:	803ee83a 	callr	r16
1010afb8:	dfc00617 	ldw	ra,24(sp)
1010afbc:	dc400517 	ldw	r17,20(sp)
1010afc0:	dc000417 	ldw	r16,16(sp)
1010afc4:	dec00704 	addi	sp,sp,28
1010afc8:	f800283a 	ret

1010afcc <__udivdi3>:
1010afcc:	defff504 	addi	sp,sp,-44
1010afd0:	dcc00415 	stw	r19,16(sp)
1010afd4:	dc000115 	stw	r16,4(sp)
1010afd8:	dfc00a15 	stw	ra,40(sp)
1010afdc:	df000915 	stw	fp,36(sp)
1010afe0:	ddc00815 	stw	r23,32(sp)
1010afe4:	dd800715 	stw	r22,28(sp)
1010afe8:	dd400615 	stw	r21,24(sp)
1010afec:	dd000515 	stw	r20,20(sp)
1010aff0:	dc800315 	stw	r18,12(sp)
1010aff4:	dc400215 	stw	r17,8(sp)
1010aff8:	2027883a 	mov	r19,r4
1010affc:	2821883a 	mov	r16,r5
1010b000:	3800411e 	bne	r7,zero,1010b108 <__udivdi3+0x13c>
1010b004:	3023883a 	mov	r17,r6
1010b008:	2025883a 	mov	r18,r4
1010b00c:	2980522e 	bgeu	r5,r6,1010b158 <__udivdi3+0x18c>
1010b010:	00bfffd4 	movui	r2,65535
1010b014:	282d883a 	mov	r22,r5
1010b018:	1180a836 	bltu	r2,r6,1010b2bc <__udivdi3+0x2f0>
1010b01c:	00803fc4 	movi	r2,255
1010b020:	1185803a 	cmpltu	r2,r2,r6
1010b024:	100490fa 	slli	r2,r2,3
1010b028:	3086d83a 	srl	r3,r6,r2
1010b02c:	01040474 	movhi	r4,4113
1010b030:	21049c04 	addi	r4,r4,4720
1010b034:	20c7883a 	add	r3,r4,r3
1010b038:	18c00003 	ldbu	r3,0(r3)
1010b03c:	1885883a 	add	r2,r3,r2
1010b040:	00c00804 	movi	r3,32
1010b044:	1887c83a 	sub	r3,r3,r2
1010b048:	18000526 	beq	r3,zero,1010b060 <__udivdi3+0x94>
1010b04c:	80e0983a 	sll	r16,r16,r3
1010b050:	9884d83a 	srl	r2,r19,r2
1010b054:	30e2983a 	sll	r17,r6,r3
1010b058:	98e4983a 	sll	r18,r19,r3
1010b05c:	142cb03a 	or	r22,r2,r16
1010b060:	882ad43a 	srli	r21,r17,16
1010b064:	b009883a 	mov	r4,r22
1010b068:	8d3fffcc 	andi	r20,r17,65535
1010b06c:	a80b883a 	mov	r5,r21
1010b070:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b074:	b009883a 	mov	r4,r22
1010b078:	a80b883a 	mov	r5,r21
1010b07c:	1027883a 	mov	r19,r2
1010b080:	010bb740 	call	1010bb74 <__udivsi3>
1010b084:	102d883a 	mov	r22,r2
1010b088:	9826943a 	slli	r19,r19,16
1010b08c:	9004d43a 	srli	r2,r18,16
1010b090:	a5a1383a 	mul	r16,r20,r22
1010b094:	14c4b03a 	or	r2,r2,r19
1010b098:	1400052e 	bgeu	r2,r16,1010b0b0 <__udivdi3+0xe4>
1010b09c:	1445883a 	add	r2,r2,r17
1010b0a0:	b0ffffc4 	addi	r3,r22,-1
1010b0a4:	14400136 	bltu	r2,r17,1010b0ac <__udivdi3+0xe0>
1010b0a8:	14012336 	bltu	r2,r16,1010b538 <__udivdi3+0x56c>
1010b0ac:	182d883a 	mov	r22,r3
1010b0b0:	1421c83a 	sub	r16,r2,r16
1010b0b4:	a80b883a 	mov	r5,r21
1010b0b8:	8009883a 	mov	r4,r16
1010b0bc:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b0c0:	1027883a 	mov	r19,r2
1010b0c4:	a80b883a 	mov	r5,r21
1010b0c8:	8009883a 	mov	r4,r16
1010b0cc:	010bb740 	call	1010bb74 <__udivsi3>
1010b0d0:	9826943a 	slli	r19,r19,16
1010b0d4:	a0a9383a 	mul	r20,r20,r2
1010b0d8:	94bfffcc 	andi	r18,r18,65535
1010b0dc:	94e4b03a 	or	r18,r18,r19
1010b0e0:	9500052e 	bgeu	r18,r20,1010b0f8 <__udivdi3+0x12c>
1010b0e4:	8ca5883a 	add	r18,r17,r18
1010b0e8:	10ffffc4 	addi	r3,r2,-1
1010b0ec:	9440f136 	bltu	r18,r17,1010b4b4 <__udivdi3+0x4e8>
1010b0f0:	9500f02e 	bgeu	r18,r20,1010b4b4 <__udivdi3+0x4e8>
1010b0f4:	10bfff84 	addi	r2,r2,-2
1010b0f8:	b00c943a 	slli	r6,r22,16
1010b0fc:	0007883a 	mov	r3,zero
1010b100:	3084b03a 	or	r2,r6,r2
1010b104:	00005906 	br	1010b26c <__udivdi3+0x2a0>
1010b108:	29c05636 	bltu	r5,r7,1010b264 <__udivdi3+0x298>
1010b10c:	00bfffd4 	movui	r2,65535
1010b110:	11c0622e 	bgeu	r2,r7,1010b29c <__udivdi3+0x2d0>
1010b114:	00804034 	movhi	r2,256
1010b118:	10bfffc4 	addi	r2,r2,-1
1010b11c:	11c0ee36 	bltu	r2,r7,1010b4d8 <__udivdi3+0x50c>
1010b120:	00800404 	movi	r2,16
1010b124:	3886d83a 	srl	r3,r7,r2
1010b128:	01040474 	movhi	r4,4113
1010b12c:	21049c04 	addi	r4,r4,4720
1010b130:	20c7883a 	add	r3,r4,r3
1010b134:	18c00003 	ldbu	r3,0(r3)
1010b138:	05400804 	movi	r21,32
1010b13c:	1885883a 	add	r2,r3,r2
1010b140:	a8abc83a 	sub	r21,r21,r2
1010b144:	a800621e 	bne	r21,zero,1010b2d0 <__udivdi3+0x304>
1010b148:	3c00e936 	bltu	r7,r16,1010b4f0 <__udivdi3+0x524>
1010b14c:	9985403a 	cmpgeu	r2,r19,r6
1010b150:	0007883a 	mov	r3,zero
1010b154:	00004506 	br	1010b26c <__udivdi3+0x2a0>
1010b158:	3000041e 	bne	r6,zero,1010b16c <__udivdi3+0x1a0>
1010b15c:	000b883a 	mov	r5,zero
1010b160:	01000044 	movi	r4,1
1010b164:	010bb740 	call	1010bb74 <__udivsi3>
1010b168:	1023883a 	mov	r17,r2
1010b16c:	00bfffd4 	movui	r2,65535
1010b170:	14404e2e 	bgeu	r2,r17,1010b2ac <__udivdi3+0x2e0>
1010b174:	00804034 	movhi	r2,256
1010b178:	10bfffc4 	addi	r2,r2,-1
1010b17c:	1440d836 	bltu	r2,r17,1010b4e0 <__udivdi3+0x514>
1010b180:	00800404 	movi	r2,16
1010b184:	8886d83a 	srl	r3,r17,r2
1010b188:	01040474 	movhi	r4,4113
1010b18c:	21049c04 	addi	r4,r4,4720
1010b190:	20c7883a 	add	r3,r4,r3
1010b194:	18c00003 	ldbu	r3,0(r3)
1010b198:	1885883a 	add	r2,r3,r2
1010b19c:	00c00804 	movi	r3,32
1010b1a0:	1887c83a 	sub	r3,r3,r2
1010b1a4:	18008f1e 	bne	r3,zero,1010b3e4 <__udivdi3+0x418>
1010b1a8:	882ad43a 	srli	r21,r17,16
1010b1ac:	8461c83a 	sub	r16,r16,r17
1010b1b0:	8d3fffcc 	andi	r20,r17,65535
1010b1b4:	00c00044 	movi	r3,1
1010b1b8:	8009883a 	mov	r4,r16
1010b1bc:	a80b883a 	mov	r5,r21
1010b1c0:	d8c00015 	stw	r3,0(sp)
1010b1c4:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b1c8:	8009883a 	mov	r4,r16
1010b1cc:	a80b883a 	mov	r5,r21
1010b1d0:	1027883a 	mov	r19,r2
1010b1d4:	010bb740 	call	1010bb74 <__udivsi3>
1010b1d8:	9826943a 	slli	r19,r19,16
1010b1dc:	9008d43a 	srli	r4,r18,16
1010b1e0:	1521383a 	mul	r16,r2,r20
1010b1e4:	102d883a 	mov	r22,r2
1010b1e8:	24c8b03a 	or	r4,r4,r19
1010b1ec:	d8c00017 	ldw	r3,0(sp)
1010b1f0:	2400052e 	bgeu	r4,r16,1010b208 <__udivdi3+0x23c>
1010b1f4:	2449883a 	add	r4,r4,r17
1010b1f8:	b0bfffc4 	addi	r2,r22,-1
1010b1fc:	24400136 	bltu	r4,r17,1010b204 <__udivdi3+0x238>
1010b200:	2400ca36 	bltu	r4,r16,1010b52c <__udivdi3+0x560>
1010b204:	102d883a 	mov	r22,r2
1010b208:	2421c83a 	sub	r16,r4,r16
1010b20c:	a80b883a 	mov	r5,r21
1010b210:	8009883a 	mov	r4,r16
1010b214:	d8c00015 	stw	r3,0(sp)
1010b218:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b21c:	1027883a 	mov	r19,r2
1010b220:	a80b883a 	mov	r5,r21
1010b224:	8009883a 	mov	r4,r16
1010b228:	010bb740 	call	1010bb74 <__udivsi3>
1010b22c:	9826943a 	slli	r19,r19,16
1010b230:	1529383a 	mul	r20,r2,r20
1010b234:	94bfffcc 	andi	r18,r18,65535
1010b238:	94e4b03a 	or	r18,r18,r19
1010b23c:	d8c00017 	ldw	r3,0(sp)
1010b240:	9500052e 	bgeu	r18,r20,1010b258 <__udivdi3+0x28c>
1010b244:	8ca5883a 	add	r18,r17,r18
1010b248:	113fffc4 	addi	r4,r2,-1
1010b24c:	94409736 	bltu	r18,r17,1010b4ac <__udivdi3+0x4e0>
1010b250:	9500962e 	bgeu	r18,r20,1010b4ac <__udivdi3+0x4e0>
1010b254:	10bfff84 	addi	r2,r2,-2
1010b258:	b00c943a 	slli	r6,r22,16
1010b25c:	3084b03a 	or	r2,r6,r2
1010b260:	00000206 	br	1010b26c <__udivdi3+0x2a0>
1010b264:	0007883a 	mov	r3,zero
1010b268:	0005883a 	mov	r2,zero
1010b26c:	dfc00a17 	ldw	ra,40(sp)
1010b270:	df000917 	ldw	fp,36(sp)
1010b274:	ddc00817 	ldw	r23,32(sp)
1010b278:	dd800717 	ldw	r22,28(sp)
1010b27c:	dd400617 	ldw	r21,24(sp)
1010b280:	dd000517 	ldw	r20,20(sp)
1010b284:	dcc00417 	ldw	r19,16(sp)
1010b288:	dc800317 	ldw	r18,12(sp)
1010b28c:	dc400217 	ldw	r17,8(sp)
1010b290:	dc000117 	ldw	r16,4(sp)
1010b294:	dec00b04 	addi	sp,sp,44
1010b298:	f800283a 	ret
1010b29c:	00803fc4 	movi	r2,255
1010b2a0:	11c5803a 	cmpltu	r2,r2,r7
1010b2a4:	100490fa 	slli	r2,r2,3
1010b2a8:	003f9e06 	br	1010b124 <__alt_data_end+0xfffeb124>
1010b2ac:	00803fc4 	movi	r2,255
1010b2b0:	1445803a 	cmpltu	r2,r2,r17
1010b2b4:	100490fa 	slli	r2,r2,3
1010b2b8:	003fb206 	br	1010b184 <__alt_data_end+0xfffeb184>
1010b2bc:	00804034 	movhi	r2,256
1010b2c0:	10bfffc4 	addi	r2,r2,-1
1010b2c4:	11808836 	bltu	r2,r6,1010b4e8 <__udivdi3+0x51c>
1010b2c8:	00800404 	movi	r2,16
1010b2cc:	003f5606 	br	1010b028 <__alt_data_end+0xfffeb028>
1010b2d0:	30aed83a 	srl	r23,r6,r2
1010b2d4:	3d4e983a 	sll	r7,r7,r21
1010b2d8:	80acd83a 	srl	r22,r16,r2
1010b2dc:	9884d83a 	srl	r2,r19,r2
1010b2e0:	3deeb03a 	or	r23,r7,r23
1010b2e4:	b824d43a 	srli	r18,r23,16
1010b2e8:	8560983a 	sll	r16,r16,r21
1010b2ec:	b009883a 	mov	r4,r22
1010b2f0:	900b883a 	mov	r5,r18
1010b2f4:	3568983a 	sll	r20,r6,r21
1010b2f8:	1420b03a 	or	r16,r2,r16
1010b2fc:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b300:	b009883a 	mov	r4,r22
1010b304:	900b883a 	mov	r5,r18
1010b308:	1023883a 	mov	r17,r2
1010b30c:	010bb740 	call	1010bb74 <__udivsi3>
1010b310:	8808943a 	slli	r4,r17,16
1010b314:	bf3fffcc 	andi	fp,r23,65535
1010b318:	8006d43a 	srli	r3,r16,16
1010b31c:	e0a3383a 	mul	r17,fp,r2
1010b320:	100d883a 	mov	r6,r2
1010b324:	1906b03a 	or	r3,r3,r4
1010b328:	1c40042e 	bgeu	r3,r17,1010b33c <__udivdi3+0x370>
1010b32c:	1dc7883a 	add	r3,r3,r23
1010b330:	10bfffc4 	addi	r2,r2,-1
1010b334:	1dc0752e 	bgeu	r3,r23,1010b50c <__udivdi3+0x540>
1010b338:	100d883a 	mov	r6,r2
1010b33c:	1c63c83a 	sub	r17,r3,r17
1010b340:	900b883a 	mov	r5,r18
1010b344:	8809883a 	mov	r4,r17
1010b348:	d9800015 	stw	r6,0(sp)
1010b34c:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b350:	102d883a 	mov	r22,r2
1010b354:	8809883a 	mov	r4,r17
1010b358:	900b883a 	mov	r5,r18
1010b35c:	010bb740 	call	1010bb74 <__udivsi3>
1010b360:	b02c943a 	slli	r22,r22,16
1010b364:	e089383a 	mul	r4,fp,r2
1010b368:	843fffcc 	andi	r16,r16,65535
1010b36c:	85a0b03a 	or	r16,r16,r22
1010b370:	d9800017 	ldw	r6,0(sp)
1010b374:	8100042e 	bgeu	r16,r4,1010b388 <__udivdi3+0x3bc>
1010b378:	85e1883a 	add	r16,r16,r23
1010b37c:	10ffffc4 	addi	r3,r2,-1
1010b380:	85c05e2e 	bgeu	r16,r23,1010b4fc <__udivdi3+0x530>
1010b384:	1805883a 	mov	r2,r3
1010b388:	300c943a 	slli	r6,r6,16
1010b38c:	a17fffcc 	andi	r5,r20,65535
1010b390:	a028d43a 	srli	r20,r20,16
1010b394:	3084b03a 	or	r2,r6,r2
1010b398:	10ffffcc 	andi	r3,r2,65535
1010b39c:	100cd43a 	srli	r6,r2,16
1010b3a0:	194f383a 	mul	r7,r3,r5
1010b3a4:	1d07383a 	mul	r3,r3,r20
1010b3a8:	314b383a 	mul	r5,r6,r5
1010b3ac:	3810d43a 	srli	r8,r7,16
1010b3b0:	8121c83a 	sub	r16,r16,r4
1010b3b4:	1947883a 	add	r3,r3,r5
1010b3b8:	40c7883a 	add	r3,r8,r3
1010b3bc:	350d383a 	mul	r6,r6,r20
1010b3c0:	1940022e 	bgeu	r3,r5,1010b3cc <__udivdi3+0x400>
1010b3c4:	01000074 	movhi	r4,1
1010b3c8:	310d883a 	add	r6,r6,r4
1010b3cc:	1828d43a 	srli	r20,r3,16
1010b3d0:	a18d883a 	add	r6,r20,r6
1010b3d4:	81803e36 	bltu	r16,r6,1010b4d0 <__udivdi3+0x504>
1010b3d8:	81803826 	beq	r16,r6,1010b4bc <__udivdi3+0x4f0>
1010b3dc:	0007883a 	mov	r3,zero
1010b3e0:	003fa206 	br	1010b26c <__alt_data_end+0xfffeb26c>
1010b3e4:	88e2983a 	sll	r17,r17,r3
1010b3e8:	80a8d83a 	srl	r20,r16,r2
1010b3ec:	80e0983a 	sll	r16,r16,r3
1010b3f0:	882ad43a 	srli	r21,r17,16
1010b3f4:	9884d83a 	srl	r2,r19,r2
1010b3f8:	a009883a 	mov	r4,r20
1010b3fc:	a80b883a 	mov	r5,r21
1010b400:	142eb03a 	or	r23,r2,r16
1010b404:	98e4983a 	sll	r18,r19,r3
1010b408:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b40c:	a009883a 	mov	r4,r20
1010b410:	a80b883a 	mov	r5,r21
1010b414:	1021883a 	mov	r16,r2
1010b418:	010bb740 	call	1010bb74 <__udivsi3>
1010b41c:	1039883a 	mov	fp,r2
1010b420:	8d3fffcc 	andi	r20,r17,65535
1010b424:	8020943a 	slli	r16,r16,16
1010b428:	b804d43a 	srli	r2,r23,16
1010b42c:	a72d383a 	mul	r22,r20,fp
1010b430:	1404b03a 	or	r2,r2,r16
1010b434:	1580062e 	bgeu	r2,r22,1010b450 <__udivdi3+0x484>
1010b438:	1445883a 	add	r2,r2,r17
1010b43c:	e0ffffc4 	addi	r3,fp,-1
1010b440:	14403836 	bltu	r2,r17,1010b524 <__udivdi3+0x558>
1010b444:	1580372e 	bgeu	r2,r22,1010b524 <__udivdi3+0x558>
1010b448:	e73fff84 	addi	fp,fp,-2
1010b44c:	1445883a 	add	r2,r2,r17
1010b450:	15adc83a 	sub	r22,r2,r22
1010b454:	a80b883a 	mov	r5,r21
1010b458:	b009883a 	mov	r4,r22
1010b45c:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b460:	1027883a 	mov	r19,r2
1010b464:	b009883a 	mov	r4,r22
1010b468:	a80b883a 	mov	r5,r21
1010b46c:	010bb740 	call	1010bb74 <__udivsi3>
1010b470:	9826943a 	slli	r19,r19,16
1010b474:	a0a1383a 	mul	r16,r20,r2
1010b478:	b93fffcc 	andi	r4,r23,65535
1010b47c:	24c8b03a 	or	r4,r4,r19
1010b480:	2400062e 	bgeu	r4,r16,1010b49c <__udivdi3+0x4d0>
1010b484:	2449883a 	add	r4,r4,r17
1010b488:	10ffffc4 	addi	r3,r2,-1
1010b48c:	24402336 	bltu	r4,r17,1010b51c <__udivdi3+0x550>
1010b490:	2400222e 	bgeu	r4,r16,1010b51c <__udivdi3+0x550>
1010b494:	10bfff84 	addi	r2,r2,-2
1010b498:	2449883a 	add	r4,r4,r17
1010b49c:	e038943a 	slli	fp,fp,16
1010b4a0:	2421c83a 	sub	r16,r4,r16
1010b4a4:	e086b03a 	or	r3,fp,r2
1010b4a8:	003f4306 	br	1010b1b8 <__alt_data_end+0xfffeb1b8>
1010b4ac:	2005883a 	mov	r2,r4
1010b4b0:	003f6906 	br	1010b258 <__alt_data_end+0xfffeb258>
1010b4b4:	1805883a 	mov	r2,r3
1010b4b8:	003f0f06 	br	1010b0f8 <__alt_data_end+0xfffeb0f8>
1010b4bc:	1806943a 	slli	r3,r3,16
1010b4c0:	9d66983a 	sll	r19,r19,r21
1010b4c4:	39ffffcc 	andi	r7,r7,65535
1010b4c8:	19c7883a 	add	r3,r3,r7
1010b4cc:	98ffc32e 	bgeu	r19,r3,1010b3dc <__alt_data_end+0xfffeb3dc>
1010b4d0:	10bfffc4 	addi	r2,r2,-1
1010b4d4:	003fc106 	br	1010b3dc <__alt_data_end+0xfffeb3dc>
1010b4d8:	00800604 	movi	r2,24
1010b4dc:	003f1106 	br	1010b124 <__alt_data_end+0xfffeb124>
1010b4e0:	00800604 	movi	r2,24
1010b4e4:	003f2706 	br	1010b184 <__alt_data_end+0xfffeb184>
1010b4e8:	00800604 	movi	r2,24
1010b4ec:	003ece06 	br	1010b028 <__alt_data_end+0xfffeb028>
1010b4f0:	0007883a 	mov	r3,zero
1010b4f4:	00800044 	movi	r2,1
1010b4f8:	003f5c06 	br	1010b26c <__alt_data_end+0xfffeb26c>
1010b4fc:	813fa12e 	bgeu	r16,r4,1010b384 <__alt_data_end+0xfffeb384>
1010b500:	10bfff84 	addi	r2,r2,-2
1010b504:	85e1883a 	add	r16,r16,r23
1010b508:	003f9f06 	br	1010b388 <__alt_data_end+0xfffeb388>
1010b50c:	1c7f8a2e 	bgeu	r3,r17,1010b338 <__alt_data_end+0xfffeb338>
1010b510:	31bfff84 	addi	r6,r6,-2
1010b514:	1dc7883a 	add	r3,r3,r23
1010b518:	003f8806 	br	1010b33c <__alt_data_end+0xfffeb33c>
1010b51c:	1805883a 	mov	r2,r3
1010b520:	003fde06 	br	1010b49c <__alt_data_end+0xfffeb49c>
1010b524:	1839883a 	mov	fp,r3
1010b528:	003fc906 	br	1010b450 <__alt_data_end+0xfffeb450>
1010b52c:	b5bfff84 	addi	r22,r22,-2
1010b530:	2449883a 	add	r4,r4,r17
1010b534:	003f3406 	br	1010b208 <__alt_data_end+0xfffeb208>
1010b538:	b5bfff84 	addi	r22,r22,-2
1010b53c:	1445883a 	add	r2,r2,r17
1010b540:	003edb06 	br	1010b0b0 <__alt_data_end+0xfffeb0b0>

1010b544 <__umoddi3>:
1010b544:	defff404 	addi	sp,sp,-48
1010b548:	df000a15 	stw	fp,40(sp)
1010b54c:	dc400315 	stw	r17,12(sp)
1010b550:	dc000215 	stw	r16,8(sp)
1010b554:	dfc00b15 	stw	ra,44(sp)
1010b558:	ddc00915 	stw	r23,36(sp)
1010b55c:	dd800815 	stw	r22,32(sp)
1010b560:	dd400715 	stw	r21,28(sp)
1010b564:	dd000615 	stw	r20,24(sp)
1010b568:	dcc00515 	stw	r19,20(sp)
1010b56c:	dc800415 	stw	r18,16(sp)
1010b570:	2021883a 	mov	r16,r4
1010b574:	2823883a 	mov	r17,r5
1010b578:	2839883a 	mov	fp,r5
1010b57c:	38003c1e 	bne	r7,zero,1010b670 <__umoddi3+0x12c>
1010b580:	3027883a 	mov	r19,r6
1010b584:	2029883a 	mov	r20,r4
1010b588:	2980512e 	bgeu	r5,r6,1010b6d0 <__umoddi3+0x18c>
1010b58c:	00bfffd4 	movui	r2,65535
1010b590:	11809a36 	bltu	r2,r6,1010b7fc <__umoddi3+0x2b8>
1010b594:	01003fc4 	movi	r4,255
1010b598:	2189803a 	cmpltu	r4,r4,r6
1010b59c:	200890fa 	slli	r4,r4,3
1010b5a0:	3104d83a 	srl	r2,r6,r4
1010b5a4:	00c40474 	movhi	r3,4113
1010b5a8:	18c49c04 	addi	r3,r3,4720
1010b5ac:	1885883a 	add	r2,r3,r2
1010b5b0:	10c00003 	ldbu	r3,0(r2)
1010b5b4:	00800804 	movi	r2,32
1010b5b8:	1909883a 	add	r4,r3,r4
1010b5bc:	1125c83a 	sub	r18,r2,r4
1010b5c0:	90000526 	beq	r18,zero,1010b5d8 <__umoddi3+0x94>
1010b5c4:	8ca2983a 	sll	r17,r17,r18
1010b5c8:	8108d83a 	srl	r4,r16,r4
1010b5cc:	34a6983a 	sll	r19,r6,r18
1010b5d0:	84a8983a 	sll	r20,r16,r18
1010b5d4:	2478b03a 	or	fp,r4,r17
1010b5d8:	982ed43a 	srli	r23,r19,16
1010b5dc:	e009883a 	mov	r4,fp
1010b5e0:	9dbfffcc 	andi	r22,r19,65535
1010b5e4:	b80b883a 	mov	r5,r23
1010b5e8:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b5ec:	e009883a 	mov	r4,fp
1010b5f0:	b80b883a 	mov	r5,r23
1010b5f4:	102b883a 	mov	r21,r2
1010b5f8:	010bb740 	call	1010bb74 <__udivsi3>
1010b5fc:	a806943a 	slli	r3,r21,16
1010b600:	a008d43a 	srli	r4,r20,16
1010b604:	b085383a 	mul	r2,r22,r2
1010b608:	20c8b03a 	or	r4,r4,r3
1010b60c:	2080032e 	bgeu	r4,r2,1010b61c <__umoddi3+0xd8>
1010b610:	24c9883a 	add	r4,r4,r19
1010b614:	24c00136 	bltu	r4,r19,1010b61c <__umoddi3+0xd8>
1010b618:	20811036 	bltu	r4,r2,1010ba5c <__umoddi3+0x518>
1010b61c:	20abc83a 	sub	r21,r4,r2
1010b620:	b80b883a 	mov	r5,r23
1010b624:	a809883a 	mov	r4,r21
1010b628:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b62c:	1023883a 	mov	r17,r2
1010b630:	b80b883a 	mov	r5,r23
1010b634:	a809883a 	mov	r4,r21
1010b638:	010bb740 	call	1010bb74 <__udivsi3>
1010b63c:	8822943a 	slli	r17,r17,16
1010b640:	b085383a 	mul	r2,r22,r2
1010b644:	a0ffffcc 	andi	r3,r20,65535
1010b648:	1c46b03a 	or	r3,r3,r17
1010b64c:	1880042e 	bgeu	r3,r2,1010b660 <__umoddi3+0x11c>
1010b650:	1cc7883a 	add	r3,r3,r19
1010b654:	1cc00236 	bltu	r3,r19,1010b660 <__umoddi3+0x11c>
1010b658:	1880012e 	bgeu	r3,r2,1010b660 <__umoddi3+0x11c>
1010b65c:	1cc7883a 	add	r3,r3,r19
1010b660:	1885c83a 	sub	r2,r3,r2
1010b664:	1484d83a 	srl	r2,r2,r18
1010b668:	0007883a 	mov	r3,zero
1010b66c:	00004f06 	br	1010b7ac <__umoddi3+0x268>
1010b670:	29c04c36 	bltu	r5,r7,1010b7a4 <__umoddi3+0x260>
1010b674:	00bfffd4 	movui	r2,65535
1010b678:	11c0582e 	bgeu	r2,r7,1010b7dc <__umoddi3+0x298>
1010b67c:	00804034 	movhi	r2,256
1010b680:	10bfffc4 	addi	r2,r2,-1
1010b684:	11c0e736 	bltu	r2,r7,1010ba24 <__umoddi3+0x4e0>
1010b688:	01000404 	movi	r4,16
1010b68c:	3904d83a 	srl	r2,r7,r4
1010b690:	00c40474 	movhi	r3,4113
1010b694:	18c49c04 	addi	r3,r3,4720
1010b698:	1885883a 	add	r2,r3,r2
1010b69c:	14c00003 	ldbu	r19,0(r2)
1010b6a0:	00c00804 	movi	r3,32
1010b6a4:	9927883a 	add	r19,r19,r4
1010b6a8:	1ce9c83a 	sub	r20,r3,r19
1010b6ac:	a000581e 	bne	r20,zero,1010b810 <__umoddi3+0x2cc>
1010b6b0:	3c400136 	bltu	r7,r17,1010b6b8 <__umoddi3+0x174>
1010b6b4:	8180eb36 	bltu	r16,r6,1010ba64 <__umoddi3+0x520>
1010b6b8:	8185c83a 	sub	r2,r16,r6
1010b6bc:	89e3c83a 	sub	r17,r17,r7
1010b6c0:	8089803a 	cmpltu	r4,r16,r2
1010b6c4:	8939c83a 	sub	fp,r17,r4
1010b6c8:	e007883a 	mov	r3,fp
1010b6cc:	00003706 	br	1010b7ac <__umoddi3+0x268>
1010b6d0:	3000041e 	bne	r6,zero,1010b6e4 <__umoddi3+0x1a0>
1010b6d4:	000b883a 	mov	r5,zero
1010b6d8:	01000044 	movi	r4,1
1010b6dc:	010bb740 	call	1010bb74 <__udivsi3>
1010b6e0:	1027883a 	mov	r19,r2
1010b6e4:	00bfffd4 	movui	r2,65535
1010b6e8:	14c0402e 	bgeu	r2,r19,1010b7ec <__umoddi3+0x2a8>
1010b6ec:	00804034 	movhi	r2,256
1010b6f0:	10bfffc4 	addi	r2,r2,-1
1010b6f4:	14c0cd36 	bltu	r2,r19,1010ba2c <__umoddi3+0x4e8>
1010b6f8:	00800404 	movi	r2,16
1010b6fc:	9886d83a 	srl	r3,r19,r2
1010b700:	01040474 	movhi	r4,4113
1010b704:	21049c04 	addi	r4,r4,4720
1010b708:	20c7883a 	add	r3,r4,r3
1010b70c:	18c00003 	ldbu	r3,0(r3)
1010b710:	1887883a 	add	r3,r3,r2
1010b714:	00800804 	movi	r2,32
1010b718:	10e5c83a 	sub	r18,r2,r3
1010b71c:	9000901e 	bne	r18,zero,1010b960 <__umoddi3+0x41c>
1010b720:	982cd43a 	srli	r22,r19,16
1010b724:	8ce3c83a 	sub	r17,r17,r19
1010b728:	9d7fffcc 	andi	r21,r19,65535
1010b72c:	b00b883a 	mov	r5,r22
1010b730:	8809883a 	mov	r4,r17
1010b734:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b738:	8809883a 	mov	r4,r17
1010b73c:	b00b883a 	mov	r5,r22
1010b740:	1021883a 	mov	r16,r2
1010b744:	010bb740 	call	1010bb74 <__udivsi3>
1010b748:	8006943a 	slli	r3,r16,16
1010b74c:	a008d43a 	srli	r4,r20,16
1010b750:	1545383a 	mul	r2,r2,r21
1010b754:	20c8b03a 	or	r4,r4,r3
1010b758:	2080042e 	bgeu	r4,r2,1010b76c <__umoddi3+0x228>
1010b75c:	24c9883a 	add	r4,r4,r19
1010b760:	24c00236 	bltu	r4,r19,1010b76c <__umoddi3+0x228>
1010b764:	2080012e 	bgeu	r4,r2,1010b76c <__umoddi3+0x228>
1010b768:	24c9883a 	add	r4,r4,r19
1010b76c:	20a1c83a 	sub	r16,r4,r2
1010b770:	b00b883a 	mov	r5,r22
1010b774:	8009883a 	mov	r4,r16
1010b778:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b77c:	1023883a 	mov	r17,r2
1010b780:	b00b883a 	mov	r5,r22
1010b784:	8009883a 	mov	r4,r16
1010b788:	010bb740 	call	1010bb74 <__udivsi3>
1010b78c:	8822943a 	slli	r17,r17,16
1010b790:	1545383a 	mul	r2,r2,r21
1010b794:	a53fffcc 	andi	r20,r20,65535
1010b798:	a446b03a 	or	r3,r20,r17
1010b79c:	18bfb02e 	bgeu	r3,r2,1010b660 <__alt_data_end+0xfffeb660>
1010b7a0:	003fab06 	br	1010b650 <__alt_data_end+0xfffeb650>
1010b7a4:	2005883a 	mov	r2,r4
1010b7a8:	2807883a 	mov	r3,r5
1010b7ac:	dfc00b17 	ldw	ra,44(sp)
1010b7b0:	df000a17 	ldw	fp,40(sp)
1010b7b4:	ddc00917 	ldw	r23,36(sp)
1010b7b8:	dd800817 	ldw	r22,32(sp)
1010b7bc:	dd400717 	ldw	r21,28(sp)
1010b7c0:	dd000617 	ldw	r20,24(sp)
1010b7c4:	dcc00517 	ldw	r19,20(sp)
1010b7c8:	dc800417 	ldw	r18,16(sp)
1010b7cc:	dc400317 	ldw	r17,12(sp)
1010b7d0:	dc000217 	ldw	r16,8(sp)
1010b7d4:	dec00c04 	addi	sp,sp,48
1010b7d8:	f800283a 	ret
1010b7dc:	04c03fc4 	movi	r19,255
1010b7e0:	99c9803a 	cmpltu	r4,r19,r7
1010b7e4:	200890fa 	slli	r4,r4,3
1010b7e8:	003fa806 	br	1010b68c <__alt_data_end+0xfffeb68c>
1010b7ec:	00803fc4 	movi	r2,255
1010b7f0:	14c5803a 	cmpltu	r2,r2,r19
1010b7f4:	100490fa 	slli	r2,r2,3
1010b7f8:	003fc006 	br	1010b6fc <__alt_data_end+0xfffeb6fc>
1010b7fc:	00804034 	movhi	r2,256
1010b800:	10bfffc4 	addi	r2,r2,-1
1010b804:	11808b36 	bltu	r2,r6,1010ba34 <__umoddi3+0x4f0>
1010b808:	01000404 	movi	r4,16
1010b80c:	003f6406 	br	1010b5a0 <__alt_data_end+0xfffeb5a0>
1010b810:	34c4d83a 	srl	r2,r6,r19
1010b814:	3d0e983a 	sll	r7,r7,r20
1010b818:	8cf8d83a 	srl	fp,r17,r19
1010b81c:	8d10983a 	sll	r8,r17,r20
1010b820:	38aab03a 	or	r21,r7,r2
1010b824:	a82cd43a 	srli	r22,r21,16
1010b828:	84e2d83a 	srl	r17,r16,r19
1010b82c:	e009883a 	mov	r4,fp
1010b830:	b00b883a 	mov	r5,r22
1010b834:	8a22b03a 	or	r17,r17,r8
1010b838:	3524983a 	sll	r18,r6,r20
1010b83c:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b840:	e009883a 	mov	r4,fp
1010b844:	b00b883a 	mov	r5,r22
1010b848:	102f883a 	mov	r23,r2
1010b84c:	010bb740 	call	1010bb74 <__udivsi3>
1010b850:	100d883a 	mov	r6,r2
1010b854:	b808943a 	slli	r4,r23,16
1010b858:	aa3fffcc 	andi	r8,r21,65535
1010b85c:	8804d43a 	srli	r2,r17,16
1010b860:	41af383a 	mul	r23,r8,r6
1010b864:	8520983a 	sll	r16,r16,r20
1010b868:	1104b03a 	or	r2,r2,r4
1010b86c:	15c0042e 	bgeu	r2,r23,1010b880 <__umoddi3+0x33c>
1010b870:	1545883a 	add	r2,r2,r21
1010b874:	30ffffc4 	addi	r3,r6,-1
1010b878:	1540742e 	bgeu	r2,r21,1010ba4c <__umoddi3+0x508>
1010b87c:	180d883a 	mov	r6,r3
1010b880:	15efc83a 	sub	r23,r2,r23
1010b884:	b00b883a 	mov	r5,r22
1010b888:	b809883a 	mov	r4,r23
1010b88c:	d9800115 	stw	r6,4(sp)
1010b890:	da000015 	stw	r8,0(sp)
1010b894:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b898:	b00b883a 	mov	r5,r22
1010b89c:	b809883a 	mov	r4,r23
1010b8a0:	1039883a 	mov	fp,r2
1010b8a4:	010bb740 	call	1010bb74 <__udivsi3>
1010b8a8:	da000017 	ldw	r8,0(sp)
1010b8ac:	e038943a 	slli	fp,fp,16
1010b8b0:	100b883a 	mov	r5,r2
1010b8b4:	4089383a 	mul	r4,r8,r2
1010b8b8:	8a3fffcc 	andi	r8,r17,65535
1010b8bc:	4710b03a 	or	r8,r8,fp
1010b8c0:	d9800117 	ldw	r6,4(sp)
1010b8c4:	4100042e 	bgeu	r8,r4,1010b8d8 <__umoddi3+0x394>
1010b8c8:	4551883a 	add	r8,r8,r21
1010b8cc:	10bfffc4 	addi	r2,r2,-1
1010b8d0:	45405a2e 	bgeu	r8,r21,1010ba3c <__umoddi3+0x4f8>
1010b8d4:	100b883a 	mov	r5,r2
1010b8d8:	300c943a 	slli	r6,r6,16
1010b8dc:	91ffffcc 	andi	r7,r18,65535
1010b8e0:	9004d43a 	srli	r2,r18,16
1010b8e4:	314cb03a 	or	r6,r6,r5
1010b8e8:	317fffcc 	andi	r5,r6,65535
1010b8ec:	300cd43a 	srli	r6,r6,16
1010b8f0:	29d3383a 	mul	r9,r5,r7
1010b8f4:	288b383a 	mul	r5,r5,r2
1010b8f8:	31cf383a 	mul	r7,r6,r7
1010b8fc:	4806d43a 	srli	r3,r9,16
1010b900:	4111c83a 	sub	r8,r8,r4
1010b904:	29cb883a 	add	r5,r5,r7
1010b908:	194b883a 	add	r5,r3,r5
1010b90c:	3085383a 	mul	r2,r6,r2
1010b910:	29c0022e 	bgeu	r5,r7,1010b91c <__umoddi3+0x3d8>
1010b914:	00c00074 	movhi	r3,1
1010b918:	10c5883a 	add	r2,r2,r3
1010b91c:	2808d43a 	srli	r4,r5,16
1010b920:	280a943a 	slli	r5,r5,16
1010b924:	4a7fffcc 	andi	r9,r9,65535
1010b928:	2085883a 	add	r2,r4,r2
1010b92c:	2a4b883a 	add	r5,r5,r9
1010b930:	40803636 	bltu	r8,r2,1010ba0c <__umoddi3+0x4c8>
1010b934:	40804d26 	beq	r8,r2,1010ba6c <__umoddi3+0x528>
1010b938:	4089c83a 	sub	r4,r8,r2
1010b93c:	280f883a 	mov	r7,r5
1010b940:	81cfc83a 	sub	r7,r16,r7
1010b944:	81c7803a 	cmpltu	r3,r16,r7
1010b948:	20c7c83a 	sub	r3,r4,r3
1010b94c:	1cc4983a 	sll	r2,r3,r19
1010b950:	3d0ed83a 	srl	r7,r7,r20
1010b954:	1d06d83a 	srl	r3,r3,r20
1010b958:	11c4b03a 	or	r2,r2,r7
1010b95c:	003f9306 	br	1010b7ac <__alt_data_end+0xfffeb7ac>
1010b960:	9ca6983a 	sll	r19,r19,r18
1010b964:	88e8d83a 	srl	r20,r17,r3
1010b968:	80c4d83a 	srl	r2,r16,r3
1010b96c:	982cd43a 	srli	r22,r19,16
1010b970:	8ca2983a 	sll	r17,r17,r18
1010b974:	a009883a 	mov	r4,r20
1010b978:	b00b883a 	mov	r5,r22
1010b97c:	1478b03a 	or	fp,r2,r17
1010b980:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b984:	a009883a 	mov	r4,r20
1010b988:	b00b883a 	mov	r5,r22
1010b98c:	1023883a 	mov	r17,r2
1010b990:	010bb740 	call	1010bb74 <__udivsi3>
1010b994:	9d7fffcc 	andi	r21,r19,65535
1010b998:	880a943a 	slli	r5,r17,16
1010b99c:	e008d43a 	srli	r4,fp,16
1010b9a0:	a885383a 	mul	r2,r21,r2
1010b9a4:	84a8983a 	sll	r20,r16,r18
1010b9a8:	2148b03a 	or	r4,r4,r5
1010b9ac:	2080042e 	bgeu	r4,r2,1010b9c0 <__umoddi3+0x47c>
1010b9b0:	24c9883a 	add	r4,r4,r19
1010b9b4:	24c00236 	bltu	r4,r19,1010b9c0 <__umoddi3+0x47c>
1010b9b8:	2080012e 	bgeu	r4,r2,1010b9c0 <__umoddi3+0x47c>
1010b9bc:	24c9883a 	add	r4,r4,r19
1010b9c0:	20a3c83a 	sub	r17,r4,r2
1010b9c4:	b00b883a 	mov	r5,r22
1010b9c8:	8809883a 	mov	r4,r17
1010b9cc:	010bbd80 	call	1010bbd8 <__umodsi3>
1010b9d0:	102f883a 	mov	r23,r2
1010b9d4:	8809883a 	mov	r4,r17
1010b9d8:	b00b883a 	mov	r5,r22
1010b9dc:	010bb740 	call	1010bb74 <__udivsi3>
1010b9e0:	b82e943a 	slli	r23,r23,16
1010b9e4:	a885383a 	mul	r2,r21,r2
1010b9e8:	e13fffcc 	andi	r4,fp,65535
1010b9ec:	25c8b03a 	or	r4,r4,r23
1010b9f0:	2080042e 	bgeu	r4,r2,1010ba04 <__umoddi3+0x4c0>
1010b9f4:	24c9883a 	add	r4,r4,r19
1010b9f8:	24c00236 	bltu	r4,r19,1010ba04 <__umoddi3+0x4c0>
1010b9fc:	2080012e 	bgeu	r4,r2,1010ba04 <__umoddi3+0x4c0>
1010ba00:	24c9883a 	add	r4,r4,r19
1010ba04:	20a3c83a 	sub	r17,r4,r2
1010ba08:	003f4806 	br	1010b72c <__alt_data_end+0xfffeb72c>
1010ba0c:	2c8fc83a 	sub	r7,r5,r18
1010ba10:	1545c83a 	sub	r2,r2,r21
1010ba14:	29cb803a 	cmpltu	r5,r5,r7
1010ba18:	1145c83a 	sub	r2,r2,r5
1010ba1c:	4089c83a 	sub	r4,r8,r2
1010ba20:	003fc706 	br	1010b940 <__alt_data_end+0xfffeb940>
1010ba24:	01000604 	movi	r4,24
1010ba28:	003f1806 	br	1010b68c <__alt_data_end+0xfffeb68c>
1010ba2c:	00800604 	movi	r2,24
1010ba30:	003f3206 	br	1010b6fc <__alt_data_end+0xfffeb6fc>
1010ba34:	01000604 	movi	r4,24
1010ba38:	003ed906 	br	1010b5a0 <__alt_data_end+0xfffeb5a0>
1010ba3c:	413fa52e 	bgeu	r8,r4,1010b8d4 <__alt_data_end+0xfffeb8d4>
1010ba40:	297fff84 	addi	r5,r5,-2
1010ba44:	4551883a 	add	r8,r8,r21
1010ba48:	003fa306 	br	1010b8d8 <__alt_data_end+0xfffeb8d8>
1010ba4c:	15ff8b2e 	bgeu	r2,r23,1010b87c <__alt_data_end+0xfffeb87c>
1010ba50:	31bfff84 	addi	r6,r6,-2
1010ba54:	1545883a 	add	r2,r2,r21
1010ba58:	003f8906 	br	1010b880 <__alt_data_end+0xfffeb880>
1010ba5c:	24c9883a 	add	r4,r4,r19
1010ba60:	003eee06 	br	1010b61c <__alt_data_end+0xfffeb61c>
1010ba64:	8005883a 	mov	r2,r16
1010ba68:	003f1706 	br	1010b6c8 <__alt_data_end+0xfffeb6c8>
1010ba6c:	817fe736 	bltu	r16,r5,1010ba0c <__alt_data_end+0xfffeba0c>
1010ba70:	280f883a 	mov	r7,r5
1010ba74:	0009883a 	mov	r4,zero
1010ba78:	003fb106 	br	1010b940 <__alt_data_end+0xfffeb940>

1010ba7c <__divsi3>:
1010ba7c:	20001b16 	blt	r4,zero,1010baec <__divsi3+0x70>
1010ba80:	000f883a 	mov	r7,zero
1010ba84:	28001616 	blt	r5,zero,1010bae0 <__divsi3+0x64>
1010ba88:	200d883a 	mov	r6,r4
1010ba8c:	29001a2e 	bgeu	r5,r4,1010baf8 <__divsi3+0x7c>
1010ba90:	00800804 	movi	r2,32
1010ba94:	00c00044 	movi	r3,1
1010ba98:	00000106 	br	1010baa0 <__divsi3+0x24>
1010ba9c:	10000d26 	beq	r2,zero,1010bad4 <__divsi3+0x58>
1010baa0:	294b883a 	add	r5,r5,r5
1010baa4:	10bfffc4 	addi	r2,r2,-1
1010baa8:	18c7883a 	add	r3,r3,r3
1010baac:	293ffb36 	bltu	r5,r4,1010ba9c <__alt_data_end+0xfffeba9c>
1010bab0:	0005883a 	mov	r2,zero
1010bab4:	18000726 	beq	r3,zero,1010bad4 <__divsi3+0x58>
1010bab8:	0005883a 	mov	r2,zero
1010babc:	31400236 	bltu	r6,r5,1010bac8 <__divsi3+0x4c>
1010bac0:	314dc83a 	sub	r6,r6,r5
1010bac4:	10c4b03a 	or	r2,r2,r3
1010bac8:	1806d07a 	srli	r3,r3,1
1010bacc:	280ad07a 	srli	r5,r5,1
1010bad0:	183ffa1e 	bne	r3,zero,1010babc <__alt_data_end+0xfffebabc>
1010bad4:	38000126 	beq	r7,zero,1010badc <__divsi3+0x60>
1010bad8:	0085c83a 	sub	r2,zero,r2
1010badc:	f800283a 	ret
1010bae0:	014bc83a 	sub	r5,zero,r5
1010bae4:	39c0005c 	xori	r7,r7,1
1010bae8:	003fe706 	br	1010ba88 <__alt_data_end+0xfffeba88>
1010baec:	0109c83a 	sub	r4,zero,r4
1010baf0:	01c00044 	movi	r7,1
1010baf4:	003fe306 	br	1010ba84 <__alt_data_end+0xfffeba84>
1010baf8:	00c00044 	movi	r3,1
1010bafc:	003fee06 	br	1010bab8 <__alt_data_end+0xfffebab8>

1010bb00 <__modsi3>:
1010bb00:	20001716 	blt	r4,zero,1010bb60 <__modsi3+0x60>
1010bb04:	000f883a 	mov	r7,zero
1010bb08:	2005883a 	mov	r2,r4
1010bb0c:	28001216 	blt	r5,zero,1010bb58 <__modsi3+0x58>
1010bb10:	2900162e 	bgeu	r5,r4,1010bb6c <__modsi3+0x6c>
1010bb14:	01800804 	movi	r6,32
1010bb18:	00c00044 	movi	r3,1
1010bb1c:	00000106 	br	1010bb24 <__modsi3+0x24>
1010bb20:	30000a26 	beq	r6,zero,1010bb4c <__modsi3+0x4c>
1010bb24:	294b883a 	add	r5,r5,r5
1010bb28:	31bfffc4 	addi	r6,r6,-1
1010bb2c:	18c7883a 	add	r3,r3,r3
1010bb30:	293ffb36 	bltu	r5,r4,1010bb20 <__alt_data_end+0xfffebb20>
1010bb34:	18000526 	beq	r3,zero,1010bb4c <__modsi3+0x4c>
1010bb38:	1806d07a 	srli	r3,r3,1
1010bb3c:	11400136 	bltu	r2,r5,1010bb44 <__modsi3+0x44>
1010bb40:	1145c83a 	sub	r2,r2,r5
1010bb44:	280ad07a 	srli	r5,r5,1
1010bb48:	183ffb1e 	bne	r3,zero,1010bb38 <__alt_data_end+0xfffebb38>
1010bb4c:	38000126 	beq	r7,zero,1010bb54 <__modsi3+0x54>
1010bb50:	0085c83a 	sub	r2,zero,r2
1010bb54:	f800283a 	ret
1010bb58:	014bc83a 	sub	r5,zero,r5
1010bb5c:	003fec06 	br	1010bb10 <__alt_data_end+0xfffebb10>
1010bb60:	0109c83a 	sub	r4,zero,r4
1010bb64:	01c00044 	movi	r7,1
1010bb68:	003fe706 	br	1010bb08 <__alt_data_end+0xfffebb08>
1010bb6c:	00c00044 	movi	r3,1
1010bb70:	003ff106 	br	1010bb38 <__alt_data_end+0xfffebb38>

1010bb74 <__udivsi3>:
1010bb74:	200d883a 	mov	r6,r4
1010bb78:	2900152e 	bgeu	r5,r4,1010bbd0 <__udivsi3+0x5c>
1010bb7c:	28001416 	blt	r5,zero,1010bbd0 <__udivsi3+0x5c>
1010bb80:	00800804 	movi	r2,32
1010bb84:	00c00044 	movi	r3,1
1010bb88:	00000206 	br	1010bb94 <__udivsi3+0x20>
1010bb8c:	10000e26 	beq	r2,zero,1010bbc8 <__udivsi3+0x54>
1010bb90:	28000516 	blt	r5,zero,1010bba8 <__udivsi3+0x34>
1010bb94:	294b883a 	add	r5,r5,r5
1010bb98:	10bfffc4 	addi	r2,r2,-1
1010bb9c:	18c7883a 	add	r3,r3,r3
1010bba0:	293ffa36 	bltu	r5,r4,1010bb8c <__alt_data_end+0xfffebb8c>
1010bba4:	18000826 	beq	r3,zero,1010bbc8 <__udivsi3+0x54>
1010bba8:	0005883a 	mov	r2,zero
1010bbac:	31400236 	bltu	r6,r5,1010bbb8 <__udivsi3+0x44>
1010bbb0:	314dc83a 	sub	r6,r6,r5
1010bbb4:	10c4b03a 	or	r2,r2,r3
1010bbb8:	1806d07a 	srli	r3,r3,1
1010bbbc:	280ad07a 	srli	r5,r5,1
1010bbc0:	183ffa1e 	bne	r3,zero,1010bbac <__alt_data_end+0xfffebbac>
1010bbc4:	f800283a 	ret
1010bbc8:	0005883a 	mov	r2,zero
1010bbcc:	f800283a 	ret
1010bbd0:	00c00044 	movi	r3,1
1010bbd4:	003ff406 	br	1010bba8 <__alt_data_end+0xfffebba8>

1010bbd8 <__umodsi3>:
1010bbd8:	2005883a 	mov	r2,r4
1010bbdc:	2900122e 	bgeu	r5,r4,1010bc28 <__umodsi3+0x50>
1010bbe0:	28001116 	blt	r5,zero,1010bc28 <__umodsi3+0x50>
1010bbe4:	01800804 	movi	r6,32
1010bbe8:	00c00044 	movi	r3,1
1010bbec:	00000206 	br	1010bbf8 <__umodsi3+0x20>
1010bbf0:	30000c26 	beq	r6,zero,1010bc24 <__umodsi3+0x4c>
1010bbf4:	28000516 	blt	r5,zero,1010bc0c <__umodsi3+0x34>
1010bbf8:	294b883a 	add	r5,r5,r5
1010bbfc:	31bfffc4 	addi	r6,r6,-1
1010bc00:	18c7883a 	add	r3,r3,r3
1010bc04:	293ffa36 	bltu	r5,r4,1010bbf0 <__alt_data_end+0xfffebbf0>
1010bc08:	18000626 	beq	r3,zero,1010bc24 <__umodsi3+0x4c>
1010bc0c:	1806d07a 	srli	r3,r3,1
1010bc10:	11400136 	bltu	r2,r5,1010bc18 <__umodsi3+0x40>
1010bc14:	1145c83a 	sub	r2,r2,r5
1010bc18:	280ad07a 	srli	r5,r5,1
1010bc1c:	183ffb1e 	bne	r3,zero,1010bc0c <__alt_data_end+0xfffebc0c>
1010bc20:	f800283a 	ret
1010bc24:	f800283a 	ret
1010bc28:	00c00044 	movi	r3,1
1010bc2c:	003ff706 	br	1010bc0c <__alt_data_end+0xfffebc0c>

1010bc30 <__adddf3>:
1010bc30:	02c00434 	movhi	r11,16
1010bc34:	5affffc4 	addi	r11,r11,-1
1010bc38:	2806d7fa 	srli	r3,r5,31
1010bc3c:	2ad4703a 	and	r10,r5,r11
1010bc40:	3ad2703a 	and	r9,r7,r11
1010bc44:	3804d53a 	srli	r2,r7,20
1010bc48:	3018d77a 	srli	r12,r6,29
1010bc4c:	280ad53a 	srli	r5,r5,20
1010bc50:	501490fa 	slli	r10,r10,3
1010bc54:	2010d77a 	srli	r8,r4,29
1010bc58:	481290fa 	slli	r9,r9,3
1010bc5c:	380ed7fa 	srli	r7,r7,31
1010bc60:	defffb04 	addi	sp,sp,-20
1010bc64:	dc800215 	stw	r18,8(sp)
1010bc68:	dc400115 	stw	r17,4(sp)
1010bc6c:	dc000015 	stw	r16,0(sp)
1010bc70:	dfc00415 	stw	ra,16(sp)
1010bc74:	dcc00315 	stw	r19,12(sp)
1010bc78:	1c803fcc 	andi	r18,r3,255
1010bc7c:	2c01ffcc 	andi	r16,r5,2047
1010bc80:	5210b03a 	or	r8,r10,r8
1010bc84:	202290fa 	slli	r17,r4,3
1010bc88:	1081ffcc 	andi	r2,r2,2047
1010bc8c:	4b12b03a 	or	r9,r9,r12
1010bc90:	300c90fa 	slli	r6,r6,3
1010bc94:	91c07526 	beq	r18,r7,1010be6c <__adddf3+0x23c>
1010bc98:	8087c83a 	sub	r3,r16,r2
1010bc9c:	00c0ab0e 	bge	zero,r3,1010bf4c <__adddf3+0x31c>
1010bca0:	10002a1e 	bne	r2,zero,1010bd4c <__adddf3+0x11c>
1010bca4:	4984b03a 	or	r2,r9,r6
1010bca8:	1000961e 	bne	r2,zero,1010bf04 <__adddf3+0x2d4>
1010bcac:	888001cc 	andi	r2,r17,7
1010bcb0:	10000726 	beq	r2,zero,1010bcd0 <__adddf3+0xa0>
1010bcb4:	888003cc 	andi	r2,r17,15
1010bcb8:	00c00104 	movi	r3,4
1010bcbc:	10c00426 	beq	r2,r3,1010bcd0 <__adddf3+0xa0>
1010bcc0:	88c7883a 	add	r3,r17,r3
1010bcc4:	1c63803a 	cmpltu	r17,r3,r17
1010bcc8:	4451883a 	add	r8,r8,r17
1010bccc:	1823883a 	mov	r17,r3
1010bcd0:	4080202c 	andhi	r2,r8,128
1010bcd4:	10005926 	beq	r2,zero,1010be3c <__adddf3+0x20c>
1010bcd8:	84000044 	addi	r16,r16,1
1010bcdc:	0081ffc4 	movi	r2,2047
1010bce0:	8080ba26 	beq	r16,r2,1010bfcc <__adddf3+0x39c>
1010bce4:	00bfe034 	movhi	r2,65408
1010bce8:	10bfffc4 	addi	r2,r2,-1
1010bcec:	4090703a 	and	r8,r8,r2
1010bcf0:	4004977a 	slli	r2,r8,29
1010bcf4:	4010927a 	slli	r8,r8,9
1010bcf8:	8822d0fa 	srli	r17,r17,3
1010bcfc:	8401ffcc 	andi	r16,r16,2047
1010bd00:	4010d33a 	srli	r8,r8,12
1010bd04:	9007883a 	mov	r3,r18
1010bd08:	1444b03a 	or	r2,r2,r17
1010bd0c:	8401ffcc 	andi	r16,r16,2047
1010bd10:	8020953a 	slli	r16,r16,20
1010bd14:	18c03fcc 	andi	r3,r3,255
1010bd18:	01000434 	movhi	r4,16
1010bd1c:	213fffc4 	addi	r4,r4,-1
1010bd20:	180697fa 	slli	r3,r3,31
1010bd24:	4110703a 	and	r8,r8,r4
1010bd28:	4410b03a 	or	r8,r8,r16
1010bd2c:	40c6b03a 	or	r3,r8,r3
1010bd30:	dfc00417 	ldw	ra,16(sp)
1010bd34:	dcc00317 	ldw	r19,12(sp)
1010bd38:	dc800217 	ldw	r18,8(sp)
1010bd3c:	dc400117 	ldw	r17,4(sp)
1010bd40:	dc000017 	ldw	r16,0(sp)
1010bd44:	dec00504 	addi	sp,sp,20
1010bd48:	f800283a 	ret
1010bd4c:	0081ffc4 	movi	r2,2047
1010bd50:	80bfd626 	beq	r16,r2,1010bcac <__alt_data_end+0xfffebcac>
1010bd54:	4a402034 	orhi	r9,r9,128
1010bd58:	00800e04 	movi	r2,56
1010bd5c:	10c09f16 	blt	r2,r3,1010bfdc <__adddf3+0x3ac>
1010bd60:	008007c4 	movi	r2,31
1010bd64:	10c0c216 	blt	r2,r3,1010c070 <__adddf3+0x440>
1010bd68:	00800804 	movi	r2,32
1010bd6c:	10c5c83a 	sub	r2,r2,r3
1010bd70:	488a983a 	sll	r5,r9,r2
1010bd74:	30c8d83a 	srl	r4,r6,r3
1010bd78:	3084983a 	sll	r2,r6,r2
1010bd7c:	48c6d83a 	srl	r3,r9,r3
1010bd80:	290cb03a 	or	r6,r5,r4
1010bd84:	1004c03a 	cmpne	r2,r2,zero
1010bd88:	308cb03a 	or	r6,r6,r2
1010bd8c:	898dc83a 	sub	r6,r17,r6
1010bd90:	89a3803a 	cmpltu	r17,r17,r6
1010bd94:	40d1c83a 	sub	r8,r8,r3
1010bd98:	4451c83a 	sub	r8,r8,r17
1010bd9c:	3023883a 	mov	r17,r6
1010bda0:	4080202c 	andhi	r2,r8,128
1010bda4:	10002326 	beq	r2,zero,1010be34 <__adddf3+0x204>
1010bda8:	04c02034 	movhi	r19,128
1010bdac:	9cffffc4 	addi	r19,r19,-1
1010bdb0:	44e6703a 	and	r19,r8,r19
1010bdb4:	98007626 	beq	r19,zero,1010bf90 <__adddf3+0x360>
1010bdb8:	9809883a 	mov	r4,r19
1010bdbc:	010e2340 	call	1010e234 <__clzsi2>
1010bdc0:	10fffe04 	addi	r3,r2,-8
1010bdc4:	010007c4 	movi	r4,31
1010bdc8:	20c07716 	blt	r4,r3,1010bfa8 <__adddf3+0x378>
1010bdcc:	00800804 	movi	r2,32
1010bdd0:	10c5c83a 	sub	r2,r2,r3
1010bdd4:	8884d83a 	srl	r2,r17,r2
1010bdd8:	98d0983a 	sll	r8,r19,r3
1010bddc:	88e2983a 	sll	r17,r17,r3
1010bde0:	1204b03a 	or	r2,r2,r8
1010bde4:	1c007416 	blt	r3,r16,1010bfb8 <__adddf3+0x388>
1010bde8:	1c21c83a 	sub	r16,r3,r16
1010bdec:	82000044 	addi	r8,r16,1
1010bdf0:	00c007c4 	movi	r3,31
1010bdf4:	1a009116 	blt	r3,r8,1010c03c <__adddf3+0x40c>
1010bdf8:	00c00804 	movi	r3,32
1010bdfc:	1a07c83a 	sub	r3,r3,r8
1010be00:	8a08d83a 	srl	r4,r17,r8
1010be04:	88e2983a 	sll	r17,r17,r3
1010be08:	10c6983a 	sll	r3,r2,r3
1010be0c:	1210d83a 	srl	r8,r2,r8
1010be10:	8804c03a 	cmpne	r2,r17,zero
1010be14:	1906b03a 	or	r3,r3,r4
1010be18:	18a2b03a 	or	r17,r3,r2
1010be1c:	0021883a 	mov	r16,zero
1010be20:	003fa206 	br	1010bcac <__alt_data_end+0xfffebcac>
1010be24:	1890b03a 	or	r8,r3,r2
1010be28:	40017d26 	beq	r8,zero,1010c420 <__adddf3+0x7f0>
1010be2c:	1011883a 	mov	r8,r2
1010be30:	1823883a 	mov	r17,r3
1010be34:	888001cc 	andi	r2,r17,7
1010be38:	103f9e1e 	bne	r2,zero,1010bcb4 <__alt_data_end+0xfffebcb4>
1010be3c:	4004977a 	slli	r2,r8,29
1010be40:	8822d0fa 	srli	r17,r17,3
1010be44:	4010d0fa 	srli	r8,r8,3
1010be48:	9007883a 	mov	r3,r18
1010be4c:	1444b03a 	or	r2,r2,r17
1010be50:	0101ffc4 	movi	r4,2047
1010be54:	81002426 	beq	r16,r4,1010bee8 <__adddf3+0x2b8>
1010be58:	8120703a 	and	r16,r16,r4
1010be5c:	01000434 	movhi	r4,16
1010be60:	213fffc4 	addi	r4,r4,-1
1010be64:	4110703a 	and	r8,r8,r4
1010be68:	003fa806 	br	1010bd0c <__alt_data_end+0xfffebd0c>
1010be6c:	8089c83a 	sub	r4,r16,r2
1010be70:	01005e0e 	bge	zero,r4,1010bfec <__adddf3+0x3bc>
1010be74:	10002b26 	beq	r2,zero,1010bf24 <__adddf3+0x2f4>
1010be78:	0081ffc4 	movi	r2,2047
1010be7c:	80bf8b26 	beq	r16,r2,1010bcac <__alt_data_end+0xfffebcac>
1010be80:	4a402034 	orhi	r9,r9,128
1010be84:	00800e04 	movi	r2,56
1010be88:	1100a40e 	bge	r2,r4,1010c11c <__adddf3+0x4ec>
1010be8c:	498cb03a 	or	r6,r9,r6
1010be90:	300ac03a 	cmpne	r5,r6,zero
1010be94:	0013883a 	mov	r9,zero
1010be98:	2c4b883a 	add	r5,r5,r17
1010be9c:	2c63803a 	cmpltu	r17,r5,r17
1010bea0:	4a11883a 	add	r8,r9,r8
1010bea4:	8a11883a 	add	r8,r17,r8
1010bea8:	2823883a 	mov	r17,r5
1010beac:	4080202c 	andhi	r2,r8,128
1010beb0:	103fe026 	beq	r2,zero,1010be34 <__alt_data_end+0xfffebe34>
1010beb4:	84000044 	addi	r16,r16,1
1010beb8:	0081ffc4 	movi	r2,2047
1010bebc:	8080d226 	beq	r16,r2,1010c208 <__adddf3+0x5d8>
1010bec0:	00bfe034 	movhi	r2,65408
1010bec4:	10bfffc4 	addi	r2,r2,-1
1010bec8:	4090703a 	and	r8,r8,r2
1010becc:	880ad07a 	srli	r5,r17,1
1010bed0:	400897fa 	slli	r4,r8,31
1010bed4:	88c0004c 	andi	r3,r17,1
1010bed8:	28e2b03a 	or	r17,r5,r3
1010bedc:	4010d07a 	srli	r8,r8,1
1010bee0:	2462b03a 	or	r17,r4,r17
1010bee4:	003f7106 	br	1010bcac <__alt_data_end+0xfffebcac>
1010bee8:	4088b03a 	or	r4,r8,r2
1010beec:	20014526 	beq	r4,zero,1010c404 <__adddf3+0x7d4>
1010bef0:	01000434 	movhi	r4,16
1010bef4:	42000234 	orhi	r8,r8,8
1010bef8:	213fffc4 	addi	r4,r4,-1
1010befc:	4110703a 	and	r8,r8,r4
1010bf00:	003f8206 	br	1010bd0c <__alt_data_end+0xfffebd0c>
1010bf04:	18ffffc4 	addi	r3,r3,-1
1010bf08:	1800491e 	bne	r3,zero,1010c030 <__adddf3+0x400>
1010bf0c:	898bc83a 	sub	r5,r17,r6
1010bf10:	8963803a 	cmpltu	r17,r17,r5
1010bf14:	4251c83a 	sub	r8,r8,r9
1010bf18:	4451c83a 	sub	r8,r8,r17
1010bf1c:	2823883a 	mov	r17,r5
1010bf20:	003f9f06 	br	1010bda0 <__alt_data_end+0xfffebda0>
1010bf24:	4984b03a 	or	r2,r9,r6
1010bf28:	103f6026 	beq	r2,zero,1010bcac <__alt_data_end+0xfffebcac>
1010bf2c:	213fffc4 	addi	r4,r4,-1
1010bf30:	2000931e 	bne	r4,zero,1010c180 <__adddf3+0x550>
1010bf34:	898d883a 	add	r6,r17,r6
1010bf38:	3463803a 	cmpltu	r17,r6,r17
1010bf3c:	4251883a 	add	r8,r8,r9
1010bf40:	8a11883a 	add	r8,r17,r8
1010bf44:	3023883a 	mov	r17,r6
1010bf48:	003fd806 	br	1010beac <__alt_data_end+0xfffebeac>
1010bf4c:	1800541e 	bne	r3,zero,1010c0a0 <__adddf3+0x470>
1010bf50:	80800044 	addi	r2,r16,1
1010bf54:	1081ffcc 	andi	r2,r2,2047
1010bf58:	00c00044 	movi	r3,1
1010bf5c:	1880a00e 	bge	r3,r2,1010c1e0 <__adddf3+0x5b0>
1010bf60:	8989c83a 	sub	r4,r17,r6
1010bf64:	8905803a 	cmpltu	r2,r17,r4
1010bf68:	4267c83a 	sub	r19,r8,r9
1010bf6c:	98a7c83a 	sub	r19,r19,r2
1010bf70:	9880202c 	andhi	r2,r19,128
1010bf74:	10006326 	beq	r2,zero,1010c104 <__adddf3+0x4d4>
1010bf78:	3463c83a 	sub	r17,r6,r17
1010bf7c:	4a07c83a 	sub	r3,r9,r8
1010bf80:	344d803a 	cmpltu	r6,r6,r17
1010bf84:	19a7c83a 	sub	r19,r3,r6
1010bf88:	3825883a 	mov	r18,r7
1010bf8c:	983f8a1e 	bne	r19,zero,1010bdb8 <__alt_data_end+0xfffebdb8>
1010bf90:	8809883a 	mov	r4,r17
1010bf94:	010e2340 	call	1010e234 <__clzsi2>
1010bf98:	10800804 	addi	r2,r2,32
1010bf9c:	10fffe04 	addi	r3,r2,-8
1010bfa0:	010007c4 	movi	r4,31
1010bfa4:	20ff890e 	bge	r4,r3,1010bdcc <__alt_data_end+0xfffebdcc>
1010bfa8:	10bff604 	addi	r2,r2,-40
1010bfac:	8884983a 	sll	r2,r17,r2
1010bfb0:	0023883a 	mov	r17,zero
1010bfb4:	1c3f8c0e 	bge	r3,r16,1010bde8 <__alt_data_end+0xfffebde8>
1010bfb8:	023fe034 	movhi	r8,65408
1010bfbc:	423fffc4 	addi	r8,r8,-1
1010bfc0:	80e1c83a 	sub	r16,r16,r3
1010bfc4:	1210703a 	and	r8,r2,r8
1010bfc8:	003f3806 	br	1010bcac <__alt_data_end+0xfffebcac>
1010bfcc:	9007883a 	mov	r3,r18
1010bfd0:	0011883a 	mov	r8,zero
1010bfd4:	0005883a 	mov	r2,zero
1010bfd8:	003f4c06 	br	1010bd0c <__alt_data_end+0xfffebd0c>
1010bfdc:	498cb03a 	or	r6,r9,r6
1010bfe0:	300cc03a 	cmpne	r6,r6,zero
1010bfe4:	0007883a 	mov	r3,zero
1010bfe8:	003f6806 	br	1010bd8c <__alt_data_end+0xfffebd8c>
1010bfec:	20009c1e 	bne	r4,zero,1010c260 <__adddf3+0x630>
1010bff0:	80800044 	addi	r2,r16,1
1010bff4:	1141ffcc 	andi	r5,r2,2047
1010bff8:	01000044 	movi	r4,1
1010bffc:	2140670e 	bge	r4,r5,1010c19c <__adddf3+0x56c>
1010c000:	0101ffc4 	movi	r4,2047
1010c004:	11007f26 	beq	r2,r4,1010c204 <__adddf3+0x5d4>
1010c008:	898d883a 	add	r6,r17,r6
1010c00c:	4247883a 	add	r3,r8,r9
1010c010:	3451803a 	cmpltu	r8,r6,r17
1010c014:	40d1883a 	add	r8,r8,r3
1010c018:	402297fa 	slli	r17,r8,31
1010c01c:	300cd07a 	srli	r6,r6,1
1010c020:	4010d07a 	srli	r8,r8,1
1010c024:	1021883a 	mov	r16,r2
1010c028:	89a2b03a 	or	r17,r17,r6
1010c02c:	003f1f06 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c030:	0081ffc4 	movi	r2,2047
1010c034:	80bf481e 	bne	r16,r2,1010bd58 <__alt_data_end+0xfffebd58>
1010c038:	003f1c06 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c03c:	843ff844 	addi	r16,r16,-31
1010c040:	01000804 	movi	r4,32
1010c044:	1406d83a 	srl	r3,r2,r16
1010c048:	41005026 	beq	r8,r4,1010c18c <__adddf3+0x55c>
1010c04c:	01001004 	movi	r4,64
1010c050:	2211c83a 	sub	r8,r4,r8
1010c054:	1204983a 	sll	r2,r2,r8
1010c058:	88a2b03a 	or	r17,r17,r2
1010c05c:	8822c03a 	cmpne	r17,r17,zero
1010c060:	1c62b03a 	or	r17,r3,r17
1010c064:	0011883a 	mov	r8,zero
1010c068:	0021883a 	mov	r16,zero
1010c06c:	003f7106 	br	1010be34 <__alt_data_end+0xfffebe34>
1010c070:	193ff804 	addi	r4,r3,-32
1010c074:	00800804 	movi	r2,32
1010c078:	4908d83a 	srl	r4,r9,r4
1010c07c:	18804526 	beq	r3,r2,1010c194 <__adddf3+0x564>
1010c080:	00801004 	movi	r2,64
1010c084:	10c5c83a 	sub	r2,r2,r3
1010c088:	4886983a 	sll	r3,r9,r2
1010c08c:	198cb03a 	or	r6,r3,r6
1010c090:	300cc03a 	cmpne	r6,r6,zero
1010c094:	218cb03a 	or	r6,r4,r6
1010c098:	0007883a 	mov	r3,zero
1010c09c:	003f3b06 	br	1010bd8c <__alt_data_end+0xfffebd8c>
1010c0a0:	80002a26 	beq	r16,zero,1010c14c <__adddf3+0x51c>
1010c0a4:	0101ffc4 	movi	r4,2047
1010c0a8:	11006826 	beq	r2,r4,1010c24c <__adddf3+0x61c>
1010c0ac:	00c7c83a 	sub	r3,zero,r3
1010c0b0:	42002034 	orhi	r8,r8,128
1010c0b4:	01000e04 	movi	r4,56
1010c0b8:	20c07c16 	blt	r4,r3,1010c2ac <__adddf3+0x67c>
1010c0bc:	010007c4 	movi	r4,31
1010c0c0:	20c0da16 	blt	r4,r3,1010c42c <__adddf3+0x7fc>
1010c0c4:	01000804 	movi	r4,32
1010c0c8:	20c9c83a 	sub	r4,r4,r3
1010c0cc:	4114983a 	sll	r10,r8,r4
1010c0d0:	88cad83a 	srl	r5,r17,r3
1010c0d4:	8908983a 	sll	r4,r17,r4
1010c0d8:	40c6d83a 	srl	r3,r8,r3
1010c0dc:	5162b03a 	or	r17,r10,r5
1010c0e0:	2008c03a 	cmpne	r4,r4,zero
1010c0e4:	8922b03a 	or	r17,r17,r4
1010c0e8:	3463c83a 	sub	r17,r6,r17
1010c0ec:	48c7c83a 	sub	r3,r9,r3
1010c0f0:	344d803a 	cmpltu	r6,r6,r17
1010c0f4:	1991c83a 	sub	r8,r3,r6
1010c0f8:	1021883a 	mov	r16,r2
1010c0fc:	3825883a 	mov	r18,r7
1010c100:	003f2706 	br	1010bda0 <__alt_data_end+0xfffebda0>
1010c104:	24d0b03a 	or	r8,r4,r19
1010c108:	40001b1e 	bne	r8,zero,1010c178 <__adddf3+0x548>
1010c10c:	0005883a 	mov	r2,zero
1010c110:	0007883a 	mov	r3,zero
1010c114:	0021883a 	mov	r16,zero
1010c118:	003f4d06 	br	1010be50 <__alt_data_end+0xfffebe50>
1010c11c:	008007c4 	movi	r2,31
1010c120:	11003c16 	blt	r2,r4,1010c214 <__adddf3+0x5e4>
1010c124:	00800804 	movi	r2,32
1010c128:	1105c83a 	sub	r2,r2,r4
1010c12c:	488e983a 	sll	r7,r9,r2
1010c130:	310ad83a 	srl	r5,r6,r4
1010c134:	3084983a 	sll	r2,r6,r2
1010c138:	4912d83a 	srl	r9,r9,r4
1010c13c:	394ab03a 	or	r5,r7,r5
1010c140:	1004c03a 	cmpne	r2,r2,zero
1010c144:	288ab03a 	or	r5,r5,r2
1010c148:	003f5306 	br	1010be98 <__alt_data_end+0xfffebe98>
1010c14c:	4448b03a 	or	r4,r8,r17
1010c150:	20003e26 	beq	r4,zero,1010c24c <__adddf3+0x61c>
1010c154:	00c6303a 	nor	r3,zero,r3
1010c158:	18003a1e 	bne	r3,zero,1010c244 <__adddf3+0x614>
1010c15c:	3463c83a 	sub	r17,r6,r17
1010c160:	4a07c83a 	sub	r3,r9,r8
1010c164:	344d803a 	cmpltu	r6,r6,r17
1010c168:	1991c83a 	sub	r8,r3,r6
1010c16c:	1021883a 	mov	r16,r2
1010c170:	3825883a 	mov	r18,r7
1010c174:	003f0a06 	br	1010bda0 <__alt_data_end+0xfffebda0>
1010c178:	2023883a 	mov	r17,r4
1010c17c:	003f0d06 	br	1010bdb4 <__alt_data_end+0xfffebdb4>
1010c180:	0081ffc4 	movi	r2,2047
1010c184:	80bf3f1e 	bne	r16,r2,1010be84 <__alt_data_end+0xfffebe84>
1010c188:	003ec806 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c18c:	0005883a 	mov	r2,zero
1010c190:	003fb106 	br	1010c058 <__alt_data_end+0xfffec058>
1010c194:	0007883a 	mov	r3,zero
1010c198:	003fbc06 	br	1010c08c <__alt_data_end+0xfffec08c>
1010c19c:	4444b03a 	or	r2,r8,r17
1010c1a0:	8000871e 	bne	r16,zero,1010c3c0 <__adddf3+0x790>
1010c1a4:	1000ba26 	beq	r2,zero,1010c490 <__adddf3+0x860>
1010c1a8:	4984b03a 	or	r2,r9,r6
1010c1ac:	103ebf26 	beq	r2,zero,1010bcac <__alt_data_end+0xfffebcac>
1010c1b0:	8985883a 	add	r2,r17,r6
1010c1b4:	4247883a 	add	r3,r8,r9
1010c1b8:	1451803a 	cmpltu	r8,r2,r17
1010c1bc:	40d1883a 	add	r8,r8,r3
1010c1c0:	40c0202c 	andhi	r3,r8,128
1010c1c4:	1023883a 	mov	r17,r2
1010c1c8:	183f1a26 	beq	r3,zero,1010be34 <__alt_data_end+0xfffebe34>
1010c1cc:	00bfe034 	movhi	r2,65408
1010c1d0:	10bfffc4 	addi	r2,r2,-1
1010c1d4:	2021883a 	mov	r16,r4
1010c1d8:	4090703a 	and	r8,r8,r2
1010c1dc:	003eb306 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c1e0:	4444b03a 	or	r2,r8,r17
1010c1e4:	8000291e 	bne	r16,zero,1010c28c <__adddf3+0x65c>
1010c1e8:	10004b1e 	bne	r2,zero,1010c318 <__adddf3+0x6e8>
1010c1ec:	4990b03a 	or	r8,r9,r6
1010c1f0:	40008b26 	beq	r8,zero,1010c420 <__adddf3+0x7f0>
1010c1f4:	4811883a 	mov	r8,r9
1010c1f8:	3023883a 	mov	r17,r6
1010c1fc:	3825883a 	mov	r18,r7
1010c200:	003eaa06 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c204:	1021883a 	mov	r16,r2
1010c208:	0011883a 	mov	r8,zero
1010c20c:	0005883a 	mov	r2,zero
1010c210:	003f0f06 	br	1010be50 <__alt_data_end+0xfffebe50>
1010c214:	217ff804 	addi	r5,r4,-32
1010c218:	00800804 	movi	r2,32
1010c21c:	494ad83a 	srl	r5,r9,r5
1010c220:	20807d26 	beq	r4,r2,1010c418 <__adddf3+0x7e8>
1010c224:	00801004 	movi	r2,64
1010c228:	1109c83a 	sub	r4,r2,r4
1010c22c:	4912983a 	sll	r9,r9,r4
1010c230:	498cb03a 	or	r6,r9,r6
1010c234:	300cc03a 	cmpne	r6,r6,zero
1010c238:	298ab03a 	or	r5,r5,r6
1010c23c:	0013883a 	mov	r9,zero
1010c240:	003f1506 	br	1010be98 <__alt_data_end+0xfffebe98>
1010c244:	0101ffc4 	movi	r4,2047
1010c248:	113f9a1e 	bne	r2,r4,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c24c:	4811883a 	mov	r8,r9
1010c250:	3023883a 	mov	r17,r6
1010c254:	1021883a 	mov	r16,r2
1010c258:	3825883a 	mov	r18,r7
1010c25c:	003e9306 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c260:	8000161e 	bne	r16,zero,1010c2bc <__adddf3+0x68c>
1010c264:	444ab03a 	or	r5,r8,r17
1010c268:	28005126 	beq	r5,zero,1010c3b0 <__adddf3+0x780>
1010c26c:	0108303a 	nor	r4,zero,r4
1010c270:	20004d1e 	bne	r4,zero,1010c3a8 <__adddf3+0x778>
1010c274:	89a3883a 	add	r17,r17,r6
1010c278:	4253883a 	add	r9,r8,r9
1010c27c:	898d803a 	cmpltu	r6,r17,r6
1010c280:	3251883a 	add	r8,r6,r9
1010c284:	1021883a 	mov	r16,r2
1010c288:	003f0806 	br	1010beac <__alt_data_end+0xfffebeac>
1010c28c:	1000301e 	bne	r2,zero,1010c350 <__adddf3+0x720>
1010c290:	4984b03a 	or	r2,r9,r6
1010c294:	10007126 	beq	r2,zero,1010c45c <__adddf3+0x82c>
1010c298:	4811883a 	mov	r8,r9
1010c29c:	3023883a 	mov	r17,r6
1010c2a0:	3825883a 	mov	r18,r7
1010c2a4:	0401ffc4 	movi	r16,2047
1010c2a8:	003e8006 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c2ac:	4462b03a 	or	r17,r8,r17
1010c2b0:	8822c03a 	cmpne	r17,r17,zero
1010c2b4:	0007883a 	mov	r3,zero
1010c2b8:	003f8b06 	br	1010c0e8 <__alt_data_end+0xfffec0e8>
1010c2bc:	0141ffc4 	movi	r5,2047
1010c2c0:	11403b26 	beq	r2,r5,1010c3b0 <__adddf3+0x780>
1010c2c4:	0109c83a 	sub	r4,zero,r4
1010c2c8:	42002034 	orhi	r8,r8,128
1010c2cc:	01400e04 	movi	r5,56
1010c2d0:	29006716 	blt	r5,r4,1010c470 <__adddf3+0x840>
1010c2d4:	014007c4 	movi	r5,31
1010c2d8:	29007016 	blt	r5,r4,1010c49c <__adddf3+0x86c>
1010c2dc:	01400804 	movi	r5,32
1010c2e0:	290bc83a 	sub	r5,r5,r4
1010c2e4:	4154983a 	sll	r10,r8,r5
1010c2e8:	890ed83a 	srl	r7,r17,r4
1010c2ec:	894a983a 	sll	r5,r17,r5
1010c2f0:	4108d83a 	srl	r4,r8,r4
1010c2f4:	51e2b03a 	or	r17,r10,r7
1010c2f8:	280ac03a 	cmpne	r5,r5,zero
1010c2fc:	8962b03a 	or	r17,r17,r5
1010c300:	89a3883a 	add	r17,r17,r6
1010c304:	2253883a 	add	r9,r4,r9
1010c308:	898d803a 	cmpltu	r6,r17,r6
1010c30c:	3251883a 	add	r8,r6,r9
1010c310:	1021883a 	mov	r16,r2
1010c314:	003ee506 	br	1010beac <__alt_data_end+0xfffebeac>
1010c318:	4984b03a 	or	r2,r9,r6
1010c31c:	103e6326 	beq	r2,zero,1010bcac <__alt_data_end+0xfffebcac>
1010c320:	8987c83a 	sub	r3,r17,r6
1010c324:	88c9803a 	cmpltu	r4,r17,r3
1010c328:	4245c83a 	sub	r2,r8,r9
1010c32c:	1105c83a 	sub	r2,r2,r4
1010c330:	1100202c 	andhi	r4,r2,128
1010c334:	203ebb26 	beq	r4,zero,1010be24 <__alt_data_end+0xfffebe24>
1010c338:	3463c83a 	sub	r17,r6,r17
1010c33c:	4a07c83a 	sub	r3,r9,r8
1010c340:	344d803a 	cmpltu	r6,r6,r17
1010c344:	1991c83a 	sub	r8,r3,r6
1010c348:	3825883a 	mov	r18,r7
1010c34c:	003e5706 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c350:	4984b03a 	or	r2,r9,r6
1010c354:	10002e26 	beq	r2,zero,1010c410 <__adddf3+0x7e0>
1010c358:	4004d0fa 	srli	r2,r8,3
1010c35c:	8822d0fa 	srli	r17,r17,3
1010c360:	4010977a 	slli	r8,r8,29
1010c364:	10c0022c 	andhi	r3,r2,8
1010c368:	4462b03a 	or	r17,r8,r17
1010c36c:	18000826 	beq	r3,zero,1010c390 <__adddf3+0x760>
1010c370:	4808d0fa 	srli	r4,r9,3
1010c374:	20c0022c 	andhi	r3,r4,8
1010c378:	1800051e 	bne	r3,zero,1010c390 <__adddf3+0x760>
1010c37c:	300cd0fa 	srli	r6,r6,3
1010c380:	4806977a 	slli	r3,r9,29
1010c384:	2005883a 	mov	r2,r4
1010c388:	3825883a 	mov	r18,r7
1010c38c:	19a2b03a 	or	r17,r3,r6
1010c390:	8810d77a 	srli	r8,r17,29
1010c394:	100490fa 	slli	r2,r2,3
1010c398:	882290fa 	slli	r17,r17,3
1010c39c:	0401ffc4 	movi	r16,2047
1010c3a0:	4090b03a 	or	r8,r8,r2
1010c3a4:	003e4106 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c3a8:	0141ffc4 	movi	r5,2047
1010c3ac:	117fc71e 	bne	r2,r5,1010c2cc <__alt_data_end+0xfffec2cc>
1010c3b0:	4811883a 	mov	r8,r9
1010c3b4:	3023883a 	mov	r17,r6
1010c3b8:	1021883a 	mov	r16,r2
1010c3bc:	003e3b06 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c3c0:	10002f26 	beq	r2,zero,1010c480 <__adddf3+0x850>
1010c3c4:	4984b03a 	or	r2,r9,r6
1010c3c8:	10001126 	beq	r2,zero,1010c410 <__adddf3+0x7e0>
1010c3cc:	4004d0fa 	srli	r2,r8,3
1010c3d0:	8822d0fa 	srli	r17,r17,3
1010c3d4:	4010977a 	slli	r8,r8,29
1010c3d8:	10c0022c 	andhi	r3,r2,8
1010c3dc:	4462b03a 	or	r17,r8,r17
1010c3e0:	183feb26 	beq	r3,zero,1010c390 <__alt_data_end+0xfffec390>
1010c3e4:	4808d0fa 	srli	r4,r9,3
1010c3e8:	20c0022c 	andhi	r3,r4,8
1010c3ec:	183fe81e 	bne	r3,zero,1010c390 <__alt_data_end+0xfffec390>
1010c3f0:	300cd0fa 	srli	r6,r6,3
1010c3f4:	4806977a 	slli	r3,r9,29
1010c3f8:	2005883a 	mov	r2,r4
1010c3fc:	19a2b03a 	or	r17,r3,r6
1010c400:	003fe306 	br	1010c390 <__alt_data_end+0xfffec390>
1010c404:	0011883a 	mov	r8,zero
1010c408:	0005883a 	mov	r2,zero
1010c40c:	003e3f06 	br	1010bd0c <__alt_data_end+0xfffebd0c>
1010c410:	0401ffc4 	movi	r16,2047
1010c414:	003e2506 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c418:	0013883a 	mov	r9,zero
1010c41c:	003f8406 	br	1010c230 <__alt_data_end+0xfffec230>
1010c420:	0005883a 	mov	r2,zero
1010c424:	0007883a 	mov	r3,zero
1010c428:	003e8906 	br	1010be50 <__alt_data_end+0xfffebe50>
1010c42c:	197ff804 	addi	r5,r3,-32
1010c430:	01000804 	movi	r4,32
1010c434:	414ad83a 	srl	r5,r8,r5
1010c438:	19002426 	beq	r3,r4,1010c4cc <__adddf3+0x89c>
1010c43c:	01001004 	movi	r4,64
1010c440:	20c7c83a 	sub	r3,r4,r3
1010c444:	40c6983a 	sll	r3,r8,r3
1010c448:	1c46b03a 	or	r3,r3,r17
1010c44c:	1806c03a 	cmpne	r3,r3,zero
1010c450:	28e2b03a 	or	r17,r5,r3
1010c454:	0007883a 	mov	r3,zero
1010c458:	003f2306 	br	1010c0e8 <__alt_data_end+0xfffec0e8>
1010c45c:	0007883a 	mov	r3,zero
1010c460:	5811883a 	mov	r8,r11
1010c464:	00bfffc4 	movi	r2,-1
1010c468:	0401ffc4 	movi	r16,2047
1010c46c:	003e7806 	br	1010be50 <__alt_data_end+0xfffebe50>
1010c470:	4462b03a 	or	r17,r8,r17
1010c474:	8822c03a 	cmpne	r17,r17,zero
1010c478:	0009883a 	mov	r4,zero
1010c47c:	003fa006 	br	1010c300 <__alt_data_end+0xfffec300>
1010c480:	4811883a 	mov	r8,r9
1010c484:	3023883a 	mov	r17,r6
1010c488:	0401ffc4 	movi	r16,2047
1010c48c:	003e0706 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c490:	4811883a 	mov	r8,r9
1010c494:	3023883a 	mov	r17,r6
1010c498:	003e0406 	br	1010bcac <__alt_data_end+0xfffebcac>
1010c49c:	21fff804 	addi	r7,r4,-32
1010c4a0:	01400804 	movi	r5,32
1010c4a4:	41ced83a 	srl	r7,r8,r7
1010c4a8:	21400a26 	beq	r4,r5,1010c4d4 <__adddf3+0x8a4>
1010c4ac:	01401004 	movi	r5,64
1010c4b0:	2909c83a 	sub	r4,r5,r4
1010c4b4:	4108983a 	sll	r4,r8,r4
1010c4b8:	2448b03a 	or	r4,r4,r17
1010c4bc:	2008c03a 	cmpne	r4,r4,zero
1010c4c0:	3922b03a 	or	r17,r7,r4
1010c4c4:	0009883a 	mov	r4,zero
1010c4c8:	003f8d06 	br	1010c300 <__alt_data_end+0xfffec300>
1010c4cc:	0007883a 	mov	r3,zero
1010c4d0:	003fdd06 	br	1010c448 <__alt_data_end+0xfffec448>
1010c4d4:	0009883a 	mov	r4,zero
1010c4d8:	003ff706 	br	1010c4b8 <__alt_data_end+0xfffec4b8>

1010c4dc <__divdf3>:
1010c4dc:	defff204 	addi	sp,sp,-56
1010c4e0:	dd400915 	stw	r21,36(sp)
1010c4e4:	282ad53a 	srli	r21,r5,20
1010c4e8:	dd000815 	stw	r20,32(sp)
1010c4ec:	2828d7fa 	srli	r20,r5,31
1010c4f0:	dc000415 	stw	r16,16(sp)
1010c4f4:	04000434 	movhi	r16,16
1010c4f8:	df000c15 	stw	fp,48(sp)
1010c4fc:	843fffc4 	addi	r16,r16,-1
1010c500:	dfc00d15 	stw	ra,52(sp)
1010c504:	ddc00b15 	stw	r23,44(sp)
1010c508:	dd800a15 	stw	r22,40(sp)
1010c50c:	dcc00715 	stw	r19,28(sp)
1010c510:	dc800615 	stw	r18,24(sp)
1010c514:	dc400515 	stw	r17,20(sp)
1010c518:	ad41ffcc 	andi	r21,r21,2047
1010c51c:	2c20703a 	and	r16,r5,r16
1010c520:	a7003fcc 	andi	fp,r20,255
1010c524:	a8006126 	beq	r21,zero,1010c6ac <__divdf3+0x1d0>
1010c528:	0081ffc4 	movi	r2,2047
1010c52c:	2025883a 	mov	r18,r4
1010c530:	a8803726 	beq	r21,r2,1010c610 <__divdf3+0x134>
1010c534:	80800434 	orhi	r2,r16,16
1010c538:	100490fa 	slli	r2,r2,3
1010c53c:	2020d77a 	srli	r16,r4,29
1010c540:	202490fa 	slli	r18,r4,3
1010c544:	ad7f0044 	addi	r21,r21,-1023
1010c548:	80a0b03a 	or	r16,r16,r2
1010c54c:	0027883a 	mov	r19,zero
1010c550:	0013883a 	mov	r9,zero
1010c554:	3804d53a 	srli	r2,r7,20
1010c558:	382cd7fa 	srli	r22,r7,31
1010c55c:	04400434 	movhi	r17,16
1010c560:	8c7fffc4 	addi	r17,r17,-1
1010c564:	1081ffcc 	andi	r2,r2,2047
1010c568:	3011883a 	mov	r8,r6
1010c56c:	3c62703a 	and	r17,r7,r17
1010c570:	b5c03fcc 	andi	r23,r22,255
1010c574:	10006c26 	beq	r2,zero,1010c728 <__divdf3+0x24c>
1010c578:	00c1ffc4 	movi	r3,2047
1010c57c:	10c06426 	beq	r2,r3,1010c710 <__divdf3+0x234>
1010c580:	88c00434 	orhi	r3,r17,16
1010c584:	180690fa 	slli	r3,r3,3
1010c588:	3022d77a 	srli	r17,r6,29
1010c58c:	301090fa 	slli	r8,r6,3
1010c590:	10bf0044 	addi	r2,r2,-1023
1010c594:	88e2b03a 	or	r17,r17,r3
1010c598:	000f883a 	mov	r7,zero
1010c59c:	a58cf03a 	xor	r6,r20,r22
1010c5a0:	3cc8b03a 	or	r4,r7,r19
1010c5a4:	a8abc83a 	sub	r21,r21,r2
1010c5a8:	008003c4 	movi	r2,15
1010c5ac:	3007883a 	mov	r3,r6
1010c5b0:	34c03fcc 	andi	r19,r6,255
1010c5b4:	11009036 	bltu	r2,r4,1010c7f8 <__divdf3+0x31c>
1010c5b8:	200890ba 	slli	r4,r4,2
1010c5bc:	00840474 	movhi	r2,4113
1010c5c0:	10b17404 	addi	r2,r2,-14896
1010c5c4:	2089883a 	add	r4,r4,r2
1010c5c8:	20800017 	ldw	r2,0(r4)
1010c5cc:	1000683a 	jmp	r2
1010c5d0:	1010c7f8 	rdprs	zero,r2,17183
1010c5d4:	1010c648 	cmpgei	zero,r2,17177
1010c5d8:	1010c7e8 	cmpgeui	zero,r2,17183
1010c5dc:	1010c63c 	xorhi	zero,r2,17176
1010c5e0:	1010c7e8 	cmpgeui	zero,r2,17183
1010c5e4:	1010c7bc 	xorhi	zero,r2,17182
1010c5e8:	1010c7e8 	cmpgeui	zero,r2,17183
1010c5ec:	1010c63c 	xorhi	zero,r2,17176
1010c5f0:	1010c648 	cmpgei	zero,r2,17177
1010c5f4:	1010c648 	cmpgei	zero,r2,17177
1010c5f8:	1010c7bc 	xorhi	zero,r2,17182
1010c5fc:	1010c63c 	xorhi	zero,r2,17176
1010c600:	1010c62c 	andhi	zero,r2,17176
1010c604:	1010c62c 	andhi	zero,r2,17176
1010c608:	1010c62c 	andhi	zero,r2,17176
1010c60c:	1010cadc 	xori	zero,r2,17195
1010c610:	2404b03a 	or	r2,r4,r16
1010c614:	1000661e 	bne	r2,zero,1010c7b0 <__divdf3+0x2d4>
1010c618:	04c00204 	movi	r19,8
1010c61c:	0021883a 	mov	r16,zero
1010c620:	0025883a 	mov	r18,zero
1010c624:	02400084 	movi	r9,2
1010c628:	003fca06 	br	1010c554 <__alt_data_end+0xfffec554>
1010c62c:	8023883a 	mov	r17,r16
1010c630:	9011883a 	mov	r8,r18
1010c634:	e02f883a 	mov	r23,fp
1010c638:	480f883a 	mov	r7,r9
1010c63c:	00800084 	movi	r2,2
1010c640:	3881311e 	bne	r7,r2,1010cb08 <__divdf3+0x62c>
1010c644:	b827883a 	mov	r19,r23
1010c648:	98c0004c 	andi	r3,r19,1
1010c64c:	0081ffc4 	movi	r2,2047
1010c650:	000b883a 	mov	r5,zero
1010c654:	0025883a 	mov	r18,zero
1010c658:	1004953a 	slli	r2,r2,20
1010c65c:	18c03fcc 	andi	r3,r3,255
1010c660:	04400434 	movhi	r17,16
1010c664:	8c7fffc4 	addi	r17,r17,-1
1010c668:	180697fa 	slli	r3,r3,31
1010c66c:	2c4a703a 	and	r5,r5,r17
1010c670:	288ab03a 	or	r5,r5,r2
1010c674:	28c6b03a 	or	r3,r5,r3
1010c678:	9005883a 	mov	r2,r18
1010c67c:	dfc00d17 	ldw	ra,52(sp)
1010c680:	df000c17 	ldw	fp,48(sp)
1010c684:	ddc00b17 	ldw	r23,44(sp)
1010c688:	dd800a17 	ldw	r22,40(sp)
1010c68c:	dd400917 	ldw	r21,36(sp)
1010c690:	dd000817 	ldw	r20,32(sp)
1010c694:	dcc00717 	ldw	r19,28(sp)
1010c698:	dc800617 	ldw	r18,24(sp)
1010c69c:	dc400517 	ldw	r17,20(sp)
1010c6a0:	dc000417 	ldw	r16,16(sp)
1010c6a4:	dec00e04 	addi	sp,sp,56
1010c6a8:	f800283a 	ret
1010c6ac:	2404b03a 	or	r2,r4,r16
1010c6b0:	2027883a 	mov	r19,r4
1010c6b4:	10003926 	beq	r2,zero,1010c79c <__divdf3+0x2c0>
1010c6b8:	80012e26 	beq	r16,zero,1010cb74 <__divdf3+0x698>
1010c6bc:	8009883a 	mov	r4,r16
1010c6c0:	d9800315 	stw	r6,12(sp)
1010c6c4:	d9c00215 	stw	r7,8(sp)
1010c6c8:	010e2340 	call	1010e234 <__clzsi2>
1010c6cc:	d9800317 	ldw	r6,12(sp)
1010c6d0:	d9c00217 	ldw	r7,8(sp)
1010c6d4:	113ffd44 	addi	r4,r2,-11
1010c6d8:	00c00704 	movi	r3,28
1010c6dc:	19012116 	blt	r3,r4,1010cb64 <__divdf3+0x688>
1010c6e0:	00c00744 	movi	r3,29
1010c6e4:	147ffe04 	addi	r17,r2,-8
1010c6e8:	1907c83a 	sub	r3,r3,r4
1010c6ec:	8460983a 	sll	r16,r16,r17
1010c6f0:	98c6d83a 	srl	r3,r19,r3
1010c6f4:	9c64983a 	sll	r18,r19,r17
1010c6f8:	1c20b03a 	or	r16,r3,r16
1010c6fc:	1080fcc4 	addi	r2,r2,1011
1010c700:	00abc83a 	sub	r21,zero,r2
1010c704:	0027883a 	mov	r19,zero
1010c708:	0013883a 	mov	r9,zero
1010c70c:	003f9106 	br	1010c554 <__alt_data_end+0xfffec554>
1010c710:	3446b03a 	or	r3,r6,r17
1010c714:	18001f1e 	bne	r3,zero,1010c794 <__divdf3+0x2b8>
1010c718:	0023883a 	mov	r17,zero
1010c71c:	0011883a 	mov	r8,zero
1010c720:	01c00084 	movi	r7,2
1010c724:	003f9d06 	br	1010c59c <__alt_data_end+0xfffec59c>
1010c728:	3446b03a 	or	r3,r6,r17
1010c72c:	18001526 	beq	r3,zero,1010c784 <__divdf3+0x2a8>
1010c730:	88011b26 	beq	r17,zero,1010cba0 <__divdf3+0x6c4>
1010c734:	8809883a 	mov	r4,r17
1010c738:	d9800315 	stw	r6,12(sp)
1010c73c:	da400115 	stw	r9,4(sp)
1010c740:	010e2340 	call	1010e234 <__clzsi2>
1010c744:	d9800317 	ldw	r6,12(sp)
1010c748:	da400117 	ldw	r9,4(sp)
1010c74c:	113ffd44 	addi	r4,r2,-11
1010c750:	00c00704 	movi	r3,28
1010c754:	19010e16 	blt	r3,r4,1010cb90 <__divdf3+0x6b4>
1010c758:	00c00744 	movi	r3,29
1010c75c:	123ffe04 	addi	r8,r2,-8
1010c760:	1907c83a 	sub	r3,r3,r4
1010c764:	8a22983a 	sll	r17,r17,r8
1010c768:	30c6d83a 	srl	r3,r6,r3
1010c76c:	3210983a 	sll	r8,r6,r8
1010c770:	1c62b03a 	or	r17,r3,r17
1010c774:	1080fcc4 	addi	r2,r2,1011
1010c778:	0085c83a 	sub	r2,zero,r2
1010c77c:	000f883a 	mov	r7,zero
1010c780:	003f8606 	br	1010c59c <__alt_data_end+0xfffec59c>
1010c784:	0023883a 	mov	r17,zero
1010c788:	0011883a 	mov	r8,zero
1010c78c:	01c00044 	movi	r7,1
1010c790:	003f8206 	br	1010c59c <__alt_data_end+0xfffec59c>
1010c794:	01c000c4 	movi	r7,3
1010c798:	003f8006 	br	1010c59c <__alt_data_end+0xfffec59c>
1010c79c:	04c00104 	movi	r19,4
1010c7a0:	0021883a 	mov	r16,zero
1010c7a4:	0025883a 	mov	r18,zero
1010c7a8:	02400044 	movi	r9,1
1010c7ac:	003f6906 	br	1010c554 <__alt_data_end+0xfffec554>
1010c7b0:	04c00304 	movi	r19,12
1010c7b4:	024000c4 	movi	r9,3
1010c7b8:	003f6606 	br	1010c554 <__alt_data_end+0xfffec554>
1010c7bc:	01400434 	movhi	r5,16
1010c7c0:	0007883a 	mov	r3,zero
1010c7c4:	297fffc4 	addi	r5,r5,-1
1010c7c8:	04bfffc4 	movi	r18,-1
1010c7cc:	0081ffc4 	movi	r2,2047
1010c7d0:	003fa106 	br	1010c658 <__alt_data_end+0xfffec658>
1010c7d4:	00c00044 	movi	r3,1
1010c7d8:	1887c83a 	sub	r3,r3,r2
1010c7dc:	01000e04 	movi	r4,56
1010c7e0:	20c1210e 	bge	r4,r3,1010cc68 <__divdf3+0x78c>
1010c7e4:	98c0004c 	andi	r3,r19,1
1010c7e8:	0005883a 	mov	r2,zero
1010c7ec:	000b883a 	mov	r5,zero
1010c7f0:	0025883a 	mov	r18,zero
1010c7f4:	003f9806 	br	1010c658 <__alt_data_end+0xfffec658>
1010c7f8:	8c00fd36 	bltu	r17,r16,1010cbf0 <__divdf3+0x714>
1010c7fc:	8440fb26 	beq	r16,r17,1010cbec <__divdf3+0x710>
1010c800:	8007883a 	mov	r3,r16
1010c804:	ad7fffc4 	addi	r21,r21,-1
1010c808:	0021883a 	mov	r16,zero
1010c80c:	4004d63a 	srli	r2,r8,24
1010c810:	8822923a 	slli	r17,r17,8
1010c814:	1809883a 	mov	r4,r3
1010c818:	402c923a 	slli	r22,r8,8
1010c81c:	88b8b03a 	or	fp,r17,r2
1010c820:	e028d43a 	srli	r20,fp,16
1010c824:	d8c00015 	stw	r3,0(sp)
1010c828:	e5ffffcc 	andi	r23,fp,65535
1010c82c:	a00b883a 	mov	r5,r20
1010c830:	010bb740 	call	1010bb74 <__udivsi3>
1010c834:	d8c00017 	ldw	r3,0(sp)
1010c838:	a00b883a 	mov	r5,r20
1010c83c:	d8800315 	stw	r2,12(sp)
1010c840:	1809883a 	mov	r4,r3
1010c844:	010bbd80 	call	1010bbd8 <__umodsi3>
1010c848:	d9800317 	ldw	r6,12(sp)
1010c84c:	1006943a 	slli	r3,r2,16
1010c850:	9004d43a 	srli	r2,r18,16
1010c854:	b9a3383a 	mul	r17,r23,r6
1010c858:	10c4b03a 	or	r2,r2,r3
1010c85c:	1440062e 	bgeu	r2,r17,1010c878 <__divdf3+0x39c>
1010c860:	1705883a 	add	r2,r2,fp
1010c864:	30ffffc4 	addi	r3,r6,-1
1010c868:	1700ee36 	bltu	r2,fp,1010cc24 <__divdf3+0x748>
1010c86c:	1440ed2e 	bgeu	r2,r17,1010cc24 <__divdf3+0x748>
1010c870:	31bfff84 	addi	r6,r6,-2
1010c874:	1705883a 	add	r2,r2,fp
1010c878:	1463c83a 	sub	r17,r2,r17
1010c87c:	a00b883a 	mov	r5,r20
1010c880:	8809883a 	mov	r4,r17
1010c884:	d9800315 	stw	r6,12(sp)
1010c888:	010bb740 	call	1010bb74 <__udivsi3>
1010c88c:	a00b883a 	mov	r5,r20
1010c890:	8809883a 	mov	r4,r17
1010c894:	d8800215 	stw	r2,8(sp)
1010c898:	010bbd80 	call	1010bbd8 <__umodsi3>
1010c89c:	d9c00217 	ldw	r7,8(sp)
1010c8a0:	1004943a 	slli	r2,r2,16
1010c8a4:	94bfffcc 	andi	r18,r18,65535
1010c8a8:	b9d1383a 	mul	r8,r23,r7
1010c8ac:	90a4b03a 	or	r18,r18,r2
1010c8b0:	d9800317 	ldw	r6,12(sp)
1010c8b4:	9200062e 	bgeu	r18,r8,1010c8d0 <__divdf3+0x3f4>
1010c8b8:	9725883a 	add	r18,r18,fp
1010c8bc:	38bfffc4 	addi	r2,r7,-1
1010c8c0:	9700d636 	bltu	r18,fp,1010cc1c <__divdf3+0x740>
1010c8c4:	9200d52e 	bgeu	r18,r8,1010cc1c <__divdf3+0x740>
1010c8c8:	39ffff84 	addi	r7,r7,-2
1010c8cc:	9725883a 	add	r18,r18,fp
1010c8d0:	3004943a 	slli	r2,r6,16
1010c8d4:	b012d43a 	srli	r9,r22,16
1010c8d8:	b1bfffcc 	andi	r6,r22,65535
1010c8dc:	11e2b03a 	or	r17,r2,r7
1010c8e0:	8806d43a 	srli	r3,r17,16
1010c8e4:	893fffcc 	andi	r4,r17,65535
1010c8e8:	218b383a 	mul	r5,r4,r6
1010c8ec:	30c5383a 	mul	r2,r6,r3
1010c8f0:	2249383a 	mul	r4,r4,r9
1010c8f4:	280ed43a 	srli	r7,r5,16
1010c8f8:	9225c83a 	sub	r18,r18,r8
1010c8fc:	2089883a 	add	r4,r4,r2
1010c900:	3909883a 	add	r4,r7,r4
1010c904:	1a47383a 	mul	r3,r3,r9
1010c908:	2080022e 	bgeu	r4,r2,1010c914 <__divdf3+0x438>
1010c90c:	00800074 	movhi	r2,1
1010c910:	1887883a 	add	r3,r3,r2
1010c914:	2004d43a 	srli	r2,r4,16
1010c918:	2008943a 	slli	r4,r4,16
1010c91c:	297fffcc 	andi	r5,r5,65535
1010c920:	10c7883a 	add	r3,r2,r3
1010c924:	2149883a 	add	r4,r4,r5
1010c928:	90c0a536 	bltu	r18,r3,1010cbc0 <__divdf3+0x6e4>
1010c92c:	90c0bf26 	beq	r18,r3,1010cc2c <__divdf3+0x750>
1010c930:	90c7c83a 	sub	r3,r18,r3
1010c934:	810fc83a 	sub	r7,r16,r4
1010c938:	81e5803a 	cmpltu	r18,r16,r7
1010c93c:	1ca5c83a 	sub	r18,r3,r18
1010c940:	e480c126 	beq	fp,r18,1010cc48 <__divdf3+0x76c>
1010c944:	a00b883a 	mov	r5,r20
1010c948:	9009883a 	mov	r4,r18
1010c94c:	d9800315 	stw	r6,12(sp)
1010c950:	d9c00215 	stw	r7,8(sp)
1010c954:	da400115 	stw	r9,4(sp)
1010c958:	010bb740 	call	1010bb74 <__udivsi3>
1010c95c:	a00b883a 	mov	r5,r20
1010c960:	9009883a 	mov	r4,r18
1010c964:	d8800015 	stw	r2,0(sp)
1010c968:	010bbd80 	call	1010bbd8 <__umodsi3>
1010c96c:	d9c00217 	ldw	r7,8(sp)
1010c970:	da000017 	ldw	r8,0(sp)
1010c974:	1006943a 	slli	r3,r2,16
1010c978:	3804d43a 	srli	r2,r7,16
1010c97c:	ba21383a 	mul	r16,r23,r8
1010c980:	d9800317 	ldw	r6,12(sp)
1010c984:	10c4b03a 	or	r2,r2,r3
1010c988:	da400117 	ldw	r9,4(sp)
1010c98c:	1400062e 	bgeu	r2,r16,1010c9a8 <__divdf3+0x4cc>
1010c990:	1705883a 	add	r2,r2,fp
1010c994:	40ffffc4 	addi	r3,r8,-1
1010c998:	1700ad36 	bltu	r2,fp,1010cc50 <__divdf3+0x774>
1010c99c:	1400ac2e 	bgeu	r2,r16,1010cc50 <__divdf3+0x774>
1010c9a0:	423fff84 	addi	r8,r8,-2
1010c9a4:	1705883a 	add	r2,r2,fp
1010c9a8:	1421c83a 	sub	r16,r2,r16
1010c9ac:	a00b883a 	mov	r5,r20
1010c9b0:	8009883a 	mov	r4,r16
1010c9b4:	d9800315 	stw	r6,12(sp)
1010c9b8:	d9c00215 	stw	r7,8(sp)
1010c9bc:	da000015 	stw	r8,0(sp)
1010c9c0:	da400115 	stw	r9,4(sp)
1010c9c4:	010bb740 	call	1010bb74 <__udivsi3>
1010c9c8:	8009883a 	mov	r4,r16
1010c9cc:	a00b883a 	mov	r5,r20
1010c9d0:	1025883a 	mov	r18,r2
1010c9d4:	010bbd80 	call	1010bbd8 <__umodsi3>
1010c9d8:	d9c00217 	ldw	r7,8(sp)
1010c9dc:	1004943a 	slli	r2,r2,16
1010c9e0:	bcaf383a 	mul	r23,r23,r18
1010c9e4:	393fffcc 	andi	r4,r7,65535
1010c9e8:	2088b03a 	or	r4,r4,r2
1010c9ec:	d9800317 	ldw	r6,12(sp)
1010c9f0:	da000017 	ldw	r8,0(sp)
1010c9f4:	da400117 	ldw	r9,4(sp)
1010c9f8:	25c0062e 	bgeu	r4,r23,1010ca14 <__divdf3+0x538>
1010c9fc:	2709883a 	add	r4,r4,fp
1010ca00:	90bfffc4 	addi	r2,r18,-1
1010ca04:	27009436 	bltu	r4,fp,1010cc58 <__divdf3+0x77c>
1010ca08:	25c0932e 	bgeu	r4,r23,1010cc58 <__divdf3+0x77c>
1010ca0c:	94bfff84 	addi	r18,r18,-2
1010ca10:	2709883a 	add	r4,r4,fp
1010ca14:	4004943a 	slli	r2,r8,16
1010ca18:	25efc83a 	sub	r23,r4,r23
1010ca1c:	1490b03a 	or	r8,r2,r18
1010ca20:	4008d43a 	srli	r4,r8,16
1010ca24:	40ffffcc 	andi	r3,r8,65535
1010ca28:	30c5383a 	mul	r2,r6,r3
1010ca2c:	1a47383a 	mul	r3,r3,r9
1010ca30:	310d383a 	mul	r6,r6,r4
1010ca34:	100ad43a 	srli	r5,r2,16
1010ca38:	4913383a 	mul	r9,r9,r4
1010ca3c:	1987883a 	add	r3,r3,r6
1010ca40:	28c7883a 	add	r3,r5,r3
1010ca44:	1980022e 	bgeu	r3,r6,1010ca50 <__divdf3+0x574>
1010ca48:	01000074 	movhi	r4,1
1010ca4c:	4913883a 	add	r9,r9,r4
1010ca50:	1808d43a 	srli	r4,r3,16
1010ca54:	1806943a 	slli	r3,r3,16
1010ca58:	10bfffcc 	andi	r2,r2,65535
1010ca5c:	2253883a 	add	r9,r4,r9
1010ca60:	1887883a 	add	r3,r3,r2
1010ca64:	ba403836 	bltu	r23,r9,1010cb48 <__divdf3+0x66c>
1010ca68:	ba403626 	beq	r23,r9,1010cb44 <__divdf3+0x668>
1010ca6c:	42000054 	ori	r8,r8,1
1010ca70:	a880ffc4 	addi	r2,r21,1023
1010ca74:	00bf570e 	bge	zero,r2,1010c7d4 <__alt_data_end+0xfffec7d4>
1010ca78:	40c001cc 	andi	r3,r8,7
1010ca7c:	18000726 	beq	r3,zero,1010ca9c <__divdf3+0x5c0>
1010ca80:	40c003cc 	andi	r3,r8,15
1010ca84:	01000104 	movi	r4,4
1010ca88:	19000426 	beq	r3,r4,1010ca9c <__divdf3+0x5c0>
1010ca8c:	4107883a 	add	r3,r8,r4
1010ca90:	1a11803a 	cmpltu	r8,r3,r8
1010ca94:	8a23883a 	add	r17,r17,r8
1010ca98:	1811883a 	mov	r8,r3
1010ca9c:	88c0402c 	andhi	r3,r17,256
1010caa0:	18000426 	beq	r3,zero,1010cab4 <__divdf3+0x5d8>
1010caa4:	00ffc034 	movhi	r3,65280
1010caa8:	18ffffc4 	addi	r3,r3,-1
1010caac:	a8810004 	addi	r2,r21,1024
1010cab0:	88e2703a 	and	r17,r17,r3
1010cab4:	00c1ff84 	movi	r3,2046
1010cab8:	18bee316 	blt	r3,r2,1010c648 <__alt_data_end+0xfffec648>
1010cabc:	8824977a 	slli	r18,r17,29
1010cac0:	4010d0fa 	srli	r8,r8,3
1010cac4:	8822927a 	slli	r17,r17,9
1010cac8:	1081ffcc 	andi	r2,r2,2047
1010cacc:	9224b03a 	or	r18,r18,r8
1010cad0:	880ad33a 	srli	r5,r17,12
1010cad4:	98c0004c 	andi	r3,r19,1
1010cad8:	003edf06 	br	1010c658 <__alt_data_end+0xfffec658>
1010cadc:	8080022c 	andhi	r2,r16,8
1010cae0:	10001226 	beq	r2,zero,1010cb2c <__divdf3+0x650>
1010cae4:	8880022c 	andhi	r2,r17,8
1010cae8:	1000101e 	bne	r2,zero,1010cb2c <__divdf3+0x650>
1010caec:	00800434 	movhi	r2,16
1010caf0:	89400234 	orhi	r5,r17,8
1010caf4:	10bfffc4 	addi	r2,r2,-1
1010caf8:	b007883a 	mov	r3,r22
1010cafc:	288a703a 	and	r5,r5,r2
1010cb00:	4025883a 	mov	r18,r8
1010cb04:	003f3106 	br	1010c7cc <__alt_data_end+0xfffec7cc>
1010cb08:	008000c4 	movi	r2,3
1010cb0c:	3880a626 	beq	r7,r2,1010cda8 <__divdf3+0x8cc>
1010cb10:	00800044 	movi	r2,1
1010cb14:	3880521e 	bne	r7,r2,1010cc60 <__divdf3+0x784>
1010cb18:	b807883a 	mov	r3,r23
1010cb1c:	0005883a 	mov	r2,zero
1010cb20:	000b883a 	mov	r5,zero
1010cb24:	0025883a 	mov	r18,zero
1010cb28:	003ecb06 	br	1010c658 <__alt_data_end+0xfffec658>
1010cb2c:	00800434 	movhi	r2,16
1010cb30:	81400234 	orhi	r5,r16,8
1010cb34:	10bfffc4 	addi	r2,r2,-1
1010cb38:	a007883a 	mov	r3,r20
1010cb3c:	288a703a 	and	r5,r5,r2
1010cb40:	003f2206 	br	1010c7cc <__alt_data_end+0xfffec7cc>
1010cb44:	183fca26 	beq	r3,zero,1010ca70 <__alt_data_end+0xfffeca70>
1010cb48:	e5ef883a 	add	r23,fp,r23
1010cb4c:	40bfffc4 	addi	r2,r8,-1
1010cb50:	bf00392e 	bgeu	r23,fp,1010cc38 <__divdf3+0x75c>
1010cb54:	1011883a 	mov	r8,r2
1010cb58:	ba7fc41e 	bne	r23,r9,1010ca6c <__alt_data_end+0xfffeca6c>
1010cb5c:	b0ffc31e 	bne	r22,r3,1010ca6c <__alt_data_end+0xfffeca6c>
1010cb60:	003fc306 	br	1010ca70 <__alt_data_end+0xfffeca70>
1010cb64:	143ff604 	addi	r16,r2,-40
1010cb68:	9c20983a 	sll	r16,r19,r16
1010cb6c:	0025883a 	mov	r18,zero
1010cb70:	003ee206 	br	1010c6fc <__alt_data_end+0xfffec6fc>
1010cb74:	d9800315 	stw	r6,12(sp)
1010cb78:	d9c00215 	stw	r7,8(sp)
1010cb7c:	010e2340 	call	1010e234 <__clzsi2>
1010cb80:	10800804 	addi	r2,r2,32
1010cb84:	d9c00217 	ldw	r7,8(sp)
1010cb88:	d9800317 	ldw	r6,12(sp)
1010cb8c:	003ed106 	br	1010c6d4 <__alt_data_end+0xfffec6d4>
1010cb90:	147ff604 	addi	r17,r2,-40
1010cb94:	3462983a 	sll	r17,r6,r17
1010cb98:	0011883a 	mov	r8,zero
1010cb9c:	003ef506 	br	1010c774 <__alt_data_end+0xfffec774>
1010cba0:	3009883a 	mov	r4,r6
1010cba4:	d9800315 	stw	r6,12(sp)
1010cba8:	da400115 	stw	r9,4(sp)
1010cbac:	010e2340 	call	1010e234 <__clzsi2>
1010cbb0:	10800804 	addi	r2,r2,32
1010cbb4:	da400117 	ldw	r9,4(sp)
1010cbb8:	d9800317 	ldw	r6,12(sp)
1010cbbc:	003ee306 	br	1010c74c <__alt_data_end+0xfffec74c>
1010cbc0:	85a1883a 	add	r16,r16,r22
1010cbc4:	8585803a 	cmpltu	r2,r16,r22
1010cbc8:	1705883a 	add	r2,r2,fp
1010cbcc:	14a5883a 	add	r18,r2,r18
1010cbd0:	88bfffc4 	addi	r2,r17,-1
1010cbd4:	e4800c2e 	bgeu	fp,r18,1010cc08 <__divdf3+0x72c>
1010cbd8:	90c03e36 	bltu	r18,r3,1010ccd4 <__divdf3+0x7f8>
1010cbdc:	1c806926 	beq	r3,r18,1010cd84 <__divdf3+0x8a8>
1010cbe0:	90c7c83a 	sub	r3,r18,r3
1010cbe4:	1023883a 	mov	r17,r2
1010cbe8:	003f5206 	br	1010c934 <__alt_data_end+0xfffec934>
1010cbec:	923f0436 	bltu	r18,r8,1010c800 <__alt_data_end+0xfffec800>
1010cbf0:	800897fa 	slli	r4,r16,31
1010cbf4:	9004d07a 	srli	r2,r18,1
1010cbf8:	8006d07a 	srli	r3,r16,1
1010cbfc:	902097fa 	slli	r16,r18,31
1010cc00:	20a4b03a 	or	r18,r4,r2
1010cc04:	003f0106 	br	1010c80c <__alt_data_end+0xfffec80c>
1010cc08:	e4bff51e 	bne	fp,r18,1010cbe0 <__alt_data_end+0xfffecbe0>
1010cc0c:	85bff22e 	bgeu	r16,r22,1010cbd8 <__alt_data_end+0xfffecbd8>
1010cc10:	e0c7c83a 	sub	r3,fp,r3
1010cc14:	1023883a 	mov	r17,r2
1010cc18:	003f4606 	br	1010c934 <__alt_data_end+0xfffec934>
1010cc1c:	100f883a 	mov	r7,r2
1010cc20:	003f2b06 	br	1010c8d0 <__alt_data_end+0xfffec8d0>
1010cc24:	180d883a 	mov	r6,r3
1010cc28:	003f1306 	br	1010c878 <__alt_data_end+0xfffec878>
1010cc2c:	813fe436 	bltu	r16,r4,1010cbc0 <__alt_data_end+0xfffecbc0>
1010cc30:	0007883a 	mov	r3,zero
1010cc34:	003f3f06 	br	1010c934 <__alt_data_end+0xfffec934>
1010cc38:	ba402c36 	bltu	r23,r9,1010ccec <__divdf3+0x810>
1010cc3c:	4dc05426 	beq	r9,r23,1010cd90 <__divdf3+0x8b4>
1010cc40:	1011883a 	mov	r8,r2
1010cc44:	003f8906 	br	1010ca6c <__alt_data_end+0xfffeca6c>
1010cc48:	023fffc4 	movi	r8,-1
1010cc4c:	003f8806 	br	1010ca70 <__alt_data_end+0xfffeca70>
1010cc50:	1811883a 	mov	r8,r3
1010cc54:	003f5406 	br	1010c9a8 <__alt_data_end+0xfffec9a8>
1010cc58:	1025883a 	mov	r18,r2
1010cc5c:	003f6d06 	br	1010ca14 <__alt_data_end+0xfffeca14>
1010cc60:	b827883a 	mov	r19,r23
1010cc64:	003f8206 	br	1010ca70 <__alt_data_end+0xfffeca70>
1010cc68:	010007c4 	movi	r4,31
1010cc6c:	20c02616 	blt	r4,r3,1010cd08 <__divdf3+0x82c>
1010cc70:	00800804 	movi	r2,32
1010cc74:	10c5c83a 	sub	r2,r2,r3
1010cc78:	888a983a 	sll	r5,r17,r2
1010cc7c:	40c8d83a 	srl	r4,r8,r3
1010cc80:	4084983a 	sll	r2,r8,r2
1010cc84:	88e2d83a 	srl	r17,r17,r3
1010cc88:	2906b03a 	or	r3,r5,r4
1010cc8c:	1004c03a 	cmpne	r2,r2,zero
1010cc90:	1886b03a 	or	r3,r3,r2
1010cc94:	188001cc 	andi	r2,r3,7
1010cc98:	10000726 	beq	r2,zero,1010ccb8 <__divdf3+0x7dc>
1010cc9c:	188003cc 	andi	r2,r3,15
1010cca0:	01000104 	movi	r4,4
1010cca4:	11000426 	beq	r2,r4,1010ccb8 <__divdf3+0x7dc>
1010cca8:	1805883a 	mov	r2,r3
1010ccac:	10c00104 	addi	r3,r2,4
1010ccb0:	1885803a 	cmpltu	r2,r3,r2
1010ccb4:	88a3883a 	add	r17,r17,r2
1010ccb8:	8880202c 	andhi	r2,r17,128
1010ccbc:	10002726 	beq	r2,zero,1010cd5c <__divdf3+0x880>
1010ccc0:	98c0004c 	andi	r3,r19,1
1010ccc4:	00800044 	movi	r2,1
1010ccc8:	000b883a 	mov	r5,zero
1010cccc:	0025883a 	mov	r18,zero
1010ccd0:	003e6106 	br	1010c658 <__alt_data_end+0xfffec658>
1010ccd4:	85a1883a 	add	r16,r16,r22
1010ccd8:	8585803a 	cmpltu	r2,r16,r22
1010ccdc:	1705883a 	add	r2,r2,fp
1010cce0:	14a5883a 	add	r18,r2,r18
1010cce4:	8c7fff84 	addi	r17,r17,-2
1010cce8:	003f1106 	br	1010c930 <__alt_data_end+0xfffec930>
1010ccec:	b589883a 	add	r4,r22,r22
1010ccf0:	25ad803a 	cmpltu	r22,r4,r22
1010ccf4:	b739883a 	add	fp,r22,fp
1010ccf8:	40bfff84 	addi	r2,r8,-2
1010ccfc:	bf2f883a 	add	r23,r23,fp
1010cd00:	202d883a 	mov	r22,r4
1010cd04:	003f9306 	br	1010cb54 <__alt_data_end+0xfffecb54>
1010cd08:	013ff844 	movi	r4,-31
1010cd0c:	2085c83a 	sub	r2,r4,r2
1010cd10:	8888d83a 	srl	r4,r17,r2
1010cd14:	00800804 	movi	r2,32
1010cd18:	18802126 	beq	r3,r2,1010cda0 <__divdf3+0x8c4>
1010cd1c:	00801004 	movi	r2,64
1010cd20:	10c5c83a 	sub	r2,r2,r3
1010cd24:	8884983a 	sll	r2,r17,r2
1010cd28:	1204b03a 	or	r2,r2,r8
1010cd2c:	1004c03a 	cmpne	r2,r2,zero
1010cd30:	2084b03a 	or	r2,r4,r2
1010cd34:	144001cc 	andi	r17,r2,7
1010cd38:	88000d1e 	bne	r17,zero,1010cd70 <__divdf3+0x894>
1010cd3c:	000b883a 	mov	r5,zero
1010cd40:	1024d0fa 	srli	r18,r2,3
1010cd44:	98c0004c 	andi	r3,r19,1
1010cd48:	0005883a 	mov	r2,zero
1010cd4c:	9464b03a 	or	r18,r18,r17
1010cd50:	003e4106 	br	1010c658 <__alt_data_end+0xfffec658>
1010cd54:	1007883a 	mov	r3,r2
1010cd58:	0023883a 	mov	r17,zero
1010cd5c:	880a927a 	slli	r5,r17,9
1010cd60:	1805883a 	mov	r2,r3
1010cd64:	8822977a 	slli	r17,r17,29
1010cd68:	280ad33a 	srli	r5,r5,12
1010cd6c:	003ff406 	br	1010cd40 <__alt_data_end+0xfffecd40>
1010cd70:	10c003cc 	andi	r3,r2,15
1010cd74:	01000104 	movi	r4,4
1010cd78:	193ff626 	beq	r3,r4,1010cd54 <__alt_data_end+0xfffecd54>
1010cd7c:	0023883a 	mov	r17,zero
1010cd80:	003fca06 	br	1010ccac <__alt_data_end+0xfffeccac>
1010cd84:	813fd336 	bltu	r16,r4,1010ccd4 <__alt_data_end+0xfffeccd4>
1010cd88:	1023883a 	mov	r17,r2
1010cd8c:	003fa806 	br	1010cc30 <__alt_data_end+0xfffecc30>
1010cd90:	b0ffd636 	bltu	r22,r3,1010ccec <__alt_data_end+0xfffeccec>
1010cd94:	1011883a 	mov	r8,r2
1010cd98:	b0ff341e 	bne	r22,r3,1010ca6c <__alt_data_end+0xfffeca6c>
1010cd9c:	003f3406 	br	1010ca70 <__alt_data_end+0xfffeca70>
1010cda0:	0005883a 	mov	r2,zero
1010cda4:	003fe006 	br	1010cd28 <__alt_data_end+0xfffecd28>
1010cda8:	00800434 	movhi	r2,16
1010cdac:	89400234 	orhi	r5,r17,8
1010cdb0:	10bfffc4 	addi	r2,r2,-1
1010cdb4:	b807883a 	mov	r3,r23
1010cdb8:	288a703a 	and	r5,r5,r2
1010cdbc:	4025883a 	mov	r18,r8
1010cdc0:	003e8206 	br	1010c7cc <__alt_data_end+0xfffec7cc>

1010cdc4 <__eqdf2>:
1010cdc4:	2804d53a 	srli	r2,r5,20
1010cdc8:	3806d53a 	srli	r3,r7,20
1010cdcc:	02000434 	movhi	r8,16
1010cdd0:	423fffc4 	addi	r8,r8,-1
1010cdd4:	1081ffcc 	andi	r2,r2,2047
1010cdd8:	0281ffc4 	movi	r10,2047
1010cddc:	2a12703a 	and	r9,r5,r8
1010cde0:	18c1ffcc 	andi	r3,r3,2047
1010cde4:	3a10703a 	and	r8,r7,r8
1010cde8:	280ad7fa 	srli	r5,r5,31
1010cdec:	380ed7fa 	srli	r7,r7,31
1010cdf0:	12801026 	beq	r2,r10,1010ce34 <__eqdf2+0x70>
1010cdf4:	0281ffc4 	movi	r10,2047
1010cdf8:	1a800a26 	beq	r3,r10,1010ce24 <__eqdf2+0x60>
1010cdfc:	10c00226 	beq	r2,r3,1010ce08 <__eqdf2+0x44>
1010ce00:	00800044 	movi	r2,1
1010ce04:	f800283a 	ret
1010ce08:	4a3ffd1e 	bne	r9,r8,1010ce00 <__alt_data_end+0xfffece00>
1010ce0c:	21bffc1e 	bne	r4,r6,1010ce00 <__alt_data_end+0xfffece00>
1010ce10:	29c00c26 	beq	r5,r7,1010ce44 <__eqdf2+0x80>
1010ce14:	103ffa1e 	bne	r2,zero,1010ce00 <__alt_data_end+0xfffece00>
1010ce18:	2244b03a 	or	r2,r4,r9
1010ce1c:	1004c03a 	cmpne	r2,r2,zero
1010ce20:	f800283a 	ret
1010ce24:	3214b03a 	or	r10,r6,r8
1010ce28:	503ff426 	beq	r10,zero,1010cdfc <__alt_data_end+0xfffecdfc>
1010ce2c:	00800044 	movi	r2,1
1010ce30:	f800283a 	ret
1010ce34:	2254b03a 	or	r10,r4,r9
1010ce38:	503fee26 	beq	r10,zero,1010cdf4 <__alt_data_end+0xfffecdf4>
1010ce3c:	00800044 	movi	r2,1
1010ce40:	f800283a 	ret
1010ce44:	0005883a 	mov	r2,zero
1010ce48:	f800283a 	ret

1010ce4c <__gedf2>:
1010ce4c:	2804d53a 	srli	r2,r5,20
1010ce50:	3806d53a 	srli	r3,r7,20
1010ce54:	02000434 	movhi	r8,16
1010ce58:	423fffc4 	addi	r8,r8,-1
1010ce5c:	1081ffcc 	andi	r2,r2,2047
1010ce60:	0241ffc4 	movi	r9,2047
1010ce64:	2a14703a 	and	r10,r5,r8
1010ce68:	18c1ffcc 	andi	r3,r3,2047
1010ce6c:	3a10703a 	and	r8,r7,r8
1010ce70:	280ad7fa 	srli	r5,r5,31
1010ce74:	380ed7fa 	srli	r7,r7,31
1010ce78:	12401d26 	beq	r2,r9,1010cef0 <__gedf2+0xa4>
1010ce7c:	0241ffc4 	movi	r9,2047
1010ce80:	1a401226 	beq	r3,r9,1010cecc <__gedf2+0x80>
1010ce84:	1000081e 	bne	r2,zero,1010cea8 <__gedf2+0x5c>
1010ce88:	2296b03a 	or	r11,r4,r10
1010ce8c:	5813003a 	cmpeq	r9,r11,zero
1010ce90:	1800091e 	bne	r3,zero,1010ceb8 <__gedf2+0x6c>
1010ce94:	3218b03a 	or	r12,r6,r8
1010ce98:	6000071e 	bne	r12,zero,1010ceb8 <__gedf2+0x6c>
1010ce9c:	0005883a 	mov	r2,zero
1010cea0:	5800101e 	bne	r11,zero,1010cee4 <__gedf2+0x98>
1010cea4:	f800283a 	ret
1010cea8:	18000c1e 	bne	r3,zero,1010cedc <__gedf2+0x90>
1010ceac:	3212b03a 	or	r9,r6,r8
1010ceb0:	48000c26 	beq	r9,zero,1010cee4 <__gedf2+0x98>
1010ceb4:	0013883a 	mov	r9,zero
1010ceb8:	39c03fcc 	andi	r7,r7,255
1010cebc:	48000826 	beq	r9,zero,1010cee0 <__gedf2+0x94>
1010cec0:	38000926 	beq	r7,zero,1010cee8 <__gedf2+0x9c>
1010cec4:	00800044 	movi	r2,1
1010cec8:	f800283a 	ret
1010cecc:	3212b03a 	or	r9,r6,r8
1010ced0:	483fec26 	beq	r9,zero,1010ce84 <__alt_data_end+0xfffece84>
1010ced4:	00bfff84 	movi	r2,-2
1010ced8:	f800283a 	ret
1010cedc:	39c03fcc 	andi	r7,r7,255
1010cee0:	29c00626 	beq	r5,r7,1010cefc <__gedf2+0xb0>
1010cee4:	283ff726 	beq	r5,zero,1010cec4 <__alt_data_end+0xfffecec4>
1010cee8:	00bfffc4 	movi	r2,-1
1010ceec:	f800283a 	ret
1010cef0:	2292b03a 	or	r9,r4,r10
1010cef4:	483fe126 	beq	r9,zero,1010ce7c <__alt_data_end+0xfffece7c>
1010cef8:	003ff606 	br	1010ced4 <__alt_data_end+0xfffeced4>
1010cefc:	18bff916 	blt	r3,r2,1010cee4 <__alt_data_end+0xfffecee4>
1010cf00:	10c00316 	blt	r2,r3,1010cf10 <__gedf2+0xc4>
1010cf04:	42bff736 	bltu	r8,r10,1010cee4 <__alt_data_end+0xfffecee4>
1010cf08:	52000326 	beq	r10,r8,1010cf18 <__gedf2+0xcc>
1010cf0c:	5200042e 	bgeu	r10,r8,1010cf20 <__gedf2+0xd4>
1010cf10:	283fec1e 	bne	r5,zero,1010cec4 <__alt_data_end+0xfffecec4>
1010cf14:	003ff406 	br	1010cee8 <__alt_data_end+0xfffecee8>
1010cf18:	313ff236 	bltu	r6,r4,1010cee4 <__alt_data_end+0xfffecee4>
1010cf1c:	21bffc36 	bltu	r4,r6,1010cf10 <__alt_data_end+0xfffecf10>
1010cf20:	0005883a 	mov	r2,zero
1010cf24:	f800283a 	ret

1010cf28 <__ledf2>:
1010cf28:	2804d53a 	srli	r2,r5,20
1010cf2c:	3810d53a 	srli	r8,r7,20
1010cf30:	00c00434 	movhi	r3,16
1010cf34:	18ffffc4 	addi	r3,r3,-1
1010cf38:	1081ffcc 	andi	r2,r2,2047
1010cf3c:	0241ffc4 	movi	r9,2047
1010cf40:	28d4703a 	and	r10,r5,r3
1010cf44:	4201ffcc 	andi	r8,r8,2047
1010cf48:	38c6703a 	and	r3,r7,r3
1010cf4c:	280ad7fa 	srli	r5,r5,31
1010cf50:	380ed7fa 	srli	r7,r7,31
1010cf54:	12401f26 	beq	r2,r9,1010cfd4 <__ledf2+0xac>
1010cf58:	0241ffc4 	movi	r9,2047
1010cf5c:	42401426 	beq	r8,r9,1010cfb0 <__ledf2+0x88>
1010cf60:	1000091e 	bne	r2,zero,1010cf88 <__ledf2+0x60>
1010cf64:	2296b03a 	or	r11,r4,r10
1010cf68:	5813003a 	cmpeq	r9,r11,zero
1010cf6c:	29403fcc 	andi	r5,r5,255
1010cf70:	40000a1e 	bne	r8,zero,1010cf9c <__ledf2+0x74>
1010cf74:	30d8b03a 	or	r12,r6,r3
1010cf78:	6000081e 	bne	r12,zero,1010cf9c <__ledf2+0x74>
1010cf7c:	0005883a 	mov	r2,zero
1010cf80:	5800111e 	bne	r11,zero,1010cfc8 <__ledf2+0xa0>
1010cf84:	f800283a 	ret
1010cf88:	29403fcc 	andi	r5,r5,255
1010cf8c:	40000c1e 	bne	r8,zero,1010cfc0 <__ledf2+0x98>
1010cf90:	30d2b03a 	or	r9,r6,r3
1010cf94:	48000c26 	beq	r9,zero,1010cfc8 <__ledf2+0xa0>
1010cf98:	0013883a 	mov	r9,zero
1010cf9c:	39c03fcc 	andi	r7,r7,255
1010cfa0:	48000826 	beq	r9,zero,1010cfc4 <__ledf2+0x9c>
1010cfa4:	38001126 	beq	r7,zero,1010cfec <__ledf2+0xc4>
1010cfa8:	00800044 	movi	r2,1
1010cfac:	f800283a 	ret
1010cfb0:	30d2b03a 	or	r9,r6,r3
1010cfb4:	483fea26 	beq	r9,zero,1010cf60 <__alt_data_end+0xfffecf60>
1010cfb8:	00800084 	movi	r2,2
1010cfbc:	f800283a 	ret
1010cfc0:	39c03fcc 	andi	r7,r7,255
1010cfc4:	39400726 	beq	r7,r5,1010cfe4 <__ledf2+0xbc>
1010cfc8:	2800081e 	bne	r5,zero,1010cfec <__ledf2+0xc4>
1010cfcc:	00800044 	movi	r2,1
1010cfd0:	f800283a 	ret
1010cfd4:	2292b03a 	or	r9,r4,r10
1010cfd8:	483fdf26 	beq	r9,zero,1010cf58 <__alt_data_end+0xfffecf58>
1010cfdc:	00800084 	movi	r2,2
1010cfe0:	f800283a 	ret
1010cfe4:	4080030e 	bge	r8,r2,1010cff4 <__ledf2+0xcc>
1010cfe8:	383fef26 	beq	r7,zero,1010cfa8 <__alt_data_end+0xfffecfa8>
1010cfec:	00bfffc4 	movi	r2,-1
1010cff0:	f800283a 	ret
1010cff4:	123feb16 	blt	r2,r8,1010cfa4 <__alt_data_end+0xfffecfa4>
1010cff8:	1abff336 	bltu	r3,r10,1010cfc8 <__alt_data_end+0xfffecfc8>
1010cffc:	50c00326 	beq	r10,r3,1010d00c <__ledf2+0xe4>
1010d000:	50c0042e 	bgeu	r10,r3,1010d014 <__ledf2+0xec>
1010d004:	283fe81e 	bne	r5,zero,1010cfa8 <__alt_data_end+0xfffecfa8>
1010d008:	003ff806 	br	1010cfec <__alt_data_end+0xfffecfec>
1010d00c:	313fee36 	bltu	r6,r4,1010cfc8 <__alt_data_end+0xfffecfc8>
1010d010:	21bffc36 	bltu	r4,r6,1010d004 <__alt_data_end+0xfffed004>
1010d014:	0005883a 	mov	r2,zero
1010d018:	f800283a 	ret

1010d01c <__muldf3>:
1010d01c:	defff304 	addi	sp,sp,-52
1010d020:	2804d53a 	srli	r2,r5,20
1010d024:	dd800915 	stw	r22,36(sp)
1010d028:	282cd7fa 	srli	r22,r5,31
1010d02c:	dc000315 	stw	r16,12(sp)
1010d030:	04000434 	movhi	r16,16
1010d034:	dd400815 	stw	r21,32(sp)
1010d038:	dc800515 	stw	r18,20(sp)
1010d03c:	843fffc4 	addi	r16,r16,-1
1010d040:	dfc00c15 	stw	ra,48(sp)
1010d044:	df000b15 	stw	fp,44(sp)
1010d048:	ddc00a15 	stw	r23,40(sp)
1010d04c:	dd000715 	stw	r20,28(sp)
1010d050:	dcc00615 	stw	r19,24(sp)
1010d054:	dc400415 	stw	r17,16(sp)
1010d058:	1481ffcc 	andi	r18,r2,2047
1010d05c:	2c20703a 	and	r16,r5,r16
1010d060:	b02b883a 	mov	r21,r22
1010d064:	b2403fcc 	andi	r9,r22,255
1010d068:	90006026 	beq	r18,zero,1010d1ec <__muldf3+0x1d0>
1010d06c:	0081ffc4 	movi	r2,2047
1010d070:	2029883a 	mov	r20,r4
1010d074:	90803626 	beq	r18,r2,1010d150 <__muldf3+0x134>
1010d078:	80800434 	orhi	r2,r16,16
1010d07c:	100490fa 	slli	r2,r2,3
1010d080:	2020d77a 	srli	r16,r4,29
1010d084:	202890fa 	slli	r20,r4,3
1010d088:	94bf0044 	addi	r18,r18,-1023
1010d08c:	80a0b03a 	or	r16,r16,r2
1010d090:	0027883a 	mov	r19,zero
1010d094:	0039883a 	mov	fp,zero
1010d098:	3804d53a 	srli	r2,r7,20
1010d09c:	382ed7fa 	srli	r23,r7,31
1010d0a0:	04400434 	movhi	r17,16
1010d0a4:	8c7fffc4 	addi	r17,r17,-1
1010d0a8:	1081ffcc 	andi	r2,r2,2047
1010d0ac:	3011883a 	mov	r8,r6
1010d0b0:	3c62703a 	and	r17,r7,r17
1010d0b4:	ba803fcc 	andi	r10,r23,255
1010d0b8:	10006d26 	beq	r2,zero,1010d270 <__muldf3+0x254>
1010d0bc:	00c1ffc4 	movi	r3,2047
1010d0c0:	10c06526 	beq	r2,r3,1010d258 <__muldf3+0x23c>
1010d0c4:	88c00434 	orhi	r3,r17,16
1010d0c8:	180690fa 	slli	r3,r3,3
1010d0cc:	3022d77a 	srli	r17,r6,29
1010d0d0:	301090fa 	slli	r8,r6,3
1010d0d4:	10bf0044 	addi	r2,r2,-1023
1010d0d8:	88e2b03a 	or	r17,r17,r3
1010d0dc:	000b883a 	mov	r5,zero
1010d0e0:	9085883a 	add	r2,r18,r2
1010d0e4:	2cc8b03a 	or	r4,r5,r19
1010d0e8:	00c003c4 	movi	r3,15
1010d0ec:	bdacf03a 	xor	r22,r23,r22
1010d0f0:	12c00044 	addi	r11,r2,1
1010d0f4:	19009936 	bltu	r3,r4,1010d35c <__muldf3+0x340>
1010d0f8:	200890ba 	slli	r4,r4,2
1010d0fc:	00c40474 	movhi	r3,4113
1010d100:	18f44404 	addi	r3,r3,-12016
1010d104:	20c9883a 	add	r4,r4,r3
1010d108:	20c00017 	ldw	r3,0(r4)
1010d10c:	1800683a 	jmp	r3
1010d110:	1010d35c 	xori	zero,r2,17229
1010d114:	1010d170 	cmpltui	zero,r2,17221
1010d118:	1010d170 	cmpltui	zero,r2,17221
1010d11c:	1010d16c 	andhi	zero,r2,17221
1010d120:	1010d338 	rdprs	zero,r2,17228
1010d124:	1010d338 	rdprs	zero,r2,17228
1010d128:	1010d320 	cmpeqi	zero,r2,17228
1010d12c:	1010d16c 	andhi	zero,r2,17221
1010d130:	1010d338 	rdprs	zero,r2,17228
1010d134:	1010d320 	cmpeqi	zero,r2,17228
1010d138:	1010d338 	rdprs	zero,r2,17228
1010d13c:	1010d16c 	andhi	zero,r2,17221
1010d140:	1010d348 	cmpgei	zero,r2,17229
1010d144:	1010d348 	cmpgei	zero,r2,17229
1010d148:	1010d348 	cmpgei	zero,r2,17229
1010d14c:	1010d564 	muli	zero,r2,17237
1010d150:	2404b03a 	or	r2,r4,r16
1010d154:	10006f1e 	bne	r2,zero,1010d314 <__muldf3+0x2f8>
1010d158:	04c00204 	movi	r19,8
1010d15c:	0021883a 	mov	r16,zero
1010d160:	0029883a 	mov	r20,zero
1010d164:	07000084 	movi	fp,2
1010d168:	003fcb06 	br	1010d098 <__alt_data_end+0xfffed098>
1010d16c:	502d883a 	mov	r22,r10
1010d170:	00800084 	movi	r2,2
1010d174:	28805726 	beq	r5,r2,1010d2d4 <__muldf3+0x2b8>
1010d178:	008000c4 	movi	r2,3
1010d17c:	28816626 	beq	r5,r2,1010d718 <__muldf3+0x6fc>
1010d180:	00800044 	movi	r2,1
1010d184:	2881411e 	bne	r5,r2,1010d68c <__muldf3+0x670>
1010d188:	b02b883a 	mov	r21,r22
1010d18c:	0005883a 	mov	r2,zero
1010d190:	000b883a 	mov	r5,zero
1010d194:	0029883a 	mov	r20,zero
1010d198:	1004953a 	slli	r2,r2,20
1010d19c:	a8c03fcc 	andi	r3,r21,255
1010d1a0:	04400434 	movhi	r17,16
1010d1a4:	8c7fffc4 	addi	r17,r17,-1
1010d1a8:	180697fa 	slli	r3,r3,31
1010d1ac:	2c4a703a 	and	r5,r5,r17
1010d1b0:	288ab03a 	or	r5,r5,r2
1010d1b4:	28c6b03a 	or	r3,r5,r3
1010d1b8:	a005883a 	mov	r2,r20
1010d1bc:	dfc00c17 	ldw	ra,48(sp)
1010d1c0:	df000b17 	ldw	fp,44(sp)
1010d1c4:	ddc00a17 	ldw	r23,40(sp)
1010d1c8:	dd800917 	ldw	r22,36(sp)
1010d1cc:	dd400817 	ldw	r21,32(sp)
1010d1d0:	dd000717 	ldw	r20,28(sp)
1010d1d4:	dcc00617 	ldw	r19,24(sp)
1010d1d8:	dc800517 	ldw	r18,20(sp)
1010d1dc:	dc400417 	ldw	r17,16(sp)
1010d1e0:	dc000317 	ldw	r16,12(sp)
1010d1e4:	dec00d04 	addi	sp,sp,52
1010d1e8:	f800283a 	ret
1010d1ec:	2404b03a 	or	r2,r4,r16
1010d1f0:	2027883a 	mov	r19,r4
1010d1f4:	10004226 	beq	r2,zero,1010d300 <__muldf3+0x2e4>
1010d1f8:	8000fc26 	beq	r16,zero,1010d5ec <__muldf3+0x5d0>
1010d1fc:	8009883a 	mov	r4,r16
1010d200:	d9800215 	stw	r6,8(sp)
1010d204:	d9c00015 	stw	r7,0(sp)
1010d208:	da400115 	stw	r9,4(sp)
1010d20c:	010e2340 	call	1010e234 <__clzsi2>
1010d210:	d9800217 	ldw	r6,8(sp)
1010d214:	d9c00017 	ldw	r7,0(sp)
1010d218:	da400117 	ldw	r9,4(sp)
1010d21c:	113ffd44 	addi	r4,r2,-11
1010d220:	00c00704 	movi	r3,28
1010d224:	1900ed16 	blt	r3,r4,1010d5dc <__muldf3+0x5c0>
1010d228:	00c00744 	movi	r3,29
1010d22c:	147ffe04 	addi	r17,r2,-8
1010d230:	1907c83a 	sub	r3,r3,r4
1010d234:	8460983a 	sll	r16,r16,r17
1010d238:	98c6d83a 	srl	r3,r19,r3
1010d23c:	9c68983a 	sll	r20,r19,r17
1010d240:	1c20b03a 	or	r16,r3,r16
1010d244:	1080fcc4 	addi	r2,r2,1011
1010d248:	00a5c83a 	sub	r18,zero,r2
1010d24c:	0027883a 	mov	r19,zero
1010d250:	0039883a 	mov	fp,zero
1010d254:	003f9006 	br	1010d098 <__alt_data_end+0xfffed098>
1010d258:	3446b03a 	or	r3,r6,r17
1010d25c:	1800261e 	bne	r3,zero,1010d2f8 <__muldf3+0x2dc>
1010d260:	0023883a 	mov	r17,zero
1010d264:	0011883a 	mov	r8,zero
1010d268:	01400084 	movi	r5,2
1010d26c:	003f9c06 	br	1010d0e0 <__alt_data_end+0xfffed0e0>
1010d270:	3446b03a 	or	r3,r6,r17
1010d274:	18001c26 	beq	r3,zero,1010d2e8 <__muldf3+0x2cc>
1010d278:	8800ce26 	beq	r17,zero,1010d5b4 <__muldf3+0x598>
1010d27c:	8809883a 	mov	r4,r17
1010d280:	d9800215 	stw	r6,8(sp)
1010d284:	da400115 	stw	r9,4(sp)
1010d288:	da800015 	stw	r10,0(sp)
1010d28c:	010e2340 	call	1010e234 <__clzsi2>
1010d290:	d9800217 	ldw	r6,8(sp)
1010d294:	da400117 	ldw	r9,4(sp)
1010d298:	da800017 	ldw	r10,0(sp)
1010d29c:	113ffd44 	addi	r4,r2,-11
1010d2a0:	00c00704 	movi	r3,28
1010d2a4:	1900bf16 	blt	r3,r4,1010d5a4 <__muldf3+0x588>
1010d2a8:	00c00744 	movi	r3,29
1010d2ac:	123ffe04 	addi	r8,r2,-8
1010d2b0:	1907c83a 	sub	r3,r3,r4
1010d2b4:	8a22983a 	sll	r17,r17,r8
1010d2b8:	30c6d83a 	srl	r3,r6,r3
1010d2bc:	3210983a 	sll	r8,r6,r8
1010d2c0:	1c62b03a 	or	r17,r3,r17
1010d2c4:	1080fcc4 	addi	r2,r2,1011
1010d2c8:	0085c83a 	sub	r2,zero,r2
1010d2cc:	000b883a 	mov	r5,zero
1010d2d0:	003f8306 	br	1010d0e0 <__alt_data_end+0xfffed0e0>
1010d2d4:	b02b883a 	mov	r21,r22
1010d2d8:	0081ffc4 	movi	r2,2047
1010d2dc:	000b883a 	mov	r5,zero
1010d2e0:	0029883a 	mov	r20,zero
1010d2e4:	003fac06 	br	1010d198 <__alt_data_end+0xfffed198>
1010d2e8:	0023883a 	mov	r17,zero
1010d2ec:	0011883a 	mov	r8,zero
1010d2f0:	01400044 	movi	r5,1
1010d2f4:	003f7a06 	br	1010d0e0 <__alt_data_end+0xfffed0e0>
1010d2f8:	014000c4 	movi	r5,3
1010d2fc:	003f7806 	br	1010d0e0 <__alt_data_end+0xfffed0e0>
1010d300:	04c00104 	movi	r19,4
1010d304:	0021883a 	mov	r16,zero
1010d308:	0029883a 	mov	r20,zero
1010d30c:	07000044 	movi	fp,1
1010d310:	003f6106 	br	1010d098 <__alt_data_end+0xfffed098>
1010d314:	04c00304 	movi	r19,12
1010d318:	070000c4 	movi	fp,3
1010d31c:	003f5e06 	br	1010d098 <__alt_data_end+0xfffed098>
1010d320:	01400434 	movhi	r5,16
1010d324:	002b883a 	mov	r21,zero
1010d328:	297fffc4 	addi	r5,r5,-1
1010d32c:	053fffc4 	movi	r20,-1
1010d330:	0081ffc4 	movi	r2,2047
1010d334:	003f9806 	br	1010d198 <__alt_data_end+0xfffed198>
1010d338:	8023883a 	mov	r17,r16
1010d33c:	a011883a 	mov	r8,r20
1010d340:	e00b883a 	mov	r5,fp
1010d344:	003f8a06 	br	1010d170 <__alt_data_end+0xfffed170>
1010d348:	8023883a 	mov	r17,r16
1010d34c:	a011883a 	mov	r8,r20
1010d350:	482d883a 	mov	r22,r9
1010d354:	e00b883a 	mov	r5,fp
1010d358:	003f8506 	br	1010d170 <__alt_data_end+0xfffed170>
1010d35c:	a00ad43a 	srli	r5,r20,16
1010d360:	401ad43a 	srli	r13,r8,16
1010d364:	a53fffcc 	andi	r20,r20,65535
1010d368:	423fffcc 	andi	r8,r8,65535
1010d36c:	4519383a 	mul	r12,r8,r20
1010d370:	4147383a 	mul	r3,r8,r5
1010d374:	6d09383a 	mul	r4,r13,r20
1010d378:	600cd43a 	srli	r6,r12,16
1010d37c:	2b5d383a 	mul	r14,r5,r13
1010d380:	20c9883a 	add	r4,r4,r3
1010d384:	310d883a 	add	r6,r6,r4
1010d388:	30c0022e 	bgeu	r6,r3,1010d394 <__muldf3+0x378>
1010d38c:	00c00074 	movhi	r3,1
1010d390:	70dd883a 	add	r14,r14,r3
1010d394:	8826d43a 	srli	r19,r17,16
1010d398:	8bffffcc 	andi	r15,r17,65535
1010d39c:	7d23383a 	mul	r17,r15,r20
1010d3a0:	7949383a 	mul	r4,r15,r5
1010d3a4:	9d29383a 	mul	r20,r19,r20
1010d3a8:	8814d43a 	srli	r10,r17,16
1010d3ac:	3012943a 	slli	r9,r6,16
1010d3b0:	a129883a 	add	r20,r20,r4
1010d3b4:	633fffcc 	andi	r12,r12,65535
1010d3b8:	5515883a 	add	r10,r10,r20
1010d3bc:	3006d43a 	srli	r3,r6,16
1010d3c0:	4b13883a 	add	r9,r9,r12
1010d3c4:	2ccb383a 	mul	r5,r5,r19
1010d3c8:	5100022e 	bgeu	r10,r4,1010d3d4 <__muldf3+0x3b8>
1010d3cc:	01000074 	movhi	r4,1
1010d3d0:	290b883a 	add	r5,r5,r4
1010d3d4:	802ad43a 	srli	r21,r16,16
1010d3d8:	843fffcc 	andi	r16,r16,65535
1010d3dc:	440d383a 	mul	r6,r8,r16
1010d3e0:	4565383a 	mul	r18,r8,r21
1010d3e4:	8349383a 	mul	r4,r16,r13
1010d3e8:	500e943a 	slli	r7,r10,16
1010d3ec:	3010d43a 	srli	r8,r6,16
1010d3f0:	5028d43a 	srli	r20,r10,16
1010d3f4:	2489883a 	add	r4,r4,r18
1010d3f8:	8abfffcc 	andi	r10,r17,65535
1010d3fc:	3a95883a 	add	r10,r7,r10
1010d400:	4119883a 	add	r12,r8,r4
1010d404:	a169883a 	add	r20,r20,r5
1010d408:	1a87883a 	add	r3,r3,r10
1010d40c:	6d5b383a 	mul	r13,r13,r21
1010d410:	6480022e 	bgeu	r12,r18,1010d41c <__muldf3+0x400>
1010d414:	01000074 	movhi	r4,1
1010d418:	691b883a 	add	r13,r13,r4
1010d41c:	7c25383a 	mul	r18,r15,r16
1010d420:	7d4b383a 	mul	r5,r15,r21
1010d424:	84cf383a 	mul	r7,r16,r19
1010d428:	901ed43a 	srli	r15,r18,16
1010d42c:	6008d43a 	srli	r4,r12,16
1010d430:	6010943a 	slli	r8,r12,16
1010d434:	394f883a 	add	r7,r7,r5
1010d438:	333fffcc 	andi	r12,r6,65535
1010d43c:	79df883a 	add	r15,r15,r7
1010d440:	235b883a 	add	r13,r4,r13
1010d444:	9d63383a 	mul	r17,r19,r21
1010d448:	4309883a 	add	r4,r8,r12
1010d44c:	7940022e 	bgeu	r15,r5,1010d458 <__muldf3+0x43c>
1010d450:	01400074 	movhi	r5,1
1010d454:	8963883a 	add	r17,r17,r5
1010d458:	780a943a 	slli	r5,r15,16
1010d45c:	91bfffcc 	andi	r6,r18,65535
1010d460:	70c7883a 	add	r3,r14,r3
1010d464:	298d883a 	add	r6,r5,r6
1010d468:	1a8f803a 	cmpltu	r7,r3,r10
1010d46c:	350b883a 	add	r5,r6,r20
1010d470:	20c7883a 	add	r3,r4,r3
1010d474:	3955883a 	add	r10,r7,r5
1010d478:	1909803a 	cmpltu	r4,r3,r4
1010d47c:	6a91883a 	add	r8,r13,r10
1010d480:	780cd43a 	srli	r6,r15,16
1010d484:	2219883a 	add	r12,r4,r8
1010d488:	2d0b803a 	cmpltu	r5,r5,r20
1010d48c:	51cf803a 	cmpltu	r7,r10,r7
1010d490:	29ceb03a 	or	r7,r5,r7
1010d494:	4351803a 	cmpltu	r8,r8,r13
1010d498:	610b803a 	cmpltu	r5,r12,r4
1010d49c:	4148b03a 	or	r4,r8,r5
1010d4a0:	398f883a 	add	r7,r7,r6
1010d4a4:	3909883a 	add	r4,r7,r4
1010d4a8:	1810927a 	slli	r8,r3,9
1010d4ac:	2449883a 	add	r4,r4,r17
1010d4b0:	2008927a 	slli	r4,r4,9
1010d4b4:	6022d5fa 	srli	r17,r12,23
1010d4b8:	1806d5fa 	srli	r3,r3,23
1010d4bc:	4252b03a 	or	r9,r8,r9
1010d4c0:	600a927a 	slli	r5,r12,9
1010d4c4:	4810c03a 	cmpne	r8,r9,zero
1010d4c8:	2462b03a 	or	r17,r4,r17
1010d4cc:	40c6b03a 	or	r3,r8,r3
1010d4d0:	8900402c 	andhi	r4,r17,256
1010d4d4:	1950b03a 	or	r8,r3,r5
1010d4d8:	20000726 	beq	r4,zero,1010d4f8 <__muldf3+0x4dc>
1010d4dc:	4006d07a 	srli	r3,r8,1
1010d4e0:	880497fa 	slli	r2,r17,31
1010d4e4:	4200004c 	andi	r8,r8,1
1010d4e8:	8822d07a 	srli	r17,r17,1
1010d4ec:	1a10b03a 	or	r8,r3,r8
1010d4f0:	1210b03a 	or	r8,r2,r8
1010d4f4:	5805883a 	mov	r2,r11
1010d4f8:	1140ffc4 	addi	r5,r2,1023
1010d4fc:	0140440e 	bge	zero,r5,1010d610 <__muldf3+0x5f4>
1010d500:	40c001cc 	andi	r3,r8,7
1010d504:	18000726 	beq	r3,zero,1010d524 <__muldf3+0x508>
1010d508:	40c003cc 	andi	r3,r8,15
1010d50c:	01000104 	movi	r4,4
1010d510:	19000426 	beq	r3,r4,1010d524 <__muldf3+0x508>
1010d514:	4107883a 	add	r3,r8,r4
1010d518:	1a11803a 	cmpltu	r8,r3,r8
1010d51c:	8a23883a 	add	r17,r17,r8
1010d520:	1811883a 	mov	r8,r3
1010d524:	88c0402c 	andhi	r3,r17,256
1010d528:	18000426 	beq	r3,zero,1010d53c <__muldf3+0x520>
1010d52c:	11410004 	addi	r5,r2,1024
1010d530:	00bfc034 	movhi	r2,65280
1010d534:	10bfffc4 	addi	r2,r2,-1
1010d538:	88a2703a 	and	r17,r17,r2
1010d53c:	0081ff84 	movi	r2,2046
1010d540:	117f6416 	blt	r2,r5,1010d2d4 <__alt_data_end+0xfffed2d4>
1010d544:	8828977a 	slli	r20,r17,29
1010d548:	4010d0fa 	srli	r8,r8,3
1010d54c:	8822927a 	slli	r17,r17,9
1010d550:	2881ffcc 	andi	r2,r5,2047
1010d554:	a228b03a 	or	r20,r20,r8
1010d558:	880ad33a 	srli	r5,r17,12
1010d55c:	b02b883a 	mov	r21,r22
1010d560:	003f0d06 	br	1010d198 <__alt_data_end+0xfffed198>
1010d564:	8080022c 	andhi	r2,r16,8
1010d568:	10000926 	beq	r2,zero,1010d590 <__muldf3+0x574>
1010d56c:	8880022c 	andhi	r2,r17,8
1010d570:	1000071e 	bne	r2,zero,1010d590 <__muldf3+0x574>
1010d574:	00800434 	movhi	r2,16
1010d578:	89400234 	orhi	r5,r17,8
1010d57c:	10bfffc4 	addi	r2,r2,-1
1010d580:	b82b883a 	mov	r21,r23
1010d584:	288a703a 	and	r5,r5,r2
1010d588:	4029883a 	mov	r20,r8
1010d58c:	003f6806 	br	1010d330 <__alt_data_end+0xfffed330>
1010d590:	00800434 	movhi	r2,16
1010d594:	81400234 	orhi	r5,r16,8
1010d598:	10bfffc4 	addi	r2,r2,-1
1010d59c:	288a703a 	and	r5,r5,r2
1010d5a0:	003f6306 	br	1010d330 <__alt_data_end+0xfffed330>
1010d5a4:	147ff604 	addi	r17,r2,-40
1010d5a8:	3462983a 	sll	r17,r6,r17
1010d5ac:	0011883a 	mov	r8,zero
1010d5b0:	003f4406 	br	1010d2c4 <__alt_data_end+0xfffed2c4>
1010d5b4:	3009883a 	mov	r4,r6
1010d5b8:	d9800215 	stw	r6,8(sp)
1010d5bc:	da400115 	stw	r9,4(sp)
1010d5c0:	da800015 	stw	r10,0(sp)
1010d5c4:	010e2340 	call	1010e234 <__clzsi2>
1010d5c8:	10800804 	addi	r2,r2,32
1010d5cc:	da800017 	ldw	r10,0(sp)
1010d5d0:	da400117 	ldw	r9,4(sp)
1010d5d4:	d9800217 	ldw	r6,8(sp)
1010d5d8:	003f3006 	br	1010d29c <__alt_data_end+0xfffed29c>
1010d5dc:	143ff604 	addi	r16,r2,-40
1010d5e0:	9c20983a 	sll	r16,r19,r16
1010d5e4:	0029883a 	mov	r20,zero
1010d5e8:	003f1606 	br	1010d244 <__alt_data_end+0xfffed244>
1010d5ec:	d9800215 	stw	r6,8(sp)
1010d5f0:	d9c00015 	stw	r7,0(sp)
1010d5f4:	da400115 	stw	r9,4(sp)
1010d5f8:	010e2340 	call	1010e234 <__clzsi2>
1010d5fc:	10800804 	addi	r2,r2,32
1010d600:	da400117 	ldw	r9,4(sp)
1010d604:	d9c00017 	ldw	r7,0(sp)
1010d608:	d9800217 	ldw	r6,8(sp)
1010d60c:	003f0306 	br	1010d21c <__alt_data_end+0xfffed21c>
1010d610:	00c00044 	movi	r3,1
1010d614:	1947c83a 	sub	r3,r3,r5
1010d618:	00800e04 	movi	r2,56
1010d61c:	10feda16 	blt	r2,r3,1010d188 <__alt_data_end+0xfffed188>
1010d620:	008007c4 	movi	r2,31
1010d624:	10c01b16 	blt	r2,r3,1010d694 <__muldf3+0x678>
1010d628:	00800804 	movi	r2,32
1010d62c:	10c5c83a 	sub	r2,r2,r3
1010d630:	888a983a 	sll	r5,r17,r2
1010d634:	40c8d83a 	srl	r4,r8,r3
1010d638:	4084983a 	sll	r2,r8,r2
1010d63c:	88e2d83a 	srl	r17,r17,r3
1010d640:	2906b03a 	or	r3,r5,r4
1010d644:	1004c03a 	cmpne	r2,r2,zero
1010d648:	1886b03a 	or	r3,r3,r2
1010d64c:	188001cc 	andi	r2,r3,7
1010d650:	10000726 	beq	r2,zero,1010d670 <__muldf3+0x654>
1010d654:	188003cc 	andi	r2,r3,15
1010d658:	01000104 	movi	r4,4
1010d65c:	11000426 	beq	r2,r4,1010d670 <__muldf3+0x654>
1010d660:	1805883a 	mov	r2,r3
1010d664:	10c00104 	addi	r3,r2,4
1010d668:	1885803a 	cmpltu	r2,r3,r2
1010d66c:	88a3883a 	add	r17,r17,r2
1010d670:	8880202c 	andhi	r2,r17,128
1010d674:	10001c26 	beq	r2,zero,1010d6e8 <__muldf3+0x6cc>
1010d678:	b02b883a 	mov	r21,r22
1010d67c:	00800044 	movi	r2,1
1010d680:	000b883a 	mov	r5,zero
1010d684:	0029883a 	mov	r20,zero
1010d688:	003ec306 	br	1010d198 <__alt_data_end+0xfffed198>
1010d68c:	5805883a 	mov	r2,r11
1010d690:	003f9906 	br	1010d4f8 <__alt_data_end+0xfffed4f8>
1010d694:	00bff844 	movi	r2,-31
1010d698:	1145c83a 	sub	r2,r2,r5
1010d69c:	8888d83a 	srl	r4,r17,r2
1010d6a0:	00800804 	movi	r2,32
1010d6a4:	18801a26 	beq	r3,r2,1010d710 <__muldf3+0x6f4>
1010d6a8:	00801004 	movi	r2,64
1010d6ac:	10c5c83a 	sub	r2,r2,r3
1010d6b0:	8884983a 	sll	r2,r17,r2
1010d6b4:	1204b03a 	or	r2,r2,r8
1010d6b8:	1004c03a 	cmpne	r2,r2,zero
1010d6bc:	2084b03a 	or	r2,r4,r2
1010d6c0:	144001cc 	andi	r17,r2,7
1010d6c4:	88000d1e 	bne	r17,zero,1010d6fc <__muldf3+0x6e0>
1010d6c8:	000b883a 	mov	r5,zero
1010d6cc:	1028d0fa 	srli	r20,r2,3
1010d6d0:	b02b883a 	mov	r21,r22
1010d6d4:	0005883a 	mov	r2,zero
1010d6d8:	a468b03a 	or	r20,r20,r17
1010d6dc:	003eae06 	br	1010d198 <__alt_data_end+0xfffed198>
1010d6e0:	1007883a 	mov	r3,r2
1010d6e4:	0023883a 	mov	r17,zero
1010d6e8:	880a927a 	slli	r5,r17,9
1010d6ec:	1805883a 	mov	r2,r3
1010d6f0:	8822977a 	slli	r17,r17,29
1010d6f4:	280ad33a 	srli	r5,r5,12
1010d6f8:	003ff406 	br	1010d6cc <__alt_data_end+0xfffed6cc>
1010d6fc:	10c003cc 	andi	r3,r2,15
1010d700:	01000104 	movi	r4,4
1010d704:	193ff626 	beq	r3,r4,1010d6e0 <__alt_data_end+0xfffed6e0>
1010d708:	0023883a 	mov	r17,zero
1010d70c:	003fd506 	br	1010d664 <__alt_data_end+0xfffed664>
1010d710:	0005883a 	mov	r2,zero
1010d714:	003fe706 	br	1010d6b4 <__alt_data_end+0xfffed6b4>
1010d718:	00800434 	movhi	r2,16
1010d71c:	89400234 	orhi	r5,r17,8
1010d720:	10bfffc4 	addi	r2,r2,-1
1010d724:	b02b883a 	mov	r21,r22
1010d728:	288a703a 	and	r5,r5,r2
1010d72c:	4029883a 	mov	r20,r8
1010d730:	003eff06 	br	1010d330 <__alt_data_end+0xfffed330>

1010d734 <__subdf3>:
1010d734:	02000434 	movhi	r8,16
1010d738:	423fffc4 	addi	r8,r8,-1
1010d73c:	defffb04 	addi	sp,sp,-20
1010d740:	2a14703a 	and	r10,r5,r8
1010d744:	3812d53a 	srli	r9,r7,20
1010d748:	3a10703a 	and	r8,r7,r8
1010d74c:	2006d77a 	srli	r3,r4,29
1010d750:	3004d77a 	srli	r2,r6,29
1010d754:	dc000015 	stw	r16,0(sp)
1010d758:	501490fa 	slli	r10,r10,3
1010d75c:	2820d53a 	srli	r16,r5,20
1010d760:	401090fa 	slli	r8,r8,3
1010d764:	dc800215 	stw	r18,8(sp)
1010d768:	dc400115 	stw	r17,4(sp)
1010d76c:	dfc00415 	stw	ra,16(sp)
1010d770:	202290fa 	slli	r17,r4,3
1010d774:	dcc00315 	stw	r19,12(sp)
1010d778:	4a41ffcc 	andi	r9,r9,2047
1010d77c:	0101ffc4 	movi	r4,2047
1010d780:	2824d7fa 	srli	r18,r5,31
1010d784:	8401ffcc 	andi	r16,r16,2047
1010d788:	50c6b03a 	or	r3,r10,r3
1010d78c:	380ed7fa 	srli	r7,r7,31
1010d790:	408ab03a 	or	r5,r8,r2
1010d794:	300c90fa 	slli	r6,r6,3
1010d798:	49009626 	beq	r9,r4,1010d9f4 <__subdf3+0x2c0>
1010d79c:	39c0005c 	xori	r7,r7,1
1010d7a0:	8245c83a 	sub	r2,r16,r9
1010d7a4:	3c807426 	beq	r7,r18,1010d978 <__subdf3+0x244>
1010d7a8:	0080af0e 	bge	zero,r2,1010da68 <__subdf3+0x334>
1010d7ac:	48002a1e 	bne	r9,zero,1010d858 <__subdf3+0x124>
1010d7b0:	2988b03a 	or	r4,r5,r6
1010d7b4:	20009a1e 	bne	r4,zero,1010da20 <__subdf3+0x2ec>
1010d7b8:	888001cc 	andi	r2,r17,7
1010d7bc:	10000726 	beq	r2,zero,1010d7dc <__subdf3+0xa8>
1010d7c0:	888003cc 	andi	r2,r17,15
1010d7c4:	01000104 	movi	r4,4
1010d7c8:	11000426 	beq	r2,r4,1010d7dc <__subdf3+0xa8>
1010d7cc:	890b883a 	add	r5,r17,r4
1010d7d0:	2c63803a 	cmpltu	r17,r5,r17
1010d7d4:	1c47883a 	add	r3,r3,r17
1010d7d8:	2823883a 	mov	r17,r5
1010d7dc:	1880202c 	andhi	r2,r3,128
1010d7e0:	10005926 	beq	r2,zero,1010d948 <__subdf3+0x214>
1010d7e4:	84000044 	addi	r16,r16,1
1010d7e8:	0081ffc4 	movi	r2,2047
1010d7ec:	8080be26 	beq	r16,r2,1010dae8 <__subdf3+0x3b4>
1010d7f0:	017fe034 	movhi	r5,65408
1010d7f4:	297fffc4 	addi	r5,r5,-1
1010d7f8:	1946703a 	and	r3,r3,r5
1010d7fc:	1804977a 	slli	r2,r3,29
1010d800:	1806927a 	slli	r3,r3,9
1010d804:	8822d0fa 	srli	r17,r17,3
1010d808:	8401ffcc 	andi	r16,r16,2047
1010d80c:	180ad33a 	srli	r5,r3,12
1010d810:	9100004c 	andi	r4,r18,1
1010d814:	1444b03a 	or	r2,r2,r17
1010d818:	80c1ffcc 	andi	r3,r16,2047
1010d81c:	1820953a 	slli	r16,r3,20
1010d820:	20c03fcc 	andi	r3,r4,255
1010d824:	180897fa 	slli	r4,r3,31
1010d828:	00c00434 	movhi	r3,16
1010d82c:	18ffffc4 	addi	r3,r3,-1
1010d830:	28c6703a 	and	r3,r5,r3
1010d834:	1c06b03a 	or	r3,r3,r16
1010d838:	1906b03a 	or	r3,r3,r4
1010d83c:	dfc00417 	ldw	ra,16(sp)
1010d840:	dcc00317 	ldw	r19,12(sp)
1010d844:	dc800217 	ldw	r18,8(sp)
1010d848:	dc400117 	ldw	r17,4(sp)
1010d84c:	dc000017 	ldw	r16,0(sp)
1010d850:	dec00504 	addi	sp,sp,20
1010d854:	f800283a 	ret
1010d858:	0101ffc4 	movi	r4,2047
1010d85c:	813fd626 	beq	r16,r4,1010d7b8 <__alt_data_end+0xfffed7b8>
1010d860:	29402034 	orhi	r5,r5,128
1010d864:	01000e04 	movi	r4,56
1010d868:	2080a316 	blt	r4,r2,1010daf8 <__subdf3+0x3c4>
1010d86c:	010007c4 	movi	r4,31
1010d870:	2080c616 	blt	r4,r2,1010db8c <__subdf3+0x458>
1010d874:	01000804 	movi	r4,32
1010d878:	2089c83a 	sub	r4,r4,r2
1010d87c:	2910983a 	sll	r8,r5,r4
1010d880:	308ed83a 	srl	r7,r6,r2
1010d884:	3108983a 	sll	r4,r6,r4
1010d888:	2884d83a 	srl	r2,r5,r2
1010d88c:	41ccb03a 	or	r6,r8,r7
1010d890:	2008c03a 	cmpne	r4,r4,zero
1010d894:	310cb03a 	or	r6,r6,r4
1010d898:	898dc83a 	sub	r6,r17,r6
1010d89c:	89a3803a 	cmpltu	r17,r17,r6
1010d8a0:	1887c83a 	sub	r3,r3,r2
1010d8a4:	1c47c83a 	sub	r3,r3,r17
1010d8a8:	3023883a 	mov	r17,r6
1010d8ac:	1880202c 	andhi	r2,r3,128
1010d8b0:	10002326 	beq	r2,zero,1010d940 <__subdf3+0x20c>
1010d8b4:	04c02034 	movhi	r19,128
1010d8b8:	9cffffc4 	addi	r19,r19,-1
1010d8bc:	1ce6703a 	and	r19,r3,r19
1010d8c0:	98007a26 	beq	r19,zero,1010daac <__subdf3+0x378>
1010d8c4:	9809883a 	mov	r4,r19
1010d8c8:	010e2340 	call	1010e234 <__clzsi2>
1010d8cc:	113ffe04 	addi	r4,r2,-8
1010d8d0:	00c007c4 	movi	r3,31
1010d8d4:	19007b16 	blt	r3,r4,1010dac4 <__subdf3+0x390>
1010d8d8:	00800804 	movi	r2,32
1010d8dc:	1105c83a 	sub	r2,r2,r4
1010d8e0:	8884d83a 	srl	r2,r17,r2
1010d8e4:	9906983a 	sll	r3,r19,r4
1010d8e8:	8922983a 	sll	r17,r17,r4
1010d8ec:	10c4b03a 	or	r2,r2,r3
1010d8f0:	24007816 	blt	r4,r16,1010dad4 <__subdf3+0x3a0>
1010d8f4:	2421c83a 	sub	r16,r4,r16
1010d8f8:	80c00044 	addi	r3,r16,1
1010d8fc:	010007c4 	movi	r4,31
1010d900:	20c09516 	blt	r4,r3,1010db58 <__subdf3+0x424>
1010d904:	01400804 	movi	r5,32
1010d908:	28cbc83a 	sub	r5,r5,r3
1010d90c:	88c8d83a 	srl	r4,r17,r3
1010d910:	8962983a 	sll	r17,r17,r5
1010d914:	114a983a 	sll	r5,r2,r5
1010d918:	10c6d83a 	srl	r3,r2,r3
1010d91c:	8804c03a 	cmpne	r2,r17,zero
1010d920:	290ab03a 	or	r5,r5,r4
1010d924:	28a2b03a 	or	r17,r5,r2
1010d928:	0021883a 	mov	r16,zero
1010d92c:	003fa206 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010d930:	2090b03a 	or	r8,r4,r2
1010d934:	40018e26 	beq	r8,zero,1010df70 <__subdf3+0x83c>
1010d938:	1007883a 	mov	r3,r2
1010d93c:	2023883a 	mov	r17,r4
1010d940:	888001cc 	andi	r2,r17,7
1010d944:	103f9e1e 	bne	r2,zero,1010d7c0 <__alt_data_end+0xfffed7c0>
1010d948:	1804977a 	slli	r2,r3,29
1010d94c:	8822d0fa 	srli	r17,r17,3
1010d950:	1810d0fa 	srli	r8,r3,3
1010d954:	9100004c 	andi	r4,r18,1
1010d958:	1444b03a 	or	r2,r2,r17
1010d95c:	00c1ffc4 	movi	r3,2047
1010d960:	80c02826 	beq	r16,r3,1010da04 <__subdf3+0x2d0>
1010d964:	01400434 	movhi	r5,16
1010d968:	297fffc4 	addi	r5,r5,-1
1010d96c:	80e0703a 	and	r16,r16,r3
1010d970:	414a703a 	and	r5,r8,r5
1010d974:	003fa806 	br	1010d818 <__alt_data_end+0xfffed818>
1010d978:	0080630e 	bge	zero,r2,1010db08 <__subdf3+0x3d4>
1010d97c:	48003026 	beq	r9,zero,1010da40 <__subdf3+0x30c>
1010d980:	0101ffc4 	movi	r4,2047
1010d984:	813f8c26 	beq	r16,r4,1010d7b8 <__alt_data_end+0xfffed7b8>
1010d988:	29402034 	orhi	r5,r5,128
1010d98c:	01000e04 	movi	r4,56
1010d990:	2080a90e 	bge	r4,r2,1010dc38 <__subdf3+0x504>
1010d994:	298cb03a 	or	r6,r5,r6
1010d998:	3012c03a 	cmpne	r9,r6,zero
1010d99c:	0005883a 	mov	r2,zero
1010d9a0:	4c53883a 	add	r9,r9,r17
1010d9a4:	4c63803a 	cmpltu	r17,r9,r17
1010d9a8:	10c7883a 	add	r3,r2,r3
1010d9ac:	88c7883a 	add	r3,r17,r3
1010d9b0:	4823883a 	mov	r17,r9
1010d9b4:	1880202c 	andhi	r2,r3,128
1010d9b8:	1000d026 	beq	r2,zero,1010dcfc <__subdf3+0x5c8>
1010d9bc:	84000044 	addi	r16,r16,1
1010d9c0:	0081ffc4 	movi	r2,2047
1010d9c4:	8080fe26 	beq	r16,r2,1010ddc0 <__subdf3+0x68c>
1010d9c8:	00bfe034 	movhi	r2,65408
1010d9cc:	10bfffc4 	addi	r2,r2,-1
1010d9d0:	1886703a 	and	r3,r3,r2
1010d9d4:	880ad07a 	srli	r5,r17,1
1010d9d8:	180497fa 	slli	r2,r3,31
1010d9dc:	8900004c 	andi	r4,r17,1
1010d9e0:	2922b03a 	or	r17,r5,r4
1010d9e4:	1806d07a 	srli	r3,r3,1
1010d9e8:	1462b03a 	or	r17,r2,r17
1010d9ec:	3825883a 	mov	r18,r7
1010d9f0:	003f7106 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010d9f4:	2984b03a 	or	r2,r5,r6
1010d9f8:	103f6826 	beq	r2,zero,1010d79c <__alt_data_end+0xfffed79c>
1010d9fc:	39c03fcc 	andi	r7,r7,255
1010da00:	003f6706 	br	1010d7a0 <__alt_data_end+0xfffed7a0>
1010da04:	4086b03a 	or	r3,r8,r2
1010da08:	18015226 	beq	r3,zero,1010df54 <__subdf3+0x820>
1010da0c:	00c00434 	movhi	r3,16
1010da10:	41400234 	orhi	r5,r8,8
1010da14:	18ffffc4 	addi	r3,r3,-1
1010da18:	28ca703a 	and	r5,r5,r3
1010da1c:	003f7e06 	br	1010d818 <__alt_data_end+0xfffed818>
1010da20:	10bfffc4 	addi	r2,r2,-1
1010da24:	1000491e 	bne	r2,zero,1010db4c <__subdf3+0x418>
1010da28:	898fc83a 	sub	r7,r17,r6
1010da2c:	89e3803a 	cmpltu	r17,r17,r7
1010da30:	1947c83a 	sub	r3,r3,r5
1010da34:	1c47c83a 	sub	r3,r3,r17
1010da38:	3823883a 	mov	r17,r7
1010da3c:	003f9b06 	br	1010d8ac <__alt_data_end+0xfffed8ac>
1010da40:	2988b03a 	or	r4,r5,r6
1010da44:	203f5c26 	beq	r4,zero,1010d7b8 <__alt_data_end+0xfffed7b8>
1010da48:	10bfffc4 	addi	r2,r2,-1
1010da4c:	1000931e 	bne	r2,zero,1010dc9c <__subdf3+0x568>
1010da50:	898d883a 	add	r6,r17,r6
1010da54:	3463803a 	cmpltu	r17,r6,r17
1010da58:	1947883a 	add	r3,r3,r5
1010da5c:	88c7883a 	add	r3,r17,r3
1010da60:	3023883a 	mov	r17,r6
1010da64:	003fd306 	br	1010d9b4 <__alt_data_end+0xfffed9b4>
1010da68:	1000541e 	bne	r2,zero,1010dbbc <__subdf3+0x488>
1010da6c:	80800044 	addi	r2,r16,1
1010da70:	1081ffcc 	andi	r2,r2,2047
1010da74:	01000044 	movi	r4,1
1010da78:	2080a20e 	bge	r4,r2,1010dd04 <__subdf3+0x5d0>
1010da7c:	8989c83a 	sub	r4,r17,r6
1010da80:	8905803a 	cmpltu	r2,r17,r4
1010da84:	1967c83a 	sub	r19,r3,r5
1010da88:	98a7c83a 	sub	r19,r19,r2
1010da8c:	9880202c 	andhi	r2,r19,128
1010da90:	10006326 	beq	r2,zero,1010dc20 <__subdf3+0x4ec>
1010da94:	3463c83a 	sub	r17,r6,r17
1010da98:	28c7c83a 	sub	r3,r5,r3
1010da9c:	344d803a 	cmpltu	r6,r6,r17
1010daa0:	19a7c83a 	sub	r19,r3,r6
1010daa4:	3825883a 	mov	r18,r7
1010daa8:	983f861e 	bne	r19,zero,1010d8c4 <__alt_data_end+0xfffed8c4>
1010daac:	8809883a 	mov	r4,r17
1010dab0:	010e2340 	call	1010e234 <__clzsi2>
1010dab4:	10800804 	addi	r2,r2,32
1010dab8:	113ffe04 	addi	r4,r2,-8
1010dabc:	00c007c4 	movi	r3,31
1010dac0:	193f850e 	bge	r3,r4,1010d8d8 <__alt_data_end+0xfffed8d8>
1010dac4:	10bff604 	addi	r2,r2,-40
1010dac8:	8884983a 	sll	r2,r17,r2
1010dacc:	0023883a 	mov	r17,zero
1010dad0:	243f880e 	bge	r4,r16,1010d8f4 <__alt_data_end+0xfffed8f4>
1010dad4:	00ffe034 	movhi	r3,65408
1010dad8:	18ffffc4 	addi	r3,r3,-1
1010dadc:	8121c83a 	sub	r16,r16,r4
1010dae0:	10c6703a 	and	r3,r2,r3
1010dae4:	003f3406 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dae8:	9100004c 	andi	r4,r18,1
1010daec:	000b883a 	mov	r5,zero
1010daf0:	0005883a 	mov	r2,zero
1010daf4:	003f4806 	br	1010d818 <__alt_data_end+0xfffed818>
1010daf8:	298cb03a 	or	r6,r5,r6
1010dafc:	300cc03a 	cmpne	r6,r6,zero
1010db00:	0005883a 	mov	r2,zero
1010db04:	003f6406 	br	1010d898 <__alt_data_end+0xfffed898>
1010db08:	10009a1e 	bne	r2,zero,1010dd74 <__subdf3+0x640>
1010db0c:	82400044 	addi	r9,r16,1
1010db10:	4881ffcc 	andi	r2,r9,2047
1010db14:	02800044 	movi	r10,1
1010db18:	5080670e 	bge	r10,r2,1010dcb8 <__subdf3+0x584>
1010db1c:	0081ffc4 	movi	r2,2047
1010db20:	4880af26 	beq	r9,r2,1010dde0 <__subdf3+0x6ac>
1010db24:	898d883a 	add	r6,r17,r6
1010db28:	1945883a 	add	r2,r3,r5
1010db2c:	3447803a 	cmpltu	r3,r6,r17
1010db30:	1887883a 	add	r3,r3,r2
1010db34:	182297fa 	slli	r17,r3,31
1010db38:	300cd07a 	srli	r6,r6,1
1010db3c:	1806d07a 	srli	r3,r3,1
1010db40:	4821883a 	mov	r16,r9
1010db44:	89a2b03a 	or	r17,r17,r6
1010db48:	003f1b06 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010db4c:	0101ffc4 	movi	r4,2047
1010db50:	813f441e 	bne	r16,r4,1010d864 <__alt_data_end+0xfffed864>
1010db54:	003f1806 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010db58:	843ff844 	addi	r16,r16,-31
1010db5c:	01400804 	movi	r5,32
1010db60:	1408d83a 	srl	r4,r2,r16
1010db64:	19405026 	beq	r3,r5,1010dca8 <__subdf3+0x574>
1010db68:	01401004 	movi	r5,64
1010db6c:	28c7c83a 	sub	r3,r5,r3
1010db70:	10c4983a 	sll	r2,r2,r3
1010db74:	88a2b03a 	or	r17,r17,r2
1010db78:	8822c03a 	cmpne	r17,r17,zero
1010db7c:	2462b03a 	or	r17,r4,r17
1010db80:	0007883a 	mov	r3,zero
1010db84:	0021883a 	mov	r16,zero
1010db88:	003f6d06 	br	1010d940 <__alt_data_end+0xfffed940>
1010db8c:	11fff804 	addi	r7,r2,-32
1010db90:	01000804 	movi	r4,32
1010db94:	29ced83a 	srl	r7,r5,r7
1010db98:	11004526 	beq	r2,r4,1010dcb0 <__subdf3+0x57c>
1010db9c:	01001004 	movi	r4,64
1010dba0:	2089c83a 	sub	r4,r4,r2
1010dba4:	2904983a 	sll	r2,r5,r4
1010dba8:	118cb03a 	or	r6,r2,r6
1010dbac:	300cc03a 	cmpne	r6,r6,zero
1010dbb0:	398cb03a 	or	r6,r7,r6
1010dbb4:	0005883a 	mov	r2,zero
1010dbb8:	003f3706 	br	1010d898 <__alt_data_end+0xfffed898>
1010dbbc:	80002a26 	beq	r16,zero,1010dc68 <__subdf3+0x534>
1010dbc0:	0101ffc4 	movi	r4,2047
1010dbc4:	49006626 	beq	r9,r4,1010dd60 <__subdf3+0x62c>
1010dbc8:	0085c83a 	sub	r2,zero,r2
1010dbcc:	18c02034 	orhi	r3,r3,128
1010dbd0:	01000e04 	movi	r4,56
1010dbd4:	20807e16 	blt	r4,r2,1010ddd0 <__subdf3+0x69c>
1010dbd8:	010007c4 	movi	r4,31
1010dbdc:	2080e716 	blt	r4,r2,1010df7c <__subdf3+0x848>
1010dbe0:	01000804 	movi	r4,32
1010dbe4:	2089c83a 	sub	r4,r4,r2
1010dbe8:	1914983a 	sll	r10,r3,r4
1010dbec:	8890d83a 	srl	r8,r17,r2
1010dbf0:	8908983a 	sll	r4,r17,r4
1010dbf4:	1884d83a 	srl	r2,r3,r2
1010dbf8:	5222b03a 	or	r17,r10,r8
1010dbfc:	2006c03a 	cmpne	r3,r4,zero
1010dc00:	88e2b03a 	or	r17,r17,r3
1010dc04:	3463c83a 	sub	r17,r6,r17
1010dc08:	2885c83a 	sub	r2,r5,r2
1010dc0c:	344d803a 	cmpltu	r6,r6,r17
1010dc10:	1187c83a 	sub	r3,r2,r6
1010dc14:	4821883a 	mov	r16,r9
1010dc18:	3825883a 	mov	r18,r7
1010dc1c:	003f2306 	br	1010d8ac <__alt_data_end+0xfffed8ac>
1010dc20:	24d0b03a 	or	r8,r4,r19
1010dc24:	40001b1e 	bne	r8,zero,1010dc94 <__subdf3+0x560>
1010dc28:	0005883a 	mov	r2,zero
1010dc2c:	0009883a 	mov	r4,zero
1010dc30:	0021883a 	mov	r16,zero
1010dc34:	003f4906 	br	1010d95c <__alt_data_end+0xfffed95c>
1010dc38:	010007c4 	movi	r4,31
1010dc3c:	20803a16 	blt	r4,r2,1010dd28 <__subdf3+0x5f4>
1010dc40:	01000804 	movi	r4,32
1010dc44:	2089c83a 	sub	r4,r4,r2
1010dc48:	2912983a 	sll	r9,r5,r4
1010dc4c:	3090d83a 	srl	r8,r6,r2
1010dc50:	3108983a 	sll	r4,r6,r4
1010dc54:	2884d83a 	srl	r2,r5,r2
1010dc58:	4a12b03a 	or	r9,r9,r8
1010dc5c:	2008c03a 	cmpne	r4,r4,zero
1010dc60:	4912b03a 	or	r9,r9,r4
1010dc64:	003f4e06 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010dc68:	1c48b03a 	or	r4,r3,r17
1010dc6c:	20003c26 	beq	r4,zero,1010dd60 <__subdf3+0x62c>
1010dc70:	0084303a 	nor	r2,zero,r2
1010dc74:	1000381e 	bne	r2,zero,1010dd58 <__subdf3+0x624>
1010dc78:	3463c83a 	sub	r17,r6,r17
1010dc7c:	28c5c83a 	sub	r2,r5,r3
1010dc80:	344d803a 	cmpltu	r6,r6,r17
1010dc84:	1187c83a 	sub	r3,r2,r6
1010dc88:	4821883a 	mov	r16,r9
1010dc8c:	3825883a 	mov	r18,r7
1010dc90:	003f0606 	br	1010d8ac <__alt_data_end+0xfffed8ac>
1010dc94:	2023883a 	mov	r17,r4
1010dc98:	003f0906 	br	1010d8c0 <__alt_data_end+0xfffed8c0>
1010dc9c:	0101ffc4 	movi	r4,2047
1010dca0:	813f3a1e 	bne	r16,r4,1010d98c <__alt_data_end+0xfffed98c>
1010dca4:	003ec406 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dca8:	0005883a 	mov	r2,zero
1010dcac:	003fb106 	br	1010db74 <__alt_data_end+0xfffedb74>
1010dcb0:	0005883a 	mov	r2,zero
1010dcb4:	003fbc06 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010dcb8:	1c44b03a 	or	r2,r3,r17
1010dcbc:	80008e1e 	bne	r16,zero,1010def8 <__subdf3+0x7c4>
1010dcc0:	1000c826 	beq	r2,zero,1010dfe4 <__subdf3+0x8b0>
1010dcc4:	2984b03a 	or	r2,r5,r6
1010dcc8:	103ebb26 	beq	r2,zero,1010d7b8 <__alt_data_end+0xfffed7b8>
1010dccc:	8989883a 	add	r4,r17,r6
1010dcd0:	1945883a 	add	r2,r3,r5
1010dcd4:	2447803a 	cmpltu	r3,r4,r17
1010dcd8:	1887883a 	add	r3,r3,r2
1010dcdc:	1880202c 	andhi	r2,r3,128
1010dce0:	2023883a 	mov	r17,r4
1010dce4:	103f1626 	beq	r2,zero,1010d940 <__alt_data_end+0xfffed940>
1010dce8:	00bfe034 	movhi	r2,65408
1010dcec:	10bfffc4 	addi	r2,r2,-1
1010dcf0:	5021883a 	mov	r16,r10
1010dcf4:	1886703a 	and	r3,r3,r2
1010dcf8:	003eaf06 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dcfc:	3825883a 	mov	r18,r7
1010dd00:	003f0f06 	br	1010d940 <__alt_data_end+0xfffed940>
1010dd04:	1c44b03a 	or	r2,r3,r17
1010dd08:	8000251e 	bne	r16,zero,1010dda0 <__subdf3+0x66c>
1010dd0c:	1000661e 	bne	r2,zero,1010dea8 <__subdf3+0x774>
1010dd10:	2990b03a 	or	r8,r5,r6
1010dd14:	40009626 	beq	r8,zero,1010df70 <__subdf3+0x83c>
1010dd18:	2807883a 	mov	r3,r5
1010dd1c:	3023883a 	mov	r17,r6
1010dd20:	3825883a 	mov	r18,r7
1010dd24:	003ea406 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dd28:	127ff804 	addi	r9,r2,-32
1010dd2c:	01000804 	movi	r4,32
1010dd30:	2a52d83a 	srl	r9,r5,r9
1010dd34:	11008c26 	beq	r2,r4,1010df68 <__subdf3+0x834>
1010dd38:	01001004 	movi	r4,64
1010dd3c:	2085c83a 	sub	r2,r4,r2
1010dd40:	2884983a 	sll	r2,r5,r2
1010dd44:	118cb03a 	or	r6,r2,r6
1010dd48:	300cc03a 	cmpne	r6,r6,zero
1010dd4c:	4992b03a 	or	r9,r9,r6
1010dd50:	0005883a 	mov	r2,zero
1010dd54:	003f1206 	br	1010d9a0 <__alt_data_end+0xfffed9a0>
1010dd58:	0101ffc4 	movi	r4,2047
1010dd5c:	493f9c1e 	bne	r9,r4,1010dbd0 <__alt_data_end+0xfffedbd0>
1010dd60:	2807883a 	mov	r3,r5
1010dd64:	3023883a 	mov	r17,r6
1010dd68:	4821883a 	mov	r16,r9
1010dd6c:	3825883a 	mov	r18,r7
1010dd70:	003e9106 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dd74:	80001f1e 	bne	r16,zero,1010ddf4 <__subdf3+0x6c0>
1010dd78:	1c48b03a 	or	r4,r3,r17
1010dd7c:	20005a26 	beq	r4,zero,1010dee8 <__subdf3+0x7b4>
1010dd80:	0084303a 	nor	r2,zero,r2
1010dd84:	1000561e 	bne	r2,zero,1010dee0 <__subdf3+0x7ac>
1010dd88:	89a3883a 	add	r17,r17,r6
1010dd8c:	1945883a 	add	r2,r3,r5
1010dd90:	898d803a 	cmpltu	r6,r17,r6
1010dd94:	3087883a 	add	r3,r6,r2
1010dd98:	4821883a 	mov	r16,r9
1010dd9c:	003f0506 	br	1010d9b4 <__alt_data_end+0xfffed9b4>
1010dda0:	10002b1e 	bne	r2,zero,1010de50 <__subdf3+0x71c>
1010dda4:	2984b03a 	or	r2,r5,r6
1010dda8:	10008026 	beq	r2,zero,1010dfac <__subdf3+0x878>
1010ddac:	2807883a 	mov	r3,r5
1010ddb0:	3023883a 	mov	r17,r6
1010ddb4:	3825883a 	mov	r18,r7
1010ddb8:	0401ffc4 	movi	r16,2047
1010ddbc:	003e7e06 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010ddc0:	3809883a 	mov	r4,r7
1010ddc4:	0011883a 	mov	r8,zero
1010ddc8:	0005883a 	mov	r2,zero
1010ddcc:	003ee306 	br	1010d95c <__alt_data_end+0xfffed95c>
1010ddd0:	1c62b03a 	or	r17,r3,r17
1010ddd4:	8822c03a 	cmpne	r17,r17,zero
1010ddd8:	0005883a 	mov	r2,zero
1010dddc:	003f8906 	br	1010dc04 <__alt_data_end+0xfffedc04>
1010dde0:	3809883a 	mov	r4,r7
1010dde4:	4821883a 	mov	r16,r9
1010dde8:	0011883a 	mov	r8,zero
1010ddec:	0005883a 	mov	r2,zero
1010ddf0:	003eda06 	br	1010d95c <__alt_data_end+0xfffed95c>
1010ddf4:	0101ffc4 	movi	r4,2047
1010ddf8:	49003b26 	beq	r9,r4,1010dee8 <__subdf3+0x7b4>
1010ddfc:	0085c83a 	sub	r2,zero,r2
1010de00:	18c02034 	orhi	r3,r3,128
1010de04:	01000e04 	movi	r4,56
1010de08:	20806e16 	blt	r4,r2,1010dfc4 <__subdf3+0x890>
1010de0c:	010007c4 	movi	r4,31
1010de10:	20807716 	blt	r4,r2,1010dff0 <__subdf3+0x8bc>
1010de14:	01000804 	movi	r4,32
1010de18:	2089c83a 	sub	r4,r4,r2
1010de1c:	1914983a 	sll	r10,r3,r4
1010de20:	8890d83a 	srl	r8,r17,r2
1010de24:	8908983a 	sll	r4,r17,r4
1010de28:	1884d83a 	srl	r2,r3,r2
1010de2c:	5222b03a 	or	r17,r10,r8
1010de30:	2006c03a 	cmpne	r3,r4,zero
1010de34:	88e2b03a 	or	r17,r17,r3
1010de38:	89a3883a 	add	r17,r17,r6
1010de3c:	1145883a 	add	r2,r2,r5
1010de40:	898d803a 	cmpltu	r6,r17,r6
1010de44:	3087883a 	add	r3,r6,r2
1010de48:	4821883a 	mov	r16,r9
1010de4c:	003ed906 	br	1010d9b4 <__alt_data_end+0xfffed9b4>
1010de50:	2984b03a 	or	r2,r5,r6
1010de54:	10004226 	beq	r2,zero,1010df60 <__subdf3+0x82c>
1010de58:	1808d0fa 	srli	r4,r3,3
1010de5c:	8822d0fa 	srli	r17,r17,3
1010de60:	1806977a 	slli	r3,r3,29
1010de64:	2080022c 	andhi	r2,r4,8
1010de68:	1c62b03a 	or	r17,r3,r17
1010de6c:	10000826 	beq	r2,zero,1010de90 <__subdf3+0x75c>
1010de70:	2812d0fa 	srli	r9,r5,3
1010de74:	4880022c 	andhi	r2,r9,8
1010de78:	1000051e 	bne	r2,zero,1010de90 <__subdf3+0x75c>
1010de7c:	300cd0fa 	srli	r6,r6,3
1010de80:	2804977a 	slli	r2,r5,29
1010de84:	4809883a 	mov	r4,r9
1010de88:	3825883a 	mov	r18,r7
1010de8c:	11a2b03a 	or	r17,r2,r6
1010de90:	8806d77a 	srli	r3,r17,29
1010de94:	200890fa 	slli	r4,r4,3
1010de98:	882290fa 	slli	r17,r17,3
1010de9c:	0401ffc4 	movi	r16,2047
1010dea0:	1906b03a 	or	r3,r3,r4
1010dea4:	003e4406 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dea8:	2984b03a 	or	r2,r5,r6
1010deac:	103e4226 	beq	r2,zero,1010d7b8 <__alt_data_end+0xfffed7b8>
1010deb0:	8989c83a 	sub	r4,r17,r6
1010deb4:	8911803a 	cmpltu	r8,r17,r4
1010deb8:	1945c83a 	sub	r2,r3,r5
1010debc:	1205c83a 	sub	r2,r2,r8
1010dec0:	1200202c 	andhi	r8,r2,128
1010dec4:	403e9a26 	beq	r8,zero,1010d930 <__alt_data_end+0xfffed930>
1010dec8:	3463c83a 	sub	r17,r6,r17
1010decc:	28c5c83a 	sub	r2,r5,r3
1010ded0:	344d803a 	cmpltu	r6,r6,r17
1010ded4:	1187c83a 	sub	r3,r2,r6
1010ded8:	3825883a 	mov	r18,r7
1010dedc:	003e3606 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dee0:	0101ffc4 	movi	r4,2047
1010dee4:	493fc71e 	bne	r9,r4,1010de04 <__alt_data_end+0xfffede04>
1010dee8:	2807883a 	mov	r3,r5
1010deec:	3023883a 	mov	r17,r6
1010def0:	4821883a 	mov	r16,r9
1010def4:	003e3006 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010def8:	10003626 	beq	r2,zero,1010dfd4 <__subdf3+0x8a0>
1010defc:	2984b03a 	or	r2,r5,r6
1010df00:	10001726 	beq	r2,zero,1010df60 <__subdf3+0x82c>
1010df04:	1808d0fa 	srli	r4,r3,3
1010df08:	8822d0fa 	srli	r17,r17,3
1010df0c:	1806977a 	slli	r3,r3,29
1010df10:	2080022c 	andhi	r2,r4,8
1010df14:	1c62b03a 	or	r17,r3,r17
1010df18:	10000726 	beq	r2,zero,1010df38 <__subdf3+0x804>
1010df1c:	2812d0fa 	srli	r9,r5,3
1010df20:	4880022c 	andhi	r2,r9,8
1010df24:	1000041e 	bne	r2,zero,1010df38 <__subdf3+0x804>
1010df28:	300cd0fa 	srli	r6,r6,3
1010df2c:	2804977a 	slli	r2,r5,29
1010df30:	4809883a 	mov	r4,r9
1010df34:	11a2b03a 	or	r17,r2,r6
1010df38:	8806d77a 	srli	r3,r17,29
1010df3c:	200890fa 	slli	r4,r4,3
1010df40:	882290fa 	slli	r17,r17,3
1010df44:	3825883a 	mov	r18,r7
1010df48:	1906b03a 	or	r3,r3,r4
1010df4c:	0401ffc4 	movi	r16,2047
1010df50:	003e1906 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010df54:	000b883a 	mov	r5,zero
1010df58:	0005883a 	mov	r2,zero
1010df5c:	003e2e06 	br	1010d818 <__alt_data_end+0xfffed818>
1010df60:	0401ffc4 	movi	r16,2047
1010df64:	003e1406 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010df68:	0005883a 	mov	r2,zero
1010df6c:	003f7506 	br	1010dd44 <__alt_data_end+0xfffedd44>
1010df70:	0005883a 	mov	r2,zero
1010df74:	0009883a 	mov	r4,zero
1010df78:	003e7806 	br	1010d95c <__alt_data_end+0xfffed95c>
1010df7c:	123ff804 	addi	r8,r2,-32
1010df80:	01000804 	movi	r4,32
1010df84:	1a10d83a 	srl	r8,r3,r8
1010df88:	11002526 	beq	r2,r4,1010e020 <__subdf3+0x8ec>
1010df8c:	01001004 	movi	r4,64
1010df90:	2085c83a 	sub	r2,r4,r2
1010df94:	1884983a 	sll	r2,r3,r2
1010df98:	1444b03a 	or	r2,r2,r17
1010df9c:	1004c03a 	cmpne	r2,r2,zero
1010dfa0:	40a2b03a 	or	r17,r8,r2
1010dfa4:	0005883a 	mov	r2,zero
1010dfa8:	003f1606 	br	1010dc04 <__alt_data_end+0xfffedc04>
1010dfac:	02000434 	movhi	r8,16
1010dfb0:	0009883a 	mov	r4,zero
1010dfb4:	423fffc4 	addi	r8,r8,-1
1010dfb8:	00bfffc4 	movi	r2,-1
1010dfbc:	0401ffc4 	movi	r16,2047
1010dfc0:	003e6606 	br	1010d95c <__alt_data_end+0xfffed95c>
1010dfc4:	1c62b03a 	or	r17,r3,r17
1010dfc8:	8822c03a 	cmpne	r17,r17,zero
1010dfcc:	0005883a 	mov	r2,zero
1010dfd0:	003f9906 	br	1010de38 <__alt_data_end+0xfffede38>
1010dfd4:	2807883a 	mov	r3,r5
1010dfd8:	3023883a 	mov	r17,r6
1010dfdc:	0401ffc4 	movi	r16,2047
1010dfe0:	003df506 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dfe4:	2807883a 	mov	r3,r5
1010dfe8:	3023883a 	mov	r17,r6
1010dfec:	003df206 	br	1010d7b8 <__alt_data_end+0xfffed7b8>
1010dff0:	123ff804 	addi	r8,r2,-32
1010dff4:	01000804 	movi	r4,32
1010dff8:	1a10d83a 	srl	r8,r3,r8
1010dffc:	11000a26 	beq	r2,r4,1010e028 <__subdf3+0x8f4>
1010e000:	01001004 	movi	r4,64
1010e004:	2085c83a 	sub	r2,r4,r2
1010e008:	1884983a 	sll	r2,r3,r2
1010e00c:	1444b03a 	or	r2,r2,r17
1010e010:	1004c03a 	cmpne	r2,r2,zero
1010e014:	40a2b03a 	or	r17,r8,r2
1010e018:	0005883a 	mov	r2,zero
1010e01c:	003f8606 	br	1010de38 <__alt_data_end+0xfffede38>
1010e020:	0005883a 	mov	r2,zero
1010e024:	003fdc06 	br	1010df98 <__alt_data_end+0xfffedf98>
1010e028:	0005883a 	mov	r2,zero
1010e02c:	003ff706 	br	1010e00c <__alt_data_end+0xfffee00c>

1010e030 <__fixdfsi>:
1010e030:	280cd53a 	srli	r6,r5,20
1010e034:	00c00434 	movhi	r3,16
1010e038:	18ffffc4 	addi	r3,r3,-1
1010e03c:	3181ffcc 	andi	r6,r6,2047
1010e040:	01c0ff84 	movi	r7,1022
1010e044:	28c6703a 	and	r3,r5,r3
1010e048:	280ad7fa 	srli	r5,r5,31
1010e04c:	3980120e 	bge	r7,r6,1010e098 <__fixdfsi+0x68>
1010e050:	00810744 	movi	r2,1053
1010e054:	11800c16 	blt	r2,r6,1010e088 <__fixdfsi+0x58>
1010e058:	00810cc4 	movi	r2,1075
1010e05c:	1185c83a 	sub	r2,r2,r6
1010e060:	01c007c4 	movi	r7,31
1010e064:	18c00434 	orhi	r3,r3,16
1010e068:	38800d16 	blt	r7,r2,1010e0a0 <__fixdfsi+0x70>
1010e06c:	31befb44 	addi	r6,r6,-1043
1010e070:	2084d83a 	srl	r2,r4,r2
1010e074:	1986983a 	sll	r3,r3,r6
1010e078:	1884b03a 	or	r2,r3,r2
1010e07c:	28000726 	beq	r5,zero,1010e09c <__fixdfsi+0x6c>
1010e080:	0085c83a 	sub	r2,zero,r2
1010e084:	f800283a 	ret
1010e088:	00a00034 	movhi	r2,32768
1010e08c:	10bfffc4 	addi	r2,r2,-1
1010e090:	2885883a 	add	r2,r5,r2
1010e094:	f800283a 	ret
1010e098:	0005883a 	mov	r2,zero
1010e09c:	f800283a 	ret
1010e0a0:	008104c4 	movi	r2,1043
1010e0a4:	1185c83a 	sub	r2,r2,r6
1010e0a8:	1884d83a 	srl	r2,r3,r2
1010e0ac:	003ff306 	br	1010e07c <__alt_data_end+0xfffee07c>

1010e0b0 <__floatsidf>:
1010e0b0:	defffd04 	addi	sp,sp,-12
1010e0b4:	dfc00215 	stw	ra,8(sp)
1010e0b8:	dc400115 	stw	r17,4(sp)
1010e0bc:	dc000015 	stw	r16,0(sp)
1010e0c0:	20002b26 	beq	r4,zero,1010e170 <__floatsidf+0xc0>
1010e0c4:	2023883a 	mov	r17,r4
1010e0c8:	2020d7fa 	srli	r16,r4,31
1010e0cc:	20002d16 	blt	r4,zero,1010e184 <__floatsidf+0xd4>
1010e0d0:	8809883a 	mov	r4,r17
1010e0d4:	010e2340 	call	1010e234 <__clzsi2>
1010e0d8:	01410784 	movi	r5,1054
1010e0dc:	288bc83a 	sub	r5,r5,r2
1010e0e0:	01010cc4 	movi	r4,1075
1010e0e4:	2149c83a 	sub	r4,r4,r5
1010e0e8:	00c007c4 	movi	r3,31
1010e0ec:	1900160e 	bge	r3,r4,1010e148 <__floatsidf+0x98>
1010e0f0:	00c104c4 	movi	r3,1043
1010e0f4:	1947c83a 	sub	r3,r3,r5
1010e0f8:	88c6983a 	sll	r3,r17,r3
1010e0fc:	00800434 	movhi	r2,16
1010e100:	10bfffc4 	addi	r2,r2,-1
1010e104:	1886703a 	and	r3,r3,r2
1010e108:	2941ffcc 	andi	r5,r5,2047
1010e10c:	800d883a 	mov	r6,r16
1010e110:	0005883a 	mov	r2,zero
1010e114:	280a953a 	slli	r5,r5,20
1010e118:	31803fcc 	andi	r6,r6,255
1010e11c:	01000434 	movhi	r4,16
1010e120:	300c97fa 	slli	r6,r6,31
1010e124:	213fffc4 	addi	r4,r4,-1
1010e128:	1906703a 	and	r3,r3,r4
1010e12c:	1946b03a 	or	r3,r3,r5
1010e130:	1986b03a 	or	r3,r3,r6
1010e134:	dfc00217 	ldw	ra,8(sp)
1010e138:	dc400117 	ldw	r17,4(sp)
1010e13c:	dc000017 	ldw	r16,0(sp)
1010e140:	dec00304 	addi	sp,sp,12
1010e144:	f800283a 	ret
1010e148:	00c002c4 	movi	r3,11
1010e14c:	1887c83a 	sub	r3,r3,r2
1010e150:	88c6d83a 	srl	r3,r17,r3
1010e154:	8904983a 	sll	r2,r17,r4
1010e158:	01000434 	movhi	r4,16
1010e15c:	213fffc4 	addi	r4,r4,-1
1010e160:	2941ffcc 	andi	r5,r5,2047
1010e164:	1906703a 	and	r3,r3,r4
1010e168:	800d883a 	mov	r6,r16
1010e16c:	003fe906 	br	1010e114 <__alt_data_end+0xfffee114>
1010e170:	000d883a 	mov	r6,zero
1010e174:	000b883a 	mov	r5,zero
1010e178:	0007883a 	mov	r3,zero
1010e17c:	0005883a 	mov	r2,zero
1010e180:	003fe406 	br	1010e114 <__alt_data_end+0xfffee114>
1010e184:	0123c83a 	sub	r17,zero,r4
1010e188:	003fd106 	br	1010e0d0 <__alt_data_end+0xfffee0d0>

1010e18c <__floatunsidf>:
1010e18c:	defffe04 	addi	sp,sp,-8
1010e190:	dc000015 	stw	r16,0(sp)
1010e194:	dfc00115 	stw	ra,4(sp)
1010e198:	2021883a 	mov	r16,r4
1010e19c:	20002226 	beq	r4,zero,1010e228 <__floatunsidf+0x9c>
1010e1a0:	010e2340 	call	1010e234 <__clzsi2>
1010e1a4:	01010784 	movi	r4,1054
1010e1a8:	2089c83a 	sub	r4,r4,r2
1010e1ac:	01810cc4 	movi	r6,1075
1010e1b0:	310dc83a 	sub	r6,r6,r4
1010e1b4:	00c007c4 	movi	r3,31
1010e1b8:	1980120e 	bge	r3,r6,1010e204 <__floatunsidf+0x78>
1010e1bc:	00c104c4 	movi	r3,1043
1010e1c0:	1907c83a 	sub	r3,r3,r4
1010e1c4:	80ca983a 	sll	r5,r16,r3
1010e1c8:	00800434 	movhi	r2,16
1010e1cc:	10bfffc4 	addi	r2,r2,-1
1010e1d0:	2101ffcc 	andi	r4,r4,2047
1010e1d4:	0021883a 	mov	r16,zero
1010e1d8:	288a703a 	and	r5,r5,r2
1010e1dc:	2008953a 	slli	r4,r4,20
1010e1e0:	00c00434 	movhi	r3,16
1010e1e4:	18ffffc4 	addi	r3,r3,-1
1010e1e8:	28c6703a 	and	r3,r5,r3
1010e1ec:	8005883a 	mov	r2,r16
1010e1f0:	1906b03a 	or	r3,r3,r4
1010e1f4:	dfc00117 	ldw	ra,4(sp)
1010e1f8:	dc000017 	ldw	r16,0(sp)
1010e1fc:	dec00204 	addi	sp,sp,8
1010e200:	f800283a 	ret
1010e204:	00c002c4 	movi	r3,11
1010e208:	188bc83a 	sub	r5,r3,r2
1010e20c:	814ad83a 	srl	r5,r16,r5
1010e210:	00c00434 	movhi	r3,16
1010e214:	18ffffc4 	addi	r3,r3,-1
1010e218:	81a0983a 	sll	r16,r16,r6
1010e21c:	2101ffcc 	andi	r4,r4,2047
1010e220:	28ca703a 	and	r5,r5,r3
1010e224:	003fed06 	br	1010e1dc <__alt_data_end+0xfffee1dc>
1010e228:	0009883a 	mov	r4,zero
1010e22c:	000b883a 	mov	r5,zero
1010e230:	003fea06 	br	1010e1dc <__alt_data_end+0xfffee1dc>

1010e234 <__clzsi2>:
1010e234:	00bfffd4 	movui	r2,65535
1010e238:	11000536 	bltu	r2,r4,1010e250 <__clzsi2+0x1c>
1010e23c:	00803fc4 	movi	r2,255
1010e240:	11000f36 	bltu	r2,r4,1010e280 <__clzsi2+0x4c>
1010e244:	00800804 	movi	r2,32
1010e248:	0007883a 	mov	r3,zero
1010e24c:	00000506 	br	1010e264 <__clzsi2+0x30>
1010e250:	00804034 	movhi	r2,256
1010e254:	10bfffc4 	addi	r2,r2,-1
1010e258:	11000c2e 	bgeu	r2,r4,1010e28c <__clzsi2+0x58>
1010e25c:	00800204 	movi	r2,8
1010e260:	00c00604 	movi	r3,24
1010e264:	20c8d83a 	srl	r4,r4,r3
1010e268:	00c40474 	movhi	r3,4113
1010e26c:	18c49c04 	addi	r3,r3,4720
1010e270:	1909883a 	add	r4,r3,r4
1010e274:	20c00003 	ldbu	r3,0(r4)
1010e278:	10c5c83a 	sub	r2,r2,r3
1010e27c:	f800283a 	ret
1010e280:	00800604 	movi	r2,24
1010e284:	00c00204 	movi	r3,8
1010e288:	003ff606 	br	1010e264 <__alt_data_end+0xfffee264>
1010e28c:	00800404 	movi	r2,16
1010e290:	1007883a 	mov	r3,r2
1010e294:	003ff306 	br	1010e264 <__alt_data_end+0xfffee264>

1010e298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e298:	defffe04 	addi	sp,sp,-8
1010e29c:	dfc00115 	stw	ra,4(sp)
1010e2a0:	df000015 	stw	fp,0(sp)
1010e2a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e2a8:	d0a00d17 	ldw	r2,-32716(gp)
1010e2ac:	10000326 	beq	r2,zero,1010e2bc <alt_get_errno+0x24>
1010e2b0:	d0a00d17 	ldw	r2,-32716(gp)
1010e2b4:	103ee83a 	callr	r2
1010e2b8:	00000106 	br	1010e2c0 <alt_get_errno+0x28>
1010e2bc:	d0a6fd04 	addi	r2,gp,-25612
}
1010e2c0:	e037883a 	mov	sp,fp
1010e2c4:	dfc00117 	ldw	ra,4(sp)
1010e2c8:	df000017 	ldw	fp,0(sp)
1010e2cc:	dec00204 	addi	sp,sp,8
1010e2d0:	f800283a 	ret

1010e2d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010e2d4:	defffb04 	addi	sp,sp,-20
1010e2d8:	dfc00415 	stw	ra,16(sp)
1010e2dc:	df000315 	stw	fp,12(sp)
1010e2e0:	df000304 	addi	fp,sp,12
1010e2e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010e2e8:	e0bfff17 	ldw	r2,-4(fp)
1010e2ec:	10000616 	blt	r2,zero,1010e308 <close+0x34>
1010e2f0:	e0bfff17 	ldw	r2,-4(fp)
1010e2f4:	10c00324 	muli	r3,r2,12
1010e2f8:	00840474 	movhi	r2,4113
1010e2fc:	10871f04 	addi	r2,r2,7292
1010e300:	1885883a 	add	r2,r3,r2
1010e304:	00000106 	br	1010e30c <close+0x38>
1010e308:	0005883a 	mov	r2,zero
1010e30c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010e310:	e0bffd17 	ldw	r2,-12(fp)
1010e314:	10001926 	beq	r2,zero,1010e37c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010e318:	e0bffd17 	ldw	r2,-12(fp)
1010e31c:	10800017 	ldw	r2,0(r2)
1010e320:	10800417 	ldw	r2,16(r2)
1010e324:	10000626 	beq	r2,zero,1010e340 <close+0x6c>
1010e328:	e0bffd17 	ldw	r2,-12(fp)
1010e32c:	10800017 	ldw	r2,0(r2)
1010e330:	10800417 	ldw	r2,16(r2)
1010e334:	e13ffd17 	ldw	r4,-12(fp)
1010e338:	103ee83a 	callr	r2
1010e33c:	00000106 	br	1010e344 <close+0x70>
1010e340:	0005883a 	mov	r2,zero
1010e344:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010e348:	e13fff17 	ldw	r4,-4(fp)
1010e34c:	010eda80 	call	1010eda8 <alt_release_fd>
    if (rval < 0)
1010e350:	e0bffe17 	ldw	r2,-8(fp)
1010e354:	1000070e 	bge	r2,zero,1010e374 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010e358:	010e2980 	call	1010e298 <alt_get_errno>
1010e35c:	1007883a 	mov	r3,r2
1010e360:	e0bffe17 	ldw	r2,-8(fp)
1010e364:	0085c83a 	sub	r2,zero,r2
1010e368:	18800015 	stw	r2,0(r3)
      return -1;
1010e36c:	00bfffc4 	movi	r2,-1
1010e370:	00000706 	br	1010e390 <close+0xbc>
    }
    return 0;
1010e374:	0005883a 	mov	r2,zero
1010e378:	00000506 	br	1010e390 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e37c:	010e2980 	call	1010e298 <alt_get_errno>
1010e380:	1007883a 	mov	r3,r2
1010e384:	00801444 	movi	r2,81
1010e388:	18800015 	stw	r2,0(r3)
    return -1;
1010e38c:	00bfffc4 	movi	r2,-1
  }
}
1010e390:	e037883a 	mov	sp,fp
1010e394:	dfc00117 	ldw	ra,4(sp)
1010e398:	df000017 	ldw	fp,0(sp)
1010e39c:	dec00204 	addi	sp,sp,8
1010e3a0:	f800283a 	ret

1010e3a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e3a4:	defffc04 	addi	sp,sp,-16
1010e3a8:	df000315 	stw	fp,12(sp)
1010e3ac:	df000304 	addi	fp,sp,12
1010e3b0:	e13ffd15 	stw	r4,-12(fp)
1010e3b4:	e17ffe15 	stw	r5,-8(fp)
1010e3b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e3bc:	e0bfff17 	ldw	r2,-4(fp)
}
1010e3c0:	e037883a 	mov	sp,fp
1010e3c4:	df000017 	ldw	fp,0(sp)
1010e3c8:	dec00104 	addi	sp,sp,4
1010e3cc:	f800283a 	ret

1010e3d0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1010e3d0:	defffd04 	addi	sp,sp,-12
1010e3d4:	df000215 	stw	fp,8(sp)
1010e3d8:	df000204 	addi	fp,sp,8
1010e3dc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1010e3e0:	0001883a 	nop
1010e3e4:	e0bfff17 	ldw	r2,-4(fp)
1010e3e8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1010e3ec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1010e3f0:	10000226 	beq	r2,zero,1010e3fc <_exit+0x2c>
    ALT_SIM_FAIL();
1010e3f4:	002af070 	cmpltui	zero,zero,43969
1010e3f8:	00000106 	br	1010e400 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1010e3fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1010e400:	003fff06 	br	1010e400 <__alt_data_end+0xfffee400>

1010e404 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e404:	defffe04 	addi	sp,sp,-8
1010e408:	dfc00115 	stw	ra,4(sp)
1010e40c:	df000015 	stw	fp,0(sp)
1010e410:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e414:	d0a00d17 	ldw	r2,-32716(gp)
1010e418:	10000326 	beq	r2,zero,1010e428 <alt_get_errno+0x24>
1010e41c:	d0a00d17 	ldw	r2,-32716(gp)
1010e420:	103ee83a 	callr	r2
1010e424:	00000106 	br	1010e42c <alt_get_errno+0x28>
1010e428:	d0a6fd04 	addi	r2,gp,-25612
}
1010e42c:	e037883a 	mov	sp,fp
1010e430:	dfc00117 	ldw	ra,4(sp)
1010e434:	df000017 	ldw	fp,0(sp)
1010e438:	dec00204 	addi	sp,sp,8
1010e43c:	f800283a 	ret

1010e440 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e440:	defffb04 	addi	sp,sp,-20
1010e444:	dfc00415 	stw	ra,16(sp)
1010e448:	df000315 	stw	fp,12(sp)
1010e44c:	df000304 	addi	fp,sp,12
1010e450:	e13ffe15 	stw	r4,-8(fp)
1010e454:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e458:	e0bffe17 	ldw	r2,-8(fp)
1010e45c:	10000616 	blt	r2,zero,1010e478 <fstat+0x38>
1010e460:	e0bffe17 	ldw	r2,-8(fp)
1010e464:	10c00324 	muli	r3,r2,12
1010e468:	00840474 	movhi	r2,4113
1010e46c:	10871f04 	addi	r2,r2,7292
1010e470:	1885883a 	add	r2,r3,r2
1010e474:	00000106 	br	1010e47c <fstat+0x3c>
1010e478:	0005883a 	mov	r2,zero
1010e47c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e480:	e0bffd17 	ldw	r2,-12(fp)
1010e484:	10001026 	beq	r2,zero,1010e4c8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e488:	e0bffd17 	ldw	r2,-12(fp)
1010e48c:	10800017 	ldw	r2,0(r2)
1010e490:	10800817 	ldw	r2,32(r2)
1010e494:	10000726 	beq	r2,zero,1010e4b4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e498:	e0bffd17 	ldw	r2,-12(fp)
1010e49c:	10800017 	ldw	r2,0(r2)
1010e4a0:	10800817 	ldw	r2,32(r2)
1010e4a4:	e17fff17 	ldw	r5,-4(fp)
1010e4a8:	e13ffd17 	ldw	r4,-12(fp)
1010e4ac:	103ee83a 	callr	r2
1010e4b0:	00000a06 	br	1010e4dc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e4b4:	e0bfff17 	ldw	r2,-4(fp)
1010e4b8:	00c80004 	movi	r3,8192
1010e4bc:	10c00115 	stw	r3,4(r2)
      return 0;
1010e4c0:	0005883a 	mov	r2,zero
1010e4c4:	00000506 	br	1010e4dc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e4c8:	010e4040 	call	1010e404 <alt_get_errno>
1010e4cc:	1007883a 	mov	r3,r2
1010e4d0:	00801444 	movi	r2,81
1010e4d4:	18800015 	stw	r2,0(r3)
    return -1;
1010e4d8:	00bfffc4 	movi	r2,-1
  }
}
1010e4dc:	e037883a 	mov	sp,fp
1010e4e0:	dfc00117 	ldw	ra,4(sp)
1010e4e4:	df000017 	ldw	fp,0(sp)
1010e4e8:	dec00204 	addi	sp,sp,8
1010e4ec:	f800283a 	ret

1010e4f0 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1010e4f0:	deffff04 	addi	sp,sp,-4
1010e4f4:	df000015 	stw	fp,0(sp)
1010e4f8:	d839883a 	mov	fp,sp
  return 0;
1010e4fc:	0005883a 	mov	r2,zero
}
1010e500:	e037883a 	mov	sp,fp
1010e504:	df000017 	ldw	fp,0(sp)
1010e508:	dec00104 	addi	sp,sp,4
1010e50c:	f800283a 	ret

1010e510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e510:	defffe04 	addi	sp,sp,-8
1010e514:	dfc00115 	stw	ra,4(sp)
1010e518:	df000015 	stw	fp,0(sp)
1010e51c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e520:	d0a00d17 	ldw	r2,-32716(gp)
1010e524:	10000326 	beq	r2,zero,1010e534 <alt_get_errno+0x24>
1010e528:	d0a00d17 	ldw	r2,-32716(gp)
1010e52c:	103ee83a 	callr	r2
1010e530:	00000106 	br	1010e538 <alt_get_errno+0x28>
1010e534:	d0a6fd04 	addi	r2,gp,-25612
}
1010e538:	e037883a 	mov	sp,fp
1010e53c:	dfc00117 	ldw	ra,4(sp)
1010e540:	df000017 	ldw	fp,0(sp)
1010e544:	dec00204 	addi	sp,sp,8
1010e548:	f800283a 	ret

1010e54c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010e54c:	deffed04 	addi	sp,sp,-76
1010e550:	dfc01215 	stw	ra,72(sp)
1010e554:	df001115 	stw	fp,68(sp)
1010e558:	df001104 	addi	fp,sp,68
1010e55c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e560:	e0bfff17 	ldw	r2,-4(fp)
1010e564:	10000616 	blt	r2,zero,1010e580 <isatty+0x34>
1010e568:	e0bfff17 	ldw	r2,-4(fp)
1010e56c:	10c00324 	muli	r3,r2,12
1010e570:	00840474 	movhi	r2,4113
1010e574:	10871f04 	addi	r2,r2,7292
1010e578:	1885883a 	add	r2,r3,r2
1010e57c:	00000106 	br	1010e584 <isatty+0x38>
1010e580:	0005883a 	mov	r2,zero
1010e584:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010e588:	e0bfef17 	ldw	r2,-68(fp)
1010e58c:	10000e26 	beq	r2,zero,1010e5c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010e590:	e0bfef17 	ldw	r2,-68(fp)
1010e594:	10800017 	ldw	r2,0(r2)
1010e598:	10800817 	ldw	r2,32(r2)
1010e59c:	1000021e 	bne	r2,zero,1010e5a8 <isatty+0x5c>
    {
      return 1;
1010e5a0:	00800044 	movi	r2,1
1010e5a4:	00000d06 	br	1010e5dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010e5a8:	e0bff004 	addi	r2,fp,-64
1010e5ac:	100b883a 	mov	r5,r2
1010e5b0:	e13fff17 	ldw	r4,-4(fp)
1010e5b4:	010e4400 	call	1010e440 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010e5b8:	e0bff117 	ldw	r2,-60(fp)
1010e5bc:	10880020 	cmpeqi	r2,r2,8192
1010e5c0:	10803fcc 	andi	r2,r2,255
1010e5c4:	00000506 	br	1010e5dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e5c8:	010e5100 	call	1010e510 <alt_get_errno>
1010e5cc:	1007883a 	mov	r3,r2
1010e5d0:	00801444 	movi	r2,81
1010e5d4:	18800015 	stw	r2,0(r3)
    return 0;
1010e5d8:	0005883a 	mov	r2,zero
  }
}
1010e5dc:	e037883a 	mov	sp,fp
1010e5e0:	dfc00117 	ldw	ra,4(sp)
1010e5e4:	df000017 	ldw	fp,0(sp)
1010e5e8:	dec00204 	addi	sp,sp,8
1010e5ec:	f800283a 	ret

1010e5f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e5f0:	defffe04 	addi	sp,sp,-8
1010e5f4:	dfc00115 	stw	ra,4(sp)
1010e5f8:	df000015 	stw	fp,0(sp)
1010e5fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e600:	d0a00d17 	ldw	r2,-32716(gp)
1010e604:	10000326 	beq	r2,zero,1010e614 <alt_get_errno+0x24>
1010e608:	d0a00d17 	ldw	r2,-32716(gp)
1010e60c:	103ee83a 	callr	r2
1010e610:	00000106 	br	1010e618 <alt_get_errno+0x28>
1010e614:	d0a6fd04 	addi	r2,gp,-25612
}
1010e618:	e037883a 	mov	sp,fp
1010e61c:	dfc00117 	ldw	ra,4(sp)
1010e620:	df000017 	ldw	fp,0(sp)
1010e624:	dec00204 	addi	sp,sp,8
1010e628:	f800283a 	ret

1010e62c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1010e62c:	defffb04 	addi	sp,sp,-20
1010e630:	dfc00415 	stw	ra,16(sp)
1010e634:	df000315 	stw	fp,12(sp)
1010e638:	df000304 	addi	fp,sp,12
1010e63c:	e13ffe15 	stw	r4,-8(fp)
1010e640:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
1010e644:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
1010e648:	e0bffe17 	ldw	r2,-8(fp)
1010e64c:	00802f16 	blt	zero,r2,1010e70c <kill+0xe0>
  {
    switch (sig)
1010e650:	e0bfff17 	ldw	r2,-4(fp)
1010e654:	10800828 	cmpgeui	r2,r2,32
1010e658:	1000291e 	bne	r2,zero,1010e700 <kill+0xd4>
1010e65c:	e0bfff17 	ldw	r2,-4(fp)
1010e660:	100690ba 	slli	r3,r2,2
1010e664:	00840474 	movhi	r2,4113
1010e668:	10b99e04 	addi	r2,r2,-6536
1010e66c:	1885883a 	add	r2,r3,r2
1010e670:	10800017 	ldw	r2,0(r2)
1010e674:	1000683a 	jmp	r2
1010e678:	1010e720 	cmpeqi	zero,r2,17308
1010e67c:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e680:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e684:	1010e6f8 	rdprs	zero,r2,17307
1010e688:	1010e6f8 	rdprs	zero,r2,17307
1010e68c:	1010e6f8 	rdprs	zero,r2,17307
1010e690:	1010e6f8 	rdprs	zero,r2,17307
1010e694:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e698:	1010e6f8 	rdprs	zero,r2,17307
1010e69c:	1010e6f8 	rdprs	zero,r2,17307
1010e6a0:	1010e6f8 	rdprs	zero,r2,17307
1010e6a4:	1010e6f8 	rdprs	zero,r2,17307
1010e6a8:	1010e6f8 	rdprs	zero,r2,17307
1010e6ac:	1010e6f8 	rdprs	zero,r2,17307
1010e6b0:	1010e6f8 	rdprs	zero,r2,17307
1010e6b4:	1010e6f8 	rdprs	zero,r2,17307
1010e6b8:	1010e720 	cmpeqi	zero,r2,17308
1010e6bc:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6c0:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6c4:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6c8:	1010e720 	cmpeqi	zero,r2,17308
1010e6cc:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6d0:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6d4:	1010e6f8 	rdprs	zero,r2,17307
1010e6d8:	1010e6f8 	rdprs	zero,r2,17307
1010e6dc:	1010e6f8 	rdprs	zero,r2,17307
1010e6e0:	1010e6f8 	rdprs	zero,r2,17307
1010e6e4:	1010e6f8 	rdprs	zero,r2,17307
1010e6e8:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6ec:	1010e700 	call	11010e70 <__alt_data_end+0xef0e70>
1010e6f0:	1010e6f8 	rdprs	zero,r2,17307
1010e6f4:	1010e6f8 	rdprs	zero,r2,17307
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1010e6f8:	0009883a 	mov	r4,zero
1010e6fc:	010e3d00 	call	1010e3d0 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1010e700:	00800584 	movi	r2,22
1010e704:	e0bffd15 	stw	r2,-12(fp)
1010e708:	00000606 	br	1010e724 <kill+0xf8>
    }
  }

  else if (pid > 0)
1010e70c:	e0bffe17 	ldw	r2,-8(fp)
1010e710:	0080040e 	bge	zero,r2,1010e724 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1010e714:	008000c4 	movi	r2,3
1010e718:	e0bffd15 	stw	r2,-12(fp)
1010e71c:	00000106 	br	1010e724 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
1010e720:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
1010e724:	e0bffd17 	ldw	r2,-12(fp)
1010e728:	10000626 	beq	r2,zero,1010e744 <kill+0x118>
  {
    ALT_ERRNO = status;
1010e72c:	010e5f00 	call	1010e5f0 <alt_get_errno>
1010e730:	1007883a 	mov	r3,r2
1010e734:	e0bffd17 	ldw	r2,-12(fp)
1010e738:	18800015 	stw	r2,0(r3)
    return -1;
1010e73c:	00bfffc4 	movi	r2,-1
1010e740:	00000106 	br	1010e748 <kill+0x11c>
  }

  return 0;
1010e744:	0005883a 	mov	r2,zero
}
1010e748:	e037883a 	mov	sp,fp
1010e74c:	dfc00117 	ldw	ra,4(sp)
1010e750:	df000017 	ldw	fp,0(sp)
1010e754:	dec00204 	addi	sp,sp,8
1010e758:	f800283a 	ret

1010e75c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010e75c:	defffc04 	addi	sp,sp,-16
1010e760:	df000315 	stw	fp,12(sp)
1010e764:	df000304 	addi	fp,sp,12
1010e768:	e13ffd15 	stw	r4,-12(fp)
1010e76c:	e17ffe15 	stw	r5,-8(fp)
1010e770:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010e774:	e0fffe17 	ldw	r3,-8(fp)
1010e778:	e0bffd17 	ldw	r2,-12(fp)
1010e77c:	18800c26 	beq	r3,r2,1010e7b0 <alt_load_section+0x54>
  {
    while( to != end )
1010e780:	00000806 	br	1010e7a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010e784:	e0bffe17 	ldw	r2,-8(fp)
1010e788:	10c00104 	addi	r3,r2,4
1010e78c:	e0fffe15 	stw	r3,-8(fp)
1010e790:	e0fffd17 	ldw	r3,-12(fp)
1010e794:	19000104 	addi	r4,r3,4
1010e798:	e13ffd15 	stw	r4,-12(fp)
1010e79c:	18c00017 	ldw	r3,0(r3)
1010e7a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010e7a4:	e0fffe17 	ldw	r3,-8(fp)
1010e7a8:	e0bfff17 	ldw	r2,-4(fp)
1010e7ac:	18bff51e 	bne	r3,r2,1010e784 <__alt_data_end+0xfffee784>
    {
      *to++ = *from++;
    }
  }
}
1010e7b0:	0001883a 	nop
1010e7b4:	e037883a 	mov	sp,fp
1010e7b8:	df000017 	ldw	fp,0(sp)
1010e7bc:	dec00104 	addi	sp,sp,4
1010e7c0:	f800283a 	ret

1010e7c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010e7c4:	defffe04 	addi	sp,sp,-8
1010e7c8:	dfc00115 	stw	ra,4(sp)
1010e7cc:	df000015 	stw	fp,0(sp)
1010e7d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010e7d4:	01840474 	movhi	r6,4113
1010e7d8:	318bc504 	addi	r6,r6,12052
1010e7dc:	01440474 	movhi	r5,4113
1010e7e0:	2944ec04 	addi	r5,r5,5040
1010e7e4:	01040474 	movhi	r4,4113
1010e7e8:	210bc504 	addi	r4,r4,12052
1010e7ec:	010e75c0 	call	1010e75c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010e7f0:	01840434 	movhi	r6,4112
1010e7f4:	31809104 	addi	r6,r6,580
1010e7f8:	01440434 	movhi	r5,4112
1010e7fc:	29400804 	addi	r5,r5,32
1010e800:	01040434 	movhi	r4,4112
1010e804:	21000804 	addi	r4,r4,32
1010e808:	010e75c0 	call	1010e75c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010e80c:	01840474 	movhi	r6,4113
1010e810:	3184ec04 	addi	r6,r6,5040
1010e814:	01440474 	movhi	r5,4113
1010e818:	2943f504 	addi	r5,r5,4052
1010e81c:	01040474 	movhi	r4,4113
1010e820:	2103f504 	addi	r4,r4,4052
1010e824:	010e75c0 	call	1010e75c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010e828:	01100c80 	call	101100c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010e82c:	011056c0 	call	1011056c <alt_icache_flush_all>
}
1010e830:	0001883a 	nop
1010e834:	e037883a 	mov	sp,fp
1010e838:	dfc00117 	ldw	ra,4(sp)
1010e83c:	df000017 	ldw	fp,0(sp)
1010e840:	dec00204 	addi	sp,sp,8
1010e844:	f800283a 	ret

1010e848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e848:	defffe04 	addi	sp,sp,-8
1010e84c:	dfc00115 	stw	ra,4(sp)
1010e850:	df000015 	stw	fp,0(sp)
1010e854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e858:	d0a00d17 	ldw	r2,-32716(gp)
1010e85c:	10000326 	beq	r2,zero,1010e86c <alt_get_errno+0x24>
1010e860:	d0a00d17 	ldw	r2,-32716(gp)
1010e864:	103ee83a 	callr	r2
1010e868:	00000106 	br	1010e870 <alt_get_errno+0x28>
1010e86c:	d0a6fd04 	addi	r2,gp,-25612
}
1010e870:	e037883a 	mov	sp,fp
1010e874:	dfc00117 	ldw	ra,4(sp)
1010e878:	df000017 	ldw	fp,0(sp)
1010e87c:	dec00204 	addi	sp,sp,8
1010e880:	f800283a 	ret

1010e884 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010e884:	defff904 	addi	sp,sp,-28
1010e888:	dfc00615 	stw	ra,24(sp)
1010e88c:	df000515 	stw	fp,20(sp)
1010e890:	df000504 	addi	fp,sp,20
1010e894:	e13ffd15 	stw	r4,-12(fp)
1010e898:	e17ffe15 	stw	r5,-8(fp)
1010e89c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010e8a0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e8a4:	e0bffd17 	ldw	r2,-12(fp)
1010e8a8:	10000616 	blt	r2,zero,1010e8c4 <lseek+0x40>
1010e8ac:	e0bffd17 	ldw	r2,-12(fp)
1010e8b0:	10c00324 	muli	r3,r2,12
1010e8b4:	00840474 	movhi	r2,4113
1010e8b8:	10871f04 	addi	r2,r2,7292
1010e8bc:	1885883a 	add	r2,r3,r2
1010e8c0:	00000106 	br	1010e8c8 <lseek+0x44>
1010e8c4:	0005883a 	mov	r2,zero
1010e8c8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010e8cc:	e0bffc17 	ldw	r2,-16(fp)
1010e8d0:	10001026 	beq	r2,zero,1010e914 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010e8d4:	e0bffc17 	ldw	r2,-16(fp)
1010e8d8:	10800017 	ldw	r2,0(r2)
1010e8dc:	10800717 	ldw	r2,28(r2)
1010e8e0:	10000926 	beq	r2,zero,1010e908 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010e8e4:	e0bffc17 	ldw	r2,-16(fp)
1010e8e8:	10800017 	ldw	r2,0(r2)
1010e8ec:	10800717 	ldw	r2,28(r2)
1010e8f0:	e1bfff17 	ldw	r6,-4(fp)
1010e8f4:	e17ffe17 	ldw	r5,-8(fp)
1010e8f8:	e13ffc17 	ldw	r4,-16(fp)
1010e8fc:	103ee83a 	callr	r2
1010e900:	e0bffb15 	stw	r2,-20(fp)
1010e904:	00000506 	br	1010e91c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010e908:	00bfde84 	movi	r2,-134
1010e90c:	e0bffb15 	stw	r2,-20(fp)
1010e910:	00000206 	br	1010e91c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010e914:	00bfebc4 	movi	r2,-81
1010e918:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010e91c:	e0bffb17 	ldw	r2,-20(fp)
1010e920:	1000070e 	bge	r2,zero,1010e940 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010e924:	010e8480 	call	1010e848 <alt_get_errno>
1010e928:	1007883a 	mov	r3,r2
1010e92c:	e0bffb17 	ldw	r2,-20(fp)
1010e930:	0085c83a 	sub	r2,zero,r2
1010e934:	18800015 	stw	r2,0(r3)
    rc = -1;
1010e938:	00bfffc4 	movi	r2,-1
1010e93c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010e940:	e0bffb17 	ldw	r2,-20(fp)
}
1010e944:	e037883a 	mov	sp,fp
1010e948:	dfc00117 	ldw	ra,4(sp)
1010e94c:	df000017 	ldw	fp,0(sp)
1010e950:	dec00204 	addi	sp,sp,8
1010e954:	f800283a 	ret

1010e958 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010e958:	defffd04 	addi	sp,sp,-12
1010e95c:	dfc00215 	stw	ra,8(sp)
1010e960:	df000115 	stw	fp,4(sp)
1010e964:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010e968:	0009883a 	mov	r4,zero
1010e96c:	010f0240 	call	1010f024 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010e970:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010e974:	010f05c0 	call	1010f05c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010e978:	01840474 	movhi	r6,4113
1010e97c:	3184df04 	addi	r6,r6,4988
1010e980:	01440474 	movhi	r5,4113
1010e984:	2944df04 	addi	r5,r5,4988
1010e988:	01040474 	movhi	r4,4113
1010e98c:	2104df04 	addi	r4,r4,4988
1010e990:	01109040 	call	10110904 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010e994:	01101f00 	call	101101f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010e998:	01040474 	movhi	r4,4113
1010e99c:	21009404 	addi	r4,r4,592
1010e9a0:	0110c740 	call	10110c74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010e9a4:	d0a70417 	ldw	r2,-25584(gp)
1010e9a8:	d0e70517 	ldw	r3,-25580(gp)
1010e9ac:	d1270617 	ldw	r4,-25576(gp)
1010e9b0:	200d883a 	mov	r6,r4
1010e9b4:	180b883a 	mov	r5,r3
1010e9b8:	1009883a 	mov	r4,r2
1010e9bc:	0100b440 	call	10100b44 <main>
1010e9c0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010e9c4:	01000044 	movi	r4,1
1010e9c8:	010e2d40 	call	1010e2d4 <close>
  exit (result);
1010e9cc:	e13fff17 	ldw	r4,-4(fp)
1010e9d0:	0110c880 	call	10110c88 <exit>

1010e9d4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010e9d4:	defffe04 	addi	sp,sp,-8
1010e9d8:	df000115 	stw	fp,4(sp)
1010e9dc:	df000104 	addi	fp,sp,4
1010e9e0:	e13fff15 	stw	r4,-4(fp)
}
1010e9e4:	0001883a 	nop
1010e9e8:	e037883a 	mov	sp,fp
1010e9ec:	df000017 	ldw	fp,0(sp)
1010e9f0:	dec00104 	addi	sp,sp,4
1010e9f4:	f800283a 	ret

1010e9f8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010e9f8:	defffe04 	addi	sp,sp,-8
1010e9fc:	df000115 	stw	fp,4(sp)
1010ea00:	df000104 	addi	fp,sp,4
1010ea04:	e13fff15 	stw	r4,-4(fp)
}
1010ea08:	0001883a 	nop
1010ea0c:	e037883a 	mov	sp,fp
1010ea10:	df000017 	ldw	fp,0(sp)
1010ea14:	dec00104 	addi	sp,sp,4
1010ea18:	f800283a 	ret

1010ea1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ea1c:	defffe04 	addi	sp,sp,-8
1010ea20:	dfc00115 	stw	ra,4(sp)
1010ea24:	df000015 	stw	fp,0(sp)
1010ea28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ea2c:	d0a00d17 	ldw	r2,-32716(gp)
1010ea30:	10000326 	beq	r2,zero,1010ea40 <alt_get_errno+0x24>
1010ea34:	d0a00d17 	ldw	r2,-32716(gp)
1010ea38:	103ee83a 	callr	r2
1010ea3c:	00000106 	br	1010ea44 <alt_get_errno+0x28>
1010ea40:	d0a6fd04 	addi	r2,gp,-25612
}
1010ea44:	e037883a 	mov	sp,fp
1010ea48:	dfc00117 	ldw	ra,4(sp)
1010ea4c:	df000017 	ldw	fp,0(sp)
1010ea50:	dec00204 	addi	sp,sp,8
1010ea54:	f800283a 	ret

1010ea58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010ea58:	defffd04 	addi	sp,sp,-12
1010ea5c:	df000215 	stw	fp,8(sp)
1010ea60:	df000204 	addi	fp,sp,8
1010ea64:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010ea68:	e0bfff17 	ldw	r2,-4(fp)
1010ea6c:	10800217 	ldw	r2,8(r2)
1010ea70:	10d00034 	orhi	r3,r2,16384
1010ea74:	e0bfff17 	ldw	r2,-4(fp)
1010ea78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ea7c:	e03ffe15 	stw	zero,-8(fp)
1010ea80:	00001d06 	br	1010eaf8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ea84:	00840474 	movhi	r2,4113
1010ea88:	10871f04 	addi	r2,r2,7292
1010ea8c:	e0fffe17 	ldw	r3,-8(fp)
1010ea90:	18c00324 	muli	r3,r3,12
1010ea94:	10c5883a 	add	r2,r2,r3
1010ea98:	10c00017 	ldw	r3,0(r2)
1010ea9c:	e0bfff17 	ldw	r2,-4(fp)
1010eaa0:	10800017 	ldw	r2,0(r2)
1010eaa4:	1880111e 	bne	r3,r2,1010eaec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010eaa8:	00840474 	movhi	r2,4113
1010eaac:	10871f04 	addi	r2,r2,7292
1010eab0:	e0fffe17 	ldw	r3,-8(fp)
1010eab4:	18c00324 	muli	r3,r3,12
1010eab8:	10c5883a 	add	r2,r2,r3
1010eabc:	10800204 	addi	r2,r2,8
1010eac0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010eac4:	1000090e 	bge	r2,zero,1010eaec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010eac8:	e0bffe17 	ldw	r2,-8(fp)
1010eacc:	10c00324 	muli	r3,r2,12
1010ead0:	00840474 	movhi	r2,4113
1010ead4:	10871f04 	addi	r2,r2,7292
1010ead8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010eadc:	e0bfff17 	ldw	r2,-4(fp)
1010eae0:	18800226 	beq	r3,r2,1010eaec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010eae4:	00bffcc4 	movi	r2,-13
1010eae8:	00000806 	br	1010eb0c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010eaec:	e0bffe17 	ldw	r2,-8(fp)
1010eaf0:	10800044 	addi	r2,r2,1
1010eaf4:	e0bffe15 	stw	r2,-8(fp)
1010eaf8:	d0a00c17 	ldw	r2,-32720(gp)
1010eafc:	1007883a 	mov	r3,r2
1010eb00:	e0bffe17 	ldw	r2,-8(fp)
1010eb04:	18bfdf2e 	bgeu	r3,r2,1010ea84 <__alt_data_end+0xfffeea84>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010eb08:	0005883a 	mov	r2,zero
}
1010eb0c:	e037883a 	mov	sp,fp
1010eb10:	df000017 	ldw	fp,0(sp)
1010eb14:	dec00104 	addi	sp,sp,4
1010eb18:	f800283a 	ret

1010eb1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010eb1c:	defff604 	addi	sp,sp,-40
1010eb20:	dfc00915 	stw	ra,36(sp)
1010eb24:	df000815 	stw	fp,32(sp)
1010eb28:	df000804 	addi	fp,sp,32
1010eb2c:	e13ffd15 	stw	r4,-12(fp)
1010eb30:	e17ffe15 	stw	r5,-8(fp)
1010eb34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010eb38:	00bfffc4 	movi	r2,-1
1010eb3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010eb40:	00bffb44 	movi	r2,-19
1010eb44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010eb48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010eb4c:	d1600a04 	addi	r5,gp,-32728
1010eb50:	e13ffd17 	ldw	r4,-12(fp)
1010eb54:	01102b00 	call	101102b0 <alt_find_dev>
1010eb58:	e0bff815 	stw	r2,-32(fp)
1010eb5c:	e0bff817 	ldw	r2,-32(fp)
1010eb60:	1000051e 	bne	r2,zero,1010eb78 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010eb64:	e13ffd17 	ldw	r4,-12(fp)
1010eb68:	01103400 	call	10110340 <alt_find_file>
1010eb6c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010eb70:	00800044 	movi	r2,1
1010eb74:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010eb78:	e0bff817 	ldw	r2,-32(fp)
1010eb7c:	10002926 	beq	r2,zero,1010ec24 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010eb80:	e13ff817 	ldw	r4,-32(fp)
1010eb84:	01104c80 	call	101104c8 <alt_get_fd>
1010eb88:	e0bff915 	stw	r2,-28(fp)
1010eb8c:	e0bff917 	ldw	r2,-28(fp)
1010eb90:	1000030e 	bge	r2,zero,1010eba0 <open+0x84>
    {
      status = index;
1010eb94:	e0bff917 	ldw	r2,-28(fp)
1010eb98:	e0bffa15 	stw	r2,-24(fp)
1010eb9c:	00002306 	br	1010ec2c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
1010eba0:	e0bff917 	ldw	r2,-28(fp)
1010eba4:	10c00324 	muli	r3,r2,12
1010eba8:	00840474 	movhi	r2,4113
1010ebac:	10871f04 	addi	r2,r2,7292
1010ebb0:	1885883a 	add	r2,r3,r2
1010ebb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010ebb8:	e0fffe17 	ldw	r3,-8(fp)
1010ebbc:	00900034 	movhi	r2,16384
1010ebc0:	10bfffc4 	addi	r2,r2,-1
1010ebc4:	1886703a 	and	r3,r3,r2
1010ebc8:	e0bffc17 	ldw	r2,-16(fp)
1010ebcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010ebd0:	e0bffb17 	ldw	r2,-20(fp)
1010ebd4:	1000051e 	bne	r2,zero,1010ebec <open+0xd0>
1010ebd8:	e13ffc17 	ldw	r4,-16(fp)
1010ebdc:	010ea580 	call	1010ea58 <alt_file_locked>
1010ebe0:	e0bffa15 	stw	r2,-24(fp)
1010ebe4:	e0bffa17 	ldw	r2,-24(fp)
1010ebe8:	10001016 	blt	r2,zero,1010ec2c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010ebec:	e0bff817 	ldw	r2,-32(fp)
1010ebf0:	10800317 	ldw	r2,12(r2)
1010ebf4:	10000826 	beq	r2,zero,1010ec18 <open+0xfc>
1010ebf8:	e0bff817 	ldw	r2,-32(fp)
1010ebfc:	10800317 	ldw	r2,12(r2)
1010ec00:	e1ffff17 	ldw	r7,-4(fp)
1010ec04:	e1bffe17 	ldw	r6,-8(fp)
1010ec08:	e17ffd17 	ldw	r5,-12(fp)
1010ec0c:	e13ffc17 	ldw	r4,-16(fp)
1010ec10:	103ee83a 	callr	r2
1010ec14:	00000106 	br	1010ec1c <open+0x100>
1010ec18:	0005883a 	mov	r2,zero
1010ec1c:	e0bffa15 	stw	r2,-24(fp)
1010ec20:	00000206 	br	1010ec2c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010ec24:	00bffb44 	movi	r2,-19
1010ec28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010ec2c:	e0bffa17 	ldw	r2,-24(fp)
1010ec30:	1000090e 	bge	r2,zero,1010ec58 <open+0x13c>
  {
    alt_release_fd (index);  
1010ec34:	e13ff917 	ldw	r4,-28(fp)
1010ec38:	010eda80 	call	1010eda8 <alt_release_fd>
    ALT_ERRNO = -status;
1010ec3c:	010ea1c0 	call	1010ea1c <alt_get_errno>
1010ec40:	1007883a 	mov	r3,r2
1010ec44:	e0bffa17 	ldw	r2,-24(fp)
1010ec48:	0085c83a 	sub	r2,zero,r2
1010ec4c:	18800015 	stw	r2,0(r3)
    return -1;
1010ec50:	00bfffc4 	movi	r2,-1
1010ec54:	00000106 	br	1010ec5c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
1010ec58:	e0bff917 	ldw	r2,-28(fp)
}
1010ec5c:	e037883a 	mov	sp,fp
1010ec60:	dfc00117 	ldw	ra,4(sp)
1010ec64:	df000017 	ldw	fp,0(sp)
1010ec68:	dec00204 	addi	sp,sp,8
1010ec6c:	f800283a 	ret

1010ec70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ec70:	defffe04 	addi	sp,sp,-8
1010ec74:	dfc00115 	stw	ra,4(sp)
1010ec78:	df000015 	stw	fp,0(sp)
1010ec7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ec80:	d0a00d17 	ldw	r2,-32716(gp)
1010ec84:	10000326 	beq	r2,zero,1010ec94 <alt_get_errno+0x24>
1010ec88:	d0a00d17 	ldw	r2,-32716(gp)
1010ec8c:	103ee83a 	callr	r2
1010ec90:	00000106 	br	1010ec98 <alt_get_errno+0x28>
1010ec94:	d0a6fd04 	addi	r2,gp,-25612
}
1010ec98:	e037883a 	mov	sp,fp
1010ec9c:	dfc00117 	ldw	ra,4(sp)
1010eca0:	df000017 	ldw	fp,0(sp)
1010eca4:	dec00204 	addi	sp,sp,8
1010eca8:	f800283a 	ret

1010ecac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010ecac:	defff904 	addi	sp,sp,-28
1010ecb0:	dfc00615 	stw	ra,24(sp)
1010ecb4:	df000515 	stw	fp,20(sp)
1010ecb8:	df000504 	addi	fp,sp,20
1010ecbc:	e13ffd15 	stw	r4,-12(fp)
1010ecc0:	e17ffe15 	stw	r5,-8(fp)
1010ecc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ecc8:	e0bffd17 	ldw	r2,-12(fp)
1010eccc:	10000616 	blt	r2,zero,1010ece8 <read+0x3c>
1010ecd0:	e0bffd17 	ldw	r2,-12(fp)
1010ecd4:	10c00324 	muli	r3,r2,12
1010ecd8:	00840474 	movhi	r2,4113
1010ecdc:	10871f04 	addi	r2,r2,7292
1010ece0:	1885883a 	add	r2,r3,r2
1010ece4:	00000106 	br	1010ecec <read+0x40>
1010ece8:	0005883a 	mov	r2,zero
1010ecec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ecf0:	e0bffb17 	ldw	r2,-20(fp)
1010ecf4:	10002226 	beq	r2,zero,1010ed80 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ecf8:	e0bffb17 	ldw	r2,-20(fp)
1010ecfc:	10800217 	ldw	r2,8(r2)
1010ed00:	108000cc 	andi	r2,r2,3
1010ed04:	10800060 	cmpeqi	r2,r2,1
1010ed08:	1000181e 	bne	r2,zero,1010ed6c <read+0xc0>
        (fd->dev->read))
1010ed0c:	e0bffb17 	ldw	r2,-20(fp)
1010ed10:	10800017 	ldw	r2,0(r2)
1010ed14:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010ed18:	10001426 	beq	r2,zero,1010ed6c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010ed1c:	e0bffb17 	ldw	r2,-20(fp)
1010ed20:	10800017 	ldw	r2,0(r2)
1010ed24:	10800517 	ldw	r2,20(r2)
1010ed28:	e0ffff17 	ldw	r3,-4(fp)
1010ed2c:	180d883a 	mov	r6,r3
1010ed30:	e17ffe17 	ldw	r5,-8(fp)
1010ed34:	e13ffb17 	ldw	r4,-20(fp)
1010ed38:	103ee83a 	callr	r2
1010ed3c:	e0bffc15 	stw	r2,-16(fp)
1010ed40:	e0bffc17 	ldw	r2,-16(fp)
1010ed44:	1000070e 	bge	r2,zero,1010ed64 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010ed48:	010ec700 	call	1010ec70 <alt_get_errno>
1010ed4c:	1007883a 	mov	r3,r2
1010ed50:	e0bffc17 	ldw	r2,-16(fp)
1010ed54:	0085c83a 	sub	r2,zero,r2
1010ed58:	18800015 	stw	r2,0(r3)
          return -1;
1010ed5c:	00bfffc4 	movi	r2,-1
1010ed60:	00000c06 	br	1010ed94 <read+0xe8>
        }
        return rval;
1010ed64:	e0bffc17 	ldw	r2,-16(fp)
1010ed68:	00000a06 	br	1010ed94 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010ed6c:	010ec700 	call	1010ec70 <alt_get_errno>
1010ed70:	1007883a 	mov	r3,r2
1010ed74:	00800344 	movi	r2,13
1010ed78:	18800015 	stw	r2,0(r3)
1010ed7c:	00000406 	br	1010ed90 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010ed80:	010ec700 	call	1010ec70 <alt_get_errno>
1010ed84:	1007883a 	mov	r3,r2
1010ed88:	00801444 	movi	r2,81
1010ed8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010ed90:	00bfffc4 	movi	r2,-1
}
1010ed94:	e037883a 	mov	sp,fp
1010ed98:	dfc00117 	ldw	ra,4(sp)
1010ed9c:	df000017 	ldw	fp,0(sp)
1010eda0:	dec00204 	addi	sp,sp,8
1010eda4:	f800283a 	ret

1010eda8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010eda8:	defffe04 	addi	sp,sp,-8
1010edac:	df000115 	stw	fp,4(sp)
1010edb0:	df000104 	addi	fp,sp,4
1010edb4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010edb8:	e0bfff17 	ldw	r2,-4(fp)
1010edbc:	108000d0 	cmplti	r2,r2,3
1010edc0:	10000d1e 	bne	r2,zero,1010edf8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010edc4:	00840474 	movhi	r2,4113
1010edc8:	10871f04 	addi	r2,r2,7292
1010edcc:	e0ffff17 	ldw	r3,-4(fp)
1010edd0:	18c00324 	muli	r3,r3,12
1010edd4:	10c5883a 	add	r2,r2,r3
1010edd8:	10800204 	addi	r2,r2,8
1010eddc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010ede0:	00840474 	movhi	r2,4113
1010ede4:	10871f04 	addi	r2,r2,7292
1010ede8:	e0ffff17 	ldw	r3,-4(fp)
1010edec:	18c00324 	muli	r3,r3,12
1010edf0:	10c5883a 	add	r2,r2,r3
1010edf4:	10000015 	stw	zero,0(r2)
  }
}
1010edf8:	0001883a 	nop
1010edfc:	e037883a 	mov	sp,fp
1010ee00:	df000017 	ldw	fp,0(sp)
1010ee04:	dec00104 	addi	sp,sp,4
1010ee08:	f800283a 	ret

1010ee0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010ee0c:	defff904 	addi	sp,sp,-28
1010ee10:	df000615 	stw	fp,24(sp)
1010ee14:	df000604 	addi	fp,sp,24
1010ee18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ee1c:	0005303a 	rdctl	r2,status
1010ee20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ee24:	e0fffe17 	ldw	r3,-8(fp)
1010ee28:	00bfff84 	movi	r2,-2
1010ee2c:	1884703a 	and	r2,r3,r2
1010ee30:	1001703a 	wrctl	status,r2
  
  return context;
1010ee34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010ee38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010ee3c:	d0a00e17 	ldw	r2,-32712(gp)
1010ee40:	10c000c4 	addi	r3,r2,3
1010ee44:	00bfff04 	movi	r2,-4
1010ee48:	1884703a 	and	r2,r3,r2
1010ee4c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010ee50:	d0e00e17 	ldw	r3,-32712(gp)
1010ee54:	e0bfff17 	ldw	r2,-4(fp)
1010ee58:	1887883a 	add	r3,r3,r2
1010ee5c:	008404b4 	movhi	r2,4114
1010ee60:	10800004 	addi	r2,r2,0
1010ee64:	10c0062e 	bgeu	r2,r3,1010ee80 <sbrk+0x74>
1010ee68:	e0bffb17 	ldw	r2,-20(fp)
1010ee6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ee70:	e0bffa17 	ldw	r2,-24(fp)
1010ee74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010ee78:	00bfffc4 	movi	r2,-1
1010ee7c:	00000b06 	br	1010eeac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010ee80:	d0a00e17 	ldw	r2,-32712(gp)
1010ee84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010ee88:	d0e00e17 	ldw	r3,-32712(gp)
1010ee8c:	e0bfff17 	ldw	r2,-4(fp)
1010ee90:	1885883a 	add	r2,r3,r2
1010ee94:	d0a00e15 	stw	r2,-32712(gp)
1010ee98:	e0bffb17 	ldw	r2,-20(fp)
1010ee9c:	e0bffc15 	stw	r2,-16(fp)
1010eea0:	e0bffc17 	ldw	r2,-16(fp)
1010eea4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010eea8:	e0bffd17 	ldw	r2,-12(fp)
} 
1010eeac:	e037883a 	mov	sp,fp
1010eeb0:	df000017 	ldw	fp,0(sp)
1010eeb4:	dec00104 	addi	sp,sp,4
1010eeb8:	f800283a 	ret

1010eebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010eebc:	defffe04 	addi	sp,sp,-8
1010eec0:	dfc00115 	stw	ra,4(sp)
1010eec4:	df000015 	stw	fp,0(sp)
1010eec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eecc:	d0a00d17 	ldw	r2,-32716(gp)
1010eed0:	10000326 	beq	r2,zero,1010eee0 <alt_get_errno+0x24>
1010eed4:	d0a00d17 	ldw	r2,-32716(gp)
1010eed8:	103ee83a 	callr	r2
1010eedc:	00000106 	br	1010eee4 <alt_get_errno+0x28>
1010eee0:	d0a6fd04 	addi	r2,gp,-25612
}
1010eee4:	e037883a 	mov	sp,fp
1010eee8:	dfc00117 	ldw	ra,4(sp)
1010eeec:	df000017 	ldw	fp,0(sp)
1010eef0:	dec00204 	addi	sp,sp,8
1010eef4:	f800283a 	ret

1010eef8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010eef8:	defff904 	addi	sp,sp,-28
1010eefc:	dfc00615 	stw	ra,24(sp)
1010ef00:	df000515 	stw	fp,20(sp)
1010ef04:	df000504 	addi	fp,sp,20
1010ef08:	e13ffd15 	stw	r4,-12(fp)
1010ef0c:	e17ffe15 	stw	r5,-8(fp)
1010ef10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ef14:	e0bffd17 	ldw	r2,-12(fp)
1010ef18:	10000616 	blt	r2,zero,1010ef34 <write+0x3c>
1010ef1c:	e0bffd17 	ldw	r2,-12(fp)
1010ef20:	10c00324 	muli	r3,r2,12
1010ef24:	00840474 	movhi	r2,4113
1010ef28:	10871f04 	addi	r2,r2,7292
1010ef2c:	1885883a 	add	r2,r3,r2
1010ef30:	00000106 	br	1010ef38 <write+0x40>
1010ef34:	0005883a 	mov	r2,zero
1010ef38:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010ef3c:	e0bffb17 	ldw	r2,-20(fp)
1010ef40:	10002126 	beq	r2,zero,1010efc8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010ef44:	e0bffb17 	ldw	r2,-20(fp)
1010ef48:	10800217 	ldw	r2,8(r2)
1010ef4c:	108000cc 	andi	r2,r2,3
1010ef50:	10001826 	beq	r2,zero,1010efb4 <write+0xbc>
1010ef54:	e0bffb17 	ldw	r2,-20(fp)
1010ef58:	10800017 	ldw	r2,0(r2)
1010ef5c:	10800617 	ldw	r2,24(r2)
1010ef60:	10001426 	beq	r2,zero,1010efb4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010ef64:	e0bffb17 	ldw	r2,-20(fp)
1010ef68:	10800017 	ldw	r2,0(r2)
1010ef6c:	10800617 	ldw	r2,24(r2)
1010ef70:	e0ffff17 	ldw	r3,-4(fp)
1010ef74:	180d883a 	mov	r6,r3
1010ef78:	e17ffe17 	ldw	r5,-8(fp)
1010ef7c:	e13ffb17 	ldw	r4,-20(fp)
1010ef80:	103ee83a 	callr	r2
1010ef84:	e0bffc15 	stw	r2,-16(fp)
1010ef88:	e0bffc17 	ldw	r2,-16(fp)
1010ef8c:	1000070e 	bge	r2,zero,1010efac <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010ef90:	010eebc0 	call	1010eebc <alt_get_errno>
1010ef94:	1007883a 	mov	r3,r2
1010ef98:	e0bffc17 	ldw	r2,-16(fp)
1010ef9c:	0085c83a 	sub	r2,zero,r2
1010efa0:	18800015 	stw	r2,0(r3)
        return -1;
1010efa4:	00bfffc4 	movi	r2,-1
1010efa8:	00000c06 	br	1010efdc <write+0xe4>
      }
      return rval;
1010efac:	e0bffc17 	ldw	r2,-16(fp)
1010efb0:	00000a06 	br	1010efdc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010efb4:	010eebc0 	call	1010eebc <alt_get_errno>
1010efb8:	1007883a 	mov	r3,r2
1010efbc:	00800344 	movi	r2,13
1010efc0:	18800015 	stw	r2,0(r3)
1010efc4:	00000406 	br	1010efd8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010efc8:	010eebc0 	call	1010eebc <alt_get_errno>
1010efcc:	1007883a 	mov	r3,r2
1010efd0:	00801444 	movi	r2,81
1010efd4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010efd8:	00bfffc4 	movi	r2,-1
}
1010efdc:	e037883a 	mov	sp,fp
1010efe0:	dfc00117 	ldw	ra,4(sp)
1010efe4:	df000017 	ldw	fp,0(sp)
1010efe8:	dec00204 	addi	sp,sp,8
1010efec:	f800283a 	ret

1010eff0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010eff0:	defffd04 	addi	sp,sp,-12
1010eff4:	dfc00215 	stw	ra,8(sp)
1010eff8:	df000115 	stw	fp,4(sp)
1010effc:	df000104 	addi	fp,sp,4
1010f000:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010f004:	d1600a04 	addi	r5,gp,-32728
1010f008:	e13fff17 	ldw	r4,-4(fp)
1010f00c:	011014c0 	call	1011014c <alt_dev_llist_insert>
}
1010f010:	e037883a 	mov	sp,fp
1010f014:	dfc00117 	ldw	ra,4(sp)
1010f018:	df000017 	ldw	fp,0(sp)
1010f01c:	dec00204 	addi	sp,sp,8
1010f020:	f800283a 	ret

1010f024 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010f024:	defffd04 	addi	sp,sp,-12
1010f028:	dfc00215 	stw	ra,8(sp)
1010f02c:	df000115 	stw	fp,4(sp)
1010f030:	df000104 	addi	fp,sp,4
1010f034:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010f038:	0110b240 	call	10110b24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010f03c:	00800044 	movi	r2,1
1010f040:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010f044:	0001883a 	nop
1010f048:	e037883a 	mov	sp,fp
1010f04c:	dfc00117 	ldw	ra,4(sp)
1010f050:	df000017 	ldw	fp,0(sp)
1010f054:	dec00204 	addi	sp,sp,8
1010f058:	f800283a 	ret

1010f05c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010f05c:	defffe04 	addi	sp,sp,-8
1010f060:	dfc00115 	stw	ra,4(sp)
1010f064:	df000015 	stw	fp,0(sp)
1010f068:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010f06c:	01800044 	movi	r6,1
1010f070:	000b883a 	mov	r5,zero
1010f074:	01040474 	movhi	r4,4113
1010f078:	21078904 	addi	r4,r4,7716
1010f07c:	010f2140 	call	1010f214 <altera_avalon_jtag_uart_init>
1010f080:	01040474 	movhi	r4,4113
1010f084:	21077f04 	addi	r4,r4,7676
1010f088:	010eff00 	call	1010eff0 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010f08c:	01040474 	movhi	r4,4113
1010f090:	210b9704 	addi	r4,r4,11868
1010f094:	01104480 	call	10110448 <alt_fs_reg>
}
1010f098:	0001883a 	nop
1010f09c:	e037883a 	mov	sp,fp
1010f0a0:	dfc00117 	ldw	ra,4(sp)
1010f0a4:	df000017 	ldw	fp,0(sp)
1010f0a8:	dec00204 	addi	sp,sp,8
1010f0ac:	f800283a 	ret

1010f0b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f0b0:	defffa04 	addi	sp,sp,-24
1010f0b4:	dfc00515 	stw	ra,20(sp)
1010f0b8:	df000415 	stw	fp,16(sp)
1010f0bc:	df000404 	addi	fp,sp,16
1010f0c0:	e13ffd15 	stw	r4,-12(fp)
1010f0c4:	e17ffe15 	stw	r5,-8(fp)
1010f0c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f0cc:	e0bffd17 	ldw	r2,-12(fp)
1010f0d0:	10800017 	ldw	r2,0(r2)
1010f0d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f0d8:	e0bffc17 	ldw	r2,-16(fp)
1010f0dc:	10c00a04 	addi	r3,r2,40
1010f0e0:	e0bffd17 	ldw	r2,-12(fp)
1010f0e4:	10800217 	ldw	r2,8(r2)
1010f0e8:	100f883a 	mov	r7,r2
1010f0ec:	e1bfff17 	ldw	r6,-4(fp)
1010f0f0:	e17ffe17 	ldw	r5,-8(fp)
1010f0f4:	1809883a 	mov	r4,r3
1010f0f8:	010f6d80 	call	1010f6d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f0fc:	e037883a 	mov	sp,fp
1010f100:	dfc00117 	ldw	ra,4(sp)
1010f104:	df000017 	ldw	fp,0(sp)
1010f108:	dec00204 	addi	sp,sp,8
1010f10c:	f800283a 	ret

1010f110 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f110:	defffa04 	addi	sp,sp,-24
1010f114:	dfc00515 	stw	ra,20(sp)
1010f118:	df000415 	stw	fp,16(sp)
1010f11c:	df000404 	addi	fp,sp,16
1010f120:	e13ffd15 	stw	r4,-12(fp)
1010f124:	e17ffe15 	stw	r5,-8(fp)
1010f128:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f12c:	e0bffd17 	ldw	r2,-12(fp)
1010f130:	10800017 	ldw	r2,0(r2)
1010f134:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f138:	e0bffc17 	ldw	r2,-16(fp)
1010f13c:	10c00a04 	addi	r3,r2,40
1010f140:	e0bffd17 	ldw	r2,-12(fp)
1010f144:	10800217 	ldw	r2,8(r2)
1010f148:	100f883a 	mov	r7,r2
1010f14c:	e1bfff17 	ldw	r6,-4(fp)
1010f150:	e17ffe17 	ldw	r5,-8(fp)
1010f154:	1809883a 	mov	r4,r3
1010f158:	010f8f40 	call	1010f8f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f15c:	e037883a 	mov	sp,fp
1010f160:	dfc00117 	ldw	ra,4(sp)
1010f164:	df000017 	ldw	fp,0(sp)
1010f168:	dec00204 	addi	sp,sp,8
1010f16c:	f800283a 	ret

1010f170 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f170:	defffc04 	addi	sp,sp,-16
1010f174:	dfc00315 	stw	ra,12(sp)
1010f178:	df000215 	stw	fp,8(sp)
1010f17c:	df000204 	addi	fp,sp,8
1010f180:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f184:	e0bfff17 	ldw	r2,-4(fp)
1010f188:	10800017 	ldw	r2,0(r2)
1010f18c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f190:	e0bffe17 	ldw	r2,-8(fp)
1010f194:	10c00a04 	addi	r3,r2,40
1010f198:	e0bfff17 	ldw	r2,-4(fp)
1010f19c:	10800217 	ldw	r2,8(r2)
1010f1a0:	100b883a 	mov	r5,r2
1010f1a4:	1809883a 	mov	r4,r3
1010f1a8:	010f5800 	call	1010f580 <altera_avalon_jtag_uart_close>
}
1010f1ac:	e037883a 	mov	sp,fp
1010f1b0:	dfc00117 	ldw	ra,4(sp)
1010f1b4:	df000017 	ldw	fp,0(sp)
1010f1b8:	dec00204 	addi	sp,sp,8
1010f1bc:	f800283a 	ret

1010f1c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f1c0:	defffa04 	addi	sp,sp,-24
1010f1c4:	dfc00515 	stw	ra,20(sp)
1010f1c8:	df000415 	stw	fp,16(sp)
1010f1cc:	df000404 	addi	fp,sp,16
1010f1d0:	e13ffd15 	stw	r4,-12(fp)
1010f1d4:	e17ffe15 	stw	r5,-8(fp)
1010f1d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f1dc:	e0bffd17 	ldw	r2,-12(fp)
1010f1e0:	10800017 	ldw	r2,0(r2)
1010f1e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f1e8:	e0bffc17 	ldw	r2,-16(fp)
1010f1ec:	10800a04 	addi	r2,r2,40
1010f1f0:	e1bfff17 	ldw	r6,-4(fp)
1010f1f4:	e17ffe17 	ldw	r5,-8(fp)
1010f1f8:	1009883a 	mov	r4,r2
1010f1fc:	010f5e80 	call	1010f5e8 <altera_avalon_jtag_uart_ioctl>
}
1010f200:	e037883a 	mov	sp,fp
1010f204:	dfc00117 	ldw	ra,4(sp)
1010f208:	df000017 	ldw	fp,0(sp)
1010f20c:	dec00204 	addi	sp,sp,8
1010f210:	f800283a 	ret

1010f214 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f214:	defffa04 	addi	sp,sp,-24
1010f218:	dfc00515 	stw	ra,20(sp)
1010f21c:	df000415 	stw	fp,16(sp)
1010f220:	df000404 	addi	fp,sp,16
1010f224:	e13ffd15 	stw	r4,-12(fp)
1010f228:	e17ffe15 	stw	r5,-8(fp)
1010f22c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f230:	e0bffd17 	ldw	r2,-12(fp)
1010f234:	00c00044 	movi	r3,1
1010f238:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f23c:	e0bffd17 	ldw	r2,-12(fp)
1010f240:	10800017 	ldw	r2,0(r2)
1010f244:	10800104 	addi	r2,r2,4
1010f248:	1007883a 	mov	r3,r2
1010f24c:	e0bffd17 	ldw	r2,-12(fp)
1010f250:	10800817 	ldw	r2,32(r2)
1010f254:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f258:	e0bffe17 	ldw	r2,-8(fp)
1010f25c:	e0ffff17 	ldw	r3,-4(fp)
1010f260:	d8000015 	stw	zero,0(sp)
1010f264:	e1fffd17 	ldw	r7,-12(fp)
1010f268:	01840474 	movhi	r6,4113
1010f26c:	31bcb504 	addi	r6,r6,-3372
1010f270:	180b883a 	mov	r5,r3
1010f274:	1009883a 	mov	r4,r2
1010f278:	01105a00 	call	101105a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f27c:	e0bffd17 	ldw	r2,-12(fp)
1010f280:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f284:	e0bffd17 	ldw	r2,-12(fp)
1010f288:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f28c:	d0e70817 	ldw	r3,-25568(gp)
1010f290:	e1fffd17 	ldw	r7,-12(fp)
1010f294:	01840474 	movhi	r6,4113
1010f298:	31bd3804 	addi	r6,r6,-2848
1010f29c:	180b883a 	mov	r5,r3
1010f2a0:	1009883a 	mov	r4,r2
1010f2a4:	010ff9c0 	call	1010ff9c <alt_alarm_start>
1010f2a8:	1000040e 	bge	r2,zero,1010f2bc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f2ac:	e0fffd17 	ldw	r3,-12(fp)
1010f2b0:	00a00034 	movhi	r2,32768
1010f2b4:	10bfffc4 	addi	r2,r2,-1
1010f2b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f2bc:	0001883a 	nop
1010f2c0:	e037883a 	mov	sp,fp
1010f2c4:	dfc00117 	ldw	ra,4(sp)
1010f2c8:	df000017 	ldw	fp,0(sp)
1010f2cc:	dec00204 	addi	sp,sp,8
1010f2d0:	f800283a 	ret

1010f2d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f2d4:	defff804 	addi	sp,sp,-32
1010f2d8:	df000715 	stw	fp,28(sp)
1010f2dc:	df000704 	addi	fp,sp,28
1010f2e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f2e4:	e0bfff17 	ldw	r2,-4(fp)
1010f2e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010f2ec:	e0bffb17 	ldw	r2,-20(fp)
1010f2f0:	10800017 	ldw	r2,0(r2)
1010f2f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f2f8:	e0bffc17 	ldw	r2,-16(fp)
1010f2fc:	10800104 	addi	r2,r2,4
1010f300:	10800037 	ldwio	r2,0(r2)
1010f304:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010f308:	e0bffd17 	ldw	r2,-12(fp)
1010f30c:	1080c00c 	andi	r2,r2,768
1010f310:	10006d26 	beq	r2,zero,1010f4c8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010f314:	e0bffd17 	ldw	r2,-12(fp)
1010f318:	1080400c 	andi	r2,r2,256
1010f31c:	10003526 	beq	r2,zero,1010f3f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010f320:	00800074 	movhi	r2,1
1010f324:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f328:	e0bffb17 	ldw	r2,-20(fp)
1010f32c:	10800a17 	ldw	r2,40(r2)
1010f330:	10800044 	addi	r2,r2,1
1010f334:	1081ffcc 	andi	r2,r2,2047
1010f338:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010f33c:	e0bffb17 	ldw	r2,-20(fp)
1010f340:	10c00b17 	ldw	r3,44(r2)
1010f344:	e0bffe17 	ldw	r2,-8(fp)
1010f348:	18801526 	beq	r3,r2,1010f3a0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010f34c:	e0bffc17 	ldw	r2,-16(fp)
1010f350:	10800037 	ldwio	r2,0(r2)
1010f354:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010f358:	e0bff917 	ldw	r2,-28(fp)
1010f35c:	10a0000c 	andi	r2,r2,32768
1010f360:	10001126 	beq	r2,zero,1010f3a8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010f364:	e0bffb17 	ldw	r2,-20(fp)
1010f368:	10800a17 	ldw	r2,40(r2)
1010f36c:	e0fff917 	ldw	r3,-28(fp)
1010f370:	1809883a 	mov	r4,r3
1010f374:	e0fffb17 	ldw	r3,-20(fp)
1010f378:	1885883a 	add	r2,r3,r2
1010f37c:	10800e04 	addi	r2,r2,56
1010f380:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f384:	e0bffb17 	ldw	r2,-20(fp)
1010f388:	10800a17 	ldw	r2,40(r2)
1010f38c:	10800044 	addi	r2,r2,1
1010f390:	10c1ffcc 	andi	r3,r2,2047
1010f394:	e0bffb17 	ldw	r2,-20(fp)
1010f398:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010f39c:	003fe206 	br	1010f328 <__alt_data_end+0xfffef328>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010f3a0:	0001883a 	nop
1010f3a4:	00000106 	br	1010f3ac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010f3a8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010f3ac:	e0bff917 	ldw	r2,-28(fp)
1010f3b0:	10bfffec 	andhi	r2,r2,65535
1010f3b4:	10000f26 	beq	r2,zero,1010f3f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f3b8:	e0bffb17 	ldw	r2,-20(fp)
1010f3bc:	10c00817 	ldw	r3,32(r2)
1010f3c0:	00bfff84 	movi	r2,-2
1010f3c4:	1886703a 	and	r3,r3,r2
1010f3c8:	e0bffb17 	ldw	r2,-20(fp)
1010f3cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010f3d0:	e0bffc17 	ldw	r2,-16(fp)
1010f3d4:	10800104 	addi	r2,r2,4
1010f3d8:	1007883a 	mov	r3,r2
1010f3dc:	e0bffb17 	ldw	r2,-20(fp)
1010f3e0:	10800817 	ldw	r2,32(r2)
1010f3e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f3e8:	e0bffc17 	ldw	r2,-16(fp)
1010f3ec:	10800104 	addi	r2,r2,4
1010f3f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010f3f4:	e0bffd17 	ldw	r2,-12(fp)
1010f3f8:	1080800c 	andi	r2,r2,512
1010f3fc:	103fbe26 	beq	r2,zero,1010f2f8 <__alt_data_end+0xfffef2f8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010f400:	e0bffd17 	ldw	r2,-12(fp)
1010f404:	1004d43a 	srli	r2,r2,16
1010f408:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f40c:	00001406 	br	1010f460 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010f410:	e0bffc17 	ldw	r2,-16(fp)
1010f414:	e0fffb17 	ldw	r3,-20(fp)
1010f418:	18c00d17 	ldw	r3,52(r3)
1010f41c:	e13ffb17 	ldw	r4,-20(fp)
1010f420:	20c7883a 	add	r3,r4,r3
1010f424:	18c20e04 	addi	r3,r3,2104
1010f428:	18c00003 	ldbu	r3,0(r3)
1010f42c:	18c03fcc 	andi	r3,r3,255
1010f430:	18c0201c 	xori	r3,r3,128
1010f434:	18ffe004 	addi	r3,r3,-128
1010f438:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f43c:	e0bffb17 	ldw	r2,-20(fp)
1010f440:	10800d17 	ldw	r2,52(r2)
1010f444:	10800044 	addi	r2,r2,1
1010f448:	10c1ffcc 	andi	r3,r2,2047
1010f44c:	e0bffb17 	ldw	r2,-20(fp)
1010f450:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010f454:	e0bffa17 	ldw	r2,-24(fp)
1010f458:	10bfffc4 	addi	r2,r2,-1
1010f45c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f460:	e0bffa17 	ldw	r2,-24(fp)
1010f464:	10000526 	beq	r2,zero,1010f47c <altera_avalon_jtag_uart_irq+0x1a8>
1010f468:	e0bffb17 	ldw	r2,-20(fp)
1010f46c:	10c00d17 	ldw	r3,52(r2)
1010f470:	e0bffb17 	ldw	r2,-20(fp)
1010f474:	10800c17 	ldw	r2,48(r2)
1010f478:	18bfe51e 	bne	r3,r2,1010f410 <__alt_data_end+0xfffef410>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010f47c:	e0bffa17 	ldw	r2,-24(fp)
1010f480:	103f9d26 	beq	r2,zero,1010f2f8 <__alt_data_end+0xfffef2f8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f484:	e0bffb17 	ldw	r2,-20(fp)
1010f488:	10c00817 	ldw	r3,32(r2)
1010f48c:	00bfff44 	movi	r2,-3
1010f490:	1886703a 	and	r3,r3,r2
1010f494:	e0bffb17 	ldw	r2,-20(fp)
1010f498:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f49c:	e0bffb17 	ldw	r2,-20(fp)
1010f4a0:	10800017 	ldw	r2,0(r2)
1010f4a4:	10800104 	addi	r2,r2,4
1010f4a8:	1007883a 	mov	r3,r2
1010f4ac:	e0bffb17 	ldw	r2,-20(fp)
1010f4b0:	10800817 	ldw	r2,32(r2)
1010f4b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f4b8:	e0bffc17 	ldw	r2,-16(fp)
1010f4bc:	10800104 	addi	r2,r2,4
1010f4c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010f4c4:	003f8c06 	br	1010f2f8 <__alt_data_end+0xfffef2f8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010f4c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010f4cc:	0001883a 	nop
1010f4d0:	e037883a 	mov	sp,fp
1010f4d4:	df000017 	ldw	fp,0(sp)
1010f4d8:	dec00104 	addi	sp,sp,4
1010f4dc:	f800283a 	ret

1010f4e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010f4e0:	defff804 	addi	sp,sp,-32
1010f4e4:	df000715 	stw	fp,28(sp)
1010f4e8:	df000704 	addi	fp,sp,28
1010f4ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010f4f0:	e0bffb17 	ldw	r2,-20(fp)
1010f4f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010f4f8:	e0bff917 	ldw	r2,-28(fp)
1010f4fc:	10800017 	ldw	r2,0(r2)
1010f500:	10800104 	addi	r2,r2,4
1010f504:	10800037 	ldwio	r2,0(r2)
1010f508:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010f50c:	e0bffa17 	ldw	r2,-24(fp)
1010f510:	1081000c 	andi	r2,r2,1024
1010f514:	10000b26 	beq	r2,zero,1010f544 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010f518:	e0bff917 	ldw	r2,-28(fp)
1010f51c:	10800017 	ldw	r2,0(r2)
1010f520:	10800104 	addi	r2,r2,4
1010f524:	1007883a 	mov	r3,r2
1010f528:	e0bff917 	ldw	r2,-28(fp)
1010f52c:	10800817 	ldw	r2,32(r2)
1010f530:	10810014 	ori	r2,r2,1024
1010f534:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f538:	e0bff917 	ldw	r2,-28(fp)
1010f53c:	10000915 	stw	zero,36(r2)
1010f540:	00000a06 	br	1010f56c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f544:	e0bff917 	ldw	r2,-28(fp)
1010f548:	10c00917 	ldw	r3,36(r2)
1010f54c:	00a00034 	movhi	r2,32768
1010f550:	10bfff04 	addi	r2,r2,-4
1010f554:	10c00536 	bltu	r2,r3,1010f56c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f558:	e0bff917 	ldw	r2,-28(fp)
1010f55c:	10800917 	ldw	r2,36(r2)
1010f560:	10c00044 	addi	r3,r2,1
1010f564:	e0bff917 	ldw	r2,-28(fp)
1010f568:	10c00915 	stw	r3,36(r2)
1010f56c:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f570:	e037883a 	mov	sp,fp
1010f574:	df000017 	ldw	fp,0(sp)
1010f578:	dec00104 	addi	sp,sp,4
1010f57c:	f800283a 	ret

1010f580 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f580:	defffd04 	addi	sp,sp,-12
1010f584:	df000215 	stw	fp,8(sp)
1010f588:	df000204 	addi	fp,sp,8
1010f58c:	e13ffe15 	stw	r4,-8(fp)
1010f590:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f594:	00000506 	br	1010f5ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f598:	e0bfff17 	ldw	r2,-4(fp)
1010f59c:	1090000c 	andi	r2,r2,16384
1010f5a0:	10000226 	beq	r2,zero,1010f5ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f5a4:	00bffd44 	movi	r2,-11
1010f5a8:	00000b06 	br	1010f5d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f5ac:	e0bffe17 	ldw	r2,-8(fp)
1010f5b0:	10c00d17 	ldw	r3,52(r2)
1010f5b4:	e0bffe17 	ldw	r2,-8(fp)
1010f5b8:	10800c17 	ldw	r2,48(r2)
1010f5bc:	18800526 	beq	r3,r2,1010f5d4 <altera_avalon_jtag_uart_close+0x54>
1010f5c0:	e0bffe17 	ldw	r2,-8(fp)
1010f5c4:	10c00917 	ldw	r3,36(r2)
1010f5c8:	e0bffe17 	ldw	r2,-8(fp)
1010f5cc:	10800117 	ldw	r2,4(r2)
1010f5d0:	18bff136 	bltu	r3,r2,1010f598 <__alt_data_end+0xfffef598>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f5d4:	0005883a 	mov	r2,zero
}
1010f5d8:	e037883a 	mov	sp,fp
1010f5dc:	df000017 	ldw	fp,0(sp)
1010f5e0:	dec00104 	addi	sp,sp,4
1010f5e4:	f800283a 	ret

1010f5e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f5e8:	defffa04 	addi	sp,sp,-24
1010f5ec:	df000515 	stw	fp,20(sp)
1010f5f0:	df000504 	addi	fp,sp,20
1010f5f4:	e13ffd15 	stw	r4,-12(fp)
1010f5f8:	e17ffe15 	stw	r5,-8(fp)
1010f5fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010f600:	00bff9c4 	movi	r2,-25
1010f604:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010f608:	e0bffe17 	ldw	r2,-8(fp)
1010f60c:	10da8060 	cmpeqi	r3,r2,27137
1010f610:	1800031e 	bne	r3,zero,1010f620 <altera_avalon_jtag_uart_ioctl+0x38>
1010f614:	109a80a0 	cmpeqi	r2,r2,27138
1010f618:	1000181e 	bne	r2,zero,1010f67c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010f61c:	00002906 	br	1010f6c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010f620:	e0bffd17 	ldw	r2,-12(fp)
1010f624:	10c00117 	ldw	r3,4(r2)
1010f628:	00a00034 	movhi	r2,32768
1010f62c:	10bfffc4 	addi	r2,r2,-1
1010f630:	18802126 	beq	r3,r2,1010f6b8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010f634:	e0bfff17 	ldw	r2,-4(fp)
1010f638:	10800017 	ldw	r2,0(r2)
1010f63c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010f640:	e0bffc17 	ldw	r2,-16(fp)
1010f644:	10800090 	cmplti	r2,r2,2
1010f648:	1000061e 	bne	r2,zero,1010f664 <altera_avalon_jtag_uart_ioctl+0x7c>
1010f64c:	e0fffc17 	ldw	r3,-16(fp)
1010f650:	00a00034 	movhi	r2,32768
1010f654:	10bfffc4 	addi	r2,r2,-1
1010f658:	18800226 	beq	r3,r2,1010f664 <altera_avalon_jtag_uart_ioctl+0x7c>
1010f65c:	e0bffc17 	ldw	r2,-16(fp)
1010f660:	00000206 	br	1010f66c <altera_avalon_jtag_uart_ioctl+0x84>
1010f664:	00a00034 	movhi	r2,32768
1010f668:	10bfff84 	addi	r2,r2,-2
1010f66c:	e0fffd17 	ldw	r3,-12(fp)
1010f670:	18800115 	stw	r2,4(r3)
      rc = 0;
1010f674:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f678:	00000f06 	br	1010f6b8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010f67c:	e0bffd17 	ldw	r2,-12(fp)
1010f680:	10c00117 	ldw	r3,4(r2)
1010f684:	00a00034 	movhi	r2,32768
1010f688:	10bfffc4 	addi	r2,r2,-1
1010f68c:	18800c26 	beq	r3,r2,1010f6c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010f690:	e0bffd17 	ldw	r2,-12(fp)
1010f694:	10c00917 	ldw	r3,36(r2)
1010f698:	e0bffd17 	ldw	r2,-12(fp)
1010f69c:	10800117 	ldw	r2,4(r2)
1010f6a0:	1885803a 	cmpltu	r2,r3,r2
1010f6a4:	10c03fcc 	andi	r3,r2,255
1010f6a8:	e0bfff17 	ldw	r2,-4(fp)
1010f6ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010f6b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f6b4:	00000206 	br	1010f6c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010f6b8:	0001883a 	nop
1010f6bc:	00000106 	br	1010f6c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010f6c0:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010f6c4:	e0bffb17 	ldw	r2,-20(fp)
}
1010f6c8:	e037883a 	mov	sp,fp
1010f6cc:	df000017 	ldw	fp,0(sp)
1010f6d0:	dec00104 	addi	sp,sp,4
1010f6d4:	f800283a 	ret

1010f6d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010f6d8:	defff304 	addi	sp,sp,-52
1010f6dc:	dfc00c15 	stw	ra,48(sp)
1010f6e0:	df000b15 	stw	fp,44(sp)
1010f6e4:	df000b04 	addi	fp,sp,44
1010f6e8:	e13ffc15 	stw	r4,-16(fp)
1010f6ec:	e17ffd15 	stw	r5,-12(fp)
1010f6f0:	e1bffe15 	stw	r6,-8(fp)
1010f6f4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010f6f8:	e0bffd17 	ldw	r2,-12(fp)
1010f6fc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f700:	00004706 	br	1010f820 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010f704:	e0bffc17 	ldw	r2,-16(fp)
1010f708:	10800a17 	ldw	r2,40(r2)
1010f70c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010f710:	e0bffc17 	ldw	r2,-16(fp)
1010f714:	10800b17 	ldw	r2,44(r2)
1010f718:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010f71c:	e0fff717 	ldw	r3,-36(fp)
1010f720:	e0bff817 	ldw	r2,-32(fp)
1010f724:	18800536 	bltu	r3,r2,1010f73c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010f728:	e0fff717 	ldw	r3,-36(fp)
1010f72c:	e0bff817 	ldw	r2,-32(fp)
1010f730:	1885c83a 	sub	r2,r3,r2
1010f734:	e0bff615 	stw	r2,-40(fp)
1010f738:	00000406 	br	1010f74c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010f73c:	00c20004 	movi	r3,2048
1010f740:	e0bff817 	ldw	r2,-32(fp)
1010f744:	1885c83a 	sub	r2,r3,r2
1010f748:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f74c:	e0bff617 	ldw	r2,-40(fp)
1010f750:	10001e26 	beq	r2,zero,1010f7cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010f754:	e0fffe17 	ldw	r3,-8(fp)
1010f758:	e0bff617 	ldw	r2,-40(fp)
1010f75c:	1880022e 	bgeu	r3,r2,1010f768 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010f760:	e0bffe17 	ldw	r2,-8(fp)
1010f764:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010f768:	e0bffc17 	ldw	r2,-16(fp)
1010f76c:	10c00e04 	addi	r3,r2,56
1010f770:	e0bff817 	ldw	r2,-32(fp)
1010f774:	1885883a 	add	r2,r3,r2
1010f778:	e1bff617 	ldw	r6,-40(fp)
1010f77c:	100b883a 	mov	r5,r2
1010f780:	e13ff517 	ldw	r4,-44(fp)
1010f784:	01070680 	call	10107068 <memcpy>
      ptr   += n;
1010f788:	e0fff517 	ldw	r3,-44(fp)
1010f78c:	e0bff617 	ldw	r2,-40(fp)
1010f790:	1885883a 	add	r2,r3,r2
1010f794:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010f798:	e0fffe17 	ldw	r3,-8(fp)
1010f79c:	e0bff617 	ldw	r2,-40(fp)
1010f7a0:	1885c83a 	sub	r2,r3,r2
1010f7a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f7a8:	e0fff817 	ldw	r3,-32(fp)
1010f7ac:	e0bff617 	ldw	r2,-40(fp)
1010f7b0:	1885883a 	add	r2,r3,r2
1010f7b4:	10c1ffcc 	andi	r3,r2,2047
1010f7b8:	e0bffc17 	ldw	r2,-16(fp)
1010f7bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010f7c0:	e0bffe17 	ldw	r2,-8(fp)
1010f7c4:	00bfcf16 	blt	zero,r2,1010f704 <__alt_data_end+0xfffef704>
1010f7c8:	00000106 	br	1010f7d0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010f7cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010f7d0:	e0fff517 	ldw	r3,-44(fp)
1010f7d4:	e0bffd17 	ldw	r2,-12(fp)
1010f7d8:	1880141e 	bne	r3,r2,1010f82c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010f7dc:	e0bfff17 	ldw	r2,-4(fp)
1010f7e0:	1090000c 	andi	r2,r2,16384
1010f7e4:	1000131e 	bne	r2,zero,1010f834 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010f7e8:	0001883a 	nop
1010f7ec:	e0bffc17 	ldw	r2,-16(fp)
1010f7f0:	10c00a17 	ldw	r3,40(r2)
1010f7f4:	e0bff717 	ldw	r2,-36(fp)
1010f7f8:	1880051e 	bne	r3,r2,1010f810 <altera_avalon_jtag_uart_read+0x138>
1010f7fc:	e0bffc17 	ldw	r2,-16(fp)
1010f800:	10c00917 	ldw	r3,36(r2)
1010f804:	e0bffc17 	ldw	r2,-16(fp)
1010f808:	10800117 	ldw	r2,4(r2)
1010f80c:	18bff736 	bltu	r3,r2,1010f7ec <__alt_data_end+0xfffef7ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010f810:	e0bffc17 	ldw	r2,-16(fp)
1010f814:	10c00a17 	ldw	r3,40(r2)
1010f818:	e0bff717 	ldw	r2,-36(fp)
1010f81c:	18800726 	beq	r3,r2,1010f83c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010f820:	e0bffe17 	ldw	r2,-8(fp)
1010f824:	00bfb716 	blt	zero,r2,1010f704 <__alt_data_end+0xfffef704>
1010f828:	00000506 	br	1010f840 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010f82c:	0001883a 	nop
1010f830:	00000306 	br	1010f840 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010f834:	0001883a 	nop
1010f838:	00000106 	br	1010f840 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010f83c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010f840:	e0fff517 	ldw	r3,-44(fp)
1010f844:	e0bffd17 	ldw	r2,-12(fp)
1010f848:	18801826 	beq	r3,r2,1010f8ac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f84c:	0005303a 	rdctl	r2,status
1010f850:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f854:	e0fffb17 	ldw	r3,-20(fp)
1010f858:	00bfff84 	movi	r2,-2
1010f85c:	1884703a 	and	r2,r3,r2
1010f860:	1001703a 	wrctl	status,r2
  
  return context;
1010f864:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010f868:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f86c:	e0bffc17 	ldw	r2,-16(fp)
1010f870:	10800817 	ldw	r2,32(r2)
1010f874:	10c00054 	ori	r3,r2,1
1010f878:	e0bffc17 	ldw	r2,-16(fp)
1010f87c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f880:	e0bffc17 	ldw	r2,-16(fp)
1010f884:	10800017 	ldw	r2,0(r2)
1010f888:	10800104 	addi	r2,r2,4
1010f88c:	1007883a 	mov	r3,r2
1010f890:	e0bffc17 	ldw	r2,-16(fp)
1010f894:	10800817 	ldw	r2,32(r2)
1010f898:	18800035 	stwio	r2,0(r3)
1010f89c:	e0bffa17 	ldw	r2,-24(fp)
1010f8a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f8a4:	e0bff917 	ldw	r2,-28(fp)
1010f8a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010f8ac:	e0fff517 	ldw	r3,-44(fp)
1010f8b0:	e0bffd17 	ldw	r2,-12(fp)
1010f8b4:	18800426 	beq	r3,r2,1010f8c8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010f8b8:	e0fff517 	ldw	r3,-44(fp)
1010f8bc:	e0bffd17 	ldw	r2,-12(fp)
1010f8c0:	1885c83a 	sub	r2,r3,r2
1010f8c4:	00000606 	br	1010f8e0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010f8c8:	e0bfff17 	ldw	r2,-4(fp)
1010f8cc:	1090000c 	andi	r2,r2,16384
1010f8d0:	10000226 	beq	r2,zero,1010f8dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010f8d4:	00bffd44 	movi	r2,-11
1010f8d8:	00000106 	br	1010f8e0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010f8dc:	00bffec4 	movi	r2,-5
}
1010f8e0:	e037883a 	mov	sp,fp
1010f8e4:	dfc00117 	ldw	ra,4(sp)
1010f8e8:	df000017 	ldw	fp,0(sp)
1010f8ec:	dec00204 	addi	sp,sp,8
1010f8f0:	f800283a 	ret

1010f8f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010f8f4:	defff304 	addi	sp,sp,-52
1010f8f8:	dfc00c15 	stw	ra,48(sp)
1010f8fc:	df000b15 	stw	fp,44(sp)
1010f900:	df000b04 	addi	fp,sp,44
1010f904:	e13ffc15 	stw	r4,-16(fp)
1010f908:	e17ffd15 	stw	r5,-12(fp)
1010f90c:	e1bffe15 	stw	r6,-8(fp)
1010f910:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010f914:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010f918:	e0bffd17 	ldw	r2,-12(fp)
1010f91c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010f920:	00003706 	br	1010fa00 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010f924:	e0bffc17 	ldw	r2,-16(fp)
1010f928:	10800c17 	ldw	r2,48(r2)
1010f92c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010f930:	e0bffc17 	ldw	r2,-16(fp)
1010f934:	10800d17 	ldw	r2,52(r2)
1010f938:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010f93c:	e0fff917 	ldw	r3,-28(fp)
1010f940:	e0bff517 	ldw	r2,-44(fp)
1010f944:	1880062e 	bgeu	r3,r2,1010f960 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010f948:	e0fff517 	ldw	r3,-44(fp)
1010f94c:	e0bff917 	ldw	r2,-28(fp)
1010f950:	1885c83a 	sub	r2,r3,r2
1010f954:	10bfffc4 	addi	r2,r2,-1
1010f958:	e0bff615 	stw	r2,-40(fp)
1010f95c:	00000b06 	br	1010f98c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010f960:	e0bff517 	ldw	r2,-44(fp)
1010f964:	10000526 	beq	r2,zero,1010f97c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010f968:	00c20004 	movi	r3,2048
1010f96c:	e0bff917 	ldw	r2,-28(fp)
1010f970:	1885c83a 	sub	r2,r3,r2
1010f974:	e0bff615 	stw	r2,-40(fp)
1010f978:	00000406 	br	1010f98c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010f97c:	00c1ffc4 	movi	r3,2047
1010f980:	e0bff917 	ldw	r2,-28(fp)
1010f984:	1885c83a 	sub	r2,r3,r2
1010f988:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010f98c:	e0bff617 	ldw	r2,-40(fp)
1010f990:	10001e26 	beq	r2,zero,1010fa0c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010f994:	e0fffe17 	ldw	r3,-8(fp)
1010f998:	e0bff617 	ldw	r2,-40(fp)
1010f99c:	1880022e 	bgeu	r3,r2,1010f9a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010f9a0:	e0bffe17 	ldw	r2,-8(fp)
1010f9a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010f9a8:	e0bffc17 	ldw	r2,-16(fp)
1010f9ac:	10c20e04 	addi	r3,r2,2104
1010f9b0:	e0bff917 	ldw	r2,-28(fp)
1010f9b4:	1885883a 	add	r2,r3,r2
1010f9b8:	e1bff617 	ldw	r6,-40(fp)
1010f9bc:	e17ffd17 	ldw	r5,-12(fp)
1010f9c0:	1009883a 	mov	r4,r2
1010f9c4:	01070680 	call	10107068 <memcpy>
      ptr   += n;
1010f9c8:	e0fffd17 	ldw	r3,-12(fp)
1010f9cc:	e0bff617 	ldw	r2,-40(fp)
1010f9d0:	1885883a 	add	r2,r3,r2
1010f9d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010f9d8:	e0fffe17 	ldw	r3,-8(fp)
1010f9dc:	e0bff617 	ldw	r2,-40(fp)
1010f9e0:	1885c83a 	sub	r2,r3,r2
1010f9e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f9e8:	e0fff917 	ldw	r3,-28(fp)
1010f9ec:	e0bff617 	ldw	r2,-40(fp)
1010f9f0:	1885883a 	add	r2,r3,r2
1010f9f4:	10c1ffcc 	andi	r3,r2,2047
1010f9f8:	e0bffc17 	ldw	r2,-16(fp)
1010f9fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010fa00:	e0bffe17 	ldw	r2,-8(fp)
1010fa04:	00bfc716 	blt	zero,r2,1010f924 <__alt_data_end+0xfffef924>
1010fa08:	00000106 	br	1010fa10 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010fa0c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fa10:	0005303a 	rdctl	r2,status
1010fa14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fa18:	e0fffb17 	ldw	r3,-20(fp)
1010fa1c:	00bfff84 	movi	r2,-2
1010fa20:	1884703a 	and	r2,r3,r2
1010fa24:	1001703a 	wrctl	status,r2
  
  return context;
1010fa28:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010fa2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010fa30:	e0bffc17 	ldw	r2,-16(fp)
1010fa34:	10800817 	ldw	r2,32(r2)
1010fa38:	10c00094 	ori	r3,r2,2
1010fa3c:	e0bffc17 	ldw	r2,-16(fp)
1010fa40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fa44:	e0bffc17 	ldw	r2,-16(fp)
1010fa48:	10800017 	ldw	r2,0(r2)
1010fa4c:	10800104 	addi	r2,r2,4
1010fa50:	1007883a 	mov	r3,r2
1010fa54:	e0bffc17 	ldw	r2,-16(fp)
1010fa58:	10800817 	ldw	r2,32(r2)
1010fa5c:	18800035 	stwio	r2,0(r3)
1010fa60:	e0bffa17 	ldw	r2,-24(fp)
1010fa64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fa68:	e0bff817 	ldw	r2,-32(fp)
1010fa6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010fa70:	e0bffe17 	ldw	r2,-8(fp)
1010fa74:	0080100e 	bge	zero,r2,1010fab8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010fa78:	e0bfff17 	ldw	r2,-4(fp)
1010fa7c:	1090000c 	andi	r2,r2,16384
1010fa80:	1000101e 	bne	r2,zero,1010fac4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010fa84:	0001883a 	nop
1010fa88:	e0bffc17 	ldw	r2,-16(fp)
1010fa8c:	10c00d17 	ldw	r3,52(r2)
1010fa90:	e0bff517 	ldw	r2,-44(fp)
1010fa94:	1880051e 	bne	r3,r2,1010faac <altera_avalon_jtag_uart_write+0x1b8>
1010fa98:	e0bffc17 	ldw	r2,-16(fp)
1010fa9c:	10c00917 	ldw	r3,36(r2)
1010faa0:	e0bffc17 	ldw	r2,-16(fp)
1010faa4:	10800117 	ldw	r2,4(r2)
1010faa8:	18bff736 	bltu	r3,r2,1010fa88 <__alt_data_end+0xfffefa88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010faac:	e0bffc17 	ldw	r2,-16(fp)
1010fab0:	10800917 	ldw	r2,36(r2)
1010fab4:	1000051e 	bne	r2,zero,1010facc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010fab8:	e0bffe17 	ldw	r2,-8(fp)
1010fabc:	00bfd016 	blt	zero,r2,1010fa00 <__alt_data_end+0xfffefa00>
1010fac0:	00000306 	br	1010fad0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010fac4:	0001883a 	nop
1010fac8:	00000106 	br	1010fad0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010facc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010fad0:	e0fffd17 	ldw	r3,-12(fp)
1010fad4:	e0bff717 	ldw	r2,-36(fp)
1010fad8:	18800426 	beq	r3,r2,1010faec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010fadc:	e0fffd17 	ldw	r3,-12(fp)
1010fae0:	e0bff717 	ldw	r2,-36(fp)
1010fae4:	1885c83a 	sub	r2,r3,r2
1010fae8:	00000606 	br	1010fb04 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010faec:	e0bfff17 	ldw	r2,-4(fp)
1010faf0:	1090000c 	andi	r2,r2,16384
1010faf4:	10000226 	beq	r2,zero,1010fb00 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010faf8:	00bffd44 	movi	r2,-11
1010fafc:	00000106 	br	1010fb04 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010fb00:	00bffec4 	movi	r2,-5
}
1010fb04:	e037883a 	mov	sp,fp
1010fb08:	dfc00117 	ldw	ra,4(sp)
1010fb0c:	df000017 	ldw	fp,0(sp)
1010fb10:	dec00204 	addi	sp,sp,8
1010fb14:	f800283a 	ret

1010fb18 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010fb18:	defff404 	addi	sp,sp,-48
1010fb1c:	df000b15 	stw	fp,44(sp)
1010fb20:	df000b04 	addi	fp,sp,44
1010fb24:	e13ffc15 	stw	r4,-16(fp)
1010fb28:	e17ffd15 	stw	r5,-12(fp)
1010fb2c:	e1bffe15 	stw	r6,-8(fp)
1010fb30:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010fb34:	e0bffc17 	ldw	r2,-16(fp)
1010fb38:	10800017 	ldw	r2,0(r2)
1010fb3c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010fb40:	e0bff517 	ldw	r2,-44(fp)
1010fb44:	10800217 	ldw	r2,8(r2)
1010fb48:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010fb4c:	e0bff617 	ldw	r2,-40(fp)
1010fb50:	10bfffc4 	addi	r2,r2,-1
1010fb54:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010fb58:	e0bffb17 	ldw	r2,-20(fp)
1010fb5c:	10800044 	addi	r2,r2,1
1010fb60:	e0bffb15 	stw	r2,-20(fp)
1010fb64:	e0bffb17 	ldw	r2,-20(fp)
1010fb68:	10800003 	ldbu	r2,0(r2)
1010fb6c:	10803fcc 	andi	r2,r2,255
1010fb70:	1080201c 	xori	r2,r2,128
1010fb74:	10bfe004 	addi	r2,r2,-128
1010fb78:	103ff71e 	bne	r2,zero,1010fb58 <__alt_data_end+0xfffefb58>
    ;

  return ptr - string;
1010fb7c:	e0fffb17 	ldw	r3,-20(fp)
1010fb80:	e0bff617 	ldw	r2,-40(fp)
1010fb84:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010fb88:	10800044 	addi	r2,r2,1
1010fb8c:	1007883a 	mov	r3,r2
1010fb90:	e0bffd17 	ldw	r2,-12(fp)
1010fb94:	10c5883a 	add	r2,r2,r3
1010fb98:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010fb9c:	d0a00f04 	addi	r2,gp,-32708
1010fba0:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010fba4:	e0bffd17 	ldw	r2,-12(fp)
1010fba8:	1009883a 	mov	r4,r2
  r5 = flags;
1010fbac:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010fbb0:	e1bfff17 	ldw	r6,-4(fp)
1010fbb4:	e0bffd17 	ldw	r2,-12(fp)
1010fbb8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010fbbc:	e0bff917 	ldw	r2,-28(fp)
1010fbc0:	10bfffc4 	addi	r2,r2,-1
1010fbc4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010fbc8:	e0bffa17 	ldw	r2,-24(fp)
1010fbcc:	10800044 	addi	r2,r2,1
1010fbd0:	e0bffa15 	stw	r2,-24(fp)
1010fbd4:	e0bffa17 	ldw	r2,-24(fp)
1010fbd8:	10800003 	ldbu	r2,0(r2)
1010fbdc:	10803fcc 	andi	r2,r2,255
1010fbe0:	1080201c 	xori	r2,r2,128
1010fbe4:	10bfe004 	addi	r2,r2,-128
1010fbe8:	103ff71e 	bne	r2,zero,1010fbc8 <__alt_data_end+0xfffefbc8>
    ;

  return ptr - string;
1010fbec:	e1fffa17 	ldw	r7,-24(fp)
1010fbf0:	e0bff917 	ldw	r2,-28(fp)
1010fbf4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010fbf8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1010fbfc:	003da07a 	break	1

  handle = (void *)r2;
1010fc00:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1010fc04:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010fc08:	e0bff817 	ldw	r2,-32(fp)
1010fc0c:	1000031e 	bne	r2,zero,1010fc1c <alt_hostfs_open+0x104>
    fd->priv = handle;
1010fc10:	e0bffc17 	ldw	r2,-16(fp)
1010fc14:	e0fff717 	ldw	r3,-36(fp)
1010fc18:	10c00115 	stw	r3,4(r2)

  return -error;
1010fc1c:	e0bff817 	ldw	r2,-32(fp)
1010fc20:	0085c83a 	sub	r2,zero,r2
}
1010fc24:	e037883a 	mov	sp,fp
1010fc28:	df000017 	ldw	fp,0(sp)
1010fc2c:	dec00104 	addi	sp,sp,4
1010fc30:	f800283a 	ret

1010fc34 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1010fc34:	defffd04 	addi	sp,sp,-12
1010fc38:	df000215 	stw	fp,8(sp)
1010fc3c:	df000204 	addi	fp,sp,8
1010fc40:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1010fc44:	d0a01204 	addi	r2,gp,-32696
1010fc48:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fc4c:	e0bfff17 	ldw	r2,-4(fp)
1010fc50:	10800117 	ldw	r2,4(r2)
1010fc54:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1010fc58:	003da07a 	break	1

  error = r3;
1010fc5c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1010fc60:	e0bffe17 	ldw	r2,-8(fp)
1010fc64:	0085c83a 	sub	r2,zero,r2
}
1010fc68:	e037883a 	mov	sp,fp
1010fc6c:	df000017 	ldw	fp,0(sp)
1010fc70:	dec00104 	addi	sp,sp,4
1010fc74:	f800283a 	ret

1010fc78 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1010fc78:	defffa04 	addi	sp,sp,-24
1010fc7c:	df000515 	stw	fp,20(sp)
1010fc80:	df000504 	addi	fp,sp,20
1010fc84:	e13ffd15 	stw	r4,-12(fp)
1010fc88:	e17ffe15 	stw	r5,-8(fp)
1010fc8c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1010fc90:	d0a01504 	addi	r2,gp,-32684
1010fc94:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fc98:	e0bffd17 	ldw	r2,-12(fp)
1010fc9c:	10800117 	ldw	r2,4(r2)
1010fca0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010fca4:	e0bffe17 	ldw	r2,-8(fp)
1010fca8:	100b883a 	mov	r5,r2
  r6 = len;
1010fcac:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fcb0:	003da07a 	break	1

  rc = r2;
1010fcb4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fcb8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fcbc:	e0bffc17 	ldw	r2,-16(fp)
1010fcc0:	10000326 	beq	r2,zero,1010fcd0 <alt_hostfs_read+0x58>
1010fcc4:	e0bffc17 	ldw	r2,-16(fp)
1010fcc8:	0085c83a 	sub	r2,zero,r2
1010fccc:	00000106 	br	1010fcd4 <alt_hostfs_read+0x5c>
1010fcd0:	e0bffb17 	ldw	r2,-20(fp)
}
1010fcd4:	e037883a 	mov	sp,fp
1010fcd8:	df000017 	ldw	fp,0(sp)
1010fcdc:	dec00104 	addi	sp,sp,4
1010fce0:	f800283a 	ret

1010fce4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1010fce4:	defffa04 	addi	sp,sp,-24
1010fce8:	df000515 	stw	fp,20(sp)
1010fcec:	df000504 	addi	fp,sp,20
1010fcf0:	e13ffd15 	stw	r4,-12(fp)
1010fcf4:	e17ffe15 	stw	r5,-8(fp)
1010fcf8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010fcfc:	d0a01804 	addi	r2,gp,-32672
1010fd00:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fd04:	e0bffd17 	ldw	r2,-12(fp)
1010fd08:	10800117 	ldw	r2,4(r2)
1010fd0c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010fd10:	e0bffe17 	ldw	r2,-8(fp)
1010fd14:	100b883a 	mov	r5,r2
  r6 = len;
1010fd18:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fd1c:	003da07a 	break	1

  rc = r2;
1010fd20:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fd24:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fd28:	e0bffc17 	ldw	r2,-16(fp)
1010fd2c:	10000326 	beq	r2,zero,1010fd3c <alt_hostfs_write+0x58>
1010fd30:	e0bffc17 	ldw	r2,-16(fp)
1010fd34:	0085c83a 	sub	r2,zero,r2
1010fd38:	00000106 	br	1010fd40 <alt_hostfs_write+0x5c>
1010fd3c:	e0bffb17 	ldw	r2,-20(fp)
}
1010fd40:	e037883a 	mov	sp,fp
1010fd44:	df000017 	ldw	fp,0(sp)
1010fd48:	dec00104 	addi	sp,sp,4
1010fd4c:	f800283a 	ret

1010fd50 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1010fd50:	defffa04 	addi	sp,sp,-24
1010fd54:	df000515 	stw	fp,20(sp)
1010fd58:	df000504 	addi	fp,sp,20
1010fd5c:	e13ffd15 	stw	r4,-12(fp)
1010fd60:	e17ffe15 	stw	r5,-8(fp)
1010fd64:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010fd68:	d0a01b04 	addi	r2,gp,-32660
1010fd6c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fd70:	e0bffd17 	ldw	r2,-12(fp)
1010fd74:	10800117 	ldw	r2,4(r2)
1010fd78:	1009883a 	mov	r4,r2
  r5 = ptr;
1010fd7c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1010fd80:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010fd84:	003da07a 	break	1

  rc = r2;
1010fd88:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010fd8c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010fd90:	e0bffc17 	ldw	r2,-16(fp)
1010fd94:	10000326 	beq	r2,zero,1010fda4 <alt_hostfs_seek+0x54>
1010fd98:	e0bffc17 	ldw	r2,-16(fp)
1010fd9c:	0085c83a 	sub	r2,zero,r2
1010fda0:	00000106 	br	1010fda8 <alt_hostfs_seek+0x58>
1010fda4:	e0bffb17 	ldw	r2,-20(fp)
}
1010fda8:	e037883a 	mov	sp,fp
1010fdac:	df000017 	ldw	fp,0(sp)
1010fdb0:	dec00104 	addi	sp,sp,4
1010fdb4:	f800283a 	ret

1010fdb8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010fdb8:	deffe904 	addi	sp,sp,-92
1010fdbc:	df001615 	stw	fp,88(sp)
1010fdc0:	df001604 	addi	fp,sp,88
1010fdc4:	e13ffe15 	stw	r4,-8(fp)
1010fdc8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1010fdcc:	d0a01e04 	addi	r2,gp,-32648
1010fdd0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010fdd4:	e0bffe17 	ldw	r2,-8(fp)
1010fdd8:	10800117 	ldw	r2,4(r2)
1010fddc:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1010fde0:	e0bfee04 	addi	r2,fp,-72
1010fde4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010fde8:	003da07a 	break	1

  rc = r2;
1010fdec:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1010fdf0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1010fdf4:	e0bfec17 	ldw	r2,-80(fp)
1010fdf8:	1000621e 	bne	r2,zero,1010ff84 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1010fdfc:	e0bfee04 	addi	r2,fp,-72
1010fe00:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1010fe04:	e0bfea17 	ldw	r2,-88(fp)
1010fe08:	10801004 	addi	r2,r2,64
1010fe0c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010fe10:	00001606 	br	1010fe6c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fe14:	e0bfea17 	ldw	r2,-88(fp)
1010fe18:	10800017 	ldw	r2,0(r2)
1010fe1c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1010fe20:	e0bfea17 	ldw	r2,-88(fp)
1010fe24:	10800017 	ldw	r2,0(r2)
1010fe28:	10803fec 	andhi	r2,r2,255
1010fe2c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fe30:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010fe34:	e0bfea17 	ldw	r2,-88(fp)
1010fe38:	10800017 	ldw	r2,0(r2)
1010fe3c:	10bfc00c 	andi	r2,r2,65280
1010fe40:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1010fe44:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010fe48:	e0bfea17 	ldw	r2,-88(fp)
1010fe4c:	10800017 	ldw	r2,0(r2)
1010fe50:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010fe54:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010fe58:	e0bfea17 	ldw	r2,-88(fp)
1010fe5c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1010fe60:	e0bfea17 	ldw	r2,-88(fp)
1010fe64:	10800104 	addi	r2,r2,4
1010fe68:	e0bfea15 	stw	r2,-88(fp)
1010fe6c:	e0ffea17 	ldw	r3,-88(fp)
1010fe70:	e0bfed17 	ldw	r2,-76(fp)
1010fe74:	18bfe736 	bltu	r3,r2,1010fe14 <__alt_data_end+0xfffefe14>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010fe78:	e0bfff17 	ldw	r2,-4(fp)
1010fe7c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1010fe80:	e0bfea17 	ldw	r2,-88(fp)
1010fe84:	10800f04 	addi	r2,r2,60
1010fe88:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010fe8c:	00000506 	br	1010fea4 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1010fe90:	e0bfea17 	ldw	r2,-88(fp)
1010fe94:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010fe98:	e0bfea17 	ldw	r2,-88(fp)
1010fe9c:	10800104 	addi	r2,r2,4
1010fea0:	e0bfea15 	stw	r2,-88(fp)
1010fea4:	e0ffea17 	ldw	r3,-88(fp)
1010fea8:	e0bfed17 	ldw	r2,-76(fp)
1010feac:	18bff836 	bltu	r3,r2,1010fe90 <__alt_data_end+0xfffefe90>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1010feb0:	e0bfee17 	ldw	r2,-72(fp)
1010feb4:	1007883a 	mov	r3,r2
1010feb8:	e0bfff17 	ldw	r2,-4(fp)
1010febc:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1010fec0:	e0bfef17 	ldw	r2,-68(fp)
1010fec4:	1007883a 	mov	r3,r2
1010fec8:	e0bfff17 	ldw	r2,-4(fp)
1010fecc:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1010fed0:	e0fff017 	ldw	r3,-64(fp)
1010fed4:	e0bfff17 	ldw	r2,-4(fp)
1010fed8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
1010fedc:	e0bff117 	ldw	r2,-60(fp)
1010fee0:	1007883a 	mov	r3,r2
1010fee4:	e0bfff17 	ldw	r2,-4(fp)
1010fee8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1010feec:	e0bff217 	ldw	r2,-56(fp)
1010fef0:	1007883a 	mov	r3,r2
1010fef4:	e0bfff17 	ldw	r2,-4(fp)
1010fef8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1010fefc:	e0bff317 	ldw	r2,-52(fp)
1010ff00:	1007883a 	mov	r3,r2
1010ff04:	e0bfff17 	ldw	r2,-4(fp)
1010ff08:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1010ff0c:	e0bff417 	ldw	r2,-48(fp)
1010ff10:	1007883a 	mov	r3,r2
1010ff14:	e0bfff17 	ldw	r2,-4(fp)
1010ff18:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010ff1c:	e0bff617 	ldw	r2,-40(fp)
1010ff20:	1007883a 	mov	r3,r2
1010ff24:	e0bfff17 	ldw	r2,-4(fp)
1010ff28:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010ff2c:	e0bffb17 	ldw	r2,-20(fp)
1010ff30:	1007883a 	mov	r3,r2
1010ff34:	e0bfff17 	ldw	r2,-4(fp)
1010ff38:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010ff3c:	e0bffc17 	ldw	r2,-16(fp)
1010ff40:	1007883a 	mov	r3,r2
1010ff44:	e0bfff17 	ldw	r2,-4(fp)
1010ff48:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010ff4c:	e0bffd17 	ldw	r2,-12(fp)
1010ff50:	1007883a 	mov	r3,r2
1010ff54:	e0bfff17 	ldw	r2,-4(fp)
1010ff58:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010ff5c:	e0bff817 	ldw	r2,-32(fp)
1010ff60:	1007883a 	mov	r3,r2
1010ff64:	e0bfff17 	ldw	r2,-4(fp)
1010ff68:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010ff6c:	e0bffa17 	ldw	r2,-24(fp)
1010ff70:	1007883a 	mov	r3,r2
1010ff74:	e0bfff17 	ldw	r2,-4(fp)
1010ff78:	10c00c15 	stw	r3,48(r2)

    return rc;
1010ff7c:	e0bfeb17 	ldw	r2,-84(fp)
1010ff80:	00000206 	br	1010ff8c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1010ff84:	e0bfec17 	ldw	r2,-80(fp)
1010ff88:	0085c83a 	sub	r2,zero,r2
}
1010ff8c:	e037883a 	mov	sp,fp
1010ff90:	df000017 	ldw	fp,0(sp)
1010ff94:	dec00104 	addi	sp,sp,4
1010ff98:	f800283a 	ret

1010ff9c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010ff9c:	defff504 	addi	sp,sp,-44
1010ffa0:	df000a15 	stw	fp,40(sp)
1010ffa4:	df000a04 	addi	fp,sp,40
1010ffa8:	e13ffc15 	stw	r4,-16(fp)
1010ffac:	e17ffd15 	stw	r5,-12(fp)
1010ffb0:	e1bffe15 	stw	r6,-8(fp)
1010ffb4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010ffb8:	e03ff615 	stw	zero,-40(fp)
1010ffbc:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
1010ffc0:	10003c26 	beq	r2,zero,101100b4 <alt_alarm_start+0x118>
  {
    if (alarm)
1010ffc4:	e0bffc17 	ldw	r2,-16(fp)
1010ffc8:	10003826 	beq	r2,zero,101100ac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010ffcc:	e0bffc17 	ldw	r2,-16(fp)
1010ffd0:	e0fffe17 	ldw	r3,-8(fp)
1010ffd4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010ffd8:	e0bffc17 	ldw	r2,-16(fp)
1010ffdc:	e0ffff17 	ldw	r3,-4(fp)
1010ffe0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ffe4:	0005303a 	rdctl	r2,status
1010ffe8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ffec:	e0fff917 	ldw	r3,-28(fp)
1010fff0:	00bfff84 	movi	r2,-2
1010fff4:	1884703a 	and	r2,r3,r2
1010fff8:	1001703a 	wrctl	status,r2
  
  return context;
1010fffc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10110000:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10110004:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
10110008:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1011000c:	e0fffd17 	ldw	r3,-12(fp)
10110010:	e0bff617 	ldw	r2,-40(fp)
10110014:	1885883a 	add	r2,r3,r2
10110018:	10c00044 	addi	r3,r2,1
1011001c:	e0bffc17 	ldw	r2,-16(fp)
10110020:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10110024:	e0bffc17 	ldw	r2,-16(fp)
10110028:	10c00217 	ldw	r3,8(r2)
1011002c:	e0bff617 	ldw	r2,-40(fp)
10110030:	1880042e 	bgeu	r3,r2,10110044 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10110034:	e0bffc17 	ldw	r2,-16(fp)
10110038:	00c00044 	movi	r3,1
1011003c:	10c00405 	stb	r3,16(r2)
10110040:	00000206 	br	1011004c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10110044:	e0bffc17 	ldw	r2,-16(fp)
10110048:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1011004c:	e0bffc17 	ldw	r2,-16(fp)
10110050:	d0e02204 	addi	r3,gp,-32632
10110054:	e0fffa15 	stw	r3,-24(fp)
10110058:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1011005c:	e0bffb17 	ldw	r2,-20(fp)
10110060:	e0fffa17 	ldw	r3,-24(fp)
10110064:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110068:	e0bffa17 	ldw	r2,-24(fp)
1011006c:	10c00017 	ldw	r3,0(r2)
10110070:	e0bffb17 	ldw	r2,-20(fp)
10110074:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110078:	e0bffa17 	ldw	r2,-24(fp)
1011007c:	10800017 	ldw	r2,0(r2)
10110080:	e0fffb17 	ldw	r3,-20(fp)
10110084:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110088:	e0bffa17 	ldw	r2,-24(fp)
1011008c:	e0fffb17 	ldw	r3,-20(fp)
10110090:	10c00015 	stw	r3,0(r2)
10110094:	e0bff817 	ldw	r2,-32(fp)
10110098:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1011009c:	e0bff717 	ldw	r2,-36(fp)
101100a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101100a4:	0005883a 	mov	r2,zero
101100a8:	00000306 	br	101100b8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
101100ac:	00bffa84 	movi	r2,-22
101100b0:	00000106 	br	101100b8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
101100b4:	00bfde84 	movi	r2,-134
  }
}
101100b8:	e037883a 	mov	sp,fp
101100bc:	df000017 	ldw	fp,0(sp)
101100c0:	dec00104 	addi	sp,sp,4
101100c4:	f800283a 	ret

101100c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101100c8:	defffe04 	addi	sp,sp,-8
101100cc:	df000115 	stw	fp,4(sp)
101100d0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101100d4:	e03fff15 	stw	zero,-4(fp)
101100d8:	00000506 	br	101100f0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
101100dc:	e0bfff17 	ldw	r2,-4(fp)
101100e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101100e4:	e0bfff17 	ldw	r2,-4(fp)
101100e8:	10800804 	addi	r2,r2,32
101100ec:	e0bfff15 	stw	r2,-4(fp)
101100f0:	e0bfff17 	ldw	r2,-4(fp)
101100f4:	10820030 	cmpltui	r2,r2,2048
101100f8:	103ff81e 	bne	r2,zero,101100dc <__alt_data_end+0xffff00dc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101100fc:	0001883a 	nop
10110100:	e037883a 	mov	sp,fp
10110104:	df000017 	ldw	fp,0(sp)
10110108:	dec00104 	addi	sp,sp,4
1011010c:	f800283a 	ret

10110110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10110110:	defffe04 	addi	sp,sp,-8
10110114:	dfc00115 	stw	ra,4(sp)
10110118:	df000015 	stw	fp,0(sp)
1011011c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10110120:	d0a00d17 	ldw	r2,-32716(gp)
10110124:	10000326 	beq	r2,zero,10110134 <alt_get_errno+0x24>
10110128:	d0a00d17 	ldw	r2,-32716(gp)
1011012c:	103ee83a 	callr	r2
10110130:	00000106 	br	10110138 <alt_get_errno+0x28>
10110134:	d0a6fd04 	addi	r2,gp,-25612
}
10110138:	e037883a 	mov	sp,fp
1011013c:	dfc00117 	ldw	ra,4(sp)
10110140:	df000017 	ldw	fp,0(sp)
10110144:	dec00204 	addi	sp,sp,8
10110148:	f800283a 	ret

1011014c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1011014c:	defffa04 	addi	sp,sp,-24
10110150:	dfc00515 	stw	ra,20(sp)
10110154:	df000415 	stw	fp,16(sp)
10110158:	df000404 	addi	fp,sp,16
1011015c:	e13ffe15 	stw	r4,-8(fp)
10110160:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10110164:	e0bffe17 	ldw	r2,-8(fp)
10110168:	10000326 	beq	r2,zero,10110178 <alt_dev_llist_insert+0x2c>
1011016c:	e0bffe17 	ldw	r2,-8(fp)
10110170:	10800217 	ldw	r2,8(r2)
10110174:	1000061e 	bne	r2,zero,10110190 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10110178:	01101100 	call	10110110 <alt_get_errno>
1011017c:	1007883a 	mov	r3,r2
10110180:	00800584 	movi	r2,22
10110184:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10110188:	00bffa84 	movi	r2,-22
1011018c:	00001306 	br	101101dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10110190:	e0bffe17 	ldw	r2,-8(fp)
10110194:	e0ffff17 	ldw	r3,-4(fp)
10110198:	e0fffc15 	stw	r3,-16(fp)
1011019c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101101a0:	e0bffd17 	ldw	r2,-12(fp)
101101a4:	e0fffc17 	ldw	r3,-16(fp)
101101a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101101ac:	e0bffc17 	ldw	r2,-16(fp)
101101b0:	10c00017 	ldw	r3,0(r2)
101101b4:	e0bffd17 	ldw	r2,-12(fp)
101101b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101101bc:	e0bffc17 	ldw	r2,-16(fp)
101101c0:	10800017 	ldw	r2,0(r2)
101101c4:	e0fffd17 	ldw	r3,-12(fp)
101101c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101101cc:	e0bffc17 	ldw	r2,-16(fp)
101101d0:	e0fffd17 	ldw	r3,-12(fp)
101101d4:	10c00015 	stw	r3,0(r2)

  return 0;  
101101d8:	0005883a 	mov	r2,zero
}
101101dc:	e037883a 	mov	sp,fp
101101e0:	dfc00117 	ldw	ra,4(sp)
101101e4:	df000017 	ldw	fp,0(sp)
101101e8:	dec00204 	addi	sp,sp,8
101101ec:	f800283a 	ret

101101f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
101101f0:	defffd04 	addi	sp,sp,-12
101101f4:	dfc00215 	stw	ra,8(sp)
101101f8:	df000115 	stw	fp,4(sp)
101101fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110200:	00840474 	movhi	r2,4113
10110204:	1083f404 	addi	r2,r2,4048
10110208:	e0bfff15 	stw	r2,-4(fp)
1011020c:	00000606 	br	10110228 <_do_ctors+0x38>
        (*ctor) (); 
10110210:	e0bfff17 	ldw	r2,-4(fp)
10110214:	10800017 	ldw	r2,0(r2)
10110218:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1011021c:	e0bfff17 	ldw	r2,-4(fp)
10110220:	10bfff04 	addi	r2,r2,-4
10110224:	e0bfff15 	stw	r2,-4(fp)
10110228:	e0ffff17 	ldw	r3,-4(fp)
1011022c:	00840474 	movhi	r2,4113
10110230:	1083f504 	addi	r2,r2,4052
10110234:	18bff62e 	bgeu	r3,r2,10110210 <__alt_data_end+0xffff0210>
        (*ctor) (); 
}
10110238:	0001883a 	nop
1011023c:	e037883a 	mov	sp,fp
10110240:	dfc00117 	ldw	ra,4(sp)
10110244:	df000017 	ldw	fp,0(sp)
10110248:	dec00204 	addi	sp,sp,8
1011024c:	f800283a 	ret

10110250 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10110250:	defffd04 	addi	sp,sp,-12
10110254:	dfc00215 	stw	ra,8(sp)
10110258:	df000115 	stw	fp,4(sp)
1011025c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110260:	00840474 	movhi	r2,4113
10110264:	1083f404 	addi	r2,r2,4048
10110268:	e0bfff15 	stw	r2,-4(fp)
1011026c:	00000606 	br	10110288 <_do_dtors+0x38>
        (*dtor) (); 
10110270:	e0bfff17 	ldw	r2,-4(fp)
10110274:	10800017 	ldw	r2,0(r2)
10110278:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1011027c:	e0bfff17 	ldw	r2,-4(fp)
10110280:	10bfff04 	addi	r2,r2,-4
10110284:	e0bfff15 	stw	r2,-4(fp)
10110288:	e0ffff17 	ldw	r3,-4(fp)
1011028c:	00840474 	movhi	r2,4113
10110290:	1083f504 	addi	r2,r2,4052
10110294:	18bff62e 	bgeu	r3,r2,10110270 <__alt_data_end+0xffff0270>
        (*dtor) (); 
}
10110298:	0001883a 	nop
1011029c:	e037883a 	mov	sp,fp
101102a0:	dfc00117 	ldw	ra,4(sp)
101102a4:	df000017 	ldw	fp,0(sp)
101102a8:	dec00204 	addi	sp,sp,8
101102ac:	f800283a 	ret

101102b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
101102b0:	defffa04 	addi	sp,sp,-24
101102b4:	dfc00515 	stw	ra,20(sp)
101102b8:	df000415 	stw	fp,16(sp)
101102bc:	df000404 	addi	fp,sp,16
101102c0:	e13ffe15 	stw	r4,-8(fp)
101102c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
101102c8:	e0bfff17 	ldw	r2,-4(fp)
101102cc:	10800017 	ldw	r2,0(r2)
101102d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
101102d4:	e13ffe17 	ldw	r4,-8(fp)
101102d8:	01086600 	call	10108660 <strlen>
101102dc:	10800044 	addi	r2,r2,1
101102e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101102e4:	00000d06 	br	1011031c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
101102e8:	e0bffc17 	ldw	r2,-16(fp)
101102ec:	10800217 	ldw	r2,8(r2)
101102f0:	e0fffd17 	ldw	r3,-12(fp)
101102f4:	180d883a 	mov	r6,r3
101102f8:	e17ffe17 	ldw	r5,-8(fp)
101102fc:	1009883a 	mov	r4,r2
10110300:	0110cc00 	call	10110cc0 <memcmp>
10110304:	1000021e 	bne	r2,zero,10110310 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10110308:	e0bffc17 	ldw	r2,-16(fp)
1011030c:	00000706 	br	1011032c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10110310:	e0bffc17 	ldw	r2,-16(fp)
10110314:	10800017 	ldw	r2,0(r2)
10110318:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1011031c:	e0fffc17 	ldw	r3,-16(fp)
10110320:	e0bfff17 	ldw	r2,-4(fp)
10110324:	18bff01e 	bne	r3,r2,101102e8 <__alt_data_end+0xffff02e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10110328:	0005883a 	mov	r2,zero
}
1011032c:	e037883a 	mov	sp,fp
10110330:	dfc00117 	ldw	ra,4(sp)
10110334:	df000017 	ldw	fp,0(sp)
10110338:	dec00204 	addi	sp,sp,8
1011033c:	f800283a 	ret

10110340 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10110340:	defffb04 	addi	sp,sp,-20
10110344:	dfc00415 	stw	ra,16(sp)
10110348:	df000315 	stw	fp,12(sp)
1011034c:	df000304 	addi	fp,sp,12
10110350:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10110354:	d0a00817 	ldw	r2,-32736(gp)
10110358:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1011035c:	00003106 	br	10110424 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10110360:	e0bffd17 	ldw	r2,-12(fp)
10110364:	10800217 	ldw	r2,8(r2)
10110368:	1009883a 	mov	r4,r2
1011036c:	01086600 	call	10108660 <strlen>
10110370:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10110374:	e0bffd17 	ldw	r2,-12(fp)
10110378:	10c00217 	ldw	r3,8(r2)
1011037c:	e0bffe17 	ldw	r2,-8(fp)
10110380:	10bfffc4 	addi	r2,r2,-1
10110384:	1885883a 	add	r2,r3,r2
10110388:	10800003 	ldbu	r2,0(r2)
1011038c:	10803fcc 	andi	r2,r2,255
10110390:	1080201c 	xori	r2,r2,128
10110394:	10bfe004 	addi	r2,r2,-128
10110398:	10800bd8 	cmpnei	r2,r2,47
1011039c:	1000031e 	bne	r2,zero,101103ac <alt_find_file+0x6c>
    {
      len -= 1;
101103a0:	e0bffe17 	ldw	r2,-8(fp)
101103a4:	10bfffc4 	addi	r2,r2,-1
101103a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101103ac:	e0bffe17 	ldw	r2,-8(fp)
101103b0:	e0ffff17 	ldw	r3,-4(fp)
101103b4:	1885883a 	add	r2,r3,r2
101103b8:	10800003 	ldbu	r2,0(r2)
101103bc:	10803fcc 	andi	r2,r2,255
101103c0:	1080201c 	xori	r2,r2,128
101103c4:	10bfe004 	addi	r2,r2,-128
101103c8:	10800be0 	cmpeqi	r2,r2,47
101103cc:	1000081e 	bne	r2,zero,101103f0 <alt_find_file+0xb0>
101103d0:	e0bffe17 	ldw	r2,-8(fp)
101103d4:	e0ffff17 	ldw	r3,-4(fp)
101103d8:	1885883a 	add	r2,r3,r2
101103dc:	10800003 	ldbu	r2,0(r2)
101103e0:	10803fcc 	andi	r2,r2,255
101103e4:	1080201c 	xori	r2,r2,128
101103e8:	10bfe004 	addi	r2,r2,-128
101103ec:	10000a1e 	bne	r2,zero,10110418 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
101103f0:	e0bffd17 	ldw	r2,-12(fp)
101103f4:	10800217 	ldw	r2,8(r2)
101103f8:	e0fffe17 	ldw	r3,-8(fp)
101103fc:	180d883a 	mov	r6,r3
10110400:	e17fff17 	ldw	r5,-4(fp)
10110404:	1009883a 	mov	r4,r2
10110408:	0110cc00 	call	10110cc0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1011040c:	1000021e 	bne	r2,zero,10110418 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10110410:	e0bffd17 	ldw	r2,-12(fp)
10110414:	00000706 	br	10110434 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10110418:	e0bffd17 	ldw	r2,-12(fp)
1011041c:	10800017 	ldw	r2,0(r2)
10110420:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110424:	e0fffd17 	ldw	r3,-12(fp)
10110428:	d0a00804 	addi	r2,gp,-32736
1011042c:	18bfcc1e 	bne	r3,r2,10110360 <__alt_data_end+0xffff0360>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10110430:	0005883a 	mov	r2,zero
}
10110434:	e037883a 	mov	sp,fp
10110438:	dfc00117 	ldw	ra,4(sp)
1011043c:	df000017 	ldw	fp,0(sp)
10110440:	dec00204 	addi	sp,sp,8
10110444:	f800283a 	ret

10110448 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10110448:	defffc04 	addi	sp,sp,-16
1011044c:	df000315 	stw	fp,12(sp)
10110450:	df000304 	addi	fp,sp,12
10110454:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10110458:	e0bfff17 	ldw	r2,-4(fp)
1011045c:	10800217 	ldw	r2,8(r2)
10110460:	1000021e 	bne	r2,zero,1011046c <alt_fs_reg+0x24>
  {
    return -ENODEV;
10110464:	00bffb44 	movi	r2,-19
10110468:	00001306 	br	101104b8 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
1011046c:	e0bfff17 	ldw	r2,-4(fp)
10110470:	d0e00804 	addi	r3,gp,-32736
10110474:	e0fffd15 	stw	r3,-12(fp)
10110478:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1011047c:	e0bffe17 	ldw	r2,-8(fp)
10110480:	e0fffd17 	ldw	r3,-12(fp)
10110484:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110488:	e0bffd17 	ldw	r2,-12(fp)
1011048c:	10c00017 	ldw	r3,0(r2)
10110490:	e0bffe17 	ldw	r2,-8(fp)
10110494:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110498:	e0bffd17 	ldw	r2,-12(fp)
1011049c:	10800017 	ldw	r2,0(r2)
101104a0:	e0fffe17 	ldw	r3,-8(fp)
101104a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101104a8:	e0bffd17 	ldw	r2,-12(fp)
101104ac:	e0fffe17 	ldw	r3,-8(fp)
101104b0:	10c00015 	stw	r3,0(r2)

  return 0;
101104b4:	0005883a 	mov	r2,zero
} 
101104b8:	e037883a 	mov	sp,fp
101104bc:	df000017 	ldw	fp,0(sp)
101104c0:	dec00104 	addi	sp,sp,4
101104c4:	f800283a 	ret

101104c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101104c8:	defffc04 	addi	sp,sp,-16
101104cc:	df000315 	stw	fp,12(sp)
101104d0:	df000304 	addi	fp,sp,12
101104d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
101104d8:	00bffa04 	movi	r2,-24
101104dc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101104e0:	e03ffd15 	stw	zero,-12(fp)
101104e4:	00001906 	br	1011054c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
101104e8:	00840474 	movhi	r2,4113
101104ec:	10871f04 	addi	r2,r2,7292
101104f0:	e0fffd17 	ldw	r3,-12(fp)
101104f4:	18c00324 	muli	r3,r3,12
101104f8:	10c5883a 	add	r2,r2,r3
101104fc:	10800017 	ldw	r2,0(r2)
10110500:	10000f1e 	bne	r2,zero,10110540 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
10110504:	00840474 	movhi	r2,4113
10110508:	10871f04 	addi	r2,r2,7292
1011050c:	e0fffd17 	ldw	r3,-12(fp)
10110510:	18c00324 	muli	r3,r3,12
10110514:	10c5883a 	add	r2,r2,r3
10110518:	e0ffff17 	ldw	r3,-4(fp)
1011051c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110520:	d0e00c17 	ldw	r3,-32720(gp)
10110524:	e0bffd17 	ldw	r2,-12(fp)
10110528:	1880020e 	bge	r3,r2,10110534 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
1011052c:	e0bffd17 	ldw	r2,-12(fp)
10110530:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
10110534:	e0bffd17 	ldw	r2,-12(fp)
10110538:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1011053c:	00000606 	br	10110558 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110540:	e0bffd17 	ldw	r2,-12(fp)
10110544:	10800044 	addi	r2,r2,1
10110548:	e0bffd15 	stw	r2,-12(fp)
1011054c:	e0bffd17 	ldw	r2,-12(fp)
10110550:	10800810 	cmplti	r2,r2,32
10110554:	103fe41e 	bne	r2,zero,101104e8 <__alt_data_end+0xffff04e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110558:	e0bffe17 	ldw	r2,-8(fp)
}
1011055c:	e037883a 	mov	sp,fp
10110560:	df000017 	ldw	fp,0(sp)
10110564:	dec00104 	addi	sp,sp,4
10110568:	f800283a 	ret

1011056c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1011056c:	defffe04 	addi	sp,sp,-8
10110570:	dfc00115 	stw	ra,4(sp)
10110574:	df000015 	stw	fp,0(sp)
10110578:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1011057c:	01440004 	movi	r5,4096
10110580:	0009883a 	mov	r4,zero
10110584:	0110b480 	call	10110b48 <alt_icache_flush>
#endif
}
10110588:	0001883a 	nop
1011058c:	e037883a 	mov	sp,fp
10110590:	dfc00117 	ldw	ra,4(sp)
10110594:	df000017 	ldw	fp,0(sp)
10110598:	dec00204 	addi	sp,sp,8
1011059c:	f800283a 	ret

101105a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101105a0:	defff904 	addi	sp,sp,-28
101105a4:	dfc00615 	stw	ra,24(sp)
101105a8:	df000515 	stw	fp,20(sp)
101105ac:	df000504 	addi	fp,sp,20
101105b0:	e13ffc15 	stw	r4,-16(fp)
101105b4:	e17ffd15 	stw	r5,-12(fp)
101105b8:	e1bffe15 	stw	r6,-8(fp)
101105bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
101105c0:	e0800217 	ldw	r2,8(fp)
101105c4:	d8800015 	stw	r2,0(sp)
101105c8:	e1ffff17 	ldw	r7,-4(fp)
101105cc:	e1bffe17 	ldw	r6,-8(fp)
101105d0:	e17ffd17 	ldw	r5,-12(fp)
101105d4:	e13ffc17 	ldw	r4,-16(fp)
101105d8:	01107500 	call	10110750 <alt_iic_isr_register>
}  
101105dc:	e037883a 	mov	sp,fp
101105e0:	dfc00117 	ldw	ra,4(sp)
101105e4:	df000017 	ldw	fp,0(sp)
101105e8:	dec00204 	addi	sp,sp,8
101105ec:	f800283a 	ret

101105f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101105f0:	defff904 	addi	sp,sp,-28
101105f4:	df000615 	stw	fp,24(sp)
101105f8:	df000604 	addi	fp,sp,24
101105fc:	e13ffe15 	stw	r4,-8(fp)
10110600:	e17fff15 	stw	r5,-4(fp)
10110604:	e0bfff17 	ldw	r2,-4(fp)
10110608:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011060c:	0005303a 	rdctl	r2,status
10110610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110614:	e0fffb17 	ldw	r3,-20(fp)
10110618:	00bfff84 	movi	r2,-2
1011061c:	1884703a 	and	r2,r3,r2
10110620:	1001703a 	wrctl	status,r2
  
  return context;
10110624:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110628:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1011062c:	00c00044 	movi	r3,1
10110630:	e0bffa17 	ldw	r2,-24(fp)
10110634:	1884983a 	sll	r2,r3,r2
10110638:	1007883a 	mov	r3,r2
1011063c:	d0a70717 	ldw	r2,-25572(gp)
10110640:	1884b03a 	or	r2,r3,r2
10110644:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110648:	d0a70717 	ldw	r2,-25572(gp)
1011064c:	100170fa 	wrctl	ienable,r2
10110650:	e0bffc17 	ldw	r2,-16(fp)
10110654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110658:	e0bffd17 	ldw	r2,-12(fp)
1011065c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110660:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10110664:	0001883a 	nop
}
10110668:	e037883a 	mov	sp,fp
1011066c:	df000017 	ldw	fp,0(sp)
10110670:	dec00104 	addi	sp,sp,4
10110674:	f800283a 	ret

10110678 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110678:	defff904 	addi	sp,sp,-28
1011067c:	df000615 	stw	fp,24(sp)
10110680:	df000604 	addi	fp,sp,24
10110684:	e13ffe15 	stw	r4,-8(fp)
10110688:	e17fff15 	stw	r5,-4(fp)
1011068c:	e0bfff17 	ldw	r2,-4(fp)
10110690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110694:	0005303a 	rdctl	r2,status
10110698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1011069c:	e0fffb17 	ldw	r3,-20(fp)
101106a0:	00bfff84 	movi	r2,-2
101106a4:	1884703a 	and	r2,r3,r2
101106a8:	1001703a 	wrctl	status,r2
  
  return context;
101106ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101106b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
101106b4:	00c00044 	movi	r3,1
101106b8:	e0bffa17 	ldw	r2,-24(fp)
101106bc:	1884983a 	sll	r2,r3,r2
101106c0:	0084303a 	nor	r2,zero,r2
101106c4:	1007883a 	mov	r3,r2
101106c8:	d0a70717 	ldw	r2,-25572(gp)
101106cc:	1884703a 	and	r2,r3,r2
101106d0:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101106d4:	d0a70717 	ldw	r2,-25572(gp)
101106d8:	100170fa 	wrctl	ienable,r2
101106dc:	e0bffc17 	ldw	r2,-16(fp)
101106e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101106e4:	e0bffd17 	ldw	r2,-12(fp)
101106e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101106ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101106f0:	0001883a 	nop
}
101106f4:	e037883a 	mov	sp,fp
101106f8:	df000017 	ldw	fp,0(sp)
101106fc:	dec00104 	addi	sp,sp,4
10110700:	f800283a 	ret

10110704 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10110704:	defffc04 	addi	sp,sp,-16
10110708:	df000315 	stw	fp,12(sp)
1011070c:	df000304 	addi	fp,sp,12
10110710:	e13ffe15 	stw	r4,-8(fp)
10110714:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10110718:	000530fa 	rdctl	r2,ienable
1011071c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10110720:	00c00044 	movi	r3,1
10110724:	e0bfff17 	ldw	r2,-4(fp)
10110728:	1884983a 	sll	r2,r3,r2
1011072c:	1007883a 	mov	r3,r2
10110730:	e0bffd17 	ldw	r2,-12(fp)
10110734:	1884703a 	and	r2,r3,r2
10110738:	1004c03a 	cmpne	r2,r2,zero
1011073c:	10803fcc 	andi	r2,r2,255
}
10110740:	e037883a 	mov	sp,fp
10110744:	df000017 	ldw	fp,0(sp)
10110748:	dec00104 	addi	sp,sp,4
1011074c:	f800283a 	ret

10110750 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110750:	defff504 	addi	sp,sp,-44
10110754:	dfc00a15 	stw	ra,40(sp)
10110758:	df000915 	stw	fp,36(sp)
1011075c:	df000904 	addi	fp,sp,36
10110760:	e13ffc15 	stw	r4,-16(fp)
10110764:	e17ffd15 	stw	r5,-12(fp)
10110768:	e1bffe15 	stw	r6,-8(fp)
1011076c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110770:	00bffa84 	movi	r2,-22
10110774:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10110778:	e0bffd17 	ldw	r2,-12(fp)
1011077c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110780:	e0bff817 	ldw	r2,-32(fp)
10110784:	10800808 	cmpgei	r2,r2,32
10110788:	1000271e 	bne	r2,zero,10110828 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011078c:	0005303a 	rdctl	r2,status
10110790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110794:	e0fffb17 	ldw	r3,-20(fp)
10110798:	00bfff84 	movi	r2,-2
1011079c:	1884703a 	and	r2,r3,r2
101107a0:	1001703a 	wrctl	status,r2
  
  return context;
101107a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
101107a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
101107ac:	00840474 	movhi	r2,4113
101107b0:	1092b604 	addi	r2,r2,19160
101107b4:	e0fff817 	ldw	r3,-32(fp)
101107b8:	180690fa 	slli	r3,r3,3
101107bc:	10c5883a 	add	r2,r2,r3
101107c0:	e0fffe17 	ldw	r3,-8(fp)
101107c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
101107c8:	00840474 	movhi	r2,4113
101107cc:	1092b604 	addi	r2,r2,19160
101107d0:	e0fff817 	ldw	r3,-32(fp)
101107d4:	180690fa 	slli	r3,r3,3
101107d8:	10c5883a 	add	r2,r2,r3
101107dc:	10800104 	addi	r2,r2,4
101107e0:	e0ffff17 	ldw	r3,-4(fp)
101107e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101107e8:	e0bffe17 	ldw	r2,-8(fp)
101107ec:	10000526 	beq	r2,zero,10110804 <alt_iic_isr_register+0xb4>
101107f0:	e0bff817 	ldw	r2,-32(fp)
101107f4:	100b883a 	mov	r5,r2
101107f8:	e13ffc17 	ldw	r4,-16(fp)
101107fc:	01105f00 	call	101105f0 <alt_ic_irq_enable>
10110800:	00000406 	br	10110814 <alt_iic_isr_register+0xc4>
10110804:	e0bff817 	ldw	r2,-32(fp)
10110808:	100b883a 	mov	r5,r2
1011080c:	e13ffc17 	ldw	r4,-16(fp)
10110810:	01106780 	call	10110678 <alt_ic_irq_disable>
10110814:	e0bff715 	stw	r2,-36(fp)
10110818:	e0bffa17 	ldw	r2,-24(fp)
1011081c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110820:	e0bff917 	ldw	r2,-28(fp)
10110824:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10110828:	e0bff717 	ldw	r2,-36(fp)
}
1011082c:	e037883a 	mov	sp,fp
10110830:	dfc00117 	ldw	ra,4(sp)
10110834:	df000017 	ldw	fp,0(sp)
10110838:	dec00204 	addi	sp,sp,8
1011083c:	f800283a 	ret

10110840 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110840:	defff904 	addi	sp,sp,-28
10110844:	dfc00615 	stw	ra,24(sp)
10110848:	df000515 	stw	fp,20(sp)
1011084c:	df000504 	addi	fp,sp,20
10110850:	e13ffc15 	stw	r4,-16(fp)
10110854:	e17ffd15 	stw	r5,-12(fp)
10110858:	e1bffe15 	stw	r6,-8(fp)
1011085c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110860:	e1bfff17 	ldw	r6,-4(fp)
10110864:	e17ffe17 	ldw	r5,-8(fp)
10110868:	e13ffd17 	ldw	r4,-12(fp)
1011086c:	010eb1c0 	call	1010eb1c <open>
10110870:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110874:	e0bffb17 	ldw	r2,-20(fp)
10110878:	10001c16 	blt	r2,zero,101108ec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1011087c:	00840474 	movhi	r2,4113
10110880:	10871f04 	addi	r2,r2,7292
10110884:	e0fffb17 	ldw	r3,-20(fp)
10110888:	18c00324 	muli	r3,r3,12
1011088c:	10c5883a 	add	r2,r2,r3
10110890:	10c00017 	ldw	r3,0(r2)
10110894:	e0bffc17 	ldw	r2,-16(fp)
10110898:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1011089c:	00840474 	movhi	r2,4113
101108a0:	10871f04 	addi	r2,r2,7292
101108a4:	e0fffb17 	ldw	r3,-20(fp)
101108a8:	18c00324 	muli	r3,r3,12
101108ac:	10c5883a 	add	r2,r2,r3
101108b0:	10800104 	addi	r2,r2,4
101108b4:	10c00017 	ldw	r3,0(r2)
101108b8:	e0bffc17 	ldw	r2,-16(fp)
101108bc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
101108c0:	00840474 	movhi	r2,4113
101108c4:	10871f04 	addi	r2,r2,7292
101108c8:	e0fffb17 	ldw	r3,-20(fp)
101108cc:	18c00324 	muli	r3,r3,12
101108d0:	10c5883a 	add	r2,r2,r3
101108d4:	10800204 	addi	r2,r2,8
101108d8:	10c00017 	ldw	r3,0(r2)
101108dc:	e0bffc17 	ldw	r2,-16(fp)
101108e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101108e4:	e13ffb17 	ldw	r4,-20(fp)
101108e8:	010eda80 	call	1010eda8 <alt_release_fd>
  }
} 
101108ec:	0001883a 	nop
101108f0:	e037883a 	mov	sp,fp
101108f4:	dfc00117 	ldw	ra,4(sp)
101108f8:	df000017 	ldw	fp,0(sp)
101108fc:	dec00204 	addi	sp,sp,8
10110900:	f800283a 	ret

10110904 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10110904:	defffb04 	addi	sp,sp,-20
10110908:	dfc00415 	stw	ra,16(sp)
1011090c:	df000315 	stw	fp,12(sp)
10110910:	df000304 	addi	fp,sp,12
10110914:	e13ffd15 	stw	r4,-12(fp)
10110918:	e17ffe15 	stw	r5,-8(fp)
1011091c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10110920:	01c07fc4 	movi	r7,511
10110924:	01800044 	movi	r6,1
10110928:	e17ffd17 	ldw	r5,-12(fp)
1011092c:	01040474 	movhi	r4,4113
10110930:	21072204 	addi	r4,r4,7304
10110934:	01108400 	call	10110840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10110938:	01c07fc4 	movi	r7,511
1011093c:	000d883a 	mov	r6,zero
10110940:	e17ffe17 	ldw	r5,-8(fp)
10110944:	01040474 	movhi	r4,4113
10110948:	21071f04 	addi	r4,r4,7292
1011094c:	01108400 	call	10110840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110950:	01c07fc4 	movi	r7,511
10110954:	01800044 	movi	r6,1
10110958:	e17fff17 	ldw	r5,-4(fp)
1011095c:	01040474 	movhi	r4,4113
10110960:	21072504 	addi	r4,r4,7316
10110964:	01108400 	call	10110840 <alt_open_fd>
}  
10110968:	0001883a 	nop
1011096c:	e037883a 	mov	sp,fp
10110970:	dfc00117 	ldw	ra,4(sp)
10110974:	df000017 	ldw	fp,0(sp)
10110978:	dec00204 	addi	sp,sp,8
1011097c:	f800283a 	ret

10110980 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110980:	defffa04 	addi	sp,sp,-24
10110984:	df000515 	stw	fp,20(sp)
10110988:	df000504 	addi	fp,sp,20
1011098c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110990:	0005303a 	rdctl	r2,status
10110994:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110998:	e0fffc17 	ldw	r3,-16(fp)
1011099c:	00bfff84 	movi	r2,-2
101109a0:	1884703a 	and	r2,r3,r2
101109a4:	1001703a 	wrctl	status,r2
  
  return context;
101109a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
101109ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
101109b0:	e0bfff17 	ldw	r2,-4(fp)
101109b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
101109b8:	e0bffd17 	ldw	r2,-12(fp)
101109bc:	10800017 	ldw	r2,0(r2)
101109c0:	e0fffd17 	ldw	r3,-12(fp)
101109c4:	18c00117 	ldw	r3,4(r3)
101109c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101109cc:	e0bffd17 	ldw	r2,-12(fp)
101109d0:	10800117 	ldw	r2,4(r2)
101109d4:	e0fffd17 	ldw	r3,-12(fp)
101109d8:	18c00017 	ldw	r3,0(r3)
101109dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101109e0:	e0bffd17 	ldw	r2,-12(fp)
101109e4:	e0fffd17 	ldw	r3,-12(fp)
101109e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101109ec:	e0bffd17 	ldw	r2,-12(fp)
101109f0:	e0fffd17 	ldw	r3,-12(fp)
101109f4:	10c00015 	stw	r3,0(r2)
101109f8:	e0bffb17 	ldw	r2,-20(fp)
101109fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110a00:	e0bffe17 	ldw	r2,-8(fp)
10110a04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10110a08:	0001883a 	nop
10110a0c:	e037883a 	mov	sp,fp
10110a10:	df000017 	ldw	fp,0(sp)
10110a14:	dec00104 	addi	sp,sp,4
10110a18:	f800283a 	ret

10110a1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10110a1c:	defffb04 	addi	sp,sp,-20
10110a20:	dfc00415 	stw	ra,16(sp)
10110a24:	df000315 	stw	fp,12(sp)
10110a28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10110a2c:	d0a02217 	ldw	r2,-32632(gp)
10110a30:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10110a34:	d0a70917 	ldw	r2,-25564(gp)
10110a38:	10800044 	addi	r2,r2,1
10110a3c:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110a40:	00002e06 	br	10110afc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10110a44:	e0bffd17 	ldw	r2,-12(fp)
10110a48:	10800017 	ldw	r2,0(r2)
10110a4c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10110a50:	e0bffd17 	ldw	r2,-12(fp)
10110a54:	10800403 	ldbu	r2,16(r2)
10110a58:	10803fcc 	andi	r2,r2,255
10110a5c:	10000426 	beq	r2,zero,10110a70 <alt_tick+0x54>
10110a60:	d0a70917 	ldw	r2,-25564(gp)
10110a64:	1000021e 	bne	r2,zero,10110a70 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10110a68:	e0bffd17 	ldw	r2,-12(fp)
10110a6c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10110a70:	e0bffd17 	ldw	r2,-12(fp)
10110a74:	10800217 	ldw	r2,8(r2)
10110a78:	d0e70917 	ldw	r3,-25564(gp)
10110a7c:	18801d36 	bltu	r3,r2,10110af4 <alt_tick+0xd8>
10110a80:	e0bffd17 	ldw	r2,-12(fp)
10110a84:	10800403 	ldbu	r2,16(r2)
10110a88:	10803fcc 	andi	r2,r2,255
10110a8c:	1000191e 	bne	r2,zero,10110af4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10110a90:	e0bffd17 	ldw	r2,-12(fp)
10110a94:	10800317 	ldw	r2,12(r2)
10110a98:	e0fffd17 	ldw	r3,-12(fp)
10110a9c:	18c00517 	ldw	r3,20(r3)
10110aa0:	1809883a 	mov	r4,r3
10110aa4:	103ee83a 	callr	r2
10110aa8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10110aac:	e0bfff17 	ldw	r2,-4(fp)
10110ab0:	1000031e 	bne	r2,zero,10110ac0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10110ab4:	e13ffd17 	ldw	r4,-12(fp)
10110ab8:	01109800 	call	10110980 <alt_alarm_stop>
10110abc:	00000d06 	br	10110af4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10110ac0:	e0bffd17 	ldw	r2,-12(fp)
10110ac4:	10c00217 	ldw	r3,8(r2)
10110ac8:	e0bfff17 	ldw	r2,-4(fp)
10110acc:	1887883a 	add	r3,r3,r2
10110ad0:	e0bffd17 	ldw	r2,-12(fp)
10110ad4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10110ad8:	e0bffd17 	ldw	r2,-12(fp)
10110adc:	10c00217 	ldw	r3,8(r2)
10110ae0:	d0a70917 	ldw	r2,-25564(gp)
10110ae4:	1880032e 	bgeu	r3,r2,10110af4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10110ae8:	e0bffd17 	ldw	r2,-12(fp)
10110aec:	00c00044 	movi	r3,1
10110af0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10110af4:	e0bffe17 	ldw	r2,-8(fp)
10110af8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110afc:	e0fffd17 	ldw	r3,-12(fp)
10110b00:	d0a02204 	addi	r2,gp,-32632
10110b04:	18bfcf1e 	bne	r3,r2,10110a44 <__alt_data_end+0xffff0a44>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10110b08:	0001883a 	nop
}
10110b0c:	0001883a 	nop
10110b10:	e037883a 	mov	sp,fp
10110b14:	dfc00117 	ldw	ra,4(sp)
10110b18:	df000017 	ldw	fp,0(sp)
10110b1c:	dec00204 	addi	sp,sp,8
10110b20:	f800283a 	ret

10110b24 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10110b24:	deffff04 	addi	sp,sp,-4
10110b28:	df000015 	stw	fp,0(sp)
10110b2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10110b30:	000170fa 	wrctl	ienable,zero
}
10110b34:	0001883a 	nop
10110b38:	e037883a 	mov	sp,fp
10110b3c:	df000017 	ldw	fp,0(sp)
10110b40:	dec00104 	addi	sp,sp,4
10110b44:	f800283a 	ret

10110b48 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10110b48:	defffb04 	addi	sp,sp,-20
10110b4c:	df000415 	stw	fp,16(sp)
10110b50:	df000404 	addi	fp,sp,16
10110b54:	e13ffe15 	stw	r4,-8(fp)
10110b58:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10110b5c:	e0bfff17 	ldw	r2,-4(fp)
10110b60:	10840070 	cmpltui	r2,r2,4097
10110b64:	1000021e 	bne	r2,zero,10110b70 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10110b68:	00840004 	movi	r2,4096
10110b6c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10110b70:	e0fffe17 	ldw	r3,-8(fp)
10110b74:	e0bfff17 	ldw	r2,-4(fp)
10110b78:	1885883a 	add	r2,r3,r2
10110b7c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b80:	e0bffe17 	ldw	r2,-8(fp)
10110b84:	e0bffc15 	stw	r2,-16(fp)
10110b88:	00000506 	br	10110ba0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10110b8c:	e0bffc17 	ldw	r2,-16(fp)
10110b90:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b94:	e0bffc17 	ldw	r2,-16(fp)
10110b98:	10800804 	addi	r2,r2,32
10110b9c:	e0bffc15 	stw	r2,-16(fp)
10110ba0:	e0fffc17 	ldw	r3,-16(fp)
10110ba4:	e0bffd17 	ldw	r2,-12(fp)
10110ba8:	18bff836 	bltu	r3,r2,10110b8c <__alt_data_end+0xffff0b8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10110bac:	e0bffe17 	ldw	r2,-8(fp)
10110bb0:	108007cc 	andi	r2,r2,31
10110bb4:	10000226 	beq	r2,zero,10110bc0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10110bb8:	e0bffc17 	ldw	r2,-16(fp)
10110bbc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10110bc0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10110bc4:	0001883a 	nop
10110bc8:	e037883a 	mov	sp,fp
10110bcc:	df000017 	ldw	fp,0(sp)
10110bd0:	dec00104 	addi	sp,sp,4
10110bd4:	f800283a 	ret

10110bd8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10110bd8:	defffe04 	addi	sp,sp,-8
10110bdc:	df000115 	stw	fp,4(sp)
10110be0:	df000104 	addi	fp,sp,4
10110be4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110be8:	e0bfff17 	ldw	r2,-4(fp)
10110bec:	10bffe84 	addi	r2,r2,-6
10110bf0:	10c00428 	cmpgeui	r3,r2,16
10110bf4:	18001a1e 	bne	r3,zero,10110c60 <alt_exception_cause_generated_bad_addr+0x88>
10110bf8:	100690ba 	slli	r3,r2,2
10110bfc:	00840474 	movhi	r2,4113
10110c00:	10830404 	addi	r2,r2,3088
10110c04:	1885883a 	add	r2,r3,r2
10110c08:	10800017 	ldw	r2,0(r2)
10110c0c:	1000683a 	jmp	r2
10110c10:	10110c50 	cmplti	zero,r2,17457
10110c14:	10110c50 	cmplti	zero,r2,17457
10110c18:	10110c60 	cmpeqi	zero,r2,17457
10110c1c:	10110c60 	cmpeqi	zero,r2,17457
10110c20:	10110c60 	cmpeqi	zero,r2,17457
10110c24:	10110c50 	cmplti	zero,r2,17457
10110c28:	10110c58 	cmpnei	zero,r2,17457
10110c2c:	10110c60 	cmpeqi	zero,r2,17457
10110c30:	10110c50 	cmplti	zero,r2,17457
10110c34:	10110c50 	cmplti	zero,r2,17457
10110c38:	10110c60 	cmpeqi	zero,r2,17457
10110c3c:	10110c50 	cmplti	zero,r2,17457
10110c40:	10110c58 	cmpnei	zero,r2,17457
10110c44:	10110c60 	cmpeqi	zero,r2,17457
10110c48:	10110c60 	cmpeqi	zero,r2,17457
10110c4c:	10110c50 	cmplti	zero,r2,17457
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110c50:	00800044 	movi	r2,1
10110c54:	00000306 	br	10110c64 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110c58:	0005883a 	mov	r2,zero
10110c5c:	00000106 	br	10110c64 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110c60:	0005883a 	mov	r2,zero
  }
}
10110c64:	e037883a 	mov	sp,fp
10110c68:	df000017 	ldw	fp,0(sp)
10110c6c:	dec00104 	addi	sp,sp,4
10110c70:	f800283a 	ret

10110c74 <atexit>:
10110c74:	200b883a 	mov	r5,r4
10110c78:	000f883a 	mov	r7,zero
10110c7c:	000d883a 	mov	r6,zero
10110c80:	0009883a 	mov	r4,zero
10110c84:	0110d3c1 	jmpi	10110d3c <__register_exitproc>

10110c88 <exit>:
10110c88:	defffe04 	addi	sp,sp,-8
10110c8c:	000b883a 	mov	r5,zero
10110c90:	dc000015 	stw	r16,0(sp)
10110c94:	dfc00115 	stw	ra,4(sp)
10110c98:	2021883a 	mov	r16,r4
10110c9c:	0110e540 	call	10110e54 <__call_exitprocs>
10110ca0:	00840474 	movhi	r2,4113
10110ca4:	108ba304 	addi	r2,r2,11916
10110ca8:	11000017 	ldw	r4,0(r2)
10110cac:	20800f17 	ldw	r2,60(r4)
10110cb0:	10000126 	beq	r2,zero,10110cb8 <exit+0x30>
10110cb4:	103ee83a 	callr	r2
10110cb8:	8009883a 	mov	r4,r16
10110cbc:	010e3d00 	call	1010e3d0 <_exit>

10110cc0 <memcmp>:
10110cc0:	01c000c4 	movi	r7,3
10110cc4:	3980192e 	bgeu	r7,r6,10110d2c <memcmp+0x6c>
10110cc8:	2144b03a 	or	r2,r4,r5
10110ccc:	11c4703a 	and	r2,r2,r7
10110cd0:	10000f26 	beq	r2,zero,10110d10 <memcmp+0x50>
10110cd4:	20800003 	ldbu	r2,0(r4)
10110cd8:	28c00003 	ldbu	r3,0(r5)
10110cdc:	10c0151e 	bne	r2,r3,10110d34 <memcmp+0x74>
10110ce0:	31bfff84 	addi	r6,r6,-2
10110ce4:	01ffffc4 	movi	r7,-1
10110ce8:	00000406 	br	10110cfc <memcmp+0x3c>
10110cec:	20800003 	ldbu	r2,0(r4)
10110cf0:	28c00003 	ldbu	r3,0(r5)
10110cf4:	31bfffc4 	addi	r6,r6,-1
10110cf8:	10c00e1e 	bne	r2,r3,10110d34 <memcmp+0x74>
10110cfc:	21000044 	addi	r4,r4,1
10110d00:	29400044 	addi	r5,r5,1
10110d04:	31fff91e 	bne	r6,r7,10110cec <__alt_data_end+0xffff0cec>
10110d08:	0005883a 	mov	r2,zero
10110d0c:	f800283a 	ret
10110d10:	20c00017 	ldw	r3,0(r4)
10110d14:	28800017 	ldw	r2,0(r5)
10110d18:	18bfee1e 	bne	r3,r2,10110cd4 <__alt_data_end+0xffff0cd4>
10110d1c:	31bfff04 	addi	r6,r6,-4
10110d20:	21000104 	addi	r4,r4,4
10110d24:	29400104 	addi	r5,r5,4
10110d28:	39bff936 	bltu	r7,r6,10110d10 <__alt_data_end+0xffff0d10>
10110d2c:	303fe91e 	bne	r6,zero,10110cd4 <__alt_data_end+0xffff0cd4>
10110d30:	003ff506 	br	10110d08 <__alt_data_end+0xffff0d08>
10110d34:	10c5c83a 	sub	r2,r2,r3
10110d38:	f800283a 	ret

10110d3c <__register_exitproc>:
10110d3c:	defffa04 	addi	sp,sp,-24
10110d40:	dc000315 	stw	r16,12(sp)
10110d44:	04040474 	movhi	r16,4113
10110d48:	840ba304 	addi	r16,r16,11916
10110d4c:	80c00017 	ldw	r3,0(r16)
10110d50:	dc400415 	stw	r17,16(sp)
10110d54:	dfc00515 	stw	ra,20(sp)
10110d58:	18805217 	ldw	r2,328(r3)
10110d5c:	2023883a 	mov	r17,r4
10110d60:	10003726 	beq	r2,zero,10110e40 <__register_exitproc+0x104>
10110d64:	10c00117 	ldw	r3,4(r2)
10110d68:	010007c4 	movi	r4,31
10110d6c:	20c00e16 	blt	r4,r3,10110da8 <__register_exitproc+0x6c>
10110d70:	1a000044 	addi	r8,r3,1
10110d74:	8800221e 	bne	r17,zero,10110e00 <__register_exitproc+0xc4>
10110d78:	18c00084 	addi	r3,r3,2
10110d7c:	18c7883a 	add	r3,r3,r3
10110d80:	18c7883a 	add	r3,r3,r3
10110d84:	12000115 	stw	r8,4(r2)
10110d88:	10c7883a 	add	r3,r2,r3
10110d8c:	19400015 	stw	r5,0(r3)
10110d90:	0005883a 	mov	r2,zero
10110d94:	dfc00517 	ldw	ra,20(sp)
10110d98:	dc400417 	ldw	r17,16(sp)
10110d9c:	dc000317 	ldw	r16,12(sp)
10110da0:	dec00604 	addi	sp,sp,24
10110da4:	f800283a 	ret
10110da8:	00800034 	movhi	r2,0
10110dac:	10800004 	addi	r2,r2,0
10110db0:	10002626 	beq	r2,zero,10110e4c <__register_exitproc+0x110>
10110db4:	01006404 	movi	r4,400
10110db8:	d9400015 	stw	r5,0(sp)
10110dbc:	d9800115 	stw	r6,4(sp)
10110dc0:	d9c00215 	stw	r7,8(sp)
10110dc4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10110dc8:	d9400017 	ldw	r5,0(sp)
10110dcc:	d9800117 	ldw	r6,4(sp)
10110dd0:	d9c00217 	ldw	r7,8(sp)
10110dd4:	10001d26 	beq	r2,zero,10110e4c <__register_exitproc+0x110>
10110dd8:	81000017 	ldw	r4,0(r16)
10110ddc:	10000115 	stw	zero,4(r2)
10110de0:	02000044 	movi	r8,1
10110de4:	22405217 	ldw	r9,328(r4)
10110de8:	0007883a 	mov	r3,zero
10110dec:	12400015 	stw	r9,0(r2)
10110df0:	20805215 	stw	r2,328(r4)
10110df4:	10006215 	stw	zero,392(r2)
10110df8:	10006315 	stw	zero,396(r2)
10110dfc:	883fde26 	beq	r17,zero,10110d78 <__alt_data_end+0xffff0d78>
10110e00:	18c9883a 	add	r4,r3,r3
10110e04:	2109883a 	add	r4,r4,r4
10110e08:	1109883a 	add	r4,r2,r4
10110e0c:	21802215 	stw	r6,136(r4)
10110e10:	01800044 	movi	r6,1
10110e14:	12406217 	ldw	r9,392(r2)
10110e18:	30cc983a 	sll	r6,r6,r3
10110e1c:	4992b03a 	or	r9,r9,r6
10110e20:	12406215 	stw	r9,392(r2)
10110e24:	21c04215 	stw	r7,264(r4)
10110e28:	01000084 	movi	r4,2
10110e2c:	893fd21e 	bne	r17,r4,10110d78 <__alt_data_end+0xffff0d78>
10110e30:	11006317 	ldw	r4,396(r2)
10110e34:	218cb03a 	or	r6,r4,r6
10110e38:	11806315 	stw	r6,396(r2)
10110e3c:	003fce06 	br	10110d78 <__alt_data_end+0xffff0d78>
10110e40:	18805304 	addi	r2,r3,332
10110e44:	18805215 	stw	r2,328(r3)
10110e48:	003fc606 	br	10110d64 <__alt_data_end+0xffff0d64>
10110e4c:	00bfffc4 	movi	r2,-1
10110e50:	003fd006 	br	10110d94 <__alt_data_end+0xffff0d94>

10110e54 <__call_exitprocs>:
10110e54:	defff504 	addi	sp,sp,-44
10110e58:	df000915 	stw	fp,36(sp)
10110e5c:	dd400615 	stw	r21,24(sp)
10110e60:	dc800315 	stw	r18,12(sp)
10110e64:	dfc00a15 	stw	ra,40(sp)
10110e68:	ddc00815 	stw	r23,32(sp)
10110e6c:	dd800715 	stw	r22,28(sp)
10110e70:	dd000515 	stw	r20,20(sp)
10110e74:	dcc00415 	stw	r19,16(sp)
10110e78:	dc400215 	stw	r17,8(sp)
10110e7c:	dc000115 	stw	r16,4(sp)
10110e80:	d9000015 	stw	r4,0(sp)
10110e84:	2839883a 	mov	fp,r5
10110e88:	04800044 	movi	r18,1
10110e8c:	057fffc4 	movi	r21,-1
10110e90:	00840474 	movhi	r2,4113
10110e94:	108ba304 	addi	r2,r2,11916
10110e98:	12000017 	ldw	r8,0(r2)
10110e9c:	45005217 	ldw	r20,328(r8)
10110ea0:	44c05204 	addi	r19,r8,328
10110ea4:	a0001c26 	beq	r20,zero,10110f18 <__call_exitprocs+0xc4>
10110ea8:	a0800117 	ldw	r2,4(r20)
10110eac:	15ffffc4 	addi	r23,r2,-1
10110eb0:	b8000d16 	blt	r23,zero,10110ee8 <__call_exitprocs+0x94>
10110eb4:	14000044 	addi	r16,r2,1
10110eb8:	8421883a 	add	r16,r16,r16
10110ebc:	8421883a 	add	r16,r16,r16
10110ec0:	84402004 	addi	r17,r16,128
10110ec4:	a463883a 	add	r17,r20,r17
10110ec8:	a421883a 	add	r16,r20,r16
10110ecc:	e0001e26 	beq	fp,zero,10110f48 <__call_exitprocs+0xf4>
10110ed0:	80804017 	ldw	r2,256(r16)
10110ed4:	e0801c26 	beq	fp,r2,10110f48 <__call_exitprocs+0xf4>
10110ed8:	bdffffc4 	addi	r23,r23,-1
10110edc:	843fff04 	addi	r16,r16,-4
10110ee0:	8c7fff04 	addi	r17,r17,-4
10110ee4:	bd7ff91e 	bne	r23,r21,10110ecc <__alt_data_end+0xffff0ecc>
10110ee8:	00800034 	movhi	r2,0
10110eec:	10800004 	addi	r2,r2,0
10110ef0:	10000926 	beq	r2,zero,10110f18 <__call_exitprocs+0xc4>
10110ef4:	a0800117 	ldw	r2,4(r20)
10110ef8:	1000301e 	bne	r2,zero,10110fbc <__call_exitprocs+0x168>
10110efc:	a0800017 	ldw	r2,0(r20)
10110f00:	10003226 	beq	r2,zero,10110fcc <__call_exitprocs+0x178>
10110f04:	a009883a 	mov	r4,r20
10110f08:	98800015 	stw	r2,0(r19)
10110f0c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10110f10:	9d000017 	ldw	r20,0(r19)
10110f14:	a03fe41e 	bne	r20,zero,10110ea8 <__alt_data_end+0xffff0ea8>
10110f18:	dfc00a17 	ldw	ra,40(sp)
10110f1c:	df000917 	ldw	fp,36(sp)
10110f20:	ddc00817 	ldw	r23,32(sp)
10110f24:	dd800717 	ldw	r22,28(sp)
10110f28:	dd400617 	ldw	r21,24(sp)
10110f2c:	dd000517 	ldw	r20,20(sp)
10110f30:	dcc00417 	ldw	r19,16(sp)
10110f34:	dc800317 	ldw	r18,12(sp)
10110f38:	dc400217 	ldw	r17,8(sp)
10110f3c:	dc000117 	ldw	r16,4(sp)
10110f40:	dec00b04 	addi	sp,sp,44
10110f44:	f800283a 	ret
10110f48:	a0800117 	ldw	r2,4(r20)
10110f4c:	80c00017 	ldw	r3,0(r16)
10110f50:	10bfffc4 	addi	r2,r2,-1
10110f54:	15c01426 	beq	r2,r23,10110fa8 <__call_exitprocs+0x154>
10110f58:	80000015 	stw	zero,0(r16)
10110f5c:	183fde26 	beq	r3,zero,10110ed8 <__alt_data_end+0xffff0ed8>
10110f60:	95c8983a 	sll	r4,r18,r23
10110f64:	a0806217 	ldw	r2,392(r20)
10110f68:	a5800117 	ldw	r22,4(r20)
10110f6c:	2084703a 	and	r2,r4,r2
10110f70:	10000b26 	beq	r2,zero,10110fa0 <__call_exitprocs+0x14c>
10110f74:	a0806317 	ldw	r2,396(r20)
10110f78:	2088703a 	and	r4,r4,r2
10110f7c:	20000c1e 	bne	r4,zero,10110fb0 <__call_exitprocs+0x15c>
10110f80:	89400017 	ldw	r5,0(r17)
10110f84:	d9000017 	ldw	r4,0(sp)
10110f88:	183ee83a 	callr	r3
10110f8c:	a0800117 	ldw	r2,4(r20)
10110f90:	15bfbf1e 	bne	r2,r22,10110e90 <__alt_data_end+0xffff0e90>
10110f94:	98800017 	ldw	r2,0(r19)
10110f98:	153fcf26 	beq	r2,r20,10110ed8 <__alt_data_end+0xffff0ed8>
10110f9c:	003fbc06 	br	10110e90 <__alt_data_end+0xffff0e90>
10110fa0:	183ee83a 	callr	r3
10110fa4:	003ff906 	br	10110f8c <__alt_data_end+0xffff0f8c>
10110fa8:	a5c00115 	stw	r23,4(r20)
10110fac:	003feb06 	br	10110f5c <__alt_data_end+0xffff0f5c>
10110fb0:	89000017 	ldw	r4,0(r17)
10110fb4:	183ee83a 	callr	r3
10110fb8:	003ff406 	br	10110f8c <__alt_data_end+0xffff0f8c>
10110fbc:	a0800017 	ldw	r2,0(r20)
10110fc0:	a027883a 	mov	r19,r20
10110fc4:	1029883a 	mov	r20,r2
10110fc8:	003fb606 	br	10110ea4 <__alt_data_end+0xffff0ea4>
10110fcc:	0005883a 	mov	r2,zero
10110fd0:	003ffb06 	br	10110fc0 <__alt_data_end+0xffff0fc0>
